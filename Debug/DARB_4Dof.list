
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800deb0  0800deb0  0000eeb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4c8  0800e4c8  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4c8  0800e4c8  0000f4c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4d0  0800e4d0  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d0  0800e4d0  0000f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4d4  0800e4d4  0000f4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e4d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00005888  200001e0  200001e0  000101e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005a68  20005a68  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015342  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003313  00000000  00000000  0002554e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00028868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f23  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237bf  00000000  00000000  0002ab13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c54  00000000  00000000  0004e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7153  00000000  00000000  00064f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c079  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006918  00000000  00000000  0013c0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  001429d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de98 	.word	0x0800de98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800de98 	.word	0x0800de98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6178      	str	r0, [r7, #20]
 8000fec:	6139      	str	r1, [r7, #16]
 8000fee:	60fa      	str	r2, [r7, #12]
 8000ff0:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001006:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001038:	441a      	add	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa66 	bl	8000524 <__aeabi_i2d>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800105e:	f7ff fbf5 	bl	800084c <__aeabi_ddiv>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4614      	mov	r4, r2
 8001068:	461d      	mov	r5, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa57 	bl	8000524 <__aeabi_i2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	f7ff fbe5 	bl	800084c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <SpeedReadNonReset+0x118>)
 8001090:	f7ff fab2 	bl	80005f8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80010a4:	a31e      	add	r3, pc, #120	@ (adr r3, 8001120 <SpeedReadNonReset+0x108>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff faa5 	bl	80005f8 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010bc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001128 <SpeedReadNonReset+0x110>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4620      	mov	r0, r4
 80010cc:	4629      	mov	r1, r5
 80010ce:	f7ff f8dd 	bl	800028c <__adddf3>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4614      	mov	r4, r2
 80010d8:	461d      	mov	r5, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80010e0:	a311      	add	r3, pc, #68	@ (adr r3, 8001128 <SpeedReadNonReset+0x110>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa87 	bl	80005f8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff f8cb 	bl	800028c <__adddf3>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	enc->vel_Pre = enc->vel_Real;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	enc->count_Pre = enc->count_X4;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	611a      	str	r2, [r3, #16]
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	ced91687 	.word	0xced91687
 8001124:	3feb53f7 	.word	0x3feb53f7
 8001128:	532617c2 	.word	0x532617c2
 800112c:	3fb2a305 	.word	0x3fb2a305
 8001130:	404e0000 	.word	0x404e0000

08001134 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	b21a      	sxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800115e:	441a      	add	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24

	if (enc->count_Mode == count_ModeX4)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7e1b      	ldrb	r3, [r3, #24]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <CountRead+0x52>
	{
		return enc->count_X4;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9d2 	bl	8000524 <__aeabi_i2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	e033      	b.n	80011ee <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7e1b      	ldrb	r3, [r3, #24]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d110      	bne.n	80011b0 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da00      	bge.n	8001198 <CountRead+0x64>
 8001196:	3303      	adds	r3, #3
 8001198:	109b      	asrs	r3, r3, #2
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f9bd 	bl	8000524 <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e01e      	b.n	80011ee <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7e1b      	ldrb	r3, [r3, #24]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d116      	bne.n	80011e6 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80011c0:	fb03 f202 	mul.w	r2, r3, r2
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9a8 	bl	8000524 <__aeabi_i2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		return enc->Degree;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80011e4:	e003      	b.n	80011ee <CountRead+0xba>
	}else {
		return 0;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
	}
}
 80011ee:	ec43 2b17 	vmov	d7, r2, r3
 80011f2:	eeb0 0a47 	vmov.f32	s0, s14
 80011f6:	eef0 0a67 	vmov.f32	s1, s15
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24
		enc->count_X4 = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
	}
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bfb8      	it	lt
 8001248:	425b      	neglt	r3, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	da4d      	bge.n	80012fe <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <Drive+0x48>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34
 8001274:	e018      	b.n	80012a8 <Drive+0x7a>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b04      	cmp	r3, #4
 800127c:	d105      	bne.n	800128a <Drive+0x5c>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	6393      	str	r3, [r2, #56]	@ 0x38
 8001288:	e00e      	b.n	80012a8 <Drive+0x7a>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b08      	cmp	r3, #8
 8001290:	d105      	bne.n	800129e <Drive+0x70>
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2300      	movs	r3, #0
 800129a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800129c:	e004      	b.n	80012a8 <Drive+0x7a>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d106      	bne.n	80012be <Drive+0x90>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	89da      	ldrh	r2, [r3, #14]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	635a      	str	r2, [r3, #52]	@ 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80012bc:	e0b7      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d107      	bne.n	80012d6 <Drive+0xa8>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	89d9      	ldrh	r1, [r3, #14]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	460b      	mov	r3, r1
 80012d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80012d4:	e0ab      	b.n	800142e <Drive+0x200>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d107      	bne.n	80012ee <Drive+0xc0>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	89d9      	ldrh	r1, [r3, #14]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	460b      	mov	r3, r1
 80012ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80012ec:	e09f      	b.n	800142e <Drive+0x200>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	89d9      	ldrh	r1, [r3, #14]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	460b      	mov	r3, r1
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012fc:	e097      	b.n	800142e <Drive+0x200>
	else if(Input>0){
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd4d      	ble.n	80013a0 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <Drive+0xec>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	89da      	ldrh	r2, [r3, #14]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34
 8001318:	e01e      	b.n	8001358 <Drive+0x12a>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d107      	bne.n	8001332 <Drive+0x104>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	89d9      	ldrh	r1, [r3, #14]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	460b      	mov	r3, r1
 800132e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001330:	e012      	b.n	8001358 <Drive+0x12a>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b08      	cmp	r3, #8
 8001338:	d107      	bne.n	800134a <Drive+0x11c>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	89d9      	ldrh	r1, [r3, #14]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	460b      	mov	r3, r1
 8001346:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001348:	e006      	b.n	8001358 <Drive+0x12a>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	89d9      	ldrh	r1, [r3, #14]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <Drive+0x13e>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2200      	movs	r2, #0
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800136a:	e060      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b04      	cmp	r3, #4
 8001372:	d105      	bne.n	8001380 <Drive+0x152>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2300      	movs	r3, #0
 800137c:	6393      	str	r3, [r2, #56]	@ 0x38
 800137e:	e056      	b.n	800142e <Drive+0x200>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d105      	bne.n	8001394 <Drive+0x166>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001392:	e04c      	b.n	800142e <Drive+0x200>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800139e:	e046      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d105      	bne.n	80013b4 <Drive+0x186>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2200      	movs	r2, #0
 80013b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b2:	e018      	b.n	80013e6 <Drive+0x1b8>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d105      	bne.n	80013c8 <Drive+0x19a>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80013c6:	e00e      	b.n	80013e6 <Drive+0x1b8>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d105      	bne.n	80013dc <Drive+0x1ae>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013da:	e004      	b.n	80013e6 <Drive+0x1b8>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <Drive+0x1cc>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013f8:	e019      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d105      	bne.n	800140e <Drive+0x1e0>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800140c:	e00f      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d105      	bne.n	8001422 <Drive+0x1f4>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001420:	e005      	b.n	800142e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800142c:	e7ff      	b.n	800142e <Drive+0x200>
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	ed87 0a02 	vstr	s0, [r7, #8]
 8001446:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	edd3 7a02 	vldr	s15, [r3, #8]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edd3 6a07 	vldr	s13, [r3, #28]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a02 	vldr	s15, [r3, #8]
 8001494:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 7a04 	vldr	s15, [r3, #16]
 800149e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd06      	ble.n	80014d6 <Pid_Cal+0x9c>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d4:	e002      	b.n	80014dc <Pid_Cal+0xa2>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d506      	bpl.n	800150c <Pid_Cal+0xd2>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	e002      	b.n	8001512 <Pid_Cal+0xd8>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	edd3 6a02 	vldr	s13, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a03 	vldr	s15, [r3, #12]
 800152a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800152e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	ed93 7a04 	vldr	s14, [r3, #16]
 8001538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	63da      	str	r2, [r3, #60]	@ 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	edd3 7a08 	vldr	s15, [r3, #32]
 8001598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80015b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dd02      	ble.n	80015c8 <Pid_Cal+0x18e>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c6:	e001      	b.n	80015cc <Pid_Cal+0x192>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6453      	str	r3, [r2, #68]	@ 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80015dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d502      	bpl.n	80015ec <Pid_Cal+0x1b2>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	e001      	b.n	80015f0 <Pid_Cal+0x1b6>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6453      	str	r3, [r2, #68]	@ 0x44

//	return pid->u;
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a07      	ldr	r2, [pc, #28]	@ (800162c <vApplicationGetIdleTaskMemory+0x2c>)
 8001610:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <vApplicationGetIdleTaskMemory+0x30>)
 8001616:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	@ 0x80
 800161c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200001fc 	.word	0x200001fc
 8001630:	20000250 	.word	0x20000250

08001634 <p>:

float T1, T2, T3, T4;
float Tf=1000;

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	ed87 0a05 	vstr	s0, [r7, #20]
 800163e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001642:	ed87 1a03 	vstr	s2, [r7, #12]
 8001646:	edc7 1a02 	vstr	s3, [r7, #8]
 800164a:	ed87 2a01 	vstr	s4, [r7, #4]
 800164e:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 8001652:	ed97 7a02 	vldr	s14, [r7, #8]
 8001656:	edd7 7a00 	vldr	s15, [r7]
 800165a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001666:	edd7 6a04 	vldr	s13, [r7, #16]
 800166a:	edd7 7a05 	vldr	s15, [r7, #20]
 800166e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001672:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001676:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800167a:	edd7 7a03 	vldr	s15, [r7, #12]
 800167e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001682:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001686:	edd7 7a02 	vldr	s15, [r7, #8]
 800168a:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800168e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001692:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001696:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800169a:	edd7 5a01 	vldr	s11, [r7, #4]
 800169e:	ed97 6a03 	vldr	s12, [r7, #12]
 80016a2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016aa:	edd7 7a00 	vldr	s15, [r7]
 80016ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016c6:	eef8 6a00 	vmov.f32	s13, #128	@ 0xc0000000 -2.0
 80016ca:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80016ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80016d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80016e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80016e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ea:	ee76 5a27 	vadd.f32	s11, s12, s15
 80016ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80016f6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016fe:	edd7 7a00 	vldr	s15, [r7]
 8001702:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001706:	edd7 7a00 	vldr	s15, [r7]
 800170a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <UartIdle_Init>:
uint16_t uartLogRxSize;
char dataAngle[128];
uint16_t count_timer = 0;
uint8_t count = 0;
void UartIdle_Init()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800172c:	4906      	ldr	r1, [pc, #24]	@ (8001748 <UartIdle_Init+0x24>)
 800172e:	4807      	ldr	r0, [pc, #28]	@ (800174c <UartIdle_Init+0x28>)
 8001730:	f005 f876 	bl	8006820 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <UartIdle_Init+0x2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <UartIdle_Init+0x2c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0208 	bic.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000ae4 	.word	0x20000ae4
 800174c:	20000690 	.word	0x20000690
 8001750:	200006d8 	.word	0x200006d8

08001754 <UART_Handle>:

void UART_Handle(char* data, Setpoint_* Setpoint)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	@ 0x38
 8001758:	af04      	add	r7, sp, #16
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    static char uartDataBuffer[1024] = "";
    static size_t dataBufferIndex = 0;

    if (flag_uart_rx == 1 && strstr(data, "\n"))
 800175e:	4bab      	ldr	r3, [pc, #684]	@ (8001a0c <UART_Handle+0x2b8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	f040 814e 	bne.w	8001a04 <UART_Handle+0x2b0>
 8001768:	210a      	movs	r1, #10
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f009 fa53 	bl	800ac16 <strchr>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8146 	beq.w	8001a04 <UART_Handle+0x2b0>
    {
        if (strstr(data, "theta1"))
 8001778:	49a5      	ldr	r1, [pc, #660]	@ (8001a10 <UART_Handle+0x2bc>)
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f009 faa8 	bl	800acd0 <strstr>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d016      	beq.n	80017b4 <UART_Handle+0x60>
        {
            if (sscanf(data, "theta1:%f,theta2:%f,theta3:%f,theta4:%f\n",
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	1d18      	adds	r0, r3, #4
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	3308      	adds	r3, #8
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	320c      	adds	r2, #12
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4603      	mov	r3, r0
 800179a:	460a      	mov	r2, r1
 800179c:	499d      	ldr	r1, [pc, #628]	@ (8001a14 <UART_Handle+0x2c0>)
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f009 f9c2 	bl	800ab28 <siscanf>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	f040 8122 	bne.w	80019f0 <UART_Handle+0x29c>
                       &Setpoint->setpoint1, &Setpoint->setpoint2,
                       &Setpoint->setpoint3, &Setpoint->setpoint4) == 4)
            {
                FlagStart.starKinematics = 1;
 80017ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001a18 <UART_Handle+0x2c4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	709a      	strb	r2, [r3, #2]
 80017b2:	e11d      	b.n	80019f0 <UART_Handle+0x29c>
            }
        }
        else if (strstr(data, "NhaT1"))
 80017b4:	4999      	ldr	r1, [pc, #612]	@ (8001a1c <UART_Handle+0x2c8>)
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f009 fa8a 	bl	800acd0 <strstr>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d019      	beq.n	80017f6 <UART_Handle+0xa2>
        {
            if (sscanf(data, "NhaT1:%f,NhaT2:%f,NhaT3:%f,NhaT4:%f\n",
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3338      	adds	r3, #56	@ 0x38
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	323c      	adds	r2, #60	@ 0x3c
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4603      	mov	r3, r0
 80017dc:	460a      	mov	r2, r1
 80017de:	4990      	ldr	r1, [pc, #576]	@ (8001a20 <UART_Handle+0x2cc>)
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f009 f9a1 	bl	800ab28 <siscanf>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	f040 8101 	bne.w	80019f0 <UART_Handle+0x29c>
                       &Setpoint->theta1_Nha, &Setpoint->theta2_Nha,
                       &Setpoint->theta3_Nha, &Setpoint->theta4_Nha) == 4)
            {
                FlagStart.SetPoint_Nha = 1;
 80017ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001a18 <UART_Handle+0x2c4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	70da      	strb	r2, [r3, #3]
 80017f4:	e0fc      	b.n	80019f0 <UART_Handle+0x29c>
            }
        }
        else if (strstr(data, "Point"))
 80017f6:	498b      	ldr	r1, [pc, #556]	@ (8001a24 <UART_Handle+0x2d0>)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f009 fa69 	bl	800acd0 <strstr>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 808a 	beq.w	800191a <UART_Handle+0x1c6>
        {
        	Setpoint->countPoint = 0;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2200      	movs	r2, #0
 800180a:	641a      	str	r2, [r3, #64]	@ 0x40
        	if (dataBufferIndex + strlen(data) < sizeof(uartDataBuffer) - 1) {
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7fe fd2f 	bl	8000270 <strlen>
 8001812:	4602      	mov	r2, r0
 8001814:	4b84      	ldr	r3, [pc, #528]	@ (8001a28 <UART_Handle+0x2d4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4413      	add	r3, r2
 800181a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800181e:	4293      	cmp	r3, r2
 8001820:	f200 80e6 	bhi.w	80019f0 <UART_Handle+0x29c>
				strncat(uartDataBuffer, data, sizeof(uartDataBuffer) - dataBufferIndex - 1);
 8001824:	4b80      	ldr	r3, [pc, #512]	@ (8001a28 <UART_Handle+0x2d4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
 800182c:	3303      	adds	r3, #3
 800182e:	461a      	mov	r2, r3
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	487e      	ldr	r0, [pc, #504]	@ (8001a2c <UART_Handle+0x2d8>)
 8001834:	f009 f9fc 	bl	800ac30 <strncat>
				dataBufferIndex += strlen(data);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fd19 	bl	8000270 <strlen>
 800183e:	4602      	mov	r2, r0
 8001840:	4b79      	ldr	r3, [pc, #484]	@ (8001a28 <UART_Handle+0x2d4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	4a78      	ldr	r2, [pc, #480]	@ (8001a28 <UART_Handle+0x2d4>)
 8001848:	6013      	str	r3, [r2, #0]

				if (strchr(uartDataBuffer, '\n') != NULL) {
 800184a:	210a      	movs	r1, #10
 800184c:	4877      	ldr	r0, [pc, #476]	@ (8001a2c <UART_Handle+0x2d8>)
 800184e:	f009 f9e2 	bl	800ac16 <strchr>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80cb 	beq.w	80019f0 <UART_Handle+0x29c>
					char* savePtr;
					char* token = strtok_r(uartDataBuffer, ";", &savePtr);
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	461a      	mov	r2, r3
 8001860:	4973      	ldr	r1, [pc, #460]	@ (8001a30 <UART_Handle+0x2dc>)
 8001862:	4872      	ldr	r0, [pc, #456]	@ (8001a2c <UART_Handle+0x2d8>)
 8001864:	f009 fa31 	bl	800acca <strtok_r>
 8001868:	6278      	str	r0, [r7, #36]	@ 0x24

					while (token != NULL) {
 800186a:	e049      	b.n	8001900 <UART_Handle+0x1ac>
						int pointId;
						float theta1, theta2, theta3, theta4;


						if (sscanf(token, "Point:%d, HutT1:%f, HutT2:%f, HutT3:%f, HutT4:%f", &pointId, &theta1, &theta2, &theta3, &theta4) == 5) {
 800186c:	f107 0118 	add.w	r1, r7, #24
 8001870:	f107 021c 	add.w	r2, r7, #28
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	496a      	ldr	r1, [pc, #424]	@ (8001a34 <UART_Handle+0x2e0>)
 800188a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800188c:	f009 f94c 	bl	800ab28 <siscanf>
 8001890:	4603      	mov	r3, r0
 8001892:	2b05      	cmp	r3, #5
 8001894:	d126      	bne.n	80018e4 <UART_Handle+0x190>
							Setpoint->points[pointId].theta1 = theta1;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	440b      	add	r3, r1
 80018a2:	3304      	adds	r3, #4
 80018a4:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta2 = theta2;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	3304      	adds	r3, #4
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	3308      	adds	r3, #8
 80018b4:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta3 = theta3;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	440b      	add	r3, r1
 80018c0:	334c      	adds	r3, #76	@ 0x4c
 80018c2:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta4 = theta4;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	3350      	adds	r3, #80	@ 0x50
 80018d0:	601a      	str	r2, [r3, #0]
							FlagStart.SetPoint_Hut = 1;
 80018d2:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <UART_Handle+0x2c4>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	711a      	strb	r2, [r3, #4]
							Setpoint->countPoint++;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018e2:	e005      	b.n	80018f0 <UART_Handle+0x19c>
						}
						else{
							FlagStart.startQD = 1;
 80018e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a18 <UART_Handle+0x2c4>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	715a      	strb	r2, [r3, #5]
							count = 0;
 80018ea:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <UART_Handle+0x2e4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
						}
						token = strtok_r(NULL, ";", &savePtr);
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	461a      	mov	r2, r3
 80018f6:	494e      	ldr	r1, [pc, #312]	@ (8001a30 <UART_Handle+0x2dc>)
 80018f8:	2000      	movs	r0, #0
 80018fa:	f009 f9e6 	bl	800acca <strtok_r>
 80018fe:	6278      	str	r0, [r7, #36]	@ 0x24
					while (token != NULL) {
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1b2      	bne.n	800186c <UART_Handle+0x118>
					}

					memset(uartDataBuffer, 0, sizeof(uartDataBuffer));
 8001906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190a:	2100      	movs	r1, #0
 800190c:	4847      	ldr	r0, [pc, #284]	@ (8001a2c <UART_Handle+0x2d8>)
 800190e:	f009 f97a 	bl	800ac06 <memset>
					dataBufferIndex = 0;
 8001912:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <UART_Handle+0x2d4>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e06a      	b.n	80019f0 <UART_Handle+0x29c>
				}
			}
        }
        else if (strstr(data, "home"))
 800191a:	4948      	ldr	r1, [pc, #288]	@ (8001a3c <UART_Handle+0x2e8>)
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f009 f9d7 	bl	800acd0 <strstr>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <UART_Handle+0x1dc>
        {
            FlagStart.startSetHome = 0;
 8001928:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <UART_Handle+0x2c4>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e05f      	b.n	80019f0 <UART_Handle+0x29c>
        }
        else if (strstr(data, "Reset"))
 8001930:	4943      	ldr	r1, [pc, #268]	@ (8001a40 <UART_Handle+0x2ec>)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f009 f9cc 	bl	800acd0 <strstr>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <UART_Handle+0x1f0>
        {
            HAL_NVIC_SystemReset();
 800193e:	f002 fa9e 	bl	8003e7e <HAL_NVIC_SystemReset>
 8001942:	e055      	b.n	80019f0 <UART_Handle+0x29c>
        }
        else if (strstr(data, "GAP"))
 8001944:	493f      	ldr	r1, [pc, #252]	@ (8001a44 <UART_Handle+0x2f0>)
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f009 f9c2 	bl	800acd0 <strstr>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <UART_Handle+0x218>
        {
			HAL_GPIO_WritePin(NamCham1_GPIO_Port, NamCham1_Pin, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001958:	483b      	ldr	r0, [pc, #236]	@ (8001a48 <UART_Handle+0x2f4>)
 800195a:	f003 f84b 	bl	80049f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(NamCham2_GPIO_Port, NamCham2_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001964:	4838      	ldr	r0, [pc, #224]	@ (8001a48 <UART_Handle+0x2f4>)
 8001966:	f003 f845 	bl	80049f4 <HAL_GPIO_WritePin>
 800196a:	e041      	b.n	80019f0 <UART_Handle+0x29c>
        }
        else if (strstr(data, "VUT"))
 800196c:	4937      	ldr	r1, [pc, #220]	@ (8001a4c <UART_Handle+0x2f8>)
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f009 f9ae 	bl	800acd0 <strstr>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00c      	beq.n	8001994 <UART_Handle+0x240>
        {
			HAL_GPIO_WritePin(NamCham1_GPIO_Port, NamCham1_Pin, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001980:	4831      	ldr	r0, [pc, #196]	@ (8001a48 <UART_Handle+0x2f4>)
 8001982:	f003 f837 	bl	80049f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(NamCham2_GPIO_Port, NamCham2_Pin, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800198c:	482e      	ldr	r0, [pc, #184]	@ (8001a48 <UART_Handle+0x2f4>)
 800198e:	f003 f831 	bl	80049f4 <HAL_GPIO_WritePin>
 8001992:	e02d      	b.n	80019f0 <UART_Handle+0x29c>
        }
        else if (strstr(data, "start"))
 8001994:	492e      	ldr	r1, [pc, #184]	@ (8001a50 <UART_Handle+0x2fc>)
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f009 f99a 	bl	800acd0 <strstr>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d013      	beq.n	80019ca <UART_Handle+0x276>
        {
            FlagStart.startProgram = 1;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <UART_Handle+0x2c4>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	705a      	strb	r2, [r3, #1]
            Angle.AngleLink1 = 0;
 80019a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <UART_Handle+0x300>)
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
            Angle.AngleLink2 = 0;
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <UART_Handle+0x300>)
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
            Angle.AngleLink3 = 0;
 80019b8:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <UART_Handle+0x300>)
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
            Angle.AngleLink4 = 0;
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <UART_Handle+0x300>)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	e012      	b.n	80019f0 <UART_Handle+0x29c>

        }
        else if (strstr(data, "disconnected"))
 80019ca:	4923      	ldr	r1, [pc, #140]	@ (8001a58 <UART_Handle+0x304>)
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f009 f97f 	bl	800acd0 <strstr>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <UART_Handle+0x29c>
        {
            FlagStart.startProgram = 0;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <UART_Handle+0x2c4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	705a      	strb	r2, [r3, #1]
            FlagStart.SetPoint_Hut = 0;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <UART_Handle+0x2c4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	711a      	strb	r2, [r3, #4]
            FlagStart.SetPoint_Nha = 0;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <UART_Handle+0x2c4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	70da      	strb	r2, [r3, #3]
            FlagStart.starKinematics = 0;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <UART_Handle+0x2c4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	709a      	strb	r2, [r3, #2]
        }
        flag_uart_rx = 0;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <UART_Handle+0x2b8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
        memset(data, 0, uartLogRxSize);
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <UART_Handle+0x308>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f009 f901 	bl	800ac06 <memset>
    }
}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	@ 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200012e4 	.word	0x200012e4
 8001a10:	0800deb0 	.word	0x0800deb0
 8001a14:	0800deb8 	.word	0x0800deb8
 8001a18:	20000748 	.word	0x20000748
 8001a1c:	0800dee4 	.word	0x0800dee4
 8001a20:	0800deec 	.word	0x0800deec
 8001a24:	0800df14 	.word	0x0800df14
 8001a28:	20001770 	.word	0x20001770
 8001a2c:	20001774 	.word	0x20001774
 8001a30:	0800df1c 	.word	0x0800df1c
 8001a34:	0800df20 	.word	0x0800df20
 8001a38:	2000136a 	.word	0x2000136a
 8001a3c:	0800df54 	.word	0x0800df54
 8001a40:	0800df5c 	.word	0x0800df5c
 8001a44:	0800df64 	.word	0x0800df64
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	0800df68 	.word	0x0800df68
 8001a50:	0800df6c 	.word	0x0800df6c
 8001a54:	20000760 	.word	0x20000760
 8001a58:	0800df74 	.word	0x0800df74
 8001a5c:	200012e6 	.word	0x200012e6

08001a60 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10f      	bne.n	8001a96 <HAL_UARTEx_RxEventCallback+0x36>
  {
    uartLogRxSize = Size;
 8001a76:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_UARTEx_RxEventCallback+0x44>)
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
	UART_Handle(uartLogBuffer, &Setpoint);
 8001a82:	490a      	ldr	r1, [pc, #40]	@ (8001aac <HAL_UARTEx_RxEventCallback+0x4c>)
 8001a84:	480a      	ldr	r0, [pc, #40]	@ (8001ab0 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a86:	f7ff fe65 	bl	8001754 <UART_Handle>

    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001a8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f004 fec5 	bl	8006820 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	200012e6 	.word	0x200012e6
 8001aa8:	200012e4 	.word	0x200012e4
 8001aac:	20000770 	.word	0x20000770
 8001ab0:	20000ae4 	.word	0x20000ae4

08001ab4 <PID_LINK1_Init>:
EncoderRead ENC_LINK1;
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
void PID_LINK1_Init()
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001aba:	4a21      	ldr	r2, [pc, #132]	@ (8001b40 <PID_LINK1_Init+0x8c>)
 8001abc:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 300;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001ac0:	4a20      	ldr	r2, [pc, #128]	@ (8001b44 <PID_LINK1_Init+0x90>)
 8001ac2:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b48 <PID_LINK1_Init+0x94>)
 8001ad8:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001adc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001ae4:	4a19      	ldr	r2, [pc, #100]	@ (8001b4c <PID_LINK1_Init+0x98>)
 8001ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001aea:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <PID_LINK1_Init+0x9c>)
 8001aec:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 8001aee:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <PID_LINK1_Init+0x88>)
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <PID_LINK1_Init+0xa0>)
 8001af2:	64da      	str	r2, [r3, #76]	@ 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001af6:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <PID_LINK1_Init+0xa8>)
 8001af8:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 8001afa:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_POS_LINK1.alpha = 0;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b14:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <PID_LINK1_Init+0x94>)
 8001b16:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b22:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <PID_LINK1_Init+0x98>)
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b28:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <PID_LINK1_Init+0x9c>)
 8001b2a:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <PID_LINK1_Init+0xa4>)
 8001b2e:	4a09      	ldr	r2, [pc, #36]	@ (8001b54 <PID_LINK1_Init+0xa0>)
 8001b30:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	200013d0 	.word	0x200013d0
 8001b40:	42480000 	.word	0x42480000
 8001b44:	43960000 	.word	0x43960000
 8001b48:	3c23d70a 	.word	0x3c23d70a
 8001b4c:	fffffc18 	.word	0xfffffc18
 8001b50:	447a0000 	.word	0x447a0000
 8001b54:	c47a0000 	.word	0xc47a0000
 8001b58:	20001420 	.word	0x20001420
 8001b5c:	41200000 	.word	0x41200000

08001b60 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	ed2d 8b02 	vpush	{d8}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 8001b6a:	4814      	ldr	r0, [pc, #80]	@ (8001bbc <PID_LINK1_Speed+0x5c>)
 8001b6c:	f7ff fa54 	bl	8001018 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <PID_LINK1_Speed+0x60>)
 8001b72:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <PID_LINK1_Speed+0x5c>)
 8001b78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff f832 	bl	8000be8 <__aeabi_d2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	ee00 3a90 	vmov	s1, r3
 8001b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b8e:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <PID_LINK1_Speed+0x64>)
 8001b90:	f7ff fc53 	bl	800143a <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <PID_LINK1_Speed+0x64>)
 8001b96:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	ee17 2a90 	vmov	r2, s15
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <PID_LINK1_Speed+0x68>)
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <PID_LINK1_Speed+0x6c>)
 8001bac:	f7ff fb3f 	bl	800122e <Drive>
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	ecbd 8b02 	vpop	{d8}
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20001370 	.word	0x20001370
 8001bc0:	20001420 	.word	0x20001420
 8001bc4:	200013d0 	.word	0x200013d0
 8001bc8:	200005b8 	.word	0x200005b8
 8001bcc:	200013b8 	.word	0x200013b8

08001bd0 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	ed2d 8b02 	vpush	{d8}
 8001bd6:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, Angle.AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <PID_LINK1_Pos+0x40>)
 8001bda:	ed93 8a00 	vldr	s16, [r3]
 8001bde:	2102      	movs	r1, #2
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <PID_LINK1_Pos+0x44>)
 8001be2:	f7ff faa7 	bl	8001134 <CountRead>
 8001be6:	ec53 2b10 	vmov	r2, r3, d0
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f7fe fffb 	bl	8000be8 <__aeabi_d2f>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	ee00 3a90 	vmov	s1, r3
 8001bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8001bfc:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <PID_LINK1_Pos+0x48>)
 8001bfe:	f7ff fc1c 	bl	800143a <Pid_Cal>
	PID_LINK1_Speed();
 8001c02:	f7ff ffad 	bl	8001b60 <PID_LINK1_Speed>
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	ecbd 8b02 	vpop	{d8}
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000760 	.word	0x20000760
 8001c14:	20001370 	.word	0x20001370
 8001c18:	20001420 	.word	0x20001420

08001c1c <PID_LINK2_Init>:
EncoderRead ENC_LINK2;
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
void PID_LINK2_Init()
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c22:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <PID_LINK2_Init+0x8c>)
 8001c24:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 300;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c28:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <PID_LINK2_Init+0x90>)
 8001c2a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <PID_LINK2_Init+0x94>)
 8001c40:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c48:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <PID_LINK2_Init+0x98>)
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c52:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <PID_LINK2_Init+0x9c>)
 8001c54:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <PID_LINK2_Init+0x88>)
 8001c58:	4a18      	ldr	r2, [pc, #96]	@ (8001cbc <PID_LINK2_Init+0xa0>)
 8001c5a:	64da      	str	r2, [r3, #76]	@ 0x4c

	PID_DC_POS_LINK2.kP = 10;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c5e:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <PID_LINK2_Init+0xa8>)
 8001c60:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_POS_LINK2.alpha = 0;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb0 <PID_LINK2_Init+0x94>)
 8001c7e:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <PID_LINK2_Init+0x98>)
 8001c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c90:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <PID_LINK2_Init+0x9c>)
 8001c92:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <PID_LINK2_Init+0xa4>)
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <PID_LINK2_Init+0xa0>)
 8001c98:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	200014d0 	.word	0x200014d0
 8001ca8:	42480000 	.word	0x42480000
 8001cac:	43960000 	.word	0x43960000
 8001cb0:	3c23d70a 	.word	0x3c23d70a
 8001cb4:	fffffc18 	.word	0xfffffc18
 8001cb8:	447a0000 	.word	0x447a0000
 8001cbc:	c47a0000 	.word	0xc47a0000
 8001cc0:	20001520 	.word	0x20001520
 8001cc4:	41200000 	.word	0x41200000

08001cc8 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	ed2d 8b02 	vpush	{d8}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001cd2:	4814      	ldr	r0, [pc, #80]	@ (8001d24 <PID_LINK2_Speed+0x5c>)
 8001cd4:	f7ff f9a0 	bl	8001018 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <PID_LINK2_Speed+0x60>)
 8001cda:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <PID_LINK2_Speed+0x5c>)
 8001ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f7fe ff7e 	bl	8000be8 <__aeabi_d2f>
 8001cec:	4603      	mov	r3, r0
 8001cee:	ee00 3a90 	vmov	s1, r3
 8001cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8001cf6:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <PID_LINK2_Speed+0x64>)
 8001cf8:	f7ff fb9f 	bl	800143a <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <PID_LINK2_Speed+0x64>)
 8001cfe:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d06:	230c      	movs	r3, #12
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	ee17 2a90 	vmov	r2, s15
 8001d10:	4907      	ldr	r1, [pc, #28]	@ (8001d30 <PID_LINK2_Speed+0x68>)
 8001d12:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <PID_LINK2_Speed+0x6c>)
 8001d14:	f7ff fa8b 	bl	800122e <Drive>
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	ecbd 8b02 	vpop	{d8}
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20001470 	.word	0x20001470
 8001d28:	20001520 	.word	0x20001520
 8001d2c:	200014d0 	.word	0x200014d0
 8001d30:	20000528 	.word	0x20000528
 8001d34:	200014b8 	.word	0x200014b8

08001d38 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	ed2d 8b02 	vpush	{d8}
 8001d3e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, Angle.AngleLink2 - 187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001d40:	4b0f      	ldr	r3, [pc, #60]	@ (8001d80 <PID_LINK2_Pos+0x48>)
 8001d42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d46:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d84 <PID_LINK2_Pos+0x4c>
 8001d4a:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001d4e:	2102      	movs	r1, #2
 8001d50:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <PID_LINK2_Pos+0x50>)
 8001d52:	f7ff f9ef 	bl	8001134 <CountRead>
 8001d56:	ec53 2b10 	vmov	r2, r3, d0
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff43 	bl	8000be8 <__aeabi_d2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	ee00 3a90 	vmov	s1, r3
 8001d68:	eeb0 0a48 	vmov.f32	s0, s16
 8001d6c:	4807      	ldr	r0, [pc, #28]	@ (8001d8c <PID_LINK2_Pos+0x54>)
 8001d6e:	f7ff fb64 	bl	800143a <Pid_Cal>
	PID_LINK2_Speed();
 8001d72:	f7ff ffa9 	bl	8001cc8 <PID_LINK2_Speed>
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	ecbd 8b02 	vpop	{d8}
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000760 	.word	0x20000760
 8001d84:	433b0000 	.word	0x433b0000
 8001d88:	20001470 	.word	0x20001470
 8001d8c:	20001520 	.word	0x20001520

08001d90 <PID_LINK3_Init>:
EncoderRead ENC_LINK3;
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
void PID_LINK3_Init()
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 8001d94:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <PID_LINK3_Init+0x8c>)
 8001d98:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 300;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <PID_LINK3_Init+0x90>)
 8001d9e:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 8001db0:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <PID_LINK3_Init+0x94>)
 8001db4:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 8001db6:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001db8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <PID_LINK3_Init+0x98>)
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001dc6:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <PID_LINK3_Init+0x9c>)
 8001dc8:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <PID_LINK3_Init+0x88>)
 8001dcc:	4a18      	ldr	r2, [pc, #96]	@ (8001e30 <PID_LINK3_Init+0xa0>)
 8001dce:	64da      	str	r2, [r3, #76]	@ 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001dd2:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <PID_LINK3_Init+0xa8>)
 8001dd4:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001df0:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <PID_LINK3_Init+0x94>)
 8001df2:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <PID_LINK3_Init+0x98>)
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001e04:	4a09      	ldr	r2, [pc, #36]	@ (8001e2c <PID_LINK3_Init+0x9c>)
 8001e06:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <PID_LINK3_Init+0xa4>)
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <PID_LINK3_Init+0xa0>)
 8001e0c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	200015d0 	.word	0x200015d0
 8001e1c:	42480000 	.word	0x42480000
 8001e20:	43960000 	.word	0x43960000
 8001e24:	3c23d70a 	.word	0x3c23d70a
 8001e28:	fffffc18 	.word	0xfffffc18
 8001e2c:	447a0000 	.word	0x447a0000
 8001e30:	c47a0000 	.word	0xc47a0000
 8001e34:	20001620 	.word	0x20001620
 8001e38:	41200000 	.word	0x41200000

08001e3c <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	ed2d 8b02 	vpush	{d8}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001e46:	4814      	ldr	r0, [pc, #80]	@ (8001e98 <PID_LINK3_Speed+0x5c>)
 8001e48:	f7ff f8e6 	bl	8001018 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <PID_LINK3_Speed+0x60>)
 8001e4e:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <PID_LINK3_Speed+0x5c>)
 8001e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fec4 	bl	8000be8 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	ee00 3a90 	vmov	s1, r3
 8001e66:	eeb0 0a48 	vmov.f32	s0, s16
 8001e6a:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <PID_LINK3_Speed+0x64>)
 8001e6c:	f7ff fae5 	bl	800143a <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <PID_LINK3_Speed+0x64>)
 8001e72:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	4907      	ldr	r1, [pc, #28]	@ (8001ea4 <PID_LINK3_Speed+0x68>)
 8001e86:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <PID_LINK3_Speed+0x6c>)
 8001e88:	f7ff f9d1 	bl	800122e <Drive>
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	ecbd 8b02 	vpop	{d8}
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20001570 	.word	0x20001570
 8001e9c:	20001620 	.word	0x20001620
 8001ea0:	200015d0 	.word	0x200015d0
 8001ea4:	20000528 	.word	0x20000528
 8001ea8:	200015b8 	.word	0x200015b8

08001eac <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	ed2d 8b02 	vpush	{d8}
 8001eb2:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, Angle.AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <PID_LINK3_Pos+0x48>)
 8001eb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001ef8 <PID_LINK3_Pos+0x4c>
 8001ebe:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <PID_LINK3_Pos+0x50>)
 8001ec6:	f7ff f935 	bl	8001134 <CountRead>
 8001eca:	ec53 2b10 	vmov	r2, r3, d0
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe89 	bl	8000be8 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	ee00 3a90 	vmov	s1, r3
 8001edc:	eeb0 0a48 	vmov.f32	s0, s16
 8001ee0:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <PID_LINK3_Pos+0x54>)
 8001ee2:	f7ff faaa 	bl	800143a <Pid_Cal>
	PID_LINK3_Speed();
 8001ee6:	f7ff ffa9 	bl	8001e3c <PID_LINK3_Speed>
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	ecbd 8b02 	vpop	{d8}
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000760 	.word	0x20000760
 8001ef8:	43070000 	.word	0x43070000
 8001efc:	20001570 	.word	0x20001570
 8001f00:	20001620 	.word	0x20001620

08001f04 <PID_LINK4_Init>:
EncoderRead ENC_LINK4;
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
void PID_LINK4_Init()
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f0a:	4a21      	ldr	r2, [pc, #132]	@ (8001f90 <PID_LINK4_Init+0x8c>)
 8001f0c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 300;
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <PID_LINK4_Init+0x90>)
 8001f12:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f26:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <PID_LINK4_Init+0x94>)
 8001f28:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 8001f2a:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f2c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f30:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f34:	4a19      	ldr	r2, [pc, #100]	@ (8001f9c <PID_LINK4_Init+0x98>)
 8001f36:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f3a:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <PID_LINK4_Init+0x9c>)
 8001f3c:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <PID_LINK4_Init+0x88>)
 8001f40:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <PID_LINK4_Init+0xa0>)
 8001f42:	64da      	str	r2, [r3, #76]	@ 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f46:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <PID_LINK4_Init+0xa8>)
 8001f48:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
	PID_DC_POS_LINK4.alpha = 0;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f64:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <PID_LINK4_Init+0x94>)
 8001f66:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001f68:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <PID_LINK4_Init+0x98>)
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f78:	4a09      	ldr	r2, [pc, #36]	@ (8001fa0 <PID_LINK4_Init+0x9c>)
 8001f7a:	649a      	str	r2, [r3, #72]	@ 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <PID_LINK4_Init+0xa4>)
 8001f7e:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <PID_LINK4_Init+0xa0>)
 8001f80:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	200016d0 	.word	0x200016d0
 8001f90:	42480000 	.word	0x42480000
 8001f94:	43960000 	.word	0x43960000
 8001f98:	3c23d70a 	.word	0x3c23d70a
 8001f9c:	fffffc18 	.word	0xfffffc18
 8001fa0:	447a0000 	.word	0x447a0000
 8001fa4:	c47a0000 	.word	0xc47a0000
 8001fa8:	20001720 	.word	0x20001720
 8001fac:	41200000 	.word	0x41200000

08001fb0 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	ed2d 8b02 	vpush	{d8}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 8001fba:	4814      	ldr	r0, [pc, #80]	@ (800200c <PID_LINK4_Speed+0x5c>)
 8001fbc:	f7ff f82c 	bl	8001018 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <PID_LINK4_Speed+0x60>)
 8001fc2:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <PID_LINK4_Speed+0x5c>)
 8001fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fe0a 	bl	8000be8 <__aeabi_d2f>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	ee00 3a90 	vmov	s1, r3
 8001fda:	eeb0 0a48 	vmov.f32	s0, s16
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <PID_LINK4_Speed+0x64>)
 8001fe0:	f7ff fa2b 	bl	800143a <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <PID_LINK4_Speed+0x64>)
 8001fe6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fee:	2304      	movs	r3, #4
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	ee17 2a90 	vmov	r2, s15
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <PID_LINK4_Speed+0x68>)
 8001ffa:	4808      	ldr	r0, [pc, #32]	@ (800201c <PID_LINK4_Speed+0x6c>)
 8001ffc:	f7ff f917 	bl	800122e <Drive>
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	ecbd 8b02 	vpop	{d8}
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20001670 	.word	0x20001670
 8002010:	20001720 	.word	0x20001720
 8002014:	200016d0 	.word	0x200016d0
 8002018:	20000600 	.word	0x20000600
 800201c:	200016b8 	.word	0x200016b8

08002020 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8002020:	b580      	push	{r7, lr}
 8002022:	ed2d 8b02 	vpush	{d8}
 8002026:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, Angle.AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <PID_LINK4_Pos+0x48>)
 800202a:	edd3 7a03 	vldr	s15, [r3, #12]
 800202e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800206c <PID_LINK4_Pos+0x4c>
 8002032:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8002036:	2102      	movs	r1, #2
 8002038:	480d      	ldr	r0, [pc, #52]	@ (8002070 <PID_LINK4_Pos+0x50>)
 800203a:	f7ff f87b 	bl	8001134 <CountRead>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fdcf 	bl	8000be8 <__aeabi_d2f>
 800204a:	4603      	mov	r3, r0
 800204c:	ee00 3a90 	vmov	s1, r3
 8002050:	eeb0 0a48 	vmov.f32	s0, s16
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <PID_LINK4_Pos+0x54>)
 8002056:	f7ff f9f0 	bl	800143a <Pid_Cal>
	PID_LINK4_Speed();
 800205a:	f7ff ffa9 	bl	8001fb0 <PID_LINK4_Speed>
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	ecbd 8b02 	vpop	{d8}
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000760 	.word	0x20000760
 800206c:	42b40000 	.word	0x42b40000
 8002070:	20001670 	.word	0x20001670
 8002074:	20001720 	.word	0x20001720

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b09c      	sub	sp, #112	@ 0x70
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207e:	f001 fdc3 	bl	8003c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002082:	f000 f8ed 	bl	8002260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002086:	f000 fc85 	bl	8002994 <MX_GPIO_Init>
  MX_DMA_Init();
 800208a:	f000 fc63 	bl	8002954 <MX_DMA_Init>
  MX_TIM1_Init();
 800208e:	f000 f94f 	bl	8002330 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002092:	f000 fa4d 	bl	8002530 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002096:	f000 f9a3 	bl	80023e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800209a:	f000 f9f5 	bl	8002488 <MX_TIM3_Init>
  MX_TIM5_Init();
 800209e:	f000 fac1 	bl	8002624 <MX_TIM5_Init>
  MX_TIM8_Init();
 80020a2:	f000 fb13 	bl	80026cc <MX_TIM8_Init>
  MX_TIM9_Init();
 80020a6:	f000 fba1 	bl	80027ec <MX_TIM9_Init>
  MX_USART1_UART_Init();
 80020aa:	f000 fc29 	bl	8002900 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 80020ae:	f000 fbed 	bl	800288c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020b2:	2100      	movs	r1, #0
 80020b4:	4856      	ldr	r0, [pc, #344]	@ (8002210 <main+0x198>)
 80020b6:	f003 fa91 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80020ba:	2104      	movs	r1, #4
 80020bc:	4854      	ldr	r0, [pc, #336]	@ (8002210 <main+0x198>)
 80020be:	f003 fa8d 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80020c2:	2108      	movs	r1, #8
 80020c4:	4852      	ldr	r0, [pc, #328]	@ (8002210 <main+0x198>)
 80020c6:	f003 fa89 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80020ca:	210c      	movs	r1, #12
 80020cc:	4850      	ldr	r0, [pc, #320]	@ (8002210 <main+0x198>)
 80020ce:	f003 fa85 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80020d2:	2100      	movs	r1, #0
 80020d4:	484f      	ldr	r0, [pc, #316]	@ (8002214 <main+0x19c>)
 80020d6:	f003 fa81 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80020da:	2104      	movs	r1, #4
 80020dc:	484d      	ldr	r0, [pc, #308]	@ (8002214 <main+0x19c>)
 80020de:	f003 fa7d 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80020e2:	2108      	movs	r1, #8
 80020e4:	484c      	ldr	r0, [pc, #304]	@ (8002218 <main+0x1a0>)
 80020e6:	f003 fa79 	bl	80055dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80020ea:	210c      	movs	r1, #12
 80020ec:	484a      	ldr	r0, [pc, #296]	@ (8002218 <main+0x1a0>)
 80020ee:	f003 fa75 	bl	80055dc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim12);
 80020f2:	484a      	ldr	r0, [pc, #296]	@ (800221c <main+0x1a4>)
 80020f4:	f003 f9b2 	bl	800545c <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80020f8:	213c      	movs	r1, #60	@ 0x3c
 80020fa:	4849      	ldr	r0, [pc, #292]	@ (8002220 <main+0x1a8>)
 80020fc:	f003 fbdc 	bl	80058b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002100:	213c      	movs	r1, #60	@ 0x3c
 8002102:	4848      	ldr	r0, [pc, #288]	@ (8002224 <main+0x1ac>)
 8002104:	f003 fbd8 	bl	80058b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002108:	213c      	movs	r1, #60	@ 0x3c
 800210a:	4847      	ldr	r0, [pc, #284]	@ (8002228 <main+0x1b0>)
 800210c:	f003 fbd4 	bl	80058b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8002110:	213c      	movs	r1, #60	@ 0x3c
 8002112:	4846      	ldr	r0, [pc, #280]	@ (800222c <main+0x1b4>)
 8002114:	f003 fbd0 	bl	80058b8 <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 8002118:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8002208 <main+0x190>
 800211c:	f641 3226 	movw	r2, #6950	@ 0x1b26
 8002120:	493f      	ldr	r1, [pc, #252]	@ (8002220 <main+0x1a8>)
 8002122:	4843      	ldr	r0, [pc, #268]	@ (8002230 <main+0x1b8>)
 8002124:	f7fe ff5e 	bl	8000fe4 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3440, 0.01);
 8002128:	ed9f 0b37 	vldr	d0, [pc, #220]	@ 8002208 <main+0x190>
 800212c:	f44f 6257 	mov.w	r2, #3440	@ 0xd70
 8002130:	493c      	ldr	r1, [pc, #240]	@ (8002224 <main+0x1ac>)
 8002132:	4840      	ldr	r0, [pc, #256]	@ (8002234 <main+0x1bc>)
 8002134:	f7fe ff56 	bl	8000fe4 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 7200, 0.01);
 8002138:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8002208 <main+0x190>
 800213c:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8002140:	4939      	ldr	r1, [pc, #228]	@ (8002228 <main+0x1b0>)
 8002142:	483d      	ldr	r0, [pc, #244]	@ (8002238 <main+0x1c0>)
 8002144:	f7fe ff4e 	bl	8000fe4 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 8002148:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8002208 <main+0x190>
 800214c:	f640 4294 	movw	r2, #3220	@ 0xc94
 8002150:	4936      	ldr	r1, [pc, #216]	@ (800222c <main+0x1b4>)
 8002152:	483a      	ldr	r0, [pc, #232]	@ (800223c <main+0x1c4>)
 8002154:	f7fe ff46 	bl	8000fe4 <EncoderSetting>

  PID_LINK1_Init();
 8002158:	f7ff fcac 	bl	8001ab4 <PID_LINK1_Init>
  PID_LINK2_Init();
 800215c:	f7ff fd5e 	bl	8001c1c <PID_LINK2_Init>
  PID_LINK3_Init();
 8002160:	f7ff fe16 	bl	8001d90 <PID_LINK3_Init>
  PID_LINK4_Init();
 8002164:	f7ff fece 	bl	8001f04 <PID_LINK4_Init>

  UartIdle_Init();
 8002168:	f7ff fadc 	bl	8001724 <UartIdle_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskLogic */
  osThreadDef(TaskLogic, StartTaskLogic, osPriorityNormal, 0, 128);
 800216c:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <main+0x1c8>)
 800216e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002172:	461d      	mov	r5, r3
 8002174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002178:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800217c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLogicHandle = osThreadCreate(osThread(TaskLogic), NULL);
 8002180:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fc53 	bl	8007a32 <osThreadCreate>
 800218c:	4603      	mov	r3, r0
 800218e:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <main+0x1cc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8002192:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <main+0x1d0>)
 8002194:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002198:	461d      	mov	r5, r3
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 80021a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f005 fc40 	bl	8007a32 <osThreadCreate>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4a25      	ldr	r2, [pc, #148]	@ (800224c <main+0x1d4>)
 80021b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 80021b8:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <main+0x1d8>)
 80021ba:	f107 041c 	add.w	r4, r7, #28
 80021be:	461d      	mov	r5, r3
 80021c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 fc2d 	bl	8007a32 <osThreadCreate>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <main+0x1dc>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTrajectory */
  osThreadDef(TaskTrajectory, StartTaskTrajectory, osPriorityBelowNormal, 0, 128);
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <main+0x1e0>)
 80021e0:	463c      	mov	r4, r7
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTrajectoryHandle = osThreadCreate(osThread(TaskTrajectory), NULL);
 80021f0:	463b      	mov	r3, r7
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f005 fc1c 	bl	8007a32 <osThreadCreate>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a17      	ldr	r2, [pc, #92]	@ (800225c <main+0x1e4>)
 80021fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002200:	f005 fc10 	bl	8007a24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <main+0x18c>
 8002208:	47ae147b 	.word	0x47ae147b
 800220c:	3f847ae1 	.word	0x3f847ae1
 8002210:	20000528 	.word	0x20000528
 8002214:	20000600 	.word	0x20000600
 8002218:	200005b8 	.word	0x200005b8
 800221c:	20000648 	.word	0x20000648
 8002220:	20000450 	.word	0x20000450
 8002224:	20000498 	.word	0x20000498
 8002228:	200004e0 	.word	0x200004e0
 800222c:	20000570 	.word	0x20000570
 8002230:	20001370 	.word	0x20001370
 8002234:	20001470 	.word	0x20001470
 8002238:	20001570 	.word	0x20001570
 800223c:	20001670 	.word	0x20001670
 8002240:	0800df90 	.word	0x0800df90
 8002244:	20000738 	.word	0x20000738
 8002248:	0800dfb8 	.word	0x0800dfb8
 800224c:	2000073c 	.word	0x2000073c
 8002250:	0800dfe0 	.word	0x0800dfe0
 8002254:	20000740 	.word	0x20000740
 8002258:	0800e00c 	.word	0x0800e00c
 800225c:	20000744 	.word	0x20000744

08002260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b094      	sub	sp, #80	@ 0x50
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	2230      	movs	r2, #48	@ 0x30
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f008 fcc9 	bl	800ac06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <SystemClock_Config+0xc8>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228c:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <SystemClock_Config+0xc8>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	@ 0x40
 8002294:	4b24      	ldr	r3, [pc, #144]	@ (8002328 <SystemClock_Config+0xc8>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <SystemClock_Config+0xcc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a20      	ldr	r2, [pc, #128]	@ (800232c <SystemClock_Config+0xcc>)
 80022aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b1e      	ldr	r3, [pc, #120]	@ (800232c <SystemClock_Config+0xcc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c4:	2310      	movs	r3, #16
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c8:	2302      	movs	r3, #2
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022d0:	2308      	movs	r3, #8
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80022d4:	2348      	movs	r3, #72	@ 0x48
 80022d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022d8:	2302      	movs	r3, #2
 80022da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022dc:	2304      	movs	r3, #4
 80022de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fb9f 	bl	8004a28 <HAL_RCC_OscConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022f0:	f000 ffda 	bl	80032a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f4:	230f      	movs	r3, #15
 80022f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	2102      	movs	r1, #2
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fe01 	bl	8004f18 <HAL_RCC_ClockConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800231c:	f000 ffc4 	bl	80032a8 <Error_Handler>
  }
}
 8002320:	bf00      	nop
 8002322:	3750      	adds	r7, #80	@ 0x50
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	40007000 	.word	0x40007000

08002330 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08c      	sub	sp, #48	@ 0x30
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2224      	movs	r2, #36	@ 0x24
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f008 fc61 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 800234e:	4a23      	ldr	r2, [pc, #140]	@ (80023dc <MX_TIM1_Init+0xac>)
 8002350:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002352:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 8002360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002364:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002366:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800236c:	4b1a      	ldr	r3, [pc, #104]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002378:	2303      	movs	r3, #3
 800237a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002390:	2301      	movs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	480d      	ldr	r0, [pc, #52]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 80023a4:	f003 f9e2 	bl	800576c <HAL_TIM_Encoder_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023ae:	f000 ff7b 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4806      	ldr	r0, [pc, #24]	@ (80023d8 <MX_TIM1_Init+0xa8>)
 80023c0:	f004 f8c6 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023ca:	f000 ff6d 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	3730      	adds	r7, #48	@ 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000450 	.word	0x20000450
 80023dc:	40010000 	.word	0x40010000

080023e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f008 fc09 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <MX_TIM2_Init+0xa4>)
 80023fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002404:	4b1f      	ldr	r3, [pc, #124]	@ (8002484 <MX_TIM2_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <MX_TIM2_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <MX_TIM2_Init+0xa4>)
 8002412:	f04f 32ff 	mov.w	r2, #4294967295
 8002416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <MX_TIM2_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241e:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <MX_TIM2_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002424:	2301      	movs	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242c:	2301      	movs	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243c:	2301      	movs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	4619      	mov	r1, r3
 800244e:	480d      	ldr	r0, [pc, #52]	@ (8002484 <MX_TIM2_Init+0xa4>)
 8002450:	f003 f98c 	bl	800576c <HAL_TIM_Encoder_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800245a:	f000 ff25 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4806      	ldr	r0, [pc, #24]	@ (8002484 <MX_TIM2_Init+0xa4>)
 800246c:	f004 f870 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002476:	f000 ff17 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	3730      	adds	r7, #48	@ 0x30
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000498 	.word	0x20000498

08002488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	@ 0x30
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f008 fbb5 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a4:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <MX_TIM3_Init+0xa4>)
 80024a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ca:	2303      	movs	r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_TIM3_Init+0xa0>)
 80024f6:	f003 f939 	bl	800576c <HAL_TIM_Encoder_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002500:	f000 fed2 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <MX_TIM3_Init+0xa0>)
 8002512:	f004 f81d 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800251c:	f000 fec4 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	@ 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200004e0 	.word	0x200004e0
 800252c:	40000400 	.word	0x40000400

08002530 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	@ 0x28
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002536:	f107 0320 	add.w	r3, r7, #32
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	611a      	str	r2, [r3, #16]
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002552:	4b32      	ldr	r3, [pc, #200]	@ (800261c <MX_TIM4_Init+0xec>)
 8002554:	4a32      	ldr	r2, [pc, #200]	@ (8002620 <MX_TIM4_Init+0xf0>)
 8002556:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 8002558:	4b30      	ldr	r3, [pc, #192]	@ (800261c <MX_TIM4_Init+0xec>)
 800255a:	2206      	movs	r2, #6
 800255c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <MX_TIM4_Init+0xec>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002564:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <MX_TIM4_Init+0xec>)
 8002566:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800256a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256c:	4b2b      	ldr	r3, [pc, #172]	@ (800261c <MX_TIM4_Init+0xec>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <MX_TIM4_Init+0xec>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002578:	4828      	ldr	r0, [pc, #160]	@ (800261c <MX_TIM4_Init+0xec>)
 800257a:	f002 ffdf 	bl	800553c <HAL_TIM_PWM_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002584:	f000 fe90 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002590:	f107 0320 	add.w	r3, r7, #32
 8002594:	4619      	mov	r1, r3
 8002596:	4821      	ldr	r0, [pc, #132]	@ (800261c <MX_TIM4_Init+0xec>)
 8002598:	f003 ffda 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80025a2:	f000 fe81 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a6:	2360      	movs	r3, #96	@ 0x60
 80025a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	2200      	movs	r2, #0
 80025ba:	4619      	mov	r1, r3
 80025bc:	4817      	ldr	r0, [pc, #92]	@ (800261c <MX_TIM4_Init+0xec>)
 80025be:	f003 faf9 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80025c8:	f000 fe6e 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2204      	movs	r2, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4812      	ldr	r0, [pc, #72]	@ (800261c <MX_TIM4_Init+0xec>)
 80025d4:	f003 faee 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80025de:	f000 fe63 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2208      	movs	r2, #8
 80025e6:	4619      	mov	r1, r3
 80025e8:	480c      	ldr	r0, [pc, #48]	@ (800261c <MX_TIM4_Init+0xec>)
 80025ea:	f003 fae3 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80025f4:	f000 fe58 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	220c      	movs	r2, #12
 80025fc:	4619      	mov	r1, r3
 80025fe:	4807      	ldr	r0, [pc, #28]	@ (800261c <MX_TIM4_Init+0xec>)
 8002600:	f003 fad8 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800260a:	f000 fe4d 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800260e:	4803      	ldr	r0, [pc, #12]	@ (800261c <MX_TIM4_Init+0xec>)
 8002610:	f001 f814 	bl	800363c <HAL_TIM_MspPostInit>

}
 8002614:	bf00      	nop
 8002616:	3728      	adds	r7, #40	@ 0x28
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000528 	.word	0x20000528
 8002620:	40000800 	.word	0x40000800

08002624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08c      	sub	sp, #48	@ 0x30
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	2224      	movs	r2, #36	@ 0x24
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f008 fae7 	bl	800ac06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002640:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 8002642:	4a21      	ldr	r2, [pc, #132]	@ (80026c8 <MX_TIM5_Init+0xa4>)
 8002644:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002646:	4b1f      	ldr	r3, [pc, #124]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002652:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002666:	2303      	movs	r3, #3
 8002668:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800266e:	2301      	movs	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800267e:	2301      	movs	r3, #1
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4619      	mov	r1, r3
 8002690:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 8002692:	f003 f86b 	bl	800576c <HAL_TIM_Encoder_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800269c:	f000 fe04 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4805      	ldr	r0, [pc, #20]	@ (80026c4 <MX_TIM5_Init+0xa0>)
 80026ae:	f003 ff4f 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80026b8:	f000 fdf6 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026bc:	bf00      	nop
 80026be:	3730      	adds	r7, #48	@ 0x30
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000570 	.word	0x20000570
 80026c8:	40000c00 	.word	0x40000c00

080026cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b092      	sub	sp, #72	@ 0x48
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2220      	movs	r2, #32
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f008 fa85 	bl	800ac06 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026fc:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <MX_TIM8_Init+0x118>)
 80026fe:	4a3a      	ldr	r2, [pc, #232]	@ (80027e8 <MX_TIM8_Init+0x11c>)
 8002700:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 8002702:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002704:	2206      	movs	r2, #6
 8002706:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	4b36      	ldr	r3, [pc, #216]	@ (80027e4 <MX_TIM8_Init+0x118>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800270e:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002710:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002714:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002716:	4b33      	ldr	r3, [pc, #204]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800271c:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <MX_TIM8_Init+0x118>)
 800271e:	2200      	movs	r2, #0
 8002720:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002722:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002728:	482e      	ldr	r0, [pc, #184]	@ (80027e4 <MX_TIM8_Init+0x118>)
 800272a:	f002 ff07 	bl	800553c <HAL_TIM_PWM_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002734:	f000 fdb8 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002740:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002744:	4619      	mov	r1, r3
 8002746:	4827      	ldr	r0, [pc, #156]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002748:	f003 ff02 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002752:	f000 fda9 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002756:	2360      	movs	r3, #96	@ 0x60
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002776:	2208      	movs	r2, #8
 8002778:	4619      	mov	r1, r3
 800277a:	481a      	ldr	r0, [pc, #104]	@ (80027e4 <MX_TIM8_Init+0x118>)
 800277c:	f003 fa1a 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002786:	f000 fd8f 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800278a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278e:	220c      	movs	r2, #12
 8002790:	4619      	mov	r1, r3
 8002792:	4814      	ldr	r0, [pc, #80]	@ (80027e4 <MX_TIM8_Init+0x118>)
 8002794:	f003 fa0e 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800279e:	f000 fd83 	bl	80032a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <MX_TIM8_Init+0x118>)
 80027c6:	f003 ff3f 	bl	8006648 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80027d0:	f000 fd6a 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <MX_TIM8_Init+0x118>)
 80027d6:	f000 ff31 	bl	800363c <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3748      	adds	r7, #72	@ 0x48
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200005b8 	.word	0x200005b8
 80027e8:	40010400 	.word	0x40010400

080027ec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002804:	4b1f      	ldr	r3, [pc, #124]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002806:	4a20      	ldr	r2, [pc, #128]	@ (8002888 <MX_TIM9_Init+0x9c>)
 8002808:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 800280a:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <MX_TIM9_Init+0x98>)
 800280c:	2206      	movs	r2, #6
 800280e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002816:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800281c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b17      	ldr	r3, [pc, #92]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800282a:	4816      	ldr	r0, [pc, #88]	@ (8002884 <MX_TIM9_Init+0x98>)
 800282c:	f002 fe86 	bl	800553c <HAL_TIM_PWM_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002836:	f000 fd37 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283a:	2360      	movs	r3, #96	@ 0x60
 800283c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	4619      	mov	r1, r3
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002852:	f003 f9af 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800285c:	f000 fd24 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	2204      	movs	r2, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4807      	ldr	r0, [pc, #28]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002868:	f003 f9a4 	bl	8005bb4 <HAL_TIM_PWM_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002872:	f000 fd19 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002876:	4803      	ldr	r0, [pc, #12]	@ (8002884 <MX_TIM9_Init+0x98>)
 8002878:	f000 fee0 	bl	800363c <HAL_TIM_MspPostInit>

}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000600 	.word	0x20000600
 8002888:	40014000 	.word	0x40014000

0800288c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028a0:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <MX_TIM12_Init+0x70>)
 80028a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028a6:	2247      	movs	r2, #71	@ 0x47
 80028a8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028b6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028c6:	f002 fd79 	bl	80053bc <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80028d0:	f000 fcea 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80028da:	463b      	mov	r3, r7
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <MX_TIM12_Init+0x6c>)
 80028e0:	f003 fa2a 	bl	8005d38 <HAL_TIM_ConfigClockSource>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80028ea:	f000 fcdd 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000648 	.word	0x20000648
 80028fc:	40001800 	.word	0x40001800

08002900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002906:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <MX_USART1_UART_Init+0x50>)
 8002908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 800290c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002912:	4b0e      	ldr	r3, [pc, #56]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002918:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002926:	220c      	movs	r2, #12
 8002928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002936:	4805      	ldr	r0, [pc, #20]	@ (800294c <MX_USART1_UART_Init+0x4c>)
 8002938:	f003 feec 	bl	8006714 <HAL_UART_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002942:	f000 fcb1 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000690 	.word	0x20000690
 8002950:	40011000 	.word	0x40011000

08002954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <MX_DMA_Init+0x3c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a0b      	ldr	r2, [pc, #44]	@ (8002990 <MX_DMA_Init+0x3c>)
 8002964:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <MX_DMA_Init+0x3c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	2105      	movs	r1, #5
 800297a:	203a      	movs	r0, #58	@ 0x3a
 800297c:	f001 fa55 	bl	8003e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002980:	203a      	movs	r0, #58	@ 0x3a
 8002982:	f001 fa6e 	bl	8003e62 <HAL_NVIC_EnableIRQ>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a39      	ldr	r2, [pc, #228]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a32      	ldr	r2, [pc, #200]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b30      	ldr	r3, [pc, #192]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <MX_GPIO_Init+0x104>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b25      	ldr	r3, [pc, #148]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a24      	ldr	r2, [pc, #144]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b22      	ldr	r3, [pc, #136]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <MX_GPIO_Init+0x104>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NamCham1_Pin|NamCham2_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002a3c:	4817      	ldr	r0, [pc, #92]	@ (8002a9c <MX_GPIO_Init+0x108>)
 8002a3e:	f001 ffd9 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4812      	ldr	r0, [pc, #72]	@ (8002aa0 <MX_GPIO_Init+0x10c>)
 8002a56:	f001 fe19 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pins : NamCham1_Pin NamCham2_Pin */
  GPIO_InitStruct.Pin = NamCham1_Pin|NamCham2_Pin;
 8002a5a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a60:	2301      	movs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	480a      	ldr	r0, [pc, #40]	@ (8002a9c <MX_GPIO_Init+0x108>)
 8002a74:	f001 fe0a 	bl	800468c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 8002a78:	23c0      	movs	r3, #192	@ 0xc0
 8002a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a80:	2301      	movs	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	@ (8002aa4 <MX_GPIO_Init+0x110>)
 8002a8c:	f001 fdfe 	bl	800468c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40020800 	.word	0x40020800

08002aa8 <StartTaskLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLogic */
void StartTaskLogic(void const * argument)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	  if(FlagStart.startQD == 1){
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <StartTaskLogic+0xe8>)
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d166      	bne.n	8002b86 <StartTaskLogic+0xde>
		  if(count < Setpoint.countPoint){
 8002ab8:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <StartTaskLogic+0xec>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	da5f      	bge.n	8002b86 <StartTaskLogic+0xde>
			  Setpoint.setpoint1 = Setpoint.points[count].theta1;
 8002ac6:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <StartTaskLogic+0xec>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4a33      	ldr	r2, [pc, #204]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002acc:	3304      	adds	r3, #4
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a30      	ldr	r2, [pc, #192]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002ad8:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.points[count].theta2;
 8002ada:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <StartTaskLogic+0xec>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4a2e      	ldr	r2, [pc, #184]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002aec:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.points[count].theta3;
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <StartTaskLogic+0xec>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4a29      	ldr	r2, [pc, #164]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	4413      	add	r3, r2
 8002af8:	334c      	adds	r3, #76	@ 0x4c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a26      	ldr	r2, [pc, #152]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002afe:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.points[count].theta4;
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <StartTaskLogic+0xec>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4a24      	ldr	r2, [pc, #144]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4413      	add	r3, r2
 8002b0a:	3350      	adds	r3, #80	@ 0x50
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b10:	60d3      	str	r3, [r2, #12]

			  osDelay(3000);
 8002b12:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002b16:	f004 ffd8 	bl	8007aca <osDelay>
			  HAL_GPIO_WritePin(NamCham1_GPIO_Port, NamCham1_Pin, 1);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b20:	481e      	ldr	r0, [pc, #120]	@ (8002b9c <StartTaskLogic+0xf4>)
 8002b22:	f001 ff67 	bl	80049f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(NamCham2_GPIO_Port, NamCham2_Pin, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b2c:	481b      	ldr	r0, [pc, #108]	@ (8002b9c <StartTaskLogic+0xf4>)
 8002b2e:	f001 ff61 	bl	80049f4 <HAL_GPIO_WritePin>

			  Setpoint.setpoint1 = Setpoint.theta1_Nha;
 8002b32:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a18      	ldr	r2, [pc, #96]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b38:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.theta2_Nha;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	4a16      	ldr	r2, [pc, #88]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b40:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.theta3_Nha;
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b48:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.theta4_Nha;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <StartTaskLogic+0xf0>)
 8002b50:	60d3      	str	r3, [r2, #12]

			  osDelay(1500);
 8002b52:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002b56:	f004 ffb8 	bl	8007aca <osDelay>
			  HAL_GPIO_WritePin(NamCham1_GPIO_Port, NamCham1_Pin, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b60:	480e      	ldr	r0, [pc, #56]	@ (8002b9c <StartTaskLogic+0xf4>)
 8002b62:	f001 ff47 	bl	80049f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(NamCham2_GPIO_Port, NamCham2_Pin, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b6c:	480b      	ldr	r0, [pc, #44]	@ (8002b9c <StartTaskLogic+0xf4>)
 8002b6e:	f001 ff41 	bl	80049f4 <HAL_GPIO_WritePin>
			  osDelay(2000);
 8002b72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b76:	f004 ffa8 	bl	8007aca <osDelay>

			  count++;
 8002b7a:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <StartTaskLogic+0xec>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <StartTaskLogic+0xec>)
 8002b84:	701a      	strb	r2, [r3, #0]
		  }
	  }

    osDelay(10);
 8002b86:	200a      	movs	r0, #10
 8002b88:	f004 ff9f 	bl	8007aca <osDelay>
	  if(FlagStart.startQD == 1){
 8002b8c:	e790      	b.n	8002ab0 <StartTaskLogic+0x8>
 8002b8e:	bf00      	nop
 8002b90:	20000748 	.word	0x20000748
 8002b94:	2000136a 	.word	0x2000136a
 8002b98:	20000770 	.word	0x20000770
 8002b9c:	40020400 	.word	0x40020400

08002ba0 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af02      	add	r7, sp, #8
 8002ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  for(;;)
  {
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002ba8:	2140      	movs	r1, #64	@ 0x40
 8002baa:	48a6      	ldr	r0, [pc, #664]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002bac:	f001 ff0a 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b25a      	sxtb	r2, r3
 8002bb4:	4ba4      	ldr	r3, [pc, #656]	@ (8002e48 <StartTaskSetHome+0x2a8>)
 8002bb6:	701a      	strb	r2, [r3, #0]
	sensor.sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	48a2      	ldr	r0, [pc, #648]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002bbc:	f001 ff02 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b25a      	sxtb	r2, r3
 8002bc4:	4ba0      	ldr	r3, [pc, #640]	@ (8002e48 <StartTaskSetHome+0x2a8>)
 8002bc6:	705a      	strb	r2, [r3, #1]
	sensor.sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8002bc8:	2110      	movs	r1, #16
 8002bca:	48a0      	ldr	r0, [pc, #640]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002bcc:	f001 fefa 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	b25a      	sxtb	r2, r3
 8002bd4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e48 <StartTaskSetHome+0x2a8>)
 8002bd6:	709a      	strb	r2, [r3, #2]
	sensor.sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8002bd8:	2120      	movs	r1, #32
 8002bda:	489c      	ldr	r0, [pc, #624]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002bdc:	f001 fef2 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002be0:	4603      	mov	r3, r0
 8002be2:	b25a      	sxtb	r2, r3
 8002be4:	4b98      	ldr	r3, [pc, #608]	@ (8002e48 <StartTaskSetHome+0x2a8>)
 8002be6:	70da      	strb	r2, [r3, #3]
	if(FlagStart.startSetHome == 0){
 8002be8:	4b99      	ldr	r3, [pc, #612]	@ (8002e50 <StartTaskSetHome+0x2b0>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d121      	bne.n	8002c34 <StartTaskSetHome+0x94>
		sethomeJ.sethomeJ1 = 0;
 8002bf0:	4b98      	ldr	r3, [pc, #608]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
		sethomeJ.sethomeJ2 = 0;
 8002bf6:	4b97      	ldr	r3, [pc, #604]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	705a      	strb	r2, [r3, #1]
		sethomeJ.sethomeJ3 = 0;
 8002bfc:	4b95      	ldr	r3, [pc, #596]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	709a      	strb	r2, [r3, #2]
		sethomeJ.sethomeJ4 = 0;
 8002c02:	4b94      	ldr	r3, [pc, #592]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	70da      	strb	r2, [r3, #3]
		FlagStart.startProgram = 0;
 8002c08:	4b91      	ldr	r3, [pc, #580]	@ (8002e50 <StartTaskSetHome+0x2b0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	705a      	strb	r2, [r3, #1]

		SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
 8002c0e:	4b92      	ldr	r3, [pc, #584]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002c10:	f64f 6270 	movw	r2, #65136	@ 0xfe70
 8002c14:	801a      	strh	r2, [r3, #0]
		SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
 8002c16:	4b90      	ldr	r3, [pc, #576]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002c18:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002c1c:	805a      	strh	r2, [r3, #2]
		SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
 8002c1e:	4b8e      	ldr	r3, [pc, #568]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002c20:	f64f 62d4 	movw	r2, #65236	@ 0xfed4
 8002c24:	809a      	strh	r2, [r3, #4]
		SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
 8002c26:	4b8c      	ldr	r3, [pc, #560]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002c28:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c2c:	80da      	strh	r2, [r3, #6]

		FlagStart.startSetHome = 1;
 8002c2e:	4b88      	ldr	r3, [pc, #544]	@ (8002e50 <StartTaskSetHome+0x2b0>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
	}
	if(FlagStart.startProgram == 0){
 8002c34:	4b86      	ldr	r3, [pc, #536]	@ (8002e50 <StartTaskSetHome+0x2b0>)
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80ff 	bne.w	8002e3c <StartTaskSetHome+0x29c>
		if(sethomeJ.sethomeJ1 == 0){
 8002c3e:	4b85      	ldr	r3, [pc, #532]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d167      	bne.n	8002d16 <StartTaskSetHome+0x176>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002c46:	2140      	movs	r1, #64	@ 0x40
 8002c48:	487e      	ldr	r0, [pc, #504]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002c4a:	f001 febb 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11c      	bne.n	8002c8e <StartTaskSetHome+0xee>
				osDelay(1);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f004 ff38 	bl	8007aca <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002c5a:	2140      	movs	r1, #64	@ 0x40
 8002c5c:	4879      	ldr	r0, [pc, #484]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002c5e:	f001 feb1 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d156      	bne.n	8002d16 <StartTaskSetHome+0x176>
					ResetCount(&ENC_LINK1, 1);
 8002c68:	2101      	movs	r1, #1
 8002c6a:	487c      	ldr	r0, [pc, #496]	@ (8002e5c <StartTaskSetHome+0x2bc>)
 8002c6c:	f7fe fac8 	bl	8001200 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ1 = 0;
 8002c70:	4b79      	ldr	r3, [pc, #484]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	801a      	strh	r2, [r3, #0]
					sethomeJ.sethomeJ1 = 1;
 8002c76:	4b77      	ldr	r3, [pc, #476]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
					Angle.AngleLink1 = 0;
 8002c7c:	4b78      	ldr	r3, [pc, #480]	@ (8002e60 <StartTaskSetHome+0x2c0>)
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = 0;
 8002c84:	4b77      	ldr	r3, [pc, #476]	@ (8002e64 <StartTaskSetHome+0x2c4>)
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
 8002c8c:	e043      	b.n	8002d16 <StartTaskSetHome+0x176>
				}
			}
			else {
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ.SpeedSetHomeJ1 > 0){
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4872      	ldr	r0, [pc, #456]	@ (8002e5c <StartTaskSetHome+0x2bc>)
 8002c92:	f7fe fa4f 	bl	8001134 <CountRead>
 8002c96:	ec51 0b10 	vmov	r0, r1, d0
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b72      	ldr	r3, [pc, #456]	@ (8002e68 <StartTaskSetHome+0x2c8>)
 8002ca0:	f7fd ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00e      	beq.n	8002cc8 <StartTaskSetHome+0x128>
 8002caa:	4b6b      	ldr	r3, [pc, #428]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd09      	ble.n	8002cc8 <StartTaskSetHome+0x128>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002cb4:	4b68      	ldr	r3, [pc, #416]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b21a      	sxth	r2, r3
 8002cc2:	4b65      	ldr	r3, [pc, #404]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002cc4:	801a      	strh	r2, [r3, #0]
 8002cc6:	e01b      	b.n	8002d00 <StartTaskSetHome+0x160>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ.SpeedSetHomeJ1 < 0) {
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4864      	ldr	r0, [pc, #400]	@ (8002e5c <StartTaskSetHome+0x2bc>)
 8002ccc:	f7fe fa32 	bl	8001134 <CountRead>
 8002cd0:	ec51 0b10 	vmov	r0, r1, d0
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b64      	ldr	r3, [pc, #400]	@ (8002e6c <StartTaskSetHome+0x2cc>)
 8002cda:	f7fd feff 	bl	8000adc <__aeabi_dcmplt>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <StartTaskSetHome+0x160>
 8002ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da08      	bge.n	8002d00 <StartTaskSetHome+0x160>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002cee:	4b5a      	ldr	r3, [pc, #360]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	425b      	negs	r3, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b21a      	sxth	r2, r3
 8002cfc:	4b56      	ldr	r3, [pc, #344]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002cfe:	801a      	strh	r2, [r3, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ.SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002d00:	4b55      	ldr	r3, [pc, #340]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d06:	461a      	mov	r2, r3
 8002d08:	230c      	movs	r3, #12
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	4958      	ldr	r1, [pc, #352]	@ (8002e70 <StartTaskSetHome+0x2d0>)
 8002d10:	4858      	ldr	r0, [pc, #352]	@ (8002e74 <StartTaskSetHome+0x2d4>)
 8002d12:	f7fe fa8c 	bl	800122e <Drive>
			}
		}
		if(sethomeJ.sethomeJ2 == 0){
 8002d16:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12c      	bne.n	8002d78 <StartTaskSetHome+0x1d8>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002d1e:	2180      	movs	r1, #128	@ 0x80
 8002d20:	4848      	ldr	r0, [pc, #288]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002d22:	f001 fe4f 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d11a      	bne.n	8002d62 <StartTaskSetHome+0x1c2>
				osDelay(1);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f004 fecc 	bl	8007aca <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	4843      	ldr	r0, [pc, #268]	@ (8002e44 <StartTaskSetHome+0x2a4>)
 8002d36:	f001 fe45 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d11b      	bne.n	8002d78 <StartTaskSetHome+0x1d8>
					ResetCount(&ENC_LINK2, 1);
 8002d40:	2101      	movs	r1, #1
 8002d42:	484d      	ldr	r0, [pc, #308]	@ (8002e78 <StartTaskSetHome+0x2d8>)
 8002d44:	f7fe fa5c 	bl	8001200 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ2 = 0;
 8002d48:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	805a      	strh	r2, [r3, #2]
					sethomeJ.sethomeJ2 = 1;
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	705a      	strb	r2, [r3, #1]
					Angle.AngleLink2 = 187;
 8002d54:	4b42      	ldr	r3, [pc, #264]	@ (8002e60 <StartTaskSetHome+0x2c0>)
 8002d56:	4a49      	ldr	r2, [pc, #292]	@ (8002e7c <StartTaskSetHome+0x2dc>)
 8002d58:	605a      	str	r2, [r3, #4]
					Setpoint.p0_2 = 187;
 8002d5a:	4b42      	ldr	r3, [pc, #264]	@ (8002e64 <StartTaskSetHome+0x2c4>)
 8002d5c:	4a47      	ldr	r2, [pc, #284]	@ (8002e7c <StartTaskSetHome+0x2dc>)
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d60:	e00a      	b.n	8002d78 <StartTaskSetHome+0x1d8>

				}
			}
			else {
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ.SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002d64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2308      	movs	r3, #8
 8002d70:	4943      	ldr	r1, [pc, #268]	@ (8002e80 <StartTaskSetHome+0x2e0>)
 8002d72:	4844      	ldr	r0, [pc, #272]	@ (8002e84 <StartTaskSetHome+0x2e4>)
 8002d74:	f7fe fa5b 	bl	800122e <Drive>
			}
		}
		if(sethomeJ.sethomeJ3 == 0){
 8002d78:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002d7a:	789b      	ldrb	r3, [r3, #2]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d12c      	bne.n	8002dda <StartTaskSetHome+0x23a>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002d80:	2110      	movs	r1, #16
 8002d82:	4832      	ldr	r0, [pc, #200]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002d84:	f001 fe1e 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11a      	bne.n	8002dc4 <StartTaskSetHome+0x224>
				osDelay(1);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f004 fe9b 	bl	8007aca <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002d94:	2110      	movs	r1, #16
 8002d96:	482d      	ldr	r0, [pc, #180]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002d98:	f001 fe14 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11b      	bne.n	8002dda <StartTaskSetHome+0x23a>
					ResetCount(&ENC_LINK3, 1);
 8002da2:	2101      	movs	r1, #1
 8002da4:	4838      	ldr	r0, [pc, #224]	@ (8002e88 <StartTaskSetHome+0x2e8>)
 8002da6:	f7fe fa2b 	bl	8001200 <ResetCount>
					sethomeJ.sethomeJ3 = 1;
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	709a      	strb	r2, [r3, #2]
					SpeedSetHomeJ.SpeedSetHomeJ3 = 0;
 8002db0:	4b29      	ldr	r3, [pc, #164]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	809a      	strh	r2, [r3, #4]
					Angle.AngleLink3 = -135;
 8002db6:	4b2a      	ldr	r3, [pc, #168]	@ (8002e60 <StartTaskSetHome+0x2c0>)
 8002db8:	4a34      	ldr	r2, [pc, #208]	@ (8002e8c <StartTaskSetHome+0x2ec>)
 8002dba:	609a      	str	r2, [r3, #8]
					Setpoint.p0_3 = -135;
 8002dbc:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <StartTaskSetHome+0x2c4>)
 8002dbe:	4a33      	ldr	r2, [pc, #204]	@ (8002e8c <StartTaskSetHome+0x2ec>)
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002dc2:	e00a      	b.n	8002dda <StartTaskSetHome+0x23a>
				}
			}
			else {
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ.SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002dc4:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002dc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2304      	movs	r3, #4
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	492b      	ldr	r1, [pc, #172]	@ (8002e80 <StartTaskSetHome+0x2e0>)
 8002dd4:	482e      	ldr	r0, [pc, #184]	@ (8002e90 <StartTaskSetHome+0x2f0>)
 8002dd6:	f7fe fa2a 	bl	800122e <Drive>
			}
		}
		if(sethomeJ.sethomeJ4 == 0){
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d12c      	bne.n	8002e3c <StartTaskSetHome+0x29c>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002de2:	2120      	movs	r1, #32
 8002de4:	4819      	ldr	r0, [pc, #100]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002de6:	f001 fded 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11a      	bne.n	8002e26 <StartTaskSetHome+0x286>
				osDelay(1);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f004 fe6a 	bl	8007aca <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002df6:	2120      	movs	r1, #32
 8002df8:	4814      	ldr	r0, [pc, #80]	@ (8002e4c <StartTaskSetHome+0x2ac>)
 8002dfa:	f001 fde3 	bl	80049c4 <HAL_GPIO_ReadPin>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11b      	bne.n	8002e3c <StartTaskSetHome+0x29c>
					ResetCount(&ENC_LINK4, 1);
 8002e04:	2101      	movs	r1, #1
 8002e06:	4823      	ldr	r0, [pc, #140]	@ (8002e94 <StartTaskSetHome+0x2f4>)
 8002e08:	f7fe f9fa 	bl	8001200 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ4 = 0;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	80da      	strh	r2, [r3, #6]
					sethomeJ.sethomeJ4 = 1;
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <StartTaskSetHome+0x2b4>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	70da      	strb	r2, [r3, #3]
					Angle.AngleLink4 = 90;
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <StartTaskSetHome+0x2c0>)
 8002e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002e98 <StartTaskSetHome+0x2f8>)
 8002e1c:	60da      	str	r2, [r3, #12]
					Setpoint.p0_4 = 90;
 8002e1e:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <StartTaskSetHome+0x2c4>)
 8002e20:	4a1d      	ldr	r2, [pc, #116]	@ (8002e98 <StartTaskSetHome+0x2f8>)
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e24:	e00a      	b.n	8002e3c <StartTaskSetHome+0x29c>
				}
			}
			else {
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ.SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002e26:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <StartTaskSetHome+0x2b8>)
 8002e28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2304      	movs	r3, #4
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	2300      	movs	r3, #0
 8002e34:	4919      	ldr	r1, [pc, #100]	@ (8002e9c <StartTaskSetHome+0x2fc>)
 8002e36:	481a      	ldr	r0, [pc, #104]	@ (8002ea0 <StartTaskSetHome+0x300>)
 8002e38:	f7fe f9f9 	bl	800122e <Drive>
		}
//		if(sethomeJ.sethomeJ1 == 1 && sethomeJ.sethomeJ2 == 1 && sethomeJ.sethomeJ3 == 1 && sethomeJ.sethomeJ4 == 1){
//			FlagStart.startProgram = 1;
//		}
	}
    osDelay(10);
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	f004 fe44 	bl	8007aca <osDelay>
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002e42:	e6b1      	b.n	8002ba8 <StartTaskSetHome+0x8>
 8002e44:	40020800 	.word	0x40020800
 8002e48:	2000075c 	.word	0x2000075c
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	20000748 	.word	0x20000748
 8002e54:	20000758 	.word	0x20000758
 8002e58:	20000750 	.word	0x20000750
 8002e5c:	20001370 	.word	0x20001370
 8002e60:	20000760 	.word	0x20000760
 8002e64:	20000770 	.word	0x20000770
 8002e68:	40568000 	.word	0x40568000
 8002e6c:	c0568000 	.word	0xc0568000
 8002e70:	200005b8 	.word	0x200005b8
 8002e74:	200013b8 	.word	0x200013b8
 8002e78:	20001470 	.word	0x20001470
 8002e7c:	433b0000 	.word	0x433b0000
 8002e80:	20000528 	.word	0x20000528
 8002e84:	200014b8 	.word	0x200014b8
 8002e88:	20001570 	.word	0x20001570
 8002e8c:	c3070000 	.word	0xc3070000
 8002e90:	200015b8 	.word	0x200015b8
 8002e94:	20001670 	.word	0x20001670
 8002e98:	42b40000 	.word	0x42b40000
 8002e9c:	20000600 	.word	0x20000600
 8002ea0:	200016b8 	.word	0x200016b8

08002ea4 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <StartTaskPID+0x40>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <StartTaskPID+0x14>
 8002eb4:	f7fe fe8c 	bl	8001bd0 <PID_LINK1_Pos>
	  if(sethomeJ.sethomeJ2 == 1)	PID_LINK2_Pos();
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <StartTaskPID+0x40>)
 8002eba:	785b      	ldrb	r3, [r3, #1]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <StartTaskPID+0x20>
 8002ec0:	f7fe ff3a 	bl	8001d38 <PID_LINK2_Pos>
	  if(sethomeJ.sethomeJ3 == 1)	PID_LINK3_Pos();
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <StartTaskPID+0x40>)
 8002ec6:	789b      	ldrb	r3, [r3, #2]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <StartTaskPID+0x2c>
 8002ecc:	f7fe ffee 	bl	8001eac <PID_LINK3_Pos>
	  if(sethomeJ.sethomeJ4 == 1)	PID_LINK4_Pos();
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <StartTaskPID+0x40>)
 8002ed2:	78db      	ldrb	r3, [r3, #3]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <StartTaskPID+0x38>
 8002ed8:	f7ff f8a2 	bl	8002020 <PID_LINK4_Pos>

	  osDelay(10);
 8002edc:	200a      	movs	r0, #10
 8002ede:	f004 fdf4 	bl	8007aca <osDelay>
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002ee2:	e7e3      	b.n	8002eac <StartTaskPID+0x8>
 8002ee4:	20000758 	.word	0x20000758

08002ee8 <StartTaskTrajectory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTrajectory */
void StartTaskTrajectory(void const * argument)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTrajectory */
  /* Infinite loop */
  static uint8_t mode = 0;
  for(;;)
  {
	if(FlagStart.startProgram == 1){
 8002ef0:	4bae      	ldr	r3, [pc, #696]	@ (80031ac <StartTaskTrajectory+0x2c4>)
 8002ef2:	785b      	ldrb	r3, [r3, #1]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 8154 	bne.w	80031a2 <StartTaskTrajectory+0x2ba>
		switch(mode){
 8002efa:	4bad      	ldr	r3, [pc, #692]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	f200 814e 	bhi.w	80031a0 <StartTaskTrajectory+0x2b8>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <StartTaskTrajectory+0x24>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f21 	.word	0x08002f21
 8002f10:	08002f91 	.word	0x08002f91
 8002f14:	08003001 	.word	0x08003001
 8002f18:	08003071 	.word	0x08003071
 8002f1c:	080030e1 	.word	0x080030e1
			case 0:
				if(T1 < Tf){
 8002f20:	4ba4      	ldr	r3, [pc, #656]	@ (80031b4 <StartTaskTrajectory+0x2cc>)
 8002f22:	ed93 7a00 	vldr	s14, [r3]
 8002f26:	4ba4      	ldr	r3, [pc, #656]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f34:	d528      	bpl.n	8002f88 <StartTaskTrajectory+0xa0>
					T1 += 5;
 8002f36:	4b9f      	ldr	r3, [pc, #636]	@ (80031b4 <StartTaskTrajectory+0x2cc>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f44:	4b9b      	ldr	r3, [pc, #620]	@ (80031b4 <StartTaskTrajectory+0x2cc>)
 8002f46:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink1 = p(Setpoint.p0_1, Setpoint.setpoint1, Tf, 0, 0, T1);
 8002f4a:	4b9c      	ldr	r3, [pc, #624]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8002f4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f50:	4b9a      	ldr	r3, [pc, #616]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	4b98      	ldr	r3, [pc, #608]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	4b95      	ldr	r3, [pc, #596]	@ (80031b4 <StartTaskTrajectory+0x2cc>)
 8002f5e:	ed93 6a00 	vldr	s12, [r3]
 8002f62:	eef0 2a46 	vmov.f32	s5, s12
 8002f66:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 8002f6a:	eddf 1a95 	vldr	s3, [pc, #596]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 8002f6e:	eeb0 1a66 	vmov.f32	s2, s13
 8002f72:	eef0 0a47 	vmov.f32	s1, s14
 8002f76:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7a:	f7fe fb5b 	bl	8001634 <p>
 8002f7e:	eef0 7a40 	vmov.f32	s15, s0
 8002f82:	4b90      	ldr	r3, [pc, #576]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 8002f84:	edc3 7a00 	vstr	s15, [r3]
				}
				mode = 1;
 8002f88:	4b89      	ldr	r3, [pc, #548]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
				break;
 8002f8e:	e108      	b.n	80031a2 <StartTaskTrajectory+0x2ba>
			case 1:
				if(T2 < Tf){
 8002f90:	4b8d      	ldr	r3, [pc, #564]	@ (80031c8 <StartTaskTrajectory+0x2e0>)
 8002f92:	ed93 7a00 	vldr	s14, [r3]
 8002f96:	4b88      	ldr	r3, [pc, #544]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d528      	bpl.n	8002ff8 <StartTaskTrajectory+0x110>
					T2 += 5;
 8002fa6:	4b88      	ldr	r3, [pc, #544]	@ (80031c8 <StartTaskTrajectory+0x2e0>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002fb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb4:	4b84      	ldr	r3, [pc, #528]	@ (80031c8 <StartTaskTrajectory+0x2e0>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink2 = p(Setpoint.p0_2, Setpoint.setpoint2, Tf, 0, 0, T2);
 8002fba:	4b80      	ldr	r3, [pc, #512]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8002fbc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002fc0:	4b7e      	ldr	r3, [pc, #504]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8002fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8002fc8:	edd3 6a00 	vldr	s13, [r3]
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80031c8 <StartTaskTrajectory+0x2e0>)
 8002fce:	ed93 6a00 	vldr	s12, [r3]
 8002fd2:	eef0 2a46 	vmov.f32	s5, s12
 8002fd6:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 8002fda:	eddf 1a79 	vldr	s3, [pc, #484]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 8002fde:	eeb0 1a66 	vmov.f32	s2, s13
 8002fe2:	eef0 0a47 	vmov.f32	s1, s14
 8002fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fea:	f7fe fb23 	bl	8001634 <p>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	4b74      	ldr	r3, [pc, #464]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 8002ff4:	edc3 7a01 	vstr	s15, [r3, #4]
				}
				mode = 2;
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
				break;
 8002ffe:	e0d0      	b.n	80031a2 <StartTaskTrajectory+0x2ba>

			case 2:
				if(T3 < Tf){
 8003000:	4b72      	ldr	r3, [pc, #456]	@ (80031cc <StartTaskTrajectory+0x2e4>)
 8003002:	ed93 7a00 	vldr	s14, [r3]
 8003006:	4b6c      	ldr	r3, [pc, #432]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8003008:	edd3 7a00 	vldr	s15, [r3]
 800300c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003014:	d528      	bpl.n	8003068 <StartTaskTrajectory+0x180>
					T3 += 5;
 8003016:	4b6d      	ldr	r3, [pc, #436]	@ (80031cc <StartTaskTrajectory+0x2e4>)
 8003018:	edd3 7a00 	vldr	s15, [r3]
 800301c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003024:	4b69      	ldr	r3, [pc, #420]	@ (80031cc <StartTaskTrajectory+0x2e4>)
 8003026:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink3 = p(Setpoint.p0_3, Setpoint.setpoint3, Tf, 0, 0, T3);
 800302a:	4b64      	ldr	r3, [pc, #400]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800302c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003030:	4b62      	ldr	r3, [pc, #392]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003032:	ed93 7a02 	vldr	s14, [r3, #8]
 8003036:	4b60      	ldr	r3, [pc, #384]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8003038:	edd3 6a00 	vldr	s13, [r3]
 800303c:	4b63      	ldr	r3, [pc, #396]	@ (80031cc <StartTaskTrajectory+0x2e4>)
 800303e:	ed93 6a00 	vldr	s12, [r3]
 8003042:	eef0 2a46 	vmov.f32	s5, s12
 8003046:	ed9f 2a5e 	vldr	s4, [pc, #376]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 800304a:	eddf 1a5d 	vldr	s3, [pc, #372]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 800304e:	eeb0 1a66 	vmov.f32	s2, s13
 8003052:	eef0 0a47 	vmov.f32	s1, s14
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f7fe faeb 	bl	8001634 <p>
 800305e:	eef0 7a40 	vmov.f32	s15, s0
 8003062:	4b58      	ldr	r3, [pc, #352]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 8003064:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				mode = 3;
 8003068:	4b51      	ldr	r3, [pc, #324]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 800306a:	2203      	movs	r2, #3
 800306c:	701a      	strb	r2, [r3, #0]
				break;
 800306e:	e098      	b.n	80031a2 <StartTaskTrajectory+0x2ba>
			case 3:
				if(T4 < Tf){
 8003070:	4b57      	ldr	r3, [pc, #348]	@ (80031d0 <StartTaskTrajectory+0x2e8>)
 8003072:	ed93 7a00 	vldr	s14, [r3]
 8003076:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	d528      	bpl.n	80030d8 <StartTaskTrajectory+0x1f0>
					T4 += 5;
 8003086:	4b52      	ldr	r3, [pc, #328]	@ (80031d0 <StartTaskTrajectory+0x2e8>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003090:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003094:	4b4e      	ldr	r3, [pc, #312]	@ (80031d0 <StartTaskTrajectory+0x2e8>)
 8003096:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink4 = p(Setpoint.p0_4, Setpoint.setpoint4, Tf, 0, 0, T4);
 800309a:	4b48      	ldr	r3, [pc, #288]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800309c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80030a0:	4b46      	ldr	r3, [pc, #280]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 80030a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <StartTaskTrajectory+0x2d0>)
 80030a8:	edd3 6a00 	vldr	s13, [r3]
 80030ac:	4b48      	ldr	r3, [pc, #288]	@ (80031d0 <StartTaskTrajectory+0x2e8>)
 80030ae:	ed93 6a00 	vldr	s12, [r3]
 80030b2:	eef0 2a46 	vmov.f32	s5, s12
 80030b6:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 80030ba:	eddf 1a41 	vldr	s3, [pc, #260]	@ 80031c0 <StartTaskTrajectory+0x2d8>
 80030be:	eeb0 1a66 	vmov.f32	s2, s13
 80030c2:	eef0 0a47 	vmov.f32	s1, s14
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	f7fe fab3 	bl	8001634 <p>
 80030ce:	eef0 7a40 	vmov.f32	s15, s0
 80030d2:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 80030d4:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				mode = 4;
 80030d8:	4b35      	ldr	r3, [pc, #212]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 80030da:	2204      	movs	r2, #4
 80030dc:	701a      	strb	r2, [r3, #0]
				break;
 80030de:	e060      	b.n	80031a2 <StartTaskTrajectory+0x2ba>
			case 4:

				  if (Setpoint.setpoint1 != Setpoint.preSetpoint1)
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	4b35      	ldr	r3, [pc, #212]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 80030e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80030ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d00b      	beq.n	800310e <StartTaskTrajectory+0x226>
				  {
					T1 = 0;
 80030f6:	4b2f      	ldr	r3, [pc, #188]	@ (80031b4 <StartTaskTrajectory+0x2cc>)
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = Angle.AngleLink1;
 80030fe:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2e      	ldr	r2, [pc, #184]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003104:	6213      	str	r3, [r2, #32]
					Setpoint.preSetpoint1 = Setpoint.setpoint1;
 8003106:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2c      	ldr	r2, [pc, #176]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800310c:	6113      	str	r3, [r2, #16]
				  }
				  if (Setpoint.setpoint2 != Setpoint.preSetpoint2)
 800310e:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003110:	ed93 7a01 	vldr	s14, [r3, #4]
 8003114:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003116:	edd3 7a05 	vldr	s15, [r3, #20]
 800311a:	eeb4 7a67 	vcmp.f32	s14, s15
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d00b      	beq.n	800313c <StartTaskTrajectory+0x254>
				  {
					T2 = 0;
 8003124:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <StartTaskTrajectory+0x2e0>)
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
					Setpoint.p0_2 = Angle.AngleLink2;
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003132:	6253      	str	r3, [r2, #36]	@ 0x24
					Setpoint.preSetpoint2 = Setpoint.setpoint2;
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a20      	ldr	r2, [pc, #128]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800313a:	6153      	str	r3, [r2, #20]
				  }
				  if (Setpoint.setpoint3 != Setpoint.preSetpoint3)
 800313c:	4b1f      	ldr	r3, [pc, #124]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800313e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003144:	edd3 7a06 	vldr	s15, [r3, #24]
 8003148:	eeb4 7a67 	vcmp.f32	s14, s15
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	d00b      	beq.n	800316a <StartTaskTrajectory+0x282>
				  {
					T3 = 0;
 8003152:	4b1e      	ldr	r3, [pc, #120]	@ (80031cc <StartTaskTrajectory+0x2e4>)
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
					Setpoint.p0_3 = Angle.AngleLink3;
 800315a:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003160:	6293      	str	r3, [r2, #40]	@ 0x28
					Setpoint.preSetpoint3 = Setpoint.setpoint3;
 8003162:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4a15      	ldr	r2, [pc, #84]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003168:	6193      	str	r3, [r2, #24]
				  }
				  if (Setpoint.setpoint4 != Setpoint.preSetpoint4)
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800316c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003172:	edd3 7a07 	vldr	s15, [r3, #28]
 8003176:	eeb4 7a67 	vcmp.f32	s14, s15
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	d00b      	beq.n	8003198 <StartTaskTrajectory+0x2b0>
				  {
					T4 = 0;
 8003180:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <StartTaskTrajectory+0x2e8>)
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
					Setpoint.p0_4 = Angle.AngleLink4;
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <StartTaskTrajectory+0x2dc>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a0b      	ldr	r2, [pc, #44]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 800318e:	62d3      	str	r3, [r2, #44]	@ 0x2c
					Setpoint.preSetpoint4 = Setpoint.setpoint4;
 8003190:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <StartTaskTrajectory+0x2d4>)
 8003196:	61d3      	str	r3, [r2, #28]
				  }
				  mode = 0;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <StartTaskTrajectory+0x2c8>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]

				  break;
 800319e:	e000      	b.n	80031a2 <StartTaskTrajectory+0x2ba>
			default:
			  break;
 80031a0:	bf00      	nop
		}

	}
    osDelay(1);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f004 fc91 	bl	8007aca <osDelay>
	if(FlagStart.startProgram == 1){
 80031a8:	e6a2      	b.n	8002ef0 <StartTaskTrajectory+0x8>
 80031aa:	bf00      	nop
 80031ac:	20000748 	.word	0x20000748
 80031b0:	20001b74 	.word	0x20001b74
 80031b4:	20000ad4 	.word	0x20000ad4
 80031b8:	20000000 	.word	0x20000000
 80031bc:	20000770 	.word	0x20000770
 80031c0:	00000000 	.word	0x00000000
 80031c4:	20000760 	.word	0x20000760
 80031c8:	20000ad8 	.word	0x20000ad8
 80031cc:	20000adc 	.word	0x20000adc
 80031d0:	20000ae0 	.word	0x20000ae0

080031d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af06      	add	r7, sp, #24
 80031dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a29      	ldr	r2, [pc, #164]	@ (8003288 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80031e8:	f000 fd30 	bl	8003c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM12){
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d142      	bne.n	800327c <HAL_TIM_PeriodElapsedCallback+0xa8>
	if(FlagStart.startProgram == 1){
 80031f6:	4b26      	ldr	r3, [pc, #152]	@ (8003290 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d13e      	bne.n	800327c <HAL_TIM_PeriodElapsedCallback+0xa8>
		count_timer++;
 80031fe:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	4b23      	ldr	r3, [pc, #140]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003208:	801a      	strh	r2, [r3, #0]
		if(count_timer >= 200){
 800320a:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003210:	d934      	bls.n	800327c <HAL_TIM_PeriodElapsedCallback+0xa8>
		  sprintf(dataAngle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n", (float)Angle.AngleLink1, (float)Angle.AngleLink2, (float)Angle.AngleLink3, (float)Angle.AngleLink4);
 8003212:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f996 	bl	8000548 <__aeabi_f2d>
 800321c:	4682      	mov	sl, r0
 800321e:	468b      	mov	fp, r1
 8003220:	4b1d      	ldr	r3, [pc, #116]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	4604      	mov	r4, r0
 800322c:	460d      	mov	r5, r1
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f988 	bl	8000548 <__aeabi_f2d>
 8003238:	4680      	mov	r8, r0
 800323a:	4689      	mov	r9, r1
 800323c:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f981 	bl	8000548 <__aeabi_f2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800324e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003252:	e9cd 4500 	strd	r4, r5, [sp]
 8003256:	4652      	mov	r2, sl
 8003258:	465b      	mov	r3, fp
 800325a:	4910      	ldr	r1, [pc, #64]	@ (800329c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800325c:	4810      	ldr	r0, [pc, #64]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800325e:	f007 fc43 	bl	800aae8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)dataAngle, strlen(dataAngle));
 8003262:	480f      	ldr	r0, [pc, #60]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003264:	f7fd f804 	bl	8000270 <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	490c      	ldr	r1, [pc, #48]	@ (80032a0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003270:	480c      	ldr	r0, [pc, #48]	@ (80032a4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003272:	f003 fa9f 	bl	80067b4 <HAL_UART_Transmit_IT>
		  count_timer = 0;
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003278:	2200      	movs	r2, #0
 800327a:	801a      	strh	r2, [r3, #0]
		}
	}
  }
  /* USER CODE END Callback 1 */
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003286:	bf00      	nop
 8003288:	40002000 	.word	0x40002000
 800328c:	40001800 	.word	0x40001800
 8003290:	20000748 	.word	0x20000748
 8003294:	20001368 	.word	0x20001368
 8003298:	20000760 	.word	0x20000760
 800329c:	0800e028 	.word	0x0800e028
 80032a0:	200012e8 	.word	0x200012e8
 80032a4:	20000690 	.word	0x20000690

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <Error_Handler+0x8>

080032b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_MspInit+0x54>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <HAL_MspInit+0x54>)
 80032c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_MspInit+0x54>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	603b      	str	r3, [r7, #0]
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_MspInit+0x54>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_MspInit+0x54>)
 80032e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_MspInit+0x54>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	210f      	movs	r1, #15
 80032f6:	f06f 0001 	mvn.w	r0, #1
 80032fa:	f000 fd96 	bl	8003e2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b090      	sub	sp, #64	@ 0x40
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a78      	ldr	r2, [pc, #480]	@ (800350c <HAL_TIM_Encoder_MspInit+0x200>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d135      	bne.n	800339a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003332:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	4a76      	ldr	r2, [pc, #472]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6453      	str	r3, [r2, #68]	@ 0x44
 800333e:	4b74      	ldr	r3, [pc, #464]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
 800334e:	4b70      	ldr	r3, [pc, #448]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a6f      	ldr	r2, [pc, #444]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b6d      	ldr	r3, [pc, #436]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8003366:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003378:	2301      	movs	r3, #1
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003380:	4619      	mov	r1, r3
 8003382:	4864      	ldr	r0, [pc, #400]	@ (8003514 <HAL_TIM_Encoder_MspInit+0x208>)
 8003384:	f001 f982 	bl	800468c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2105      	movs	r1, #5
 800338c:	2018      	movs	r0, #24
 800338e:	f000 fd4c 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003392:	2018      	movs	r0, #24
 8003394:	f000 fd65 	bl	8003e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003398:	e0b3      	b.n	8003502 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d14b      	bne.n	800343c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	4b59      	ldr	r3, [pc, #356]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	4a58      	ldr	r2, [pc, #352]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b4:	4b56      	ldr	r3, [pc, #344]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	4b52      	ldr	r3, [pc, #328]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4a51      	ldr	r2, [pc, #324]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ec:	4b48      	ldr	r3, [pc, #288]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 80033f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	2302      	movs	r3, #2
 8003400:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003406:	2300      	movs	r3, #0
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800340a:	2301      	movs	r3, #1
 800340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 800340e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	483f      	ldr	r0, [pc, #252]	@ (8003514 <HAL_TIM_Encoder_MspInit+0x208>)
 8003416:	f001 f939 	bl	800468c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 800341a:	2308      	movs	r3, #8
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800342a:	2301      	movs	r3, #1
 800342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 800342e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003432:	4619      	mov	r1, r3
 8003434:	4838      	ldr	r0, [pc, #224]	@ (8003518 <HAL_TIM_Encoder_MspInit+0x20c>)
 8003436:	f001 f929 	bl	800468c <HAL_GPIO_Init>
}
 800343a:	e062      	b.n	8003502 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a36      	ldr	r2, [pc, #216]	@ (800351c <HAL_TIM_Encoder_MspInit+0x210>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d12c      	bne.n	80034a0 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	4a30      	ldr	r2, [pc, #192]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6413      	str	r3, [r2, #64]	@ 0x40
 8003456:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	4b2a      	ldr	r3, [pc, #168]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a29      	ldr	r2, [pc, #164]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 800347e:	23c0      	movs	r3, #192	@ 0xc0
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348a:	2300      	movs	r3, #0
 800348c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800348e:	2302      	movs	r3, #2
 8003490:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003492:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003496:	4619      	mov	r1, r3
 8003498:	481e      	ldr	r0, [pc, #120]	@ (8003514 <HAL_TIM_Encoder_MspInit+0x208>)
 800349a:	f001 f8f7 	bl	800468c <HAL_GPIO_Init>
}
 800349e:	e030      	b.n	8003502 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003520 <HAL_TIM_Encoder_MspInit+0x214>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d12b      	bne.n	8003502 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b18      	ldr	r3, [pc, #96]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b15      	ldr	r3, [pc, #84]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <HAL_TIM_Encoder_MspInit+0x204>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 80034e2:	2303      	movs	r3, #3
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ee:	2300      	movs	r3, #0
 80034f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034f2:	2302      	movs	r3, #2
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	@ (8003514 <HAL_TIM_Encoder_MspInit+0x208>)
 80034fe:	f001 f8c5 	bl	800468c <HAL_GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	3740      	adds	r7, #64	@ 0x40
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40023800 	.word	0x40023800
 8003514:	40020000 	.word	0x40020000
 8003518:	40020400 	.word	0x40020400
 800351c:	40000400 	.word	0x40000400
 8003520:	40000c00 	.word	0x40000c00

08003524 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <HAL_TIM_PWM_MspInit+0xb8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4b29      	ldr	r3, [pc, #164]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	4a28      	ldr	r2, [pc, #160]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6413      	str	r3, [r2, #64]	@ 0x40
 8003546:	4b26      	ldr	r3, [pc, #152]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003552:	e03e      	b.n	80035d2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	@ (80035e4 <HAL_TIM_PWM_MspInit+0xc0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d11e      	bne.n	800359c <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	6453      	str	r3, [r2, #68]	@ 0x44
 800356e:	4b1c      	ldr	r3, [pc, #112]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2105      	movs	r1, #5
 800357e:	202b      	movs	r0, #43	@ 0x2b
 8003580:	f000 fc53 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003584:	202b      	movs	r0, #43	@ 0x2b
 8003586:	f000 fc6c 	bl	8003e62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 800358a:	2200      	movs	r2, #0
 800358c:	210f      	movs	r1, #15
 800358e:	202d      	movs	r0, #45	@ 0x2d
 8003590:	f000 fc4b 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003594:	202d      	movs	r0, #45	@ 0x2d
 8003596:	f000 fc64 	bl	8003e62 <HAL_NVIC_EnableIRQ>
}
 800359a:	e01a      	b.n	80035d2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM9)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <HAL_TIM_PWM_MspInit+0xc4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d115      	bne.n	80035d2 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	4a0c      	ldr	r2, [pc, #48]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_TIM_PWM_MspInit+0xbc>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2105      	movs	r1, #5
 80035c6:	2018      	movs	r0, #24
 80035c8:	f000 fc2f 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80035cc:	2018      	movs	r0, #24
 80035ce:	f000 fc48 	bl	8003e62 <HAL_NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40014000 	.word	0x40014000

080035ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_TIM_Base_MspInit+0x48>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d115      	bne.n	800362a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <HAL_TIM_Base_MspInit+0x4c>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a0c      	ldr	r2, [pc, #48]	@ (8003638 <HAL_TIM_Base_MspInit+0x4c>)
 8003608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_TIM_Base_MspInit+0x4c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2105      	movs	r1, #5
 800361e:	202b      	movs	r0, #43	@ 0x2b
 8003620:	f000 fc03 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003624:	202b      	movs	r0, #43	@ 0x2b
 8003626:	f000 fc1c 	bl	8003e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40001800 	.word	0x40001800
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <HAL_TIM_MspPostInit+0xfc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d11f      	bne.n	800369e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	4a35      	ldr	r2, [pc, #212]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 8003668:	f043 0308 	orr.w	r3, r3, #8
 800366c:	6313      	str	r3, [r2, #48]	@ 0x30
 800366e:	4b33      	ldr	r3, [pc, #204]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 800367a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800367e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800368c:	2302      	movs	r3, #2
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4619      	mov	r1, r3
 8003696:	482a      	ldr	r0, [pc, #168]	@ (8003740 <HAL_TIM_MspPostInit+0x104>)
 8003698:	f000 fff8 	bl	800468c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800369c:	e047      	b.n	800372e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_TIM_MspPostInit+0x108>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11f      	bne.n	80036e8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	4a22      	ldr	r2, [pc, #136]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b8:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 80036c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80036d6:	2303      	movs	r3, #3
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4819      	ldr	r0, [pc, #100]	@ (8003748 <HAL_TIM_MspPostInit+0x10c>)
 80036e2:	f000 ffd3 	bl	800468c <HAL_GPIO_Init>
}
 80036e6:	e022      	b.n	800372e <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_TIM_MspPostInit+0x110>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d11d      	bne.n	800372e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4a10      	ldr	r2, [pc, #64]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6313      	str	r3, [r2, #48]	@ 0x30
 8003702:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <HAL_TIM_MspPostInit+0x100>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 800370e:	230c      	movs	r3, #12
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800371e:	2303      	movs	r3, #3
 8003720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	4809      	ldr	r0, [pc, #36]	@ (8003750 <HAL_TIM_MspPostInit+0x114>)
 800372a:	f000 ffaf 	bl	800468c <HAL_GPIO_Init>
}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	@ 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000800 	.word	0x40000800
 800373c:	40023800 	.word	0x40023800
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40020800 	.word	0x40020800
 800374c:	40014000 	.word	0x40014000
 8003750:	40020000 	.word	0x40020000

08003754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	@ 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0314 	add.w	r3, r7, #20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a34      	ldr	r2, [pc, #208]	@ (8003844 <HAL_UART_MspInit+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d162      	bne.n	800383c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	4b33      	ldr	r3, [pc, #204]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	4a32      	ldr	r2, [pc, #200]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 8003780:	f043 0310 	orr.w	r3, r3, #16
 8003784:	6453      	str	r3, [r2, #68]	@ 0x44
 8003786:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037a2:	4b29      	ldr	r3, [pc, #164]	@ (8003848 <HAL_UART_MspInit+0xf4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ae:	23c0      	movs	r3, #192	@ 0xc0
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b2:	2302      	movs	r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037be:	2307      	movs	r3, #7
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	4820      	ldr	r0, [pc, #128]	@ (800384c <HAL_UART_MspInit+0xf8>)
 80037ca:	f000 ff5f 	bl	800468c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037d0:	4a20      	ldr	r2, [pc, #128]	@ (8003854 <HAL_UART_MspInit+0x100>)
 80037d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80037d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80037da:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e8:	4b19      	ldr	r3, [pc, #100]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037f0:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80037fc:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003802:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 8003804:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003808:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800380a:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 800380c:	2200      	movs	r2, #0
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003810:	480f      	ldr	r0, [pc, #60]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 8003812:	f000 fb39 	bl	8003e88 <HAL_DMA_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800381c:	f7ff fd44 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0b      	ldr	r2, [pc, #44]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 8003824:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <HAL_UART_MspInit+0xfc>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2105      	movs	r1, #5
 8003830:	2025      	movs	r0, #37	@ 0x25
 8003832:	f000 fafa 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003836:	2025      	movs	r0, #37	@ 0x25
 8003838:	f000 fb13 	bl	8003e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800383c:	bf00      	nop
 800383e:	3728      	adds	r7, #40	@ 0x28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40011000 	.word	0x40011000
 8003848:	40023800 	.word	0x40023800
 800384c:	40020400 	.word	0x40020400
 8003850:	200006d8 	.word	0x200006d8
 8003854:	40026440 	.word	0x40026440

08003858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	4b33      	ldr	r3, [pc, #204]	@ (800393c <HAL_InitTick+0xe4>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	4a32      	ldr	r2, [pc, #200]	@ (800393c <HAL_InitTick+0xe4>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003876:	6413      	str	r3, [r2, #64]	@ 0x40
 8003878:	4b30      	ldr	r3, [pc, #192]	@ (800393c <HAL_InitTick+0xe4>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003884:	f107 0210 	add.w	r2, r7, #16
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fd62 	bl	8005358 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d103      	bne.n	80038a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800389e:	f001 fd33 	bl	8005308 <HAL_RCC_GetPCLK1Freq>
 80038a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80038a4:	e004      	b.n	80038b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038a6:	f001 fd2f 	bl	8005308 <HAL_RCC_GetPCLK1Freq>
 80038aa:	4603      	mov	r3, r0
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b2:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <HAL_InitTick+0xe8>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	0c9b      	lsrs	r3, r3, #18
 80038ba:	3b01      	subs	r3, #1
 80038bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80038be:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <HAL_InitTick+0xec>)
 80038c0:	4a21      	ldr	r2, [pc, #132]	@ (8003948 <HAL_InitTick+0xf0>)
 80038c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80038c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <HAL_InitTick+0xec>)
 80038c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038ca:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80038cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003944 <HAL_InitTick+0xec>)
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <HAL_InitTick+0xec>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <HAL_InitTick+0xec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038de:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <HAL_InitTick+0xec>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80038e4:	4817      	ldr	r0, [pc, #92]	@ (8003944 <HAL_InitTick+0xec>)
 80038e6:	f001 fd69 	bl	80053bc <HAL_TIM_Base_Init>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80038f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11b      	bne.n	8003930 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80038f8:	4812      	ldr	r0, [pc, #72]	@ (8003944 <HAL_InitTick+0xec>)
 80038fa:	f001 fdaf 	bl	800545c <HAL_TIM_Base_Start_IT>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003904:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800390c:	202d      	movs	r0, #45	@ 0x2d
 800390e:	f000 faa8 	bl	8003e62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d808      	bhi.n	800392a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003918:	2200      	movs	r2, #0
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	202d      	movs	r0, #45	@ 0x2d
 800391e:	f000 fa84 	bl	8003e2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003922:	4a0a      	ldr	r2, [pc, #40]	@ (800394c <HAL_InitTick+0xf4>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e002      	b.n	8003930 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003934:	4618      	mov	r0, r3
 8003936:	3738      	adds	r7, #56	@ 0x38
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	431bde83 	.word	0x431bde83
 8003944:	20001b78 	.word	0x20001b78
 8003948:	40002000 	.word	0x40002000
 800394c:	20000008 	.word	0x20000008

08003950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <NMI_Handler+0x4>

08003958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <HardFault_Handler+0x4>

08003960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <MemManage_Handler+0x4>

08003968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <BusFault_Handler+0x4>

08003970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <UsageFault_Handler+0x4>

08003978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800398c:	4803      	ldr	r0, [pc, #12]	@ (800399c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800398e:	f002 f821 	bl	80059d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003992:	4803      	ldr	r0, [pc, #12]	@ (80039a0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003994:	f002 f81e 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000450 	.word	0x20000450
 80039a0:	20000600 	.word	0x20000600

080039a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039a8:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <USART1_IRQHandler+0x10>)
 80039aa:	f002 ff97 	bl	80068dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000690 	.word	0x20000690

080039b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039bc:	4803      	ldr	r0, [pc, #12]	@ (80039cc <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80039be:	f002 f809 	bl	80059d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80039c2:	4803      	ldr	r0, [pc, #12]	@ (80039d0 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80039c4:	f002 f806 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200005b8 	.word	0x200005b8
 80039d0:	20000648 	.word	0x20000648

080039d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80039d8:	4803      	ldr	r0, [pc, #12]	@ (80039e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80039da:	f001 fffb 	bl	80059d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80039de:	4803      	ldr	r0, [pc, #12]	@ (80039ec <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80039e0:	f001 fff8 	bl	80059d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200005b8 	.word	0x200005b8
 80039ec:	20001b78 	.word	0x20001b78

080039f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <DMA2_Stream2_IRQHandler+0x10>)
 80039f6:	f000 fbdf 	bl	80041b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200006d8 	.word	0x200006d8

08003a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return 1;
 8003a08:	2301      	movs	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_kill>:

int _kill(int pid, int sig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a1e:	f007 f9c7 	bl	800adb0 <__errno>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2216      	movs	r2, #22
 8003a26:	601a      	str	r2, [r3, #0]
  return -1;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_exit>:

void _exit (int status)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffe7 	bl	8003a14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <_exit+0x12>

08003a4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e00a      	b.n	8003a72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a5c:	f3af 8000 	nop.w
 8003a60:	4601      	mov	r1, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	60ba      	str	r2, [r7, #8]
 8003a68:	b2ca      	uxtb	r2, r1
 8003a6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	dbf0      	blt.n	8003a5c <_read+0x12>
  }

  return len;
 8003a7a:	687b      	ldr	r3, [r7, #4]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e009      	b.n	8003aaa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	60ba      	str	r2, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	dbf1      	blt.n	8003a96 <_write+0x12>
  }
  return len;
 8003ab2:	687b      	ldr	r3, [r7, #4]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_close>:

int _close(int file)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ae4:	605a      	str	r2, [r3, #4]
  return 0;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <_isatty>:

int _isatty(int file)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003afc:	2301      	movs	r3, #1
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b2c:	4a14      	ldr	r2, [pc, #80]	@ (8003b80 <_sbrk+0x5c>)
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <_sbrk+0x60>)
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b38:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <_sbrk+0x64>)
 8003b42:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <_sbrk+0x68>)
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b46:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <_sbrk+0x64>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d207      	bcs.n	8003b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b54:	f007 f92c 	bl	800adb0 <__errno>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	220c      	movs	r2, #12
 8003b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b62:	e009      	b.n	8003b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <_sbrk+0x64>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b6a:	4b07      	ldr	r3, [pc, #28]	@ (8003b88 <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <_sbrk+0x64>)
 8003b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b76:	68fb      	ldr	r3, [r7, #12]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20020000 	.word	0x20020000
 8003b84:	00000400 	.word	0x00000400
 8003b88:	20001bc0 	.word	0x20001bc0
 8003b8c:	20005a68 	.word	0x20005a68

08003b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <SystemInit+0x20>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	4a05      	ldr	r2, [pc, #20]	@ (8003bb0 <SystemInit+0x20>)
 8003b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003bb8:	f7ff ffea 	bl	8003b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bbc:	480c      	ldr	r0, [pc, #48]	@ (8003bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bbe:	490d      	ldr	r1, [pc, #52]	@ (8003bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc4:	e002      	b.n	8003bcc <LoopCopyDataInit>

08003bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bca:	3304      	adds	r3, #4

08003bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd0:	d3f9      	bcc.n	8003bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd8:	e001      	b.n	8003bde <LoopFillZerobss>

08003bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bdc:	3204      	adds	r2, #4

08003bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be0:	d3fb      	bcc.n	8003bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003be2:	f007 f8eb 	bl	800adbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003be6:	f7fe fa47 	bl	8002078 <main>
  bx  lr    
 8003bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bf4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003bf8:	0800e4d8 	.word	0x0800e4d8
  ldr r2, =_sbss
 8003bfc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003c00:	20005a68 	.word	0x20005a68

08003c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <ADC_IRQHandler>
	...

08003c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <HAL_Init+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <HAL_Init+0x40>)
 8003c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_Init+0x40>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <HAL_Init+0x40>)
 8003c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c24:	4b08      	ldr	r3, [pc, #32]	@ (8003c48 <HAL_Init+0x40>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <HAL_Init+0x40>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c30:	2003      	movs	r0, #3
 8003c32:	f000 f8ef 	bl	8003e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c36:	200f      	movs	r0, #15
 8003c38:	f7ff fe0e 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c3c:	f7ff fb3a 	bl	80032b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00

08003c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_IncTick+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_IncTick+0x24>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	@ (8003c70 <HAL_IncTick+0x24>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	20001bc4 	.word	0x20001bc4

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20001bc4 	.word	0x20001bc4

08003c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cbe:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	60d3      	str	r3, [r2, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <__NVIC_GetPriorityGrouping+0x18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0307 	and.w	r3, r3, #7
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db0b      	blt.n	8003d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4907      	ldr	r1, [pc, #28]	@ (8003d28 <__NVIC_EnableIRQ+0x38>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2001      	movs	r0, #1
 8003d12:	fa00 f202 	lsl.w	r2, r0, r2
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	@ (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	@ (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	@ 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003dec:	f3bf 8f4f 	dsb	sy
}
 8003df0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <__NVIC_SystemReset+0x24>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003dfa:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <__NVIC_SystemReset+0x24>)
 8003dfc:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <__NVIC_SystemReset+0x28>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e02:	f3bf 8f4f 	dsb	sy
}
 8003e06:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <__NVIC_SystemReset+0x20>
 8003e0c:	e000ed00 	.word	0xe000ed00
 8003e10:	05fa0004 	.word	0x05fa0004

08003e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff35 	bl	8003c8c <__NVIC_SetPriorityGrouping>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e3c:	f7ff ff4a 	bl	8003cd4 <__NVIC_GetPriorityGrouping>
 8003e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	6978      	ldr	r0, [r7, #20]
 8003e48:	f7ff ff9a 	bl	8003d80 <NVIC_EncodePriority>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff69 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e5a:	bf00      	nop
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff3d 	bl	8003cf0 <__NVIC_EnableIRQ>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003e82:	f7ff ffb1 	bl	8003de8 <__NVIC_SystemReset>
	...

08003e88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e94:	f7ff feee 	bl	8003c74 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e099      	b.n	8003fd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec4:	e00f      	b.n	8003ee6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec6:	f7ff fed5 	bl	8003c74 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b05      	cmp	r3, #5
 8003ed2:	d908      	bls.n	8003ee6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e078      	b.n	8003fd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e8      	bne.n	8003ec6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <HAL_DMA_Init+0x158>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d107      	bne.n	8003f50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0307 	bic.w	r3, r3, #7
 8003f66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d117      	bne.n	8003faa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb01 	bl	8004594 <DMA_CheckFifoParam>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2240      	movs	r2, #64	@ 0x40
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e016      	b.n	8003fd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fab8 	bl	8004528 <DMA_CalcBaseAndBitshift>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	223f      	movs	r2, #63	@ 0x3f
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	f010803f 	.word	0xf010803f

08003fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_DMA_Start_IT+0x26>
 8004006:	2302      	movs	r3, #2
 8004008:	e040      	b.n	800408c <HAL_DMA_Start_IT+0xa8>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d12f      	bne.n	800407e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fa4a 	bl	80044cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	223f      	movs	r2, #63	@ 0x3f
 800403e:	409a      	lsls	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0216 	orr.w	r2, r2, #22
 8004052:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e005      	b.n	800408a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408a:	7dfb      	ldrb	r3, [r7, #23]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040a2:	f7ff fde7 	bl	8003c74 <HAL_GetTick>
 80040a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e052      	b.n	800416c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0216 	bic.w	r2, r2, #22
 80040d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d103      	bne.n	80040f6 <HAL_DMA_Abort+0x62>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0208 	bic.w	r2, r2, #8
 8004104:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004116:	e013      	b.n	8004140 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004118:	f7ff fdac 	bl	8003c74 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b05      	cmp	r3, #5
 8004124:	d90c      	bls.n	8004140 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e015      	b.n	800416c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e4      	bne.n	8004118 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004152:	223f      	movs	r2, #63	@ 0x3f
 8004154:	409a      	lsls	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d004      	beq.n	8004192 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2280      	movs	r2, #128	@ 0x80
 800418c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e00c      	b.n	80041ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2205      	movs	r2, #5
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004400 <HAL_DMA_IRQHandler+0x248>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a8e      	ldr	r2, [pc, #568]	@ (8004404 <HAL_DMA_IRQHandler+0x24c>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	2208      	movs	r2, #8
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01a      	beq.n	8004224 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0204 	bic.w	r2, r2, #4
 800420a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	2208      	movs	r2, #8
 8004212:	409a      	lsls	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d012      	beq.n	800425a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004246:	2201      	movs	r2, #1
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004252:	f043 0202 	orr.w	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425e:	2204      	movs	r2, #4
 8004260:	409a      	lsls	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d012      	beq.n	8004290 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427c:	2204      	movs	r2, #4
 800427e:	409a      	lsls	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	2210      	movs	r2, #16
 8004296:	409a      	lsls	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d043      	beq.n	8004328 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d03c      	beq.n	8004328 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	2210      	movs	r2, #16
 80042b4:	409a      	lsls	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d018      	beq.n	80042fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d108      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d024      	beq.n	8004328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
 80042e6:	e01f      	b.n	8004328 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01b      	beq.n	8004328 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
 80042f8:	e016      	b.n	8004328 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d107      	bne.n	8004318 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0208 	bic.w	r2, r2, #8
 8004316:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432c:	2220      	movs	r2, #32
 800432e:	409a      	lsls	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 808f 	beq.w	8004458 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8087 	beq.w	8004458 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	2220      	movs	r2, #32
 8004350:	409a      	lsls	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b05      	cmp	r3, #5
 8004360:	d136      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0216 	bic.w	r2, r2, #22
 8004370:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004380:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <HAL_DMA_IRQHandler+0x1da>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0208 	bic.w	r2, r2, #8
 80043a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	223f      	movs	r2, #63	@ 0x3f
 80043a8:	409a      	lsls	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d07e      	beq.n	80044c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
        }
        return;
 80043ce:	e079      	b.n	80044c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01d      	beq.n	800441a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10d      	bne.n	8004408 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d031      	beq.n	8004458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
 80043fc:	e02c      	b.n	8004458 <HAL_DMA_IRQHandler+0x2a0>
 80043fe:	bf00      	nop
 8004400:	20000004 	.word	0x20000004
 8004404:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d023      	beq.n	8004458 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e01e      	b.n	8004458 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0210 	bic.w	r2, r2, #16
 8004436:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	2b00      	cmp	r3, #0
 800445e:	d032      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d022      	beq.n	80044b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2205      	movs	r2, #5
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	3301      	adds	r3, #1
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	d307      	bcc.n	80044a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f2      	bne.n	8004484 <HAL_DMA_IRQHandler+0x2cc>
 800449e:	e000      	b.n	80044a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
 80044c2:	e000      	b.n	80044c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044c4:	bf00      	nop
    }
  }
}
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d108      	bne.n	800450c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800450a:	e007      	b.n	800451c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	3b10      	subs	r3, #16
 8004538:	4a14      	ldr	r2, [pc, #80]	@ (800458c <DMA_CalcBaseAndBitshift+0x64>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004542:	4a13      	ldr	r2, [pc, #76]	@ (8004590 <DMA_CalcBaseAndBitshift+0x68>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d909      	bls.n	800456a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	659a      	str	r2, [r3, #88]	@ 0x58
 8004568:	e007      	b.n	800457a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	aaaaaaab 	.word	0xaaaaaaab
 8004590:	0800e078 	.word	0x0800e078

08004594 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11f      	bne.n	80045ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d856      	bhi.n	8004662 <DMA_CheckFifoParam+0xce>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <DMA_CheckFifoParam+0x28>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045df 	.word	0x080045df
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	08004663 	.word	0x08004663
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d046      	beq.n	8004666 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e043      	b.n	8004666 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045e6:	d140      	bne.n	800466a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ec:	e03d      	b.n	800466a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f6:	d121      	bne.n	800463c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d837      	bhi.n	800466e <DMA_CheckFifoParam+0xda>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <DMA_CheckFifoParam+0x70>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004615 	.word	0x08004615
 8004608:	0800461b 	.word	0x0800461b
 800460c:	08004615 	.word	0x08004615
 8004610:	0800462d 	.word	0x0800462d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e030      	b.n	800467c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d025      	beq.n	8004672 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462a:	e022      	b.n	8004672 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004634:	d11f      	bne.n	8004676 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800463a:	e01c      	b.n	8004676 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d903      	bls.n	800464a <DMA_CheckFifoParam+0xb6>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d003      	beq.n	8004650 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004648:	e018      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
      break;
 800464e:	e015      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e00b      	b.n	800467a <DMA_CheckFifoParam+0xe6>
      break;
 8004662:	bf00      	nop
 8004664:	e00a      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
 8004668:	e008      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e006      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e004      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;   
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <DMA_CheckFifoParam+0xe8>
      break;
 800467a:	bf00      	nop
    }
  } 
  
  return status; 
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop

0800468c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e16b      	b.n	8004980 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	f040 815a 	bne.w	800497a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d005      	beq.n	80046de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d130      	bne.n	8004740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	f003 0201 	and.w	r2, r3, #1
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b03      	cmp	r3, #3
 800474a:	d017      	beq.n	800477c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d123      	bne.n	80047d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	08da      	lsrs	r2, r3, #3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3208      	adds	r2, #8
 8004790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	220f      	movs	r2, #15
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	08da      	lsrs	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3208      	adds	r2, #8
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0203 	and.w	r2, r3, #3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80b4 	beq.w	800497a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	4b60      	ldr	r3, [pc, #384]	@ (8004998 <HAL_GPIO_Init+0x30c>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481a:	4a5f      	ldr	r2, [pc, #380]	@ (8004998 <HAL_GPIO_Init+0x30c>)
 800481c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004820:	6453      	str	r3, [r2, #68]	@ 0x44
 8004822:	4b5d      	ldr	r3, [pc, #372]	@ (8004998 <HAL_GPIO_Init+0x30c>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800482e:	4a5b      	ldr	r2, [pc, #364]	@ (800499c <HAL_GPIO_Init+0x310>)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	3302      	adds	r3, #2
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a52      	ldr	r2, [pc, #328]	@ (80049a0 <HAL_GPIO_Init+0x314>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d02b      	beq.n	80048b2 <HAL_GPIO_Init+0x226>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a51      	ldr	r2, [pc, #324]	@ (80049a4 <HAL_GPIO_Init+0x318>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d025      	beq.n	80048ae <HAL_GPIO_Init+0x222>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a50      	ldr	r2, [pc, #320]	@ (80049a8 <HAL_GPIO_Init+0x31c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d01f      	beq.n	80048aa <HAL_GPIO_Init+0x21e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4f      	ldr	r2, [pc, #316]	@ (80049ac <HAL_GPIO_Init+0x320>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d019      	beq.n	80048a6 <HAL_GPIO_Init+0x21a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4e      	ldr	r2, [pc, #312]	@ (80049b0 <HAL_GPIO_Init+0x324>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_GPIO_Init+0x216>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4d      	ldr	r2, [pc, #308]	@ (80049b4 <HAL_GPIO_Init+0x328>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00d      	beq.n	800489e <HAL_GPIO_Init+0x212>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4c      	ldr	r2, [pc, #304]	@ (80049b8 <HAL_GPIO_Init+0x32c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <HAL_GPIO_Init+0x20e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4b      	ldr	r2, [pc, #300]	@ (80049bc <HAL_GPIO_Init+0x330>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_GPIO_Init+0x20a>
 8004892:	2307      	movs	r3, #7
 8004894:	e00e      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 8004896:	2308      	movs	r3, #8
 8004898:	e00c      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 800489a:	2306      	movs	r3, #6
 800489c:	e00a      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 800489e:	2305      	movs	r3, #5
 80048a0:	e008      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 80048a2:	2304      	movs	r3, #4
 80048a4:	e006      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 80048a6:	2303      	movs	r3, #3
 80048a8:	e004      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e002      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <HAL_GPIO_Init+0x228>
 80048b2:	2300      	movs	r3, #0
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	f002 0203 	and.w	r2, r2, #3
 80048ba:	0092      	lsls	r2, r2, #2
 80048bc:	4093      	lsls	r3, r2
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048c4:	4935      	ldr	r1, [pc, #212]	@ (800499c <HAL_GPIO_Init+0x310>)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3302      	adds	r3, #2
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048f6:	4a32      	ldr	r2, [pc, #200]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048fc:	4b30      	ldr	r3, [pc, #192]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004920:	4a27      	ldr	r2, [pc, #156]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004926:	4b26      	ldr	r3, [pc, #152]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800494a:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004950:	4b1b      	ldr	r3, [pc, #108]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004974:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <HAL_GPIO_Init+0x334>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	3301      	adds	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b0f      	cmp	r3, #15
 8004984:	f67f ae90 	bls.w	80046a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	3724      	adds	r7, #36	@ 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800
 800499c:	40013800 	.word	0x40013800
 80049a0:	40020000 	.word	0x40020000
 80049a4:	40020400 	.word	0x40020400
 80049a8:	40020800 	.word	0x40020800
 80049ac:	40020c00 	.word	0x40020c00
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40021400 	.word	0x40021400
 80049b8:	40021800 	.word	0x40021800
 80049bc:	40021c00 	.word	0x40021c00
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e267      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d075      	beq.n	8004b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a46:	4b88      	ldr	r3, [pc, #544]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a52:	4b85      	ldr	r3, [pc, #532]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d112      	bne.n	8004a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5e:	4b82      	ldr	r3, [pc, #520]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d05b      	beq.n	8004b30 <HAL_RCC_OscConfig+0x108>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d157      	bne.n	8004b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e242      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCC_OscConfig+0x74>
 8004a8e:	4b76      	ldr	r3, [pc, #472]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a75      	ldr	r2, [pc, #468]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e01d      	b.n	8004ad8 <HAL_RCC_OscConfig+0xb0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x98>
 8004aa6:	4b70      	ldr	r3, [pc, #448]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0xb0>
 8004ac0:	4b69      	ldr	r3, [pc, #420]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a68      	ldr	r2, [pc, #416]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b66      	ldr	r3, [pc, #408]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a65      	ldr	r2, [pc, #404]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7ff f8c8 	bl	8003c74 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7ff f8c4 	bl	8003c74 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	@ 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e207      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b5b      	ldr	r3, [pc, #364]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xc0>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7ff f8b4 	bl	8003c74 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b10:	f7ff f8b0 	bl	8003c74 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	@ 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1f3      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	4b51      	ldr	r3, [pc, #324]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0xe8>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d063      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4a:	4b47      	ldr	r3, [pc, #284]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d11c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b56:	4b44      	ldr	r3, [pc, #272]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d116      	bne.n	8004b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	4b41      	ldr	r3, [pc, #260]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCC_OscConfig+0x152>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e1c7      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4937      	ldr	r1, [pc, #220]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	e03a      	b.n	8004c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b98:	4b34      	ldr	r3, [pc, #208]	@ (8004c6c <HAL_RCC_OscConfig+0x244>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7ff f869 	bl	8003c74 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba6:	f7ff f865 	bl	8003c74 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1a8      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b28      	ldr	r3, [pc, #160]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4925      	ldr	r1, [pc, #148]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
 8004bd8:	e015      	b.n	8004c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bda:	4b24      	ldr	r3, [pc, #144]	@ (8004c6c <HAL_RCC_OscConfig+0x244>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7ff f848 	bl	8003c74 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be8:	f7ff f844 	bl	8003c74 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e187      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d036      	beq.n	8004c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_RCC_OscConfig+0x248>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7ff f828 	bl	8003c74 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c28:	f7ff f824 	bl	8003c74 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e167      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x200>
 8004c46:	e01b      	b.n	8004c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <HAL_RCC_OscConfig+0x248>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7ff f811 	bl	8003c74 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c54:	e00e      	b.n	8004c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c56:	f7ff f80d 	bl	8003c74 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d907      	bls.n	8004c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e150      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	42470000 	.word	0x42470000
 8004c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	4b88      	ldr	r3, [pc, #544]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1ea      	bne.n	8004c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8097 	beq.w	8004dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c92:	4b81      	ldr	r3, [pc, #516]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cae:	4b7a      	ldr	r3, [pc, #488]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbe:	4b77      	ldr	r3, [pc, #476]	@ (8004e9c <HAL_RCC_OscConfig+0x474>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d118      	bne.n	8004cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cca:	4b74      	ldr	r3, [pc, #464]	@ (8004e9c <HAL_RCC_OscConfig+0x474>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a73      	ldr	r2, [pc, #460]	@ (8004e9c <HAL_RCC_OscConfig+0x474>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd6:	f7fe ffcd 	bl	8003c74 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fe ffc9 	bl	8003c74 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e10c      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e9c <HAL_RCC_OscConfig+0x474>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2ea>
 8004d04:	4b64      	ldr	r3, [pc, #400]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	4a63      	ldr	r2, [pc, #396]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d10:	e01c      	b.n	8004d4c <HAL_RCC_OscConfig+0x324>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0x30c>
 8004d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d26:	4b5c      	ldr	r3, [pc, #368]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0x324>
 8004d34:	4b58      	ldr	r3, [pc, #352]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	4a57      	ldr	r2, [pc, #348]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d40:	4b55      	ldr	r3, [pc, #340]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d44:	4a54      	ldr	r2, [pc, #336]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d46:	f023 0304 	bic.w	r3, r3, #4
 8004d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d015      	beq.n	8004d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fe ff8e 	bl	8003c74 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fe ff8a 	bl	8003c74 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e0cb      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	4b49      	ldr	r3, [pc, #292]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ee      	beq.n	8004d5c <HAL_RCC_OscConfig+0x334>
 8004d7e:	e014      	b.n	8004daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d80:	f7fe ff78 	bl	8003c74 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fe ff74 	bl	8003c74 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0b5      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ee      	bne.n	8004d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004daa:	7dfb      	ldrb	r3, [r7, #23]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d105      	bne.n	8004dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db0:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db4:	4a38      	ldr	r2, [pc, #224]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a1 	beq.w	8004f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc6:	4b34      	ldr	r3, [pc, #208]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d05c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d141      	bne.n	8004e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dda:	4b31      	ldr	r3, [pc, #196]	@ (8004ea0 <HAL_RCC_OscConfig+0x478>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de0:	f7fe ff48 	bl	8003c74 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fe ff44 	bl	8003c74 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e087      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfa:	4b27      	ldr	r3, [pc, #156]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	019b      	lsls	r3, r3, #6
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	491b      	ldr	r1, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_RCC_OscConfig+0x478>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fe ff1d 	bl	8003c74 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fe ff19 	bl	8003c74 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e05c      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e50:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x416>
 8004e5c:	e054      	b.n	8004f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_RCC_OscConfig+0x478>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe ff06 	bl	8003c74 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe ff02 	bl	8003c74 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e045      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_OscConfig+0x470>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x444>
 8004e8a:	e03d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e038      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x4ec>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d028      	beq.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d121      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d11a      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d111      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800

08004f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0cc      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b68      	ldr	r3, [pc, #416]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d90c      	bls.n	8004f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b63      	ldr	r3, [pc, #396]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0b8      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f6c:	4b59      	ldr	r3, [pc, #356]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a58      	ldr	r2, [pc, #352]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f84:	4b53      	ldr	r3, [pc, #332]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a52      	ldr	r2, [pc, #328]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f90:	4b50      	ldr	r3, [pc, #320]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	494d      	ldr	r1, [pc, #308]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d044      	beq.n	8005038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	4b47      	ldr	r3, [pc, #284]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d119      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e07f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e06f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e067      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff6:	4b37      	ldr	r3, [pc, #220]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4934      	ldr	r1, [pc, #208]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	4313      	orrs	r3, r2
 8005006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005008:	f7fe fe34 	bl	8003c74 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	e00a      	b.n	8005026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005010:	f7fe fe30 	bl	8003c74 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	4b2b      	ldr	r3, [pc, #172]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 020c 	and.w	r2, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	429a      	cmp	r2, r3
 8005036:	d1eb      	bne.n	8005010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d20c      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b20      	ldr	r3, [pc, #128]	@ (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e032      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800506c:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4916      	ldr	r1, [pc, #88]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	490e      	ldr	r1, [pc, #56]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800509e:	f000 f821 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	490a      	ldr	r1, [pc, #40]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	5ccb      	ldrb	r3, [r1, r3]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	4a09      	ldr	r2, [pc, #36]	@ (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050ba:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe fbca 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40023c00 	.word	0x40023c00
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800e060 	.word	0x0800e060
 80050dc:	20000004 	.word	0x20000004
 80050e0:	20000008 	.word	0x20000008

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b094      	sub	sp, #80	@ 0x50
 80050ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fc:	4b79      	ldr	r3, [pc, #484]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b08      	cmp	r3, #8
 8005106:	d00d      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x40>
 8005108:	2b08      	cmp	r3, #8
 800510a:	f200 80e1 	bhi.w	80052d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x34>
 8005112:	2b04      	cmp	r3, #4
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x3a>
 8005116:	e0db      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005118:	4b73      	ldr	r3, [pc, #460]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800511c:	e0db      	b.n	80052d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800511e:	4b73      	ldr	r3, [pc, #460]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x208>)
 8005120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005122:	e0d8      	b.n	80052d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005124:	4b6f      	ldr	r3, [pc, #444]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800512e:	4b6d      	ldr	r3, [pc, #436]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d063      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513a:	4b6a      	ldr	r3, [pc, #424]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	2200      	movs	r2, #0
 8005142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30
 800514e:	2300      	movs	r3, #0
 8005150:	637b      	str	r3, [r7, #52]	@ 0x34
 8005152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	f04f 0000 	mov.w	r0, #0
 800515e:	f04f 0100 	mov.w	r1, #0
 8005162:	0159      	lsls	r1, r3, #5
 8005164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005168:	0150      	lsls	r0, r2, #5
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4621      	mov	r1, r4
 8005170:	1a51      	subs	r1, r2, r1
 8005172:	6139      	str	r1, [r7, #16]
 8005174:	4629      	mov	r1, r5
 8005176:	eb63 0301 	sbc.w	r3, r3, r1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005188:	4659      	mov	r1, fp
 800518a:	018b      	lsls	r3, r1, #6
 800518c:	4651      	mov	r1, sl
 800518e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005192:	4651      	mov	r1, sl
 8005194:	018a      	lsls	r2, r1, #6
 8005196:	4651      	mov	r1, sl
 8005198:	ebb2 0801 	subs.w	r8, r2, r1
 800519c:	4659      	mov	r1, fp
 800519e:	eb63 0901 	sbc.w	r9, r3, r1
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051b6:	4690      	mov	r8, r2
 80051b8:	4699      	mov	r9, r3
 80051ba:	4623      	mov	r3, r4
 80051bc:	eb18 0303 	adds.w	r3, r8, r3
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	462b      	mov	r3, r5
 80051c4:	eb49 0303 	adc.w	r3, r9, r3
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051d6:	4629      	mov	r1, r5
 80051d8:	024b      	lsls	r3, r1, #9
 80051da:	4621      	mov	r1, r4
 80051dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051e0:	4621      	mov	r1, r4
 80051e2:	024a      	lsls	r2, r1, #9
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ea:	2200      	movs	r2, #0
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051f4:	f7fb fd48 	bl	8000c88 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4613      	mov	r3, r2
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005200:	e058      	b.n	80052b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005202:	4b38      	ldr	r3, [pc, #224]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	099b      	lsrs	r3, r3, #6
 8005208:	2200      	movs	r2, #0
 800520a:	4618      	mov	r0, r3
 800520c:	4611      	mov	r1, r2
 800520e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	2300      	movs	r3, #0
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
 8005218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	f04f 0000 	mov.w	r0, #0
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	0159      	lsls	r1, r3, #5
 800522a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800522e:	0150      	lsls	r0, r2, #5
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4641      	mov	r1, r8
 8005236:	ebb2 0a01 	subs.w	sl, r2, r1
 800523a:	4649      	mov	r1, r9
 800523c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800524c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005254:	ebb2 040a 	subs.w	r4, r2, sl
 8005258:	eb63 050b 	sbc.w	r5, r3, fp
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	00eb      	lsls	r3, r5, #3
 8005266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800526a:	00e2      	lsls	r2, r4, #3
 800526c:	4614      	mov	r4, r2
 800526e:	461d      	mov	r5, r3
 8005270:	4643      	mov	r3, r8
 8005272:	18e3      	adds	r3, r4, r3
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	464b      	mov	r3, r9
 8005278:	eb45 0303 	adc.w	r3, r5, r3
 800527c:	607b      	str	r3, [r7, #4]
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800528a:	4629      	mov	r1, r5
 800528c:	028b      	lsls	r3, r1, #10
 800528e:	4621      	mov	r1, r4
 8005290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005294:	4621      	mov	r1, r4
 8005296:	028a      	lsls	r2, r1, #10
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529e:	2200      	movs	r2, #0
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	61fa      	str	r2, [r7, #28]
 80052a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a8:	f7fb fcee 	bl	8000c88 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4613      	mov	r3, r2
 80052b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052b4:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	3301      	adds	r3, #1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ce:	e002      	b.n	80052d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052d0:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80052d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3750      	adds	r7, #80	@ 0x50
 80052dc:	46bd      	mov	sp, r7
 80052de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	00f42400 	.word	0x00f42400
 80052ec:	007a1200 	.word	0x007a1200

080052f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f4:	4b03      	ldr	r3, [pc, #12]	@ (8005304 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000004 	.word	0x20000004

08005308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800530c:	f7ff fff0 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0a9b      	lsrs	r3, r3, #10
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4903      	ldr	r1, [pc, #12]	@ (800532c <HAL_RCC_GetPCLK1Freq+0x24>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005324:	4618      	mov	r0, r3
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40023800 	.word	0x40023800
 800532c:	0800e070 	.word	0x0800e070

08005330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005334:	f7ff ffdc 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8005338:	4602      	mov	r2, r0
 800533a:	4b05      	ldr	r3, [pc, #20]	@ (8005350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	0b5b      	lsrs	r3, r3, #13
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	4903      	ldr	r1, [pc, #12]	@ (8005354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005346:	5ccb      	ldrb	r3, [r1, r3]
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40023800 	.word	0x40023800
 8005354:	0800e070 	.word	0x0800e070

08005358 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	220f      	movs	r2, #15
 8005366:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005368:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 0203 	and.w	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005374:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005380:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800538c:	4b09      	ldr	r3, [pc, #36]	@ (80053b4 <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	08db      	lsrs	r3, r3, #3
 8005392:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800539a:	4b07      	ldr	r3, [pc, #28]	@ (80053b8 <HAL_RCC_GetClockConfig+0x60>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40023c00 	.word	0x40023c00

080053bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e041      	b.n	8005452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe f902 	bl	80035ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	4619      	mov	r1, r3
 80053fa:	4610      	mov	r0, r2
 80053fc:	f000 fd8c 	bl	8005f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d001      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e04e      	b.n	8005512 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a23      	ldr	r2, [pc, #140]	@ (8005520 <HAL_TIM_Base_Start_IT+0xc4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d022      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549e:	d01d      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005524 <HAL_TIM_Base_Start_IT+0xc8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d018      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005528 <HAL_TIM_Base_Start_IT+0xcc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1c      	ldr	r2, [pc, #112]	@ (800552c <HAL_TIM_Base_Start_IT+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00e      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <HAL_TIM_Base_Start_IT+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a19      	ldr	r2, [pc, #100]	@ (8005534 <HAL_TIM_Base_Start_IT+0xd8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a18      	ldr	r2, [pc, #96]	@ (8005538 <HAL_TIM_Base_Start_IT+0xdc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d111      	bne.n	8005500 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b06      	cmp	r3, #6
 80054ec:	d010      	beq.n	8005510 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	e007      	b.n	8005510 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40010400 	.word	0x40010400
 8005534:	40014000 	.word	0x40014000
 8005538:	40001800 	.word	0x40001800

0800553c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e041      	b.n	80055d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fd ffde 	bl	8003524 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f000 fccc 	bl	8005f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d109      	bne.n	8005600 <HAL_TIM_PWM_Start+0x24>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e022      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d109      	bne.n	800561a <HAL_TIM_PWM_Start+0x3e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e015      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d109      	bne.n	8005634 <HAL_TIM_PWM_Start+0x58>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e008      	b.n	8005646 <HAL_TIM_PWM_Start+0x6a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07c      	b.n	8005748 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0x82>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565c:	e013      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0x92>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566c:	e00b      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xa2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567c:	e003      	b.n	8005686 <HAL_TIM_PWM_Start+0xaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2202      	movs	r2, #2
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 ff38 	bl	8006504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <HAL_TIM_PWM_Start+0x174>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d004      	beq.n	80056a8 <HAL_TIM_PWM_Start+0xcc>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <HAL_TIM_PWM_Start+0x178>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_PWM_Start+0xd0>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_TIM_PWM_Start+0xd2>
 80056ac:	2300      	movs	r3, #0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <HAL_TIM_PWM_Start+0x174>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d4:	d01d      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <HAL_TIM_PWM_Start+0x17c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	@ (800575c <HAL_TIM_PWM_Start+0x180>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <HAL_TIM_PWM_Start+0x184>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <HAL_TIM_PWM_Start+0x178>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a18      	ldr	r2, [pc, #96]	@ (8005764 <HAL_TIM_PWM_Start+0x188>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_PWM_Start+0x136>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <HAL_TIM_PWM_Start+0x18c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d010      	beq.n	8005746 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	e007      	b.n	8005746 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40001800 	.word	0x40001800

0800576c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e097      	b.n	80058b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fd fdb9 	bl	800330c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057b0:	f023 0307 	bic.w	r3, r3, #7
 80057b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3304      	adds	r3, #4
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fba9 	bl	8005f18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	4313      	orrs	r3, r2
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800580c:	f023 030c 	bic.w	r3, r3, #12
 8005810:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005818:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800581c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	4313      	orrs	r3, r2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	011a      	lsls	r2, r3, #4
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	031b      	lsls	r3, r3, #12
 800583c:	4313      	orrs	r3, r2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	4313      	orrs	r3, r2
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d110      	bne.n	800590a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058ee:	7b7b      	ldrb	r3, [r7, #13]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e069      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005908:	e031      	b.n	800596e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d110      	bne.n	8005932 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005916:	7b3b      	ldrb	r3, [r7, #12]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e055      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005930:	e01d      	b.n	800596e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d108      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	7b7b      	ldrb	r3, [r7, #13]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d102      	bne.n	800594a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005944:	7b3b      	ldrb	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d001      	beq.n	800594e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e03e      	b.n	80059cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_TIM_Encoder_Start+0xc4>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d008      	beq.n	800598c <HAL_TIM_Encoder_Start+0xd4>
 800597a:	e00f      	b.n	800599c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fdbd 	bl	8006504 <TIM_CCxChannelCmd>
      break;
 800598a:	e016      	b.n	80059ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	2104      	movs	r1, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fdb5 	bl	8006504 <TIM_CCxChannelCmd>
      break;
 800599a:	e00e      	b.n	80059ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2201      	movs	r2, #1
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fdad 	bl	8006504 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	2104      	movs	r1, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fda6 	bl	8006504 <TIM_CCxChannelCmd>
      break;
 80059b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0201 	orr.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0202 	mvn.w	r2, #2
 8005a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa5b 	bl	8005eda <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa4d 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa5e 	bl	8005eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0204 	mvn.w	r2, #4
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa35 	bl	8005eda <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa27 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa38 	bl	8005eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0208 	mvn.w	r2, #8
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa0f 	bl	8005eda <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa01 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa12 	bl	8005eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0210 	mvn.w	r2, #16
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2208      	movs	r2, #8
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f9e9 	bl	8005eda <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f9db 	bl	8005ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f9ec 	bl	8005eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00c      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0201 	mvn.w	r2, #1
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fd fb4a 	bl	80031d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fdce 	bl	8006700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9bd 	bl	8005f02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d007      	beq.n	8005bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0220 	mvn.w	r2, #32
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fda0 	bl	80066ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0ae      	b.n	8005d30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	f200 809f 	bhi.w	8005d20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005d21 	.word	0x08005d21
 8005bf0:	08005d21 	.word	0x08005d21
 8005bf4:	08005d21 	.word	0x08005d21
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005d21 	.word	0x08005d21
 8005c00:	08005d21 	.word	0x08005d21
 8005c04:	08005d21 	.word	0x08005d21
 8005c08:	08005c9f 	.word	0x08005c9f
 8005c0c:	08005d21 	.word	0x08005d21
 8005c10:	08005d21 	.word	0x08005d21
 8005c14:	08005d21 	.word	0x08005d21
 8005c18:	08005cdf 	.word	0x08005cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fa24 	bl	8006070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0208 	orr.w	r2, r2, #8
 8005c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0204 	bic.w	r2, r2, #4
 8005c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	619a      	str	r2, [r3, #24]
      break;
 8005c5a:	e064      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fa74 	bl	8006150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	021a      	lsls	r2, r3, #8
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	619a      	str	r2, [r3, #24]
      break;
 8005c9c:	e043      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fac9 	bl	800623c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0208 	orr.w	r2, r2, #8
 8005cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0204 	bic.w	r2, r2, #4
 8005cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69d9      	ldr	r1, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	61da      	str	r2, [r3, #28]
      break;
 8005cdc:	e023      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fb1d 	bl	8006324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69d9      	ldr	r1, [r3, #28]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	61da      	str	r2, [r3, #28]
      break;
 8005d1e:	e002      	b.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
      break;
 8005d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_ConfigClockSource+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0b4      	b.n	8005ebe <HAL_TIM_ConfigClockSource+0x186>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d8c:	d03e      	beq.n	8005e0c <HAL_TIM_ConfigClockSource+0xd4>
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d92:	f200 8087 	bhi.w	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d9a:	f000 8086 	beq.w	8005eaa <HAL_TIM_ConfigClockSource+0x172>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da2:	d87f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b70      	cmp	r3, #112	@ 0x70
 8005da6:	d01a      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0xa6>
 8005da8:	2b70      	cmp	r3, #112	@ 0x70
 8005daa:	d87b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b60      	cmp	r3, #96	@ 0x60
 8005dae:	d050      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x11a>
 8005db0:	2b60      	cmp	r3, #96	@ 0x60
 8005db2:	d877      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b50      	cmp	r3, #80	@ 0x50
 8005db6:	d03c      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0xfa>
 8005db8:	2b50      	cmp	r3, #80	@ 0x50
 8005dba:	d873      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d058      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x13a>
 8005dc0:	2b40      	cmp	r3, #64	@ 0x40
 8005dc2:	d86f      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b30      	cmp	r3, #48	@ 0x30
 8005dc6:	d064      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b30      	cmp	r3, #48	@ 0x30
 8005dca:	d86b      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d060      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d867      	bhi.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d05c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d05a      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	e062      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dee:	f000 fb69 	bl	80064c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	609a      	str	r2, [r3, #8]
      break;
 8005e0a:	e04f      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e1c:	f000 fb52 	bl	80064c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e2e:	609a      	str	r2, [r3, #8]
      break;
 8005e30:	e03c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fac6 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2150      	movs	r1, #80	@ 0x50
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fb1f 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005e50:	e02c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 fae5 	bl	800642e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2160      	movs	r1, #96	@ 0x60
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fb0f 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005e70:	e01c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f000 faa6 	bl	80063d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2140      	movs	r1, #64	@ 0x40
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 faff 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005e90:	e00c      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f000 faf6 	bl	800648e <TIM_ITRx_SetConfig>
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a46      	ldr	r2, [pc, #280]	@ (8006044 <TIM_Base_SetConfig+0x12c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f36:	d00f      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a43      	ldr	r2, [pc, #268]	@ (8006048 <TIM_Base_SetConfig+0x130>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a42      	ldr	r2, [pc, #264]	@ (800604c <TIM_Base_SetConfig+0x134>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a41      	ldr	r2, [pc, #260]	@ (8006050 <TIM_Base_SetConfig+0x138>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a40      	ldr	r2, [pc, #256]	@ (8006054 <TIM_Base_SetConfig+0x13c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d108      	bne.n	8005f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a35      	ldr	r2, [pc, #212]	@ (8006044 <TIM_Base_SetConfig+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d02b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f78:	d027      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a32      	ldr	r2, [pc, #200]	@ (8006048 <TIM_Base_SetConfig+0x130>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d023      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a31      	ldr	r2, [pc, #196]	@ (800604c <TIM_Base_SetConfig+0x134>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01f      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a30      	ldr	r2, [pc, #192]	@ (8006050 <TIM_Base_SetConfig+0x138>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2f      	ldr	r2, [pc, #188]	@ (8006054 <TIM_Base_SetConfig+0x13c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d017      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006058 <TIM_Base_SetConfig+0x140>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800605c <TIM_Base_SetConfig+0x144>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2c      	ldr	r2, [pc, #176]	@ (8006060 <TIM_Base_SetConfig+0x148>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8006064 <TIM_Base_SetConfig+0x14c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <TIM_Base_SetConfig+0x150>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	@ (800606c <TIM_Base_SetConfig+0x154>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d108      	bne.n	8005fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <TIM_Base_SetConfig+0x12c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0xf8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a12      	ldr	r2, [pc, #72]	@ (8006054 <TIM_Base_SetConfig+0x13c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d103      	bne.n	8006018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b01      	cmp	r3, #1
 8006028:	d105      	bne.n	8006036 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f023 0201 	bic.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]
  }
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40010000 	.word	0x40010000
 8006048:	40000400 	.word	0x40000400
 800604c:	40000800 	.word	0x40000800
 8006050:	40000c00 	.word	0x40000c00
 8006054:	40010400 	.word	0x40010400
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800
 8006064:	40001800 	.word	0x40001800
 8006068:	40001c00 	.word	0x40001c00
 800606c:	40002000 	.word	0x40002000

08006070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f023 0201 	bic.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 0302 	bic.w	r3, r3, #2
 80060b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a20      	ldr	r2, [pc, #128]	@ (8006148 <TIM_OC1_SetConfig+0xd8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC1_SetConfig+0x64>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1f      	ldr	r2, [pc, #124]	@ (800614c <TIM_OC1_SetConfig+0xdc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0308 	bic.w	r3, r3, #8
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f023 0304 	bic.w	r3, r3, #4
 80060ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <TIM_OC1_SetConfig+0xd8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d003      	beq.n	80060fe <TIM_OC1_SetConfig+0x8e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a14      	ldr	r2, [pc, #80]	@ (800614c <TIM_OC1_SetConfig+0xdc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400

08006150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 0210 	bic.w	r2, r3, #16
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800617e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	4313      	orrs	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 0320 	bic.w	r3, r3, #32
 800619a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <TIM_OC2_SetConfig+0xe4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_OC2_SetConfig+0x68>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a21      	ldr	r2, [pc, #132]	@ (8006238 <TIM_OC2_SetConfig+0xe8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10d      	bne.n	80061d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a17      	ldr	r2, [pc, #92]	@ (8006234 <TIM_OC2_SetConfig+0xe4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC2_SetConfig+0x94>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a16      	ldr	r2, [pc, #88]	@ (8006238 <TIM_OC2_SetConfig+0xe8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d113      	bne.n	800620c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a21      	ldr	r2, [pc, #132]	@ (800631c <TIM_OC3_SetConfig+0xe0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x66>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a20      	ldr	r2, [pc, #128]	@ (8006320 <TIM_OC3_SetConfig+0xe4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a16      	ldr	r2, [pc, #88]	@ (800631c <TIM_OC3_SetConfig+0xe0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC3_SetConfig+0x92>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <TIM_OC3_SetConfig+0xe4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40010000 	.word	0x40010000
 8006320:	40010400 	.word	0x40010400

08006324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800636e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a12      	ldr	r2, [pc, #72]	@ (80063c8 <TIM_OC4_SetConfig+0xa4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC4_SetConfig+0x68>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a11      	ldr	r2, [pc, #68]	@ (80063cc <TIM_OC4_SetConfig+0xa8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d109      	bne.n	80063a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	019b      	lsls	r3, r3, #6
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f023 0201 	bic.w	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f023 030a 	bic.w	r3, r3, #10
 800640c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642e:	b480      	push	{r7}
 8006430:	b087      	sub	sp, #28
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f023 0210 	bic.w	r2, r3, #16
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	031b      	lsls	r3, r3, #12
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800646a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f043 0307 	orr.w	r3, r3, #7
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	609a      	str	r2, [r3, #8]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	021a      	lsls	r2, r3, #8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2201      	movs	r2, #1
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	fa01 f303 	lsl.w	r3, r1, r3
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006564:	2302      	movs	r3, #2
 8006566:	e05a      	b.n	800661e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a21      	ldr	r2, [pc, #132]	@ (800662c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b4:	d01d      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a18      	ldr	r2, [pc, #96]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a15      	ldr	r2, [pc, #84]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10c      	bne.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	4313      	orrs	r3, r2
 8006602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40010000 	.word	0x40010000
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40010400 	.word	0x40010400
 8006640:	40014000 	.word	0x40014000
 8006644:	40001800 	.word	0x40001800

08006648 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006660:	2302      	movs	r3, #2
 8006662:	e03d      	b.n	80066e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e042      	b.n	80067ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fd f80a 	bl	8003754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2224      	movs	r2, #36	@ 0x24
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fed7 	bl	800750c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800676c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800677c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800678c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d121      	bne.n	8006812 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_UART_Transmit_IT+0x26>
 80067d4:	88fb      	ldrh	r3, [r7, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e01a      	b.n	8006814 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2221      	movs	r2, #33	@ 0x21
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800680c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08c      	sub	sp, #48	@ 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b20      	cmp	r3, #32
 8006838:	d14a      	bne.n	80068d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e043      	b.n	80068d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006856:	88fb      	ldrh	r3, [r7, #6]
 8006858:	461a      	mov	r2, r3
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fbf5 	bl	800704c <UART_Start_Receive_DMA>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006868:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800686c:	2b00      	cmp	r3, #0
 800686e:	d12c      	bne.n	80068ca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006874:	2b01      	cmp	r3, #1
 8006876:	d125      	bne.n	80068c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	617b      	str	r3, [r7, #20]
   return(result);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f043 0310 	orr.w	r3, r3, #16
 80068a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80068b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6a39      	ldr	r1, [r7, #32]
 80068b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e5      	bne.n	800688e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80068c2:	e002      	b.n	80068ca <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80068ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068ce:	e000      	b.n	80068d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80068d0:	2302      	movs	r3, #2
  }
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3730      	adds	r7, #48	@ 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b0ba      	sub	sp, #232	@ 0xe8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006902:	2300      	movs	r3, #0
 8006904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006908:	2300      	movs	r3, #0
 800690a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800691a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10f      	bne.n	8006942 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_UART_IRQHandler+0x66>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fd27 	bl	800738e <UART_Receive_IT>
      return;
 8006940:	e25b      	b.n	8006dfa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80de 	beq.w	8006b08 <HAL_UART_IRQHandler+0x22c>
 800694c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d106      	bne.n	8006966 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80d1 	beq.w	8006b08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_UART_IRQHandler+0xae>
 8006972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f043 0201 	orr.w	r2, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800698e:	f003 0304 	and.w	r3, r3, #4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <HAL_UART_IRQHandler+0xd2>
 8006996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f043 0202 	orr.w	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <HAL_UART_IRQHandler+0xf6>
 80069ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ca:	f043 0204 	orr.w	r2, r3, #4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d011      	beq.n	8006a02 <HAL_UART_IRQHandler+0x126>
 80069de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069fa:	f043 0208 	orr.w	r2, r3, #8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 81f2 	beq.w	8006df0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_UART_IRQHandler+0x14e>
 8006a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fcb2 	bl	800738e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b40      	cmp	r3, #64	@ 0x40
 8006a36:	bf0c      	ite	eq
 8006a38:	2301      	moveq	r3, #1
 8006a3a:	2300      	movne	r3, #0
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <HAL_UART_IRQHandler+0x17a>
 8006a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04f      	beq.n	8006af6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fbba 	bl	80071d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a66:	2b40      	cmp	r3, #64	@ 0x40
 8006a68:	d141      	bne.n	8006aee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3314      	adds	r3, #20
 8006a70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3314      	adds	r3, #20
 8006a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1d9      	bne.n	8006a6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d013      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8006cbc <HAL_UART_IRQHandler+0x3e0>)
 8006ac4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd fb52 	bl	8004174 <HAL_DMA_Abort_IT>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d016      	beq.n	8006b04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	e00e      	b.n	8006b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9a8 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	e00a      	b.n	8006b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9a4 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	e006      	b.n	8006b04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9a0 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b02:	e175      	b.n	8006df0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	bf00      	nop
    return;
 8006b06:	e173      	b.n	8006df0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	f040 814f 	bne.w	8006db0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8148 	beq.w	8006db0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8141 	beq.w	8006db0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	f040 80b6 	bne.w	8006cc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8145 	beq.w	8006df4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f080 813e 	bcs.w	8006df4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8a:	f000 8088 	beq.w	8006c9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1d9      	bne.n	8006b8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3314      	adds	r3, #20
 8006be0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e1      	bne.n	8006bda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e3      	bne.n	8006c16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e3      	bne.n	8006c5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fd f9fb 	bl	8004094 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7fa fed3 	bl	8001a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cba:	e09b      	b.n	8006df4 <HAL_UART_IRQHandler+0x518>
 8006cbc:	08007297 	.word	0x08007297
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 808e 	beq.w	8006df8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8089 	beq.w	8006df8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e3      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d42:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d88:	61fa      	str	r2, [r7, #28]
 8006d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	617b      	str	r3, [r7, #20]
   return(result);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e3      	bne.n	8006d64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fa fe59 	bl	8001a60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dae:	e023      	b.n	8006df8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d009      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x4f4>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fa78 	bl	80072be <UART_Transmit_IT>
    return;
 8006dce:	e014      	b.n	8006dfa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00e      	beq.n	8006dfa <HAL_UART_IRQHandler+0x51e>
 8006ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fab8 	bl	800735e <UART_EndTransmit_IT>
    return;
 8006dee:	e004      	b.n	8006dfa <HAL_UART_IRQHandler+0x51e>
    return;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <HAL_UART_IRQHandler+0x51e>
      return;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <HAL_UART_IRQHandler+0x51e>
      return;
 8006df8:	bf00      	nop
  }
}
 8006dfa:	37e8      	adds	r7, #232	@ 0xe8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b09c      	sub	sp, #112	@ 0x70
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d172      	bne.n	8006f52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6e:	2200      	movs	r2, #0
 8006e70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3314      	adds	r3, #20
 8006eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ec6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ec8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ecc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3314      	adds	r3, #20
 8006ee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ef0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006efa:	633a      	str	r2, [r7, #48]	@ 0x30
 8006efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e5      	bne.n	8006eda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d119      	bne.n	8006f52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 0310 	bic.w	r3, r3, #16
 8006f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	330c      	adds	r3, #12
 8006f3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f3e:	61fa      	str	r2, [r7, #28]
 8006f40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	69b9      	ldr	r1, [r7, #24]
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e5      	bne.n	8006f1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f54:	2200      	movs	r2, #0
 8006f56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d106      	bne.n	8006f6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f64:	4619      	mov	r1, r3
 8006f66:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f68:	f7fa fd7a 	bl	8001a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f6c:	e002      	b.n	8006f74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f70:	f7ff ff50 	bl	8006e14 <HAL_UART_RxCpltCallback>
}
 8006f74:	bf00      	nop
 8006f76:	3770      	adds	r7, #112	@ 0x70
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fa fd5c 	bl	8001a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fa8:	e002      	b.n	8006fb0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f7ff ff3c 	bl	8006e28 <HAL_UART_RxHalfCpltCallback>
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd4:	2b80      	cmp	r3, #128	@ 0x80
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b21      	cmp	r3, #33	@ 0x21
 8006fea:	d108      	bne.n	8006ffe <UART_DMAError+0x46>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d005      	beq.n	8006ffe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ff8:	68b8      	ldr	r0, [r7, #8]
 8006ffa:	f000 f8c1 	bl	8007180 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b22      	cmp	r3, #34	@ 0x22
 800701e:	d108      	bne.n	8007032 <UART_DMAError+0x7a>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800702c:	68b8      	ldr	r0, [r7, #8]
 800702e:	f000 f8cf 	bl	80071d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007036:	f043 0210 	orr.w	r2, r3, #16
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800703e:	68b8      	ldr	r0, [r7, #8]
 8007040:	f7ff fefc 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b098      	sub	sp, #96	@ 0x60
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2222      	movs	r2, #34	@ 0x22
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007078:	4a3e      	ldr	r2, [pc, #248]	@ (8007174 <UART_Start_Receive_DMA+0x128>)
 800707a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007080:	4a3d      	ldr	r2, [pc, #244]	@ (8007178 <UART_Start_Receive_DMA+0x12c>)
 8007082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007088:	4a3c      	ldr	r2, [pc, #240]	@ (800717c <UART_Start_Receive_DMA+0x130>)
 800708a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007090:	2200      	movs	r2, #0
 8007092:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007094:	f107 0308 	add.w	r3, r7, #8
 8007098:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	f7fc ff9a 	bl	8003fe4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d019      	beq.n	8007102 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	330c      	adds	r3, #12
 80070d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e5      	bne.n	80070ce <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3314      	adds	r3, #20
 8007108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	657b      	str	r3, [r7, #84]	@ 0x54
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3314      	adds	r3, #20
 8007120:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007122:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3314      	adds	r3, #20
 800713c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	617b      	str	r3, [r7, #20]
   return(result);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800714c:	653b      	str	r3, [r7, #80]	@ 0x50
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3314      	adds	r3, #20
 8007154:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007156:	627a      	str	r2, [r7, #36]	@ 0x24
 8007158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6a39      	ldr	r1, [r7, #32]
 800715c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	61fb      	str	r3, [r7, #28]
   return(result);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3760      	adds	r7, #96	@ 0x60
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	08006e51 	.word	0x08006e51
 8007178:	08006f7d 	.word	0x08006f7d
 800717c:	08006fb9 	.word	0x08006fb9

08007180 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	@ 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	60bb      	str	r3, [r7, #8]
   return(result);
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	330c      	adds	r3, #12
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	61ba      	str	r2, [r7, #24]
 80071aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6979      	ldr	r1, [r7, #20]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	613b      	str	r3, [r7, #16]
   return(result);
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e5      	bne.n	8007188 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80071c4:	bf00      	nop
 80071c6:	3724      	adds	r7, #36	@ 0x24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b095      	sub	sp, #84	@ 0x54
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3314      	adds	r3, #20
 8007212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	61fb      	str	r3, [r7, #28]
   return(result);
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3314      	adds	r3, #20
 800722a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800722e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e5      	bne.n	800720c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	2b01      	cmp	r3, #1
 8007246:	d119      	bne.n	800727c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	60bb      	str	r3, [r7, #8]
   return(result);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f023 0310 	bic.w	r3, r3, #16
 800725e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007268:	61ba      	str	r2, [r7, #24]
 800726a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6979      	ldr	r1, [r7, #20]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	613b      	str	r3, [r7, #16]
   return(result);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e5      	bne.n	8007248 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800728a:	bf00      	nop
 800728c:	3754      	adds	r7, #84	@ 0x54
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fdc3 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b6:	bf00      	nop
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b21      	cmp	r3, #33	@ 0x21
 80072d0:	d13e      	bne.n	8007350 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072da:	d114      	bne.n	8007306 <UART_Transmit_IT+0x48>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	1c9a      	adds	r2, r3, #2
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	621a      	str	r2, [r3, #32]
 8007304:	e008      	b.n	8007318 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	1c59      	adds	r1, r3, #1
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6211      	str	r1, [r2, #32]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29b      	uxth	r3, r3
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10f      	bne.n	800734c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800733a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800734a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007374:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fd3e 	bl	8006e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b08c      	sub	sp, #48	@ 0x30
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b22      	cmp	r3, #34	@ 0x22
 80073a0:	f040 80ae 	bne.w	8007500 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ac:	d117      	bne.n	80073de <UART_Receive_IT+0x50>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d113      	bne.n	80073de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	1c9a      	adds	r2, r3, #2
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	629a      	str	r2, [r3, #40]	@ 0x28
 80073dc:	e026      	b.n	800742c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f0:	d007      	beq.n	8007402 <UART_Receive_IT+0x74>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <UART_Receive_IT+0x82>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e008      	b.n	8007422 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800741c:	b2da      	uxtb	r2, r3
 800741e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007420:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	4619      	mov	r1, r3
 800743a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800743c:	2b00      	cmp	r3, #0
 800743e:	d15d      	bne.n	80074fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0220 	bic.w	r2, r2, #32
 800744e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800745e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007482:	2b01      	cmp	r3, #1
 8007484:	d135      	bne.n	80074f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	330c      	adds	r3, #12
 8007492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	613b      	str	r3, [r7, #16]
   return(result);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	623a      	str	r2, [r7, #32]
 80074ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d10a      	bne.n	80074e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fa fab8 	bl	8001a60 <HAL_UARTEx_RxEventCallback>
 80074f0:	e002      	b.n	80074f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fc8e 	bl	8006e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	e002      	b.n	8007502 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007500:	2302      	movs	r3, #2
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3730      	adds	r7, #48	@ 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800750c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007510:	b0c0      	sub	sp, #256	@ 0x100
 8007512:	af00      	add	r7, sp, #0
 8007514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	68d9      	ldr	r1, [r3, #12]
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	ea40 0301 	orr.w	r3, r0, r1
 8007534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	431a      	orrs	r2, r3
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	431a      	orrs	r2, r3
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007564:	f021 010c 	bic.w	r1, r1, #12
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007572:	430b      	orrs	r3, r1
 8007574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007586:	6999      	ldr	r1, [r3, #24]
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	ea40 0301 	orr.w	r3, r0, r1
 8007592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b8f      	ldr	r3, [pc, #572]	@ (80077d8 <UART_SetConfig+0x2cc>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d005      	beq.n	80075ac <UART_SetConfig+0xa0>
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b8d      	ldr	r3, [pc, #564]	@ (80077dc <UART_SetConfig+0x2d0>)
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d104      	bne.n	80075b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075ac:	f7fd fec0 	bl	8005330 <HAL_RCC_GetPCLK2Freq>
 80075b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80075b4:	e003      	b.n	80075be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075b6:	f7fd fea7 	bl	8005308 <HAL_RCC_GetPCLK1Freq>
 80075ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c8:	f040 810c 	bne.w	80077e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80075da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	1891      	adds	r1, r2, r2
 80075e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80075e6:	415b      	adcs	r3, r3
 80075e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80075ee:	4621      	mov	r1, r4
 80075f0:	eb12 0801 	adds.w	r8, r2, r1
 80075f4:	4629      	mov	r1, r5
 80075f6:	eb43 0901 	adc.w	r9, r3, r1
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800760a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800760e:	4690      	mov	r8, r2
 8007610:	4699      	mov	r9, r3
 8007612:	4623      	mov	r3, r4
 8007614:	eb18 0303 	adds.w	r3, r8, r3
 8007618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800761c:	462b      	mov	r3, r5
 800761e:	eb49 0303 	adc.w	r3, r9, r3
 8007622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800763a:	460b      	mov	r3, r1
 800763c:	18db      	adds	r3, r3, r3
 800763e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007640:	4613      	mov	r3, r2
 8007642:	eb42 0303 	adc.w	r3, r2, r3
 8007646:	657b      	str	r3, [r7, #84]	@ 0x54
 8007648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800764c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007650:	f7f9 fb1a 	bl	8000c88 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4b61      	ldr	r3, [pc, #388]	@ (80077e0 <UART_SetConfig+0x2d4>)
 800765a:	fba3 2302 	umull	r2, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	011c      	lsls	r4, r3, #4
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800766c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	1891      	adds	r1, r2, r2
 800767a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800767c:	415b      	adcs	r3, r3
 800767e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007684:	4641      	mov	r1, r8
 8007686:	eb12 0a01 	adds.w	sl, r2, r1
 800768a:	4649      	mov	r1, r9
 800768c:	eb43 0b01 	adc.w	fp, r3, r1
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800769c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076a4:	4692      	mov	sl, r2
 80076a6:	469b      	mov	fp, r3
 80076a8:	4643      	mov	r3, r8
 80076aa:	eb1a 0303 	adds.w	r3, sl, r3
 80076ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076b2:	464b      	mov	r3, r9
 80076b4:	eb4b 0303 	adc.w	r3, fp, r3
 80076b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076d0:	460b      	mov	r3, r1
 80076d2:	18db      	adds	r3, r3, r3
 80076d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076d6:	4613      	mov	r3, r2
 80076d8:	eb42 0303 	adc.w	r3, r2, r3
 80076dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80076e6:	f7f9 facf 	bl	8000c88 <__aeabi_uldivmod>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	4611      	mov	r1, r2
 80076f0:	4b3b      	ldr	r3, [pc, #236]	@ (80077e0 <UART_SetConfig+0x2d4>)
 80076f2:	fba3 2301 	umull	r2, r3, r3, r1
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	2264      	movs	r2, #100	@ 0x64
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	1acb      	subs	r3, r1, r3
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007706:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <UART_SetConfig+0x2d4>)
 8007708:	fba3 2302 	umull	r2, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007714:	441c      	add	r4, r3
 8007716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	1891      	adds	r1, r2, r2
 800772e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007730:	415b      	adcs	r3, r3
 8007732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007738:	4641      	mov	r1, r8
 800773a:	1851      	adds	r1, r2, r1
 800773c:	6339      	str	r1, [r7, #48]	@ 0x30
 800773e:	4649      	mov	r1, r9
 8007740:	414b      	adcs	r3, r1
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007750:	4659      	mov	r1, fp
 8007752:	00cb      	lsls	r3, r1, #3
 8007754:	4651      	mov	r1, sl
 8007756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800775a:	4651      	mov	r1, sl
 800775c:	00ca      	lsls	r2, r1, #3
 800775e:	4610      	mov	r0, r2
 8007760:	4619      	mov	r1, r3
 8007762:	4603      	mov	r3, r0
 8007764:	4642      	mov	r2, r8
 8007766:	189b      	adds	r3, r3, r2
 8007768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800776c:	464b      	mov	r3, r9
 800776e:	460a      	mov	r2, r1
 8007770:	eb42 0303 	adc.w	r3, r2, r3
 8007774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800778c:	460b      	mov	r3, r1
 800778e:	18db      	adds	r3, r3, r3
 8007790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007792:	4613      	mov	r3, r2
 8007794:	eb42 0303 	adc.w	r3, r2, r3
 8007798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800779a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800779e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80077a2:	f7f9 fa71 	bl	8000c88 <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <UART_SetConfig+0x2d4>)
 80077ac:	fba3 1302 	umull	r1, r3, r3, r2
 80077b0:	095b      	lsrs	r3, r3, #5
 80077b2:	2164      	movs	r1, #100	@ 0x64
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	3332      	adds	r3, #50	@ 0x32
 80077be:	4a08      	ldr	r2, [pc, #32]	@ (80077e0 <UART_SetConfig+0x2d4>)
 80077c0:	fba2 2303 	umull	r2, r3, r2, r3
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	f003 0207 	and.w	r2, r3, #7
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4422      	add	r2, r4
 80077d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077d4:	e106      	b.n	80079e4 <UART_SetConfig+0x4d8>
 80077d6:	bf00      	nop
 80077d8:	40011000 	.word	0x40011000
 80077dc:	40011400 	.word	0x40011400
 80077e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80077f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80077f6:	4642      	mov	r2, r8
 80077f8:	464b      	mov	r3, r9
 80077fa:	1891      	adds	r1, r2, r2
 80077fc:	6239      	str	r1, [r7, #32]
 80077fe:	415b      	adcs	r3, r3
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
 8007802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007806:	4641      	mov	r1, r8
 8007808:	1854      	adds	r4, r2, r1
 800780a:	4649      	mov	r1, r9
 800780c:	eb43 0501 	adc.w	r5, r3, r1
 8007810:	f04f 0200 	mov.w	r2, #0
 8007814:	f04f 0300 	mov.w	r3, #0
 8007818:	00eb      	lsls	r3, r5, #3
 800781a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800781e:	00e2      	lsls	r2, r4, #3
 8007820:	4614      	mov	r4, r2
 8007822:	461d      	mov	r5, r3
 8007824:	4643      	mov	r3, r8
 8007826:	18e3      	adds	r3, r4, r3
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800782c:	464b      	mov	r3, r9
 800782e:	eb45 0303 	adc.w	r3, r5, r3
 8007832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	f04f 0300 	mov.w	r3, #0
 800784e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007852:	4629      	mov	r1, r5
 8007854:	008b      	lsls	r3, r1, #2
 8007856:	4621      	mov	r1, r4
 8007858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800785c:	4621      	mov	r1, r4
 800785e:	008a      	lsls	r2, r1, #2
 8007860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007864:	f7f9 fa10 	bl	8000c88 <__aeabi_uldivmod>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4b60      	ldr	r3, [pc, #384]	@ (80079f0 <UART_SetConfig+0x4e4>)
 800786e:	fba3 2302 	umull	r2, r3, r3, r2
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	011c      	lsls	r4, r3, #4
 8007876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800787a:	2200      	movs	r2, #0
 800787c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	1891      	adds	r1, r2, r2
 800788e:	61b9      	str	r1, [r7, #24]
 8007890:	415b      	adcs	r3, r3
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007898:	4641      	mov	r1, r8
 800789a:	1851      	adds	r1, r2, r1
 800789c:	6139      	str	r1, [r7, #16]
 800789e:	4649      	mov	r1, r9
 80078a0:	414b      	adcs	r3, r1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078b0:	4659      	mov	r1, fp
 80078b2:	00cb      	lsls	r3, r1, #3
 80078b4:	4651      	mov	r1, sl
 80078b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ba:	4651      	mov	r1, sl
 80078bc:	00ca      	lsls	r2, r1, #3
 80078be:	4610      	mov	r0, r2
 80078c0:	4619      	mov	r1, r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	4642      	mov	r2, r8
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078cc:	464b      	mov	r3, r9
 80078ce:	460a      	mov	r2, r1
 80078d0:	eb42 0303 	adc.w	r3, r2, r3
 80078d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80078f0:	4649      	mov	r1, r9
 80078f2:	008b      	lsls	r3, r1, #2
 80078f4:	4641      	mov	r1, r8
 80078f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078fa:	4641      	mov	r1, r8
 80078fc:	008a      	lsls	r2, r1, #2
 80078fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007902:	f7f9 f9c1 	bl	8000c88 <__aeabi_uldivmod>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	4611      	mov	r1, r2
 800790c:	4b38      	ldr	r3, [pc, #224]	@ (80079f0 <UART_SetConfig+0x4e4>)
 800790e:	fba3 2301 	umull	r2, r3, r3, r1
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	2264      	movs	r2, #100	@ 0x64
 8007916:	fb02 f303 	mul.w	r3, r2, r3
 800791a:	1acb      	subs	r3, r1, r3
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	3332      	adds	r3, #50	@ 0x32
 8007920:	4a33      	ldr	r2, [pc, #204]	@ (80079f0 <UART_SetConfig+0x4e4>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800792c:	441c      	add	r4, r3
 800792e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007932:	2200      	movs	r2, #0
 8007934:	673b      	str	r3, [r7, #112]	@ 0x70
 8007936:	677a      	str	r2, [r7, #116]	@ 0x74
 8007938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	1891      	adds	r1, r2, r2
 8007942:	60b9      	str	r1, [r7, #8]
 8007944:	415b      	adcs	r3, r3
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800794c:	4641      	mov	r1, r8
 800794e:	1851      	adds	r1, r2, r1
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	4649      	mov	r1, r9
 8007954:	414b      	adcs	r3, r1
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007964:	4659      	mov	r1, fp
 8007966:	00cb      	lsls	r3, r1, #3
 8007968:	4651      	mov	r1, sl
 800796a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796e:	4651      	mov	r1, sl
 8007970:	00ca      	lsls	r2, r1, #3
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	4603      	mov	r3, r0
 8007978:	4642      	mov	r2, r8
 800797a:	189b      	adds	r3, r3, r2
 800797c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800797e:	464b      	mov	r3, r9
 8007980:	460a      	mov	r2, r1
 8007982:	eb42 0303 	adc.w	r3, r2, r3
 8007986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	663b      	str	r3, [r7, #96]	@ 0x60
 8007992:	667a      	str	r2, [r7, #100]	@ 0x64
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80079a0:	4649      	mov	r1, r9
 80079a2:	008b      	lsls	r3, r1, #2
 80079a4:	4641      	mov	r1, r8
 80079a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079aa:	4641      	mov	r1, r8
 80079ac:	008a      	lsls	r2, r1, #2
 80079ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80079b2:	f7f9 f969 	bl	8000c88 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b0d      	ldr	r3, [pc, #52]	@ (80079f0 <UART_SetConfig+0x4e4>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	@ 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	3332      	adds	r3, #50	@ 0x32
 80079ce:	4a08      	ldr	r2, [pc, #32]	@ (80079f0 <UART_SetConfig+0x4e4>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f003 020f 	and.w	r2, r3, #15
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4422      	add	r2, r4
 80079e2:	609a      	str	r2, [r3, #8]
}
 80079e4:	bf00      	nop
 80079e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80079ea:	46bd      	mov	sp, r7
 80079ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079f0:	51eb851f 	.word	0x51eb851f

080079f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a06:	2b84      	cmp	r3, #132	@ 0x84
 8007a08:	d005      	beq.n	8007a16 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	3303      	adds	r3, #3
 8007a14:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a28:	f000 fae4 	bl	8007ff4 <vTaskStartScheduler>
  
  return osOK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a34:	b089      	sub	sp, #36	@ 0x24
 8007a36:	af04      	add	r7, sp, #16
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d020      	beq.n	8007a86 <osThreadCreate+0x54>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d01c      	beq.n	8007a86 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685c      	ldr	r4, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691e      	ldr	r6, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff ffc8 	bl	80079f4 <makeFreeRtosPriority>
 8007a64:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a6e:	9202      	str	r2, [sp, #8]
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	9100      	str	r1, [sp, #0]
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	4632      	mov	r2, r6
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f8ed 	bl	8007c5a <xTaskCreateStatic>
 8007a80:	4603      	mov	r3, r0
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e01c      	b.n	8007ac0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685c      	ldr	r4, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a92:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff ffaa 	bl	80079f4 <makeFreeRtosPriority>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	f107 030c 	add.w	r3, r7, #12
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	9200      	str	r2, [sp, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	4632      	mov	r2, r6
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 f932 	bl	8007d1a <xTaskCreate>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e000      	b.n	8007ac2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <osDelay+0x16>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	e000      	b.n	8007ae2 <osDelay+0x18>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fa50 	bl	8007f88 <vTaskDelay>
  
  return osOK;
 8007ae8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 0208 	add.w	r2, r3, #8
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f103 0208 	add.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f103 0208 	add.w	r2, r3, #8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d103      	bne.n	8007bb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e00c      	b.n	8007bce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	e002      	b.n	8007bc2 <vListInsert+0x2e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d2f6      	bcs.n	8007bbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	601a      	str	r2, [r3, #0]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6892      	ldr	r2, [r2, #8]
 8007c1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6852      	ldr	r2, [r2, #4]
 8007c26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d103      	bne.n	8007c3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	1e5a      	subs	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b08e      	sub	sp, #56	@ 0x38
 8007c5e:	af04      	add	r7, sp, #16
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10b      	bne.n	8007ca4 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61fb      	str	r3, [r7, #28]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ca4:	2354      	movs	r3, #84	@ 0x54
 8007ca6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b54      	cmp	r3, #84	@ 0x54
 8007cac:	d00b      	beq.n	8007cc6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61bb      	str	r3, [r7, #24]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d01e      	beq.n	8007d0c <xTaskCreateStatic+0xb2>
 8007cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01b      	beq.n	8007d0c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cdc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9303      	str	r3, [sp, #12]
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	9302      	str	r3, [sp, #8]
 8007cee:	f107 0314 	add.w	r3, r7, #20
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f850 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d06:	f000 f8d5 	bl	8007eb4 <prvAddNewTaskToReadyList>
 8007d0a:	e001      	b.n	8007d10 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d10:	697b      	ldr	r3, [r7, #20]
	}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3728      	adds	r7, #40	@ 0x28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b08c      	sub	sp, #48	@ 0x30
 8007d1e:	af04      	add	r7, sp, #16
 8007d20:	60f8      	str	r0, [r7, #12]
 8007d22:	60b9      	str	r1, [r7, #8]
 8007d24:	603b      	str	r3, [r7, #0]
 8007d26:	4613      	mov	r3, r2
 8007d28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fed2 	bl	8008ad8 <pvPortMalloc>
 8007d34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00e      	beq.n	8007d5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d3c:	2054      	movs	r0, #84	@ 0x54
 8007d3e:	f000 fecb 	bl	8008ad8 <pvPortMalloc>
 8007d42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d50:	e005      	b.n	8007d5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f000 ff8e 	bl	8008c74 <vPortFree>
 8007d58:	e001      	b.n	8007d5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d017      	beq.n	8007d94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9303      	str	r3, [sp, #12]
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f80e 	bl	8007da4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d88:	69f8      	ldr	r0, [r7, #28]
 8007d8a:	f000 f893 	bl	8007eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	61bb      	str	r3, [r7, #24]
 8007d92:	e002      	b.n	8007d9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f003 0307 	and.w	r3, r3, #7
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	617b      	str	r3, [r7, #20]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01f      	beq.n	8007e34 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007df4:	2300      	movs	r3, #0
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	e012      	b.n	8007e20 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	7819      	ldrb	r1, [r3, #0]
 8007e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	3334      	adds	r3, #52	@ 0x34
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	d9e9      	bls.n	8007dfa <prvInitialiseNewTask+0x56>
 8007e26:	e000      	b.n	8007e2a <prvInitialiseNewTask+0x86>
			{
				break;
 8007e28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e32:	e003      	b.n	8007e3c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d901      	bls.n	8007e46 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e42:	2306      	movs	r3, #6
 8007e44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e50:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	2200      	movs	r2, #0
 8007e56:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff fe68 	bl	8007b32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	3318      	adds	r3, #24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fe63 	bl	8007b32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e74:	f1c3 0207 	rsb	r2, r3, #7
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	2200      	movs	r2, #0
 8007e86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	69b8      	ldr	r0, [r7, #24]
 8007e96:	f000 fc0d 	bl	80086b4 <pxPortInitialiseStack>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007eac:	bf00      	nop
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ebc:	f000 fd2c 	bl	8008918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8007f6c <prvAddNewTaskToReadyList+0xb8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	4a29      	ldr	r2, [pc, #164]	@ (8007f6c <prvAddNewTaskToReadyList+0xb8>)
 8007ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007eca:	4b29      	ldr	r3, [pc, #164]	@ (8007f70 <prvAddNewTaskToReadyList+0xbc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ed2:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <prvAddNewTaskToReadyList+0xbc>)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ed8:	4b24      	ldr	r3, [pc, #144]	@ (8007f6c <prvAddNewTaskToReadyList+0xb8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d110      	bne.n	8007f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ee0:	f000 fac4 	bl	800846c <prvInitialiseTaskLists>
 8007ee4:	e00d      	b.n	8007f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ee6:	4b23      	ldr	r3, [pc, #140]	@ (8007f74 <prvAddNewTaskToReadyList+0xc0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eee:	4b20      	ldr	r3, [pc, #128]	@ (8007f70 <prvAddNewTaskToReadyList+0xbc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d802      	bhi.n	8007f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007efc:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <prvAddNewTaskToReadyList+0xbc>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f02:	4b1d      	ldr	r3, [pc, #116]	@ (8007f78 <prvAddNewTaskToReadyList+0xc4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <prvAddNewTaskToReadyList+0xc4>)
 8007f0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	2201      	movs	r2, #1
 8007f12:	409a      	lsls	r2, r3
 8007f14:	4b19      	ldr	r3, [pc, #100]	@ (8007f7c <prvAddNewTaskToReadyList+0xc8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	4a18      	ldr	r2, [pc, #96]	@ (8007f7c <prvAddNewTaskToReadyList+0xc8>)
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4a15      	ldr	r2, [pc, #84]	@ (8007f80 <prvAddNewTaskToReadyList+0xcc>)
 8007f2c:	441a      	add	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4619      	mov	r1, r3
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7ff fe09 	bl	8007b4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f3a:	f000 fd1f 	bl	800897c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <prvAddNewTaskToReadyList+0xc0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f46:	4b0a      	ldr	r3, [pc, #40]	@ (8007f70 <prvAddNewTaskToReadyList+0xbc>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d207      	bcs.n	8007f64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f54:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <prvAddNewTaskToReadyList+0xd0>)
 8007f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20001cc8 	.word	0x20001cc8
 8007f70:	20001bc8 	.word	0x20001bc8
 8007f74:	20001cd4 	.word	0x20001cd4
 8007f78:	20001ce4 	.word	0x20001ce4
 8007f7c:	20001cd0 	.word	0x20001cd0
 8007f80:	20001bcc 	.word	0x20001bcc
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d018      	beq.n	8007fcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f9a:	4b14      	ldr	r3, [pc, #80]	@ (8007fec <vTaskDelay+0x64>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <vTaskDelay+0x32>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60bb      	str	r3, [r7, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	e7fd      	b.n	8007fb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fba:	f000 f87d 	bl	80080b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb11 	bl	80085e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fc6:	f000 f885 	bl	80080d4 <xTaskResumeAll>
 8007fca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007fd2:	4b07      	ldr	r3, [pc, #28]	@ (8007ff0 <vTaskDelay+0x68>)
 8007fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fe2:	bf00      	nop
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20001cf0 	.word	0x20001cf0
 8007ff0:	e000ed04 	.word	0xe000ed04

08007ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	@ 0x28
 8007ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008002:	463a      	mov	r2, r7
 8008004:	1d39      	adds	r1, r7, #4
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	4618      	mov	r0, r3
 800800c:	f7f9 faf8 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	9202      	str	r2, [sp, #8]
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	2300      	movs	r3, #0
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	2300      	movs	r3, #0
 8008020:	460a      	mov	r2, r1
 8008022:	491f      	ldr	r1, [pc, #124]	@ (80080a0 <vTaskStartScheduler+0xac>)
 8008024:	481f      	ldr	r0, [pc, #124]	@ (80080a4 <vTaskStartScheduler+0xb0>)
 8008026:	f7ff fe18 	bl	8007c5a <xTaskCreateStatic>
 800802a:	4603      	mov	r3, r0
 800802c:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <vTaskStartScheduler+0xb4>)
 800802e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008030:	4b1d      	ldr	r3, [pc, #116]	@ (80080a8 <vTaskStartScheduler+0xb4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008038:	2301      	movs	r3, #1
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e001      	b.n	8008042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d116      	bne.n	8008076 <vTaskStartScheduler+0x82>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	613b      	str	r3, [r7, #16]
}
 800805a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800805c:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <vTaskStartScheduler+0xb8>)
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008064:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <vTaskStartScheduler+0xbc>)
 8008066:	2201      	movs	r2, #1
 8008068:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800806a:	4b12      	ldr	r3, [pc, #72]	@ (80080b4 <vTaskStartScheduler+0xc0>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008070:	f000 fbae 	bl	80087d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008074:	e00f      	b.n	8008096 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d10b      	bne.n	8008096 <vTaskStartScheduler+0xa2>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60fb      	str	r3, [r7, #12]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <vTaskStartScheduler+0x9e>
}
 8008096:	bf00      	nop
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800e04c 	.word	0x0800e04c
 80080a4:	0800843d 	.word	0x0800843d
 80080a8:	20001cec 	.word	0x20001cec
 80080ac:	20001ce8 	.word	0x20001ce8
 80080b0:	20001cd4 	.word	0x20001cd4
 80080b4:	20001ccc 	.word	0x20001ccc

080080b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080bc:	4b04      	ldr	r3, [pc, #16]	@ (80080d0 <vTaskSuspendAll+0x18>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3301      	adds	r3, #1
 80080c2:	4a03      	ldr	r2, [pc, #12]	@ (80080d0 <vTaskSuspendAll+0x18>)
 80080c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080c6:	bf00      	nop
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20001cf0 	.word	0x20001cf0

080080d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080e2:	4b42      	ldr	r3, [pc, #264]	@ (80081ec <xTaskResumeAll+0x118>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10b      	bne.n	8008102 <xTaskResumeAll+0x2e>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	603b      	str	r3, [r7, #0]
}
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
 8008100:	e7fd      	b.n	80080fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008102:	f000 fc09 	bl	8008918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008106:	4b39      	ldr	r3, [pc, #228]	@ (80081ec <xTaskResumeAll+0x118>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3b01      	subs	r3, #1
 800810c:	4a37      	ldr	r2, [pc, #220]	@ (80081ec <xTaskResumeAll+0x118>)
 800810e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008110:	4b36      	ldr	r3, [pc, #216]	@ (80081ec <xTaskResumeAll+0x118>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d161      	bne.n	80081dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008118:	4b35      	ldr	r3, [pc, #212]	@ (80081f0 <xTaskResumeAll+0x11c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05d      	beq.n	80081dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008120:	e02e      	b.n	8008180 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008122:	4b34      	ldr	r3, [pc, #208]	@ (80081f4 <xTaskResumeAll+0x120>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3318      	adds	r3, #24
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fd69 	bl	8007c06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3304      	adds	r3, #4
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fd64 	bl	8007c06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	2201      	movs	r2, #1
 8008144:	409a      	lsls	r2, r3
 8008146:	4b2c      	ldr	r3, [pc, #176]	@ (80081f8 <xTaskResumeAll+0x124>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <xTaskResumeAll+0x124>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4a27      	ldr	r2, [pc, #156]	@ (80081fc <xTaskResumeAll+0x128>)
 800815e:	441a      	add	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f7ff fcf0 	bl	8007b4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008170:	4b23      	ldr	r3, [pc, #140]	@ (8008200 <xTaskResumeAll+0x12c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	429a      	cmp	r2, r3
 8008178:	d302      	bcc.n	8008180 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800817a:	4b22      	ldr	r3, [pc, #136]	@ (8008204 <xTaskResumeAll+0x130>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008180:	4b1c      	ldr	r3, [pc, #112]	@ (80081f4 <xTaskResumeAll+0x120>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1cc      	bne.n	8008122 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800818e:	f000 fa0b 	bl	80085a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008192:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <xTaskResumeAll+0x134>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d010      	beq.n	80081c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800819e:	f000 f837 	bl	8008210 <xTaskIncrementTick>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80081a8:	4b16      	ldr	r3, [pc, #88]	@ (8008204 <xTaskResumeAll+0x130>)
 80081aa:	2201      	movs	r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f1      	bne.n	800819e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <xTaskResumeAll+0x134>)
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081c0:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <xTaskResumeAll+0x130>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081cc:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <xTaskResumeAll+0x138>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081dc:	f000 fbce 	bl	800897c <vPortExitCritical>

	return xAlreadyYielded;
 80081e0:	68bb      	ldr	r3, [r7, #8]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20001cf0 	.word	0x20001cf0
 80081f0:	20001cc8 	.word	0x20001cc8
 80081f4:	20001c88 	.word	0x20001c88
 80081f8:	20001cd0 	.word	0x20001cd0
 80081fc:	20001bcc 	.word	0x20001bcc
 8008200:	20001bc8 	.word	0x20001bc8
 8008204:	20001cdc 	.word	0x20001cdc
 8008208:	20001cd8 	.word	0x20001cd8
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800821a:	4b4f      	ldr	r3, [pc, #316]	@ (8008358 <xTaskIncrementTick+0x148>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f040 808f 	bne.w	8008342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008224:	4b4d      	ldr	r3, [pc, #308]	@ (800835c <xTaskIncrementTick+0x14c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800822c:	4a4b      	ldr	r2, [pc, #300]	@ (800835c <xTaskIncrementTick+0x14c>)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d121      	bne.n	800827c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008238:	4b49      	ldr	r3, [pc, #292]	@ (8008360 <xTaskIncrementTick+0x150>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	603b      	str	r3, [r7, #0]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <xTaskIncrementTick+0x46>
 800825a:	4b41      	ldr	r3, [pc, #260]	@ (8008360 <xTaskIncrementTick+0x150>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	4b40      	ldr	r3, [pc, #256]	@ (8008364 <xTaskIncrementTick+0x154>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a3e      	ldr	r2, [pc, #248]	@ (8008360 <xTaskIncrementTick+0x150>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	4a3e      	ldr	r2, [pc, #248]	@ (8008364 <xTaskIncrementTick+0x154>)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	4b3e      	ldr	r3, [pc, #248]	@ (8008368 <xTaskIncrementTick+0x158>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a3c      	ldr	r2, [pc, #240]	@ (8008368 <xTaskIncrementTick+0x158>)
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	f000 f996 	bl	80085a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800827c:	4b3b      	ldr	r3, [pc, #236]	@ (800836c <xTaskIncrementTick+0x15c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	429a      	cmp	r2, r3
 8008284:	d348      	bcc.n	8008318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008286:	4b36      	ldr	r3, [pc, #216]	@ (8008360 <xTaskIncrementTick+0x150>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008290:	4b36      	ldr	r3, [pc, #216]	@ (800836c <xTaskIncrementTick+0x15c>)
 8008292:	f04f 32ff 	mov.w	r2, #4294967295
 8008296:	601a      	str	r2, [r3, #0]
					break;
 8008298:	e03e      	b.n	8008318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829a:	4b31      	ldr	r3, [pc, #196]	@ (8008360 <xTaskIncrementTick+0x150>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d203      	bcs.n	80082ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082b2:	4a2e      	ldr	r2, [pc, #184]	@ (800836c <xTaskIncrementTick+0x15c>)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082b8:	e02e      	b.n	8008318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	3304      	adds	r3, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fca1 	bl	8007c06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d004      	beq.n	80082d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	3318      	adds	r3, #24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fc98 	bl	8007c06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	2201      	movs	r2, #1
 80082dc:	409a      	lsls	r2, r3
 80082de:	4b24      	ldr	r3, [pc, #144]	@ (8008370 <xTaskIncrementTick+0x160>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	4a22      	ldr	r2, [pc, #136]	@ (8008370 <xTaskIncrementTick+0x160>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008374 <xTaskIncrementTick+0x164>)
 80082f6:	441a      	add	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7ff fc24 	bl	8007b4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008308:	4b1b      	ldr	r3, [pc, #108]	@ (8008378 <xTaskIncrementTick+0x168>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	429a      	cmp	r2, r3
 8008310:	d3b9      	bcc.n	8008286 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008316:	e7b6      	b.n	8008286 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008318:	4b17      	ldr	r3, [pc, #92]	@ (8008378 <xTaskIncrementTick+0x168>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800831e:	4915      	ldr	r1, [pc, #84]	@ (8008374 <xTaskIncrementTick+0x164>)
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d901      	bls.n	8008334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008334:	4b11      	ldr	r3, [pc, #68]	@ (800837c <xTaskIncrementTick+0x16c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800833c:	2301      	movs	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e004      	b.n	800834c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008342:	4b0f      	ldr	r3, [pc, #60]	@ (8008380 <xTaskIncrementTick+0x170>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3301      	adds	r3, #1
 8008348:	4a0d      	ldr	r2, [pc, #52]	@ (8008380 <xTaskIncrementTick+0x170>)
 800834a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800834c:	697b      	ldr	r3, [r7, #20]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20001cf0 	.word	0x20001cf0
 800835c:	20001ccc 	.word	0x20001ccc
 8008360:	20001c80 	.word	0x20001c80
 8008364:	20001c84 	.word	0x20001c84
 8008368:	20001ce0 	.word	0x20001ce0
 800836c:	20001ce8 	.word	0x20001ce8
 8008370:	20001cd0 	.word	0x20001cd0
 8008374:	20001bcc 	.word	0x20001bcc
 8008378:	20001bc8 	.word	0x20001bc8
 800837c:	20001cdc 	.word	0x20001cdc
 8008380:	20001cd8 	.word	0x20001cd8

08008384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800838a:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <vTaskSwitchContext+0xa4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008392:	4b26      	ldr	r3, [pc, #152]	@ (800842c <vTaskSwitchContext+0xa8>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008398:	e040      	b.n	800841c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800839a:	4b24      	ldr	r3, [pc, #144]	@ (800842c <vTaskSwitchContext+0xa8>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a0:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <vTaskSwitchContext+0xac>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	fab3 f383 	clz	r3, r3
 80083ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	f1c3 031f 	rsb	r3, r3, #31
 80083b4:	617b      	str	r3, [r7, #20]
 80083b6:	491f      	ldr	r1, [pc, #124]	@ (8008434 <vTaskSwitchContext+0xb0>)
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	607b      	str	r3, [r7, #4]
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	e7fd      	b.n	80083de <vTaskSwitchContext+0x5a>
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4a11      	ldr	r2, [pc, #68]	@ (8008434 <vTaskSwitchContext+0xb0>)
 80083ee:	4413      	add	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	605a      	str	r2, [r3, #4]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3308      	adds	r3, #8
 8008404:	429a      	cmp	r2, r3
 8008406:	d104      	bne.n	8008412 <vTaskSwitchContext+0x8e>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	4a07      	ldr	r2, [pc, #28]	@ (8008438 <vTaskSwitchContext+0xb4>)
 800841a:	6013      	str	r3, [r2, #0]
}
 800841c:	bf00      	nop
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	20001cf0 	.word	0x20001cf0
 800842c:	20001cdc 	.word	0x20001cdc
 8008430:	20001cd0 	.word	0x20001cd0
 8008434:	20001bcc 	.word	0x20001bcc
 8008438:	20001bc8 	.word	0x20001bc8

0800843c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008444:	f000 f852 	bl	80084ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008448:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <prvIdleTask+0x28>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d9f9      	bls.n	8008444 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008450:	4b05      	ldr	r3, [pc, #20]	@ (8008468 <prvIdleTask+0x2c>)
 8008452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008460:	e7f0      	b.n	8008444 <prvIdleTask+0x8>
 8008462:	bf00      	nop
 8008464:	20001bcc 	.word	0x20001bcc
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	e00c      	b.n	8008492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a12      	ldr	r2, [pc, #72]	@ (80084cc <prvInitialiseTaskLists+0x60>)
 8008484:	4413      	add	r3, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fb33 	bl	8007af2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b06      	cmp	r3, #6
 8008496:	d9ef      	bls.n	8008478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008498:	480d      	ldr	r0, [pc, #52]	@ (80084d0 <prvInitialiseTaskLists+0x64>)
 800849a:	f7ff fb2a 	bl	8007af2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800849e:	480d      	ldr	r0, [pc, #52]	@ (80084d4 <prvInitialiseTaskLists+0x68>)
 80084a0:	f7ff fb27 	bl	8007af2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a4:	480c      	ldr	r0, [pc, #48]	@ (80084d8 <prvInitialiseTaskLists+0x6c>)
 80084a6:	f7ff fb24 	bl	8007af2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084aa:	480c      	ldr	r0, [pc, #48]	@ (80084dc <prvInitialiseTaskLists+0x70>)
 80084ac:	f7ff fb21 	bl	8007af2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084b0:	480b      	ldr	r0, [pc, #44]	@ (80084e0 <prvInitialiseTaskLists+0x74>)
 80084b2:	f7ff fb1e 	bl	8007af2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <prvInitialiseTaskLists+0x78>)
 80084b8:	4a05      	ldr	r2, [pc, #20]	@ (80084d0 <prvInitialiseTaskLists+0x64>)
 80084ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <prvInitialiseTaskLists+0x7c>)
 80084be:	4a05      	ldr	r2, [pc, #20]	@ (80084d4 <prvInitialiseTaskLists+0x68>)
 80084c0:	601a      	str	r2, [r3, #0]
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20001bcc 	.word	0x20001bcc
 80084d0:	20001c58 	.word	0x20001c58
 80084d4:	20001c6c 	.word	0x20001c6c
 80084d8:	20001c88 	.word	0x20001c88
 80084dc:	20001c9c 	.word	0x20001c9c
 80084e0:	20001cb4 	.word	0x20001cb4
 80084e4:	20001c80 	.word	0x20001c80
 80084e8:	20001c84 	.word	0x20001c84

080084ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084f2:	e019      	b.n	8008528 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084f4:	f000 fa10 	bl	8008918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f8:	4b10      	ldr	r3, [pc, #64]	@ (800853c <prvCheckTasksWaitingTermination+0x50>)
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff fb7e 	bl	8007c06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800850a:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <prvCheckTasksWaitingTermination+0x54>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3b01      	subs	r3, #1
 8008510:	4a0b      	ldr	r2, [pc, #44]	@ (8008540 <prvCheckTasksWaitingTermination+0x54>)
 8008512:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008514:	4b0b      	ldr	r3, [pc, #44]	@ (8008544 <prvCheckTasksWaitingTermination+0x58>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	4a0a      	ldr	r2, [pc, #40]	@ (8008544 <prvCheckTasksWaitingTermination+0x58>)
 800851c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800851e:	f000 fa2d 	bl	800897c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f810 	bl	8008548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <prvCheckTasksWaitingTermination+0x58>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1e1      	bne.n	80084f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20001c9c 	.word	0x20001c9c
 8008540:	20001cc8 	.word	0x20001cc8
 8008544:	20001cb0 	.word	0x20001cb0

08008548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008556:	2b00      	cmp	r3, #0
 8008558:	d108      	bne.n	800856c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fb88 	bl	8008c74 <vPortFree>
				vPortFree( pxTCB );
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb85 	bl	8008c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800856a:	e019      	b.n	80085a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008572:	2b01      	cmp	r3, #1
 8008574:	d103      	bne.n	800857e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb7c 	bl	8008c74 <vPortFree>
	}
 800857c:	e010      	b.n	80085a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008584:	2b02      	cmp	r3, #2
 8008586:	d00b      	beq.n	80085a0 <prvDeleteTCB+0x58>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	60fb      	str	r3, [r7, #12]
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <prvDeleteTCB+0x54>
	}
 80085a0:	bf00      	nop
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ae:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	@ (80085e4 <prvResetNextTaskUnblockTime+0x3c>)
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c0:	e008      	b.n	80085d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b07      	ldr	r3, [pc, #28]	@ (80085e0 <prvResetNextTaskUnblockTime+0x38>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	4a04      	ldr	r2, [pc, #16]	@ (80085e4 <prvResetNextTaskUnblockTime+0x3c>)
 80085d2:	6013      	str	r3, [r2, #0]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20001c80 	.word	0x20001c80
 80085e4:	20001ce8 	.word	0x20001ce8

080085e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085f2:	4b29      	ldr	r3, [pc, #164]	@ (8008698 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f8:	4b28      	ldr	r3, [pc, #160]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fb01 	bl	8007c06 <uxListRemove>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10b      	bne.n	8008622 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800860a:	4b24      	ldr	r3, [pc, #144]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	2201      	movs	r2, #1
 8008612:	fa02 f303 	lsl.w	r3, r2, r3
 8008616:	43da      	mvns	r2, r3
 8008618:	4b21      	ldr	r3, [pc, #132]	@ (80086a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4013      	ands	r3, r2
 800861e:	4a20      	ldr	r2, [pc, #128]	@ (80086a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008620:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008628:	d10a      	bne.n	8008640 <prvAddCurrentTaskToDelayedList+0x58>
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d007      	beq.n	8008640 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008630:	4b1a      	ldr	r3, [pc, #104]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3304      	adds	r3, #4
 8008636:	4619      	mov	r1, r3
 8008638:	481a      	ldr	r0, [pc, #104]	@ (80086a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800863a:	f7ff fa87 	bl	8007b4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800863e:	e026      	b.n	800868e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008648:	4b14      	ldr	r3, [pc, #80]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68ba      	ldr	r2, [r7, #8]
 800864e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	429a      	cmp	r2, r3
 8008656:	d209      	bcs.n	800866c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008658:	4b13      	ldr	r3, [pc, #76]	@ (80086a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	4b0f      	ldr	r3, [pc, #60]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7ff fa95 	bl	8007b94 <vListInsert>
}
 800866a:	e010      	b.n	800868e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800866c:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	4b0a      	ldr	r3, [pc, #40]	@ (800869c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3304      	adds	r3, #4
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7ff fa8b 	bl	8007b94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800867e:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	429a      	cmp	r2, r3
 8008686:	d202      	bcs.n	800868e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008688:	4a09      	ldr	r2, [pc, #36]	@ (80086b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6013      	str	r3, [r2, #0]
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20001ccc 	.word	0x20001ccc
 800869c:	20001bc8 	.word	0x20001bc8
 80086a0:	20001cd0 	.word	0x20001cd0
 80086a4:	20001cb4 	.word	0x20001cb4
 80086a8:	20001c84 	.word	0x20001c84
 80086ac:	20001c80 	.word	0x20001c80
 80086b0:	20001ce8 	.word	0x20001ce8

080086b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3b04      	subs	r3, #4
 80086c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f023 0201 	bic.w	r2, r3, #1
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008718 <pxPortInitialiseStack+0x64>)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3b14      	subs	r3, #20
 80086ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b04      	subs	r3, #4
 80086fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f06f 0202 	mvn.w	r2, #2
 8008702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b20      	subs	r3, #32
 8008708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800870a:	68fb      	ldr	r3, [r7, #12]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	0800871d 	.word	0x0800871d

0800871c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008726:	4b13      	ldr	r3, [pc, #76]	@ (8008774 <prvTaskExitError+0x58>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872e:	d00b      	beq.n	8008748 <prvTaskExitError+0x2c>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	60fb      	str	r3, [r7, #12]
}
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <prvTaskExitError+0x28>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	60bb      	str	r3, [r7, #8]
}
 800875a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800875c:	bf00      	nop
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0fc      	beq.n	800875e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	20000010 	.word	0x20000010
	...

08008780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <pxCurrentTCBConst2>)
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	6808      	ldr	r0, [r1, #0]
 8008786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	f380 8809 	msr	PSP, r0
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	4770      	bx	lr
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst2>:
 80087a0:	20001bc8 	.word	0x20001bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087a8:	4808      	ldr	r0, [pc, #32]	@ (80087cc <prvPortStartFirstTask+0x24>)
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f380 8808 	msr	MSP, r0
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	f380 8814 	msr	CONTROL, r0
 80087ba:	b662      	cpsie	i
 80087bc:	b661      	cpsie	f
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	df00      	svc	0
 80087c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ca:	bf00      	nop
 80087cc:	e000ed08 	.word	0xe000ed08

080087d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087d6:	4b47      	ldr	r3, [pc, #284]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a47      	ldr	r2, [pc, #284]	@ (80088f8 <xPortStartScheduler+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d10b      	bne.n	80087f8 <xPortStartScheduler+0x28>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	613b      	str	r3, [r7, #16]
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087f8:	4b3e      	ldr	r3, [pc, #248]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a3f      	ldr	r2, [pc, #252]	@ (80088fc <xPortStartScheduler+0x12c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10b      	bne.n	800881a <xPortStartScheduler+0x4a>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800881a:	4b39      	ldr	r3, [pc, #228]	@ (8008900 <xPortStartScheduler+0x130>)
 800881c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	22ff      	movs	r2, #255	@ 0xff
 800882a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4b31      	ldr	r3, [pc, #196]	@ (8008904 <xPortStartScheduler+0x134>)
 8008840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008842:	4b31      	ldr	r3, [pc, #196]	@ (8008908 <xPortStartScheduler+0x138>)
 8008844:	2207      	movs	r2, #7
 8008846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008848:	e009      	b.n	800885e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800884a:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <xPortStartScheduler+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a2d      	ldr	r2, [pc, #180]	@ (8008908 <xPortStartScheduler+0x138>)
 8008852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008866:	2b80      	cmp	r3, #128	@ 0x80
 8008868:	d0ef      	beq.n	800884a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800886a:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <xPortStartScheduler+0x138>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1c3 0307 	rsb	r3, r3, #7
 8008872:	2b04      	cmp	r3, #4
 8008874:	d00b      	beq.n	800888e <xPortStartScheduler+0xbe>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60bb      	str	r3, [r7, #8]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800888e:	4b1e      	ldr	r3, [pc, #120]	@ (8008908 <xPortStartScheduler+0x138>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	4a1c      	ldr	r2, [pc, #112]	@ (8008908 <xPortStartScheduler+0x138>)
 8008896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008898:	4b1b      	ldr	r3, [pc, #108]	@ (8008908 <xPortStartScheduler+0x138>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088a0:	4a19      	ldr	r2, [pc, #100]	@ (8008908 <xPortStartScheduler+0x138>)
 80088a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088ac:	4b17      	ldr	r3, [pc, #92]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <xPortStartScheduler+0x13c>)
 80088b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088b8:	4b14      	ldr	r3, [pc, #80]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a13      	ldr	r2, [pc, #76]	@ (800890c <xPortStartScheduler+0x13c>)
 80088be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088c4:	f000 f8da 	bl	8008a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xPortStartScheduler+0x140>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088ce:	f000 f8f9 	bl	8008ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088d2:	4b10      	ldr	r3, [pc, #64]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088de:	f7ff ff63 	bl	80087a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088e2:	f7ff fd4f 	bl	8008384 <vTaskSwitchContext>
	prvTaskExitError();
 80088e6:	f7ff ff19 	bl	800871c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed00 	.word	0xe000ed00
 80088f8:	410fc271 	.word	0x410fc271
 80088fc:	410fc270 	.word	0x410fc270
 8008900:	e000e400 	.word	0xe000e400
 8008904:	20001cf4 	.word	0x20001cf4
 8008908:	20001cf8 	.word	0x20001cf8
 800890c:	e000ed20 	.word	0xe000ed20
 8008910:	20000010 	.word	0x20000010
 8008914:	e000ef34 	.word	0xe000ef34

08008918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008932:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <vPortEnterCritical+0x5c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	4a0e      	ldr	r2, [pc, #56]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800893c:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d110      	bne.n	8008966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <vPortEnterCritical+0x60>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00b      	beq.n	8008966 <vPortEnterCritical+0x4e>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	603b      	str	r3, [r7, #0]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <vPortEnterCritical+0x4a>
	}
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000010 	.word	0x20000010
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008982:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <vPortExitCritical+0x50>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <vPortExitCritical+0x26>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <vPortExitCritical+0x50>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	4a08      	ldr	r2, [pc, #32]	@ (80089cc <vPortExitCritical+0x50>)
 80089aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <vPortExitCritical+0x50>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <vPortExitCritical+0x44>
 80089b4:	2300      	movs	r3, #0
 80089b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000010 	.word	0x20000010

080089d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089d0:	f3ef 8009 	mrs	r0, PSP
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4b15      	ldr	r3, [pc, #84]	@ (8008a30 <pxCurrentTCBConst>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f01e 0f10 	tst.w	lr, #16
 80089e0:	bf08      	it	eq
 80089e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089f4:	f380 8811 	msr	BASEPRI, r0
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f7ff fcc0 	bl	8008384 <vTaskSwitchContext>
 8008a04:	f04f 0000 	mov.w	r0, #0
 8008a08:	f380 8811 	msr	BASEPRI, r0
 8008a0c:	bc09      	pop	{r0, r3}
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	f01e 0f10 	tst.w	lr, #16
 8008a1a:	bf08      	it	eq
 8008a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a20:	f380 8809 	msr	PSP, r0
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst>:
 8008a30:	20001bc8 	.word	0x20001bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
}
 8008a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a52:	f7ff fbdd 	bl	8008210 <xTaskIncrementTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a5c:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <SysTick_Handler+0x40>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f383 8811 	msr	BASEPRI, r3
}
 8008a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a86:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <vPortSetupTimerInterrupt+0x38>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <vPortSetupTimerInterrupt+0x3c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <vPortSetupTimerInterrupt+0x40>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	099b      	lsrs	r3, r3, #6
 8008a98:	4a09      	ldr	r2, [pc, #36]	@ (8008ac0 <vPortSetupTimerInterrupt+0x44>)
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a9e:	4b04      	ldr	r3, [pc, #16]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	e000e010 	.word	0xe000e010
 8008ab4:	e000e018 	.word	0xe000e018
 8008ab8:	20000004 	.word	0x20000004
 8008abc:	10624dd3 	.word	0x10624dd3
 8008ac0:	e000e014 	.word	0xe000e014

08008ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ad4 <vPortEnableVFP+0x10>
 8008ac8:	6801      	ldr	r1, [r0, #0]
 8008aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ace:	6001      	str	r1, [r0, #0]
 8008ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ad2:	bf00      	nop
 8008ad4:	e000ed88 	.word	0xe000ed88

08008ad8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	@ 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ae4:	f7ff fae8 	bl	80080b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8008c5c <pvPortMalloc+0x184>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008af0:	f000 f924 	bl	8008d3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008af4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c60 <pvPortMalloc+0x188>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 8095 	bne.w	8008c2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01e      	beq.n	8008b46 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b08:	2208      	movs	r2, #8
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d015      	beq.n	8008b46 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f023 0307 	bic.w	r3, r3, #7
 8008b20:	3308      	adds	r3, #8
 8008b22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <pvPortMalloc+0x6e>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	617b      	str	r3, [r7, #20]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d06f      	beq.n	8008c2c <pvPortMalloc+0x154>
 8008b4c:	4b45      	ldr	r3, [pc, #276]	@ (8008c64 <pvPortMalloc+0x18c>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d86a      	bhi.n	8008c2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b56:	4b44      	ldr	r3, [pc, #272]	@ (8008c68 <pvPortMalloc+0x190>)
 8008b58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b5a:	4b43      	ldr	r3, [pc, #268]	@ (8008c68 <pvPortMalloc+0x190>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b60:	e004      	b.n	8008b6c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d903      	bls.n	8008b7e <pvPortMalloc+0xa6>
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f1      	bne.n	8008b62 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b7e:	4b37      	ldr	r3, [pc, #220]	@ (8008c5c <pvPortMalloc+0x184>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d051      	beq.n	8008c2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	4413      	add	r3, r2
 8008b90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	1ad2      	subs	r2, r2, r3
 8008ba2:	2308      	movs	r3, #8
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d920      	bls.n	8008bec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4413      	add	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00b      	beq.n	8008bd4 <pvPortMalloc+0xfc>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	f383 8811 	msr	BASEPRI, r3
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	613b      	str	r3, [r7, #16]
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	e7fd      	b.n	8008bd0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	1ad2      	subs	r2, r2, r3
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008be6:	69b8      	ldr	r0, [r7, #24]
 8008be8:	f000 f90a 	bl	8008e00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bec:	4b1d      	ldr	r3, [pc, #116]	@ (8008c64 <pvPortMalloc+0x18c>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c64 <pvPortMalloc+0x18c>)
 8008bf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008c64 <pvPortMalloc+0x18c>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <pvPortMalloc+0x194>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d203      	bcs.n	8008c0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c06:	4b17      	ldr	r3, [pc, #92]	@ (8008c64 <pvPortMalloc+0x18c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a18      	ldr	r2, [pc, #96]	@ (8008c6c <pvPortMalloc+0x194>)
 8008c0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <pvPortMalloc+0x188>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	431a      	orrs	r2, r3
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c22:	4b13      	ldr	r3, [pc, #76]	@ (8008c70 <pvPortMalloc+0x198>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3301      	adds	r3, #1
 8008c28:	4a11      	ldr	r2, [pc, #68]	@ (8008c70 <pvPortMalloc+0x198>)
 8008c2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c2c:	f7ff fa52 	bl	80080d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <pvPortMalloc+0x17a>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	60fb      	str	r3, [r7, #12]
}
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	e7fd      	b.n	8008c4e <pvPortMalloc+0x176>
	return pvReturn;
 8008c52:	69fb      	ldr	r3, [r7, #28]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3728      	adds	r7, #40	@ 0x28
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	20005904 	.word	0x20005904
 8008c60:	20005918 	.word	0x20005918
 8008c64:	20005908 	.word	0x20005908
 8008c68:	200058fc 	.word	0x200058fc
 8008c6c:	2000590c 	.word	0x2000590c
 8008c70:	20005910 	.word	0x20005910

08008c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d04f      	beq.n	8008d26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c86:	2308      	movs	r3, #8
 8008c88:	425b      	negs	r3, r3
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	4b25      	ldr	r3, [pc, #148]	@ (8008d30 <vPortFree+0xbc>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10b      	bne.n	8008cba <vPortFree+0x46>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60fb      	str	r3, [r7, #12]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00b      	beq.n	8008cda <vPortFree+0x66>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	4b14      	ldr	r3, [pc, #80]	@ (8008d30 <vPortFree+0xbc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d01e      	beq.n	8008d26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11a      	bne.n	8008d26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d30 <vPortFree+0xbc>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	401a      	ands	r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d00:	f7ff f9da 	bl	80080b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	4b0a      	ldr	r3, [pc, #40]	@ (8008d34 <vPortFree+0xc0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	4a09      	ldr	r2, [pc, #36]	@ (8008d34 <vPortFree+0xc0>)
 8008d10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d12:	6938      	ldr	r0, [r7, #16]
 8008d14:	f000 f874 	bl	8008e00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d18:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <vPortFree+0xc4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	4a06      	ldr	r2, [pc, #24]	@ (8008d38 <vPortFree+0xc4>)
 8008d20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d22:	f7ff f9d7 	bl	80080d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d26:	bf00      	nop
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20005918 	.word	0x20005918
 8008d34:	20005908 	.word	0x20005908
 8008d38:	20005914 	.word	0x20005914

08008d3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d42:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d48:	4b27      	ldr	r3, [pc, #156]	@ (8008de8 <prvHeapInit+0xac>)
 8008d4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	3307      	adds	r3, #7
 8008d5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f023 0307 	bic.w	r3, r3, #7
 8008d62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008de8 <prvHeapInit+0xac>)
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d74:	4a1d      	ldr	r2, [pc, #116]	@ (8008dec <prvHeapInit+0xb0>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8008dec <prvHeapInit+0xb0>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d88:	2208      	movs	r2, #8
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0307 	bic.w	r3, r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a15      	ldr	r2, [pc, #84]	@ (8008df0 <prvHeapInit+0xb4>)
 8008d9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d9e:	4b14      	ldr	r3, [pc, #80]	@ (8008df0 <prvHeapInit+0xb4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2200      	movs	r2, #0
 8008da4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008da6:	4b12      	ldr	r3, [pc, #72]	@ (8008df0 <prvHeapInit+0xb4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	1ad2      	subs	r2, r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <prvHeapInit+0xb4>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8008df4 <prvHeapInit+0xb8>)
 8008dca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a09      	ldr	r2, [pc, #36]	@ (8008df8 <prvHeapInit+0xbc>)
 8008dd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dd4:	4b09      	ldr	r3, [pc, #36]	@ (8008dfc <prvHeapInit+0xc0>)
 8008dd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dda:	601a      	str	r2, [r3, #0]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	20001cfc 	.word	0x20001cfc
 8008dec:	200058fc 	.word	0x200058fc
 8008df0:	20005904 	.word	0x20005904
 8008df4:	2000590c 	.word	0x2000590c
 8008df8:	20005908 	.word	0x20005908
 8008dfc:	20005918 	.word	0x20005918

08008e00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e08:	4b28      	ldr	r3, [pc, #160]	@ (8008eac <prvInsertBlockIntoFreeList+0xac>)
 8008e0a:	60fb      	str	r3, [r7, #12]
 8008e0c:	e002      	b.n	8008e14 <prvInsertBlockIntoFreeList+0x14>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d8f7      	bhi.n	8008e0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4413      	add	r3, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d108      	bne.n	8008e42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d118      	bne.n	8008e88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	4b15      	ldr	r3, [pc, #84]	@ (8008eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d00d      	beq.n	8008e7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	441a      	add	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e008      	b.n	8008e90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb0 <prvInsertBlockIntoFreeList+0xb0>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	e003      	b.n	8008e90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d002      	beq.n	8008e9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	200058fc 	.word	0x200058fc
 8008eb0:	20005904 	.word	0x20005904

08008eb4 <malloc>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	@ (8008ec0 <malloc+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b825 	b.w	8008f08 <_malloc_r>
 8008ebe:	bf00      	nop
 8008ec0:	2000018c 	.word	0x2000018c

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f04 <sbrk_aligned+0x40>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f001 ff4c 	bl	800ad6c <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f001 ff47 	bl	800ad6c <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d103      	bne.n	8008eea <sbrk_aligned+0x26>
 8008ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	1cc4      	adds	r4, r0, #3
 8008eec:	f024 0403 	bic.w	r4, r4, #3
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	d0f8      	beq.n	8008ee6 <sbrk_aligned+0x22>
 8008ef4:	1a21      	subs	r1, r4, r0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f001 ff38 	bl	800ad6c <_sbrk_r>
 8008efc:	3001      	adds	r0, #1
 8008efe:	d1f2      	bne.n	8008ee6 <sbrk_aligned+0x22>
 8008f00:	e7ef      	b.n	8008ee2 <sbrk_aligned+0x1e>
 8008f02:	bf00      	nop
 8008f04:	2000591c 	.word	0x2000591c

08008f08 <_malloc_r>:
 8008f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	1ccd      	adds	r5, r1, #3
 8008f0e:	f025 0503 	bic.w	r5, r5, #3
 8008f12:	3508      	adds	r5, #8
 8008f14:	2d0c      	cmp	r5, #12
 8008f16:	bf38      	it	cc
 8008f18:	250c      	movcc	r5, #12
 8008f1a:	2d00      	cmp	r5, #0
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	db01      	blt.n	8008f24 <_malloc_r+0x1c>
 8008f20:	42a9      	cmp	r1, r5
 8008f22:	d904      	bls.n	8008f2e <_malloc_r+0x26>
 8008f24:	230c      	movs	r3, #12
 8008f26:	6033      	str	r3, [r6, #0]
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009004 <_malloc_r+0xfc>
 8008f32:	f000 f869 	bl	8009008 <__malloc_lock>
 8008f36:	f8d8 3000 	ldr.w	r3, [r8]
 8008f3a:	461c      	mov	r4, r3
 8008f3c:	bb44      	cbnz	r4, 8008f90 <_malloc_r+0x88>
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4630      	mov	r0, r6
 8008f42:	f7ff ffbf 	bl	8008ec4 <sbrk_aligned>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	4604      	mov	r4, r0
 8008f4a:	d158      	bne.n	8008ffe <_malloc_r+0xf6>
 8008f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f50:	4627      	mov	r7, r4
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d143      	bne.n	8008fde <_malloc_r+0xd6>
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d04b      	beq.n	8008ff2 <_malloc_r+0xea>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	eb04 0903 	add.w	r9, r4, r3
 8008f64:	f001 ff02 	bl	800ad6c <_sbrk_r>
 8008f68:	4581      	cmp	r9, r0
 8008f6a:	d142      	bne.n	8008ff2 <_malloc_r+0xea>
 8008f6c:	6821      	ldr	r1, [r4, #0]
 8008f6e:	1a6d      	subs	r5, r5, r1
 8008f70:	4629      	mov	r1, r5
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffa6 	bl	8008ec4 <sbrk_aligned>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d03a      	beq.n	8008ff2 <_malloc_r+0xea>
 8008f7c:	6823      	ldr	r3, [r4, #0]
 8008f7e:	442b      	add	r3, r5
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	f8d8 3000 	ldr.w	r3, [r8]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	bb62      	cbnz	r2, 8008fe4 <_malloc_r+0xdc>
 8008f8a:	f8c8 7000 	str.w	r7, [r8]
 8008f8e:	e00f      	b.n	8008fb0 <_malloc_r+0xa8>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	1b52      	subs	r2, r2, r5
 8008f94:	d420      	bmi.n	8008fd8 <_malloc_r+0xd0>
 8008f96:	2a0b      	cmp	r2, #11
 8008f98:	d917      	bls.n	8008fca <_malloc_r+0xc2>
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	6025      	str	r5, [r4, #0]
 8008fa0:	bf18      	it	ne
 8008fa2:	6059      	strne	r1, [r3, #4]
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	bf08      	it	eq
 8008fa8:	f8c8 1000 	streq.w	r1, [r8]
 8008fac:	5162      	str	r2, [r4, r5]
 8008fae:	604b      	str	r3, [r1, #4]
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f000 f82f 	bl	8009014 <__malloc_unlock>
 8008fb6:	f104 000b 	add.w	r0, r4, #11
 8008fba:	1d23      	adds	r3, r4, #4
 8008fbc:	f020 0007 	bic.w	r0, r0, #7
 8008fc0:	1ac2      	subs	r2, r0, r3
 8008fc2:	bf1c      	itt	ne
 8008fc4:	1a1b      	subne	r3, r3, r0
 8008fc6:	50a3      	strne	r3, [r4, r2]
 8008fc8:	e7af      	b.n	8008f2a <_malloc_r+0x22>
 8008fca:	6862      	ldr	r2, [r4, #4]
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	bf0c      	ite	eq
 8008fd0:	f8c8 2000 	streq.w	r2, [r8]
 8008fd4:	605a      	strne	r2, [r3, #4]
 8008fd6:	e7eb      	b.n	8008fb0 <_malloc_r+0xa8>
 8008fd8:	4623      	mov	r3, r4
 8008fda:	6864      	ldr	r4, [r4, #4]
 8008fdc:	e7ae      	b.n	8008f3c <_malloc_r+0x34>
 8008fde:	463c      	mov	r4, r7
 8008fe0:	687f      	ldr	r7, [r7, #4]
 8008fe2:	e7b6      	b.n	8008f52 <_malloc_r+0x4a>
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	42a3      	cmp	r3, r4
 8008fea:	d1fb      	bne.n	8008fe4 <_malloc_r+0xdc>
 8008fec:	2300      	movs	r3, #0
 8008fee:	6053      	str	r3, [r2, #4]
 8008ff0:	e7de      	b.n	8008fb0 <_malloc_r+0xa8>
 8008ff2:	230c      	movs	r3, #12
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f80c 	bl	8009014 <__malloc_unlock>
 8008ffc:	e794      	b.n	8008f28 <_malloc_r+0x20>
 8008ffe:	6005      	str	r5, [r0, #0]
 8009000:	e7d6      	b.n	8008fb0 <_malloc_r+0xa8>
 8009002:	bf00      	nop
 8009004:	20005920 	.word	0x20005920

08009008 <__malloc_lock>:
 8009008:	4801      	ldr	r0, [pc, #4]	@ (8009010 <__malloc_lock+0x8>)
 800900a:	f001 befc 	b.w	800ae06 <__retarget_lock_acquire_recursive>
 800900e:	bf00      	nop
 8009010:	20005a64 	.word	0x20005a64

08009014 <__malloc_unlock>:
 8009014:	4801      	ldr	r0, [pc, #4]	@ (800901c <__malloc_unlock+0x8>)
 8009016:	f001 bef7 	b.w	800ae08 <__retarget_lock_release_recursive>
 800901a:	bf00      	nop
 800901c:	20005a64 	.word	0x20005a64

08009020 <_realloc_r>:
 8009020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009024:	4680      	mov	r8, r0
 8009026:	4615      	mov	r5, r2
 8009028:	460c      	mov	r4, r1
 800902a:	b921      	cbnz	r1, 8009036 <_realloc_r+0x16>
 800902c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009030:	4611      	mov	r1, r2
 8009032:	f7ff bf69 	b.w	8008f08 <_malloc_r>
 8009036:	b92a      	cbnz	r2, 8009044 <_realloc_r+0x24>
 8009038:	f002 fd52 	bl	800bae0 <_free_r>
 800903c:	2400      	movs	r4, #0
 800903e:	4620      	mov	r0, r4
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	f003 fd94 	bl	800cb70 <_malloc_usable_size_r>
 8009048:	4285      	cmp	r5, r0
 800904a:	4606      	mov	r6, r0
 800904c:	d802      	bhi.n	8009054 <_realloc_r+0x34>
 800904e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009052:	d8f4      	bhi.n	800903e <_realloc_r+0x1e>
 8009054:	4629      	mov	r1, r5
 8009056:	4640      	mov	r0, r8
 8009058:	f7ff ff56 	bl	8008f08 <_malloc_r>
 800905c:	4607      	mov	r7, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	d0ec      	beq.n	800903c <_realloc_r+0x1c>
 8009062:	42b5      	cmp	r5, r6
 8009064:	462a      	mov	r2, r5
 8009066:	4621      	mov	r1, r4
 8009068:	bf28      	it	cs
 800906a:	4632      	movcs	r2, r6
 800906c:	f001 fecd 	bl	800ae0a <memcpy>
 8009070:	4621      	mov	r1, r4
 8009072:	4640      	mov	r0, r8
 8009074:	f002 fd34 	bl	800bae0 <_free_r>
 8009078:	463c      	mov	r4, r7
 800907a:	e7e0      	b.n	800903e <_realloc_r+0x1e>

0800907c <sulp>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	4604      	mov	r4, r0
 8009080:	460d      	mov	r5, r1
 8009082:	ec45 4b10 	vmov	d0, r4, r5
 8009086:	4616      	mov	r6, r2
 8009088:	f003 fc34 	bl	800c8f4 <__ulp>
 800908c:	ec51 0b10 	vmov	r0, r1, d0
 8009090:	b17e      	cbz	r6, 80090b2 <sulp+0x36>
 8009092:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009096:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800909a:	2b00      	cmp	r3, #0
 800909c:	dd09      	ble.n	80090b2 <sulp+0x36>
 800909e:	051b      	lsls	r3, r3, #20
 80090a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80090a4:	2400      	movs	r4, #0
 80090a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80090aa:	4622      	mov	r2, r4
 80090ac:	462b      	mov	r3, r5
 80090ae:	f7f7 faa3 	bl	80005f8 <__aeabi_dmul>
 80090b2:	ec41 0b10 	vmov	d0, r0, r1
 80090b6:	bd70      	pop	{r4, r5, r6, pc}

080090b8 <_strtod_l>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	b09f      	sub	sp, #124	@ 0x7c
 80090be:	460c      	mov	r4, r1
 80090c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80090c2:	2200      	movs	r2, #0
 80090c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80090c6:	9005      	str	r0, [sp, #20]
 80090c8:	f04f 0a00 	mov.w	sl, #0
 80090cc:	f04f 0b00 	mov.w	fp, #0
 80090d0:	460a      	mov	r2, r1
 80090d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80090d4:	7811      	ldrb	r1, [r2, #0]
 80090d6:	292b      	cmp	r1, #43	@ 0x2b
 80090d8:	d04a      	beq.n	8009170 <_strtod_l+0xb8>
 80090da:	d838      	bhi.n	800914e <_strtod_l+0x96>
 80090dc:	290d      	cmp	r1, #13
 80090de:	d832      	bhi.n	8009146 <_strtod_l+0x8e>
 80090e0:	2908      	cmp	r1, #8
 80090e2:	d832      	bhi.n	800914a <_strtod_l+0x92>
 80090e4:	2900      	cmp	r1, #0
 80090e6:	d03b      	beq.n	8009160 <_strtod_l+0xa8>
 80090e8:	2200      	movs	r2, #0
 80090ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80090ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80090ee:	782a      	ldrb	r2, [r5, #0]
 80090f0:	2a30      	cmp	r2, #48	@ 0x30
 80090f2:	f040 80b3 	bne.w	800925c <_strtod_l+0x1a4>
 80090f6:	786a      	ldrb	r2, [r5, #1]
 80090f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80090fc:	2a58      	cmp	r2, #88	@ 0x58
 80090fe:	d16e      	bne.n	80091de <_strtod_l+0x126>
 8009100:	9302      	str	r3, [sp, #8]
 8009102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	ab1a      	add	r3, sp, #104	@ 0x68
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	4a8e      	ldr	r2, [pc, #568]	@ (8009344 <_strtod_l+0x28c>)
 800910c:	9805      	ldr	r0, [sp, #20]
 800910e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009110:	a919      	add	r1, sp, #100	@ 0x64
 8009112:	f002 fd97 	bl	800bc44 <__gethex>
 8009116:	f010 060f 	ands.w	r6, r0, #15
 800911a:	4604      	mov	r4, r0
 800911c:	d005      	beq.n	800912a <_strtod_l+0x72>
 800911e:	2e06      	cmp	r6, #6
 8009120:	d128      	bne.n	8009174 <_strtod_l+0xbc>
 8009122:	3501      	adds	r5, #1
 8009124:	2300      	movs	r3, #0
 8009126:	9519      	str	r5, [sp, #100]	@ 0x64
 8009128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800912a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 858e 	bne.w	8009c4e <_strtod_l+0xb96>
 8009132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009134:	b1cb      	cbz	r3, 800916a <_strtod_l+0xb2>
 8009136:	4652      	mov	r2, sl
 8009138:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800913c:	ec43 2b10 	vmov	d0, r2, r3
 8009140:	b01f      	add	sp, #124	@ 0x7c
 8009142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009146:	2920      	cmp	r1, #32
 8009148:	d1ce      	bne.n	80090e8 <_strtod_l+0x30>
 800914a:	3201      	adds	r2, #1
 800914c:	e7c1      	b.n	80090d2 <_strtod_l+0x1a>
 800914e:	292d      	cmp	r1, #45	@ 0x2d
 8009150:	d1ca      	bne.n	80090e8 <_strtod_l+0x30>
 8009152:	2101      	movs	r1, #1
 8009154:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009156:	1c51      	adds	r1, r2, #1
 8009158:	9119      	str	r1, [sp, #100]	@ 0x64
 800915a:	7852      	ldrb	r2, [r2, #1]
 800915c:	2a00      	cmp	r2, #0
 800915e:	d1c5      	bne.n	80090ec <_strtod_l+0x34>
 8009160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009162:	9419      	str	r4, [sp, #100]	@ 0x64
 8009164:	2b00      	cmp	r3, #0
 8009166:	f040 8570 	bne.w	8009c4a <_strtod_l+0xb92>
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	e7e5      	b.n	800913c <_strtod_l+0x84>
 8009170:	2100      	movs	r1, #0
 8009172:	e7ef      	b.n	8009154 <_strtod_l+0x9c>
 8009174:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009176:	b13a      	cbz	r2, 8009188 <_strtod_l+0xd0>
 8009178:	2135      	movs	r1, #53	@ 0x35
 800917a:	a81c      	add	r0, sp, #112	@ 0x70
 800917c:	f003 fcb4 	bl	800cae8 <__copybits>
 8009180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009182:	9805      	ldr	r0, [sp, #20]
 8009184:	f003 f882 	bl	800c28c <_Bfree>
 8009188:	3e01      	subs	r6, #1
 800918a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800918c:	2e04      	cmp	r6, #4
 800918e:	d806      	bhi.n	800919e <_strtod_l+0xe6>
 8009190:	e8df f006 	tbb	[pc, r6]
 8009194:	201d0314 	.word	0x201d0314
 8009198:	14          	.byte	0x14
 8009199:	00          	.byte	0x00
 800919a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800919e:	05e1      	lsls	r1, r4, #23
 80091a0:	bf48      	it	mi
 80091a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80091a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091aa:	0d1b      	lsrs	r3, r3, #20
 80091ac:	051b      	lsls	r3, r3, #20
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1bb      	bne.n	800912a <_strtod_l+0x72>
 80091b2:	f001 fdfd 	bl	800adb0 <__errno>
 80091b6:	2322      	movs	r3, #34	@ 0x22
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	e7b6      	b.n	800912a <_strtod_l+0x72>
 80091bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80091c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80091c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80091c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80091cc:	e7e7      	b.n	800919e <_strtod_l+0xe6>
 80091ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800934c <_strtod_l+0x294>
 80091d2:	e7e4      	b.n	800919e <_strtod_l+0xe6>
 80091d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80091d8:	f04f 3aff 	mov.w	sl, #4294967295
 80091dc:	e7df      	b.n	800919e <_strtod_l+0xe6>
 80091de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091e0:	1c5a      	adds	r2, r3, #1
 80091e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091e4:	785b      	ldrb	r3, [r3, #1]
 80091e6:	2b30      	cmp	r3, #48	@ 0x30
 80091e8:	d0f9      	beq.n	80091de <_strtod_l+0x126>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d09d      	beq.n	800912a <_strtod_l+0x72>
 80091ee:	2301      	movs	r3, #1
 80091f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80091f6:	2300      	movs	r3, #0
 80091f8:	9308      	str	r3, [sp, #32]
 80091fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80091fc:	461f      	mov	r7, r3
 80091fe:	220a      	movs	r2, #10
 8009200:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009202:	7805      	ldrb	r5, [r0, #0]
 8009204:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009208:	b2d9      	uxtb	r1, r3
 800920a:	2909      	cmp	r1, #9
 800920c:	d928      	bls.n	8009260 <_strtod_l+0x1a8>
 800920e:	494e      	ldr	r1, [pc, #312]	@ (8009348 <_strtod_l+0x290>)
 8009210:	2201      	movs	r2, #1
 8009212:	f001 fd20 	bl	800ac56 <strncmp>
 8009216:	2800      	cmp	r0, #0
 8009218:	d032      	beq.n	8009280 <_strtod_l+0x1c8>
 800921a:	2000      	movs	r0, #0
 800921c:	462a      	mov	r2, r5
 800921e:	4681      	mov	r9, r0
 8009220:	463d      	mov	r5, r7
 8009222:	4603      	mov	r3, r0
 8009224:	2a65      	cmp	r2, #101	@ 0x65
 8009226:	d001      	beq.n	800922c <_strtod_l+0x174>
 8009228:	2a45      	cmp	r2, #69	@ 0x45
 800922a:	d114      	bne.n	8009256 <_strtod_l+0x19e>
 800922c:	b91d      	cbnz	r5, 8009236 <_strtod_l+0x17e>
 800922e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009230:	4302      	orrs	r2, r0
 8009232:	d095      	beq.n	8009160 <_strtod_l+0xa8>
 8009234:	2500      	movs	r5, #0
 8009236:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009238:	1c62      	adds	r2, r4, #1
 800923a:	9219      	str	r2, [sp, #100]	@ 0x64
 800923c:	7862      	ldrb	r2, [r4, #1]
 800923e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009240:	d077      	beq.n	8009332 <_strtod_l+0x27a>
 8009242:	2a2d      	cmp	r2, #45	@ 0x2d
 8009244:	d07b      	beq.n	800933e <_strtod_l+0x286>
 8009246:	f04f 0c00 	mov.w	ip, #0
 800924a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800924e:	2909      	cmp	r1, #9
 8009250:	f240 8082 	bls.w	8009358 <_strtod_l+0x2a0>
 8009254:	9419      	str	r4, [sp, #100]	@ 0x64
 8009256:	f04f 0800 	mov.w	r8, #0
 800925a:	e0a2      	b.n	80093a2 <_strtod_l+0x2ea>
 800925c:	2300      	movs	r3, #0
 800925e:	e7c7      	b.n	80091f0 <_strtod_l+0x138>
 8009260:	2f08      	cmp	r7, #8
 8009262:	bfd5      	itete	le
 8009264:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009266:	9908      	ldrgt	r1, [sp, #32]
 8009268:	fb02 3301 	mlale	r3, r2, r1, r3
 800926c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009270:	f100 0001 	add.w	r0, r0, #1
 8009274:	bfd4      	ite	le
 8009276:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009278:	9308      	strgt	r3, [sp, #32]
 800927a:	3701      	adds	r7, #1
 800927c:	9019      	str	r0, [sp, #100]	@ 0x64
 800927e:	e7bf      	b.n	8009200 <_strtod_l+0x148>
 8009280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	9219      	str	r2, [sp, #100]	@ 0x64
 8009286:	785a      	ldrb	r2, [r3, #1]
 8009288:	b37f      	cbz	r7, 80092ea <_strtod_l+0x232>
 800928a:	4681      	mov	r9, r0
 800928c:	463d      	mov	r5, r7
 800928e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009292:	2b09      	cmp	r3, #9
 8009294:	d912      	bls.n	80092bc <_strtod_l+0x204>
 8009296:	2301      	movs	r3, #1
 8009298:	e7c4      	b.n	8009224 <_strtod_l+0x16c>
 800929a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	9219      	str	r2, [sp, #100]	@ 0x64
 80092a0:	785a      	ldrb	r2, [r3, #1]
 80092a2:	3001      	adds	r0, #1
 80092a4:	2a30      	cmp	r2, #48	@ 0x30
 80092a6:	d0f8      	beq.n	800929a <_strtod_l+0x1e2>
 80092a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	f200 84d3 	bhi.w	8009c58 <_strtod_l+0xba0>
 80092b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80092b6:	4681      	mov	r9, r0
 80092b8:	2000      	movs	r0, #0
 80092ba:	4605      	mov	r5, r0
 80092bc:	3a30      	subs	r2, #48	@ 0x30
 80092be:	f100 0301 	add.w	r3, r0, #1
 80092c2:	d02a      	beq.n	800931a <_strtod_l+0x262>
 80092c4:	4499      	add	r9, r3
 80092c6:	eb00 0c05 	add.w	ip, r0, r5
 80092ca:	462b      	mov	r3, r5
 80092cc:	210a      	movs	r1, #10
 80092ce:	4563      	cmp	r3, ip
 80092d0:	d10d      	bne.n	80092ee <_strtod_l+0x236>
 80092d2:	1c69      	adds	r1, r5, #1
 80092d4:	4401      	add	r1, r0
 80092d6:	4428      	add	r0, r5
 80092d8:	2808      	cmp	r0, #8
 80092da:	dc16      	bgt.n	800930a <_strtod_l+0x252>
 80092dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092de:	230a      	movs	r3, #10
 80092e0:	fb03 2300 	mla	r3, r3, r0, r2
 80092e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e6:	2300      	movs	r3, #0
 80092e8:	e018      	b.n	800931c <_strtod_l+0x264>
 80092ea:	4638      	mov	r0, r7
 80092ec:	e7da      	b.n	80092a4 <_strtod_l+0x1ec>
 80092ee:	2b08      	cmp	r3, #8
 80092f0:	f103 0301 	add.w	r3, r3, #1
 80092f4:	dc03      	bgt.n	80092fe <_strtod_l+0x246>
 80092f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80092f8:	434e      	muls	r6, r1
 80092fa:	960a      	str	r6, [sp, #40]	@ 0x28
 80092fc:	e7e7      	b.n	80092ce <_strtod_l+0x216>
 80092fe:	2b10      	cmp	r3, #16
 8009300:	bfde      	ittt	le
 8009302:	9e08      	ldrle	r6, [sp, #32]
 8009304:	434e      	mulle	r6, r1
 8009306:	9608      	strle	r6, [sp, #32]
 8009308:	e7e1      	b.n	80092ce <_strtod_l+0x216>
 800930a:	280f      	cmp	r0, #15
 800930c:	dceb      	bgt.n	80092e6 <_strtod_l+0x22e>
 800930e:	9808      	ldr	r0, [sp, #32]
 8009310:	230a      	movs	r3, #10
 8009312:	fb03 2300 	mla	r3, r3, r0, r2
 8009316:	9308      	str	r3, [sp, #32]
 8009318:	e7e5      	b.n	80092e6 <_strtod_l+0x22e>
 800931a:	4629      	mov	r1, r5
 800931c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800931e:	1c50      	adds	r0, r2, #1
 8009320:	9019      	str	r0, [sp, #100]	@ 0x64
 8009322:	7852      	ldrb	r2, [r2, #1]
 8009324:	4618      	mov	r0, r3
 8009326:	460d      	mov	r5, r1
 8009328:	e7b1      	b.n	800928e <_strtod_l+0x1d6>
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	2301      	movs	r3, #1
 8009330:	e77d      	b.n	800922e <_strtod_l+0x176>
 8009332:	f04f 0c00 	mov.w	ip, #0
 8009336:	1ca2      	adds	r2, r4, #2
 8009338:	9219      	str	r2, [sp, #100]	@ 0x64
 800933a:	78a2      	ldrb	r2, [r4, #2]
 800933c:	e785      	b.n	800924a <_strtod_l+0x192>
 800933e:	f04f 0c01 	mov.w	ip, #1
 8009342:	e7f8      	b.n	8009336 <_strtod_l+0x27e>
 8009344:	0800e098 	.word	0x0800e098
 8009348:	0800e080 	.word	0x0800e080
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009352:	1c51      	adds	r1, r2, #1
 8009354:	9119      	str	r1, [sp, #100]	@ 0x64
 8009356:	7852      	ldrb	r2, [r2, #1]
 8009358:	2a30      	cmp	r2, #48	@ 0x30
 800935a:	d0f9      	beq.n	8009350 <_strtod_l+0x298>
 800935c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009360:	2908      	cmp	r1, #8
 8009362:	f63f af78 	bhi.w	8009256 <_strtod_l+0x19e>
 8009366:	3a30      	subs	r2, #48	@ 0x30
 8009368:	920e      	str	r2, [sp, #56]	@ 0x38
 800936a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800936c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800936e:	f04f 080a 	mov.w	r8, #10
 8009372:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009374:	1c56      	adds	r6, r2, #1
 8009376:	9619      	str	r6, [sp, #100]	@ 0x64
 8009378:	7852      	ldrb	r2, [r2, #1]
 800937a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800937e:	f1be 0f09 	cmp.w	lr, #9
 8009382:	d939      	bls.n	80093f8 <_strtod_l+0x340>
 8009384:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009386:	1a76      	subs	r6, r6, r1
 8009388:	2e08      	cmp	r6, #8
 800938a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800938e:	dc03      	bgt.n	8009398 <_strtod_l+0x2e0>
 8009390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009392:	4588      	cmp	r8, r1
 8009394:	bfa8      	it	ge
 8009396:	4688      	movge	r8, r1
 8009398:	f1bc 0f00 	cmp.w	ip, #0
 800939c:	d001      	beq.n	80093a2 <_strtod_l+0x2ea>
 800939e:	f1c8 0800 	rsb	r8, r8, #0
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	d14e      	bne.n	8009444 <_strtod_l+0x38c>
 80093a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093a8:	4308      	orrs	r0, r1
 80093aa:	f47f aebe 	bne.w	800912a <_strtod_l+0x72>
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f47f aed6 	bne.w	8009160 <_strtod_l+0xa8>
 80093b4:	2a69      	cmp	r2, #105	@ 0x69
 80093b6:	d028      	beq.n	800940a <_strtod_l+0x352>
 80093b8:	dc25      	bgt.n	8009406 <_strtod_l+0x34e>
 80093ba:	2a49      	cmp	r2, #73	@ 0x49
 80093bc:	d025      	beq.n	800940a <_strtod_l+0x352>
 80093be:	2a4e      	cmp	r2, #78	@ 0x4e
 80093c0:	f47f aece 	bne.w	8009160 <_strtod_l+0xa8>
 80093c4:	499b      	ldr	r1, [pc, #620]	@ (8009634 <_strtod_l+0x57c>)
 80093c6:	a819      	add	r0, sp, #100	@ 0x64
 80093c8:	f002 fe5e 	bl	800c088 <__match>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f43f aec7 	beq.w	8009160 <_strtod_l+0xa8>
 80093d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b28      	cmp	r3, #40	@ 0x28
 80093d8:	d12e      	bne.n	8009438 <_strtod_l+0x380>
 80093da:	4997      	ldr	r1, [pc, #604]	@ (8009638 <_strtod_l+0x580>)
 80093dc:	aa1c      	add	r2, sp, #112	@ 0x70
 80093de:	a819      	add	r0, sp, #100	@ 0x64
 80093e0:	f002 fe66 	bl	800c0b0 <__hexnan>
 80093e4:	2805      	cmp	r0, #5
 80093e6:	d127      	bne.n	8009438 <_strtod_l+0x380>
 80093e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80093ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80093f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80093f6:	e698      	b.n	800912a <_strtod_l+0x72>
 80093f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80093fa:	fb08 2101 	mla	r1, r8, r1, r2
 80093fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009402:	920e      	str	r2, [sp, #56]	@ 0x38
 8009404:	e7b5      	b.n	8009372 <_strtod_l+0x2ba>
 8009406:	2a6e      	cmp	r2, #110	@ 0x6e
 8009408:	e7da      	b.n	80093c0 <_strtod_l+0x308>
 800940a:	498c      	ldr	r1, [pc, #560]	@ (800963c <_strtod_l+0x584>)
 800940c:	a819      	add	r0, sp, #100	@ 0x64
 800940e:	f002 fe3b 	bl	800c088 <__match>
 8009412:	2800      	cmp	r0, #0
 8009414:	f43f aea4 	beq.w	8009160 <_strtod_l+0xa8>
 8009418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800941a:	4989      	ldr	r1, [pc, #548]	@ (8009640 <_strtod_l+0x588>)
 800941c:	3b01      	subs	r3, #1
 800941e:	a819      	add	r0, sp, #100	@ 0x64
 8009420:	9319      	str	r3, [sp, #100]	@ 0x64
 8009422:	f002 fe31 	bl	800c088 <__match>
 8009426:	b910      	cbnz	r0, 800942e <_strtod_l+0x376>
 8009428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800942a:	3301      	adds	r3, #1
 800942c:	9319      	str	r3, [sp, #100]	@ 0x64
 800942e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009650 <_strtod_l+0x598>
 8009432:	f04f 0a00 	mov.w	sl, #0
 8009436:	e678      	b.n	800912a <_strtod_l+0x72>
 8009438:	4882      	ldr	r0, [pc, #520]	@ (8009644 <_strtod_l+0x58c>)
 800943a:	f001 fcf5 	bl	800ae28 <nan>
 800943e:	ec5b ab10 	vmov	sl, fp, d0
 8009442:	e672      	b.n	800912a <_strtod_l+0x72>
 8009444:	eba8 0309 	sub.w	r3, r8, r9
 8009448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800944a:	9309      	str	r3, [sp, #36]	@ 0x24
 800944c:	2f00      	cmp	r7, #0
 800944e:	bf08      	it	eq
 8009450:	462f      	moveq	r7, r5
 8009452:	2d10      	cmp	r5, #16
 8009454:	462c      	mov	r4, r5
 8009456:	bfa8      	it	ge
 8009458:	2410      	movge	r4, #16
 800945a:	f7f7 f853 	bl	8000504 <__aeabi_ui2d>
 800945e:	2d09      	cmp	r5, #9
 8009460:	4682      	mov	sl, r0
 8009462:	468b      	mov	fp, r1
 8009464:	dc13      	bgt.n	800948e <_strtod_l+0x3d6>
 8009466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	f43f ae5e 	beq.w	800912a <_strtod_l+0x72>
 800946e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009470:	dd78      	ble.n	8009564 <_strtod_l+0x4ac>
 8009472:	2b16      	cmp	r3, #22
 8009474:	dc5f      	bgt.n	8009536 <_strtod_l+0x47e>
 8009476:	4974      	ldr	r1, [pc, #464]	@ (8009648 <_strtod_l+0x590>)
 8009478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800947c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009480:	4652      	mov	r2, sl
 8009482:	465b      	mov	r3, fp
 8009484:	f7f7 f8b8 	bl	80005f8 <__aeabi_dmul>
 8009488:	4682      	mov	sl, r0
 800948a:	468b      	mov	fp, r1
 800948c:	e64d      	b.n	800912a <_strtod_l+0x72>
 800948e:	4b6e      	ldr	r3, [pc, #440]	@ (8009648 <_strtod_l+0x590>)
 8009490:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009494:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	4682      	mov	sl, r0
 800949e:	9808      	ldr	r0, [sp, #32]
 80094a0:	468b      	mov	fp, r1
 80094a2:	f7f7 f82f 	bl	8000504 <__aeabi_ui2d>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4650      	mov	r0, sl
 80094ac:	4659      	mov	r1, fp
 80094ae:	f7f6 feed 	bl	800028c <__adddf3>
 80094b2:	2d0f      	cmp	r5, #15
 80094b4:	4682      	mov	sl, r0
 80094b6:	468b      	mov	fp, r1
 80094b8:	ddd5      	ble.n	8009466 <_strtod_l+0x3ae>
 80094ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094bc:	1b2c      	subs	r4, r5, r4
 80094be:	441c      	add	r4, r3
 80094c0:	2c00      	cmp	r4, #0
 80094c2:	f340 8096 	ble.w	80095f2 <_strtod_l+0x53a>
 80094c6:	f014 030f 	ands.w	r3, r4, #15
 80094ca:	d00a      	beq.n	80094e2 <_strtod_l+0x42a>
 80094cc:	495e      	ldr	r1, [pc, #376]	@ (8009648 <_strtod_l+0x590>)
 80094ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094da:	f7f7 f88d 	bl	80005f8 <__aeabi_dmul>
 80094de:	4682      	mov	sl, r0
 80094e0:	468b      	mov	fp, r1
 80094e2:	f034 040f 	bics.w	r4, r4, #15
 80094e6:	d073      	beq.n	80095d0 <_strtod_l+0x518>
 80094e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80094ec:	dd48      	ble.n	8009580 <_strtod_l+0x4c8>
 80094ee:	2400      	movs	r4, #0
 80094f0:	46a0      	mov	r8, r4
 80094f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80094f4:	46a1      	mov	r9, r4
 80094f6:	9a05      	ldr	r2, [sp, #20]
 80094f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009650 <_strtod_l+0x598>
 80094fc:	2322      	movs	r3, #34	@ 0x22
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	f04f 0a00 	mov.w	sl, #0
 8009504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009506:	2b00      	cmp	r3, #0
 8009508:	f43f ae0f 	beq.w	800912a <_strtod_l+0x72>
 800950c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800950e:	9805      	ldr	r0, [sp, #20]
 8009510:	f002 febc 	bl	800c28c <_Bfree>
 8009514:	9805      	ldr	r0, [sp, #20]
 8009516:	4649      	mov	r1, r9
 8009518:	f002 feb8 	bl	800c28c <_Bfree>
 800951c:	9805      	ldr	r0, [sp, #20]
 800951e:	4641      	mov	r1, r8
 8009520:	f002 feb4 	bl	800c28c <_Bfree>
 8009524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009526:	9805      	ldr	r0, [sp, #20]
 8009528:	f002 feb0 	bl	800c28c <_Bfree>
 800952c:	9805      	ldr	r0, [sp, #20]
 800952e:	4621      	mov	r1, r4
 8009530:	f002 feac 	bl	800c28c <_Bfree>
 8009534:	e5f9      	b.n	800912a <_strtod_l+0x72>
 8009536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009538:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800953c:	4293      	cmp	r3, r2
 800953e:	dbbc      	blt.n	80094ba <_strtod_l+0x402>
 8009540:	4c41      	ldr	r4, [pc, #260]	@ (8009648 <_strtod_l+0x590>)
 8009542:	f1c5 050f 	rsb	r5, r5, #15
 8009546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009552:	f7f7 f851 	bl	80005f8 <__aeabi_dmul>
 8009556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009558:	1b5d      	subs	r5, r3, r5
 800955a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800955e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009562:	e78f      	b.n	8009484 <_strtod_l+0x3cc>
 8009564:	3316      	adds	r3, #22
 8009566:	dba8      	blt.n	80094ba <_strtod_l+0x402>
 8009568:	4b37      	ldr	r3, [pc, #220]	@ (8009648 <_strtod_l+0x590>)
 800956a:	eba9 0808 	sub.w	r8, r9, r8
 800956e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009572:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009576:	4650      	mov	r0, sl
 8009578:	4659      	mov	r1, fp
 800957a:	f7f7 f967 	bl	800084c <__aeabi_ddiv>
 800957e:	e783      	b.n	8009488 <_strtod_l+0x3d0>
 8009580:	4b32      	ldr	r3, [pc, #200]	@ (800964c <_strtod_l+0x594>)
 8009582:	9308      	str	r3, [sp, #32]
 8009584:	2300      	movs	r3, #0
 8009586:	1124      	asrs	r4, r4, #4
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	461e      	mov	r6, r3
 800958e:	2c01      	cmp	r4, #1
 8009590:	dc21      	bgt.n	80095d6 <_strtod_l+0x51e>
 8009592:	b10b      	cbz	r3, 8009598 <_strtod_l+0x4e0>
 8009594:	4682      	mov	sl, r0
 8009596:	468b      	mov	fp, r1
 8009598:	492c      	ldr	r1, [pc, #176]	@ (800964c <_strtod_l+0x594>)
 800959a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800959e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80095a2:	4652      	mov	r2, sl
 80095a4:	465b      	mov	r3, fp
 80095a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4b28      	ldr	r3, [pc, #160]	@ (8009650 <_strtod_l+0x598>)
 80095b0:	460a      	mov	r2, r1
 80095b2:	400b      	ands	r3, r1
 80095b4:	4927      	ldr	r1, [pc, #156]	@ (8009654 <_strtod_l+0x59c>)
 80095b6:	428b      	cmp	r3, r1
 80095b8:	4682      	mov	sl, r0
 80095ba:	d898      	bhi.n	80094ee <_strtod_l+0x436>
 80095bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80095c0:	428b      	cmp	r3, r1
 80095c2:	bf86      	itte	hi
 80095c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009658 <_strtod_l+0x5a0>
 80095c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80095cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80095d0:	2300      	movs	r3, #0
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	e07a      	b.n	80096cc <_strtod_l+0x614>
 80095d6:	07e2      	lsls	r2, r4, #31
 80095d8:	d505      	bpl.n	80095e6 <_strtod_l+0x52e>
 80095da:	9b08      	ldr	r3, [sp, #32]
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f7 f80a 	bl	80005f8 <__aeabi_dmul>
 80095e4:	2301      	movs	r3, #1
 80095e6:	9a08      	ldr	r2, [sp, #32]
 80095e8:	3208      	adds	r2, #8
 80095ea:	3601      	adds	r6, #1
 80095ec:	1064      	asrs	r4, r4, #1
 80095ee:	9208      	str	r2, [sp, #32]
 80095f0:	e7cd      	b.n	800958e <_strtod_l+0x4d6>
 80095f2:	d0ed      	beq.n	80095d0 <_strtod_l+0x518>
 80095f4:	4264      	negs	r4, r4
 80095f6:	f014 020f 	ands.w	r2, r4, #15
 80095fa:	d00a      	beq.n	8009612 <_strtod_l+0x55a>
 80095fc:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <_strtod_l+0x590>)
 80095fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009602:	4650      	mov	r0, sl
 8009604:	4659      	mov	r1, fp
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f7f7 f91f 	bl	800084c <__aeabi_ddiv>
 800960e:	4682      	mov	sl, r0
 8009610:	468b      	mov	fp, r1
 8009612:	1124      	asrs	r4, r4, #4
 8009614:	d0dc      	beq.n	80095d0 <_strtod_l+0x518>
 8009616:	2c1f      	cmp	r4, #31
 8009618:	dd20      	ble.n	800965c <_strtod_l+0x5a4>
 800961a:	2400      	movs	r4, #0
 800961c:	46a0      	mov	r8, r4
 800961e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009620:	46a1      	mov	r9, r4
 8009622:	9a05      	ldr	r2, [sp, #20]
 8009624:	2322      	movs	r3, #34	@ 0x22
 8009626:	f04f 0a00 	mov.w	sl, #0
 800962a:	f04f 0b00 	mov.w	fp, #0
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	e768      	b.n	8009504 <_strtod_l+0x44c>
 8009632:	bf00      	nop
 8009634:	0800e1e6 	.word	0x0800e1e6
 8009638:	0800e084 	.word	0x0800e084
 800963c:	0800e1de 	.word	0x0800e1de
 8009640:	0800e21b 	.word	0x0800e21b
 8009644:	0800e4c7 	.word	0x0800e4c7
 8009648:	0800e398 	.word	0x0800e398
 800964c:	0800e370 	.word	0x0800e370
 8009650:	7ff00000 	.word	0x7ff00000
 8009654:	7ca00000 	.word	0x7ca00000
 8009658:	7fefffff 	.word	0x7fefffff
 800965c:	f014 0310 	ands.w	r3, r4, #16
 8009660:	bf18      	it	ne
 8009662:	236a      	movne	r3, #106	@ 0x6a
 8009664:	4ea9      	ldr	r6, [pc, #676]	@ (800990c <_strtod_l+0x854>)
 8009666:	9308      	str	r3, [sp, #32]
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	2300      	movs	r3, #0
 800966e:	07e2      	lsls	r2, r4, #31
 8009670:	d504      	bpl.n	800967c <_strtod_l+0x5c4>
 8009672:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	2301      	movs	r3, #1
 800967c:	1064      	asrs	r4, r4, #1
 800967e:	f106 0608 	add.w	r6, r6, #8
 8009682:	d1f4      	bne.n	800966e <_strtod_l+0x5b6>
 8009684:	b10b      	cbz	r3, 800968a <_strtod_l+0x5d2>
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	b1b3      	cbz	r3, 80096bc <_strtod_l+0x604>
 800968e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009692:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009696:	2b00      	cmp	r3, #0
 8009698:	4659      	mov	r1, fp
 800969a:	dd0f      	ble.n	80096bc <_strtod_l+0x604>
 800969c:	2b1f      	cmp	r3, #31
 800969e:	dd55      	ble.n	800974c <_strtod_l+0x694>
 80096a0:	2b34      	cmp	r3, #52	@ 0x34
 80096a2:	bfde      	ittt	le
 80096a4:	f04f 33ff 	movle.w	r3, #4294967295
 80096a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80096ac:	4093      	lslle	r3, r2
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	bfcc      	ite	gt
 80096b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80096b8:	ea03 0b01 	andle.w	fp, r3, r1
 80096bc:	2200      	movs	r2, #0
 80096be:	2300      	movs	r3, #0
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	f7f7 fa00 	bl	8000ac8 <__aeabi_dcmpeq>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1a6      	bne.n	800961a <_strtod_l+0x562>
 80096cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80096d2:	9805      	ldr	r0, [sp, #20]
 80096d4:	462b      	mov	r3, r5
 80096d6:	463a      	mov	r2, r7
 80096d8:	f002 fe40 	bl	800c35c <__s2b>
 80096dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80096de:	2800      	cmp	r0, #0
 80096e0:	f43f af05 	beq.w	80094ee <_strtod_l+0x436>
 80096e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096e6:	2a00      	cmp	r2, #0
 80096e8:	eba9 0308 	sub.w	r3, r9, r8
 80096ec:	bfa8      	it	ge
 80096ee:	2300      	movge	r3, #0
 80096f0:	9312      	str	r3, [sp, #72]	@ 0x48
 80096f2:	2400      	movs	r4, #0
 80096f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80096f8:	9316      	str	r3, [sp, #88]	@ 0x58
 80096fa:	46a0      	mov	r8, r4
 80096fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	6859      	ldr	r1, [r3, #4]
 8009702:	f002 fd83 	bl	800c20c <_Balloc>
 8009706:	4681      	mov	r9, r0
 8009708:	2800      	cmp	r0, #0
 800970a:	f43f aef4 	beq.w	80094f6 <_strtod_l+0x43e>
 800970e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	3202      	adds	r2, #2
 8009714:	f103 010c 	add.w	r1, r3, #12
 8009718:	0092      	lsls	r2, r2, #2
 800971a:	300c      	adds	r0, #12
 800971c:	f001 fb75 	bl	800ae0a <memcpy>
 8009720:	ec4b ab10 	vmov	d0, sl, fp
 8009724:	9805      	ldr	r0, [sp, #20]
 8009726:	aa1c      	add	r2, sp, #112	@ 0x70
 8009728:	a91b      	add	r1, sp, #108	@ 0x6c
 800972a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800972e:	f003 f951 	bl	800c9d4 <__d2b>
 8009732:	901a      	str	r0, [sp, #104]	@ 0x68
 8009734:	2800      	cmp	r0, #0
 8009736:	f43f aede 	beq.w	80094f6 <_strtod_l+0x43e>
 800973a:	9805      	ldr	r0, [sp, #20]
 800973c:	2101      	movs	r1, #1
 800973e:	f002 fea3 	bl	800c488 <__i2b>
 8009742:	4680      	mov	r8, r0
 8009744:	b948      	cbnz	r0, 800975a <_strtod_l+0x6a2>
 8009746:	f04f 0800 	mov.w	r8, #0
 800974a:	e6d4      	b.n	80094f6 <_strtod_l+0x43e>
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	fa02 f303 	lsl.w	r3, r2, r3
 8009754:	ea03 0a0a 	and.w	sl, r3, sl
 8009758:	e7b0      	b.n	80096bc <_strtod_l+0x604>
 800975a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800975c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800975e:	2d00      	cmp	r5, #0
 8009760:	bfab      	itete	ge
 8009762:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009764:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009766:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009768:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800976a:	bfac      	ite	ge
 800976c:	18ef      	addge	r7, r5, r3
 800976e:	1b5e      	sublt	r6, r3, r5
 8009770:	9b08      	ldr	r3, [sp, #32]
 8009772:	1aed      	subs	r5, r5, r3
 8009774:	4415      	add	r5, r2
 8009776:	4b66      	ldr	r3, [pc, #408]	@ (8009910 <_strtod_l+0x858>)
 8009778:	3d01      	subs	r5, #1
 800977a:	429d      	cmp	r5, r3
 800977c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009780:	da50      	bge.n	8009824 <_strtod_l+0x76c>
 8009782:	1b5b      	subs	r3, r3, r5
 8009784:	2b1f      	cmp	r3, #31
 8009786:	eba2 0203 	sub.w	r2, r2, r3
 800978a:	f04f 0101 	mov.w	r1, #1
 800978e:	dc3d      	bgt.n	800980c <_strtod_l+0x754>
 8009790:	fa01 f303 	lsl.w	r3, r1, r3
 8009794:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009796:	2300      	movs	r3, #0
 8009798:	9310      	str	r3, [sp, #64]	@ 0x40
 800979a:	18bd      	adds	r5, r7, r2
 800979c:	9b08      	ldr	r3, [sp, #32]
 800979e:	42af      	cmp	r7, r5
 80097a0:	4416      	add	r6, r2
 80097a2:	441e      	add	r6, r3
 80097a4:	463b      	mov	r3, r7
 80097a6:	bfa8      	it	ge
 80097a8:	462b      	movge	r3, r5
 80097aa:	42b3      	cmp	r3, r6
 80097ac:	bfa8      	it	ge
 80097ae:	4633      	movge	r3, r6
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bfc2      	ittt	gt
 80097b4:	1aed      	subgt	r5, r5, r3
 80097b6:	1af6      	subgt	r6, r6, r3
 80097b8:	1aff      	subgt	r7, r7, r3
 80097ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd16      	ble.n	80097ee <_strtod_l+0x736>
 80097c0:	4641      	mov	r1, r8
 80097c2:	9805      	ldr	r0, [sp, #20]
 80097c4:	461a      	mov	r2, r3
 80097c6:	f002 ff1f 	bl	800c608 <__pow5mult>
 80097ca:	4680      	mov	r8, r0
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d0ba      	beq.n	8009746 <_strtod_l+0x68e>
 80097d0:	4601      	mov	r1, r0
 80097d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	f002 fe6d 	bl	800c4b4 <__multiply>
 80097da:	900e      	str	r0, [sp, #56]	@ 0x38
 80097dc:	2800      	cmp	r0, #0
 80097de:	f43f ae8a 	beq.w	80094f6 <_strtod_l+0x43e>
 80097e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f002 fd51 	bl	800c28c <_Bfree>
 80097ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	dc1d      	bgt.n	800982e <_strtod_l+0x776>
 80097f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd23      	ble.n	8009840 <_strtod_l+0x788>
 80097f8:	4649      	mov	r1, r9
 80097fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80097fc:	9805      	ldr	r0, [sp, #20]
 80097fe:	f002 ff03 	bl	800c608 <__pow5mult>
 8009802:	4681      	mov	r9, r0
 8009804:	b9e0      	cbnz	r0, 8009840 <_strtod_l+0x788>
 8009806:	f04f 0900 	mov.w	r9, #0
 800980a:	e674      	b.n	80094f6 <_strtod_l+0x43e>
 800980c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009810:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009814:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009818:	35e2      	adds	r5, #226	@ 0xe2
 800981a:	fa01 f305 	lsl.w	r3, r1, r5
 800981e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009820:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009822:	e7ba      	b.n	800979a <_strtod_l+0x6e2>
 8009824:	2300      	movs	r3, #0
 8009826:	9310      	str	r3, [sp, #64]	@ 0x40
 8009828:	2301      	movs	r3, #1
 800982a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800982c:	e7b5      	b.n	800979a <_strtod_l+0x6e2>
 800982e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009830:	9805      	ldr	r0, [sp, #20]
 8009832:	462a      	mov	r2, r5
 8009834:	f002 ff42 	bl	800c6bc <__lshift>
 8009838:	901a      	str	r0, [sp, #104]	@ 0x68
 800983a:	2800      	cmp	r0, #0
 800983c:	d1d9      	bne.n	80097f2 <_strtod_l+0x73a>
 800983e:	e65a      	b.n	80094f6 <_strtod_l+0x43e>
 8009840:	2e00      	cmp	r6, #0
 8009842:	dd07      	ble.n	8009854 <_strtod_l+0x79c>
 8009844:	4649      	mov	r1, r9
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	4632      	mov	r2, r6
 800984a:	f002 ff37 	bl	800c6bc <__lshift>
 800984e:	4681      	mov	r9, r0
 8009850:	2800      	cmp	r0, #0
 8009852:	d0d8      	beq.n	8009806 <_strtod_l+0x74e>
 8009854:	2f00      	cmp	r7, #0
 8009856:	dd08      	ble.n	800986a <_strtod_l+0x7b2>
 8009858:	4641      	mov	r1, r8
 800985a:	9805      	ldr	r0, [sp, #20]
 800985c:	463a      	mov	r2, r7
 800985e:	f002 ff2d 	bl	800c6bc <__lshift>
 8009862:	4680      	mov	r8, r0
 8009864:	2800      	cmp	r0, #0
 8009866:	f43f ae46 	beq.w	80094f6 <_strtod_l+0x43e>
 800986a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800986c:	9805      	ldr	r0, [sp, #20]
 800986e:	464a      	mov	r2, r9
 8009870:	f002 ffac 	bl	800c7cc <__mdiff>
 8009874:	4604      	mov	r4, r0
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f ae3d 	beq.w	80094f6 <_strtod_l+0x43e>
 800987c:	68c3      	ldr	r3, [r0, #12]
 800987e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009880:	2300      	movs	r3, #0
 8009882:	60c3      	str	r3, [r0, #12]
 8009884:	4641      	mov	r1, r8
 8009886:	f002 ff85 	bl	800c794 <__mcmp>
 800988a:	2800      	cmp	r0, #0
 800988c:	da46      	bge.n	800991c <_strtod_l+0x864>
 800988e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009890:	ea53 030a 	orrs.w	r3, r3, sl
 8009894:	d16c      	bne.n	8009970 <_strtod_l+0x8b8>
 8009896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800989a:	2b00      	cmp	r3, #0
 800989c:	d168      	bne.n	8009970 <_strtod_l+0x8b8>
 800989e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098a2:	0d1b      	lsrs	r3, r3, #20
 80098a4:	051b      	lsls	r3, r3, #20
 80098a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098aa:	d961      	bls.n	8009970 <_strtod_l+0x8b8>
 80098ac:	6963      	ldr	r3, [r4, #20]
 80098ae:	b913      	cbnz	r3, 80098b6 <_strtod_l+0x7fe>
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	dd5c      	ble.n	8009970 <_strtod_l+0x8b8>
 80098b6:	4621      	mov	r1, r4
 80098b8:	2201      	movs	r2, #1
 80098ba:	9805      	ldr	r0, [sp, #20]
 80098bc:	f002 fefe 	bl	800c6bc <__lshift>
 80098c0:	4641      	mov	r1, r8
 80098c2:	4604      	mov	r4, r0
 80098c4:	f002 ff66 	bl	800c794 <__mcmp>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	dd51      	ble.n	8009970 <_strtod_l+0x8b8>
 80098cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098d0:	9a08      	ldr	r2, [sp, #32]
 80098d2:	0d1b      	lsrs	r3, r3, #20
 80098d4:	051b      	lsls	r3, r3, #20
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d06b      	beq.n	80099b2 <_strtod_l+0x8fa>
 80098da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80098de:	d868      	bhi.n	80099b2 <_strtod_l+0x8fa>
 80098e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80098e4:	f67f ae9d 	bls.w	8009622 <_strtod_l+0x56a>
 80098e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <_strtod_l+0x85c>)
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	2200      	movs	r2, #0
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <_strtod_l+0x860>)
 80098f6:	400b      	ands	r3, r1
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f47f ae05 	bne.w	800950c <_strtod_l+0x454>
 8009902:	9a05      	ldr	r2, [sp, #20]
 8009904:	2322      	movs	r3, #34	@ 0x22
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	e600      	b.n	800950c <_strtod_l+0x454>
 800990a:	bf00      	nop
 800990c:	0800e0b0 	.word	0x0800e0b0
 8009910:	fffffc02 	.word	0xfffffc02
 8009914:	39500000 	.word	0x39500000
 8009918:	7ff00000 	.word	0x7ff00000
 800991c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009920:	d165      	bne.n	80099ee <_strtod_l+0x936>
 8009922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009928:	b35a      	cbz	r2, 8009982 <_strtod_l+0x8ca>
 800992a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ba8 <_strtod_l+0xaf0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d12b      	bne.n	8009988 <_strtod_l+0x8d0>
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	4651      	mov	r1, sl
 8009934:	b303      	cbz	r3, 8009978 <_strtod_l+0x8c0>
 8009936:	4b9d      	ldr	r3, [pc, #628]	@ (8009bac <_strtod_l+0xaf4>)
 8009938:	465a      	mov	r2, fp
 800993a:	4013      	ands	r3, r2
 800993c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	d81b      	bhi.n	800997e <_strtod_l+0x8c6>
 8009946:	0d1b      	lsrs	r3, r3, #20
 8009948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800994c:	fa02 f303 	lsl.w	r3, r2, r3
 8009950:	4299      	cmp	r1, r3
 8009952:	d119      	bne.n	8009988 <_strtod_l+0x8d0>
 8009954:	4b96      	ldr	r3, [pc, #600]	@ (8009bb0 <_strtod_l+0xaf8>)
 8009956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009958:	429a      	cmp	r2, r3
 800995a:	d102      	bne.n	8009962 <_strtod_l+0x8aa>
 800995c:	3101      	adds	r1, #1
 800995e:	f43f adca 	beq.w	80094f6 <_strtod_l+0x43e>
 8009962:	4b92      	ldr	r3, [pc, #584]	@ (8009bac <_strtod_l+0xaf4>)
 8009964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009966:	401a      	ands	r2, r3
 8009968:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800996c:	f04f 0a00 	mov.w	sl, #0
 8009970:	9b08      	ldr	r3, [sp, #32]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1b8      	bne.n	80098e8 <_strtod_l+0x830>
 8009976:	e5c9      	b.n	800950c <_strtod_l+0x454>
 8009978:	f04f 33ff 	mov.w	r3, #4294967295
 800997c:	e7e8      	b.n	8009950 <_strtod_l+0x898>
 800997e:	4613      	mov	r3, r2
 8009980:	e7e6      	b.n	8009950 <_strtod_l+0x898>
 8009982:	ea53 030a 	orrs.w	r3, r3, sl
 8009986:	d0a1      	beq.n	80098cc <_strtod_l+0x814>
 8009988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800998a:	b1db      	cbz	r3, 80099c4 <_strtod_l+0x90c>
 800998c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800998e:	4213      	tst	r3, r2
 8009990:	d0ee      	beq.n	8009970 <_strtod_l+0x8b8>
 8009992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009994:	9a08      	ldr	r2, [sp, #32]
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	b1bb      	cbz	r3, 80099cc <_strtod_l+0x914>
 800999c:	f7ff fb6e 	bl	800907c <sulp>
 80099a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099a4:	ec53 2b10 	vmov	r2, r3, d0
 80099a8:	f7f6 fc70 	bl	800028c <__adddf3>
 80099ac:	4682      	mov	sl, r0
 80099ae:	468b      	mov	fp, r1
 80099b0:	e7de      	b.n	8009970 <_strtod_l+0x8b8>
 80099b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80099b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80099be:	f04f 3aff 	mov.w	sl, #4294967295
 80099c2:	e7d5      	b.n	8009970 <_strtod_l+0x8b8>
 80099c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099c6:	ea13 0f0a 	tst.w	r3, sl
 80099ca:	e7e1      	b.n	8009990 <_strtod_l+0x8d8>
 80099cc:	f7ff fb56 	bl	800907c <sulp>
 80099d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099d4:	ec53 2b10 	vmov	r2, r3, d0
 80099d8:	f7f6 fc56 	bl	8000288 <__aeabi_dsub>
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	f7f7 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d0c1      	beq.n	8009970 <_strtod_l+0x8b8>
 80099ec:	e619      	b.n	8009622 <_strtod_l+0x56a>
 80099ee:	4641      	mov	r1, r8
 80099f0:	4620      	mov	r0, r4
 80099f2:	f003 f847 	bl	800ca84 <__ratio>
 80099f6:	ec57 6b10 	vmov	r6, r7, d0
 80099fa:	2200      	movs	r2, #0
 80099fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f7 f874 	bl	8000af0 <__aeabi_dcmple>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d06f      	beq.n	8009aec <_strtod_l+0xa34>
 8009a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d17a      	bne.n	8009b08 <_strtod_l+0xa50>
 8009a12:	f1ba 0f00 	cmp.w	sl, #0
 8009a16:	d158      	bne.n	8009aca <_strtod_l+0xa12>
 8009a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d15a      	bne.n	8009ad8 <_strtod_l+0xa20>
 8009a22:	4b64      	ldr	r3, [pc, #400]	@ (8009bb4 <_strtod_l+0xafc>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f857 	bl	8000adc <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d159      	bne.n	8009ae6 <_strtod_l+0xa2e>
 8009a32:	4630      	mov	r0, r6
 8009a34:	4639      	mov	r1, r7
 8009a36:	4b60      	ldr	r3, [pc, #384]	@ (8009bb8 <_strtod_l+0xb00>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460f      	mov	r7, r1
 8009a42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009a46:	9606      	str	r6, [sp, #24]
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a4e:	4d57      	ldr	r5, [pc, #348]	@ (8009bac <_strtod_l+0xaf4>)
 8009a50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a56:	401d      	ands	r5, r3
 8009a58:	4b58      	ldr	r3, [pc, #352]	@ (8009bbc <_strtod_l+0xb04>)
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	f040 80b2 	bne.w	8009bc4 <_strtod_l+0xb0c>
 8009a60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009a66:	ec4b ab10 	vmov	d0, sl, fp
 8009a6a:	f002 ff43 	bl	800c8f4 <__ulp>
 8009a6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a72:	ec51 0b10 	vmov	r0, r1, d0
 8009a76:	f7f6 fdbf 	bl	80005f8 <__aeabi_dmul>
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	f7f6 fc05 	bl	800028c <__adddf3>
 8009a82:	460b      	mov	r3, r1
 8009a84:	4949      	ldr	r1, [pc, #292]	@ (8009bac <_strtod_l+0xaf4>)
 8009a86:	4a4e      	ldr	r2, [pc, #312]	@ (8009bc0 <_strtod_l+0xb08>)
 8009a88:	4019      	ands	r1, r3
 8009a8a:	4291      	cmp	r1, r2
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	d942      	bls.n	8009b16 <_strtod_l+0xa5e>
 8009a90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a92:	4b47      	ldr	r3, [pc, #284]	@ (8009bb0 <_strtod_l+0xaf8>)
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d103      	bne.n	8009aa0 <_strtod_l+0x9e8>
 8009a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	f43f ad2b 	beq.w	80094f6 <_strtod_l+0x43e>
 8009aa0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009bb0 <_strtod_l+0xaf8>
 8009aa4:	f04f 3aff 	mov.w	sl, #4294967295
 8009aa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009aaa:	9805      	ldr	r0, [sp, #20]
 8009aac:	f002 fbee 	bl	800c28c <_Bfree>
 8009ab0:	9805      	ldr	r0, [sp, #20]
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f002 fbea 	bl	800c28c <_Bfree>
 8009ab8:	9805      	ldr	r0, [sp, #20]
 8009aba:	4641      	mov	r1, r8
 8009abc:	f002 fbe6 	bl	800c28c <_Bfree>
 8009ac0:	9805      	ldr	r0, [sp, #20]
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	f002 fbe2 	bl	800c28c <_Bfree>
 8009ac8:	e618      	b.n	80096fc <_strtod_l+0x644>
 8009aca:	f1ba 0f01 	cmp.w	sl, #1
 8009ace:	d103      	bne.n	8009ad8 <_strtod_l+0xa20>
 8009ad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f43f ada5 	beq.w	8009622 <_strtod_l+0x56a>
 8009ad8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009b88 <_strtod_l+0xad0>
 8009adc:	4f35      	ldr	r7, [pc, #212]	@ (8009bb4 <_strtod_l+0xafc>)
 8009ade:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ae2:	2600      	movs	r6, #0
 8009ae4:	e7b1      	b.n	8009a4a <_strtod_l+0x992>
 8009ae6:	4f34      	ldr	r7, [pc, #208]	@ (8009bb8 <_strtod_l+0xb00>)
 8009ae8:	2600      	movs	r6, #0
 8009aea:	e7aa      	b.n	8009a42 <_strtod_l+0x98a>
 8009aec:	4b32      	ldr	r3, [pc, #200]	@ (8009bb8 <_strtod_l+0xb00>)
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	2200      	movs	r2, #0
 8009af4:	f7f6 fd80 	bl	80005f8 <__aeabi_dmul>
 8009af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d09f      	beq.n	8009a42 <_strtod_l+0x98a>
 8009b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b06:	e7a0      	b.n	8009a4a <_strtod_l+0x992>
 8009b08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009b90 <_strtod_l+0xad8>
 8009b0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009b10:	ec57 6b17 	vmov	r6, r7, d7
 8009b14:	e799      	b.n	8009a4a <_strtod_l+0x992>
 8009b16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1c1      	bne.n	8009aa8 <_strtod_l+0x9f0>
 8009b24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b28:	0d1b      	lsrs	r3, r3, #20
 8009b2a:	051b      	lsls	r3, r3, #20
 8009b2c:	429d      	cmp	r5, r3
 8009b2e:	d1bb      	bne.n	8009aa8 <_strtod_l+0x9f0>
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f7 f8c0 	bl	8000cb8 <__aeabi_d2lz>
 8009b38:	f7f6 fd30 	bl	800059c <__aeabi_l2d>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4630      	mov	r0, r6
 8009b42:	4639      	mov	r1, r7
 8009b44:	f7f6 fba0 	bl	8000288 <__aeabi_dsub>
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009b50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b56:	ea46 060a 	orr.w	r6, r6, sl
 8009b5a:	431e      	orrs	r6, r3
 8009b5c:	d06f      	beq.n	8009c3e <_strtod_l+0xb86>
 8009b5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b98 <_strtod_l+0xae0>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 ffba 	bl	8000adc <__aeabi_dcmplt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f47f accf 	bne.w	800950c <_strtod_l+0x454>
 8009b6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ba0 <_strtod_l+0xae8>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b78:	f7f6 ffce 	bl	8000b18 <__aeabi_dcmpgt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d093      	beq.n	8009aa8 <_strtod_l+0x9f0>
 8009b80:	e4c4      	b.n	800950c <_strtod_l+0x454>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
 8009b88:	00000000 	.word	0x00000000
 8009b8c:	bff00000 	.word	0xbff00000
 8009b90:	00000000 	.word	0x00000000
 8009b94:	3ff00000 	.word	0x3ff00000
 8009b98:	94a03595 	.word	0x94a03595
 8009b9c:	3fdfffff 	.word	0x3fdfffff
 8009ba0:	35afe535 	.word	0x35afe535
 8009ba4:	3fe00000 	.word	0x3fe00000
 8009ba8:	000fffff 	.word	0x000fffff
 8009bac:	7ff00000 	.word	0x7ff00000
 8009bb0:	7fefffff 	.word	0x7fefffff
 8009bb4:	3ff00000 	.word	0x3ff00000
 8009bb8:	3fe00000 	.word	0x3fe00000
 8009bbc:	7fe00000 	.word	0x7fe00000
 8009bc0:	7c9fffff 	.word	0x7c9fffff
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	b323      	cbz	r3, 8009c12 <_strtod_l+0xb5a>
 8009bc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009bcc:	d821      	bhi.n	8009c12 <_strtod_l+0xb5a>
 8009bce:	a328      	add	r3, pc, #160	@ (adr r3, 8009c70 <_strtod_l+0xbb8>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	f7f6 ff8a 	bl	8000af0 <__aeabi_dcmple>
 8009bdc:	b1a0      	cbz	r0, 8009c08 <_strtod_l+0xb50>
 8009bde:	4639      	mov	r1, r7
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7f6 ffe1 	bl	8000ba8 <__aeabi_d2uiz>
 8009be6:	2801      	cmp	r0, #1
 8009be8:	bf38      	it	cc
 8009bea:	2001      	movcc	r0, #1
 8009bec:	f7f6 fc8a 	bl	8000504 <__aeabi_ui2d>
 8009bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	b9fb      	cbnz	r3, 8009c38 <_strtod_l+0xb80>
 8009bf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bfc:	9014      	str	r0, [sp, #80]	@ 0x50
 8009bfe:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c0e:	1b5b      	subs	r3, r3, r5
 8009c10:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c1a:	f002 fe6b 	bl	800c8f4 <__ulp>
 8009c1e:	4650      	mov	r0, sl
 8009c20:	ec53 2b10 	vmov	r2, r3, d0
 8009c24:	4659      	mov	r1, fp
 8009c26:	f7f6 fce7 	bl	80005f8 <__aeabi_dmul>
 8009c2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c2e:	f7f6 fb2d 	bl	800028c <__adddf3>
 8009c32:	4682      	mov	sl, r0
 8009c34:	468b      	mov	fp, r1
 8009c36:	e770      	b.n	8009b1a <_strtod_l+0xa62>
 8009c38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c3c:	e7e0      	b.n	8009c00 <_strtod_l+0xb48>
 8009c3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c78 <_strtod_l+0xbc0>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f7f6 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8009c48:	e798      	b.n	8009b7c <_strtod_l+0xac4>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009c50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	f7ff ba6d 	b.w	8009132 <_strtod_l+0x7a>
 8009c58:	2a65      	cmp	r2, #101	@ 0x65
 8009c5a:	f43f ab66 	beq.w	800932a <_strtod_l+0x272>
 8009c5e:	2a45      	cmp	r2, #69	@ 0x45
 8009c60:	f43f ab63 	beq.w	800932a <_strtod_l+0x272>
 8009c64:	2301      	movs	r3, #1
 8009c66:	f7ff bb9e 	b.w	80093a6 <_strtod_l+0x2ee>
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w
 8009c70:	ffc00000 	.word	0xffc00000
 8009c74:	41dfffff 	.word	0x41dfffff
 8009c78:	94a03595 	.word	0x94a03595
 8009c7c:	3fcfffff 	.word	0x3fcfffff

08009c80 <_strtod_r>:
 8009c80:	4b01      	ldr	r3, [pc, #4]	@ (8009c88 <_strtod_r+0x8>)
 8009c82:	f7ff ba19 	b.w	80090b8 <_strtod_l>
 8009c86:	bf00      	nop
 8009c88:	20000020 	.word	0x20000020

08009c8c <__cvt>:
 8009c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	ec57 6b10 	vmov	r6, r7, d0
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4619      	mov	r1, r3
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	bfbb      	ittet	lt
 8009c9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ca2:	461f      	movlt	r7, r3
 8009ca4:	2300      	movge	r3, #0
 8009ca6:	232d      	movlt	r3, #45	@ 0x2d
 8009ca8:	700b      	strb	r3, [r1, #0]
 8009caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009cb0:	4691      	mov	r9, r2
 8009cb2:	f023 0820 	bic.w	r8, r3, #32
 8009cb6:	bfbc      	itt	lt
 8009cb8:	4632      	movlt	r2, r6
 8009cba:	4616      	movlt	r6, r2
 8009cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cc0:	d005      	beq.n	8009cce <__cvt+0x42>
 8009cc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009cc6:	d100      	bne.n	8009cca <__cvt+0x3e>
 8009cc8:	3401      	adds	r4, #1
 8009cca:	2102      	movs	r1, #2
 8009ccc:	e000      	b.n	8009cd0 <__cvt+0x44>
 8009cce:	2103      	movs	r1, #3
 8009cd0:	ab03      	add	r3, sp, #12
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	ab02      	add	r3, sp, #8
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	ec47 6b10 	vmov	d0, r6, r7
 8009cdc:	4653      	mov	r3, sl
 8009cde:	4622      	mov	r2, r4
 8009ce0:	f001 f93a 	bl	800af58 <_dtoa_r>
 8009ce4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ce8:	4605      	mov	r5, r0
 8009cea:	d119      	bne.n	8009d20 <__cvt+0x94>
 8009cec:	f019 0f01 	tst.w	r9, #1
 8009cf0:	d00e      	beq.n	8009d10 <__cvt+0x84>
 8009cf2:	eb00 0904 	add.w	r9, r0, r4
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	f7f6 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d02:	b108      	cbz	r0, 8009d08 <__cvt+0x7c>
 8009d04:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d08:	2230      	movs	r2, #48	@ 0x30
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	454b      	cmp	r3, r9
 8009d0e:	d31e      	bcc.n	8009d4e <__cvt+0xc2>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d14:	1b5b      	subs	r3, r3, r5
 8009d16:	4628      	mov	r0, r5
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	b004      	add	sp, #16
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d24:	eb00 0904 	add.w	r9, r0, r4
 8009d28:	d1e5      	bne.n	8009cf6 <__cvt+0x6a>
 8009d2a:	7803      	ldrb	r3, [r0, #0]
 8009d2c:	2b30      	cmp	r3, #48	@ 0x30
 8009d2e:	d10a      	bne.n	8009d46 <__cvt+0xba>
 8009d30:	2200      	movs	r2, #0
 8009d32:	2300      	movs	r3, #0
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d3c:	b918      	cbnz	r0, 8009d46 <__cvt+0xba>
 8009d3e:	f1c4 0401 	rsb	r4, r4, #1
 8009d42:	f8ca 4000 	str.w	r4, [sl]
 8009d46:	f8da 3000 	ldr.w	r3, [sl]
 8009d4a:	4499      	add	r9, r3
 8009d4c:	e7d3      	b.n	8009cf6 <__cvt+0x6a>
 8009d4e:	1c59      	adds	r1, r3, #1
 8009d50:	9103      	str	r1, [sp, #12]
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e7d9      	b.n	8009d0a <__cvt+0x7e>

08009d56 <__exponent>:
 8009d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	bfba      	itte	lt
 8009d5c:	4249      	neglt	r1, r1
 8009d5e:	232d      	movlt	r3, #45	@ 0x2d
 8009d60:	232b      	movge	r3, #43	@ 0x2b
 8009d62:	2909      	cmp	r1, #9
 8009d64:	7002      	strb	r2, [r0, #0]
 8009d66:	7043      	strb	r3, [r0, #1]
 8009d68:	dd29      	ble.n	8009dbe <__exponent+0x68>
 8009d6a:	f10d 0307 	add.w	r3, sp, #7
 8009d6e:	461d      	mov	r5, r3
 8009d70:	270a      	movs	r7, #10
 8009d72:	461a      	mov	r2, r3
 8009d74:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d78:	fb07 1416 	mls	r4, r7, r6, r1
 8009d7c:	3430      	adds	r4, #48	@ 0x30
 8009d7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d82:	460c      	mov	r4, r1
 8009d84:	2c63      	cmp	r4, #99	@ 0x63
 8009d86:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	dcf1      	bgt.n	8009d72 <__exponent+0x1c>
 8009d8e:	3130      	adds	r1, #48	@ 0x30
 8009d90:	1e94      	subs	r4, r2, #2
 8009d92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d96:	1c41      	adds	r1, r0, #1
 8009d98:	4623      	mov	r3, r4
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	d30a      	bcc.n	8009db4 <__exponent+0x5e>
 8009d9e:	f10d 0309 	add.w	r3, sp, #9
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	42ac      	cmp	r4, r5
 8009da6:	bf88      	it	hi
 8009da8:	2300      	movhi	r3, #0
 8009daa:	3302      	adds	r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	1a18      	subs	r0, r3, r0
 8009db0:	b003      	add	sp, #12
 8009db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009db8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009dbc:	e7ed      	b.n	8009d9a <__exponent+0x44>
 8009dbe:	2330      	movs	r3, #48	@ 0x30
 8009dc0:	3130      	adds	r1, #48	@ 0x30
 8009dc2:	7083      	strb	r3, [r0, #2]
 8009dc4:	70c1      	strb	r1, [r0, #3]
 8009dc6:	1d03      	adds	r3, r0, #4
 8009dc8:	e7f1      	b.n	8009dae <__exponent+0x58>
	...

08009dcc <_printf_float>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b08d      	sub	sp, #52	@ 0x34
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dd8:	4616      	mov	r6, r2
 8009dda:	461f      	mov	r7, r3
 8009ddc:	4605      	mov	r5, r0
 8009dde:	f000 ff8d 	bl	800acfc <_localeconv_r>
 8009de2:	6803      	ldr	r3, [r0, #0]
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7f6 fa42 	bl	8000270 <strlen>
 8009dec:	2300      	movs	r3, #0
 8009dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df0:	f8d8 3000 	ldr.w	r3, [r8]
 8009df4:	9005      	str	r0, [sp, #20]
 8009df6:	3307      	adds	r3, #7
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	f103 0208 	add.w	r2, r3, #8
 8009e00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e04:	f8d4 b000 	ldr.w	fp, [r4]
 8009e08:	f8c8 2000 	str.w	r2, [r8]
 8009e0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e22:	4b9c      	ldr	r3, [pc, #624]	@ (800a094 <_printf_float+0x2c8>)
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	f7f6 fe80 	bl	8000b2c <__aeabi_dcmpun>
 8009e2c:	bb70      	cbnz	r0, 8009e8c <_printf_float+0xc0>
 8009e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e32:	4b98      	ldr	r3, [pc, #608]	@ (800a094 <_printf_float+0x2c8>)
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	f7f6 fe5a 	bl	8000af0 <__aeabi_dcmple>
 8009e3c:	bb30      	cbnz	r0, 8009e8c <_printf_float+0xc0>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2300      	movs	r3, #0
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f6 fe49 	bl	8000adc <__aeabi_dcmplt>
 8009e4a:	b110      	cbz	r0, 8009e52 <_printf_float+0x86>
 8009e4c:	232d      	movs	r3, #45	@ 0x2d
 8009e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e52:	4a91      	ldr	r2, [pc, #580]	@ (800a098 <_printf_float+0x2cc>)
 8009e54:	4b91      	ldr	r3, [pc, #580]	@ (800a09c <_printf_float+0x2d0>)
 8009e56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e5a:	bf94      	ite	ls
 8009e5c:	4690      	movls	r8, r2
 8009e5e:	4698      	movhi	r8, r3
 8009e60:	2303      	movs	r3, #3
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	f02b 0304 	bic.w	r3, fp, #4
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	f04f 0900 	mov.w	r9, #0
 8009e6e:	9700      	str	r7, [sp, #0]
 8009e70:	4633      	mov	r3, r6
 8009e72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 f9d2 	bl	800a220 <_printf_common>
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f040 808d 	bne.w	8009f9c <_printf_float+0x1d0>
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295
 8009e86:	b00d      	add	sp, #52	@ 0x34
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	4649      	mov	r1, r9
 8009e94:	f7f6 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8009e98:	b140      	cbz	r0, 8009eac <_printf_float+0xe0>
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bfbc      	itt	lt
 8009ea0:	232d      	movlt	r3, #45	@ 0x2d
 8009ea2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ea6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0a0 <_printf_float+0x2d4>)
 8009ea8:	4b7e      	ldr	r3, [pc, #504]	@ (800a0a4 <_printf_float+0x2d8>)
 8009eaa:	e7d4      	b.n	8009e56 <_printf_float+0x8a>
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009eb2:	9206      	str	r2, [sp, #24]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	d13b      	bne.n	8009f30 <_printf_float+0x164>
 8009eb8:	2306      	movs	r3, #6
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ec8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ecc:	ab09      	add	r3, sp, #36	@ 0x24
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	6861      	ldr	r1, [r4, #4]
 8009ed2:	ec49 8b10 	vmov	d0, r8, r9
 8009ed6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7ff fed6 	bl	8009c8c <__cvt>
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee4:	2b47      	cmp	r3, #71	@ 0x47
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	d129      	bne.n	8009f3e <_printf_float+0x172>
 8009eea:	1cc8      	adds	r0, r1, #3
 8009eec:	db02      	blt.n	8009ef4 <_printf_float+0x128>
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	dd41      	ble.n	8009f78 <_printf_float+0x1ac>
 8009ef4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ef8:	fa5f fa8a 	uxtb.w	sl, sl
 8009efc:	3901      	subs	r1, #1
 8009efe:	4652      	mov	r2, sl
 8009f00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f04:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f06:	f7ff ff26 	bl	8009d56 <__exponent>
 8009f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f0c:	1813      	adds	r3, r2, r0
 8009f0e:	2a01      	cmp	r2, #1
 8009f10:	4681      	mov	r9, r0
 8009f12:	6123      	str	r3, [r4, #16]
 8009f14:	dc02      	bgt.n	8009f1c <_printf_float+0x150>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	07d2      	lsls	r2, r2, #31
 8009f1a:	d501      	bpl.n	8009f20 <_printf_float+0x154>
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	6123      	str	r3, [r4, #16]
 8009f20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0a2      	beq.n	8009e6e <_printf_float+0xa2>
 8009f28:	232d      	movs	r3, #45	@ 0x2d
 8009f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f2e:	e79e      	b.n	8009e6e <_printf_float+0xa2>
 8009f30:	9a06      	ldr	r2, [sp, #24]
 8009f32:	2a47      	cmp	r2, #71	@ 0x47
 8009f34:	d1c2      	bne.n	8009ebc <_printf_float+0xf0>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1c0      	bne.n	8009ebc <_printf_float+0xf0>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e7bd      	b.n	8009eba <_printf_float+0xee>
 8009f3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f42:	d9db      	bls.n	8009efc <_printf_float+0x130>
 8009f44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f48:	d118      	bne.n	8009f7c <_printf_float+0x1b0>
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	6863      	ldr	r3, [r4, #4]
 8009f4e:	dd0b      	ble.n	8009f68 <_printf_float+0x19c>
 8009f50:	6121      	str	r1, [r4, #16]
 8009f52:	b913      	cbnz	r3, 8009f5a <_printf_float+0x18e>
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	07d0      	lsls	r0, r2, #31
 8009f58:	d502      	bpl.n	8009f60 <_printf_float+0x194>
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	440b      	add	r3, r1
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f62:	f04f 0900 	mov.w	r9, #0
 8009f66:	e7db      	b.n	8009f20 <_printf_float+0x154>
 8009f68:	b913      	cbnz	r3, 8009f70 <_printf_float+0x1a4>
 8009f6a:	6822      	ldr	r2, [r4, #0]
 8009f6c:	07d2      	lsls	r2, r2, #31
 8009f6e:	d501      	bpl.n	8009f74 <_printf_float+0x1a8>
 8009f70:	3302      	adds	r3, #2
 8009f72:	e7f4      	b.n	8009f5e <_printf_float+0x192>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e7f2      	b.n	8009f5e <_printf_float+0x192>
 8009f78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	db05      	blt.n	8009f8e <_printf_float+0x1c2>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	6121      	str	r1, [r4, #16]
 8009f86:	07d8      	lsls	r0, r3, #31
 8009f88:	d5ea      	bpl.n	8009f60 <_printf_float+0x194>
 8009f8a:	1c4b      	adds	r3, r1, #1
 8009f8c:	e7e7      	b.n	8009f5e <_printf_float+0x192>
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	bfd4      	ite	le
 8009f92:	f1c1 0202 	rsble	r2, r1, #2
 8009f96:	2201      	movgt	r2, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	e7e0      	b.n	8009f5e <_printf_float+0x192>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	055a      	lsls	r2, r3, #21
 8009fa0:	d407      	bmi.n	8009fb2 <_printf_float+0x1e6>
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	d12b      	bne.n	800a008 <_printf_float+0x23c>
 8009fb0:	e767      	b.n	8009e82 <_printf_float+0xb6>
 8009fb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fb6:	f240 80dd 	bls.w	800a174 <_printf_float+0x3a8>
 8009fba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f7f6 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d033      	beq.n	800a032 <_printf_float+0x266>
 8009fca:	4a37      	ldr	r2, [pc, #220]	@ (800a0a8 <_printf_float+0x2dc>)
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f af54 	beq.w	8009e82 <_printf_float+0xb6>
 8009fda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fde:	4543      	cmp	r3, r8
 8009fe0:	db02      	blt.n	8009fe8 <_printf_float+0x21c>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	07d8      	lsls	r0, r3, #31
 8009fe6:	d50f      	bpl.n	800a008 <_printf_float+0x23c>
 8009fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af45 	beq.w	8009e82 <_printf_float+0xb6>
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a000:	f104 0a1a 	add.w	sl, r4, #26
 800a004:	45c8      	cmp	r8, r9
 800a006:	dc09      	bgt.n	800a01c <_printf_float+0x250>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	079b      	lsls	r3, r3, #30
 800a00c:	f100 8103 	bmi.w	800a216 <_printf_float+0x44a>
 800a010:	68e0      	ldr	r0, [r4, #12]
 800a012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a014:	4298      	cmp	r0, r3
 800a016:	bfb8      	it	lt
 800a018:	4618      	movlt	r0, r3
 800a01a:	e734      	b.n	8009e86 <_printf_float+0xba>
 800a01c:	2301      	movs	r3, #1
 800a01e:	4652      	mov	r2, sl
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af2b 	beq.w	8009e82 <_printf_float+0xb6>
 800a02c:	f109 0901 	add.w	r9, r9, #1
 800a030:	e7e8      	b.n	800a004 <_printf_float+0x238>
 800a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc39      	bgt.n	800a0ac <_printf_float+0x2e0>
 800a038:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a8 <_printf_float+0x2dc>)
 800a03a:	2301      	movs	r3, #1
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af1d 	beq.w	8009e82 <_printf_float+0xb6>
 800a048:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a04c:	ea59 0303 	orrs.w	r3, r9, r3
 800a050:	d102      	bne.n	800a058 <_printf_float+0x28c>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	d5d7      	bpl.n	800a008 <_printf_float+0x23c>
 800a058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af0d 	beq.w	8009e82 <_printf_float+0xb6>
 800a068:	f04f 0a00 	mov.w	sl, #0
 800a06c:	f104 0b1a 	add.w	fp, r4, #26
 800a070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a072:	425b      	negs	r3, r3
 800a074:	4553      	cmp	r3, sl
 800a076:	dc01      	bgt.n	800a07c <_printf_float+0x2b0>
 800a078:	464b      	mov	r3, r9
 800a07a:	e793      	b.n	8009fa4 <_printf_float+0x1d8>
 800a07c:	2301      	movs	r3, #1
 800a07e:	465a      	mov	r2, fp
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f aefb 	beq.w	8009e82 <_printf_float+0xb6>
 800a08c:	f10a 0a01 	add.w	sl, sl, #1
 800a090:	e7ee      	b.n	800a070 <_printf_float+0x2a4>
 800a092:	bf00      	nop
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800e1d9 	.word	0x0800e1d9
 800a09c:	0800e1dd 	.word	0x0800e1dd
 800a0a0:	0800e1e1 	.word	0x0800e1e1
 800a0a4:	0800e1e5 	.word	0x0800e1e5
 800a0a8:	0800e487 	.word	0x0800e487
 800a0ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0b2:	4553      	cmp	r3, sl
 800a0b4:	bfa8      	it	ge
 800a0b6:	4653      	movge	r3, sl
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	dc36      	bgt.n	800a12c <_printf_float+0x360>
 800a0be:	f04f 0b00 	mov.w	fp, #0
 800a0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c6:	f104 021a 	add.w	r2, r4, #26
 800a0ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0cc:	9306      	str	r3, [sp, #24]
 800a0ce:	eba3 0309 	sub.w	r3, r3, r9
 800a0d2:	455b      	cmp	r3, fp
 800a0d4:	dc31      	bgt.n	800a13a <_printf_float+0x36e>
 800a0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d8:	459a      	cmp	sl, r3
 800a0da:	dc3a      	bgt.n	800a152 <_printf_float+0x386>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d437      	bmi.n	800a152 <_printf_float+0x386>
 800a0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e4:	ebaa 0903 	sub.w	r9, sl, r3
 800a0e8:	9b06      	ldr	r3, [sp, #24]
 800a0ea:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ee:	4599      	cmp	r9, r3
 800a0f0:	bfa8      	it	ge
 800a0f2:	4699      	movge	r9, r3
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	dc33      	bgt.n	800a162 <_printf_float+0x396>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a102:	f104 0b1a 	add.w	fp, r4, #26
 800a106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a108:	ebaa 0303 	sub.w	r3, sl, r3
 800a10c:	eba3 0309 	sub.w	r3, r3, r9
 800a110:	4543      	cmp	r3, r8
 800a112:	f77f af79 	ble.w	800a008 <_printf_float+0x23c>
 800a116:	2301      	movs	r3, #1
 800a118:	465a      	mov	r2, fp
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f aeae 	beq.w	8009e82 <_printf_float+0xb6>
 800a126:	f108 0801 	add.w	r8, r8, #1
 800a12a:	e7ec      	b.n	800a106 <_printf_float+0x33a>
 800a12c:	4642      	mov	r2, r8
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	d1c2      	bne.n	800a0be <_printf_float+0x2f2>
 800a138:	e6a3      	b.n	8009e82 <_printf_float+0xb6>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	9206      	str	r2, [sp, #24]
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f ae9c 	beq.w	8009e82 <_printf_float+0xb6>
 800a14a:	9a06      	ldr	r2, [sp, #24]
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	e7bb      	b.n	800a0ca <_printf_float+0x2fe>
 800a152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	d1c0      	bne.n	800a0e2 <_printf_float+0x316>
 800a160:	e68f      	b.n	8009e82 <_printf_float+0xb6>
 800a162:	9a06      	ldr	r2, [sp, #24]
 800a164:	464b      	mov	r3, r9
 800a166:	4442      	add	r2, r8
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	d1c3      	bne.n	800a0fa <_printf_float+0x32e>
 800a172:	e686      	b.n	8009e82 <_printf_float+0xb6>
 800a174:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a178:	f1ba 0f01 	cmp.w	sl, #1
 800a17c:	dc01      	bgt.n	800a182 <_printf_float+0x3b6>
 800a17e:	07db      	lsls	r3, r3, #31
 800a180:	d536      	bpl.n	800a1f0 <_printf_float+0x424>
 800a182:	2301      	movs	r3, #1
 800a184:	4642      	mov	r2, r8
 800a186:	4631      	mov	r1, r6
 800a188:	4628      	mov	r0, r5
 800a18a:	47b8      	blx	r7
 800a18c:	3001      	adds	r0, #1
 800a18e:	f43f ae78 	beq.w	8009e82 <_printf_float+0xb6>
 800a192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	f43f ae70 	beq.w	8009e82 <_printf_float+0xb6>
 800a1a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ae:	f7f6 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b2:	b9c0      	cbnz	r0, 800a1e6 <_printf_float+0x41a>
 800a1b4:	4653      	mov	r3, sl
 800a1b6:	f108 0201 	add.w	r2, r8, #1
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d10c      	bne.n	800a1de <_printf_float+0x412>
 800a1c4:	e65d      	b.n	8009e82 <_printf_float+0xb6>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	465a      	mov	r2, fp
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b8      	blx	r7
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	f43f ae56 	beq.w	8009e82 <_printf_float+0xb6>
 800a1d6:	f108 0801 	add.w	r8, r8, #1
 800a1da:	45d0      	cmp	r8, sl
 800a1dc:	dbf3      	blt.n	800a1c6 <_printf_float+0x3fa>
 800a1de:	464b      	mov	r3, r9
 800a1e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1e4:	e6df      	b.n	8009fa6 <_printf_float+0x1da>
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	f104 0b1a 	add.w	fp, r4, #26
 800a1ee:	e7f4      	b.n	800a1da <_printf_float+0x40e>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	e7e1      	b.n	800a1ba <_printf_float+0x3ee>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	f43f ae3e 	beq.w	8009e82 <_printf_float+0xb6>
 800a206:	f108 0801 	add.w	r8, r8, #1
 800a20a:	68e3      	ldr	r3, [r4, #12]
 800a20c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a20e:	1a5b      	subs	r3, r3, r1
 800a210:	4543      	cmp	r3, r8
 800a212:	dcf0      	bgt.n	800a1f6 <_printf_float+0x42a>
 800a214:	e6fc      	b.n	800a010 <_printf_float+0x244>
 800a216:	f04f 0800 	mov.w	r8, #0
 800a21a:	f104 0919 	add.w	r9, r4, #25
 800a21e:	e7f4      	b.n	800a20a <_printf_float+0x43e>

0800a220 <_printf_common>:
 800a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	4616      	mov	r6, r2
 800a226:	4698      	mov	r8, r3
 800a228:	688a      	ldr	r2, [r1, #8]
 800a22a:	690b      	ldr	r3, [r1, #16]
 800a22c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a230:	4293      	cmp	r3, r2
 800a232:	bfb8      	it	lt
 800a234:	4613      	movlt	r3, r2
 800a236:	6033      	str	r3, [r6, #0]
 800a238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a23c:	4607      	mov	r7, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	b10a      	cbz	r2, 800a246 <_printf_common+0x26>
 800a242:	3301      	adds	r3, #1
 800a244:	6033      	str	r3, [r6, #0]
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	0699      	lsls	r1, r3, #26
 800a24a:	bf42      	ittt	mi
 800a24c:	6833      	ldrmi	r3, [r6, #0]
 800a24e:	3302      	addmi	r3, #2
 800a250:	6033      	strmi	r3, [r6, #0]
 800a252:	6825      	ldr	r5, [r4, #0]
 800a254:	f015 0506 	ands.w	r5, r5, #6
 800a258:	d106      	bne.n	800a268 <_printf_common+0x48>
 800a25a:	f104 0a19 	add.w	sl, r4, #25
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	6832      	ldr	r2, [r6, #0]
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	42ab      	cmp	r3, r5
 800a266:	dc26      	bgt.n	800a2b6 <_printf_common+0x96>
 800a268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	3b00      	subs	r3, #0
 800a270:	bf18      	it	ne
 800a272:	2301      	movne	r3, #1
 800a274:	0692      	lsls	r2, r2, #26
 800a276:	d42b      	bmi.n	800a2d0 <_printf_common+0xb0>
 800a278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a27c:	4641      	mov	r1, r8
 800a27e:	4638      	mov	r0, r7
 800a280:	47c8      	blx	r9
 800a282:	3001      	adds	r0, #1
 800a284:	d01e      	beq.n	800a2c4 <_printf_common+0xa4>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	f003 0306 	and.w	r3, r3, #6
 800a28e:	2b04      	cmp	r3, #4
 800a290:	bf02      	ittt	eq
 800a292:	68e5      	ldreq	r5, [r4, #12]
 800a294:	6833      	ldreq	r3, [r6, #0]
 800a296:	1aed      	subeq	r5, r5, r3
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	bf0c      	ite	eq
 800a29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2a0:	2500      	movne	r5, #0
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	bfc4      	itt	gt
 800a2a6:	1a9b      	subgt	r3, r3, r2
 800a2a8:	18ed      	addgt	r5, r5, r3
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	341a      	adds	r4, #26
 800a2ae:	42b5      	cmp	r5, r6
 800a2b0:	d11a      	bne.n	800a2e8 <_printf_common+0xc8>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e008      	b.n	800a2c8 <_printf_common+0xa8>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4652      	mov	r2, sl
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	4638      	mov	r0, r7
 800a2be:	47c8      	blx	r9
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d103      	bne.n	800a2cc <_printf_common+0xac>
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	e7c6      	b.n	800a25e <_printf_common+0x3e>
 800a2d0:	18e1      	adds	r1, r4, r3
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	2030      	movs	r0, #48	@ 0x30
 800a2d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2da:	4422      	add	r2, r4
 800a2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2e4:	3302      	adds	r3, #2
 800a2e6:	e7c7      	b.n	800a278 <_printf_common+0x58>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	47c8      	blx	r9
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d0e6      	beq.n	800a2c4 <_printf_common+0xa4>
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7d9      	b.n	800a2ae <_printf_common+0x8e>
	...

0800a2fc <_printf_i>:
 800a2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a300:	7e0f      	ldrb	r7, [r1, #24]
 800a302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a304:	2f78      	cmp	r7, #120	@ 0x78
 800a306:	4691      	mov	r9, r2
 800a308:	4680      	mov	r8, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	469a      	mov	sl, r3
 800a30e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a312:	d807      	bhi.n	800a324 <_printf_i+0x28>
 800a314:	2f62      	cmp	r7, #98	@ 0x62
 800a316:	d80a      	bhi.n	800a32e <_printf_i+0x32>
 800a318:	2f00      	cmp	r7, #0
 800a31a:	f000 80d2 	beq.w	800a4c2 <_printf_i+0x1c6>
 800a31e:	2f58      	cmp	r7, #88	@ 0x58
 800a320:	f000 80b9 	beq.w	800a496 <_printf_i+0x19a>
 800a324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a32c:	e03a      	b.n	800a3a4 <_printf_i+0xa8>
 800a32e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a332:	2b15      	cmp	r3, #21
 800a334:	d8f6      	bhi.n	800a324 <_printf_i+0x28>
 800a336:	a101      	add	r1, pc, #4	@ (adr r1, 800a33c <_printf_i+0x40>)
 800a338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a33c:	0800a395 	.word	0x0800a395
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a325 	.word	0x0800a325
 800a348:	0800a325 	.word	0x0800a325
 800a34c:	0800a325 	.word	0x0800a325
 800a350:	0800a325 	.word	0x0800a325
 800a354:	0800a3a9 	.word	0x0800a3a9
 800a358:	0800a325 	.word	0x0800a325
 800a35c:	0800a325 	.word	0x0800a325
 800a360:	0800a325 	.word	0x0800a325
 800a364:	0800a325 	.word	0x0800a325
 800a368:	0800a4a9 	.word	0x0800a4a9
 800a36c:	0800a3d3 	.word	0x0800a3d3
 800a370:	0800a463 	.word	0x0800a463
 800a374:	0800a325 	.word	0x0800a325
 800a378:	0800a325 	.word	0x0800a325
 800a37c:	0800a4cb 	.word	0x0800a4cb
 800a380:	0800a325 	.word	0x0800a325
 800a384:	0800a3d3 	.word	0x0800a3d3
 800a388:	0800a325 	.word	0x0800a325
 800a38c:	0800a325 	.word	0x0800a325
 800a390:	0800a46b 	.word	0x0800a46b
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6032      	str	r2, [r6, #0]
 800a39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e09d      	b.n	800a4e4 <_printf_i+0x1e8>
 800a3a8:	6833      	ldr	r3, [r6, #0]
 800a3aa:	6820      	ldr	r0, [r4, #0]
 800a3ac:	1d19      	adds	r1, r3, #4
 800a3ae:	6031      	str	r1, [r6, #0]
 800a3b0:	0606      	lsls	r6, r0, #24
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_i+0xbc>
 800a3b4:	681d      	ldr	r5, [r3, #0]
 800a3b6:	e003      	b.n	800a3c0 <_printf_i+0xc4>
 800a3b8:	0645      	lsls	r5, r0, #25
 800a3ba:	d5fb      	bpl.n	800a3b4 <_printf_i+0xb8>
 800a3bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	da03      	bge.n	800a3cc <_printf_i+0xd0>
 800a3c4:	232d      	movs	r3, #45	@ 0x2d
 800a3c6:	426d      	negs	r5, r5
 800a3c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3cc:	4859      	ldr	r0, [pc, #356]	@ (800a534 <_printf_i+0x238>)
 800a3ce:	230a      	movs	r3, #10
 800a3d0:	e011      	b.n	800a3f6 <_printf_i+0xfa>
 800a3d2:	6821      	ldr	r1, [r4, #0]
 800a3d4:	6833      	ldr	r3, [r6, #0]
 800a3d6:	0608      	lsls	r0, r1, #24
 800a3d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3dc:	d402      	bmi.n	800a3e4 <_printf_i+0xe8>
 800a3de:	0649      	lsls	r1, r1, #25
 800a3e0:	bf48      	it	mi
 800a3e2:	b2ad      	uxthmi	r5, r5
 800a3e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3e6:	4853      	ldr	r0, [pc, #332]	@ (800a534 <_printf_i+0x238>)
 800a3e8:	6033      	str	r3, [r6, #0]
 800a3ea:	bf14      	ite	ne
 800a3ec:	230a      	movne	r3, #10
 800a3ee:	2308      	moveq	r3, #8
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3f6:	6866      	ldr	r6, [r4, #4]
 800a3f8:	60a6      	str	r6, [r4, #8]
 800a3fa:	2e00      	cmp	r6, #0
 800a3fc:	bfa2      	ittt	ge
 800a3fe:	6821      	ldrge	r1, [r4, #0]
 800a400:	f021 0104 	bicge.w	r1, r1, #4
 800a404:	6021      	strge	r1, [r4, #0]
 800a406:	b90d      	cbnz	r5, 800a40c <_printf_i+0x110>
 800a408:	2e00      	cmp	r6, #0
 800a40a:	d04b      	beq.n	800a4a4 <_printf_i+0x1a8>
 800a40c:	4616      	mov	r6, r2
 800a40e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a412:	fb03 5711 	mls	r7, r3, r1, r5
 800a416:	5dc7      	ldrb	r7, [r0, r7]
 800a418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a41c:	462f      	mov	r7, r5
 800a41e:	42bb      	cmp	r3, r7
 800a420:	460d      	mov	r5, r1
 800a422:	d9f4      	bls.n	800a40e <_printf_i+0x112>
 800a424:	2b08      	cmp	r3, #8
 800a426:	d10b      	bne.n	800a440 <_printf_i+0x144>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	07df      	lsls	r7, r3, #31
 800a42c:	d508      	bpl.n	800a440 <_printf_i+0x144>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6861      	ldr	r1, [r4, #4]
 800a432:	4299      	cmp	r1, r3
 800a434:	bfde      	ittt	le
 800a436:	2330      	movle	r3, #48	@ 0x30
 800a438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a43c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a440:	1b92      	subs	r2, r2, r6
 800a442:	6122      	str	r2, [r4, #16]
 800a444:	f8cd a000 	str.w	sl, [sp]
 800a448:	464b      	mov	r3, r9
 800a44a:	aa03      	add	r2, sp, #12
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f7ff fee6 	bl	800a220 <_printf_common>
 800a454:	3001      	adds	r0, #1
 800a456:	d14a      	bne.n	800a4ee <_printf_i+0x1f2>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	b004      	add	sp, #16
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	f043 0320 	orr.w	r3, r3, #32
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	4833      	ldr	r0, [pc, #204]	@ (800a538 <_printf_i+0x23c>)
 800a46c:	2778      	movs	r7, #120	@ 0x78
 800a46e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6831      	ldr	r1, [r6, #0]
 800a476:	061f      	lsls	r7, r3, #24
 800a478:	f851 5b04 	ldr.w	r5, [r1], #4
 800a47c:	d402      	bmi.n	800a484 <_printf_i+0x188>
 800a47e:	065f      	lsls	r7, r3, #25
 800a480:	bf48      	it	mi
 800a482:	b2ad      	uxthmi	r5, r5
 800a484:	6031      	str	r1, [r6, #0]
 800a486:	07d9      	lsls	r1, r3, #31
 800a488:	bf44      	itt	mi
 800a48a:	f043 0320 	orrmi.w	r3, r3, #32
 800a48e:	6023      	strmi	r3, [r4, #0]
 800a490:	b11d      	cbz	r5, 800a49a <_printf_i+0x19e>
 800a492:	2310      	movs	r3, #16
 800a494:	e7ac      	b.n	800a3f0 <_printf_i+0xf4>
 800a496:	4827      	ldr	r0, [pc, #156]	@ (800a534 <_printf_i+0x238>)
 800a498:	e7e9      	b.n	800a46e <_printf_i+0x172>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	f023 0320 	bic.w	r3, r3, #32
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	e7f6      	b.n	800a492 <_printf_i+0x196>
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	e7bd      	b.n	800a424 <_printf_i+0x128>
 800a4a8:	6833      	ldr	r3, [r6, #0]
 800a4aa:	6825      	ldr	r5, [r4, #0]
 800a4ac:	6961      	ldr	r1, [r4, #20]
 800a4ae:	1d18      	adds	r0, r3, #4
 800a4b0:	6030      	str	r0, [r6, #0]
 800a4b2:	062e      	lsls	r6, r5, #24
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	d501      	bpl.n	800a4bc <_printf_i+0x1c0>
 800a4b8:	6019      	str	r1, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <_printf_i+0x1c6>
 800a4bc:	0668      	lsls	r0, r5, #25
 800a4be:	d5fb      	bpl.n	800a4b8 <_printf_i+0x1bc>
 800a4c0:	8019      	strh	r1, [r3, #0]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	4616      	mov	r6, r2
 800a4c8:	e7bc      	b.n	800a444 <_printf_i+0x148>
 800a4ca:	6833      	ldr	r3, [r6, #0]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	6032      	str	r2, [r6, #0]
 800a4d0:	681e      	ldr	r6, [r3, #0]
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	f7f5 fe7a 	bl	80001d0 <memchr>
 800a4dc:	b108      	cbz	r0, 800a4e2 <_printf_i+0x1e6>
 800a4de:	1b80      	subs	r0, r0, r6
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ec:	e7aa      	b.n	800a444 <_printf_i+0x148>
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	47d0      	blx	sl
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d0ad      	beq.n	800a458 <_printf_i+0x15c>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	079b      	lsls	r3, r3, #30
 800a500:	d413      	bmi.n	800a52a <_printf_i+0x22e>
 800a502:	68e0      	ldr	r0, [r4, #12]
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	4298      	cmp	r0, r3
 800a508:	bfb8      	it	lt
 800a50a:	4618      	movlt	r0, r3
 800a50c:	e7a6      	b.n	800a45c <_printf_i+0x160>
 800a50e:	2301      	movs	r3, #1
 800a510:	4632      	mov	r2, r6
 800a512:	4649      	mov	r1, r9
 800a514:	4640      	mov	r0, r8
 800a516:	47d0      	blx	sl
 800a518:	3001      	adds	r0, #1
 800a51a:	d09d      	beq.n	800a458 <_printf_i+0x15c>
 800a51c:	3501      	adds	r5, #1
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	9903      	ldr	r1, [sp, #12]
 800a522:	1a5b      	subs	r3, r3, r1
 800a524:	42ab      	cmp	r3, r5
 800a526:	dcf2      	bgt.n	800a50e <_printf_i+0x212>
 800a528:	e7eb      	b.n	800a502 <_printf_i+0x206>
 800a52a:	2500      	movs	r5, #0
 800a52c:	f104 0619 	add.w	r6, r4, #25
 800a530:	e7f5      	b.n	800a51e <_printf_i+0x222>
 800a532:	bf00      	nop
 800a534:	0800e1e9 	.word	0x0800e1e9
 800a538:	0800e1fa 	.word	0x0800e1fa

0800a53c <_scanf_float>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	b087      	sub	sp, #28
 800a542:	4617      	mov	r7, r2
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	688b      	ldr	r3, [r1, #8]
 800a548:	1e5a      	subs	r2, r3, #1
 800a54a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a54e:	bf81      	itttt	hi
 800a550:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a554:	eb03 0b05 	addhi.w	fp, r3, r5
 800a558:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a55c:	608b      	strhi	r3, [r1, #8]
 800a55e:	680b      	ldr	r3, [r1, #0]
 800a560:	460a      	mov	r2, r1
 800a562:	f04f 0500 	mov.w	r5, #0
 800a566:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a56a:	f842 3b1c 	str.w	r3, [r2], #28
 800a56e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a572:	4680      	mov	r8, r0
 800a574:	460c      	mov	r4, r1
 800a576:	bf98      	it	ls
 800a578:	f04f 0b00 	movls.w	fp, #0
 800a57c:	9201      	str	r2, [sp, #4]
 800a57e:	4616      	mov	r6, r2
 800a580:	46aa      	mov	sl, r5
 800a582:	46a9      	mov	r9, r5
 800a584:	9502      	str	r5, [sp, #8]
 800a586:	68a2      	ldr	r2, [r4, #8]
 800a588:	b152      	cbz	r2, 800a5a0 <_scanf_float+0x64>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a590:	d864      	bhi.n	800a65c <_scanf_float+0x120>
 800a592:	2b40      	cmp	r3, #64	@ 0x40
 800a594:	d83c      	bhi.n	800a610 <_scanf_float+0xd4>
 800a596:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a59a:	b2c8      	uxtb	r0, r1
 800a59c:	280e      	cmp	r0, #14
 800a59e:	d93a      	bls.n	800a616 <_scanf_float+0xda>
 800a5a0:	f1b9 0f00 	cmp.w	r9, #0
 800a5a4:	d003      	beq.n	800a5ae <_scanf_float+0x72>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5b2:	f1ba 0f01 	cmp.w	sl, #1
 800a5b6:	f200 8117 	bhi.w	800a7e8 <_scanf_float+0x2ac>
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	429e      	cmp	r6, r3
 800a5be:	f200 8108 	bhi.w	800a7d2 <_scanf_float+0x296>
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	b007      	add	sp, #28
 800a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a5ce:	2a0d      	cmp	r2, #13
 800a5d0:	d8e6      	bhi.n	800a5a0 <_scanf_float+0x64>
 800a5d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a5d8 <_scanf_float+0x9c>)
 800a5d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a5d8:	0800a71f 	.word	0x0800a71f
 800a5dc:	0800a5a1 	.word	0x0800a5a1
 800a5e0:	0800a5a1 	.word	0x0800a5a1
 800a5e4:	0800a5a1 	.word	0x0800a5a1
 800a5e8:	0800a77f 	.word	0x0800a77f
 800a5ec:	0800a757 	.word	0x0800a757
 800a5f0:	0800a5a1 	.word	0x0800a5a1
 800a5f4:	0800a5a1 	.word	0x0800a5a1
 800a5f8:	0800a72d 	.word	0x0800a72d
 800a5fc:	0800a5a1 	.word	0x0800a5a1
 800a600:	0800a5a1 	.word	0x0800a5a1
 800a604:	0800a5a1 	.word	0x0800a5a1
 800a608:	0800a5a1 	.word	0x0800a5a1
 800a60c:	0800a6e5 	.word	0x0800a6e5
 800a610:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a614:	e7db      	b.n	800a5ce <_scanf_float+0x92>
 800a616:	290e      	cmp	r1, #14
 800a618:	d8c2      	bhi.n	800a5a0 <_scanf_float+0x64>
 800a61a:	a001      	add	r0, pc, #4	@ (adr r0, 800a620 <_scanf_float+0xe4>)
 800a61c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a620:	0800a6d5 	.word	0x0800a6d5
 800a624:	0800a5a1 	.word	0x0800a5a1
 800a628:	0800a6d5 	.word	0x0800a6d5
 800a62c:	0800a76b 	.word	0x0800a76b
 800a630:	0800a5a1 	.word	0x0800a5a1
 800a634:	0800a67d 	.word	0x0800a67d
 800a638:	0800a6bb 	.word	0x0800a6bb
 800a63c:	0800a6bb 	.word	0x0800a6bb
 800a640:	0800a6bb 	.word	0x0800a6bb
 800a644:	0800a6bb 	.word	0x0800a6bb
 800a648:	0800a6bb 	.word	0x0800a6bb
 800a64c:	0800a6bb 	.word	0x0800a6bb
 800a650:	0800a6bb 	.word	0x0800a6bb
 800a654:	0800a6bb 	.word	0x0800a6bb
 800a658:	0800a6bb 	.word	0x0800a6bb
 800a65c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a65e:	d809      	bhi.n	800a674 <_scanf_float+0x138>
 800a660:	2b60      	cmp	r3, #96	@ 0x60
 800a662:	d8b2      	bhi.n	800a5ca <_scanf_float+0x8e>
 800a664:	2b54      	cmp	r3, #84	@ 0x54
 800a666:	d07b      	beq.n	800a760 <_scanf_float+0x224>
 800a668:	2b59      	cmp	r3, #89	@ 0x59
 800a66a:	d199      	bne.n	800a5a0 <_scanf_float+0x64>
 800a66c:	2d07      	cmp	r5, #7
 800a66e:	d197      	bne.n	800a5a0 <_scanf_float+0x64>
 800a670:	2508      	movs	r5, #8
 800a672:	e02c      	b.n	800a6ce <_scanf_float+0x192>
 800a674:	2b74      	cmp	r3, #116	@ 0x74
 800a676:	d073      	beq.n	800a760 <_scanf_float+0x224>
 800a678:	2b79      	cmp	r3, #121	@ 0x79
 800a67a:	e7f6      	b.n	800a66a <_scanf_float+0x12e>
 800a67c:	6821      	ldr	r1, [r4, #0]
 800a67e:	05c8      	lsls	r0, r1, #23
 800a680:	d51b      	bpl.n	800a6ba <_scanf_float+0x17e>
 800a682:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a686:	6021      	str	r1, [r4, #0]
 800a688:	f109 0901 	add.w	r9, r9, #1
 800a68c:	f1bb 0f00 	cmp.w	fp, #0
 800a690:	d003      	beq.n	800a69a <_scanf_float+0x15e>
 800a692:	3201      	adds	r2, #1
 800a694:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a698:	60a2      	str	r2, [r4, #8]
 800a69a:	68a3      	ldr	r3, [r4, #8]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	60a3      	str	r3, [r4, #8]
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	6123      	str	r3, [r4, #16]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	607b      	str	r3, [r7, #4]
 800a6ae:	f340 8087 	ble.w	800a7c0 <_scanf_float+0x284>
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	603b      	str	r3, [r7, #0]
 800a6b8:	e765      	b.n	800a586 <_scanf_float+0x4a>
 800a6ba:	eb1a 0105 	adds.w	r1, sl, r5
 800a6be:	f47f af6f 	bne.w	800a5a0 <_scanf_float+0x64>
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a6c8:	6022      	str	r2, [r4, #0]
 800a6ca:	460d      	mov	r5, r1
 800a6cc:	468a      	mov	sl, r1
 800a6ce:	f806 3b01 	strb.w	r3, [r6], #1
 800a6d2:	e7e2      	b.n	800a69a <_scanf_float+0x15e>
 800a6d4:	6822      	ldr	r2, [r4, #0]
 800a6d6:	0610      	lsls	r0, r2, #24
 800a6d8:	f57f af62 	bpl.w	800a5a0 <_scanf_float+0x64>
 800a6dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6e0:	6022      	str	r2, [r4, #0]
 800a6e2:	e7f4      	b.n	800a6ce <_scanf_float+0x192>
 800a6e4:	f1ba 0f00 	cmp.w	sl, #0
 800a6e8:	d10e      	bne.n	800a708 <_scanf_float+0x1cc>
 800a6ea:	f1b9 0f00 	cmp.w	r9, #0
 800a6ee:	d10e      	bne.n	800a70e <_scanf_float+0x1d2>
 800a6f0:	6822      	ldr	r2, [r4, #0]
 800a6f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a6f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a6fa:	d108      	bne.n	800a70e <_scanf_float+0x1d2>
 800a6fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a700:	6022      	str	r2, [r4, #0]
 800a702:	f04f 0a01 	mov.w	sl, #1
 800a706:	e7e2      	b.n	800a6ce <_scanf_float+0x192>
 800a708:	f1ba 0f02 	cmp.w	sl, #2
 800a70c:	d055      	beq.n	800a7ba <_scanf_float+0x27e>
 800a70e:	2d01      	cmp	r5, #1
 800a710:	d002      	beq.n	800a718 <_scanf_float+0x1dc>
 800a712:	2d04      	cmp	r5, #4
 800a714:	f47f af44 	bne.w	800a5a0 <_scanf_float+0x64>
 800a718:	3501      	adds	r5, #1
 800a71a:	b2ed      	uxtb	r5, r5
 800a71c:	e7d7      	b.n	800a6ce <_scanf_float+0x192>
 800a71e:	f1ba 0f01 	cmp.w	sl, #1
 800a722:	f47f af3d 	bne.w	800a5a0 <_scanf_float+0x64>
 800a726:	f04f 0a02 	mov.w	sl, #2
 800a72a:	e7d0      	b.n	800a6ce <_scanf_float+0x192>
 800a72c:	b97d      	cbnz	r5, 800a74e <_scanf_float+0x212>
 800a72e:	f1b9 0f00 	cmp.w	r9, #0
 800a732:	f47f af38 	bne.w	800a5a6 <_scanf_float+0x6a>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a73c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a740:	f040 8108 	bne.w	800a954 <_scanf_float+0x418>
 800a744:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a748:	6022      	str	r2, [r4, #0]
 800a74a:	2501      	movs	r5, #1
 800a74c:	e7bf      	b.n	800a6ce <_scanf_float+0x192>
 800a74e:	2d03      	cmp	r5, #3
 800a750:	d0e2      	beq.n	800a718 <_scanf_float+0x1dc>
 800a752:	2d05      	cmp	r5, #5
 800a754:	e7de      	b.n	800a714 <_scanf_float+0x1d8>
 800a756:	2d02      	cmp	r5, #2
 800a758:	f47f af22 	bne.w	800a5a0 <_scanf_float+0x64>
 800a75c:	2503      	movs	r5, #3
 800a75e:	e7b6      	b.n	800a6ce <_scanf_float+0x192>
 800a760:	2d06      	cmp	r5, #6
 800a762:	f47f af1d 	bne.w	800a5a0 <_scanf_float+0x64>
 800a766:	2507      	movs	r5, #7
 800a768:	e7b1      	b.n	800a6ce <_scanf_float+0x192>
 800a76a:	6822      	ldr	r2, [r4, #0]
 800a76c:	0591      	lsls	r1, r2, #22
 800a76e:	f57f af17 	bpl.w	800a5a0 <_scanf_float+0x64>
 800a772:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a776:	6022      	str	r2, [r4, #0]
 800a778:	f8cd 9008 	str.w	r9, [sp, #8]
 800a77c:	e7a7      	b.n	800a6ce <_scanf_float+0x192>
 800a77e:	6822      	ldr	r2, [r4, #0]
 800a780:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a784:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a788:	d006      	beq.n	800a798 <_scanf_float+0x25c>
 800a78a:	0550      	lsls	r0, r2, #21
 800a78c:	f57f af08 	bpl.w	800a5a0 <_scanf_float+0x64>
 800a790:	f1b9 0f00 	cmp.w	r9, #0
 800a794:	f000 80de 	beq.w	800a954 <_scanf_float+0x418>
 800a798:	0591      	lsls	r1, r2, #22
 800a79a:	bf58      	it	pl
 800a79c:	9902      	ldrpl	r1, [sp, #8]
 800a79e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a7a2:	bf58      	it	pl
 800a7a4:	eba9 0101 	subpl.w	r1, r9, r1
 800a7a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a7ac:	bf58      	it	pl
 800a7ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	f04f 0900 	mov.w	r9, #0
 800a7b8:	e789      	b.n	800a6ce <_scanf_float+0x192>
 800a7ba:	f04f 0a03 	mov.w	sl, #3
 800a7be:	e786      	b.n	800a6ce <_scanf_float+0x192>
 800a7c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4798      	blx	r3
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f43f aedb 	beq.w	800a586 <_scanf_float+0x4a>
 800a7d0:	e6e6      	b.n	800a5a0 <_scanf_float+0x64>
 800a7d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7da:	463a      	mov	r2, r7
 800a7dc:	4640      	mov	r0, r8
 800a7de:	4798      	blx	r3
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	e6e8      	b.n	800a5ba <_scanf_float+0x7e>
 800a7e8:	1e6b      	subs	r3, r5, #1
 800a7ea:	2b06      	cmp	r3, #6
 800a7ec:	d824      	bhi.n	800a838 <_scanf_float+0x2fc>
 800a7ee:	2d02      	cmp	r5, #2
 800a7f0:	d836      	bhi.n	800a860 <_scanf_float+0x324>
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	429e      	cmp	r6, r3
 800a7f6:	f67f aee4 	bls.w	800a5c2 <_scanf_float+0x86>
 800a7fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a802:	463a      	mov	r2, r7
 800a804:	4640      	mov	r0, r8
 800a806:	4798      	blx	r3
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	e7f0      	b.n	800a7f2 <_scanf_float+0x2b6>
 800a810:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a814:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a818:	463a      	mov	r2, r7
 800a81a:	4640      	mov	r0, r8
 800a81c:	4798      	blx	r3
 800a81e:	6923      	ldr	r3, [r4, #16]
 800a820:	3b01      	subs	r3, #1
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a828:	fa5f fa8a 	uxtb.w	sl, sl
 800a82c:	f1ba 0f02 	cmp.w	sl, #2
 800a830:	d1ee      	bne.n	800a810 <_scanf_float+0x2d4>
 800a832:	3d03      	subs	r5, #3
 800a834:	b2ed      	uxtb	r5, r5
 800a836:	1b76      	subs	r6, r6, r5
 800a838:	6823      	ldr	r3, [r4, #0]
 800a83a:	05da      	lsls	r2, r3, #23
 800a83c:	d530      	bpl.n	800a8a0 <_scanf_float+0x364>
 800a83e:	055b      	lsls	r3, r3, #21
 800a840:	d511      	bpl.n	800a866 <_scanf_float+0x32a>
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	429e      	cmp	r6, r3
 800a846:	f67f aebc 	bls.w	800a5c2 <_scanf_float+0x86>
 800a84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a84e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a852:	463a      	mov	r2, r7
 800a854:	4640      	mov	r0, r8
 800a856:	4798      	blx	r3
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	6123      	str	r3, [r4, #16]
 800a85e:	e7f0      	b.n	800a842 <_scanf_float+0x306>
 800a860:	46aa      	mov	sl, r5
 800a862:	46b3      	mov	fp, r6
 800a864:	e7de      	b.n	800a824 <_scanf_float+0x2e8>
 800a866:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	2965      	cmp	r1, #101	@ 0x65
 800a86e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a872:	f106 35ff 	add.w	r5, r6, #4294967295
 800a876:	6123      	str	r3, [r4, #16]
 800a878:	d00c      	beq.n	800a894 <_scanf_float+0x358>
 800a87a:	2945      	cmp	r1, #69	@ 0x45
 800a87c:	d00a      	beq.n	800a894 <_scanf_float+0x358>
 800a87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a882:	463a      	mov	r2, r7
 800a884:	4640      	mov	r0, r8
 800a886:	4798      	blx	r3
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a88e:	3b01      	subs	r3, #1
 800a890:	1eb5      	subs	r5, r6, #2
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a898:	463a      	mov	r2, r7
 800a89a:	4640      	mov	r0, r8
 800a89c:	4798      	blx	r3
 800a89e:	462e      	mov	r6, r5
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	f012 0210 	ands.w	r2, r2, #16
 800a8a6:	d001      	beq.n	800a8ac <_scanf_float+0x370>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e68b      	b.n	800a5c4 <_scanf_float+0x88>
 800a8ac:	7032      	strb	r2, [r6, #0]
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a8b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8b8:	d11c      	bne.n	800a8f4 <_scanf_float+0x3b8>
 800a8ba:	9b02      	ldr	r3, [sp, #8]
 800a8bc:	454b      	cmp	r3, r9
 800a8be:	eba3 0209 	sub.w	r2, r3, r9
 800a8c2:	d123      	bne.n	800a90c <_scanf_float+0x3d0>
 800a8c4:	9901      	ldr	r1, [sp, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	f7ff f9d9 	bl	8009c80 <_strtod_r>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	6821      	ldr	r1, [r4, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f011 0f02 	tst.w	r1, #2
 800a8d8:	ec57 6b10 	vmov	r6, r7, d0
 800a8dc:	f103 0204 	add.w	r2, r3, #4
 800a8e0:	d01f      	beq.n	800a922 <_scanf_float+0x3e6>
 800a8e2:	9903      	ldr	r1, [sp, #12]
 800a8e4:	600a      	str	r2, [r1, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	e9c3 6700 	strd	r6, r7, [r3]
 800a8ec:	68e3      	ldr	r3, [r4, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60e3      	str	r3, [r4, #12]
 800a8f2:	e7d9      	b.n	800a8a8 <_scanf_float+0x36c>
 800a8f4:	9b04      	ldr	r3, [sp, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0e4      	beq.n	800a8c4 <_scanf_float+0x388>
 800a8fa:	9905      	ldr	r1, [sp, #20]
 800a8fc:	230a      	movs	r3, #10
 800a8fe:	3101      	adds	r1, #1
 800a900:	4640      	mov	r0, r8
 800a902:	f002 f9b7 	bl	800cc74 <_strtol_r>
 800a906:	9b04      	ldr	r3, [sp, #16]
 800a908:	9e05      	ldr	r6, [sp, #20]
 800a90a:	1ac2      	subs	r2, r0, r3
 800a90c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a910:	429e      	cmp	r6, r3
 800a912:	bf28      	it	cs
 800a914:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a918:	4910      	ldr	r1, [pc, #64]	@ (800a95c <_scanf_float+0x420>)
 800a91a:	4630      	mov	r0, r6
 800a91c:	f000 f8e4 	bl	800aae8 <siprintf>
 800a920:	e7d0      	b.n	800a8c4 <_scanf_float+0x388>
 800a922:	f011 0f04 	tst.w	r1, #4
 800a926:	9903      	ldr	r1, [sp, #12]
 800a928:	600a      	str	r2, [r1, #0]
 800a92a:	d1dc      	bne.n	800a8e6 <_scanf_float+0x3aa>
 800a92c:	681d      	ldr	r5, [r3, #0]
 800a92e:	4632      	mov	r2, r6
 800a930:	463b      	mov	r3, r7
 800a932:	4630      	mov	r0, r6
 800a934:	4639      	mov	r1, r7
 800a936:	f7f6 f8f9 	bl	8000b2c <__aeabi_dcmpun>
 800a93a:	b128      	cbz	r0, 800a948 <_scanf_float+0x40c>
 800a93c:	4808      	ldr	r0, [pc, #32]	@ (800a960 <_scanf_float+0x424>)
 800a93e:	f000 fa7b 	bl	800ae38 <nanf>
 800a942:	ed85 0a00 	vstr	s0, [r5]
 800a946:	e7d1      	b.n	800a8ec <_scanf_float+0x3b0>
 800a948:	4630      	mov	r0, r6
 800a94a:	4639      	mov	r1, r7
 800a94c:	f7f6 f94c 	bl	8000be8 <__aeabi_d2f>
 800a950:	6028      	str	r0, [r5, #0]
 800a952:	e7cb      	b.n	800a8ec <_scanf_float+0x3b0>
 800a954:	f04f 0900 	mov.w	r9, #0
 800a958:	e629      	b.n	800a5ae <_scanf_float+0x72>
 800a95a:	bf00      	nop
 800a95c:	0800e20b 	.word	0x0800e20b
 800a960:	0800e4c7 	.word	0x0800e4c7

0800a964 <std>:
 800a964:	2300      	movs	r3, #0
 800a966:	b510      	push	{r4, lr}
 800a968:	4604      	mov	r4, r0
 800a96a:	e9c0 3300 	strd	r3, r3, [r0]
 800a96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a972:	6083      	str	r3, [r0, #8]
 800a974:	8181      	strh	r1, [r0, #12]
 800a976:	6643      	str	r3, [r0, #100]	@ 0x64
 800a978:	81c2      	strh	r2, [r0, #14]
 800a97a:	6183      	str	r3, [r0, #24]
 800a97c:	4619      	mov	r1, r3
 800a97e:	2208      	movs	r2, #8
 800a980:	305c      	adds	r0, #92	@ 0x5c
 800a982:	f000 f940 	bl	800ac06 <memset>
 800a986:	4b0d      	ldr	r3, [pc, #52]	@ (800a9bc <std+0x58>)
 800a988:	6263      	str	r3, [r4, #36]	@ 0x24
 800a98a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c0 <std+0x5c>)
 800a98c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a98e:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c4 <std+0x60>)
 800a990:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a992:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <std+0x64>)
 800a994:	6323      	str	r3, [r4, #48]	@ 0x30
 800a996:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <std+0x68>)
 800a998:	6224      	str	r4, [r4, #32]
 800a99a:	429c      	cmp	r4, r3
 800a99c:	d006      	beq.n	800a9ac <std+0x48>
 800a99e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a9a2:	4294      	cmp	r4, r2
 800a9a4:	d002      	beq.n	800a9ac <std+0x48>
 800a9a6:	33d0      	adds	r3, #208	@ 0xd0
 800a9a8:	429c      	cmp	r4, r3
 800a9aa:	d105      	bne.n	800a9b8 <std+0x54>
 800a9ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b4:	f000 ba26 	b.w	800ae04 <__retarget_lock_init_recursive>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	bf00      	nop
 800a9bc:	0800ab7d 	.word	0x0800ab7d
 800a9c0:	0800aba3 	.word	0x0800aba3
 800a9c4:	0800abdb 	.word	0x0800abdb
 800a9c8:	0800abff 	.word	0x0800abff
 800a9cc:	20005924 	.word	0x20005924

0800a9d0 <stdio_exit_handler>:
 800a9d0:	4a02      	ldr	r2, [pc, #8]	@ (800a9dc <stdio_exit_handler+0xc>)
 800a9d2:	4903      	ldr	r1, [pc, #12]	@ (800a9e0 <stdio_exit_handler+0x10>)
 800a9d4:	4803      	ldr	r0, [pc, #12]	@ (800a9e4 <stdio_exit_handler+0x14>)
 800a9d6:	f000 b869 	b.w	800aaac <_fwalk_sglue>
 800a9da:	bf00      	nop
 800a9dc:	20000014 	.word	0x20000014
 800a9e0:	0800d67d 	.word	0x0800d67d
 800a9e4:	20000190 	.word	0x20000190

0800a9e8 <cleanup_stdio>:
 800a9e8:	6841      	ldr	r1, [r0, #4]
 800a9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800aa1c <cleanup_stdio+0x34>)
 800a9ec:	4299      	cmp	r1, r3
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	d001      	beq.n	800a9f8 <cleanup_stdio+0x10>
 800a9f4:	f002 fe42 	bl	800d67c <_fflush_r>
 800a9f8:	68a1      	ldr	r1, [r4, #8]
 800a9fa:	4b09      	ldr	r3, [pc, #36]	@ (800aa20 <cleanup_stdio+0x38>)
 800a9fc:	4299      	cmp	r1, r3
 800a9fe:	d002      	beq.n	800aa06 <cleanup_stdio+0x1e>
 800aa00:	4620      	mov	r0, r4
 800aa02:	f002 fe3b 	bl	800d67c <_fflush_r>
 800aa06:	68e1      	ldr	r1, [r4, #12]
 800aa08:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <cleanup_stdio+0x3c>)
 800aa0a:	4299      	cmp	r1, r3
 800aa0c:	d004      	beq.n	800aa18 <cleanup_stdio+0x30>
 800aa0e:	4620      	mov	r0, r4
 800aa10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa14:	f002 be32 	b.w	800d67c <_fflush_r>
 800aa18:	bd10      	pop	{r4, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20005924 	.word	0x20005924
 800aa20:	2000598c 	.word	0x2000598c
 800aa24:	200059f4 	.word	0x200059f4

0800aa28 <global_stdio_init.part.0>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <global_stdio_init.part.0+0x30>)
 800aa2c:	4c0b      	ldr	r4, [pc, #44]	@ (800aa5c <global_stdio_init.part.0+0x34>)
 800aa2e:	4a0c      	ldr	r2, [pc, #48]	@ (800aa60 <global_stdio_init.part.0+0x38>)
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	4620      	mov	r0, r4
 800aa34:	2200      	movs	r2, #0
 800aa36:	2104      	movs	r1, #4
 800aa38:	f7ff ff94 	bl	800a964 <std>
 800aa3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aa40:	2201      	movs	r2, #1
 800aa42:	2109      	movs	r1, #9
 800aa44:	f7ff ff8e 	bl	800a964 <std>
 800aa48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa52:	2112      	movs	r1, #18
 800aa54:	f7ff bf86 	b.w	800a964 <std>
 800aa58:	20005a5c 	.word	0x20005a5c
 800aa5c:	20005924 	.word	0x20005924
 800aa60:	0800a9d1 	.word	0x0800a9d1

0800aa64 <__sfp_lock_acquire>:
 800aa64:	4801      	ldr	r0, [pc, #4]	@ (800aa6c <__sfp_lock_acquire+0x8>)
 800aa66:	f000 b9ce 	b.w	800ae06 <__retarget_lock_acquire_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	20005a65 	.word	0x20005a65

0800aa70 <__sfp_lock_release>:
 800aa70:	4801      	ldr	r0, [pc, #4]	@ (800aa78 <__sfp_lock_release+0x8>)
 800aa72:	f000 b9c9 	b.w	800ae08 <__retarget_lock_release_recursive>
 800aa76:	bf00      	nop
 800aa78:	20005a65 	.word	0x20005a65

0800aa7c <__sinit>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4604      	mov	r4, r0
 800aa80:	f7ff fff0 	bl	800aa64 <__sfp_lock_acquire>
 800aa84:	6a23      	ldr	r3, [r4, #32]
 800aa86:	b11b      	cbz	r3, 800aa90 <__sinit+0x14>
 800aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8c:	f7ff bff0 	b.w	800aa70 <__sfp_lock_release>
 800aa90:	4b04      	ldr	r3, [pc, #16]	@ (800aaa4 <__sinit+0x28>)
 800aa92:	6223      	str	r3, [r4, #32]
 800aa94:	4b04      	ldr	r3, [pc, #16]	@ (800aaa8 <__sinit+0x2c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f5      	bne.n	800aa88 <__sinit+0xc>
 800aa9c:	f7ff ffc4 	bl	800aa28 <global_stdio_init.part.0>
 800aaa0:	e7f2      	b.n	800aa88 <__sinit+0xc>
 800aaa2:	bf00      	nop
 800aaa4:	0800a9e9 	.word	0x0800a9e9
 800aaa8:	20005a5c 	.word	0x20005a5c

0800aaac <_fwalk_sglue>:
 800aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	4607      	mov	r7, r0
 800aab2:	4688      	mov	r8, r1
 800aab4:	4614      	mov	r4, r2
 800aab6:	2600      	movs	r6, #0
 800aab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aabc:	f1b9 0901 	subs.w	r9, r9, #1
 800aac0:	d505      	bpl.n	800aace <_fwalk_sglue+0x22>
 800aac2:	6824      	ldr	r4, [r4, #0]
 800aac4:	2c00      	cmp	r4, #0
 800aac6:	d1f7      	bne.n	800aab8 <_fwalk_sglue+0xc>
 800aac8:	4630      	mov	r0, r6
 800aaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d907      	bls.n	800aae4 <_fwalk_sglue+0x38>
 800aad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aad8:	3301      	adds	r3, #1
 800aada:	d003      	beq.n	800aae4 <_fwalk_sglue+0x38>
 800aadc:	4629      	mov	r1, r5
 800aade:	4638      	mov	r0, r7
 800aae0:	47c0      	blx	r8
 800aae2:	4306      	orrs	r6, r0
 800aae4:	3568      	adds	r5, #104	@ 0x68
 800aae6:	e7e9      	b.n	800aabc <_fwalk_sglue+0x10>

0800aae8 <siprintf>:
 800aae8:	b40e      	push	{r1, r2, r3}
 800aaea:	b500      	push	{lr}
 800aaec:	b09c      	sub	sp, #112	@ 0x70
 800aaee:	ab1d      	add	r3, sp, #116	@ 0x74
 800aaf0:	9002      	str	r0, [sp, #8]
 800aaf2:	9006      	str	r0, [sp, #24]
 800aaf4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aaf8:	4809      	ldr	r0, [pc, #36]	@ (800ab20 <siprintf+0x38>)
 800aafa:	9107      	str	r1, [sp, #28]
 800aafc:	9104      	str	r1, [sp, #16]
 800aafe:	4909      	ldr	r1, [pc, #36]	@ (800ab24 <siprintf+0x3c>)
 800ab00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab04:	9105      	str	r1, [sp, #20]
 800ab06:	6800      	ldr	r0, [r0, #0]
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	a902      	add	r1, sp, #8
 800ab0c:	f002 f91c 	bl	800cd48 <_svfiprintf_r>
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	2200      	movs	r2, #0
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	b01c      	add	sp, #112	@ 0x70
 800ab18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab1c:	b003      	add	sp, #12
 800ab1e:	4770      	bx	lr
 800ab20:	2000018c 	.word	0x2000018c
 800ab24:	ffff0208 	.word	0xffff0208

0800ab28 <siscanf>:
 800ab28:	b40e      	push	{r1, r2, r3}
 800ab2a:	b530      	push	{r4, r5, lr}
 800ab2c:	b09c      	sub	sp, #112	@ 0x70
 800ab2e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ab30:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ab34:	f854 5b04 	ldr.w	r5, [r4], #4
 800ab38:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ab3c:	9002      	str	r0, [sp, #8]
 800ab3e:	9006      	str	r0, [sp, #24]
 800ab40:	f7f5 fb96 	bl	8000270 <strlen>
 800ab44:	4b0b      	ldr	r3, [pc, #44]	@ (800ab74 <siscanf+0x4c>)
 800ab46:	9003      	str	r0, [sp, #12]
 800ab48:	9007      	str	r0, [sp, #28]
 800ab4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab4c:	480a      	ldr	r0, [pc, #40]	@ (800ab78 <siscanf+0x50>)
 800ab4e:	9401      	str	r4, [sp, #4]
 800ab50:	2300      	movs	r3, #0
 800ab52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab54:	9314      	str	r3, [sp, #80]	@ 0x50
 800ab56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab5e:	462a      	mov	r2, r5
 800ab60:	4623      	mov	r3, r4
 800ab62:	a902      	add	r1, sp, #8
 800ab64:	6800      	ldr	r0, [r0, #0]
 800ab66:	f002 fa43 	bl	800cff0 <__ssvfiscanf_r>
 800ab6a:	b01c      	add	sp, #112	@ 0x70
 800ab6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab70:	b003      	add	sp, #12
 800ab72:	4770      	bx	lr
 800ab74:	0800ab9f 	.word	0x0800ab9f
 800ab78:	2000018c 	.word	0x2000018c

0800ab7c <__sread>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	460c      	mov	r4, r1
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	f000 f8e0 	bl	800ad48 <_read_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	bfab      	itete	ge
 800ab8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab90:	181b      	addge	r3, r3, r0
 800ab92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab96:	bfac      	ite	ge
 800ab98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab9a:	81a3      	strhlt	r3, [r4, #12]
 800ab9c:	bd10      	pop	{r4, pc}

0800ab9e <__seofread>:
 800ab9e:	2000      	movs	r0, #0
 800aba0:	4770      	bx	lr

0800aba2 <__swrite>:
 800aba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba6:	461f      	mov	r7, r3
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	05db      	lsls	r3, r3, #23
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	4616      	mov	r6, r2
 800abb2:	d505      	bpl.n	800abc0 <__swrite+0x1e>
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	2302      	movs	r3, #2
 800abba:	2200      	movs	r2, #0
 800abbc:	f000 f8b2 	bl	800ad24 <_lseek_r>
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abca:	81a3      	strh	r3, [r4, #12]
 800abcc:	4632      	mov	r2, r6
 800abce:	463b      	mov	r3, r7
 800abd0:	4628      	mov	r0, r5
 800abd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	f000 b8d9 	b.w	800ad8c <_write_r>

0800abda <__sseek>:
 800abda:	b510      	push	{r4, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe2:	f000 f89f 	bl	800ad24 <_lseek_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	bf15      	itete	ne
 800abec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800abee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800abf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800abf6:	81a3      	strheq	r3, [r4, #12]
 800abf8:	bf18      	it	ne
 800abfa:	81a3      	strhne	r3, [r4, #12]
 800abfc:	bd10      	pop	{r4, pc}

0800abfe <__sclose>:
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 b87f 	b.w	800ad04 <_close_r>

0800ac06 <memset>:
 800ac06:	4402      	add	r2, r0
 800ac08:	4603      	mov	r3, r0
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d100      	bne.n	800ac10 <memset+0xa>
 800ac0e:	4770      	bx	lr
 800ac10:	f803 1b01 	strb.w	r1, [r3], #1
 800ac14:	e7f9      	b.n	800ac0a <memset+0x4>

0800ac16 <strchr>:
 800ac16:	b2c9      	uxtb	r1, r1
 800ac18:	4603      	mov	r3, r0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac20:	b112      	cbz	r2, 800ac28 <strchr+0x12>
 800ac22:	428a      	cmp	r2, r1
 800ac24:	d1f9      	bne.n	800ac1a <strchr+0x4>
 800ac26:	4770      	bx	lr
 800ac28:	2900      	cmp	r1, #0
 800ac2a:	bf18      	it	ne
 800ac2c:	2000      	movne	r0, #0
 800ac2e:	4770      	bx	lr

0800ac30 <strncat>:
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	4604      	mov	r4, r0
 800ac34:	7825      	ldrb	r5, [r4, #0]
 800ac36:	4623      	mov	r3, r4
 800ac38:	3401      	adds	r4, #1
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	d1fa      	bne.n	800ac34 <strncat+0x4>
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	d304      	bcc.n	800ac4c <strncat+0x1c>
 800ac42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac46:	f803 4b01 	strb.w	r4, [r3], #1
 800ac4a:	b904      	cbnz	r4, 800ac4e <strncat+0x1e>
 800ac4c:	bd30      	pop	{r4, r5, pc}
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	d1f5      	bne.n	800ac3e <strncat+0xe>
 800ac52:	701a      	strb	r2, [r3, #0]
 800ac54:	e7f3      	b.n	800ac3e <strncat+0xe>

0800ac56 <strncmp>:
 800ac56:	b510      	push	{r4, lr}
 800ac58:	b16a      	cbz	r2, 800ac76 <strncmp+0x20>
 800ac5a:	3901      	subs	r1, #1
 800ac5c:	1884      	adds	r4, r0, r2
 800ac5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d103      	bne.n	800ac72 <strncmp+0x1c>
 800ac6a:	42a0      	cmp	r0, r4
 800ac6c:	d001      	beq.n	800ac72 <strncmp+0x1c>
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	d1f5      	bne.n	800ac5e <strncmp+0x8>
 800ac72:	1ad0      	subs	r0, r2, r3
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	4610      	mov	r0, r2
 800ac78:	e7fc      	b.n	800ac74 <strncmp+0x1e>

0800ac7a <__strtok_r>:
 800ac7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	b908      	cbnz	r0, 800ac84 <__strtok_r+0xa>
 800ac80:	6814      	ldr	r4, [r2, #0]
 800ac82:	b144      	cbz	r4, 800ac96 <__strtok_r+0x1c>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ac90:	b91e      	cbnz	r6, 800ac9a <__strtok_r+0x20>
 800ac92:	b965      	cbnz	r5, 800acae <__strtok_r+0x34>
 800ac94:	6015      	str	r5, [r2, #0]
 800ac96:	2000      	movs	r0, #0
 800ac98:	e005      	b.n	800aca6 <__strtok_r+0x2c>
 800ac9a:	42b5      	cmp	r5, r6
 800ac9c:	d1f6      	bne.n	800ac8c <__strtok_r+0x12>
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1f0      	bne.n	800ac84 <__strtok_r+0xa>
 800aca2:	6014      	str	r4, [r2, #0]
 800aca4:	7003      	strb	r3, [r0, #0]
 800aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca8:	461c      	mov	r4, r3
 800acaa:	e00c      	b.n	800acc6 <__strtok_r+0x4c>
 800acac:	b915      	cbnz	r5, 800acb4 <__strtok_r+0x3a>
 800acae:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acb2:	460e      	mov	r6, r1
 800acb4:	f816 5b01 	ldrb.w	r5, [r6], #1
 800acb8:	42ab      	cmp	r3, r5
 800acba:	d1f7      	bne.n	800acac <__strtok_r+0x32>
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f3      	beq.n	800aca8 <__strtok_r+0x2e>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f804 3c01 	strb.w	r3, [r4, #-1]
 800acc6:	6014      	str	r4, [r2, #0]
 800acc8:	e7ed      	b.n	800aca6 <__strtok_r+0x2c>

0800acca <strtok_r>:
 800acca:	2301      	movs	r3, #1
 800accc:	f7ff bfd5 	b.w	800ac7a <__strtok_r>

0800acd0 <strstr>:
 800acd0:	780a      	ldrb	r2, [r1, #0]
 800acd2:	b570      	push	{r4, r5, r6, lr}
 800acd4:	b96a      	cbnz	r2, 800acf2 <strstr+0x22>
 800acd6:	bd70      	pop	{r4, r5, r6, pc}
 800acd8:	429a      	cmp	r2, r3
 800acda:	d109      	bne.n	800acf0 <strstr+0x20>
 800acdc:	460c      	mov	r4, r1
 800acde:	4605      	mov	r5, r0
 800ace0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0f6      	beq.n	800acd6 <strstr+0x6>
 800ace8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800acec:	429e      	cmp	r6, r3
 800acee:	d0f7      	beq.n	800ace0 <strstr+0x10>
 800acf0:	3001      	adds	r0, #1
 800acf2:	7803      	ldrb	r3, [r0, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1ef      	bne.n	800acd8 <strstr+0x8>
 800acf8:	4618      	mov	r0, r3
 800acfa:	e7ec      	b.n	800acd6 <strstr+0x6>

0800acfc <_localeconv_r>:
 800acfc:	4800      	ldr	r0, [pc, #0]	@ (800ad00 <_localeconv_r+0x4>)
 800acfe:	4770      	bx	lr
 800ad00:	20000110 	.word	0x20000110

0800ad04 <_close_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d06      	ldr	r5, [pc, #24]	@ (800ad20 <_close_r+0x1c>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	602b      	str	r3, [r5, #0]
 800ad10:	f7f8 fed4 	bl	8003abc <_close>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_close_r+0x1a>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_close_r+0x1a>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	20005a60 	.word	0x20005a60

0800ad24 <_lseek_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d07      	ldr	r5, [pc, #28]	@ (800ad44 <_lseek_r+0x20>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	2200      	movs	r2, #0
 800ad30:	602a      	str	r2, [r5, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f7f8 fee9 	bl	8003b0a <_lseek>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_lseek_r+0x1e>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_lseek_r+0x1e>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20005a60 	.word	0x20005a60

0800ad48 <_read_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	@ (800ad68 <_read_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7f8 fe77 	bl	8003a4a <_read>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_read_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_read_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20005a60 	.word	0x20005a60

0800ad6c <_sbrk_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d06      	ldr	r5, [pc, #24]	@ (800ad88 <_sbrk_r+0x1c>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	f7f8 fed4 	bl	8003b24 <_sbrk>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_sbrk_r+0x1a>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_sbrk_r+0x1a>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	20005a60 	.word	0x20005a60

0800ad8c <_write_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4d07      	ldr	r5, [pc, #28]	@ (800adac <_write_r+0x20>)
 800ad90:	4604      	mov	r4, r0
 800ad92:	4608      	mov	r0, r1
 800ad94:	4611      	mov	r1, r2
 800ad96:	2200      	movs	r2, #0
 800ad98:	602a      	str	r2, [r5, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f7f8 fe72 	bl	8003a84 <_write>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_write_r+0x1e>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_write_r+0x1e>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20005a60 	.word	0x20005a60

0800adb0 <__errno>:
 800adb0:	4b01      	ldr	r3, [pc, #4]	@ (800adb8 <__errno+0x8>)
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	2000018c 	.word	0x2000018c

0800adbc <__libc_init_array>:
 800adbc:	b570      	push	{r4, r5, r6, lr}
 800adbe:	4d0d      	ldr	r5, [pc, #52]	@ (800adf4 <__libc_init_array+0x38>)
 800adc0:	4c0d      	ldr	r4, [pc, #52]	@ (800adf8 <__libc_init_array+0x3c>)
 800adc2:	1b64      	subs	r4, r4, r5
 800adc4:	10a4      	asrs	r4, r4, #2
 800adc6:	2600      	movs	r6, #0
 800adc8:	42a6      	cmp	r6, r4
 800adca:	d109      	bne.n	800ade0 <__libc_init_array+0x24>
 800adcc:	4d0b      	ldr	r5, [pc, #44]	@ (800adfc <__libc_init_array+0x40>)
 800adce:	4c0c      	ldr	r4, [pc, #48]	@ (800ae00 <__libc_init_array+0x44>)
 800add0:	f003 f862 	bl	800de98 <_init>
 800add4:	1b64      	subs	r4, r4, r5
 800add6:	10a4      	asrs	r4, r4, #2
 800add8:	2600      	movs	r6, #0
 800adda:	42a6      	cmp	r6, r4
 800addc:	d105      	bne.n	800adea <__libc_init_array+0x2e>
 800adde:	bd70      	pop	{r4, r5, r6, pc}
 800ade0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade4:	4798      	blx	r3
 800ade6:	3601      	adds	r6, #1
 800ade8:	e7ee      	b.n	800adc8 <__libc_init_array+0xc>
 800adea:	f855 3b04 	ldr.w	r3, [r5], #4
 800adee:	4798      	blx	r3
 800adf0:	3601      	adds	r6, #1
 800adf2:	e7f2      	b.n	800adda <__libc_init_array+0x1e>
 800adf4:	0800e4d0 	.word	0x0800e4d0
 800adf8:	0800e4d0 	.word	0x0800e4d0
 800adfc:	0800e4d0 	.word	0x0800e4d0
 800ae00:	0800e4d4 	.word	0x0800e4d4

0800ae04 <__retarget_lock_init_recursive>:
 800ae04:	4770      	bx	lr

0800ae06 <__retarget_lock_acquire_recursive>:
 800ae06:	4770      	bx	lr

0800ae08 <__retarget_lock_release_recursive>:
 800ae08:	4770      	bx	lr

0800ae0a <memcpy>:
 800ae0a:	440a      	add	r2, r1
 800ae0c:	4291      	cmp	r1, r2
 800ae0e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae12:	d100      	bne.n	800ae16 <memcpy+0xc>
 800ae14:	4770      	bx	lr
 800ae16:	b510      	push	{r4, lr}
 800ae18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae20:	4291      	cmp	r1, r2
 800ae22:	d1f9      	bne.n	800ae18 <memcpy+0xe>
 800ae24:	bd10      	pop	{r4, pc}
	...

0800ae28 <nan>:
 800ae28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ae30 <nan+0x8>
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	00000000 	.word	0x00000000
 800ae34:	7ff80000 	.word	0x7ff80000

0800ae38 <nanf>:
 800ae38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ae40 <nanf+0x8>
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	7fc00000 	.word	0x7fc00000

0800ae44 <quorem>:
 800ae44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	6903      	ldr	r3, [r0, #16]
 800ae4a:	690c      	ldr	r4, [r1, #16]
 800ae4c:	42a3      	cmp	r3, r4
 800ae4e:	4607      	mov	r7, r0
 800ae50:	db7e      	blt.n	800af50 <quorem+0x10c>
 800ae52:	3c01      	subs	r4, #1
 800ae54:	f101 0814 	add.w	r8, r1, #20
 800ae58:	00a3      	lsls	r3, r4, #2
 800ae5a:	f100 0514 	add.w	r5, r0, #20
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	429a      	cmp	r2, r3
 800ae72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae76:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae7a:	d32e      	bcc.n	800aeda <quorem+0x96>
 800ae7c:	f04f 0a00 	mov.w	sl, #0
 800ae80:	46c4      	mov	ip, r8
 800ae82:	46ae      	mov	lr, r5
 800ae84:	46d3      	mov	fp, sl
 800ae86:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae8a:	b298      	uxth	r0, r3
 800ae8c:	fb06 a000 	mla	r0, r6, r0, sl
 800ae90:	0c02      	lsrs	r2, r0, #16
 800ae92:	0c1b      	lsrs	r3, r3, #16
 800ae94:	fb06 2303 	mla	r3, r6, r3, r2
 800ae98:	f8de 2000 	ldr.w	r2, [lr]
 800ae9c:	b280      	uxth	r0, r0
 800ae9e:	b292      	uxth	r2, r2
 800aea0:	1a12      	subs	r2, r2, r0
 800aea2:	445a      	add	r2, fp
 800aea4:	f8de 0000 	ldr.w	r0, [lr]
 800aea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aeb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aeb6:	b292      	uxth	r2, r2
 800aeb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aebc:	45e1      	cmp	r9, ip
 800aebe:	f84e 2b04 	str.w	r2, [lr], #4
 800aec2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aec6:	d2de      	bcs.n	800ae86 <quorem+0x42>
 800aec8:	9b00      	ldr	r3, [sp, #0]
 800aeca:	58eb      	ldr	r3, [r5, r3]
 800aecc:	b92b      	cbnz	r3, 800aeda <quorem+0x96>
 800aece:	9b01      	ldr	r3, [sp, #4]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	429d      	cmp	r5, r3
 800aed4:	461a      	mov	r2, r3
 800aed6:	d32f      	bcc.n	800af38 <quorem+0xf4>
 800aed8:	613c      	str	r4, [r7, #16]
 800aeda:	4638      	mov	r0, r7
 800aedc:	f001 fc5a 	bl	800c794 <__mcmp>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	db25      	blt.n	800af30 <quorem+0xec>
 800aee4:	4629      	mov	r1, r5
 800aee6:	2000      	movs	r0, #0
 800aee8:	f858 2b04 	ldr.w	r2, [r8], #4
 800aeec:	f8d1 c000 	ldr.w	ip, [r1]
 800aef0:	fa1f fe82 	uxth.w	lr, r2
 800aef4:	fa1f f38c 	uxth.w	r3, ip
 800aef8:	eba3 030e 	sub.w	r3, r3, lr
 800aefc:	4403      	add	r3, r0
 800aefe:	0c12      	lsrs	r2, r2, #16
 800af00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800af04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800af08:	b29b      	uxth	r3, r3
 800af0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af0e:	45c1      	cmp	r9, r8
 800af10:	f841 3b04 	str.w	r3, [r1], #4
 800af14:	ea4f 4022 	mov.w	r0, r2, asr #16
 800af18:	d2e6      	bcs.n	800aee8 <quorem+0xa4>
 800af1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af22:	b922      	cbnz	r2, 800af2e <quorem+0xea>
 800af24:	3b04      	subs	r3, #4
 800af26:	429d      	cmp	r5, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	d30b      	bcc.n	800af44 <quorem+0x100>
 800af2c:	613c      	str	r4, [r7, #16]
 800af2e:	3601      	adds	r6, #1
 800af30:	4630      	mov	r0, r6
 800af32:	b003      	add	sp, #12
 800af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	3b04      	subs	r3, #4
 800af3c:	2a00      	cmp	r2, #0
 800af3e:	d1cb      	bne.n	800aed8 <quorem+0x94>
 800af40:	3c01      	subs	r4, #1
 800af42:	e7c6      	b.n	800aed2 <quorem+0x8e>
 800af44:	6812      	ldr	r2, [r2, #0]
 800af46:	3b04      	subs	r3, #4
 800af48:	2a00      	cmp	r2, #0
 800af4a:	d1ef      	bne.n	800af2c <quorem+0xe8>
 800af4c:	3c01      	subs	r4, #1
 800af4e:	e7ea      	b.n	800af26 <quorem+0xe2>
 800af50:	2000      	movs	r0, #0
 800af52:	e7ee      	b.n	800af32 <quorem+0xee>
 800af54:	0000      	movs	r0, r0
	...

0800af58 <_dtoa_r>:
 800af58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	69c7      	ldr	r7, [r0, #28]
 800af5e:	b099      	sub	sp, #100	@ 0x64
 800af60:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af64:	ec55 4b10 	vmov	r4, r5, d0
 800af68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af6a:	9109      	str	r1, [sp, #36]	@ 0x24
 800af6c:	4683      	mov	fp, r0
 800af6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800af70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af72:	b97f      	cbnz	r7, 800af94 <_dtoa_r+0x3c>
 800af74:	2010      	movs	r0, #16
 800af76:	f7fd ff9d 	bl	8008eb4 <malloc>
 800af7a:	4602      	mov	r2, r0
 800af7c:	f8cb 001c 	str.w	r0, [fp, #28]
 800af80:	b920      	cbnz	r0, 800af8c <_dtoa_r+0x34>
 800af82:	4ba7      	ldr	r3, [pc, #668]	@ (800b220 <_dtoa_r+0x2c8>)
 800af84:	21ef      	movs	r1, #239	@ 0xef
 800af86:	48a7      	ldr	r0, [pc, #668]	@ (800b224 <_dtoa_r+0x2cc>)
 800af88:	f002 fc2e 	bl	800d7e8 <__assert_func>
 800af8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af90:	6007      	str	r7, [r0, #0]
 800af92:	60c7      	str	r7, [r0, #12]
 800af94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af98:	6819      	ldr	r1, [r3, #0]
 800af9a:	b159      	cbz	r1, 800afb4 <_dtoa_r+0x5c>
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	604a      	str	r2, [r1, #4]
 800afa0:	2301      	movs	r3, #1
 800afa2:	4093      	lsls	r3, r2
 800afa4:	608b      	str	r3, [r1, #8]
 800afa6:	4658      	mov	r0, fp
 800afa8:	f001 f970 	bl	800c28c <_Bfree>
 800afac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	1e2b      	subs	r3, r5, #0
 800afb6:	bfb9      	ittee	lt
 800afb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800afbc:	9303      	strlt	r3, [sp, #12]
 800afbe:	2300      	movge	r3, #0
 800afc0:	6033      	strge	r3, [r6, #0]
 800afc2:	9f03      	ldr	r7, [sp, #12]
 800afc4:	4b98      	ldr	r3, [pc, #608]	@ (800b228 <_dtoa_r+0x2d0>)
 800afc6:	bfbc      	itt	lt
 800afc8:	2201      	movlt	r2, #1
 800afca:	6032      	strlt	r2, [r6, #0]
 800afcc:	43bb      	bics	r3, r7
 800afce:	d112      	bne.n	800aff6 <_dtoa_r+0x9e>
 800afd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afdc:	4323      	orrs	r3, r4
 800afde:	f000 854d 	beq.w	800ba7c <_dtoa_r+0xb24>
 800afe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afe4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b23c <_dtoa_r+0x2e4>
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 854f 	beq.w	800ba8c <_dtoa_r+0xb34>
 800afee:	f10a 0303 	add.w	r3, sl, #3
 800aff2:	f000 bd49 	b.w	800ba88 <_dtoa_r+0xb30>
 800aff6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	ec51 0b17 	vmov	r0, r1, d7
 800b000:	2300      	movs	r3, #0
 800b002:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b006:	f7f5 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b00a:	4680      	mov	r8, r0
 800b00c:	b158      	cbz	r0, 800b026 <_dtoa_r+0xce>
 800b00e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b010:	2301      	movs	r3, #1
 800b012:	6013      	str	r3, [r2, #0]
 800b014:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b016:	b113      	cbz	r3, 800b01e <_dtoa_r+0xc6>
 800b018:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b01a:	4b84      	ldr	r3, [pc, #528]	@ (800b22c <_dtoa_r+0x2d4>)
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b240 <_dtoa_r+0x2e8>
 800b022:	f000 bd33 	b.w	800ba8c <_dtoa_r+0xb34>
 800b026:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b02a:	aa16      	add	r2, sp, #88	@ 0x58
 800b02c:	a917      	add	r1, sp, #92	@ 0x5c
 800b02e:	4658      	mov	r0, fp
 800b030:	f001 fcd0 	bl	800c9d4 <__d2b>
 800b034:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b038:	4681      	mov	r9, r0
 800b03a:	2e00      	cmp	r6, #0
 800b03c:	d077      	beq.n	800b12e <_dtoa_r+0x1d6>
 800b03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b040:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b04c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b050:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b054:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b058:	4619      	mov	r1, r3
 800b05a:	2200      	movs	r2, #0
 800b05c:	4b74      	ldr	r3, [pc, #464]	@ (800b230 <_dtoa_r+0x2d8>)
 800b05e:	f7f5 f913 	bl	8000288 <__aeabi_dsub>
 800b062:	a369      	add	r3, pc, #420	@ (adr r3, 800b208 <_dtoa_r+0x2b0>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 fac6 	bl	80005f8 <__aeabi_dmul>
 800b06c:	a368      	add	r3, pc, #416	@ (adr r3, 800b210 <_dtoa_r+0x2b8>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 f90b 	bl	800028c <__adddf3>
 800b076:	4604      	mov	r4, r0
 800b078:	4630      	mov	r0, r6
 800b07a:	460d      	mov	r5, r1
 800b07c:	f7f5 fa52 	bl	8000524 <__aeabi_i2d>
 800b080:	a365      	add	r3, pc, #404	@ (adr r3, 800b218 <_dtoa_r+0x2c0>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 f8fb 	bl	800028c <__adddf3>
 800b096:	4604      	mov	r4, r0
 800b098:	460d      	mov	r5, r1
 800b09a:	f7f5 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800b09e:	2200      	movs	r2, #0
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 fd18 	bl	8000adc <__aeabi_dcmplt>
 800b0ac:	b140      	cbz	r0, 800b0c0 <_dtoa_r+0x168>
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7f5 fa38 	bl	8000524 <__aeabi_i2d>
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	462b      	mov	r3, r5
 800b0b8:	f7f5 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0bc:	b900      	cbnz	r0, 800b0c0 <_dtoa_r+0x168>
 800b0be:	3f01      	subs	r7, #1
 800b0c0:	2f16      	cmp	r7, #22
 800b0c2:	d851      	bhi.n	800b168 <_dtoa_r+0x210>
 800b0c4:	4b5b      	ldr	r3, [pc, #364]	@ (800b234 <_dtoa_r+0x2dc>)
 800b0c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0d2:	f7f5 fd03 	bl	8000adc <__aeabi_dcmplt>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	d048      	beq.n	800b16c <_dtoa_r+0x214>
 800b0da:	3f01      	subs	r7, #1
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0e2:	1b9b      	subs	r3, r3, r6
 800b0e4:	1e5a      	subs	r2, r3, #1
 800b0e6:	bf44      	itt	mi
 800b0e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b0ec:	2300      	movmi	r3, #0
 800b0ee:	9208      	str	r2, [sp, #32]
 800b0f0:	bf54      	ite	pl
 800b0f2:	f04f 0800 	movpl.w	r8, #0
 800b0f6:	9308      	strmi	r3, [sp, #32]
 800b0f8:	2f00      	cmp	r7, #0
 800b0fa:	db39      	blt.n	800b170 <_dtoa_r+0x218>
 800b0fc:	9b08      	ldr	r3, [sp, #32]
 800b0fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b100:	443b      	add	r3, r7
 800b102:	9308      	str	r3, [sp, #32]
 800b104:	2300      	movs	r3, #0
 800b106:	930a      	str	r3, [sp, #40]	@ 0x28
 800b108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10a:	2b09      	cmp	r3, #9
 800b10c:	d864      	bhi.n	800b1d8 <_dtoa_r+0x280>
 800b10e:	2b05      	cmp	r3, #5
 800b110:	bfc4      	itt	gt
 800b112:	3b04      	subgt	r3, #4
 800b114:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	f1a3 0302 	sub.w	r3, r3, #2
 800b11c:	bfcc      	ite	gt
 800b11e:	2400      	movgt	r4, #0
 800b120:	2401      	movle	r4, #1
 800b122:	2b03      	cmp	r3, #3
 800b124:	d863      	bhi.n	800b1ee <_dtoa_r+0x296>
 800b126:	e8df f003 	tbb	[pc, r3]
 800b12a:	372a      	.short	0x372a
 800b12c:	5535      	.short	0x5535
 800b12e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b132:	441e      	add	r6, r3
 800b134:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b138:	2b20      	cmp	r3, #32
 800b13a:	bfc1      	itttt	gt
 800b13c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b140:	409f      	lslgt	r7, r3
 800b142:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b146:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b14a:	bfd6      	itet	le
 800b14c:	f1c3 0320 	rsble	r3, r3, #32
 800b150:	ea47 0003 	orrgt.w	r0, r7, r3
 800b154:	fa04 f003 	lslle.w	r0, r4, r3
 800b158:	f7f5 f9d4 	bl	8000504 <__aeabi_ui2d>
 800b15c:	2201      	movs	r2, #1
 800b15e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b162:	3e01      	subs	r6, #1
 800b164:	9214      	str	r2, [sp, #80]	@ 0x50
 800b166:	e777      	b.n	800b058 <_dtoa_r+0x100>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7b8      	b.n	800b0de <_dtoa_r+0x186>
 800b16c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b16e:	e7b7      	b.n	800b0e0 <_dtoa_r+0x188>
 800b170:	427b      	negs	r3, r7
 800b172:	930a      	str	r3, [sp, #40]	@ 0x28
 800b174:	2300      	movs	r3, #0
 800b176:	eba8 0807 	sub.w	r8, r8, r7
 800b17a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b17c:	e7c4      	b.n	800b108 <_dtoa_r+0x1b0>
 800b17e:	2300      	movs	r3, #0
 800b180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc35      	bgt.n	800b1f4 <_dtoa_r+0x29c>
 800b188:	2301      	movs	r3, #1
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	9307      	str	r3, [sp, #28]
 800b18e:	461a      	mov	r2, r3
 800b190:	920e      	str	r2, [sp, #56]	@ 0x38
 800b192:	e00b      	b.n	800b1ac <_dtoa_r+0x254>
 800b194:	2301      	movs	r3, #1
 800b196:	e7f3      	b.n	800b180 <_dtoa_r+0x228>
 800b198:	2300      	movs	r3, #0
 800b19a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b19c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	9307      	str	r3, [sp, #28]
 800b1a8:	bfb8      	it	lt
 800b1aa:	2301      	movlt	r3, #1
 800b1ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	f102 0514 	add.w	r5, r2, #20
 800b1b8:	429d      	cmp	r5, r3
 800b1ba:	d91f      	bls.n	800b1fc <_dtoa_r+0x2a4>
 800b1bc:	6041      	str	r1, [r0, #4]
 800b1be:	4658      	mov	r0, fp
 800b1c0:	f001 f824 	bl	800c20c <_Balloc>
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d13c      	bne.n	800b244 <_dtoa_r+0x2ec>
 800b1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b238 <_dtoa_r+0x2e0>)
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1d2:	e6d8      	b.n	800af86 <_dtoa_r+0x2e>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e7e0      	b.n	800b19a <_dtoa_r+0x242>
 800b1d8:	2401      	movs	r4, #1
 800b1da:	2300      	movs	r3, #0
 800b1dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	2312      	movs	r3, #18
 800b1ec:	e7d0      	b.n	800b190 <_dtoa_r+0x238>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f2:	e7f5      	b.n	800b1e0 <_dtoa_r+0x288>
 800b1f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	9307      	str	r3, [sp, #28]
 800b1fa:	e7d7      	b.n	800b1ac <_dtoa_r+0x254>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	0052      	lsls	r2, r2, #1
 800b200:	e7d8      	b.n	800b1b4 <_dtoa_r+0x25c>
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	636f4361 	.word	0x636f4361
 800b20c:	3fd287a7 	.word	0x3fd287a7
 800b210:	8b60c8b3 	.word	0x8b60c8b3
 800b214:	3fc68a28 	.word	0x3fc68a28
 800b218:	509f79fb 	.word	0x509f79fb
 800b21c:	3fd34413 	.word	0x3fd34413
 800b220:	0800e225 	.word	0x0800e225
 800b224:	0800e23c 	.word	0x0800e23c
 800b228:	7ff00000 	.word	0x7ff00000
 800b22c:	0800e488 	.word	0x0800e488
 800b230:	3ff80000 	.word	0x3ff80000
 800b234:	0800e398 	.word	0x0800e398
 800b238:	0800e294 	.word	0x0800e294
 800b23c:	0800e221 	.word	0x0800e221
 800b240:	0800e487 	.word	0x0800e487
 800b244:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b248:	6018      	str	r0, [r3, #0]
 800b24a:	9b07      	ldr	r3, [sp, #28]
 800b24c:	2b0e      	cmp	r3, #14
 800b24e:	f200 80a4 	bhi.w	800b39a <_dtoa_r+0x442>
 800b252:	2c00      	cmp	r4, #0
 800b254:	f000 80a1 	beq.w	800b39a <_dtoa_r+0x442>
 800b258:	2f00      	cmp	r7, #0
 800b25a:	dd33      	ble.n	800b2c4 <_dtoa_r+0x36c>
 800b25c:	4bad      	ldr	r3, [pc, #692]	@ (800b514 <_dtoa_r+0x5bc>)
 800b25e:	f007 020f 	and.w	r2, r7, #15
 800b262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b266:	ed93 7b00 	vldr	d7, [r3]
 800b26a:	05f8      	lsls	r0, r7, #23
 800b26c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b270:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b274:	d516      	bpl.n	800b2a4 <_dtoa_r+0x34c>
 800b276:	4ba8      	ldr	r3, [pc, #672]	@ (800b518 <_dtoa_r+0x5c0>)
 800b278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b27c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b280:	f7f5 fae4 	bl	800084c <__aeabi_ddiv>
 800b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b288:	f004 040f 	and.w	r4, r4, #15
 800b28c:	2603      	movs	r6, #3
 800b28e:	4da2      	ldr	r5, [pc, #648]	@ (800b518 <_dtoa_r+0x5c0>)
 800b290:	b954      	cbnz	r4, 800b2a8 <_dtoa_r+0x350>
 800b292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	f7f5 fad7 	bl	800084c <__aeabi_ddiv>
 800b29e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a2:	e028      	b.n	800b2f6 <_dtoa_r+0x39e>
 800b2a4:	2602      	movs	r6, #2
 800b2a6:	e7f2      	b.n	800b28e <_dtoa_r+0x336>
 800b2a8:	07e1      	lsls	r1, r4, #31
 800b2aa:	d508      	bpl.n	800b2be <_dtoa_r+0x366>
 800b2ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2bc:	3601      	adds	r6, #1
 800b2be:	1064      	asrs	r4, r4, #1
 800b2c0:	3508      	adds	r5, #8
 800b2c2:	e7e5      	b.n	800b290 <_dtoa_r+0x338>
 800b2c4:	f000 80d2 	beq.w	800b46c <_dtoa_r+0x514>
 800b2c8:	427c      	negs	r4, r7
 800b2ca:	4b92      	ldr	r3, [pc, #584]	@ (800b514 <_dtoa_r+0x5bc>)
 800b2cc:	4d92      	ldr	r5, [pc, #584]	@ (800b518 <_dtoa_r+0x5c0>)
 800b2ce:	f004 020f 	and.w	r2, r4, #15
 800b2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2de:	f7f5 f98b 	bl	80005f8 <__aeabi_dmul>
 800b2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e6:	1124      	asrs	r4, r4, #4
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	2602      	movs	r6, #2
 800b2ec:	2c00      	cmp	r4, #0
 800b2ee:	f040 80b2 	bne.w	800b456 <_dtoa_r+0x4fe>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1d3      	bne.n	800b29e <_dtoa_r+0x346>
 800b2f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80b7 	beq.w	800b470 <_dtoa_r+0x518>
 800b302:	4b86      	ldr	r3, [pc, #536]	@ (800b51c <_dtoa_r+0x5c4>)
 800b304:	2200      	movs	r2, #0
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f5 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f000 80ae 	beq.w	800b470 <_dtoa_r+0x518>
 800b314:	9b07      	ldr	r3, [sp, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	f000 80aa 	beq.w	800b470 <_dtoa_r+0x518>
 800b31c:	9b00      	ldr	r3, [sp, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd37      	ble.n	800b392 <_dtoa_r+0x43a>
 800b322:	1e7b      	subs	r3, r7, #1
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	4620      	mov	r0, r4
 800b328:	4b7d      	ldr	r3, [pc, #500]	@ (800b520 <_dtoa_r+0x5c8>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7f5 f963 	bl	80005f8 <__aeabi_dmul>
 800b332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b336:	9c00      	ldr	r4, [sp, #0]
 800b338:	3601      	adds	r6, #1
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7f5 f8f2 	bl	8000524 <__aeabi_i2d>
 800b340:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b344:	f7f5 f958 	bl	80005f8 <__aeabi_dmul>
 800b348:	4b76      	ldr	r3, [pc, #472]	@ (800b524 <_dtoa_r+0x5cc>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	f7f4 ff9e 	bl	800028c <__adddf3>
 800b350:	4605      	mov	r5, r0
 800b352:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b356:	2c00      	cmp	r4, #0
 800b358:	f040 808d 	bne.w	800b476 <_dtoa_r+0x51e>
 800b35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b360:	4b71      	ldr	r3, [pc, #452]	@ (800b528 <_dtoa_r+0x5d0>)
 800b362:	2200      	movs	r2, #0
 800b364:	f7f4 ff90 	bl	8000288 <__aeabi_dsub>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b370:	462a      	mov	r2, r5
 800b372:	4633      	mov	r3, r6
 800b374:	f7f5 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 800b378:	2800      	cmp	r0, #0
 800b37a:	f040 828b 	bne.w	800b894 <_dtoa_r+0x93c>
 800b37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b382:	462a      	mov	r2, r5
 800b384:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b388:	f7f5 fba8 	bl	8000adc <__aeabi_dcmplt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f040 8128 	bne.w	800b5e2 <_dtoa_r+0x68a>
 800b392:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b396:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f2c0 815a 	blt.w	800b656 <_dtoa_r+0x6fe>
 800b3a2:	2f0e      	cmp	r7, #14
 800b3a4:	f300 8157 	bgt.w	800b656 <_dtoa_r+0x6fe>
 800b3a8:	4b5a      	ldr	r3, [pc, #360]	@ (800b514 <_dtoa_r+0x5bc>)
 800b3aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3ae:	ed93 7b00 	vldr	d7, [r3]
 800b3b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	ed8d 7b00 	vstr	d7, [sp]
 800b3ba:	da03      	bge.n	800b3c4 <_dtoa_r+0x46c>
 800b3bc:	9b07      	ldr	r3, [sp, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f340 8101 	ble.w	800b5c6 <_dtoa_r+0x66e>
 800b3c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3c8:	4656      	mov	r6, sl
 800b3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fa3b 	bl	800084c <__aeabi_ddiv>
 800b3d6:	f7f5 fbbf 	bl	8000b58 <__aeabi_d2iz>
 800b3da:	4680      	mov	r8, r0
 800b3dc:	f7f5 f8a2 	bl	8000524 <__aeabi_i2d>
 800b3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e4:	f7f5 f908 	bl	80005f8 <__aeabi_dmul>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3f4:	f7f4 ff48 	bl	8000288 <__aeabi_dsub>
 800b3f8:	f806 4b01 	strb.w	r4, [r6], #1
 800b3fc:	9d07      	ldr	r5, [sp, #28]
 800b3fe:	eba6 040a 	sub.w	r4, r6, sl
 800b402:	42a5      	cmp	r5, r4
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	f040 8117 	bne.w	800b63a <_dtoa_r+0x6e2>
 800b40c:	f7f4 ff3e 	bl	800028c <__adddf3>
 800b410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	f7f5 fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f040 80f9 	bne.w	800b614 <_dtoa_r+0x6bc>
 800b422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b426:	4620      	mov	r0, r4
 800b428:	4629      	mov	r1, r5
 800b42a:	f7f5 fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b42e:	b118      	cbz	r0, 800b438 <_dtoa_r+0x4e0>
 800b430:	f018 0f01 	tst.w	r8, #1
 800b434:	f040 80ee 	bne.w	800b614 <_dtoa_r+0x6bc>
 800b438:	4649      	mov	r1, r9
 800b43a:	4658      	mov	r0, fp
 800b43c:	f000 ff26 	bl	800c28c <_Bfree>
 800b440:	2300      	movs	r3, #0
 800b442:	7033      	strb	r3, [r6, #0]
 800b444:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b446:	3701      	adds	r7, #1
 800b448:	601f      	str	r7, [r3, #0]
 800b44a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 831d 	beq.w	800ba8c <_dtoa_r+0xb34>
 800b452:	601e      	str	r6, [r3, #0]
 800b454:	e31a      	b.n	800ba8c <_dtoa_r+0xb34>
 800b456:	07e2      	lsls	r2, r4, #31
 800b458:	d505      	bpl.n	800b466 <_dtoa_r+0x50e>
 800b45a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b45e:	f7f5 f8cb 	bl	80005f8 <__aeabi_dmul>
 800b462:	3601      	adds	r6, #1
 800b464:	2301      	movs	r3, #1
 800b466:	1064      	asrs	r4, r4, #1
 800b468:	3508      	adds	r5, #8
 800b46a:	e73f      	b.n	800b2ec <_dtoa_r+0x394>
 800b46c:	2602      	movs	r6, #2
 800b46e:	e742      	b.n	800b2f6 <_dtoa_r+0x39e>
 800b470:	9c07      	ldr	r4, [sp, #28]
 800b472:	9704      	str	r7, [sp, #16]
 800b474:	e761      	b.n	800b33a <_dtoa_r+0x3e2>
 800b476:	4b27      	ldr	r3, [pc, #156]	@ (800b514 <_dtoa_r+0x5bc>)
 800b478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b47a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b47e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b482:	4454      	add	r4, sl
 800b484:	2900      	cmp	r1, #0
 800b486:	d053      	beq.n	800b530 <_dtoa_r+0x5d8>
 800b488:	4928      	ldr	r1, [pc, #160]	@ (800b52c <_dtoa_r+0x5d4>)
 800b48a:	2000      	movs	r0, #0
 800b48c:	f7f5 f9de 	bl	800084c <__aeabi_ddiv>
 800b490:	4633      	mov	r3, r6
 800b492:	462a      	mov	r2, r5
 800b494:	f7f4 fef8 	bl	8000288 <__aeabi_dsub>
 800b498:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b49c:	4656      	mov	r6, sl
 800b49e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4a2:	f7f5 fb59 	bl	8000b58 <__aeabi_d2iz>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	f7f5 f83c 	bl	8000524 <__aeabi_i2d>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	f7f4 fee8 	bl	8000288 <__aeabi_dsub>
 800b4b8:	3530      	adds	r5, #48	@ 0x30
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4c2:	f806 5b01 	strb.w	r5, [r6], #1
 800b4c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4ca:	f7f5 fb07 	bl	8000adc <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d171      	bne.n	800b5b6 <_dtoa_r+0x65e>
 800b4d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4d6:	4911      	ldr	r1, [pc, #68]	@ (800b51c <_dtoa_r+0x5c4>)
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f7f4 fed5 	bl	8000288 <__aeabi_dsub>
 800b4de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4e2:	f7f5 fafb 	bl	8000adc <__aeabi_dcmplt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f040 8095 	bne.w	800b616 <_dtoa_r+0x6be>
 800b4ec:	42a6      	cmp	r6, r4
 800b4ee:	f43f af50 	beq.w	800b392 <_dtoa_r+0x43a>
 800b4f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b520 <_dtoa_r+0x5c8>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f7f5 f87d 	bl	80005f8 <__aeabi_dmul>
 800b4fe:	4b08      	ldr	r3, [pc, #32]	@ (800b520 <_dtoa_r+0x5c8>)
 800b500:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b504:	2200      	movs	r2, #0
 800b506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b50a:	f7f5 f875 	bl	80005f8 <__aeabi_dmul>
 800b50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b512:	e7c4      	b.n	800b49e <_dtoa_r+0x546>
 800b514:	0800e398 	.word	0x0800e398
 800b518:	0800e370 	.word	0x0800e370
 800b51c:	3ff00000 	.word	0x3ff00000
 800b520:	40240000 	.word	0x40240000
 800b524:	401c0000 	.word	0x401c0000
 800b528:	40140000 	.word	0x40140000
 800b52c:	3fe00000 	.word	0x3fe00000
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b53c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b53e:	4656      	mov	r6, sl
 800b540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b544:	f7f5 fb08 	bl	8000b58 <__aeabi_d2iz>
 800b548:	4605      	mov	r5, r0
 800b54a:	f7f4 ffeb 	bl	8000524 <__aeabi_i2d>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b556:	f7f4 fe97 	bl	8000288 <__aeabi_dsub>
 800b55a:	3530      	adds	r5, #48	@ 0x30
 800b55c:	f806 5b01 	strb.w	r5, [r6], #1
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	42a6      	cmp	r6, r4
 800b566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	d124      	bne.n	800b5ba <_dtoa_r+0x662>
 800b570:	4bac      	ldr	r3, [pc, #688]	@ (800b824 <_dtoa_r+0x8cc>)
 800b572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b576:	f7f4 fe89 	bl	800028c <__adddf3>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b582:	f7f5 fac9 	bl	8000b18 <__aeabi_dcmpgt>
 800b586:	2800      	cmp	r0, #0
 800b588:	d145      	bne.n	800b616 <_dtoa_r+0x6be>
 800b58a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b58e:	49a5      	ldr	r1, [pc, #660]	@ (800b824 <_dtoa_r+0x8cc>)
 800b590:	2000      	movs	r0, #0
 800b592:	f7f4 fe79 	bl	8000288 <__aeabi_dsub>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b59e:	f7f5 fa9d 	bl	8000adc <__aeabi_dcmplt>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	f43f aef5 	beq.w	800b392 <_dtoa_r+0x43a>
 800b5a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b5aa:	1e73      	subs	r3, r6, #1
 800b5ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5b2:	2b30      	cmp	r3, #48	@ 0x30
 800b5b4:	d0f8      	beq.n	800b5a8 <_dtoa_r+0x650>
 800b5b6:	9f04      	ldr	r7, [sp, #16]
 800b5b8:	e73e      	b.n	800b438 <_dtoa_r+0x4e0>
 800b5ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b828 <_dtoa_r+0x8d0>)
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5c4:	e7bc      	b.n	800b540 <_dtoa_r+0x5e8>
 800b5c6:	d10c      	bne.n	800b5e2 <_dtoa_r+0x68a>
 800b5c8:	4b98      	ldr	r3, [pc, #608]	@ (800b82c <_dtoa_r+0x8d4>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5d0:	f7f5 f812 	bl	80005f8 <__aeabi_dmul>
 800b5d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5d8:	f7f5 fa94 	bl	8000b04 <__aeabi_dcmpge>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	f000 8157 	beq.w	800b890 <_dtoa_r+0x938>
 800b5e2:	2400      	movs	r4, #0
 800b5e4:	4625      	mov	r5, r4
 800b5e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	4656      	mov	r6, sl
 800b5ee:	2700      	movs	r7, #0
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4658      	mov	r0, fp
 800b5f4:	f000 fe4a 	bl	800c28c <_Bfree>
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	d0dc      	beq.n	800b5b6 <_dtoa_r+0x65e>
 800b5fc:	b12f      	cbz	r7, 800b60a <_dtoa_r+0x6b2>
 800b5fe:	42af      	cmp	r7, r5
 800b600:	d003      	beq.n	800b60a <_dtoa_r+0x6b2>
 800b602:	4639      	mov	r1, r7
 800b604:	4658      	mov	r0, fp
 800b606:	f000 fe41 	bl	800c28c <_Bfree>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4658      	mov	r0, fp
 800b60e:	f000 fe3d 	bl	800c28c <_Bfree>
 800b612:	e7d0      	b.n	800b5b6 <_dtoa_r+0x65e>
 800b614:	9704      	str	r7, [sp, #16]
 800b616:	4633      	mov	r3, r6
 800b618:	461e      	mov	r6, r3
 800b61a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b61e:	2a39      	cmp	r2, #57	@ 0x39
 800b620:	d107      	bne.n	800b632 <_dtoa_r+0x6da>
 800b622:	459a      	cmp	sl, r3
 800b624:	d1f8      	bne.n	800b618 <_dtoa_r+0x6c0>
 800b626:	9a04      	ldr	r2, [sp, #16]
 800b628:	3201      	adds	r2, #1
 800b62a:	9204      	str	r2, [sp, #16]
 800b62c:	2230      	movs	r2, #48	@ 0x30
 800b62e:	f88a 2000 	strb.w	r2, [sl]
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	3201      	adds	r2, #1
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	e7bd      	b.n	800b5b6 <_dtoa_r+0x65e>
 800b63a:	4b7b      	ldr	r3, [pc, #492]	@ (800b828 <_dtoa_r+0x8d0>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	2200      	movs	r2, #0
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	f7f5 fa3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b64e:	2800      	cmp	r0, #0
 800b650:	f43f aebb 	beq.w	800b3ca <_dtoa_r+0x472>
 800b654:	e6f0      	b.n	800b438 <_dtoa_r+0x4e0>
 800b656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b658:	2a00      	cmp	r2, #0
 800b65a:	f000 80db 	beq.w	800b814 <_dtoa_r+0x8bc>
 800b65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b660:	2a01      	cmp	r2, #1
 800b662:	f300 80bf 	bgt.w	800b7e4 <_dtoa_r+0x88c>
 800b666:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b668:	2a00      	cmp	r2, #0
 800b66a:	f000 80b7 	beq.w	800b7dc <_dtoa_r+0x884>
 800b66e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b672:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b674:	4646      	mov	r6, r8
 800b676:	9a08      	ldr	r2, [sp, #32]
 800b678:	2101      	movs	r1, #1
 800b67a:	441a      	add	r2, r3
 800b67c:	4658      	mov	r0, fp
 800b67e:	4498      	add	r8, r3
 800b680:	9208      	str	r2, [sp, #32]
 800b682:	f000 ff01 	bl	800c488 <__i2b>
 800b686:	4605      	mov	r5, r0
 800b688:	b15e      	cbz	r6, 800b6a2 <_dtoa_r+0x74a>
 800b68a:	9b08      	ldr	r3, [sp, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	dd08      	ble.n	800b6a2 <_dtoa_r+0x74a>
 800b690:	42b3      	cmp	r3, r6
 800b692:	9a08      	ldr	r2, [sp, #32]
 800b694:	bfa8      	it	ge
 800b696:	4633      	movge	r3, r6
 800b698:	eba8 0803 	sub.w	r8, r8, r3
 800b69c:	1af6      	subs	r6, r6, r3
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	9308      	str	r3, [sp, #32]
 800b6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a4:	b1f3      	cbz	r3, 800b6e4 <_dtoa_r+0x78c>
 800b6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 80b7 	beq.w	800b81c <_dtoa_r+0x8c4>
 800b6ae:	b18c      	cbz	r4, 800b6d4 <_dtoa_r+0x77c>
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 ffa7 	bl	800c608 <__pow5mult>
 800b6ba:	464a      	mov	r2, r9
 800b6bc:	4601      	mov	r1, r0
 800b6be:	4605      	mov	r5, r0
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	f000 fef7 	bl	800c4b4 <__multiply>
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	9004      	str	r0, [sp, #16]
 800b6ca:	4658      	mov	r0, fp
 800b6cc:	f000 fdde 	bl	800c28c <_Bfree>
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	4699      	mov	r9, r3
 800b6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6d6:	1b1a      	subs	r2, r3, r4
 800b6d8:	d004      	beq.n	800b6e4 <_dtoa_r+0x78c>
 800b6da:	4649      	mov	r1, r9
 800b6dc:	4658      	mov	r0, fp
 800b6de:	f000 ff93 	bl	800c608 <__pow5mult>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	4658      	mov	r0, fp
 800b6e8:	f000 fece 	bl	800c488 <__i2b>
 800b6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 81cf 	beq.w	800ba94 <_dtoa_r+0xb3c>
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	4658      	mov	r0, fp
 800b6fc:	f000 ff84 	bl	800c608 <__pow5mult>
 800b700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b702:	2b01      	cmp	r3, #1
 800b704:	4604      	mov	r4, r0
 800b706:	f300 8095 	bgt.w	800b834 <_dtoa_r+0x8dc>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f040 8087 	bne.w	800b820 <_dtoa_r+0x8c8>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f040 8089 	bne.w	800b830 <_dtoa_r+0x8d8>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b724:	0d1b      	lsrs	r3, r3, #20
 800b726:	051b      	lsls	r3, r3, #20
 800b728:	b12b      	cbz	r3, 800b736 <_dtoa_r+0x7de>
 800b72a:	9b08      	ldr	r3, [sp, #32]
 800b72c:	3301      	adds	r3, #1
 800b72e:	9308      	str	r3, [sp, #32]
 800b730:	f108 0801 	add.w	r8, r8, #1
 800b734:	2301      	movs	r3, #1
 800b736:	930a      	str	r3, [sp, #40]	@ 0x28
 800b738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 81b0 	beq.w	800baa0 <_dtoa_r+0xb48>
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b746:	6918      	ldr	r0, [r3, #16]
 800b748:	f000 fe52 	bl	800c3f0 <__hi0bits>
 800b74c:	f1c0 0020 	rsb	r0, r0, #32
 800b750:	9b08      	ldr	r3, [sp, #32]
 800b752:	4418      	add	r0, r3
 800b754:	f010 001f 	ands.w	r0, r0, #31
 800b758:	d077      	beq.n	800b84a <_dtoa_r+0x8f2>
 800b75a:	f1c0 0320 	rsb	r3, r0, #32
 800b75e:	2b04      	cmp	r3, #4
 800b760:	dd6b      	ble.n	800b83a <_dtoa_r+0x8e2>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	f1c0 001c 	rsb	r0, r0, #28
 800b768:	4403      	add	r3, r0
 800b76a:	4480      	add	r8, r0
 800b76c:	4406      	add	r6, r0
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	dd05      	ble.n	800b782 <_dtoa_r+0x82a>
 800b776:	4649      	mov	r1, r9
 800b778:	4642      	mov	r2, r8
 800b77a:	4658      	mov	r0, fp
 800b77c:	f000 ff9e 	bl	800c6bc <__lshift>
 800b780:	4681      	mov	r9, r0
 800b782:	9b08      	ldr	r3, [sp, #32]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd05      	ble.n	800b794 <_dtoa_r+0x83c>
 800b788:	4621      	mov	r1, r4
 800b78a:	461a      	mov	r2, r3
 800b78c:	4658      	mov	r0, fp
 800b78e:	f000 ff95 	bl	800c6bc <__lshift>
 800b792:	4604      	mov	r4, r0
 800b794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b796:	2b00      	cmp	r3, #0
 800b798:	d059      	beq.n	800b84e <_dtoa_r+0x8f6>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4648      	mov	r0, r9
 800b79e:	f000 fff9 	bl	800c794 <__mcmp>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	da53      	bge.n	800b84e <_dtoa_r+0x8f6>
 800b7a6:	1e7b      	subs	r3, r7, #1
 800b7a8:	9304      	str	r3, [sp, #16]
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	220a      	movs	r2, #10
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	f000 fd8d 	bl	800c2d0 <__multadd>
 800b7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7b8:	4681      	mov	r9, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f000 8172 	beq.w	800baa4 <_dtoa_r+0xb4c>
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	220a      	movs	r2, #10
 800b7c6:	4658      	mov	r0, fp
 800b7c8:	f000 fd82 	bl	800c2d0 <__multadd>
 800b7cc:	9b00      	ldr	r3, [sp, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	dc67      	bgt.n	800b8a4 <_dtoa_r+0x94c>
 800b7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	dc41      	bgt.n	800b85e <_dtoa_r+0x906>
 800b7da:	e063      	b.n	800b8a4 <_dtoa_r+0x94c>
 800b7dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7e2:	e746      	b.n	800b672 <_dtoa_r+0x71a>
 800b7e4:	9b07      	ldr	r3, [sp, #28]
 800b7e6:	1e5c      	subs	r4, r3, #1
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	bfbf      	itttt	lt
 800b7ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b7f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b7f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b7f4:	1ae3      	sublt	r3, r4, r3
 800b7f6:	bfb4      	ite	lt
 800b7f8:	18d2      	addlt	r2, r2, r3
 800b7fa:	1b1c      	subge	r4, r3, r4
 800b7fc:	9b07      	ldr	r3, [sp, #28]
 800b7fe:	bfbc      	itt	lt
 800b800:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b802:	2400      	movlt	r4, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	bfb5      	itete	lt
 800b808:	eba8 0603 	sublt.w	r6, r8, r3
 800b80c:	9b07      	ldrge	r3, [sp, #28]
 800b80e:	2300      	movlt	r3, #0
 800b810:	4646      	movge	r6, r8
 800b812:	e730      	b.n	800b676 <_dtoa_r+0x71e>
 800b814:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b816:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b818:	4646      	mov	r6, r8
 800b81a:	e735      	b.n	800b688 <_dtoa_r+0x730>
 800b81c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b81e:	e75c      	b.n	800b6da <_dtoa_r+0x782>
 800b820:	2300      	movs	r3, #0
 800b822:	e788      	b.n	800b736 <_dtoa_r+0x7de>
 800b824:	3fe00000 	.word	0x3fe00000
 800b828:	40240000 	.word	0x40240000
 800b82c:	40140000 	.word	0x40140000
 800b830:	9b02      	ldr	r3, [sp, #8]
 800b832:	e780      	b.n	800b736 <_dtoa_r+0x7de>
 800b834:	2300      	movs	r3, #0
 800b836:	930a      	str	r3, [sp, #40]	@ 0x28
 800b838:	e782      	b.n	800b740 <_dtoa_r+0x7e8>
 800b83a:	d099      	beq.n	800b770 <_dtoa_r+0x818>
 800b83c:	9a08      	ldr	r2, [sp, #32]
 800b83e:	331c      	adds	r3, #28
 800b840:	441a      	add	r2, r3
 800b842:	4498      	add	r8, r3
 800b844:	441e      	add	r6, r3
 800b846:	9208      	str	r2, [sp, #32]
 800b848:	e792      	b.n	800b770 <_dtoa_r+0x818>
 800b84a:	4603      	mov	r3, r0
 800b84c:	e7f6      	b.n	800b83c <_dtoa_r+0x8e4>
 800b84e:	9b07      	ldr	r3, [sp, #28]
 800b850:	9704      	str	r7, [sp, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	dc20      	bgt.n	800b898 <_dtoa_r+0x940>
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	dd1e      	ble.n	800b89c <_dtoa_r+0x944>
 800b85e:	9b00      	ldr	r3, [sp, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f47f aec0 	bne.w	800b5e6 <_dtoa_r+0x68e>
 800b866:	4621      	mov	r1, r4
 800b868:	2205      	movs	r2, #5
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fd30 	bl	800c2d0 <__multadd>
 800b870:	4601      	mov	r1, r0
 800b872:	4604      	mov	r4, r0
 800b874:	4648      	mov	r0, r9
 800b876:	f000 ff8d 	bl	800c794 <__mcmp>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f77f aeb3 	ble.w	800b5e6 <_dtoa_r+0x68e>
 800b880:	4656      	mov	r6, sl
 800b882:	2331      	movs	r3, #49	@ 0x31
 800b884:	f806 3b01 	strb.w	r3, [r6], #1
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	3301      	adds	r3, #1
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	e6ae      	b.n	800b5ee <_dtoa_r+0x696>
 800b890:	9c07      	ldr	r4, [sp, #28]
 800b892:	9704      	str	r7, [sp, #16]
 800b894:	4625      	mov	r5, r4
 800b896:	e7f3      	b.n	800b880 <_dtoa_r+0x928>
 800b898:	9b07      	ldr	r3, [sp, #28]
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 8104 	beq.w	800baac <_dtoa_r+0xb54>
 800b8a4:	2e00      	cmp	r6, #0
 800b8a6:	dd05      	ble.n	800b8b4 <_dtoa_r+0x95c>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	4658      	mov	r0, fp
 800b8ae:	f000 ff05 	bl	800c6bc <__lshift>
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d05a      	beq.n	800b970 <_dtoa_r+0xa18>
 800b8ba:	6869      	ldr	r1, [r5, #4]
 800b8bc:	4658      	mov	r0, fp
 800b8be:	f000 fca5 	bl	800c20c <_Balloc>
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	b928      	cbnz	r0, 800b8d2 <_dtoa_r+0x97a>
 800b8c6:	4b84      	ldr	r3, [pc, #528]	@ (800bad8 <_dtoa_r+0xb80>)
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8ce:	f7ff bb5a 	b.w	800af86 <_dtoa_r+0x2e>
 800b8d2:	692a      	ldr	r2, [r5, #16]
 800b8d4:	3202      	adds	r2, #2
 800b8d6:	0092      	lsls	r2, r2, #2
 800b8d8:	f105 010c 	add.w	r1, r5, #12
 800b8dc:	300c      	adds	r0, #12
 800b8de:	f7ff fa94 	bl	800ae0a <memcpy>
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f000 fee8 	bl	800c6bc <__lshift>
 800b8ec:	f10a 0301 	add.w	r3, sl, #1
 800b8f0:	9307      	str	r3, [sp, #28]
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	4453      	add	r3, sl
 800b8f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f8:	9b02      	ldr	r3, [sp, #8]
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	462f      	mov	r7, r5
 800b900:	930a      	str	r3, [sp, #40]	@ 0x28
 800b902:	4605      	mov	r5, r0
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	4621      	mov	r1, r4
 800b908:	3b01      	subs	r3, #1
 800b90a:	4648      	mov	r0, r9
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f7ff fa99 	bl	800ae44 <quorem>
 800b912:	4639      	mov	r1, r7
 800b914:	9002      	str	r0, [sp, #8]
 800b916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b91a:	4648      	mov	r0, r9
 800b91c:	f000 ff3a 	bl	800c794 <__mcmp>
 800b920:	462a      	mov	r2, r5
 800b922:	9008      	str	r0, [sp, #32]
 800b924:	4621      	mov	r1, r4
 800b926:	4658      	mov	r0, fp
 800b928:	f000 ff50 	bl	800c7cc <__mdiff>
 800b92c:	68c2      	ldr	r2, [r0, #12]
 800b92e:	4606      	mov	r6, r0
 800b930:	bb02      	cbnz	r2, 800b974 <_dtoa_r+0xa1c>
 800b932:	4601      	mov	r1, r0
 800b934:	4648      	mov	r0, r9
 800b936:	f000 ff2d 	bl	800c794 <__mcmp>
 800b93a:	4602      	mov	r2, r0
 800b93c:	4631      	mov	r1, r6
 800b93e:	4658      	mov	r0, fp
 800b940:	920e      	str	r2, [sp, #56]	@ 0x38
 800b942:	f000 fca3 	bl	800c28c <_Bfree>
 800b946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b94a:	9e07      	ldr	r6, [sp, #28]
 800b94c:	ea43 0102 	orr.w	r1, r3, r2
 800b950:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b952:	4319      	orrs	r1, r3
 800b954:	d110      	bne.n	800b978 <_dtoa_r+0xa20>
 800b956:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b95a:	d029      	beq.n	800b9b0 <_dtoa_r+0xa58>
 800b95c:	9b08      	ldr	r3, [sp, #32]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd02      	ble.n	800b968 <_dtoa_r+0xa10>
 800b962:	9b02      	ldr	r3, [sp, #8]
 800b964:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b968:	9b00      	ldr	r3, [sp, #0]
 800b96a:	f883 8000 	strb.w	r8, [r3]
 800b96e:	e63f      	b.n	800b5f0 <_dtoa_r+0x698>
 800b970:	4628      	mov	r0, r5
 800b972:	e7bb      	b.n	800b8ec <_dtoa_r+0x994>
 800b974:	2201      	movs	r2, #1
 800b976:	e7e1      	b.n	800b93c <_dtoa_r+0x9e4>
 800b978:	9b08      	ldr	r3, [sp, #32]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	db04      	blt.n	800b988 <_dtoa_r+0xa30>
 800b97e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b980:	430b      	orrs	r3, r1
 800b982:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b984:	430b      	orrs	r3, r1
 800b986:	d120      	bne.n	800b9ca <_dtoa_r+0xa72>
 800b988:	2a00      	cmp	r2, #0
 800b98a:	dded      	ble.n	800b968 <_dtoa_r+0xa10>
 800b98c:	4649      	mov	r1, r9
 800b98e:	2201      	movs	r2, #1
 800b990:	4658      	mov	r0, fp
 800b992:	f000 fe93 	bl	800c6bc <__lshift>
 800b996:	4621      	mov	r1, r4
 800b998:	4681      	mov	r9, r0
 800b99a:	f000 fefb 	bl	800c794 <__mcmp>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	dc03      	bgt.n	800b9aa <_dtoa_r+0xa52>
 800b9a2:	d1e1      	bne.n	800b968 <_dtoa_r+0xa10>
 800b9a4:	f018 0f01 	tst.w	r8, #1
 800b9a8:	d0de      	beq.n	800b968 <_dtoa_r+0xa10>
 800b9aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9ae:	d1d8      	bne.n	800b962 <_dtoa_r+0xa0a>
 800b9b0:	9a00      	ldr	r2, [sp, #0]
 800b9b2:	2339      	movs	r3, #57	@ 0x39
 800b9b4:	7013      	strb	r3, [r2, #0]
 800b9b6:	4633      	mov	r3, r6
 800b9b8:	461e      	mov	r6, r3
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b9c0:	2a39      	cmp	r2, #57	@ 0x39
 800b9c2:	d052      	beq.n	800ba6a <_dtoa_r+0xb12>
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	e612      	b.n	800b5f0 <_dtoa_r+0x698>
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	dd07      	ble.n	800b9de <_dtoa_r+0xa86>
 800b9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9d2:	d0ed      	beq.n	800b9b0 <_dtoa_r+0xa58>
 800b9d4:	9a00      	ldr	r2, [sp, #0]
 800b9d6:	f108 0301 	add.w	r3, r8, #1
 800b9da:	7013      	strb	r3, [r2, #0]
 800b9dc:	e608      	b.n	800b5f0 <_dtoa_r+0x698>
 800b9de:	9b07      	ldr	r3, [sp, #28]
 800b9e0:	9a07      	ldr	r2, [sp, #28]
 800b9e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d028      	beq.n	800ba3e <_dtoa_r+0xae6>
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	220a      	movs	r2, #10
 800b9f2:	4658      	mov	r0, fp
 800b9f4:	f000 fc6c 	bl	800c2d0 <__multadd>
 800b9f8:	42af      	cmp	r7, r5
 800b9fa:	4681      	mov	r9, r0
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	f04f 020a 	mov.w	r2, #10
 800ba04:	4639      	mov	r1, r7
 800ba06:	4658      	mov	r0, fp
 800ba08:	d107      	bne.n	800ba1a <_dtoa_r+0xac2>
 800ba0a:	f000 fc61 	bl	800c2d0 <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	4605      	mov	r5, r0
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	3301      	adds	r3, #1
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	e774      	b.n	800b904 <_dtoa_r+0x9ac>
 800ba1a:	f000 fc59 	bl	800c2d0 <__multadd>
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4607      	mov	r7, r0
 800ba22:	2300      	movs	r3, #0
 800ba24:	220a      	movs	r2, #10
 800ba26:	4658      	mov	r0, fp
 800ba28:	f000 fc52 	bl	800c2d0 <__multadd>
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	e7f0      	b.n	800ba12 <_dtoa_r+0xaba>
 800ba30:	9b00      	ldr	r3, [sp, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfcc      	ite	gt
 800ba36:	461e      	movgt	r6, r3
 800ba38:	2601      	movle	r6, #1
 800ba3a:	4456      	add	r6, sl
 800ba3c:	2700      	movs	r7, #0
 800ba3e:	4649      	mov	r1, r9
 800ba40:	2201      	movs	r2, #1
 800ba42:	4658      	mov	r0, fp
 800ba44:	f000 fe3a 	bl	800c6bc <__lshift>
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	f000 fea2 	bl	800c794 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dcb0      	bgt.n	800b9b6 <_dtoa_r+0xa5e>
 800ba54:	d102      	bne.n	800ba5c <_dtoa_r+0xb04>
 800ba56:	f018 0f01 	tst.w	r8, #1
 800ba5a:	d1ac      	bne.n	800b9b6 <_dtoa_r+0xa5e>
 800ba5c:	4633      	mov	r3, r6
 800ba5e:	461e      	mov	r6, r3
 800ba60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba64:	2a30      	cmp	r2, #48	@ 0x30
 800ba66:	d0fa      	beq.n	800ba5e <_dtoa_r+0xb06>
 800ba68:	e5c2      	b.n	800b5f0 <_dtoa_r+0x698>
 800ba6a:	459a      	cmp	sl, r3
 800ba6c:	d1a4      	bne.n	800b9b8 <_dtoa_r+0xa60>
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	3301      	adds	r3, #1
 800ba72:	9304      	str	r3, [sp, #16]
 800ba74:	2331      	movs	r3, #49	@ 0x31
 800ba76:	f88a 3000 	strb.w	r3, [sl]
 800ba7a:	e5b9      	b.n	800b5f0 <_dtoa_r+0x698>
 800ba7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800badc <_dtoa_r+0xb84>
 800ba82:	b11b      	cbz	r3, 800ba8c <_dtoa_r+0xb34>
 800ba84:	f10a 0308 	add.w	r3, sl, #8
 800ba88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	b019      	add	sp, #100	@ 0x64
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	f77f ae37 	ble.w	800b70a <_dtoa_r+0x7b2>
 800ba9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800baa0:	2001      	movs	r0, #1
 800baa2:	e655      	b.n	800b750 <_dtoa_r+0x7f8>
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f77f aed6 	ble.w	800b858 <_dtoa_r+0x900>
 800baac:	4656      	mov	r6, sl
 800baae:	4621      	mov	r1, r4
 800bab0:	4648      	mov	r0, r9
 800bab2:	f7ff f9c7 	bl	800ae44 <quorem>
 800bab6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800baba:	f806 8b01 	strb.w	r8, [r6], #1
 800babe:	9b00      	ldr	r3, [sp, #0]
 800bac0:	eba6 020a 	sub.w	r2, r6, sl
 800bac4:	4293      	cmp	r3, r2
 800bac6:	ddb3      	ble.n	800ba30 <_dtoa_r+0xad8>
 800bac8:	4649      	mov	r1, r9
 800baca:	2300      	movs	r3, #0
 800bacc:	220a      	movs	r2, #10
 800bace:	4658      	mov	r0, fp
 800bad0:	f000 fbfe 	bl	800c2d0 <__multadd>
 800bad4:	4681      	mov	r9, r0
 800bad6:	e7ea      	b.n	800baae <_dtoa_r+0xb56>
 800bad8:	0800e294 	.word	0x0800e294
 800badc:	0800e218 	.word	0x0800e218

0800bae0 <_free_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4605      	mov	r5, r0
 800bae4:	2900      	cmp	r1, #0
 800bae6:	d041      	beq.n	800bb6c <_free_r+0x8c>
 800bae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baec:	1f0c      	subs	r4, r1, #4
 800baee:	2b00      	cmp	r3, #0
 800baf0:	bfb8      	it	lt
 800baf2:	18e4      	addlt	r4, r4, r3
 800baf4:	f7fd fa88 	bl	8009008 <__malloc_lock>
 800baf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb70 <_free_r+0x90>)
 800bafa:	6813      	ldr	r3, [r2, #0]
 800bafc:	b933      	cbnz	r3, 800bb0c <_free_r+0x2c>
 800bafe:	6063      	str	r3, [r4, #4]
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb08:	f7fd ba84 	b.w	8009014 <__malloc_unlock>
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	d908      	bls.n	800bb22 <_free_r+0x42>
 800bb10:	6820      	ldr	r0, [r4, #0]
 800bb12:	1821      	adds	r1, r4, r0
 800bb14:	428b      	cmp	r3, r1
 800bb16:	bf01      	itttt	eq
 800bb18:	6819      	ldreq	r1, [r3, #0]
 800bb1a:	685b      	ldreq	r3, [r3, #4]
 800bb1c:	1809      	addeq	r1, r1, r0
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	e7ed      	b.n	800bafe <_free_r+0x1e>
 800bb22:	461a      	mov	r2, r3
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	b10b      	cbz	r3, 800bb2c <_free_r+0x4c>
 800bb28:	42a3      	cmp	r3, r4
 800bb2a:	d9fa      	bls.n	800bb22 <_free_r+0x42>
 800bb2c:	6811      	ldr	r1, [r2, #0]
 800bb2e:	1850      	adds	r0, r2, r1
 800bb30:	42a0      	cmp	r0, r4
 800bb32:	d10b      	bne.n	800bb4c <_free_r+0x6c>
 800bb34:	6820      	ldr	r0, [r4, #0]
 800bb36:	4401      	add	r1, r0
 800bb38:	1850      	adds	r0, r2, r1
 800bb3a:	4283      	cmp	r3, r0
 800bb3c:	6011      	str	r1, [r2, #0]
 800bb3e:	d1e0      	bne.n	800bb02 <_free_r+0x22>
 800bb40:	6818      	ldr	r0, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	6053      	str	r3, [r2, #4]
 800bb46:	4408      	add	r0, r1
 800bb48:	6010      	str	r0, [r2, #0]
 800bb4a:	e7da      	b.n	800bb02 <_free_r+0x22>
 800bb4c:	d902      	bls.n	800bb54 <_free_r+0x74>
 800bb4e:	230c      	movs	r3, #12
 800bb50:	602b      	str	r3, [r5, #0]
 800bb52:	e7d6      	b.n	800bb02 <_free_r+0x22>
 800bb54:	6820      	ldr	r0, [r4, #0]
 800bb56:	1821      	adds	r1, r4, r0
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	bf04      	itt	eq
 800bb5c:	6819      	ldreq	r1, [r3, #0]
 800bb5e:	685b      	ldreq	r3, [r3, #4]
 800bb60:	6063      	str	r3, [r4, #4]
 800bb62:	bf04      	itt	eq
 800bb64:	1809      	addeq	r1, r1, r0
 800bb66:	6021      	streq	r1, [r4, #0]
 800bb68:	6054      	str	r4, [r2, #4]
 800bb6a:	e7ca      	b.n	800bb02 <_free_r+0x22>
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	bf00      	nop
 800bb70:	20005920 	.word	0x20005920

0800bb74 <rshift>:
 800bb74:	6903      	ldr	r3, [r0, #16]
 800bb76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb82:	f100 0414 	add.w	r4, r0, #20
 800bb86:	dd45      	ble.n	800bc14 <rshift+0xa0>
 800bb88:	f011 011f 	ands.w	r1, r1, #31
 800bb8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb94:	d10c      	bne.n	800bbb0 <rshift+0x3c>
 800bb96:	f100 0710 	add.w	r7, r0, #16
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	42b1      	cmp	r1, r6
 800bb9e:	d334      	bcc.n	800bc0a <rshift+0x96>
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	1eea      	subs	r2, r5, #3
 800bba6:	4296      	cmp	r6, r2
 800bba8:	bf38      	it	cc
 800bbaa:	2300      	movcc	r3, #0
 800bbac:	4423      	add	r3, r4
 800bbae:	e015      	b.n	800bbdc <rshift+0x68>
 800bbb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb4:	f1c1 0820 	rsb	r8, r1, #32
 800bbb8:	40cf      	lsrs	r7, r1
 800bbba:	f105 0e04 	add.w	lr, r5, #4
 800bbbe:	46a1      	mov	r9, r4
 800bbc0:	4576      	cmp	r6, lr
 800bbc2:	46f4      	mov	ip, lr
 800bbc4:	d815      	bhi.n	800bbf2 <rshift+0x7e>
 800bbc6:	1a9a      	subs	r2, r3, r2
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	3a04      	subs	r2, #4
 800bbcc:	3501      	adds	r5, #1
 800bbce:	42ae      	cmp	r6, r5
 800bbd0:	bf38      	it	cc
 800bbd2:	2200      	movcc	r2, #0
 800bbd4:	18a3      	adds	r3, r4, r2
 800bbd6:	50a7      	str	r7, [r4, r2]
 800bbd8:	b107      	cbz	r7, 800bbdc <rshift+0x68>
 800bbda:	3304      	adds	r3, #4
 800bbdc:	1b1a      	subs	r2, r3, r4
 800bbde:	42a3      	cmp	r3, r4
 800bbe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe4:	bf08      	it	eq
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	6102      	str	r2, [r0, #16]
 800bbea:	bf08      	it	eq
 800bbec:	6143      	streq	r3, [r0, #20]
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	f8dc c000 	ldr.w	ip, [ip]
 800bbf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbfa:	ea4c 0707 	orr.w	r7, ip, r7
 800bbfe:	f849 7b04 	str.w	r7, [r9], #4
 800bc02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc06:	40cf      	lsrs	r7, r1
 800bc08:	e7da      	b.n	800bbc0 <rshift+0x4c>
 800bc0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc12:	e7c3      	b.n	800bb9c <rshift+0x28>
 800bc14:	4623      	mov	r3, r4
 800bc16:	e7e1      	b.n	800bbdc <rshift+0x68>

0800bc18 <__hexdig_fun>:
 800bc18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d802      	bhi.n	800bc26 <__hexdig_fun+0xe>
 800bc20:	3820      	subs	r0, #32
 800bc22:	b2c0      	uxtb	r0, r0
 800bc24:	4770      	bx	lr
 800bc26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc2a:	2b05      	cmp	r3, #5
 800bc2c:	d801      	bhi.n	800bc32 <__hexdig_fun+0x1a>
 800bc2e:	3847      	subs	r0, #71	@ 0x47
 800bc30:	e7f7      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d801      	bhi.n	800bc3e <__hexdig_fun+0x26>
 800bc3a:	3827      	subs	r0, #39	@ 0x27
 800bc3c:	e7f1      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	4770      	bx	lr
	...

0800bc44 <__gethex>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	468a      	mov	sl, r1
 800bc4c:	9302      	str	r3, [sp, #8]
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	9001      	str	r0, [sp, #4]
 800bc52:	4690      	mov	r8, r2
 800bc54:	1c9c      	adds	r4, r3, #2
 800bc56:	46a1      	mov	r9, r4
 800bc58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc5c:	2830      	cmp	r0, #48	@ 0x30
 800bc5e:	d0fa      	beq.n	800bc56 <__gethex+0x12>
 800bc60:	eba9 0303 	sub.w	r3, r9, r3
 800bc64:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc68:	f7ff ffd6 	bl	800bc18 <__hexdig_fun>
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d168      	bne.n	800bd44 <__gethex+0x100>
 800bc72:	49a0      	ldr	r1, [pc, #640]	@ (800bef4 <__gethex+0x2b0>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	4648      	mov	r0, r9
 800bc78:	f7fe ffed 	bl	800ac56 <strncmp>
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d167      	bne.n	800bd52 <__gethex+0x10e>
 800bc82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc86:	4626      	mov	r6, r4
 800bc88:	f7ff ffc6 	bl	800bc18 <__hexdig_fun>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d062      	beq.n	800bd56 <__gethex+0x112>
 800bc90:	4623      	mov	r3, r4
 800bc92:	7818      	ldrb	r0, [r3, #0]
 800bc94:	2830      	cmp	r0, #48	@ 0x30
 800bc96:	4699      	mov	r9, r3
 800bc98:	f103 0301 	add.w	r3, r3, #1
 800bc9c:	d0f9      	beq.n	800bc92 <__gethex+0x4e>
 800bc9e:	f7ff ffbb 	bl	800bc18 <__hexdig_fun>
 800bca2:	fab0 f580 	clz	r5, r0
 800bca6:	096d      	lsrs	r5, r5, #5
 800bca8:	f04f 0b01 	mov.w	fp, #1
 800bcac:	464a      	mov	r2, r9
 800bcae:	4616      	mov	r6, r2
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	7830      	ldrb	r0, [r6, #0]
 800bcb4:	f7ff ffb0 	bl	800bc18 <__hexdig_fun>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d1f8      	bne.n	800bcae <__gethex+0x6a>
 800bcbc:	498d      	ldr	r1, [pc, #564]	@ (800bef4 <__gethex+0x2b0>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fe ffc8 	bl	800ac56 <strncmp>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d13f      	bne.n	800bd4a <__gethex+0x106>
 800bcca:	b944      	cbnz	r4, 800bcde <__gethex+0x9a>
 800bccc:	1c74      	adds	r4, r6, #1
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	7830      	ldrb	r0, [r6, #0]
 800bcd6:	f7ff ff9f 	bl	800bc18 <__hexdig_fun>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1f8      	bne.n	800bcd0 <__gethex+0x8c>
 800bcde:	1ba4      	subs	r4, r4, r6
 800bce0:	00a7      	lsls	r7, r4, #2
 800bce2:	7833      	ldrb	r3, [r6, #0]
 800bce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bce8:	2b50      	cmp	r3, #80	@ 0x50
 800bcea:	d13e      	bne.n	800bd6a <__gethex+0x126>
 800bcec:	7873      	ldrb	r3, [r6, #1]
 800bcee:	2b2b      	cmp	r3, #43	@ 0x2b
 800bcf0:	d033      	beq.n	800bd5a <__gethex+0x116>
 800bcf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcf4:	d034      	beq.n	800bd60 <__gethex+0x11c>
 800bcf6:	1c71      	adds	r1, r6, #1
 800bcf8:	2400      	movs	r4, #0
 800bcfa:	7808      	ldrb	r0, [r1, #0]
 800bcfc:	f7ff ff8c 	bl	800bc18 <__hexdig_fun>
 800bd00:	1e43      	subs	r3, r0, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b18      	cmp	r3, #24
 800bd06:	d830      	bhi.n	800bd6a <__gethex+0x126>
 800bd08:	f1a0 0210 	sub.w	r2, r0, #16
 800bd0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd10:	f7ff ff82 	bl	800bc18 <__hexdig_fun>
 800bd14:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd18:	fa5f fc8c 	uxtb.w	ip, ip
 800bd1c:	f1bc 0f18 	cmp.w	ip, #24
 800bd20:	f04f 030a 	mov.w	r3, #10
 800bd24:	d91e      	bls.n	800bd64 <__gethex+0x120>
 800bd26:	b104      	cbz	r4, 800bd2a <__gethex+0xe6>
 800bd28:	4252      	negs	r2, r2
 800bd2a:	4417      	add	r7, r2
 800bd2c:	f8ca 1000 	str.w	r1, [sl]
 800bd30:	b1ed      	cbz	r5, 800bd6e <__gethex+0x12a>
 800bd32:	f1bb 0f00 	cmp.w	fp, #0
 800bd36:	bf0c      	ite	eq
 800bd38:	2506      	moveq	r5, #6
 800bd3a:	2500      	movne	r5, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	b005      	add	sp, #20
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	2500      	movs	r5, #0
 800bd46:	462c      	mov	r4, r5
 800bd48:	e7b0      	b.n	800bcac <__gethex+0x68>
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1c7      	bne.n	800bcde <__gethex+0x9a>
 800bd4e:	4627      	mov	r7, r4
 800bd50:	e7c7      	b.n	800bce2 <__gethex+0x9e>
 800bd52:	464e      	mov	r6, r9
 800bd54:	462f      	mov	r7, r5
 800bd56:	2501      	movs	r5, #1
 800bd58:	e7c3      	b.n	800bce2 <__gethex+0x9e>
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	1cb1      	adds	r1, r6, #2
 800bd5e:	e7cc      	b.n	800bcfa <__gethex+0xb6>
 800bd60:	2401      	movs	r4, #1
 800bd62:	e7fb      	b.n	800bd5c <__gethex+0x118>
 800bd64:	fb03 0002 	mla	r0, r3, r2, r0
 800bd68:	e7ce      	b.n	800bd08 <__gethex+0xc4>
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	e7de      	b.n	800bd2c <__gethex+0xe8>
 800bd6e:	eba6 0309 	sub.w	r3, r6, r9
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4629      	mov	r1, r5
 800bd76:	2b07      	cmp	r3, #7
 800bd78:	dc0a      	bgt.n	800bd90 <__gethex+0x14c>
 800bd7a:	9801      	ldr	r0, [sp, #4]
 800bd7c:	f000 fa46 	bl	800c20c <_Balloc>
 800bd80:	4604      	mov	r4, r0
 800bd82:	b940      	cbnz	r0, 800bd96 <__gethex+0x152>
 800bd84:	4b5c      	ldr	r3, [pc, #368]	@ (800bef8 <__gethex+0x2b4>)
 800bd86:	4602      	mov	r2, r0
 800bd88:	21e4      	movs	r1, #228	@ 0xe4
 800bd8a:	485c      	ldr	r0, [pc, #368]	@ (800befc <__gethex+0x2b8>)
 800bd8c:	f001 fd2c 	bl	800d7e8 <__assert_func>
 800bd90:	3101      	adds	r1, #1
 800bd92:	105b      	asrs	r3, r3, #1
 800bd94:	e7ef      	b.n	800bd76 <__gethex+0x132>
 800bd96:	f100 0a14 	add.w	sl, r0, #20
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4655      	mov	r5, sl
 800bd9e:	469b      	mov	fp, r3
 800bda0:	45b1      	cmp	r9, r6
 800bda2:	d337      	bcc.n	800be14 <__gethex+0x1d0>
 800bda4:	f845 bb04 	str.w	fp, [r5], #4
 800bda8:	eba5 050a 	sub.w	r5, r5, sl
 800bdac:	10ad      	asrs	r5, r5, #2
 800bdae:	6125      	str	r5, [r4, #16]
 800bdb0:	4658      	mov	r0, fp
 800bdb2:	f000 fb1d 	bl	800c3f0 <__hi0bits>
 800bdb6:	016d      	lsls	r5, r5, #5
 800bdb8:	f8d8 6000 	ldr.w	r6, [r8]
 800bdbc:	1a2d      	subs	r5, r5, r0
 800bdbe:	42b5      	cmp	r5, r6
 800bdc0:	dd54      	ble.n	800be6c <__gethex+0x228>
 800bdc2:	1bad      	subs	r5, r5, r6
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f000 feb1 	bl	800cb2e <__any_on>
 800bdcc:	4681      	mov	r9, r0
 800bdce:	b178      	cbz	r0, 800bdf0 <__gethex+0x1ac>
 800bdd0:	1e6b      	subs	r3, r5, #1
 800bdd2:	1159      	asrs	r1, r3, #5
 800bdd4:	f003 021f 	and.w	r2, r3, #31
 800bdd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bddc:	f04f 0901 	mov.w	r9, #1
 800bde0:	fa09 f202 	lsl.w	r2, r9, r2
 800bde4:	420a      	tst	r2, r1
 800bde6:	d003      	beq.n	800bdf0 <__gethex+0x1ac>
 800bde8:	454b      	cmp	r3, r9
 800bdea:	dc36      	bgt.n	800be5a <__gethex+0x216>
 800bdec:	f04f 0902 	mov.w	r9, #2
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f7ff febe 	bl	800bb74 <rshift>
 800bdf8:	442f      	add	r7, r5
 800bdfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdfe:	42bb      	cmp	r3, r7
 800be00:	da42      	bge.n	800be88 <__gethex+0x244>
 800be02:	9801      	ldr	r0, [sp, #4]
 800be04:	4621      	mov	r1, r4
 800be06:	f000 fa41 	bl	800c28c <_Bfree>
 800be0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be0c:	2300      	movs	r3, #0
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	25a3      	movs	r5, #163	@ 0xa3
 800be12:	e793      	b.n	800bd3c <__gethex+0xf8>
 800be14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be18:	2a2e      	cmp	r2, #46	@ 0x2e
 800be1a:	d012      	beq.n	800be42 <__gethex+0x1fe>
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	d104      	bne.n	800be2a <__gethex+0x1e6>
 800be20:	f845 bb04 	str.w	fp, [r5], #4
 800be24:	f04f 0b00 	mov.w	fp, #0
 800be28:	465b      	mov	r3, fp
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	9303      	str	r3, [sp, #12]
 800be2e:	f7ff fef3 	bl	800bc18 <__hexdig_fun>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	f000 000f 	and.w	r0, r0, #15
 800be38:	4098      	lsls	r0, r3
 800be3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800be3e:	3304      	adds	r3, #4
 800be40:	e7ae      	b.n	800bda0 <__gethex+0x15c>
 800be42:	45b1      	cmp	r9, r6
 800be44:	d8ea      	bhi.n	800be1c <__gethex+0x1d8>
 800be46:	492b      	ldr	r1, [pc, #172]	@ (800bef4 <__gethex+0x2b0>)
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fe ff02 	bl	800ac56 <strncmp>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e1      	bne.n	800be1c <__gethex+0x1d8>
 800be58:	e7a2      	b.n	800bda0 <__gethex+0x15c>
 800be5a:	1ea9      	subs	r1, r5, #2
 800be5c:	4620      	mov	r0, r4
 800be5e:	f000 fe66 	bl	800cb2e <__any_on>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0c2      	beq.n	800bdec <__gethex+0x1a8>
 800be66:	f04f 0903 	mov.w	r9, #3
 800be6a:	e7c1      	b.n	800bdf0 <__gethex+0x1ac>
 800be6c:	da09      	bge.n	800be82 <__gethex+0x23e>
 800be6e:	1b75      	subs	r5, r6, r5
 800be70:	4621      	mov	r1, r4
 800be72:	9801      	ldr	r0, [sp, #4]
 800be74:	462a      	mov	r2, r5
 800be76:	f000 fc21 	bl	800c6bc <__lshift>
 800be7a:	1b7f      	subs	r7, r7, r5
 800be7c:	4604      	mov	r4, r0
 800be7e:	f100 0a14 	add.w	sl, r0, #20
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	e7b8      	b.n	800bdfa <__gethex+0x1b6>
 800be88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be8c:	42bd      	cmp	r5, r7
 800be8e:	dd6f      	ble.n	800bf70 <__gethex+0x32c>
 800be90:	1bed      	subs	r5, r5, r7
 800be92:	42ae      	cmp	r6, r5
 800be94:	dc34      	bgt.n	800bf00 <__gethex+0x2bc>
 800be96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d022      	beq.n	800bee4 <__gethex+0x2a0>
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d024      	beq.n	800beec <__gethex+0x2a8>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d115      	bne.n	800bed2 <__gethex+0x28e>
 800bea6:	42ae      	cmp	r6, r5
 800bea8:	d113      	bne.n	800bed2 <__gethex+0x28e>
 800beaa:	2e01      	cmp	r6, #1
 800beac:	d10b      	bne.n	800bec6 <__gethex+0x282>
 800beae:	9a02      	ldr	r2, [sp, #8]
 800beb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	2301      	movs	r3, #1
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	f8ca 3000 	str.w	r3, [sl]
 800bebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec0:	2562      	movs	r5, #98	@ 0x62
 800bec2:	601c      	str	r4, [r3, #0]
 800bec4:	e73a      	b.n	800bd3c <__gethex+0xf8>
 800bec6:	1e71      	subs	r1, r6, #1
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fe30 	bl	800cb2e <__any_on>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1ed      	bne.n	800beae <__gethex+0x26a>
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	4621      	mov	r1, r4
 800bed6:	f000 f9d9 	bl	800c28c <_Bfree>
 800beda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bedc:	2300      	movs	r3, #0
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	2550      	movs	r5, #80	@ 0x50
 800bee2:	e72b      	b.n	800bd3c <__gethex+0xf8>
 800bee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1f3      	bne.n	800bed2 <__gethex+0x28e>
 800beea:	e7e0      	b.n	800beae <__gethex+0x26a>
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1dd      	bne.n	800beae <__gethex+0x26a>
 800bef2:	e7ee      	b.n	800bed2 <__gethex+0x28e>
 800bef4:	0800e080 	.word	0x0800e080
 800bef8:	0800e294 	.word	0x0800e294
 800befc:	0800e2a5 	.word	0x0800e2a5
 800bf00:	1e6f      	subs	r7, r5, #1
 800bf02:	f1b9 0f00 	cmp.w	r9, #0
 800bf06:	d130      	bne.n	800bf6a <__gethex+0x326>
 800bf08:	b127      	cbz	r7, 800bf14 <__gethex+0x2d0>
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 fe0e 	bl	800cb2e <__any_on>
 800bf12:	4681      	mov	r9, r0
 800bf14:	117a      	asrs	r2, r7, #5
 800bf16:	2301      	movs	r3, #1
 800bf18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf1c:	f007 071f 	and.w	r7, r7, #31
 800bf20:	40bb      	lsls	r3, r7
 800bf22:	4213      	tst	r3, r2
 800bf24:	4629      	mov	r1, r5
 800bf26:	4620      	mov	r0, r4
 800bf28:	bf18      	it	ne
 800bf2a:	f049 0902 	orrne.w	r9, r9, #2
 800bf2e:	f7ff fe21 	bl	800bb74 <rshift>
 800bf32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf36:	1b76      	subs	r6, r6, r5
 800bf38:	2502      	movs	r5, #2
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	d047      	beq.n	800bfd0 <__gethex+0x38c>
 800bf40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d015      	beq.n	800bf74 <__gethex+0x330>
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d017      	beq.n	800bf7c <__gethex+0x338>
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d109      	bne.n	800bf64 <__gethex+0x320>
 800bf50:	f019 0f02 	tst.w	r9, #2
 800bf54:	d006      	beq.n	800bf64 <__gethex+0x320>
 800bf56:	f8da 3000 	ldr.w	r3, [sl]
 800bf5a:	ea49 0903 	orr.w	r9, r9, r3
 800bf5e:	f019 0f01 	tst.w	r9, #1
 800bf62:	d10e      	bne.n	800bf82 <__gethex+0x33e>
 800bf64:	f045 0510 	orr.w	r5, r5, #16
 800bf68:	e032      	b.n	800bfd0 <__gethex+0x38c>
 800bf6a:	f04f 0901 	mov.w	r9, #1
 800bf6e:	e7d1      	b.n	800bf14 <__gethex+0x2d0>
 800bf70:	2501      	movs	r5, #1
 800bf72:	e7e2      	b.n	800bf3a <__gethex+0x2f6>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf76:	f1c3 0301 	rsb	r3, r3, #1
 800bf7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0f0      	beq.n	800bf64 <__gethex+0x320>
 800bf82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf86:	f104 0314 	add.w	r3, r4, #20
 800bf8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf92:	f04f 0c00 	mov.w	ip, #0
 800bf96:	4618      	mov	r0, r3
 800bf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bfa0:	d01b      	beq.n	800bfda <__gethex+0x396>
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	6002      	str	r2, [r0, #0]
 800bfa6:	2d02      	cmp	r5, #2
 800bfa8:	f104 0314 	add.w	r3, r4, #20
 800bfac:	d13c      	bne.n	800c028 <__gethex+0x3e4>
 800bfae:	f8d8 2000 	ldr.w	r2, [r8]
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	42b2      	cmp	r2, r6
 800bfb6:	d109      	bne.n	800bfcc <__gethex+0x388>
 800bfb8:	1171      	asrs	r1, r6, #5
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfc0:	f006 061f 	and.w	r6, r6, #31
 800bfc4:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc8:	421e      	tst	r6, r3
 800bfca:	d13a      	bne.n	800c042 <__gethex+0x3fe>
 800bfcc:	f045 0520 	orr.w	r5, r5, #32
 800bfd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfd2:	601c      	str	r4, [r3, #0]
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	601f      	str	r7, [r3, #0]
 800bfd8:	e6b0      	b.n	800bd3c <__gethex+0xf8>
 800bfda:	4299      	cmp	r1, r3
 800bfdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfe0:	d8d9      	bhi.n	800bf96 <__gethex+0x352>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	459b      	cmp	fp, r3
 800bfe6:	db17      	blt.n	800c018 <__gethex+0x3d4>
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	3101      	adds	r1, #1
 800bfee:	f000 f90d 	bl	800c20c <_Balloc>
 800bff2:	4681      	mov	r9, r0
 800bff4:	b918      	cbnz	r0, 800bffe <__gethex+0x3ba>
 800bff6:	4b1a      	ldr	r3, [pc, #104]	@ (800c060 <__gethex+0x41c>)
 800bff8:	4602      	mov	r2, r0
 800bffa:	2184      	movs	r1, #132	@ 0x84
 800bffc:	e6c5      	b.n	800bd8a <__gethex+0x146>
 800bffe:	6922      	ldr	r2, [r4, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	300c      	adds	r0, #12
 800c00a:	f7fe fefe 	bl	800ae0a <memcpy>
 800c00e:	4621      	mov	r1, r4
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	f000 f93b 	bl	800c28c <_Bfree>
 800c016:	464c      	mov	r4, r9
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	6122      	str	r2, [r4, #16]
 800c022:	2201      	movs	r2, #1
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	e7be      	b.n	800bfa6 <__gethex+0x362>
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	455a      	cmp	r2, fp
 800c02c:	dd0b      	ble.n	800c046 <__gethex+0x402>
 800c02e:	2101      	movs	r1, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff fd9f 	bl	800bb74 <rshift>
 800c036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c03a:	3701      	adds	r7, #1
 800c03c:	42bb      	cmp	r3, r7
 800c03e:	f6ff aee0 	blt.w	800be02 <__gethex+0x1be>
 800c042:	2501      	movs	r5, #1
 800c044:	e7c2      	b.n	800bfcc <__gethex+0x388>
 800c046:	f016 061f 	ands.w	r6, r6, #31
 800c04a:	d0fa      	beq.n	800c042 <__gethex+0x3fe>
 800c04c:	4453      	add	r3, sl
 800c04e:	f1c6 0620 	rsb	r6, r6, #32
 800c052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c056:	f000 f9cb 	bl	800c3f0 <__hi0bits>
 800c05a:	42b0      	cmp	r0, r6
 800c05c:	dbe7      	blt.n	800c02e <__gethex+0x3ea>
 800c05e:	e7f0      	b.n	800c042 <__gethex+0x3fe>
 800c060:	0800e294 	.word	0x0800e294

0800c064 <L_shift>:
 800c064:	f1c2 0208 	rsb	r2, r2, #8
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	b570      	push	{r4, r5, r6, lr}
 800c06c:	f1c2 0620 	rsb	r6, r2, #32
 800c070:	6843      	ldr	r3, [r0, #4]
 800c072:	6804      	ldr	r4, [r0, #0]
 800c074:	fa03 f506 	lsl.w	r5, r3, r6
 800c078:	432c      	orrs	r4, r5
 800c07a:	40d3      	lsrs	r3, r2
 800c07c:	6004      	str	r4, [r0, #0]
 800c07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c082:	4288      	cmp	r0, r1
 800c084:	d3f4      	bcc.n	800c070 <L_shift+0xc>
 800c086:	bd70      	pop	{r4, r5, r6, pc}

0800c088 <__match>:
 800c088:	b530      	push	{r4, r5, lr}
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	b914      	cbnz	r4, 800c09a <__match+0x12>
 800c094:	6003      	str	r3, [r0, #0]
 800c096:	2001      	movs	r0, #1
 800c098:	bd30      	pop	{r4, r5, pc}
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0a2:	2d19      	cmp	r5, #25
 800c0a4:	bf98      	it	ls
 800c0a6:	3220      	addls	r2, #32
 800c0a8:	42a2      	cmp	r2, r4
 800c0aa:	d0f0      	beq.n	800c08e <__match+0x6>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7f3      	b.n	800c098 <__match+0x10>

0800c0b0 <__hexnan>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	680b      	ldr	r3, [r1, #0]
 800c0b6:	6801      	ldr	r1, [r0, #0]
 800c0b8:	115e      	asrs	r6, r3, #5
 800c0ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0be:	f013 031f 	ands.w	r3, r3, #31
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	bf18      	it	ne
 800c0c6:	3604      	addne	r6, #4
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	1f37      	subs	r7, r6, #4
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	4690      	mov	r8, r2
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d6:	46b9      	mov	r9, r7
 800c0d8:	463c      	mov	r4, r7
 800c0da:	9502      	str	r5, [sp, #8]
 800c0dc:	46ab      	mov	fp, r5
 800c0de:	784a      	ldrb	r2, [r1, #1]
 800c0e0:	1c4b      	adds	r3, r1, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	b342      	cbz	r2, 800c138 <__hexnan+0x88>
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	9105      	str	r1, [sp, #20]
 800c0ea:	9204      	str	r2, [sp, #16]
 800c0ec:	f7ff fd94 	bl	800bc18 <__hexdig_fun>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d151      	bne.n	800c198 <__hexnan+0xe8>
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	9905      	ldr	r1, [sp, #20]
 800c0f8:	2a20      	cmp	r2, #32
 800c0fa:	d818      	bhi.n	800c12e <__hexnan+0x7e>
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	459b      	cmp	fp, r3
 800c100:	dd13      	ble.n	800c12a <__hexnan+0x7a>
 800c102:	454c      	cmp	r4, r9
 800c104:	d206      	bcs.n	800c114 <__hexnan+0x64>
 800c106:	2d07      	cmp	r5, #7
 800c108:	dc04      	bgt.n	800c114 <__hexnan+0x64>
 800c10a:	462a      	mov	r2, r5
 800c10c:	4649      	mov	r1, r9
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ffa8 	bl	800c064 <L_shift>
 800c114:	4544      	cmp	r4, r8
 800c116:	d952      	bls.n	800c1be <__hexnan+0x10e>
 800c118:	2300      	movs	r3, #0
 800c11a:	f1a4 0904 	sub.w	r9, r4, #4
 800c11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	464c      	mov	r4, r9
 800c128:	461d      	mov	r5, r3
 800c12a:	9903      	ldr	r1, [sp, #12]
 800c12c:	e7d7      	b.n	800c0de <__hexnan+0x2e>
 800c12e:	2a29      	cmp	r2, #41	@ 0x29
 800c130:	d157      	bne.n	800c1e2 <__hexnan+0x132>
 800c132:	3102      	adds	r1, #2
 800c134:	f8ca 1000 	str.w	r1, [sl]
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	d051      	beq.n	800c1e2 <__hexnan+0x132>
 800c13e:	454c      	cmp	r4, r9
 800c140:	d206      	bcs.n	800c150 <__hexnan+0xa0>
 800c142:	2d07      	cmp	r5, #7
 800c144:	dc04      	bgt.n	800c150 <__hexnan+0xa0>
 800c146:	462a      	mov	r2, r5
 800c148:	4649      	mov	r1, r9
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ff8a 	bl	800c064 <L_shift>
 800c150:	4544      	cmp	r4, r8
 800c152:	d936      	bls.n	800c1c2 <__hexnan+0x112>
 800c154:	f1a8 0204 	sub.w	r2, r8, #4
 800c158:	4623      	mov	r3, r4
 800c15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c162:	429f      	cmp	r7, r3
 800c164:	d2f9      	bcs.n	800c15a <__hexnan+0xaa>
 800c166:	1b3b      	subs	r3, r7, r4
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	3304      	adds	r3, #4
 800c16e:	3401      	adds	r4, #1
 800c170:	3e03      	subs	r6, #3
 800c172:	42b4      	cmp	r4, r6
 800c174:	bf88      	it	hi
 800c176:	2304      	movhi	r3, #4
 800c178:	4443      	add	r3, r8
 800c17a:	2200      	movs	r2, #0
 800c17c:	f843 2b04 	str.w	r2, [r3], #4
 800c180:	429f      	cmp	r7, r3
 800c182:	d2fb      	bcs.n	800c17c <__hexnan+0xcc>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	b91b      	cbnz	r3, 800c190 <__hexnan+0xe0>
 800c188:	4547      	cmp	r7, r8
 800c18a:	d128      	bne.n	800c1de <__hexnan+0x12e>
 800c18c:	2301      	movs	r3, #1
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	2005      	movs	r0, #5
 800c192:	b007      	add	sp, #28
 800c194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c198:	3501      	adds	r5, #1
 800c19a:	2d08      	cmp	r5, #8
 800c19c:	f10b 0b01 	add.w	fp, fp, #1
 800c1a0:	dd06      	ble.n	800c1b0 <__hexnan+0x100>
 800c1a2:	4544      	cmp	r4, r8
 800c1a4:	d9c1      	bls.n	800c12a <__hexnan+0x7a>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ac:	2501      	movs	r5, #1
 800c1ae:	3c04      	subs	r4, #4
 800c1b0:	6822      	ldr	r2, [r4, #0]
 800c1b2:	f000 000f 	and.w	r0, r0, #15
 800c1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1ba:	6020      	str	r0, [r4, #0]
 800c1bc:	e7b5      	b.n	800c12a <__hexnan+0x7a>
 800c1be:	2508      	movs	r5, #8
 800c1c0:	e7b3      	b.n	800c12a <__hexnan+0x7a>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0dd      	beq.n	800c184 <__hexnan+0xd4>
 800c1c8:	f1c3 0320 	rsb	r3, r3, #32
 800c1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d0:	40da      	lsrs	r2, r3
 800c1d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1dc:	e7d2      	b.n	800c184 <__hexnan+0xd4>
 800c1de:	3f04      	subs	r7, #4
 800c1e0:	e7d0      	b.n	800c184 <__hexnan+0xd4>
 800c1e2:	2004      	movs	r0, #4
 800c1e4:	e7d5      	b.n	800c192 <__hexnan+0xe2>

0800c1e6 <__ascii_mbtowc>:
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	b901      	cbnz	r1, 800c1ec <__ascii_mbtowc+0x6>
 800c1ea:	a901      	add	r1, sp, #4
 800c1ec:	b142      	cbz	r2, 800c200 <__ascii_mbtowc+0x1a>
 800c1ee:	b14b      	cbz	r3, 800c204 <__ascii_mbtowc+0x1e>
 800c1f0:	7813      	ldrb	r3, [r2, #0]
 800c1f2:	600b      	str	r3, [r1, #0]
 800c1f4:	7812      	ldrb	r2, [r2, #0]
 800c1f6:	1e10      	subs	r0, r2, #0
 800c1f8:	bf18      	it	ne
 800c1fa:	2001      	movne	r0, #1
 800c1fc:	b002      	add	sp, #8
 800c1fe:	4770      	bx	lr
 800c200:	4610      	mov	r0, r2
 800c202:	e7fb      	b.n	800c1fc <__ascii_mbtowc+0x16>
 800c204:	f06f 0001 	mvn.w	r0, #1
 800c208:	e7f8      	b.n	800c1fc <__ascii_mbtowc+0x16>
	...

0800c20c <_Balloc>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	69c6      	ldr	r6, [r0, #28]
 800c210:	4604      	mov	r4, r0
 800c212:	460d      	mov	r5, r1
 800c214:	b976      	cbnz	r6, 800c234 <_Balloc+0x28>
 800c216:	2010      	movs	r0, #16
 800c218:	f7fc fe4c 	bl	8008eb4 <malloc>
 800c21c:	4602      	mov	r2, r0
 800c21e:	61e0      	str	r0, [r4, #28]
 800c220:	b920      	cbnz	r0, 800c22c <_Balloc+0x20>
 800c222:	4b18      	ldr	r3, [pc, #96]	@ (800c284 <_Balloc+0x78>)
 800c224:	4818      	ldr	r0, [pc, #96]	@ (800c288 <_Balloc+0x7c>)
 800c226:	216b      	movs	r1, #107	@ 0x6b
 800c228:	f001 fade 	bl	800d7e8 <__assert_func>
 800c22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c230:	6006      	str	r6, [r0, #0]
 800c232:	60c6      	str	r6, [r0, #12]
 800c234:	69e6      	ldr	r6, [r4, #28]
 800c236:	68f3      	ldr	r3, [r6, #12]
 800c238:	b183      	cbz	r3, 800c25c <_Balloc+0x50>
 800c23a:	69e3      	ldr	r3, [r4, #28]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c242:	b9b8      	cbnz	r0, 800c274 <_Balloc+0x68>
 800c244:	2101      	movs	r1, #1
 800c246:	fa01 f605 	lsl.w	r6, r1, r5
 800c24a:	1d72      	adds	r2, r6, #5
 800c24c:	0092      	lsls	r2, r2, #2
 800c24e:	4620      	mov	r0, r4
 800c250:	f001 fae8 	bl	800d824 <_calloc_r>
 800c254:	b160      	cbz	r0, 800c270 <_Balloc+0x64>
 800c256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c25a:	e00e      	b.n	800c27a <_Balloc+0x6e>
 800c25c:	2221      	movs	r2, #33	@ 0x21
 800c25e:	2104      	movs	r1, #4
 800c260:	4620      	mov	r0, r4
 800c262:	f001 fadf 	bl	800d824 <_calloc_r>
 800c266:	69e3      	ldr	r3, [r4, #28]
 800c268:	60f0      	str	r0, [r6, #12]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e4      	bne.n	800c23a <_Balloc+0x2e>
 800c270:	2000      	movs	r0, #0
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	6802      	ldr	r2, [r0, #0]
 800c276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c27a:	2300      	movs	r3, #0
 800c27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c280:	e7f7      	b.n	800c272 <_Balloc+0x66>
 800c282:	bf00      	nop
 800c284:	0800e225 	.word	0x0800e225
 800c288:	0800e305 	.word	0x0800e305

0800c28c <_Bfree>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	69c6      	ldr	r6, [r0, #28]
 800c290:	4605      	mov	r5, r0
 800c292:	460c      	mov	r4, r1
 800c294:	b976      	cbnz	r6, 800c2b4 <_Bfree+0x28>
 800c296:	2010      	movs	r0, #16
 800c298:	f7fc fe0c 	bl	8008eb4 <malloc>
 800c29c:	4602      	mov	r2, r0
 800c29e:	61e8      	str	r0, [r5, #28]
 800c2a0:	b920      	cbnz	r0, 800c2ac <_Bfree+0x20>
 800c2a2:	4b09      	ldr	r3, [pc, #36]	@ (800c2c8 <_Bfree+0x3c>)
 800c2a4:	4809      	ldr	r0, [pc, #36]	@ (800c2cc <_Bfree+0x40>)
 800c2a6:	218f      	movs	r1, #143	@ 0x8f
 800c2a8:	f001 fa9e 	bl	800d7e8 <__assert_func>
 800c2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2b0:	6006      	str	r6, [r0, #0]
 800c2b2:	60c6      	str	r6, [r0, #12]
 800c2b4:	b13c      	cbz	r4, 800c2c6 <_Bfree+0x3a>
 800c2b6:	69eb      	ldr	r3, [r5, #28]
 800c2b8:	6862      	ldr	r2, [r4, #4]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2c0:	6021      	str	r1, [r4, #0]
 800c2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	0800e225 	.word	0x0800e225
 800c2cc:	0800e305 	.word	0x0800e305

0800c2d0 <__multadd>:
 800c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d4:	690d      	ldr	r5, [r1, #16]
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	460c      	mov	r4, r1
 800c2da:	461e      	mov	r6, r3
 800c2dc:	f101 0c14 	add.w	ip, r1, #20
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2e6:	b299      	uxth	r1, r3
 800c2e8:	fb02 6101 	mla	r1, r2, r1, r6
 800c2ec:	0c1e      	lsrs	r6, r3, #16
 800c2ee:	0c0b      	lsrs	r3, r1, #16
 800c2f0:	fb02 3306 	mla	r3, r2, r6, r3
 800c2f4:	b289      	uxth	r1, r1
 800c2f6:	3001      	adds	r0, #1
 800c2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2fc:	4285      	cmp	r5, r0
 800c2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800c302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c306:	dcec      	bgt.n	800c2e2 <__multadd+0x12>
 800c308:	b30e      	cbz	r6, 800c34e <__multadd+0x7e>
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dc19      	bgt.n	800c344 <__multadd+0x74>
 800c310:	6861      	ldr	r1, [r4, #4]
 800c312:	4638      	mov	r0, r7
 800c314:	3101      	adds	r1, #1
 800c316:	f7ff ff79 	bl	800c20c <_Balloc>
 800c31a:	4680      	mov	r8, r0
 800c31c:	b928      	cbnz	r0, 800c32a <__multadd+0x5a>
 800c31e:	4602      	mov	r2, r0
 800c320:	4b0c      	ldr	r3, [pc, #48]	@ (800c354 <__multadd+0x84>)
 800c322:	480d      	ldr	r0, [pc, #52]	@ (800c358 <__multadd+0x88>)
 800c324:	21ba      	movs	r1, #186	@ 0xba
 800c326:	f001 fa5f 	bl	800d7e8 <__assert_func>
 800c32a:	6922      	ldr	r2, [r4, #16]
 800c32c:	3202      	adds	r2, #2
 800c32e:	f104 010c 	add.w	r1, r4, #12
 800c332:	0092      	lsls	r2, r2, #2
 800c334:	300c      	adds	r0, #12
 800c336:	f7fe fd68 	bl	800ae0a <memcpy>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7ff ffa5 	bl	800c28c <_Bfree>
 800c342:	4644      	mov	r4, r8
 800c344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c348:	3501      	adds	r5, #1
 800c34a:	615e      	str	r6, [r3, #20]
 800c34c:	6125      	str	r5, [r4, #16]
 800c34e:	4620      	mov	r0, r4
 800c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c354:	0800e294 	.word	0x0800e294
 800c358:	0800e305 	.word	0x0800e305

0800c35c <__s2b>:
 800c35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c360:	460c      	mov	r4, r1
 800c362:	4615      	mov	r5, r2
 800c364:	461f      	mov	r7, r3
 800c366:	2209      	movs	r2, #9
 800c368:	3308      	adds	r3, #8
 800c36a:	4606      	mov	r6, r0
 800c36c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c370:	2100      	movs	r1, #0
 800c372:	2201      	movs	r2, #1
 800c374:	429a      	cmp	r2, r3
 800c376:	db09      	blt.n	800c38c <__s2b+0x30>
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff ff47 	bl	800c20c <_Balloc>
 800c37e:	b940      	cbnz	r0, 800c392 <__s2b+0x36>
 800c380:	4602      	mov	r2, r0
 800c382:	4b19      	ldr	r3, [pc, #100]	@ (800c3e8 <__s2b+0x8c>)
 800c384:	4819      	ldr	r0, [pc, #100]	@ (800c3ec <__s2b+0x90>)
 800c386:	21d3      	movs	r1, #211	@ 0xd3
 800c388:	f001 fa2e 	bl	800d7e8 <__assert_func>
 800c38c:	0052      	lsls	r2, r2, #1
 800c38e:	3101      	adds	r1, #1
 800c390:	e7f0      	b.n	800c374 <__s2b+0x18>
 800c392:	9b08      	ldr	r3, [sp, #32]
 800c394:	6143      	str	r3, [r0, #20]
 800c396:	2d09      	cmp	r5, #9
 800c398:	f04f 0301 	mov.w	r3, #1
 800c39c:	6103      	str	r3, [r0, #16]
 800c39e:	dd16      	ble.n	800c3ce <__s2b+0x72>
 800c3a0:	f104 0909 	add.w	r9, r4, #9
 800c3a4:	46c8      	mov	r8, r9
 800c3a6:	442c      	add	r4, r5
 800c3a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3ac:	4601      	mov	r1, r0
 800c3ae:	3b30      	subs	r3, #48	@ 0x30
 800c3b0:	220a      	movs	r2, #10
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f7ff ff8c 	bl	800c2d0 <__multadd>
 800c3b8:	45a0      	cmp	r8, r4
 800c3ba:	d1f5      	bne.n	800c3a8 <__s2b+0x4c>
 800c3bc:	f1a5 0408 	sub.w	r4, r5, #8
 800c3c0:	444c      	add	r4, r9
 800c3c2:	1b2d      	subs	r5, r5, r4
 800c3c4:	1963      	adds	r3, r4, r5
 800c3c6:	42bb      	cmp	r3, r7
 800c3c8:	db04      	blt.n	800c3d4 <__s2b+0x78>
 800c3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ce:	340a      	adds	r4, #10
 800c3d0:	2509      	movs	r5, #9
 800c3d2:	e7f6      	b.n	800c3c2 <__s2b+0x66>
 800c3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3d8:	4601      	mov	r1, r0
 800c3da:	3b30      	subs	r3, #48	@ 0x30
 800c3dc:	220a      	movs	r2, #10
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ff76 	bl	800c2d0 <__multadd>
 800c3e4:	e7ee      	b.n	800c3c4 <__s2b+0x68>
 800c3e6:	bf00      	nop
 800c3e8:	0800e294 	.word	0x0800e294
 800c3ec:	0800e305 	.word	0x0800e305

0800c3f0 <__hi0bits>:
 800c3f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	bf36      	itet	cc
 800c3f8:	0403      	lslcc	r3, r0, #16
 800c3fa:	2000      	movcs	r0, #0
 800c3fc:	2010      	movcc	r0, #16
 800c3fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c402:	bf3c      	itt	cc
 800c404:	021b      	lslcc	r3, r3, #8
 800c406:	3008      	addcc	r0, #8
 800c408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c40c:	bf3c      	itt	cc
 800c40e:	011b      	lslcc	r3, r3, #4
 800c410:	3004      	addcc	r0, #4
 800c412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c416:	bf3c      	itt	cc
 800c418:	009b      	lslcc	r3, r3, #2
 800c41a:	3002      	addcc	r0, #2
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	db05      	blt.n	800c42c <__hi0bits+0x3c>
 800c420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c424:	f100 0001 	add.w	r0, r0, #1
 800c428:	bf08      	it	eq
 800c42a:	2020      	moveq	r0, #32
 800c42c:	4770      	bx	lr

0800c42e <__lo0bits>:
 800c42e:	6803      	ldr	r3, [r0, #0]
 800c430:	4602      	mov	r2, r0
 800c432:	f013 0007 	ands.w	r0, r3, #7
 800c436:	d00b      	beq.n	800c450 <__lo0bits+0x22>
 800c438:	07d9      	lsls	r1, r3, #31
 800c43a:	d421      	bmi.n	800c480 <__lo0bits+0x52>
 800c43c:	0798      	lsls	r0, r3, #30
 800c43e:	bf49      	itett	mi
 800c440:	085b      	lsrmi	r3, r3, #1
 800c442:	089b      	lsrpl	r3, r3, #2
 800c444:	2001      	movmi	r0, #1
 800c446:	6013      	strmi	r3, [r2, #0]
 800c448:	bf5c      	itt	pl
 800c44a:	6013      	strpl	r3, [r2, #0]
 800c44c:	2002      	movpl	r0, #2
 800c44e:	4770      	bx	lr
 800c450:	b299      	uxth	r1, r3
 800c452:	b909      	cbnz	r1, 800c458 <__lo0bits+0x2a>
 800c454:	0c1b      	lsrs	r3, r3, #16
 800c456:	2010      	movs	r0, #16
 800c458:	b2d9      	uxtb	r1, r3
 800c45a:	b909      	cbnz	r1, 800c460 <__lo0bits+0x32>
 800c45c:	3008      	adds	r0, #8
 800c45e:	0a1b      	lsrs	r3, r3, #8
 800c460:	0719      	lsls	r1, r3, #28
 800c462:	bf04      	itt	eq
 800c464:	091b      	lsreq	r3, r3, #4
 800c466:	3004      	addeq	r0, #4
 800c468:	0799      	lsls	r1, r3, #30
 800c46a:	bf04      	itt	eq
 800c46c:	089b      	lsreq	r3, r3, #2
 800c46e:	3002      	addeq	r0, #2
 800c470:	07d9      	lsls	r1, r3, #31
 800c472:	d403      	bmi.n	800c47c <__lo0bits+0x4e>
 800c474:	085b      	lsrs	r3, r3, #1
 800c476:	f100 0001 	add.w	r0, r0, #1
 800c47a:	d003      	beq.n	800c484 <__lo0bits+0x56>
 800c47c:	6013      	str	r3, [r2, #0]
 800c47e:	4770      	bx	lr
 800c480:	2000      	movs	r0, #0
 800c482:	4770      	bx	lr
 800c484:	2020      	movs	r0, #32
 800c486:	4770      	bx	lr

0800c488 <__i2b>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	460c      	mov	r4, r1
 800c48c:	2101      	movs	r1, #1
 800c48e:	f7ff febd 	bl	800c20c <_Balloc>
 800c492:	4602      	mov	r2, r0
 800c494:	b928      	cbnz	r0, 800c4a2 <__i2b+0x1a>
 800c496:	4b05      	ldr	r3, [pc, #20]	@ (800c4ac <__i2b+0x24>)
 800c498:	4805      	ldr	r0, [pc, #20]	@ (800c4b0 <__i2b+0x28>)
 800c49a:	f240 1145 	movw	r1, #325	@ 0x145
 800c49e:	f001 f9a3 	bl	800d7e8 <__assert_func>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	6144      	str	r4, [r0, #20]
 800c4a6:	6103      	str	r3, [r0, #16]
 800c4a8:	bd10      	pop	{r4, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0800e294 	.word	0x0800e294
 800c4b0:	0800e305 	.word	0x0800e305

0800c4b4 <__multiply>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	690a      	ldr	r2, [r1, #16]
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	bfa8      	it	ge
 800c4c2:	4623      	movge	r3, r4
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	bfa4      	itt	ge
 800c4c8:	460c      	movge	r4, r1
 800c4ca:	461f      	movge	r7, r3
 800c4cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c4d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c4d4:	68a3      	ldr	r3, [r4, #8]
 800c4d6:	6861      	ldr	r1, [r4, #4]
 800c4d8:	eb0a 0609 	add.w	r6, sl, r9
 800c4dc:	42b3      	cmp	r3, r6
 800c4de:	b085      	sub	sp, #20
 800c4e0:	bfb8      	it	lt
 800c4e2:	3101      	addlt	r1, #1
 800c4e4:	f7ff fe92 	bl	800c20c <_Balloc>
 800c4e8:	b930      	cbnz	r0, 800c4f8 <__multiply+0x44>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	4b44      	ldr	r3, [pc, #272]	@ (800c600 <__multiply+0x14c>)
 800c4ee:	4845      	ldr	r0, [pc, #276]	@ (800c604 <__multiply+0x150>)
 800c4f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4f4:	f001 f978 	bl	800d7e8 <__assert_func>
 800c4f8:	f100 0514 	add.w	r5, r0, #20
 800c4fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c500:	462b      	mov	r3, r5
 800c502:	2200      	movs	r2, #0
 800c504:	4543      	cmp	r3, r8
 800c506:	d321      	bcc.n	800c54c <__multiply+0x98>
 800c508:	f107 0114 	add.w	r1, r7, #20
 800c50c:	f104 0214 	add.w	r2, r4, #20
 800c510:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c514:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	1b13      	subs	r3, r2, r4
 800c51c:	3b15      	subs	r3, #21
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	3304      	adds	r3, #4
 800c524:	f104 0715 	add.w	r7, r4, #21
 800c528:	42ba      	cmp	r2, r7
 800c52a:	bf38      	it	cc
 800c52c:	2304      	movcc	r3, #4
 800c52e:	9301      	str	r3, [sp, #4]
 800c530:	9b02      	ldr	r3, [sp, #8]
 800c532:	9103      	str	r1, [sp, #12]
 800c534:	428b      	cmp	r3, r1
 800c536:	d80c      	bhi.n	800c552 <__multiply+0x9e>
 800c538:	2e00      	cmp	r6, #0
 800c53a:	dd03      	ble.n	800c544 <__multiply+0x90>
 800c53c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c540:	2b00      	cmp	r3, #0
 800c542:	d05b      	beq.n	800c5fc <__multiply+0x148>
 800c544:	6106      	str	r6, [r0, #16]
 800c546:	b005      	add	sp, #20
 800c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54c:	f843 2b04 	str.w	r2, [r3], #4
 800c550:	e7d8      	b.n	800c504 <__multiply+0x50>
 800c552:	f8b1 a000 	ldrh.w	sl, [r1]
 800c556:	f1ba 0f00 	cmp.w	sl, #0
 800c55a:	d024      	beq.n	800c5a6 <__multiply+0xf2>
 800c55c:	f104 0e14 	add.w	lr, r4, #20
 800c560:	46a9      	mov	r9, r5
 800c562:	f04f 0c00 	mov.w	ip, #0
 800c566:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c56a:	f8d9 3000 	ldr.w	r3, [r9]
 800c56e:	fa1f fb87 	uxth.w	fp, r7
 800c572:	b29b      	uxth	r3, r3
 800c574:	fb0a 330b 	mla	r3, sl, fp, r3
 800c578:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c57c:	f8d9 7000 	ldr.w	r7, [r9]
 800c580:	4463      	add	r3, ip
 800c582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c586:	fb0a c70b 	mla	r7, sl, fp, ip
 800c58a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c58e:	b29b      	uxth	r3, r3
 800c590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c594:	4572      	cmp	r2, lr
 800c596:	f849 3b04 	str.w	r3, [r9], #4
 800c59a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c59e:	d8e2      	bhi.n	800c566 <__multiply+0xb2>
 800c5a0:	9b01      	ldr	r3, [sp, #4]
 800c5a2:	f845 c003 	str.w	ip, [r5, r3]
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5ac:	3104      	adds	r1, #4
 800c5ae:	f1b9 0f00 	cmp.w	r9, #0
 800c5b2:	d021      	beq.n	800c5f8 <__multiply+0x144>
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	f104 0c14 	add.w	ip, r4, #20
 800c5ba:	46ae      	mov	lr, r5
 800c5bc:	f04f 0a00 	mov.w	sl, #0
 800c5c0:	f8bc b000 	ldrh.w	fp, [ip]
 800c5c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c5c8:	fb09 770b 	mla	r7, r9, fp, r7
 800c5cc:	4457      	add	r7, sl
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5d4:	f84e 3b04 	str.w	r3, [lr], #4
 800c5d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5e0:	f8be 3000 	ldrh.w	r3, [lr]
 800c5e4:	fb09 330a 	mla	r3, r9, sl, r3
 800c5e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c5ec:	4562      	cmp	r2, ip
 800c5ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5f2:	d8e5      	bhi.n	800c5c0 <__multiply+0x10c>
 800c5f4:	9f01      	ldr	r7, [sp, #4]
 800c5f6:	51eb      	str	r3, [r5, r7]
 800c5f8:	3504      	adds	r5, #4
 800c5fa:	e799      	b.n	800c530 <__multiply+0x7c>
 800c5fc:	3e01      	subs	r6, #1
 800c5fe:	e79b      	b.n	800c538 <__multiply+0x84>
 800c600:	0800e294 	.word	0x0800e294
 800c604:	0800e305 	.word	0x0800e305

0800c608 <__pow5mult>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	4615      	mov	r5, r2
 800c60e:	f012 0203 	ands.w	r2, r2, #3
 800c612:	4607      	mov	r7, r0
 800c614:	460e      	mov	r6, r1
 800c616:	d007      	beq.n	800c628 <__pow5mult+0x20>
 800c618:	4c25      	ldr	r4, [pc, #148]	@ (800c6b0 <__pow5mult+0xa8>)
 800c61a:	3a01      	subs	r2, #1
 800c61c:	2300      	movs	r3, #0
 800c61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c622:	f7ff fe55 	bl	800c2d0 <__multadd>
 800c626:	4606      	mov	r6, r0
 800c628:	10ad      	asrs	r5, r5, #2
 800c62a:	d03d      	beq.n	800c6a8 <__pow5mult+0xa0>
 800c62c:	69fc      	ldr	r4, [r7, #28]
 800c62e:	b97c      	cbnz	r4, 800c650 <__pow5mult+0x48>
 800c630:	2010      	movs	r0, #16
 800c632:	f7fc fc3f 	bl	8008eb4 <malloc>
 800c636:	4602      	mov	r2, r0
 800c638:	61f8      	str	r0, [r7, #28]
 800c63a:	b928      	cbnz	r0, 800c648 <__pow5mult+0x40>
 800c63c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6b4 <__pow5mult+0xac>)
 800c63e:	481e      	ldr	r0, [pc, #120]	@ (800c6b8 <__pow5mult+0xb0>)
 800c640:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c644:	f001 f8d0 	bl	800d7e8 <__assert_func>
 800c648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c64c:	6004      	str	r4, [r0, #0]
 800c64e:	60c4      	str	r4, [r0, #12]
 800c650:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c658:	b94c      	cbnz	r4, 800c66e <__pow5mult+0x66>
 800c65a:	f240 2171 	movw	r1, #625	@ 0x271
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff ff12 	bl	800c488 <__i2b>
 800c664:	2300      	movs	r3, #0
 800c666:	f8c8 0008 	str.w	r0, [r8, #8]
 800c66a:	4604      	mov	r4, r0
 800c66c:	6003      	str	r3, [r0, #0]
 800c66e:	f04f 0900 	mov.w	r9, #0
 800c672:	07eb      	lsls	r3, r5, #31
 800c674:	d50a      	bpl.n	800c68c <__pow5mult+0x84>
 800c676:	4631      	mov	r1, r6
 800c678:	4622      	mov	r2, r4
 800c67a:	4638      	mov	r0, r7
 800c67c:	f7ff ff1a 	bl	800c4b4 <__multiply>
 800c680:	4631      	mov	r1, r6
 800c682:	4680      	mov	r8, r0
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff fe01 	bl	800c28c <_Bfree>
 800c68a:	4646      	mov	r6, r8
 800c68c:	106d      	asrs	r5, r5, #1
 800c68e:	d00b      	beq.n	800c6a8 <__pow5mult+0xa0>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	b938      	cbnz	r0, 800c6a4 <__pow5mult+0x9c>
 800c694:	4622      	mov	r2, r4
 800c696:	4621      	mov	r1, r4
 800c698:	4638      	mov	r0, r7
 800c69a:	f7ff ff0b 	bl	800c4b4 <__multiply>
 800c69e:	6020      	str	r0, [r4, #0]
 800c6a0:	f8c0 9000 	str.w	r9, [r0]
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	e7e4      	b.n	800c672 <__pow5mult+0x6a>
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ae:	bf00      	nop
 800c6b0:	0800e360 	.word	0x0800e360
 800c6b4:	0800e225 	.word	0x0800e225
 800c6b8:	0800e305 	.word	0x0800e305

0800c6bc <__lshift>:
 800c6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	6849      	ldr	r1, [r1, #4]
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6ca:	68a3      	ldr	r3, [r4, #8]
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	4691      	mov	r9, r2
 800c6d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6d4:	f108 0601 	add.w	r6, r8, #1
 800c6d8:	42b3      	cmp	r3, r6
 800c6da:	db0b      	blt.n	800c6f4 <__lshift+0x38>
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff fd95 	bl	800c20c <_Balloc>
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	b948      	cbnz	r0, 800c6fa <__lshift+0x3e>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	4b28      	ldr	r3, [pc, #160]	@ (800c78c <__lshift+0xd0>)
 800c6ea:	4829      	ldr	r0, [pc, #164]	@ (800c790 <__lshift+0xd4>)
 800c6ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6f0:	f001 f87a 	bl	800d7e8 <__assert_func>
 800c6f4:	3101      	adds	r1, #1
 800c6f6:	005b      	lsls	r3, r3, #1
 800c6f8:	e7ee      	b.n	800c6d8 <__lshift+0x1c>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f100 0114 	add.w	r1, r0, #20
 800c700:	f100 0210 	add.w	r2, r0, #16
 800c704:	4618      	mov	r0, r3
 800c706:	4553      	cmp	r3, sl
 800c708:	db33      	blt.n	800c772 <__lshift+0xb6>
 800c70a:	6920      	ldr	r0, [r4, #16]
 800c70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c710:	f104 0314 	add.w	r3, r4, #20
 800c714:	f019 091f 	ands.w	r9, r9, #31
 800c718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c71c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c720:	d02b      	beq.n	800c77a <__lshift+0xbe>
 800c722:	f1c9 0e20 	rsb	lr, r9, #32
 800c726:	468a      	mov	sl, r1
 800c728:	2200      	movs	r2, #0
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	fa00 f009 	lsl.w	r0, r0, r9
 800c730:	4310      	orrs	r0, r2
 800c732:	f84a 0b04 	str.w	r0, [sl], #4
 800c736:	f853 2b04 	ldr.w	r2, [r3], #4
 800c73a:	459c      	cmp	ip, r3
 800c73c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c740:	d8f3      	bhi.n	800c72a <__lshift+0x6e>
 800c742:	ebac 0304 	sub.w	r3, ip, r4
 800c746:	3b15      	subs	r3, #21
 800c748:	f023 0303 	bic.w	r3, r3, #3
 800c74c:	3304      	adds	r3, #4
 800c74e:	f104 0015 	add.w	r0, r4, #21
 800c752:	4584      	cmp	ip, r0
 800c754:	bf38      	it	cc
 800c756:	2304      	movcc	r3, #4
 800c758:	50ca      	str	r2, [r1, r3]
 800c75a:	b10a      	cbz	r2, 800c760 <__lshift+0xa4>
 800c75c:	f108 0602 	add.w	r6, r8, #2
 800c760:	3e01      	subs	r6, #1
 800c762:	4638      	mov	r0, r7
 800c764:	612e      	str	r6, [r5, #16]
 800c766:	4621      	mov	r1, r4
 800c768:	f7ff fd90 	bl	800c28c <_Bfree>
 800c76c:	4628      	mov	r0, r5
 800c76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c772:	f842 0f04 	str.w	r0, [r2, #4]!
 800c776:	3301      	adds	r3, #1
 800c778:	e7c5      	b.n	800c706 <__lshift+0x4a>
 800c77a:	3904      	subs	r1, #4
 800c77c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c780:	f841 2f04 	str.w	r2, [r1, #4]!
 800c784:	459c      	cmp	ip, r3
 800c786:	d8f9      	bhi.n	800c77c <__lshift+0xc0>
 800c788:	e7ea      	b.n	800c760 <__lshift+0xa4>
 800c78a:	bf00      	nop
 800c78c:	0800e294 	.word	0x0800e294
 800c790:	0800e305 	.word	0x0800e305

0800c794 <__mcmp>:
 800c794:	690a      	ldr	r2, [r1, #16]
 800c796:	4603      	mov	r3, r0
 800c798:	6900      	ldr	r0, [r0, #16]
 800c79a:	1a80      	subs	r0, r0, r2
 800c79c:	b530      	push	{r4, r5, lr}
 800c79e:	d10e      	bne.n	800c7be <__mcmp+0x2a>
 800c7a0:	3314      	adds	r3, #20
 800c7a2:	3114      	adds	r1, #20
 800c7a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7b4:	4295      	cmp	r5, r2
 800c7b6:	d003      	beq.n	800c7c0 <__mcmp+0x2c>
 800c7b8:	d205      	bcs.n	800c7c6 <__mcmp+0x32>
 800c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c7be:	bd30      	pop	{r4, r5, pc}
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d3f3      	bcc.n	800c7ac <__mcmp+0x18>
 800c7c4:	e7fb      	b.n	800c7be <__mcmp+0x2a>
 800c7c6:	2001      	movs	r0, #1
 800c7c8:	e7f9      	b.n	800c7be <__mcmp+0x2a>
	...

0800c7cc <__mdiff>:
 800c7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	4689      	mov	r9, r1
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4648      	mov	r0, r9
 800c7d8:	4614      	mov	r4, r2
 800c7da:	f7ff ffdb 	bl	800c794 <__mcmp>
 800c7de:	1e05      	subs	r5, r0, #0
 800c7e0:	d112      	bne.n	800c808 <__mdiff+0x3c>
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	f7ff fd11 	bl	800c20c <_Balloc>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	b928      	cbnz	r0, 800c7fa <__mdiff+0x2e>
 800c7ee:	4b3f      	ldr	r3, [pc, #252]	@ (800c8ec <__mdiff+0x120>)
 800c7f0:	f240 2137 	movw	r1, #567	@ 0x237
 800c7f4:	483e      	ldr	r0, [pc, #248]	@ (800c8f0 <__mdiff+0x124>)
 800c7f6:	f000 fff7 	bl	800d7e8 <__assert_func>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c800:	4610      	mov	r0, r2
 800c802:	b003      	add	sp, #12
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	bfbc      	itt	lt
 800c80a:	464b      	movlt	r3, r9
 800c80c:	46a1      	movlt	r9, r4
 800c80e:	4630      	mov	r0, r6
 800c810:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c814:	bfba      	itte	lt
 800c816:	461c      	movlt	r4, r3
 800c818:	2501      	movlt	r5, #1
 800c81a:	2500      	movge	r5, #0
 800c81c:	f7ff fcf6 	bl	800c20c <_Balloc>
 800c820:	4602      	mov	r2, r0
 800c822:	b918      	cbnz	r0, 800c82c <__mdiff+0x60>
 800c824:	4b31      	ldr	r3, [pc, #196]	@ (800c8ec <__mdiff+0x120>)
 800c826:	f240 2145 	movw	r1, #581	@ 0x245
 800c82a:	e7e3      	b.n	800c7f4 <__mdiff+0x28>
 800c82c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c830:	6926      	ldr	r6, [r4, #16]
 800c832:	60c5      	str	r5, [r0, #12]
 800c834:	f109 0310 	add.w	r3, r9, #16
 800c838:	f109 0514 	add.w	r5, r9, #20
 800c83c:	f104 0e14 	add.w	lr, r4, #20
 800c840:	f100 0b14 	add.w	fp, r0, #20
 800c844:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c848:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	46d9      	mov	r9, fp
 800c850:	f04f 0c00 	mov.w	ip, #0
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c85a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	fa1f f38a 	uxth.w	r3, sl
 800c864:	4619      	mov	r1, r3
 800c866:	b283      	uxth	r3, r0
 800c868:	1acb      	subs	r3, r1, r3
 800c86a:	0c00      	lsrs	r0, r0, #16
 800c86c:	4463      	add	r3, ip
 800c86e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c872:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c876:	b29b      	uxth	r3, r3
 800c878:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c87c:	4576      	cmp	r6, lr
 800c87e:	f849 3b04 	str.w	r3, [r9], #4
 800c882:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c886:	d8e5      	bhi.n	800c854 <__mdiff+0x88>
 800c888:	1b33      	subs	r3, r6, r4
 800c88a:	3b15      	subs	r3, #21
 800c88c:	f023 0303 	bic.w	r3, r3, #3
 800c890:	3415      	adds	r4, #21
 800c892:	3304      	adds	r3, #4
 800c894:	42a6      	cmp	r6, r4
 800c896:	bf38      	it	cc
 800c898:	2304      	movcc	r3, #4
 800c89a:	441d      	add	r5, r3
 800c89c:	445b      	add	r3, fp
 800c89e:	461e      	mov	r6, r3
 800c8a0:	462c      	mov	r4, r5
 800c8a2:	4544      	cmp	r4, r8
 800c8a4:	d30e      	bcc.n	800c8c4 <__mdiff+0xf8>
 800c8a6:	f108 0103 	add.w	r1, r8, #3
 800c8aa:	1b49      	subs	r1, r1, r5
 800c8ac:	f021 0103 	bic.w	r1, r1, #3
 800c8b0:	3d03      	subs	r5, #3
 800c8b2:	45a8      	cmp	r8, r5
 800c8b4:	bf38      	it	cc
 800c8b6:	2100      	movcc	r1, #0
 800c8b8:	440b      	add	r3, r1
 800c8ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8be:	b191      	cbz	r1, 800c8e6 <__mdiff+0x11a>
 800c8c0:	6117      	str	r7, [r2, #16]
 800c8c2:	e79d      	b.n	800c800 <__mdiff+0x34>
 800c8c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8c8:	46e6      	mov	lr, ip
 800c8ca:	0c08      	lsrs	r0, r1, #16
 800c8cc:	fa1c fc81 	uxtah	ip, ip, r1
 800c8d0:	4471      	add	r1, lr
 800c8d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8d6:	b289      	uxth	r1, r1
 800c8d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8dc:	f846 1b04 	str.w	r1, [r6], #4
 800c8e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8e4:	e7dd      	b.n	800c8a2 <__mdiff+0xd6>
 800c8e6:	3f01      	subs	r7, #1
 800c8e8:	e7e7      	b.n	800c8ba <__mdiff+0xee>
 800c8ea:	bf00      	nop
 800c8ec:	0800e294 	.word	0x0800e294
 800c8f0:	0800e305 	.word	0x0800e305

0800c8f4 <__ulp>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	ed8d 0b00 	vstr	d0, [sp]
 800c8fa:	9a01      	ldr	r2, [sp, #4]
 800c8fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c93c <__ulp+0x48>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c904:	2b00      	cmp	r3, #0
 800c906:	dc08      	bgt.n	800c91a <__ulp+0x26>
 800c908:	425b      	negs	r3, r3
 800c90a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c90e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c912:	da04      	bge.n	800c91e <__ulp+0x2a>
 800c914:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c918:	4113      	asrs	r3, r2
 800c91a:	2200      	movs	r2, #0
 800c91c:	e008      	b.n	800c930 <__ulp+0x3c>
 800c91e:	f1a2 0314 	sub.w	r3, r2, #20
 800c922:	2b1e      	cmp	r3, #30
 800c924:	bfda      	itte	le
 800c926:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c92a:	40da      	lsrle	r2, r3
 800c92c:	2201      	movgt	r2, #1
 800c92e:	2300      	movs	r3, #0
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	ec41 0b10 	vmov	d0, r0, r1
 800c938:	b002      	add	sp, #8
 800c93a:	4770      	bx	lr
 800c93c:	7ff00000 	.word	0x7ff00000

0800c940 <__b2d>:
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	6906      	ldr	r6, [r0, #16]
 800c946:	f100 0814 	add.w	r8, r0, #20
 800c94a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c94e:	1f37      	subs	r7, r6, #4
 800c950:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c954:	4610      	mov	r0, r2
 800c956:	f7ff fd4b 	bl	800c3f0 <__hi0bits>
 800c95a:	f1c0 0320 	rsb	r3, r0, #32
 800c95e:	280a      	cmp	r0, #10
 800c960:	600b      	str	r3, [r1, #0]
 800c962:	491b      	ldr	r1, [pc, #108]	@ (800c9d0 <__b2d+0x90>)
 800c964:	dc15      	bgt.n	800c992 <__b2d+0x52>
 800c966:	f1c0 0c0b 	rsb	ip, r0, #11
 800c96a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c96e:	45b8      	cmp	r8, r7
 800c970:	ea43 0501 	orr.w	r5, r3, r1
 800c974:	bf34      	ite	cc
 800c976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c97a:	2300      	movcs	r3, #0
 800c97c:	3015      	adds	r0, #21
 800c97e:	fa02 f000 	lsl.w	r0, r2, r0
 800c982:	fa23 f30c 	lsr.w	r3, r3, ip
 800c986:	4303      	orrs	r3, r0
 800c988:	461c      	mov	r4, r3
 800c98a:	ec45 4b10 	vmov	d0, r4, r5
 800c98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c992:	45b8      	cmp	r8, r7
 800c994:	bf3a      	itte	cc
 800c996:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c99a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c99e:	2300      	movcs	r3, #0
 800c9a0:	380b      	subs	r0, #11
 800c9a2:	d012      	beq.n	800c9ca <__b2d+0x8a>
 800c9a4:	f1c0 0120 	rsb	r1, r0, #32
 800c9a8:	fa23 f401 	lsr.w	r4, r3, r1
 800c9ac:	4082      	lsls	r2, r0
 800c9ae:	4322      	orrs	r2, r4
 800c9b0:	4547      	cmp	r7, r8
 800c9b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c9b6:	bf8c      	ite	hi
 800c9b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9bc:	2200      	movls	r2, #0
 800c9be:	4083      	lsls	r3, r0
 800c9c0:	40ca      	lsrs	r2, r1
 800c9c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	e7de      	b.n	800c988 <__b2d+0x48>
 800c9ca:	ea42 0501 	orr.w	r5, r2, r1
 800c9ce:	e7db      	b.n	800c988 <__b2d+0x48>
 800c9d0:	3ff00000 	.word	0x3ff00000

0800c9d4 <__d2b>:
 800c9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9d8:	460f      	mov	r7, r1
 800c9da:	2101      	movs	r1, #1
 800c9dc:	ec59 8b10 	vmov	r8, r9, d0
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	f7ff fc13 	bl	800c20c <_Balloc>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	b930      	cbnz	r0, 800c9f8 <__d2b+0x24>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	4b23      	ldr	r3, [pc, #140]	@ (800ca7c <__d2b+0xa8>)
 800c9ee:	4824      	ldr	r0, [pc, #144]	@ (800ca80 <__d2b+0xac>)
 800c9f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9f4:	f000 fef8 	bl	800d7e8 <__assert_func>
 800c9f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca00:	b10d      	cbz	r5, 800ca06 <__d2b+0x32>
 800ca02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	f1b8 0300 	subs.w	r3, r8, #0
 800ca0c:	d023      	beq.n	800ca56 <__d2b+0x82>
 800ca0e:	4668      	mov	r0, sp
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	f7ff fd0c 	bl	800c42e <__lo0bits>
 800ca16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca1a:	b1d0      	cbz	r0, 800ca52 <__d2b+0x7e>
 800ca1c:	f1c0 0320 	rsb	r3, r0, #32
 800ca20:	fa02 f303 	lsl.w	r3, r2, r3
 800ca24:	430b      	orrs	r3, r1
 800ca26:	40c2      	lsrs	r2, r0
 800ca28:	6163      	str	r3, [r4, #20]
 800ca2a:	9201      	str	r2, [sp, #4]
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	61a3      	str	r3, [r4, #24]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	bf0c      	ite	eq
 800ca34:	2201      	moveq	r2, #1
 800ca36:	2202      	movne	r2, #2
 800ca38:	6122      	str	r2, [r4, #16]
 800ca3a:	b1a5      	cbz	r5, 800ca66 <__d2b+0x92>
 800ca3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca40:	4405      	add	r5, r0
 800ca42:	603d      	str	r5, [r7, #0]
 800ca44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca48:	6030      	str	r0, [r6, #0]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	b003      	add	sp, #12
 800ca4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca52:	6161      	str	r1, [r4, #20]
 800ca54:	e7ea      	b.n	800ca2c <__d2b+0x58>
 800ca56:	a801      	add	r0, sp, #4
 800ca58:	f7ff fce9 	bl	800c42e <__lo0bits>
 800ca5c:	9b01      	ldr	r3, [sp, #4]
 800ca5e:	6163      	str	r3, [r4, #20]
 800ca60:	3020      	adds	r0, #32
 800ca62:	2201      	movs	r2, #1
 800ca64:	e7e8      	b.n	800ca38 <__d2b+0x64>
 800ca66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca6e:	6038      	str	r0, [r7, #0]
 800ca70:	6918      	ldr	r0, [r3, #16]
 800ca72:	f7ff fcbd 	bl	800c3f0 <__hi0bits>
 800ca76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca7a:	e7e5      	b.n	800ca48 <__d2b+0x74>
 800ca7c:	0800e294 	.word	0x0800e294
 800ca80:	0800e305 	.word	0x0800e305

0800ca84 <__ratio>:
 800ca84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	b085      	sub	sp, #20
 800ca8a:	e9cd 1000 	strd	r1, r0, [sp]
 800ca8e:	a902      	add	r1, sp, #8
 800ca90:	f7ff ff56 	bl	800c940 <__b2d>
 800ca94:	9800      	ldr	r0, [sp, #0]
 800ca96:	a903      	add	r1, sp, #12
 800ca98:	ec55 4b10 	vmov	r4, r5, d0
 800ca9c:	f7ff ff50 	bl	800c940 <__b2d>
 800caa0:	9b01      	ldr	r3, [sp, #4]
 800caa2:	6919      	ldr	r1, [r3, #16]
 800caa4:	9b00      	ldr	r3, [sp, #0]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	1ac9      	subs	r1, r1, r3
 800caaa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	ec5b ab10 	vmov	sl, fp, d0
 800cab4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cab8:	2b00      	cmp	r3, #0
 800caba:	bfce      	itee	gt
 800cabc:	462a      	movgt	r2, r5
 800cabe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cac2:	465a      	movle	r2, fp
 800cac4:	462f      	mov	r7, r5
 800cac6:	46d9      	mov	r9, fp
 800cac8:	bfcc      	ite	gt
 800caca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cace:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cad2:	464b      	mov	r3, r9
 800cad4:	4652      	mov	r2, sl
 800cad6:	4620      	mov	r0, r4
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f3 feb7 	bl	800084c <__aeabi_ddiv>
 800cade:	ec41 0b10 	vmov	d0, r0, r1
 800cae2:	b005      	add	sp, #20
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cae8 <__copybits>:
 800cae8:	3901      	subs	r1, #1
 800caea:	b570      	push	{r4, r5, r6, lr}
 800caec:	1149      	asrs	r1, r1, #5
 800caee:	6914      	ldr	r4, [r2, #16]
 800caf0:	3101      	adds	r1, #1
 800caf2:	f102 0314 	add.w	r3, r2, #20
 800caf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cafa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cafe:	1f05      	subs	r5, r0, #4
 800cb00:	42a3      	cmp	r3, r4
 800cb02:	d30c      	bcc.n	800cb1e <__copybits+0x36>
 800cb04:	1aa3      	subs	r3, r4, r2
 800cb06:	3b11      	subs	r3, #17
 800cb08:	f023 0303 	bic.w	r3, r3, #3
 800cb0c:	3211      	adds	r2, #17
 800cb0e:	42a2      	cmp	r2, r4
 800cb10:	bf88      	it	hi
 800cb12:	2300      	movhi	r3, #0
 800cb14:	4418      	add	r0, r3
 800cb16:	2300      	movs	r3, #0
 800cb18:	4288      	cmp	r0, r1
 800cb1a:	d305      	bcc.n	800cb28 <__copybits+0x40>
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb22:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb26:	e7eb      	b.n	800cb00 <__copybits+0x18>
 800cb28:	f840 3b04 	str.w	r3, [r0], #4
 800cb2c:	e7f4      	b.n	800cb18 <__copybits+0x30>

0800cb2e <__any_on>:
 800cb2e:	f100 0214 	add.w	r2, r0, #20
 800cb32:	6900      	ldr	r0, [r0, #16]
 800cb34:	114b      	asrs	r3, r1, #5
 800cb36:	4298      	cmp	r0, r3
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	db11      	blt.n	800cb60 <__any_on+0x32>
 800cb3c:	dd0a      	ble.n	800cb54 <__any_on+0x26>
 800cb3e:	f011 011f 	ands.w	r1, r1, #31
 800cb42:	d007      	beq.n	800cb54 <__any_on+0x26>
 800cb44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb48:	fa24 f001 	lsr.w	r0, r4, r1
 800cb4c:	fa00 f101 	lsl.w	r1, r0, r1
 800cb50:	428c      	cmp	r4, r1
 800cb52:	d10b      	bne.n	800cb6c <__any_on+0x3e>
 800cb54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d803      	bhi.n	800cb64 <__any_on+0x36>
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	bd10      	pop	{r4, pc}
 800cb60:	4603      	mov	r3, r0
 800cb62:	e7f7      	b.n	800cb54 <__any_on+0x26>
 800cb64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb68:	2900      	cmp	r1, #0
 800cb6a:	d0f5      	beq.n	800cb58 <__any_on+0x2a>
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	e7f6      	b.n	800cb5e <__any_on+0x30>

0800cb70 <_malloc_usable_size_r>:
 800cb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb74:	1f18      	subs	r0, r3, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bfbc      	itt	lt
 800cb7a:	580b      	ldrlt	r3, [r1, r0]
 800cb7c:	18c0      	addlt	r0, r0, r3
 800cb7e:	4770      	bx	lr

0800cb80 <_strtol_l.constprop.0>:
 800cb80:	2b24      	cmp	r3, #36	@ 0x24
 800cb82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb86:	4686      	mov	lr, r0
 800cb88:	4690      	mov	r8, r2
 800cb8a:	d801      	bhi.n	800cb90 <_strtol_l.constprop.0+0x10>
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d106      	bne.n	800cb9e <_strtol_l.constprop.0+0x1e>
 800cb90:	f7fe f90e 	bl	800adb0 <__errno>
 800cb94:	2316      	movs	r3, #22
 800cb96:	6003      	str	r3, [r0, #0]
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9e:	4834      	ldr	r0, [pc, #208]	@ (800cc70 <_strtol_l.constprop.0+0xf0>)
 800cba0:	460d      	mov	r5, r1
 800cba2:	462a      	mov	r2, r5
 800cba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cba8:	5d06      	ldrb	r6, [r0, r4]
 800cbaa:	f016 0608 	ands.w	r6, r6, #8
 800cbae:	d1f8      	bne.n	800cba2 <_strtol_l.constprop.0+0x22>
 800cbb0:	2c2d      	cmp	r4, #45	@ 0x2d
 800cbb2:	d12d      	bne.n	800cc10 <_strtol_l.constprop.0+0x90>
 800cbb4:	782c      	ldrb	r4, [r5, #0]
 800cbb6:	2601      	movs	r6, #1
 800cbb8:	1c95      	adds	r5, r2, #2
 800cbba:	f033 0210 	bics.w	r2, r3, #16
 800cbbe:	d109      	bne.n	800cbd4 <_strtol_l.constprop.0+0x54>
 800cbc0:	2c30      	cmp	r4, #48	@ 0x30
 800cbc2:	d12a      	bne.n	800cc1a <_strtol_l.constprop.0+0x9a>
 800cbc4:	782a      	ldrb	r2, [r5, #0]
 800cbc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cbca:	2a58      	cmp	r2, #88	@ 0x58
 800cbcc:	d125      	bne.n	800cc1a <_strtol_l.constprop.0+0x9a>
 800cbce:	786c      	ldrb	r4, [r5, #1]
 800cbd0:	2310      	movs	r3, #16
 800cbd2:	3502      	adds	r5, #2
 800cbd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cbd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cbdc:	2200      	movs	r2, #0
 800cbde:	fbbc f9f3 	udiv	r9, ip, r3
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	fb03 ca19 	mls	sl, r3, r9, ip
 800cbe8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cbec:	2f09      	cmp	r7, #9
 800cbee:	d81b      	bhi.n	800cc28 <_strtol_l.constprop.0+0xa8>
 800cbf0:	463c      	mov	r4, r7
 800cbf2:	42a3      	cmp	r3, r4
 800cbf4:	dd27      	ble.n	800cc46 <_strtol_l.constprop.0+0xc6>
 800cbf6:	1c57      	adds	r7, r2, #1
 800cbf8:	d007      	beq.n	800cc0a <_strtol_l.constprop.0+0x8a>
 800cbfa:	4581      	cmp	r9, r0
 800cbfc:	d320      	bcc.n	800cc40 <_strtol_l.constprop.0+0xc0>
 800cbfe:	d101      	bne.n	800cc04 <_strtol_l.constprop.0+0x84>
 800cc00:	45a2      	cmp	sl, r4
 800cc02:	db1d      	blt.n	800cc40 <_strtol_l.constprop.0+0xc0>
 800cc04:	fb00 4003 	mla	r0, r0, r3, r4
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc0e:	e7eb      	b.n	800cbe8 <_strtol_l.constprop.0+0x68>
 800cc10:	2c2b      	cmp	r4, #43	@ 0x2b
 800cc12:	bf04      	itt	eq
 800cc14:	782c      	ldrbeq	r4, [r5, #0]
 800cc16:	1c95      	addeq	r5, r2, #2
 800cc18:	e7cf      	b.n	800cbba <_strtol_l.constprop.0+0x3a>
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1da      	bne.n	800cbd4 <_strtol_l.constprop.0+0x54>
 800cc1e:	2c30      	cmp	r4, #48	@ 0x30
 800cc20:	bf0c      	ite	eq
 800cc22:	2308      	moveq	r3, #8
 800cc24:	230a      	movne	r3, #10
 800cc26:	e7d5      	b.n	800cbd4 <_strtol_l.constprop.0+0x54>
 800cc28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cc2c:	2f19      	cmp	r7, #25
 800cc2e:	d801      	bhi.n	800cc34 <_strtol_l.constprop.0+0xb4>
 800cc30:	3c37      	subs	r4, #55	@ 0x37
 800cc32:	e7de      	b.n	800cbf2 <_strtol_l.constprop.0+0x72>
 800cc34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cc38:	2f19      	cmp	r7, #25
 800cc3a:	d804      	bhi.n	800cc46 <_strtol_l.constprop.0+0xc6>
 800cc3c:	3c57      	subs	r4, #87	@ 0x57
 800cc3e:	e7d8      	b.n	800cbf2 <_strtol_l.constprop.0+0x72>
 800cc40:	f04f 32ff 	mov.w	r2, #4294967295
 800cc44:	e7e1      	b.n	800cc0a <_strtol_l.constprop.0+0x8a>
 800cc46:	1c53      	adds	r3, r2, #1
 800cc48:	d108      	bne.n	800cc5c <_strtol_l.constprop.0+0xdc>
 800cc4a:	2322      	movs	r3, #34	@ 0x22
 800cc4c:	f8ce 3000 	str.w	r3, [lr]
 800cc50:	4660      	mov	r0, ip
 800cc52:	f1b8 0f00 	cmp.w	r8, #0
 800cc56:	d0a0      	beq.n	800cb9a <_strtol_l.constprop.0+0x1a>
 800cc58:	1e69      	subs	r1, r5, #1
 800cc5a:	e006      	b.n	800cc6a <_strtol_l.constprop.0+0xea>
 800cc5c:	b106      	cbz	r6, 800cc60 <_strtol_l.constprop.0+0xe0>
 800cc5e:	4240      	negs	r0, r0
 800cc60:	f1b8 0f00 	cmp.w	r8, #0
 800cc64:	d099      	beq.n	800cb9a <_strtol_l.constprop.0+0x1a>
 800cc66:	2a00      	cmp	r2, #0
 800cc68:	d1f6      	bne.n	800cc58 <_strtol_l.constprop.0+0xd8>
 800cc6a:	f8c8 1000 	str.w	r1, [r8]
 800cc6e:	e794      	b.n	800cb9a <_strtol_l.constprop.0+0x1a>
 800cc70:	0800e0d9 	.word	0x0800e0d9

0800cc74 <_strtol_r>:
 800cc74:	f7ff bf84 	b.w	800cb80 <_strtol_l.constprop.0>

0800cc78 <__ascii_wctomb>:
 800cc78:	4603      	mov	r3, r0
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	b141      	cbz	r1, 800cc90 <__ascii_wctomb+0x18>
 800cc7e:	2aff      	cmp	r2, #255	@ 0xff
 800cc80:	d904      	bls.n	800cc8c <__ascii_wctomb+0x14>
 800cc82:	228a      	movs	r2, #138	@ 0x8a
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8a:	4770      	bx	lr
 800cc8c:	700a      	strb	r2, [r1, #0]
 800cc8e:	2001      	movs	r0, #1
 800cc90:	4770      	bx	lr

0800cc92 <__ssputs_r>:
 800cc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc96:	688e      	ldr	r6, [r1, #8]
 800cc98:	461f      	mov	r7, r3
 800cc9a:	42be      	cmp	r6, r7
 800cc9c:	680b      	ldr	r3, [r1, #0]
 800cc9e:	4682      	mov	sl, r0
 800cca0:	460c      	mov	r4, r1
 800cca2:	4690      	mov	r8, r2
 800cca4:	d82d      	bhi.n	800cd02 <__ssputs_r+0x70>
 800cca6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccaa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccae:	d026      	beq.n	800ccfe <__ssputs_r+0x6c>
 800ccb0:	6965      	ldr	r5, [r4, #20]
 800ccb2:	6909      	ldr	r1, [r1, #16]
 800ccb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccb8:	eba3 0901 	sub.w	r9, r3, r1
 800ccbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccc0:	1c7b      	adds	r3, r7, #1
 800ccc2:	444b      	add	r3, r9
 800ccc4:	106d      	asrs	r5, r5, #1
 800ccc6:	429d      	cmp	r5, r3
 800ccc8:	bf38      	it	cc
 800ccca:	461d      	movcc	r5, r3
 800cccc:	0553      	lsls	r3, r2, #21
 800ccce:	d527      	bpl.n	800cd20 <__ssputs_r+0x8e>
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7fc f919 	bl	8008f08 <_malloc_r>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	b360      	cbz	r0, 800cd34 <__ssputs_r+0xa2>
 800ccda:	6921      	ldr	r1, [r4, #16]
 800ccdc:	464a      	mov	r2, r9
 800ccde:	f7fe f894 	bl	800ae0a <memcpy>
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccec:	81a3      	strh	r3, [r4, #12]
 800ccee:	6126      	str	r6, [r4, #16]
 800ccf0:	6165      	str	r5, [r4, #20]
 800ccf2:	444e      	add	r6, r9
 800ccf4:	eba5 0509 	sub.w	r5, r5, r9
 800ccf8:	6026      	str	r6, [r4, #0]
 800ccfa:	60a5      	str	r5, [r4, #8]
 800ccfc:	463e      	mov	r6, r7
 800ccfe:	42be      	cmp	r6, r7
 800cd00:	d900      	bls.n	800cd04 <__ssputs_r+0x72>
 800cd02:	463e      	mov	r6, r7
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	4632      	mov	r2, r6
 800cd08:	4641      	mov	r1, r8
 800cd0a:	f000 fd52 	bl	800d7b2 <memmove>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	1b9b      	subs	r3, r3, r6
 800cd12:	60a3      	str	r3, [r4, #8]
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	4433      	add	r3, r6
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd20:	462a      	mov	r2, r5
 800cd22:	f7fc f97d 	bl	8009020 <_realloc_r>
 800cd26:	4606      	mov	r6, r0
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d1e0      	bne.n	800ccee <__ssputs_r+0x5c>
 800cd2c:	6921      	ldr	r1, [r4, #16]
 800cd2e:	4650      	mov	r0, sl
 800cd30:	f7fe fed6 	bl	800bae0 <_free_r>
 800cd34:	230c      	movs	r3, #12
 800cd36:	f8ca 3000 	str.w	r3, [sl]
 800cd3a:	89a3      	ldrh	r3, [r4, #12]
 800cd3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	f04f 30ff 	mov.w	r0, #4294967295
 800cd46:	e7e9      	b.n	800cd1c <__ssputs_r+0x8a>

0800cd48 <_svfiprintf_r>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	4698      	mov	r8, r3
 800cd4e:	898b      	ldrh	r3, [r1, #12]
 800cd50:	061b      	lsls	r3, r3, #24
 800cd52:	b09d      	sub	sp, #116	@ 0x74
 800cd54:	4607      	mov	r7, r0
 800cd56:	460d      	mov	r5, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	d510      	bpl.n	800cd7e <_svfiprintf_r+0x36>
 800cd5c:	690b      	ldr	r3, [r1, #16]
 800cd5e:	b973      	cbnz	r3, 800cd7e <_svfiprintf_r+0x36>
 800cd60:	2140      	movs	r1, #64	@ 0x40
 800cd62:	f7fc f8d1 	bl	8008f08 <_malloc_r>
 800cd66:	6028      	str	r0, [r5, #0]
 800cd68:	6128      	str	r0, [r5, #16]
 800cd6a:	b930      	cbnz	r0, 800cd7a <_svfiprintf_r+0x32>
 800cd6c:	230c      	movs	r3, #12
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	b01d      	add	sp, #116	@ 0x74
 800cd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7a:	2340      	movs	r3, #64	@ 0x40
 800cd7c:	616b      	str	r3, [r5, #20]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd82:	2320      	movs	r3, #32
 800cd84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd88:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd8c:	2330      	movs	r3, #48	@ 0x30
 800cd8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf2c <_svfiprintf_r+0x1e4>
 800cd92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd96:	f04f 0901 	mov.w	r9, #1
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	469a      	mov	sl, r3
 800cd9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda2:	b10a      	cbz	r2, 800cda8 <_svfiprintf_r+0x60>
 800cda4:	2a25      	cmp	r2, #37	@ 0x25
 800cda6:	d1f9      	bne.n	800cd9c <_svfiprintf_r+0x54>
 800cda8:	ebba 0b04 	subs.w	fp, sl, r4
 800cdac:	d00b      	beq.n	800cdc6 <_svfiprintf_r+0x7e>
 800cdae:	465b      	mov	r3, fp
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff ff6c 	bl	800cc92 <__ssputs_r>
 800cdba:	3001      	adds	r0, #1
 800cdbc:	f000 80a7 	beq.w	800cf0e <_svfiprintf_r+0x1c6>
 800cdc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdc2:	445a      	add	r2, fp
 800cdc4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdc6:	f89a 3000 	ldrb.w	r3, [sl]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f000 809f 	beq.w	800cf0e <_svfiprintf_r+0x1c6>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdda:	f10a 0a01 	add.w	sl, sl, #1
 800cdde:	9304      	str	r3, [sp, #16]
 800cde0:	9307      	str	r3, [sp, #28]
 800cde2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cde6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cde8:	4654      	mov	r4, sl
 800cdea:	2205      	movs	r2, #5
 800cdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf0:	484e      	ldr	r0, [pc, #312]	@ (800cf2c <_svfiprintf_r+0x1e4>)
 800cdf2:	f7f3 f9ed 	bl	80001d0 <memchr>
 800cdf6:	9a04      	ldr	r2, [sp, #16]
 800cdf8:	b9d8      	cbnz	r0, 800ce32 <_svfiprintf_r+0xea>
 800cdfa:	06d0      	lsls	r0, r2, #27
 800cdfc:	bf44      	itt	mi
 800cdfe:	2320      	movmi	r3, #32
 800ce00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce04:	0711      	lsls	r1, r2, #28
 800ce06:	bf44      	itt	mi
 800ce08:	232b      	movmi	r3, #43	@ 0x2b
 800ce0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce14:	d015      	beq.n	800ce42 <_svfiprintf_r+0xfa>
 800ce16:	9a07      	ldr	r2, [sp, #28]
 800ce18:	4654      	mov	r4, sl
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f04f 0c0a 	mov.w	ip, #10
 800ce20:	4621      	mov	r1, r4
 800ce22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce26:	3b30      	subs	r3, #48	@ 0x30
 800ce28:	2b09      	cmp	r3, #9
 800ce2a:	d94b      	bls.n	800cec4 <_svfiprintf_r+0x17c>
 800ce2c:	b1b0      	cbz	r0, 800ce5c <_svfiprintf_r+0x114>
 800ce2e:	9207      	str	r2, [sp, #28]
 800ce30:	e014      	b.n	800ce5c <_svfiprintf_r+0x114>
 800ce32:	eba0 0308 	sub.w	r3, r0, r8
 800ce36:	fa09 f303 	lsl.w	r3, r9, r3
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	9304      	str	r3, [sp, #16]
 800ce3e:	46a2      	mov	sl, r4
 800ce40:	e7d2      	b.n	800cde8 <_svfiprintf_r+0xa0>
 800ce42:	9b03      	ldr	r3, [sp, #12]
 800ce44:	1d19      	adds	r1, r3, #4
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	9103      	str	r1, [sp, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bfbb      	ittet	lt
 800ce4e:	425b      	neglt	r3, r3
 800ce50:	f042 0202 	orrlt.w	r2, r2, #2
 800ce54:	9307      	strge	r3, [sp, #28]
 800ce56:	9307      	strlt	r3, [sp, #28]
 800ce58:	bfb8      	it	lt
 800ce5a:	9204      	strlt	r2, [sp, #16]
 800ce5c:	7823      	ldrb	r3, [r4, #0]
 800ce5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce60:	d10a      	bne.n	800ce78 <_svfiprintf_r+0x130>
 800ce62:	7863      	ldrb	r3, [r4, #1]
 800ce64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce66:	d132      	bne.n	800cece <_svfiprintf_r+0x186>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	1d1a      	adds	r2, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	9203      	str	r2, [sp, #12]
 800ce70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce74:	3402      	adds	r4, #2
 800ce76:	9305      	str	r3, [sp, #20]
 800ce78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf3c <_svfiprintf_r+0x1f4>
 800ce7c:	7821      	ldrb	r1, [r4, #0]
 800ce7e:	2203      	movs	r2, #3
 800ce80:	4650      	mov	r0, sl
 800ce82:	f7f3 f9a5 	bl	80001d0 <memchr>
 800ce86:	b138      	cbz	r0, 800ce98 <_svfiprintf_r+0x150>
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	eba0 000a 	sub.w	r0, r0, sl
 800ce8e:	2240      	movs	r2, #64	@ 0x40
 800ce90:	4082      	lsls	r2, r0
 800ce92:	4313      	orrs	r3, r2
 800ce94:	3401      	adds	r4, #1
 800ce96:	9304      	str	r3, [sp, #16]
 800ce98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce9c:	4824      	ldr	r0, [pc, #144]	@ (800cf30 <_svfiprintf_r+0x1e8>)
 800ce9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cea2:	2206      	movs	r2, #6
 800cea4:	f7f3 f994 	bl	80001d0 <memchr>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d036      	beq.n	800cf1a <_svfiprintf_r+0x1d2>
 800ceac:	4b21      	ldr	r3, [pc, #132]	@ (800cf34 <_svfiprintf_r+0x1ec>)
 800ceae:	bb1b      	cbnz	r3, 800cef8 <_svfiprintf_r+0x1b0>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	3307      	adds	r3, #7
 800ceb4:	f023 0307 	bic.w	r3, r3, #7
 800ceb8:	3308      	adds	r3, #8
 800ceba:	9303      	str	r3, [sp, #12]
 800cebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cebe:	4433      	add	r3, r6
 800cec0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec2:	e76a      	b.n	800cd9a <_svfiprintf_r+0x52>
 800cec4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cec8:	460c      	mov	r4, r1
 800ceca:	2001      	movs	r0, #1
 800cecc:	e7a8      	b.n	800ce20 <_svfiprintf_r+0xd8>
 800cece:	2300      	movs	r3, #0
 800ced0:	3401      	adds	r4, #1
 800ced2:	9305      	str	r3, [sp, #20]
 800ced4:	4619      	mov	r1, r3
 800ced6:	f04f 0c0a 	mov.w	ip, #10
 800ceda:	4620      	mov	r0, r4
 800cedc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee0:	3a30      	subs	r2, #48	@ 0x30
 800cee2:	2a09      	cmp	r2, #9
 800cee4:	d903      	bls.n	800ceee <_svfiprintf_r+0x1a6>
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0c6      	beq.n	800ce78 <_svfiprintf_r+0x130>
 800ceea:	9105      	str	r1, [sp, #20]
 800ceec:	e7c4      	b.n	800ce78 <_svfiprintf_r+0x130>
 800ceee:	fb0c 2101 	mla	r1, ip, r1, r2
 800cef2:	4604      	mov	r4, r0
 800cef4:	2301      	movs	r3, #1
 800cef6:	e7f0      	b.n	800ceda <_svfiprintf_r+0x192>
 800cef8:	ab03      	add	r3, sp, #12
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	462a      	mov	r2, r5
 800cefe:	4b0e      	ldr	r3, [pc, #56]	@ (800cf38 <_svfiprintf_r+0x1f0>)
 800cf00:	a904      	add	r1, sp, #16
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7fc ff62 	bl	8009dcc <_printf_float>
 800cf08:	1c42      	adds	r2, r0, #1
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	d1d6      	bne.n	800cebc <_svfiprintf_r+0x174>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	065b      	lsls	r3, r3, #25
 800cf12:	f53f af2d 	bmi.w	800cd70 <_svfiprintf_r+0x28>
 800cf16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf18:	e72c      	b.n	800cd74 <_svfiprintf_r+0x2c>
 800cf1a:	ab03      	add	r3, sp, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	462a      	mov	r2, r5
 800cf20:	4b05      	ldr	r3, [pc, #20]	@ (800cf38 <_svfiprintf_r+0x1f0>)
 800cf22:	a904      	add	r1, sp, #16
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7fd f9e9 	bl	800a2fc <_printf_i>
 800cf2a:	e7ed      	b.n	800cf08 <_svfiprintf_r+0x1c0>
 800cf2c:	0800e460 	.word	0x0800e460
 800cf30:	0800e46a 	.word	0x0800e46a
 800cf34:	08009dcd 	.word	0x08009dcd
 800cf38:	0800cc93 	.word	0x0800cc93
 800cf3c:	0800e466 	.word	0x0800e466

0800cf40 <_sungetc_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	1c4b      	adds	r3, r1, #1
 800cf44:	4614      	mov	r4, r2
 800cf46:	d103      	bne.n	800cf50 <_sungetc_r+0x10>
 800cf48:	f04f 35ff 	mov.w	r5, #4294967295
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	8993      	ldrh	r3, [r2, #12]
 800cf52:	f023 0320 	bic.w	r3, r3, #32
 800cf56:	8193      	strh	r3, [r2, #12]
 800cf58:	6853      	ldr	r3, [r2, #4]
 800cf5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cf5c:	b2cd      	uxtb	r5, r1
 800cf5e:	b18a      	cbz	r2, 800cf84 <_sungetc_r+0x44>
 800cf60:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cf62:	429a      	cmp	r2, r3
 800cf64:	dd08      	ble.n	800cf78 <_sungetc_r+0x38>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	1e5a      	subs	r2, r3, #1
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	3301      	adds	r3, #1
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	e7e9      	b.n	800cf4c <_sungetc_r+0xc>
 800cf78:	4621      	mov	r1, r4
 800cf7a:	f000 fbe0 	bl	800d73e <__submore>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d0f1      	beq.n	800cf66 <_sungetc_r+0x26>
 800cf82:	e7e1      	b.n	800cf48 <_sungetc_r+0x8>
 800cf84:	6921      	ldr	r1, [r4, #16]
 800cf86:	6822      	ldr	r2, [r4, #0]
 800cf88:	b141      	cbz	r1, 800cf9c <_sungetc_r+0x5c>
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	d206      	bcs.n	800cf9c <_sungetc_r+0x5c>
 800cf8e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800cf92:	42a9      	cmp	r1, r5
 800cf94:	d102      	bne.n	800cf9c <_sungetc_r+0x5c>
 800cf96:	3a01      	subs	r2, #1
 800cf98:	6022      	str	r2, [r4, #0]
 800cf9a:	e7ea      	b.n	800cf72 <_sungetc_r+0x32>
 800cf9c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800cfa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cfaa:	4623      	mov	r3, r4
 800cfac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cfb0:	6023      	str	r3, [r4, #0]
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e7de      	b.n	800cf74 <_sungetc_r+0x34>

0800cfb6 <__ssrefill_r>:
 800cfb6:	b510      	push	{r4, lr}
 800cfb8:	460c      	mov	r4, r1
 800cfba:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cfbc:	b169      	cbz	r1, 800cfda <__ssrefill_r+0x24>
 800cfbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	d001      	beq.n	800cfca <__ssrefill_r+0x14>
 800cfc6:	f7fe fd8b 	bl	800bae0 <_free_r>
 800cfca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfcc:	6063      	str	r3, [r4, #4]
 800cfce:	2000      	movs	r0, #0
 800cfd0:	6360      	str	r0, [r4, #52]	@ 0x34
 800cfd2:	b113      	cbz	r3, 800cfda <__ssrefill_r+0x24>
 800cfd4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	bd10      	pop	{r4, pc}
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	6063      	str	r3, [r4, #4]
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f043 0320 	orr.w	r3, r3, #32
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	f04f 30ff 	mov.w	r0, #4294967295
 800cfee:	e7f3      	b.n	800cfd8 <__ssrefill_r+0x22>

0800cff0 <__ssvfiscanf_r>:
 800cff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff4:	460c      	mov	r4, r1
 800cff6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800cffa:	2100      	movs	r1, #0
 800cffc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d000:	49a5      	ldr	r1, [pc, #660]	@ (800d298 <__ssvfiscanf_r+0x2a8>)
 800d002:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d004:	f10d 0804 	add.w	r8, sp, #4
 800d008:	49a4      	ldr	r1, [pc, #656]	@ (800d29c <__ssvfiscanf_r+0x2ac>)
 800d00a:	4fa5      	ldr	r7, [pc, #660]	@ (800d2a0 <__ssvfiscanf_r+0x2b0>)
 800d00c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d010:	4606      	mov	r6, r0
 800d012:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	7813      	ldrb	r3, [r2, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 8158 	beq.w	800d2ce <__ssvfiscanf_r+0x2de>
 800d01e:	5cf9      	ldrb	r1, [r7, r3]
 800d020:	f011 0108 	ands.w	r1, r1, #8
 800d024:	f102 0501 	add.w	r5, r2, #1
 800d028:	d019      	beq.n	800d05e <__ssvfiscanf_r+0x6e>
 800d02a:	6863      	ldr	r3, [r4, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	dd0f      	ble.n	800d050 <__ssvfiscanf_r+0x60>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	5cba      	ldrb	r2, [r7, r2]
 800d036:	0712      	lsls	r2, r2, #28
 800d038:	d401      	bmi.n	800d03e <__ssvfiscanf_r+0x4e>
 800d03a:	462a      	mov	r2, r5
 800d03c:	e7eb      	b.n	800d016 <__ssvfiscanf_r+0x26>
 800d03e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d040:	3201      	adds	r2, #1
 800d042:	9245      	str	r2, [sp, #276]	@ 0x114
 800d044:	6862      	ldr	r2, [r4, #4]
 800d046:	3301      	adds	r3, #1
 800d048:	3a01      	subs	r2, #1
 800d04a:	6062      	str	r2, [r4, #4]
 800d04c:	6023      	str	r3, [r4, #0]
 800d04e:	e7ec      	b.n	800d02a <__ssvfiscanf_r+0x3a>
 800d050:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d052:	4621      	mov	r1, r4
 800d054:	4630      	mov	r0, r6
 800d056:	4798      	blx	r3
 800d058:	2800      	cmp	r0, #0
 800d05a:	d0e9      	beq.n	800d030 <__ssvfiscanf_r+0x40>
 800d05c:	e7ed      	b.n	800d03a <__ssvfiscanf_r+0x4a>
 800d05e:	2b25      	cmp	r3, #37	@ 0x25
 800d060:	d012      	beq.n	800d088 <__ssvfiscanf_r+0x98>
 800d062:	4699      	mov	r9, r3
 800d064:	6863      	ldr	r3, [r4, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	f340 8093 	ble.w	800d192 <__ssvfiscanf_r+0x1a2>
 800d06c:	6822      	ldr	r2, [r4, #0]
 800d06e:	7813      	ldrb	r3, [r2, #0]
 800d070:	454b      	cmp	r3, r9
 800d072:	f040 812c 	bne.w	800d2ce <__ssvfiscanf_r+0x2de>
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	3b01      	subs	r3, #1
 800d07a:	6063      	str	r3, [r4, #4]
 800d07c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d07e:	3201      	adds	r2, #1
 800d080:	3301      	adds	r3, #1
 800d082:	6022      	str	r2, [r4, #0]
 800d084:	9345      	str	r3, [sp, #276]	@ 0x114
 800d086:	e7d8      	b.n	800d03a <__ssvfiscanf_r+0x4a>
 800d088:	9141      	str	r1, [sp, #260]	@ 0x104
 800d08a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d08c:	7853      	ldrb	r3, [r2, #1]
 800d08e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d090:	bf02      	ittt	eq
 800d092:	2310      	moveq	r3, #16
 800d094:	1c95      	addeq	r5, r2, #2
 800d096:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d098:	220a      	movs	r2, #10
 800d09a:	46a9      	mov	r9, r5
 800d09c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d0a0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d0a4:	2b09      	cmp	r3, #9
 800d0a6:	d91e      	bls.n	800d0e6 <__ssvfiscanf_r+0xf6>
 800d0a8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800d2a4 <__ssvfiscanf_r+0x2b4>
 800d0ac:	2203      	movs	r2, #3
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	f7f3 f88e 	bl	80001d0 <memchr>
 800d0b4:	b138      	cbz	r0, 800d0c6 <__ssvfiscanf_r+0xd6>
 800d0b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d0b8:	eba0 000a 	sub.w	r0, r0, sl
 800d0bc:	2301      	movs	r3, #1
 800d0be:	4083      	lsls	r3, r0
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	9341      	str	r3, [sp, #260]	@ 0x104
 800d0c4:	464d      	mov	r5, r9
 800d0c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0ca:	2b78      	cmp	r3, #120	@ 0x78
 800d0cc:	d806      	bhi.n	800d0dc <__ssvfiscanf_r+0xec>
 800d0ce:	2b57      	cmp	r3, #87	@ 0x57
 800d0d0:	d810      	bhi.n	800d0f4 <__ssvfiscanf_r+0x104>
 800d0d2:	2b25      	cmp	r3, #37	@ 0x25
 800d0d4:	d0c5      	beq.n	800d062 <__ssvfiscanf_r+0x72>
 800d0d6:	d857      	bhi.n	800d188 <__ssvfiscanf_r+0x198>
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d065      	beq.n	800d1a8 <__ssvfiscanf_r+0x1b8>
 800d0dc:	2303      	movs	r3, #3
 800d0de:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d0e0:	230a      	movs	r3, #10
 800d0e2:	9342      	str	r3, [sp, #264]	@ 0x108
 800d0e4:	e078      	b.n	800d1d8 <__ssvfiscanf_r+0x1e8>
 800d0e6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d0e8:	fb02 1103 	mla	r1, r2, r3, r1
 800d0ec:	3930      	subs	r1, #48	@ 0x30
 800d0ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d0f0:	464d      	mov	r5, r9
 800d0f2:	e7d2      	b.n	800d09a <__ssvfiscanf_r+0xaa>
 800d0f4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d0f8:	2a20      	cmp	r2, #32
 800d0fa:	d8ef      	bhi.n	800d0dc <__ssvfiscanf_r+0xec>
 800d0fc:	a101      	add	r1, pc, #4	@ (adr r1, 800d104 <__ssvfiscanf_r+0x114>)
 800d0fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d1b7 	.word	0x0800d1b7
 800d108:	0800d0dd 	.word	0x0800d0dd
 800d10c:	0800d0dd 	.word	0x0800d0dd
 800d110:	0800d211 	.word	0x0800d211
 800d114:	0800d0dd 	.word	0x0800d0dd
 800d118:	0800d0dd 	.word	0x0800d0dd
 800d11c:	0800d0dd 	.word	0x0800d0dd
 800d120:	0800d0dd 	.word	0x0800d0dd
 800d124:	0800d0dd 	.word	0x0800d0dd
 800d128:	0800d0dd 	.word	0x0800d0dd
 800d12c:	0800d0dd 	.word	0x0800d0dd
 800d130:	0800d227 	.word	0x0800d227
 800d134:	0800d20d 	.word	0x0800d20d
 800d138:	0800d18f 	.word	0x0800d18f
 800d13c:	0800d18f 	.word	0x0800d18f
 800d140:	0800d18f 	.word	0x0800d18f
 800d144:	0800d0dd 	.word	0x0800d0dd
 800d148:	0800d1c9 	.word	0x0800d1c9
 800d14c:	0800d0dd 	.word	0x0800d0dd
 800d150:	0800d0dd 	.word	0x0800d0dd
 800d154:	0800d0dd 	.word	0x0800d0dd
 800d158:	0800d0dd 	.word	0x0800d0dd
 800d15c:	0800d237 	.word	0x0800d237
 800d160:	0800d1d1 	.word	0x0800d1d1
 800d164:	0800d1af 	.word	0x0800d1af
 800d168:	0800d0dd 	.word	0x0800d0dd
 800d16c:	0800d0dd 	.word	0x0800d0dd
 800d170:	0800d233 	.word	0x0800d233
 800d174:	0800d0dd 	.word	0x0800d0dd
 800d178:	0800d20d 	.word	0x0800d20d
 800d17c:	0800d0dd 	.word	0x0800d0dd
 800d180:	0800d0dd 	.word	0x0800d0dd
 800d184:	0800d1b7 	.word	0x0800d1b7
 800d188:	3b45      	subs	r3, #69	@ 0x45
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d8a6      	bhi.n	800d0dc <__ssvfiscanf_r+0xec>
 800d18e:	2305      	movs	r3, #5
 800d190:	e021      	b.n	800d1d6 <__ssvfiscanf_r+0x1e6>
 800d192:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d194:	4621      	mov	r1, r4
 800d196:	4630      	mov	r0, r6
 800d198:	4798      	blx	r3
 800d19a:	2800      	cmp	r0, #0
 800d19c:	f43f af66 	beq.w	800d06c <__ssvfiscanf_r+0x7c>
 800d1a0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f040 808b 	bne.w	800d2be <__ssvfiscanf_r+0x2ce>
 800d1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ac:	e08b      	b.n	800d2c6 <__ssvfiscanf_r+0x2d6>
 800d1ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d1b0:	f042 0220 	orr.w	r2, r2, #32
 800d1b4:	9241      	str	r2, [sp, #260]	@ 0x104
 800d1b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d1b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d1bc:	9241      	str	r2, [sp, #260]	@ 0x104
 800d1be:	2210      	movs	r2, #16
 800d1c0:	2b6e      	cmp	r3, #110	@ 0x6e
 800d1c2:	9242      	str	r2, [sp, #264]	@ 0x108
 800d1c4:	d902      	bls.n	800d1cc <__ssvfiscanf_r+0x1dc>
 800d1c6:	e005      	b.n	800d1d4 <__ssvfiscanf_r+0x1e4>
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9342      	str	r3, [sp, #264]	@ 0x108
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e002      	b.n	800d1d6 <__ssvfiscanf_r+0x1e6>
 800d1d0:	2308      	movs	r3, #8
 800d1d2:	9342      	str	r3, [sp, #264]	@ 0x108
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dd39      	ble.n	800d252 <__ssvfiscanf_r+0x262>
 800d1de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d1e0:	0659      	lsls	r1, r3, #25
 800d1e2:	d404      	bmi.n	800d1ee <__ssvfiscanf_r+0x1fe>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	5cba      	ldrb	r2, [r7, r2]
 800d1ea:	0712      	lsls	r2, r2, #28
 800d1ec:	d438      	bmi.n	800d260 <__ssvfiscanf_r+0x270>
 800d1ee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	dc47      	bgt.n	800d284 <__ssvfiscanf_r+0x294>
 800d1f4:	466b      	mov	r3, sp
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	a941      	add	r1, sp, #260	@ 0x104
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 f86c 	bl	800d2d8 <_scanf_chars>
 800d200:	2801      	cmp	r0, #1
 800d202:	d064      	beq.n	800d2ce <__ssvfiscanf_r+0x2de>
 800d204:	2802      	cmp	r0, #2
 800d206:	f47f af18 	bne.w	800d03a <__ssvfiscanf_r+0x4a>
 800d20a:	e7c9      	b.n	800d1a0 <__ssvfiscanf_r+0x1b0>
 800d20c:	220a      	movs	r2, #10
 800d20e:	e7d7      	b.n	800d1c0 <__ssvfiscanf_r+0x1d0>
 800d210:	4629      	mov	r1, r5
 800d212:	4640      	mov	r0, r8
 800d214:	f000 fa5a 	bl	800d6cc <__sccl>
 800d218:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d21e:	9341      	str	r3, [sp, #260]	@ 0x104
 800d220:	4605      	mov	r5, r0
 800d222:	2301      	movs	r3, #1
 800d224:	e7d7      	b.n	800d1d6 <__ssvfiscanf_r+0x1e6>
 800d226:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d228:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d22c:	9341      	str	r3, [sp, #260]	@ 0x104
 800d22e:	2300      	movs	r3, #0
 800d230:	e7d1      	b.n	800d1d6 <__ssvfiscanf_r+0x1e6>
 800d232:	2302      	movs	r3, #2
 800d234:	e7cf      	b.n	800d1d6 <__ssvfiscanf_r+0x1e6>
 800d236:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d238:	06c3      	lsls	r3, r0, #27
 800d23a:	f53f aefe 	bmi.w	800d03a <__ssvfiscanf_r+0x4a>
 800d23e:	9b00      	ldr	r3, [sp, #0]
 800d240:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d242:	1d19      	adds	r1, r3, #4
 800d244:	9100      	str	r1, [sp, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	07c0      	lsls	r0, r0, #31
 800d24a:	bf4c      	ite	mi
 800d24c:	801a      	strhmi	r2, [r3, #0]
 800d24e:	601a      	strpl	r2, [r3, #0]
 800d250:	e6f3      	b.n	800d03a <__ssvfiscanf_r+0x4a>
 800d252:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d254:	4621      	mov	r1, r4
 800d256:	4630      	mov	r0, r6
 800d258:	4798      	blx	r3
 800d25a:	2800      	cmp	r0, #0
 800d25c:	d0bf      	beq.n	800d1de <__ssvfiscanf_r+0x1ee>
 800d25e:	e79f      	b.n	800d1a0 <__ssvfiscanf_r+0x1b0>
 800d260:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d262:	3201      	adds	r2, #1
 800d264:	9245      	str	r2, [sp, #276]	@ 0x114
 800d266:	6862      	ldr	r2, [r4, #4]
 800d268:	3a01      	subs	r2, #1
 800d26a:	2a00      	cmp	r2, #0
 800d26c:	6062      	str	r2, [r4, #4]
 800d26e:	dd02      	ble.n	800d276 <__ssvfiscanf_r+0x286>
 800d270:	3301      	adds	r3, #1
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	e7b6      	b.n	800d1e4 <__ssvfiscanf_r+0x1f4>
 800d276:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d278:	4621      	mov	r1, r4
 800d27a:	4630      	mov	r0, r6
 800d27c:	4798      	blx	r3
 800d27e:	2800      	cmp	r0, #0
 800d280:	d0b0      	beq.n	800d1e4 <__ssvfiscanf_r+0x1f4>
 800d282:	e78d      	b.n	800d1a0 <__ssvfiscanf_r+0x1b0>
 800d284:	2b04      	cmp	r3, #4
 800d286:	dc0f      	bgt.n	800d2a8 <__ssvfiscanf_r+0x2b8>
 800d288:	466b      	mov	r3, sp
 800d28a:	4622      	mov	r2, r4
 800d28c:	a941      	add	r1, sp, #260	@ 0x104
 800d28e:	4630      	mov	r0, r6
 800d290:	f000 f87c 	bl	800d38c <_scanf_i>
 800d294:	e7b4      	b.n	800d200 <__ssvfiscanf_r+0x210>
 800d296:	bf00      	nop
 800d298:	0800cf41 	.word	0x0800cf41
 800d29c:	0800cfb7 	.word	0x0800cfb7
 800d2a0:	0800e0d9 	.word	0x0800e0d9
 800d2a4:	0800e466 	.word	0x0800e466
 800d2a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d4 <__ssvfiscanf_r+0x2e4>)
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f43f aec5 	beq.w	800d03a <__ssvfiscanf_r+0x4a>
 800d2b0:	466b      	mov	r3, sp
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	a941      	add	r1, sp, #260	@ 0x104
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7fd f940 	bl	800a53c <_scanf_float>
 800d2bc:	e7a0      	b.n	800d200 <__ssvfiscanf_r+0x210>
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	065b      	lsls	r3, r3, #25
 800d2c2:	f53f af71 	bmi.w	800d1a8 <__ssvfiscanf_r+0x1b8>
 800d2c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ce:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d2d0:	e7f9      	b.n	800d2c6 <__ssvfiscanf_r+0x2d6>
 800d2d2:	bf00      	nop
 800d2d4:	0800a53d 	.word	0x0800a53d

0800d2d8 <_scanf_chars>:
 800d2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2dc:	4615      	mov	r5, r2
 800d2de:	688a      	ldr	r2, [r1, #8]
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	b932      	cbnz	r2, 800d2f4 <_scanf_chars+0x1c>
 800d2e6:	698a      	ldr	r2, [r1, #24]
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	bf14      	ite	ne
 800d2ec:	f04f 32ff 	movne.w	r2, #4294967295
 800d2f0:	2201      	moveq	r2, #1
 800d2f2:	608a      	str	r2, [r1, #8]
 800d2f4:	6822      	ldr	r2, [r4, #0]
 800d2f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d388 <_scanf_chars+0xb0>
 800d2fa:	06d1      	lsls	r1, r2, #27
 800d2fc:	bf5f      	itttt	pl
 800d2fe:	681a      	ldrpl	r2, [r3, #0]
 800d300:	1d11      	addpl	r1, r2, #4
 800d302:	6019      	strpl	r1, [r3, #0]
 800d304:	6816      	ldrpl	r6, [r2, #0]
 800d306:	2700      	movs	r7, #0
 800d308:	69a0      	ldr	r0, [r4, #24]
 800d30a:	b188      	cbz	r0, 800d330 <_scanf_chars+0x58>
 800d30c:	2801      	cmp	r0, #1
 800d30e:	d107      	bne.n	800d320 <_scanf_chars+0x48>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	781a      	ldrb	r2, [r3, #0]
 800d314:	6963      	ldr	r3, [r4, #20]
 800d316:	5c9b      	ldrb	r3, [r3, r2]
 800d318:	b953      	cbnz	r3, 800d330 <_scanf_chars+0x58>
 800d31a:	2f00      	cmp	r7, #0
 800d31c:	d031      	beq.n	800d382 <_scanf_chars+0xaa>
 800d31e:	e022      	b.n	800d366 <_scanf_chars+0x8e>
 800d320:	2802      	cmp	r0, #2
 800d322:	d120      	bne.n	800d366 <_scanf_chars+0x8e>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d32c:	071b      	lsls	r3, r3, #28
 800d32e:	d41a      	bmi.n	800d366 <_scanf_chars+0x8e>
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	06da      	lsls	r2, r3, #27
 800d334:	bf5e      	ittt	pl
 800d336:	682b      	ldrpl	r3, [r5, #0]
 800d338:	781b      	ldrbpl	r3, [r3, #0]
 800d33a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d33e:	682a      	ldr	r2, [r5, #0]
 800d340:	686b      	ldr	r3, [r5, #4]
 800d342:	3201      	adds	r2, #1
 800d344:	602a      	str	r2, [r5, #0]
 800d346:	68a2      	ldr	r2, [r4, #8]
 800d348:	3b01      	subs	r3, #1
 800d34a:	3a01      	subs	r2, #1
 800d34c:	606b      	str	r3, [r5, #4]
 800d34e:	3701      	adds	r7, #1
 800d350:	60a2      	str	r2, [r4, #8]
 800d352:	b142      	cbz	r2, 800d366 <_scanf_chars+0x8e>
 800d354:	2b00      	cmp	r3, #0
 800d356:	dcd7      	bgt.n	800d308 <_scanf_chars+0x30>
 800d358:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d35c:	4629      	mov	r1, r5
 800d35e:	4640      	mov	r0, r8
 800d360:	4798      	blx	r3
 800d362:	2800      	cmp	r0, #0
 800d364:	d0d0      	beq.n	800d308 <_scanf_chars+0x30>
 800d366:	6823      	ldr	r3, [r4, #0]
 800d368:	f013 0310 	ands.w	r3, r3, #16
 800d36c:	d105      	bne.n	800d37a <_scanf_chars+0xa2>
 800d36e:	68e2      	ldr	r2, [r4, #12]
 800d370:	3201      	adds	r2, #1
 800d372:	60e2      	str	r2, [r4, #12]
 800d374:	69a2      	ldr	r2, [r4, #24]
 800d376:	b102      	cbz	r2, 800d37a <_scanf_chars+0xa2>
 800d378:	7033      	strb	r3, [r6, #0]
 800d37a:	6923      	ldr	r3, [r4, #16]
 800d37c:	443b      	add	r3, r7
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	2000      	movs	r0, #0
 800d382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d386:	bf00      	nop
 800d388:	0800e0d9 	.word	0x0800e0d9

0800d38c <_scanf_i>:
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	4698      	mov	r8, r3
 800d392:	4b74      	ldr	r3, [pc, #464]	@ (800d564 <_scanf_i+0x1d8>)
 800d394:	460c      	mov	r4, r1
 800d396:	4682      	mov	sl, r0
 800d398:	4616      	mov	r6, r2
 800d39a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d39e:	b087      	sub	sp, #28
 800d3a0:	ab03      	add	r3, sp, #12
 800d3a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3a6:	4b70      	ldr	r3, [pc, #448]	@ (800d568 <_scanf_i+0x1dc>)
 800d3a8:	69a1      	ldr	r1, [r4, #24]
 800d3aa:	4a70      	ldr	r2, [pc, #448]	@ (800d56c <_scanf_i+0x1e0>)
 800d3ac:	2903      	cmp	r1, #3
 800d3ae:	bf08      	it	eq
 800d3b0:	461a      	moveq	r2, r3
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	9201      	str	r2, [sp, #4]
 800d3b6:	1e5a      	subs	r2, r3, #1
 800d3b8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3bc:	bf88      	it	hi
 800d3be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3c2:	4627      	mov	r7, r4
 800d3c4:	bf82      	ittt	hi
 800d3c6:	eb03 0905 	addhi.w	r9, r3, r5
 800d3ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3ce:	60a3      	strhi	r3, [r4, #8]
 800d3d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d3d4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d3d8:	bf98      	it	ls
 800d3da:	f04f 0900 	movls.w	r9, #0
 800d3de:	6023      	str	r3, [r4, #0]
 800d3e0:	463d      	mov	r5, r7
 800d3e2:	f04f 0b00 	mov.w	fp, #0
 800d3e6:	6831      	ldr	r1, [r6, #0]
 800d3e8:	ab03      	add	r3, sp, #12
 800d3ea:	7809      	ldrb	r1, [r1, #0]
 800d3ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	f7f2 feed 	bl	80001d0 <memchr>
 800d3f6:	b328      	cbz	r0, 800d444 <_scanf_i+0xb8>
 800d3f8:	f1bb 0f01 	cmp.w	fp, #1
 800d3fc:	d159      	bne.n	800d4b2 <_scanf_i+0x126>
 800d3fe:	6862      	ldr	r2, [r4, #4]
 800d400:	b92a      	cbnz	r2, 800d40e <_scanf_i+0x82>
 800d402:	6822      	ldr	r2, [r4, #0]
 800d404:	2108      	movs	r1, #8
 800d406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d40a:	6061      	str	r1, [r4, #4]
 800d40c:	6022      	str	r2, [r4, #0]
 800d40e:	6822      	ldr	r2, [r4, #0]
 800d410:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d414:	6022      	str	r2, [r4, #0]
 800d416:	68a2      	ldr	r2, [r4, #8]
 800d418:	1e51      	subs	r1, r2, #1
 800d41a:	60a1      	str	r1, [r4, #8]
 800d41c:	b192      	cbz	r2, 800d444 <_scanf_i+0xb8>
 800d41e:	6832      	ldr	r2, [r6, #0]
 800d420:	1c51      	adds	r1, r2, #1
 800d422:	6031      	str	r1, [r6, #0]
 800d424:	7812      	ldrb	r2, [r2, #0]
 800d426:	f805 2b01 	strb.w	r2, [r5], #1
 800d42a:	6872      	ldr	r2, [r6, #4]
 800d42c:	3a01      	subs	r2, #1
 800d42e:	2a00      	cmp	r2, #0
 800d430:	6072      	str	r2, [r6, #4]
 800d432:	dc07      	bgt.n	800d444 <_scanf_i+0xb8>
 800d434:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d438:	4631      	mov	r1, r6
 800d43a:	4650      	mov	r0, sl
 800d43c:	4790      	blx	r2
 800d43e:	2800      	cmp	r0, #0
 800d440:	f040 8085 	bne.w	800d54e <_scanf_i+0x1c2>
 800d444:	f10b 0b01 	add.w	fp, fp, #1
 800d448:	f1bb 0f03 	cmp.w	fp, #3
 800d44c:	d1cb      	bne.n	800d3e6 <_scanf_i+0x5a>
 800d44e:	6863      	ldr	r3, [r4, #4]
 800d450:	b90b      	cbnz	r3, 800d456 <_scanf_i+0xca>
 800d452:	230a      	movs	r3, #10
 800d454:	6063      	str	r3, [r4, #4]
 800d456:	6863      	ldr	r3, [r4, #4]
 800d458:	4945      	ldr	r1, [pc, #276]	@ (800d570 <_scanf_i+0x1e4>)
 800d45a:	6960      	ldr	r0, [r4, #20]
 800d45c:	1ac9      	subs	r1, r1, r3
 800d45e:	f000 f935 	bl	800d6cc <__sccl>
 800d462:	f04f 0b00 	mov.w	fp, #0
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	6822      	ldr	r2, [r4, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d03d      	beq.n	800d4ea <_scanf_i+0x15e>
 800d46e:	6831      	ldr	r1, [r6, #0]
 800d470:	6960      	ldr	r0, [r4, #20]
 800d472:	f891 c000 	ldrb.w	ip, [r1]
 800d476:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d035      	beq.n	800d4ea <_scanf_i+0x15e>
 800d47e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d482:	d124      	bne.n	800d4ce <_scanf_i+0x142>
 800d484:	0510      	lsls	r0, r2, #20
 800d486:	d522      	bpl.n	800d4ce <_scanf_i+0x142>
 800d488:	f10b 0b01 	add.w	fp, fp, #1
 800d48c:	f1b9 0f00 	cmp.w	r9, #0
 800d490:	d003      	beq.n	800d49a <_scanf_i+0x10e>
 800d492:	3301      	adds	r3, #1
 800d494:	f109 39ff 	add.w	r9, r9, #4294967295
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	6873      	ldr	r3, [r6, #4]
 800d49c:	3b01      	subs	r3, #1
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	6073      	str	r3, [r6, #4]
 800d4a2:	dd1b      	ble.n	800d4dc <_scanf_i+0x150>
 800d4a4:	6833      	ldr	r3, [r6, #0]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	6033      	str	r3, [r6, #0]
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	60a3      	str	r3, [r4, #8]
 800d4b0:	e7d9      	b.n	800d466 <_scanf_i+0xda>
 800d4b2:	f1bb 0f02 	cmp.w	fp, #2
 800d4b6:	d1ae      	bne.n	800d416 <_scanf_i+0x8a>
 800d4b8:	6822      	ldr	r2, [r4, #0]
 800d4ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d4be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d4c2:	d1bf      	bne.n	800d444 <_scanf_i+0xb8>
 800d4c4:	2110      	movs	r1, #16
 800d4c6:	6061      	str	r1, [r4, #4]
 800d4c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d4cc:	e7a2      	b.n	800d414 <_scanf_i+0x88>
 800d4ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d4d2:	6022      	str	r2, [r4, #0]
 800d4d4:	780b      	ldrb	r3, [r1, #0]
 800d4d6:	f805 3b01 	strb.w	r3, [r5], #1
 800d4da:	e7de      	b.n	800d49a <_scanf_i+0x10e>
 800d4dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4650      	mov	r0, sl
 800d4e4:	4798      	blx	r3
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d0df      	beq.n	800d4aa <_scanf_i+0x11e>
 800d4ea:	6823      	ldr	r3, [r4, #0]
 800d4ec:	05d9      	lsls	r1, r3, #23
 800d4ee:	d50d      	bpl.n	800d50c <_scanf_i+0x180>
 800d4f0:	42bd      	cmp	r5, r7
 800d4f2:	d909      	bls.n	800d508 <_scanf_i+0x17c>
 800d4f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d4f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4fc:	4632      	mov	r2, r6
 800d4fe:	4650      	mov	r0, sl
 800d500:	4798      	blx	r3
 800d502:	f105 39ff 	add.w	r9, r5, #4294967295
 800d506:	464d      	mov	r5, r9
 800d508:	42bd      	cmp	r5, r7
 800d50a:	d028      	beq.n	800d55e <_scanf_i+0x1d2>
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	f012 0210 	ands.w	r2, r2, #16
 800d512:	d113      	bne.n	800d53c <_scanf_i+0x1b0>
 800d514:	702a      	strb	r2, [r5, #0]
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	9e01      	ldr	r6, [sp, #4]
 800d51a:	4639      	mov	r1, r7
 800d51c:	4650      	mov	r0, sl
 800d51e:	47b0      	blx	r6
 800d520:	f8d8 3000 	ldr.w	r3, [r8]
 800d524:	6821      	ldr	r1, [r4, #0]
 800d526:	1d1a      	adds	r2, r3, #4
 800d528:	f8c8 2000 	str.w	r2, [r8]
 800d52c:	f011 0f20 	tst.w	r1, #32
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	d00f      	beq.n	800d554 <_scanf_i+0x1c8>
 800d534:	6018      	str	r0, [r3, #0]
 800d536:	68e3      	ldr	r3, [r4, #12]
 800d538:	3301      	adds	r3, #1
 800d53a:	60e3      	str	r3, [r4, #12]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	1bed      	subs	r5, r5, r7
 800d540:	445d      	add	r5, fp
 800d542:	442b      	add	r3, r5
 800d544:	6123      	str	r3, [r4, #16]
 800d546:	2000      	movs	r0, #0
 800d548:	b007      	add	sp, #28
 800d54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54e:	f04f 0b00 	mov.w	fp, #0
 800d552:	e7ca      	b.n	800d4ea <_scanf_i+0x15e>
 800d554:	07ca      	lsls	r2, r1, #31
 800d556:	bf4c      	ite	mi
 800d558:	8018      	strhmi	r0, [r3, #0]
 800d55a:	6018      	strpl	r0, [r3, #0]
 800d55c:	e7eb      	b.n	800d536 <_scanf_i+0x1aa>
 800d55e:	2001      	movs	r0, #1
 800d560:	e7f2      	b.n	800d548 <_scanf_i+0x1bc>
 800d562:	bf00      	nop
 800d564:	0800e054 	.word	0x0800e054
 800d568:	0800cc75 	.word	0x0800cc75
 800d56c:	0800d929 	.word	0x0800d929
 800d570:	0800e481 	.word	0x0800e481

0800d574 <__sflush_r>:
 800d574:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57c:	0716      	lsls	r6, r2, #28
 800d57e:	4605      	mov	r5, r0
 800d580:	460c      	mov	r4, r1
 800d582:	d454      	bmi.n	800d62e <__sflush_r+0xba>
 800d584:	684b      	ldr	r3, [r1, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	dc02      	bgt.n	800d590 <__sflush_r+0x1c>
 800d58a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dd48      	ble.n	800d622 <__sflush_r+0xae>
 800d590:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d592:	2e00      	cmp	r6, #0
 800d594:	d045      	beq.n	800d622 <__sflush_r+0xae>
 800d596:	2300      	movs	r3, #0
 800d598:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d59c:	682f      	ldr	r7, [r5, #0]
 800d59e:	6a21      	ldr	r1, [r4, #32]
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	d030      	beq.n	800d606 <__sflush_r+0x92>
 800d5a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	0759      	lsls	r1, r3, #29
 800d5aa:	d505      	bpl.n	800d5b8 <__sflush_r+0x44>
 800d5ac:	6863      	ldr	r3, [r4, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5b2:	b10b      	cbz	r3, 800d5b8 <__sflush_r+0x44>
 800d5b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	d106      	bne.n	800d5d6 <__sflush_r+0x62>
 800d5c8:	6829      	ldr	r1, [r5, #0]
 800d5ca:	291d      	cmp	r1, #29
 800d5cc:	d82b      	bhi.n	800d626 <__sflush_r+0xb2>
 800d5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800d678 <__sflush_r+0x104>)
 800d5d0:	410a      	asrs	r2, r1
 800d5d2:	07d6      	lsls	r6, r2, #31
 800d5d4:	d427      	bmi.n	800d626 <__sflush_r+0xb2>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	6062      	str	r2, [r4, #4]
 800d5da:	04d9      	lsls	r1, r3, #19
 800d5dc:	6922      	ldr	r2, [r4, #16]
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	d504      	bpl.n	800d5ec <__sflush_r+0x78>
 800d5e2:	1c42      	adds	r2, r0, #1
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0x76>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b903      	cbnz	r3, 800d5ec <__sflush_r+0x78>
 800d5ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5ee:	602f      	str	r7, [r5, #0]
 800d5f0:	b1b9      	cbz	r1, 800d622 <__sflush_r+0xae>
 800d5f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	d002      	beq.n	800d600 <__sflush_r+0x8c>
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f7fe fa70 	bl	800bae0 <_free_r>
 800d600:	2300      	movs	r3, #0
 800d602:	6363      	str	r3, [r4, #52]	@ 0x34
 800d604:	e00d      	b.n	800d622 <__sflush_r+0xae>
 800d606:	2301      	movs	r3, #1
 800d608:	4628      	mov	r0, r5
 800d60a:	47b0      	blx	r6
 800d60c:	4602      	mov	r2, r0
 800d60e:	1c50      	adds	r0, r2, #1
 800d610:	d1c9      	bne.n	800d5a6 <__sflush_r+0x32>
 800d612:	682b      	ldr	r3, [r5, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0c6      	beq.n	800d5a6 <__sflush_r+0x32>
 800d618:	2b1d      	cmp	r3, #29
 800d61a:	d001      	beq.n	800d620 <__sflush_r+0xac>
 800d61c:	2b16      	cmp	r3, #22
 800d61e:	d11e      	bne.n	800d65e <__sflush_r+0xea>
 800d620:	602f      	str	r7, [r5, #0]
 800d622:	2000      	movs	r0, #0
 800d624:	e022      	b.n	800d66c <__sflush_r+0xf8>
 800d626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d62a:	b21b      	sxth	r3, r3
 800d62c:	e01b      	b.n	800d666 <__sflush_r+0xf2>
 800d62e:	690f      	ldr	r7, [r1, #16]
 800d630:	2f00      	cmp	r7, #0
 800d632:	d0f6      	beq.n	800d622 <__sflush_r+0xae>
 800d634:	0793      	lsls	r3, r2, #30
 800d636:	680e      	ldr	r6, [r1, #0]
 800d638:	bf08      	it	eq
 800d63a:	694b      	ldreq	r3, [r1, #20]
 800d63c:	600f      	str	r7, [r1, #0]
 800d63e:	bf18      	it	ne
 800d640:	2300      	movne	r3, #0
 800d642:	eba6 0807 	sub.w	r8, r6, r7
 800d646:	608b      	str	r3, [r1, #8]
 800d648:	f1b8 0f00 	cmp.w	r8, #0
 800d64c:	dde9      	ble.n	800d622 <__sflush_r+0xae>
 800d64e:	6a21      	ldr	r1, [r4, #32]
 800d650:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d652:	4643      	mov	r3, r8
 800d654:	463a      	mov	r2, r7
 800d656:	4628      	mov	r0, r5
 800d658:	47b0      	blx	r6
 800d65a:	2800      	cmp	r0, #0
 800d65c:	dc08      	bgt.n	800d670 <__sflush_r+0xfc>
 800d65e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d670:	4407      	add	r7, r0
 800d672:	eba8 0800 	sub.w	r8, r8, r0
 800d676:	e7e7      	b.n	800d648 <__sflush_r+0xd4>
 800d678:	dfbffffe 	.word	0xdfbffffe

0800d67c <_fflush_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	690b      	ldr	r3, [r1, #16]
 800d680:	4605      	mov	r5, r0
 800d682:	460c      	mov	r4, r1
 800d684:	b913      	cbnz	r3, 800d68c <_fflush_r+0x10>
 800d686:	2500      	movs	r5, #0
 800d688:	4628      	mov	r0, r5
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	b118      	cbz	r0, 800d696 <_fflush_r+0x1a>
 800d68e:	6a03      	ldr	r3, [r0, #32]
 800d690:	b90b      	cbnz	r3, 800d696 <_fflush_r+0x1a>
 800d692:	f7fd f9f3 	bl	800aa7c <__sinit>
 800d696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d0f3      	beq.n	800d686 <_fflush_r+0xa>
 800d69e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6a0:	07d0      	lsls	r0, r2, #31
 800d6a2:	d404      	bmi.n	800d6ae <_fflush_r+0x32>
 800d6a4:	0599      	lsls	r1, r3, #22
 800d6a6:	d402      	bmi.n	800d6ae <_fflush_r+0x32>
 800d6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6aa:	f7fd fbac 	bl	800ae06 <__retarget_lock_acquire_recursive>
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f7ff ff5f 	bl	800d574 <__sflush_r>
 800d6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6b8:	07da      	lsls	r2, r3, #31
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	d4e4      	bmi.n	800d688 <_fflush_r+0xc>
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	059b      	lsls	r3, r3, #22
 800d6c2:	d4e1      	bmi.n	800d688 <_fflush_r+0xc>
 800d6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6c6:	f7fd fb9f 	bl	800ae08 <__retarget_lock_release_recursive>
 800d6ca:	e7dd      	b.n	800d688 <_fflush_r+0xc>

0800d6cc <__sccl>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	780b      	ldrb	r3, [r1, #0]
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	2b5e      	cmp	r3, #94	@ 0x5e
 800d6d4:	bf0b      	itete	eq
 800d6d6:	784b      	ldrbeq	r3, [r1, #1]
 800d6d8:	1c4a      	addne	r2, r1, #1
 800d6da:	1c8a      	addeq	r2, r1, #2
 800d6dc:	2100      	movne	r1, #0
 800d6de:	bf08      	it	eq
 800d6e0:	2101      	moveq	r1, #1
 800d6e2:	3801      	subs	r0, #1
 800d6e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d6e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d6ec:	42a8      	cmp	r0, r5
 800d6ee:	d1fb      	bne.n	800d6e8 <__sccl+0x1c>
 800d6f0:	b90b      	cbnz	r3, 800d6f6 <__sccl+0x2a>
 800d6f2:	1e50      	subs	r0, r2, #1
 800d6f4:	bd70      	pop	{r4, r5, r6, pc}
 800d6f6:	f081 0101 	eor.w	r1, r1, #1
 800d6fa:	54e1      	strb	r1, [r4, r3]
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	4602      	mov	r2, r0
 800d700:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d704:	2d2d      	cmp	r5, #45	@ 0x2d
 800d706:	d005      	beq.n	800d714 <__sccl+0x48>
 800d708:	2d5d      	cmp	r5, #93	@ 0x5d
 800d70a:	d016      	beq.n	800d73a <__sccl+0x6e>
 800d70c:	2d00      	cmp	r5, #0
 800d70e:	d0f1      	beq.n	800d6f4 <__sccl+0x28>
 800d710:	462b      	mov	r3, r5
 800d712:	e7f2      	b.n	800d6fa <__sccl+0x2e>
 800d714:	7846      	ldrb	r6, [r0, #1]
 800d716:	2e5d      	cmp	r6, #93	@ 0x5d
 800d718:	d0fa      	beq.n	800d710 <__sccl+0x44>
 800d71a:	42b3      	cmp	r3, r6
 800d71c:	dcf8      	bgt.n	800d710 <__sccl+0x44>
 800d71e:	3002      	adds	r0, #2
 800d720:	461a      	mov	r2, r3
 800d722:	3201      	adds	r2, #1
 800d724:	4296      	cmp	r6, r2
 800d726:	54a1      	strb	r1, [r4, r2]
 800d728:	dcfb      	bgt.n	800d722 <__sccl+0x56>
 800d72a:	1af2      	subs	r2, r6, r3
 800d72c:	3a01      	subs	r2, #1
 800d72e:	1c5d      	adds	r5, r3, #1
 800d730:	42b3      	cmp	r3, r6
 800d732:	bfa8      	it	ge
 800d734:	2200      	movge	r2, #0
 800d736:	18ab      	adds	r3, r5, r2
 800d738:	e7e1      	b.n	800d6fe <__sccl+0x32>
 800d73a:	4610      	mov	r0, r2
 800d73c:	e7da      	b.n	800d6f4 <__sccl+0x28>

0800d73e <__submore>:
 800d73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d742:	460c      	mov	r4, r1
 800d744:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d74a:	4299      	cmp	r1, r3
 800d74c:	d11d      	bne.n	800d78a <__submore+0x4c>
 800d74e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d752:	f7fb fbd9 	bl	8008f08 <_malloc_r>
 800d756:	b918      	cbnz	r0, 800d760 <__submore+0x22>
 800d758:	f04f 30ff 	mov.w	r0, #4294967295
 800d75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d764:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d766:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d76a:	6360      	str	r0, [r4, #52]	@ 0x34
 800d76c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d770:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d774:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d778:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d77c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d780:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d784:	6020      	str	r0, [r4, #0]
 800d786:	2000      	movs	r0, #0
 800d788:	e7e8      	b.n	800d75c <__submore+0x1e>
 800d78a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d78c:	0077      	lsls	r7, r6, #1
 800d78e:	463a      	mov	r2, r7
 800d790:	f7fb fc46 	bl	8009020 <_realloc_r>
 800d794:	4605      	mov	r5, r0
 800d796:	2800      	cmp	r0, #0
 800d798:	d0de      	beq.n	800d758 <__submore+0x1a>
 800d79a:	eb00 0806 	add.w	r8, r0, r6
 800d79e:	4601      	mov	r1, r0
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	f7fd fb31 	bl	800ae0a <memcpy>
 800d7a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d7ac:	f8c4 8000 	str.w	r8, [r4]
 800d7b0:	e7e9      	b.n	800d786 <__submore+0x48>

0800d7b2 <memmove>:
 800d7b2:	4288      	cmp	r0, r1
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	eb01 0402 	add.w	r4, r1, r2
 800d7ba:	d902      	bls.n	800d7c2 <memmove+0x10>
 800d7bc:	4284      	cmp	r4, r0
 800d7be:	4623      	mov	r3, r4
 800d7c0:	d807      	bhi.n	800d7d2 <memmove+0x20>
 800d7c2:	1e43      	subs	r3, r0, #1
 800d7c4:	42a1      	cmp	r1, r4
 800d7c6:	d008      	beq.n	800d7da <memmove+0x28>
 800d7c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7d0:	e7f8      	b.n	800d7c4 <memmove+0x12>
 800d7d2:	4402      	add	r2, r0
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	428a      	cmp	r2, r1
 800d7d8:	d100      	bne.n	800d7dc <memmove+0x2a>
 800d7da:	bd10      	pop	{r4, pc}
 800d7dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7e4:	e7f7      	b.n	800d7d6 <memmove+0x24>
	...

0800d7e8 <__assert_func>:
 800d7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ea:	4614      	mov	r4, r2
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	4b09      	ldr	r3, [pc, #36]	@ (800d814 <__assert_func+0x2c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	68d8      	ldr	r0, [r3, #12]
 800d7f6:	b954      	cbnz	r4, 800d80e <__assert_func+0x26>
 800d7f8:	4b07      	ldr	r3, [pc, #28]	@ (800d818 <__assert_func+0x30>)
 800d7fa:	461c      	mov	r4, r3
 800d7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d800:	9100      	str	r1, [sp, #0]
 800d802:	462b      	mov	r3, r5
 800d804:	4905      	ldr	r1, [pc, #20]	@ (800d81c <__assert_func+0x34>)
 800d806:	f000 f891 	bl	800d92c <fiprintf>
 800d80a:	f000 f8a1 	bl	800d950 <abort>
 800d80e:	4b04      	ldr	r3, [pc, #16]	@ (800d820 <__assert_func+0x38>)
 800d810:	e7f4      	b.n	800d7fc <__assert_func+0x14>
 800d812:	bf00      	nop
 800d814:	2000018c 	.word	0x2000018c
 800d818:	0800e4c7 	.word	0x0800e4c7
 800d81c:	0800e499 	.word	0x0800e499
 800d820:	0800e48c 	.word	0x0800e48c

0800d824 <_calloc_r>:
 800d824:	b570      	push	{r4, r5, r6, lr}
 800d826:	fba1 5402 	umull	r5, r4, r1, r2
 800d82a:	b93c      	cbnz	r4, 800d83c <_calloc_r+0x18>
 800d82c:	4629      	mov	r1, r5
 800d82e:	f7fb fb6b 	bl	8008f08 <_malloc_r>
 800d832:	4606      	mov	r6, r0
 800d834:	b928      	cbnz	r0, 800d842 <_calloc_r+0x1e>
 800d836:	2600      	movs	r6, #0
 800d838:	4630      	mov	r0, r6
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	220c      	movs	r2, #12
 800d83e:	6002      	str	r2, [r0, #0]
 800d840:	e7f9      	b.n	800d836 <_calloc_r+0x12>
 800d842:	462a      	mov	r2, r5
 800d844:	4621      	mov	r1, r4
 800d846:	f7fd f9de 	bl	800ac06 <memset>
 800d84a:	e7f5      	b.n	800d838 <_calloc_r+0x14>

0800d84c <_strtoul_l.constprop.0>:
 800d84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d850:	4e34      	ldr	r6, [pc, #208]	@ (800d924 <_strtoul_l.constprop.0+0xd8>)
 800d852:	4686      	mov	lr, r0
 800d854:	460d      	mov	r5, r1
 800d856:	4628      	mov	r0, r5
 800d858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d85c:	5d37      	ldrb	r7, [r6, r4]
 800d85e:	f017 0708 	ands.w	r7, r7, #8
 800d862:	d1f8      	bne.n	800d856 <_strtoul_l.constprop.0+0xa>
 800d864:	2c2d      	cmp	r4, #45	@ 0x2d
 800d866:	d12f      	bne.n	800d8c8 <_strtoul_l.constprop.0+0x7c>
 800d868:	782c      	ldrb	r4, [r5, #0]
 800d86a:	2701      	movs	r7, #1
 800d86c:	1c85      	adds	r5, r0, #2
 800d86e:	f033 0010 	bics.w	r0, r3, #16
 800d872:	d109      	bne.n	800d888 <_strtoul_l.constprop.0+0x3c>
 800d874:	2c30      	cmp	r4, #48	@ 0x30
 800d876:	d12c      	bne.n	800d8d2 <_strtoul_l.constprop.0+0x86>
 800d878:	7828      	ldrb	r0, [r5, #0]
 800d87a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d87e:	2858      	cmp	r0, #88	@ 0x58
 800d880:	d127      	bne.n	800d8d2 <_strtoul_l.constprop.0+0x86>
 800d882:	786c      	ldrb	r4, [r5, #1]
 800d884:	2310      	movs	r3, #16
 800d886:	3502      	adds	r5, #2
 800d888:	f04f 38ff 	mov.w	r8, #4294967295
 800d88c:	2600      	movs	r6, #0
 800d88e:	fbb8 f8f3 	udiv	r8, r8, r3
 800d892:	fb03 f908 	mul.w	r9, r3, r8
 800d896:	ea6f 0909 	mvn.w	r9, r9
 800d89a:	4630      	mov	r0, r6
 800d89c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d8a0:	f1bc 0f09 	cmp.w	ip, #9
 800d8a4:	d81c      	bhi.n	800d8e0 <_strtoul_l.constprop.0+0x94>
 800d8a6:	4664      	mov	r4, ip
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	dd2a      	ble.n	800d902 <_strtoul_l.constprop.0+0xb6>
 800d8ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d8b0:	d007      	beq.n	800d8c2 <_strtoul_l.constprop.0+0x76>
 800d8b2:	4580      	cmp	r8, r0
 800d8b4:	d322      	bcc.n	800d8fc <_strtoul_l.constprop.0+0xb0>
 800d8b6:	d101      	bne.n	800d8bc <_strtoul_l.constprop.0+0x70>
 800d8b8:	45a1      	cmp	r9, r4
 800d8ba:	db1f      	blt.n	800d8fc <_strtoul_l.constprop.0+0xb0>
 800d8bc:	fb00 4003 	mla	r0, r0, r3, r4
 800d8c0:	2601      	movs	r6, #1
 800d8c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8c6:	e7e9      	b.n	800d89c <_strtoul_l.constprop.0+0x50>
 800d8c8:	2c2b      	cmp	r4, #43	@ 0x2b
 800d8ca:	bf04      	itt	eq
 800d8cc:	782c      	ldrbeq	r4, [r5, #0]
 800d8ce:	1c85      	addeq	r5, r0, #2
 800d8d0:	e7cd      	b.n	800d86e <_strtoul_l.constprop.0+0x22>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1d8      	bne.n	800d888 <_strtoul_l.constprop.0+0x3c>
 800d8d6:	2c30      	cmp	r4, #48	@ 0x30
 800d8d8:	bf0c      	ite	eq
 800d8da:	2308      	moveq	r3, #8
 800d8dc:	230a      	movne	r3, #10
 800d8de:	e7d3      	b.n	800d888 <_strtoul_l.constprop.0+0x3c>
 800d8e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d8e4:	f1bc 0f19 	cmp.w	ip, #25
 800d8e8:	d801      	bhi.n	800d8ee <_strtoul_l.constprop.0+0xa2>
 800d8ea:	3c37      	subs	r4, #55	@ 0x37
 800d8ec:	e7dc      	b.n	800d8a8 <_strtoul_l.constprop.0+0x5c>
 800d8ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d8f2:	f1bc 0f19 	cmp.w	ip, #25
 800d8f6:	d804      	bhi.n	800d902 <_strtoul_l.constprop.0+0xb6>
 800d8f8:	3c57      	subs	r4, #87	@ 0x57
 800d8fa:	e7d5      	b.n	800d8a8 <_strtoul_l.constprop.0+0x5c>
 800d8fc:	f04f 36ff 	mov.w	r6, #4294967295
 800d900:	e7df      	b.n	800d8c2 <_strtoul_l.constprop.0+0x76>
 800d902:	1c73      	adds	r3, r6, #1
 800d904:	d106      	bne.n	800d914 <_strtoul_l.constprop.0+0xc8>
 800d906:	2322      	movs	r3, #34	@ 0x22
 800d908:	f8ce 3000 	str.w	r3, [lr]
 800d90c:	4630      	mov	r0, r6
 800d90e:	b932      	cbnz	r2, 800d91e <_strtoul_l.constprop.0+0xd2>
 800d910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d914:	b107      	cbz	r7, 800d918 <_strtoul_l.constprop.0+0xcc>
 800d916:	4240      	negs	r0, r0
 800d918:	2a00      	cmp	r2, #0
 800d91a:	d0f9      	beq.n	800d910 <_strtoul_l.constprop.0+0xc4>
 800d91c:	b106      	cbz	r6, 800d920 <_strtoul_l.constprop.0+0xd4>
 800d91e:	1e69      	subs	r1, r5, #1
 800d920:	6011      	str	r1, [r2, #0]
 800d922:	e7f5      	b.n	800d910 <_strtoul_l.constprop.0+0xc4>
 800d924:	0800e0d9 	.word	0x0800e0d9

0800d928 <_strtoul_r>:
 800d928:	f7ff bf90 	b.w	800d84c <_strtoul_l.constprop.0>

0800d92c <fiprintf>:
 800d92c:	b40e      	push	{r1, r2, r3}
 800d92e:	b503      	push	{r0, r1, lr}
 800d930:	4601      	mov	r1, r0
 800d932:	ab03      	add	r3, sp, #12
 800d934:	4805      	ldr	r0, [pc, #20]	@ (800d94c <fiprintf+0x20>)
 800d936:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93a:	6800      	ldr	r0, [r0, #0]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	f000 f837 	bl	800d9b0 <_vfiprintf_r>
 800d942:	b002      	add	sp, #8
 800d944:	f85d eb04 	ldr.w	lr, [sp], #4
 800d948:	b003      	add	sp, #12
 800d94a:	4770      	bx	lr
 800d94c:	2000018c 	.word	0x2000018c

0800d950 <abort>:
 800d950:	b508      	push	{r3, lr}
 800d952:	2006      	movs	r0, #6
 800d954:	f000 fa00 	bl	800dd58 <raise>
 800d958:	2001      	movs	r0, #1
 800d95a:	f7f6 f86b 	bl	8003a34 <_exit>

0800d95e <__sfputc_r>:
 800d95e:	6893      	ldr	r3, [r2, #8]
 800d960:	3b01      	subs	r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	b410      	push	{r4}
 800d966:	6093      	str	r3, [r2, #8]
 800d968:	da08      	bge.n	800d97c <__sfputc_r+0x1e>
 800d96a:	6994      	ldr	r4, [r2, #24]
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	db01      	blt.n	800d974 <__sfputc_r+0x16>
 800d970:	290a      	cmp	r1, #10
 800d972:	d103      	bne.n	800d97c <__sfputc_r+0x1e>
 800d974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d978:	f000 b932 	b.w	800dbe0 <__swbuf_r>
 800d97c:	6813      	ldr	r3, [r2, #0]
 800d97e:	1c58      	adds	r0, r3, #1
 800d980:	6010      	str	r0, [r2, #0]
 800d982:	7019      	strb	r1, [r3, #0]
 800d984:	4608      	mov	r0, r1
 800d986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <__sfputs_r>:
 800d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d98e:	4606      	mov	r6, r0
 800d990:	460f      	mov	r7, r1
 800d992:	4614      	mov	r4, r2
 800d994:	18d5      	adds	r5, r2, r3
 800d996:	42ac      	cmp	r4, r5
 800d998:	d101      	bne.n	800d99e <__sfputs_r+0x12>
 800d99a:	2000      	movs	r0, #0
 800d99c:	e007      	b.n	800d9ae <__sfputs_r+0x22>
 800d99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9a2:	463a      	mov	r2, r7
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	f7ff ffda 	bl	800d95e <__sfputc_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	d1f3      	bne.n	800d996 <__sfputs_r+0xa>
 800d9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9b0 <_vfiprintf_r>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	460d      	mov	r5, r1
 800d9b6:	b09d      	sub	sp, #116	@ 0x74
 800d9b8:	4614      	mov	r4, r2
 800d9ba:	4698      	mov	r8, r3
 800d9bc:	4606      	mov	r6, r0
 800d9be:	b118      	cbz	r0, 800d9c8 <_vfiprintf_r+0x18>
 800d9c0:	6a03      	ldr	r3, [r0, #32]
 800d9c2:	b90b      	cbnz	r3, 800d9c8 <_vfiprintf_r+0x18>
 800d9c4:	f7fd f85a 	bl	800aa7c <__sinit>
 800d9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ca:	07d9      	lsls	r1, r3, #31
 800d9cc:	d405      	bmi.n	800d9da <_vfiprintf_r+0x2a>
 800d9ce:	89ab      	ldrh	r3, [r5, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d402      	bmi.n	800d9da <_vfiprintf_r+0x2a>
 800d9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9d6:	f7fd fa16 	bl	800ae06 <__retarget_lock_acquire_recursive>
 800d9da:	89ab      	ldrh	r3, [r5, #12]
 800d9dc:	071b      	lsls	r3, r3, #28
 800d9de:	d501      	bpl.n	800d9e4 <_vfiprintf_r+0x34>
 800d9e0:	692b      	ldr	r3, [r5, #16]
 800d9e2:	b99b      	cbnz	r3, 800da0c <_vfiprintf_r+0x5c>
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f000 f938 	bl	800dc5c <__swsetup_r>
 800d9ec:	b170      	cbz	r0, 800da0c <_vfiprintf_r+0x5c>
 800d9ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9f0:	07dc      	lsls	r4, r3, #31
 800d9f2:	d504      	bpl.n	800d9fe <_vfiprintf_r+0x4e>
 800d9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f8:	b01d      	add	sp, #116	@ 0x74
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fe:	89ab      	ldrh	r3, [r5, #12]
 800da00:	0598      	lsls	r0, r3, #22
 800da02:	d4f7      	bmi.n	800d9f4 <_vfiprintf_r+0x44>
 800da04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da06:	f7fd f9ff 	bl	800ae08 <__retarget_lock_release_recursive>
 800da0a:	e7f3      	b.n	800d9f4 <_vfiprintf_r+0x44>
 800da0c:	2300      	movs	r3, #0
 800da0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da10:	2320      	movs	r3, #32
 800da12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da16:	f8cd 800c 	str.w	r8, [sp, #12]
 800da1a:	2330      	movs	r3, #48	@ 0x30
 800da1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dbcc <_vfiprintf_r+0x21c>
 800da20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da24:	f04f 0901 	mov.w	r9, #1
 800da28:	4623      	mov	r3, r4
 800da2a:	469a      	mov	sl, r3
 800da2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da30:	b10a      	cbz	r2, 800da36 <_vfiprintf_r+0x86>
 800da32:	2a25      	cmp	r2, #37	@ 0x25
 800da34:	d1f9      	bne.n	800da2a <_vfiprintf_r+0x7a>
 800da36:	ebba 0b04 	subs.w	fp, sl, r4
 800da3a:	d00b      	beq.n	800da54 <_vfiprintf_r+0xa4>
 800da3c:	465b      	mov	r3, fp
 800da3e:	4622      	mov	r2, r4
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f7ff ffa2 	bl	800d98c <__sfputs_r>
 800da48:	3001      	adds	r0, #1
 800da4a:	f000 80a7 	beq.w	800db9c <_vfiprintf_r+0x1ec>
 800da4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da50:	445a      	add	r2, fp
 800da52:	9209      	str	r2, [sp, #36]	@ 0x24
 800da54:	f89a 3000 	ldrb.w	r3, [sl]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 809f 	beq.w	800db9c <_vfiprintf_r+0x1ec>
 800da5e:	2300      	movs	r3, #0
 800da60:	f04f 32ff 	mov.w	r2, #4294967295
 800da64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da68:	f10a 0a01 	add.w	sl, sl, #1
 800da6c:	9304      	str	r3, [sp, #16]
 800da6e:	9307      	str	r3, [sp, #28]
 800da70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da74:	931a      	str	r3, [sp, #104]	@ 0x68
 800da76:	4654      	mov	r4, sl
 800da78:	2205      	movs	r2, #5
 800da7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7e:	4853      	ldr	r0, [pc, #332]	@ (800dbcc <_vfiprintf_r+0x21c>)
 800da80:	f7f2 fba6 	bl	80001d0 <memchr>
 800da84:	9a04      	ldr	r2, [sp, #16]
 800da86:	b9d8      	cbnz	r0, 800dac0 <_vfiprintf_r+0x110>
 800da88:	06d1      	lsls	r1, r2, #27
 800da8a:	bf44      	itt	mi
 800da8c:	2320      	movmi	r3, #32
 800da8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da92:	0713      	lsls	r3, r2, #28
 800da94:	bf44      	itt	mi
 800da96:	232b      	movmi	r3, #43	@ 0x2b
 800da98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da9c:	f89a 3000 	ldrb.w	r3, [sl]
 800daa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800daa2:	d015      	beq.n	800dad0 <_vfiprintf_r+0x120>
 800daa4:	9a07      	ldr	r2, [sp, #28]
 800daa6:	4654      	mov	r4, sl
 800daa8:	2000      	movs	r0, #0
 800daaa:	f04f 0c0a 	mov.w	ip, #10
 800daae:	4621      	mov	r1, r4
 800dab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dab4:	3b30      	subs	r3, #48	@ 0x30
 800dab6:	2b09      	cmp	r3, #9
 800dab8:	d94b      	bls.n	800db52 <_vfiprintf_r+0x1a2>
 800daba:	b1b0      	cbz	r0, 800daea <_vfiprintf_r+0x13a>
 800dabc:	9207      	str	r2, [sp, #28]
 800dabe:	e014      	b.n	800daea <_vfiprintf_r+0x13a>
 800dac0:	eba0 0308 	sub.w	r3, r0, r8
 800dac4:	fa09 f303 	lsl.w	r3, r9, r3
 800dac8:	4313      	orrs	r3, r2
 800daca:	9304      	str	r3, [sp, #16]
 800dacc:	46a2      	mov	sl, r4
 800dace:	e7d2      	b.n	800da76 <_vfiprintf_r+0xc6>
 800dad0:	9b03      	ldr	r3, [sp, #12]
 800dad2:	1d19      	adds	r1, r3, #4
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	9103      	str	r1, [sp, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bfbb      	ittet	lt
 800dadc:	425b      	neglt	r3, r3
 800dade:	f042 0202 	orrlt.w	r2, r2, #2
 800dae2:	9307      	strge	r3, [sp, #28]
 800dae4:	9307      	strlt	r3, [sp, #28]
 800dae6:	bfb8      	it	lt
 800dae8:	9204      	strlt	r2, [sp, #16]
 800daea:	7823      	ldrb	r3, [r4, #0]
 800daec:	2b2e      	cmp	r3, #46	@ 0x2e
 800daee:	d10a      	bne.n	800db06 <_vfiprintf_r+0x156>
 800daf0:	7863      	ldrb	r3, [r4, #1]
 800daf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf4:	d132      	bne.n	800db5c <_vfiprintf_r+0x1ac>
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	9203      	str	r2, [sp, #12]
 800dafe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db02:	3402      	adds	r4, #2
 800db04:	9305      	str	r3, [sp, #20]
 800db06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbdc <_vfiprintf_r+0x22c>
 800db0a:	7821      	ldrb	r1, [r4, #0]
 800db0c:	2203      	movs	r2, #3
 800db0e:	4650      	mov	r0, sl
 800db10:	f7f2 fb5e 	bl	80001d0 <memchr>
 800db14:	b138      	cbz	r0, 800db26 <_vfiprintf_r+0x176>
 800db16:	9b04      	ldr	r3, [sp, #16]
 800db18:	eba0 000a 	sub.w	r0, r0, sl
 800db1c:	2240      	movs	r2, #64	@ 0x40
 800db1e:	4082      	lsls	r2, r0
 800db20:	4313      	orrs	r3, r2
 800db22:	3401      	adds	r4, #1
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db2a:	4829      	ldr	r0, [pc, #164]	@ (800dbd0 <_vfiprintf_r+0x220>)
 800db2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db30:	2206      	movs	r2, #6
 800db32:	f7f2 fb4d 	bl	80001d0 <memchr>
 800db36:	2800      	cmp	r0, #0
 800db38:	d03f      	beq.n	800dbba <_vfiprintf_r+0x20a>
 800db3a:	4b26      	ldr	r3, [pc, #152]	@ (800dbd4 <_vfiprintf_r+0x224>)
 800db3c:	bb1b      	cbnz	r3, 800db86 <_vfiprintf_r+0x1d6>
 800db3e:	9b03      	ldr	r3, [sp, #12]
 800db40:	3307      	adds	r3, #7
 800db42:	f023 0307 	bic.w	r3, r3, #7
 800db46:	3308      	adds	r3, #8
 800db48:	9303      	str	r3, [sp, #12]
 800db4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4c:	443b      	add	r3, r7
 800db4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800db50:	e76a      	b.n	800da28 <_vfiprintf_r+0x78>
 800db52:	fb0c 3202 	mla	r2, ip, r2, r3
 800db56:	460c      	mov	r4, r1
 800db58:	2001      	movs	r0, #1
 800db5a:	e7a8      	b.n	800daae <_vfiprintf_r+0xfe>
 800db5c:	2300      	movs	r3, #0
 800db5e:	3401      	adds	r4, #1
 800db60:	9305      	str	r3, [sp, #20]
 800db62:	4619      	mov	r1, r3
 800db64:	f04f 0c0a 	mov.w	ip, #10
 800db68:	4620      	mov	r0, r4
 800db6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db6e:	3a30      	subs	r2, #48	@ 0x30
 800db70:	2a09      	cmp	r2, #9
 800db72:	d903      	bls.n	800db7c <_vfiprintf_r+0x1cc>
 800db74:	2b00      	cmp	r3, #0
 800db76:	d0c6      	beq.n	800db06 <_vfiprintf_r+0x156>
 800db78:	9105      	str	r1, [sp, #20]
 800db7a:	e7c4      	b.n	800db06 <_vfiprintf_r+0x156>
 800db7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800db80:	4604      	mov	r4, r0
 800db82:	2301      	movs	r3, #1
 800db84:	e7f0      	b.n	800db68 <_vfiprintf_r+0x1b8>
 800db86:	ab03      	add	r3, sp, #12
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	462a      	mov	r2, r5
 800db8c:	4b12      	ldr	r3, [pc, #72]	@ (800dbd8 <_vfiprintf_r+0x228>)
 800db8e:	a904      	add	r1, sp, #16
 800db90:	4630      	mov	r0, r6
 800db92:	f7fc f91b 	bl	8009dcc <_printf_float>
 800db96:	4607      	mov	r7, r0
 800db98:	1c78      	adds	r0, r7, #1
 800db9a:	d1d6      	bne.n	800db4a <_vfiprintf_r+0x19a>
 800db9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db9e:	07d9      	lsls	r1, r3, #31
 800dba0:	d405      	bmi.n	800dbae <_vfiprintf_r+0x1fe>
 800dba2:	89ab      	ldrh	r3, [r5, #12]
 800dba4:	059a      	lsls	r2, r3, #22
 800dba6:	d402      	bmi.n	800dbae <_vfiprintf_r+0x1fe>
 800dba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbaa:	f7fd f92d 	bl	800ae08 <__retarget_lock_release_recursive>
 800dbae:	89ab      	ldrh	r3, [r5, #12]
 800dbb0:	065b      	lsls	r3, r3, #25
 800dbb2:	f53f af1f 	bmi.w	800d9f4 <_vfiprintf_r+0x44>
 800dbb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbb8:	e71e      	b.n	800d9f8 <_vfiprintf_r+0x48>
 800dbba:	ab03      	add	r3, sp, #12
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4b05      	ldr	r3, [pc, #20]	@ (800dbd8 <_vfiprintf_r+0x228>)
 800dbc2:	a904      	add	r1, sp, #16
 800dbc4:	4630      	mov	r0, r6
 800dbc6:	f7fc fb99 	bl	800a2fc <_printf_i>
 800dbca:	e7e4      	b.n	800db96 <_vfiprintf_r+0x1e6>
 800dbcc:	0800e460 	.word	0x0800e460
 800dbd0:	0800e46a 	.word	0x0800e46a
 800dbd4:	08009dcd 	.word	0x08009dcd
 800dbd8:	0800d98d 	.word	0x0800d98d
 800dbdc:	0800e466 	.word	0x0800e466

0800dbe0 <__swbuf_r>:
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	460e      	mov	r6, r1
 800dbe4:	4614      	mov	r4, r2
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	b118      	cbz	r0, 800dbf2 <__swbuf_r+0x12>
 800dbea:	6a03      	ldr	r3, [r0, #32]
 800dbec:	b90b      	cbnz	r3, 800dbf2 <__swbuf_r+0x12>
 800dbee:	f7fc ff45 	bl	800aa7c <__sinit>
 800dbf2:	69a3      	ldr	r3, [r4, #24]
 800dbf4:	60a3      	str	r3, [r4, #8]
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	071a      	lsls	r2, r3, #28
 800dbfa:	d501      	bpl.n	800dc00 <__swbuf_r+0x20>
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	b943      	cbnz	r3, 800dc12 <__swbuf_r+0x32>
 800dc00:	4621      	mov	r1, r4
 800dc02:	4628      	mov	r0, r5
 800dc04:	f000 f82a 	bl	800dc5c <__swsetup_r>
 800dc08:	b118      	cbz	r0, 800dc12 <__swbuf_r+0x32>
 800dc0a:	f04f 37ff 	mov.w	r7, #4294967295
 800dc0e:	4638      	mov	r0, r7
 800dc10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	6922      	ldr	r2, [r4, #16]
 800dc16:	1a98      	subs	r0, r3, r2
 800dc18:	6963      	ldr	r3, [r4, #20]
 800dc1a:	b2f6      	uxtb	r6, r6
 800dc1c:	4283      	cmp	r3, r0
 800dc1e:	4637      	mov	r7, r6
 800dc20:	dc05      	bgt.n	800dc2e <__swbuf_r+0x4e>
 800dc22:	4621      	mov	r1, r4
 800dc24:	4628      	mov	r0, r5
 800dc26:	f7ff fd29 	bl	800d67c <_fflush_r>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d1ed      	bne.n	800dc0a <__swbuf_r+0x2a>
 800dc2e:	68a3      	ldr	r3, [r4, #8]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	60a3      	str	r3, [r4, #8]
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	6022      	str	r2, [r4, #0]
 800dc3a:	701e      	strb	r6, [r3, #0]
 800dc3c:	6962      	ldr	r2, [r4, #20]
 800dc3e:	1c43      	adds	r3, r0, #1
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d004      	beq.n	800dc4e <__swbuf_r+0x6e>
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	07db      	lsls	r3, r3, #31
 800dc48:	d5e1      	bpl.n	800dc0e <__swbuf_r+0x2e>
 800dc4a:	2e0a      	cmp	r6, #10
 800dc4c:	d1df      	bne.n	800dc0e <__swbuf_r+0x2e>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4628      	mov	r0, r5
 800dc52:	f7ff fd13 	bl	800d67c <_fflush_r>
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d0d9      	beq.n	800dc0e <__swbuf_r+0x2e>
 800dc5a:	e7d6      	b.n	800dc0a <__swbuf_r+0x2a>

0800dc5c <__swsetup_r>:
 800dc5c:	b538      	push	{r3, r4, r5, lr}
 800dc5e:	4b29      	ldr	r3, [pc, #164]	@ (800dd04 <__swsetup_r+0xa8>)
 800dc60:	4605      	mov	r5, r0
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	460c      	mov	r4, r1
 800dc66:	b118      	cbz	r0, 800dc70 <__swsetup_r+0x14>
 800dc68:	6a03      	ldr	r3, [r0, #32]
 800dc6a:	b90b      	cbnz	r3, 800dc70 <__swsetup_r+0x14>
 800dc6c:	f7fc ff06 	bl	800aa7c <__sinit>
 800dc70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc74:	0719      	lsls	r1, r3, #28
 800dc76:	d422      	bmi.n	800dcbe <__swsetup_r+0x62>
 800dc78:	06da      	lsls	r2, r3, #27
 800dc7a:	d407      	bmi.n	800dc8c <__swsetup_r+0x30>
 800dc7c:	2209      	movs	r2, #9
 800dc7e:	602a      	str	r2, [r5, #0]
 800dc80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8a:	e033      	b.n	800dcf4 <__swsetup_r+0x98>
 800dc8c:	0758      	lsls	r0, r3, #29
 800dc8e:	d512      	bpl.n	800dcb6 <__swsetup_r+0x5a>
 800dc90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc92:	b141      	cbz	r1, 800dca6 <__swsetup_r+0x4a>
 800dc94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc98:	4299      	cmp	r1, r3
 800dc9a:	d002      	beq.n	800dca2 <__swsetup_r+0x46>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f7fd ff1f 	bl	800bae0 <_free_r>
 800dca2:	2300      	movs	r3, #0
 800dca4:	6363      	str	r3, [r4, #52]	@ 0x34
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dcac:	81a3      	strh	r3, [r4, #12]
 800dcae:	2300      	movs	r3, #0
 800dcb0:	6063      	str	r3, [r4, #4]
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	89a3      	ldrh	r3, [r4, #12]
 800dcb8:	f043 0308 	orr.w	r3, r3, #8
 800dcbc:	81a3      	strh	r3, [r4, #12]
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	b94b      	cbnz	r3, 800dcd6 <__swsetup_r+0x7a>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dccc:	d003      	beq.n	800dcd6 <__swsetup_r+0x7a>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f000 f883 	bl	800dddc <__smakebuf_r>
 800dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcda:	f013 0201 	ands.w	r2, r3, #1
 800dcde:	d00a      	beq.n	800dcf6 <__swsetup_r+0x9a>
 800dce0:	2200      	movs	r2, #0
 800dce2:	60a2      	str	r2, [r4, #8]
 800dce4:	6962      	ldr	r2, [r4, #20]
 800dce6:	4252      	negs	r2, r2
 800dce8:	61a2      	str	r2, [r4, #24]
 800dcea:	6922      	ldr	r2, [r4, #16]
 800dcec:	b942      	cbnz	r2, 800dd00 <__swsetup_r+0xa4>
 800dcee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dcf2:	d1c5      	bne.n	800dc80 <__swsetup_r+0x24>
 800dcf4:	bd38      	pop	{r3, r4, r5, pc}
 800dcf6:	0799      	lsls	r1, r3, #30
 800dcf8:	bf58      	it	pl
 800dcfa:	6962      	ldrpl	r2, [r4, #20]
 800dcfc:	60a2      	str	r2, [r4, #8]
 800dcfe:	e7f4      	b.n	800dcea <__swsetup_r+0x8e>
 800dd00:	2000      	movs	r0, #0
 800dd02:	e7f7      	b.n	800dcf4 <__swsetup_r+0x98>
 800dd04:	2000018c 	.word	0x2000018c

0800dd08 <_raise_r>:
 800dd08:	291f      	cmp	r1, #31
 800dd0a:	b538      	push	{r3, r4, r5, lr}
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	d904      	bls.n	800dd1c <_raise_r+0x14>
 800dd12:	2316      	movs	r3, #22
 800dd14:	6003      	str	r3, [r0, #0]
 800dd16:	f04f 30ff 	mov.w	r0, #4294967295
 800dd1a:	bd38      	pop	{r3, r4, r5, pc}
 800dd1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd1e:	b112      	cbz	r2, 800dd26 <_raise_r+0x1e>
 800dd20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd24:	b94b      	cbnz	r3, 800dd3a <_raise_r+0x32>
 800dd26:	4628      	mov	r0, r5
 800dd28:	f000 f830 	bl	800dd8c <_getpid_r>
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	4601      	mov	r1, r0
 800dd30:	4628      	mov	r0, r5
 800dd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd36:	f000 b817 	b.w	800dd68 <_kill_r>
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d00a      	beq.n	800dd54 <_raise_r+0x4c>
 800dd3e:	1c59      	adds	r1, r3, #1
 800dd40:	d103      	bne.n	800dd4a <_raise_r+0x42>
 800dd42:	2316      	movs	r3, #22
 800dd44:	6003      	str	r3, [r0, #0]
 800dd46:	2001      	movs	r0, #1
 800dd48:	e7e7      	b.n	800dd1a <_raise_r+0x12>
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd50:	4620      	mov	r0, r4
 800dd52:	4798      	blx	r3
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7e0      	b.n	800dd1a <_raise_r+0x12>

0800dd58 <raise>:
 800dd58:	4b02      	ldr	r3, [pc, #8]	@ (800dd64 <raise+0xc>)
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	6818      	ldr	r0, [r3, #0]
 800dd5e:	f7ff bfd3 	b.w	800dd08 <_raise_r>
 800dd62:	bf00      	nop
 800dd64:	2000018c 	.word	0x2000018c

0800dd68 <_kill_r>:
 800dd68:	b538      	push	{r3, r4, r5, lr}
 800dd6a:	4d07      	ldr	r5, [pc, #28]	@ (800dd88 <_kill_r+0x20>)
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4604      	mov	r4, r0
 800dd70:	4608      	mov	r0, r1
 800dd72:	4611      	mov	r1, r2
 800dd74:	602b      	str	r3, [r5, #0]
 800dd76:	f7f5 fe4d 	bl	8003a14 <_kill>
 800dd7a:	1c43      	adds	r3, r0, #1
 800dd7c:	d102      	bne.n	800dd84 <_kill_r+0x1c>
 800dd7e:	682b      	ldr	r3, [r5, #0]
 800dd80:	b103      	cbz	r3, 800dd84 <_kill_r+0x1c>
 800dd82:	6023      	str	r3, [r4, #0]
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	20005a60 	.word	0x20005a60

0800dd8c <_getpid_r>:
 800dd8c:	f7f5 be3a 	b.w	8003a04 <_getpid>

0800dd90 <__swhatbuf_r>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	460c      	mov	r4, r1
 800dd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	b096      	sub	sp, #88	@ 0x58
 800dd9c:	4615      	mov	r5, r2
 800dd9e:	461e      	mov	r6, r3
 800dda0:	da0d      	bge.n	800ddbe <__swhatbuf_r+0x2e>
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dda8:	f04f 0100 	mov.w	r1, #0
 800ddac:	bf14      	ite	ne
 800ddae:	2340      	movne	r3, #64	@ 0x40
 800ddb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	6031      	str	r1, [r6, #0]
 800ddb8:	602b      	str	r3, [r5, #0]
 800ddba:	b016      	add	sp, #88	@ 0x58
 800ddbc:	bd70      	pop	{r4, r5, r6, pc}
 800ddbe:	466a      	mov	r2, sp
 800ddc0:	f000 f848 	bl	800de54 <_fstat_r>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	dbec      	blt.n	800dda2 <__swhatbuf_r+0x12>
 800ddc8:	9901      	ldr	r1, [sp, #4]
 800ddca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ddce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ddd2:	4259      	negs	r1, r3
 800ddd4:	4159      	adcs	r1, r3
 800ddd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ddda:	e7eb      	b.n	800ddb4 <__swhatbuf_r+0x24>

0800dddc <__smakebuf_r>:
 800dddc:	898b      	ldrh	r3, [r1, #12]
 800ddde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dde0:	079d      	lsls	r5, r3, #30
 800dde2:	4606      	mov	r6, r0
 800dde4:	460c      	mov	r4, r1
 800dde6:	d507      	bpl.n	800ddf8 <__smakebuf_r+0x1c>
 800dde8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	6123      	str	r3, [r4, #16]
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	6163      	str	r3, [r4, #20]
 800ddf4:	b003      	add	sp, #12
 800ddf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddf8:	ab01      	add	r3, sp, #4
 800ddfa:	466a      	mov	r2, sp
 800ddfc:	f7ff ffc8 	bl	800dd90 <__swhatbuf_r>
 800de00:	9f00      	ldr	r7, [sp, #0]
 800de02:	4605      	mov	r5, r0
 800de04:	4639      	mov	r1, r7
 800de06:	4630      	mov	r0, r6
 800de08:	f7fb f87e 	bl	8008f08 <_malloc_r>
 800de0c:	b948      	cbnz	r0, 800de22 <__smakebuf_r+0x46>
 800de0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de12:	059a      	lsls	r2, r3, #22
 800de14:	d4ee      	bmi.n	800ddf4 <__smakebuf_r+0x18>
 800de16:	f023 0303 	bic.w	r3, r3, #3
 800de1a:	f043 0302 	orr.w	r3, r3, #2
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	e7e2      	b.n	800dde8 <__smakebuf_r+0xc>
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	6020      	str	r0, [r4, #0]
 800de26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de2a:	81a3      	strh	r3, [r4, #12]
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de32:	b15b      	cbz	r3, 800de4c <__smakebuf_r+0x70>
 800de34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de38:	4630      	mov	r0, r6
 800de3a:	f000 f81d 	bl	800de78 <_isatty_r>
 800de3e:	b128      	cbz	r0, 800de4c <__smakebuf_r+0x70>
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	f023 0303 	bic.w	r3, r3, #3
 800de46:	f043 0301 	orr.w	r3, r3, #1
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	431d      	orrs	r5, r3
 800de50:	81a5      	strh	r5, [r4, #12]
 800de52:	e7cf      	b.n	800ddf4 <__smakebuf_r+0x18>

0800de54 <_fstat_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4d07      	ldr	r5, [pc, #28]	@ (800de74 <_fstat_r+0x20>)
 800de58:	2300      	movs	r3, #0
 800de5a:	4604      	mov	r4, r0
 800de5c:	4608      	mov	r0, r1
 800de5e:	4611      	mov	r1, r2
 800de60:	602b      	str	r3, [r5, #0]
 800de62:	f7f5 fe37 	bl	8003ad4 <_fstat>
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	d102      	bne.n	800de70 <_fstat_r+0x1c>
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	b103      	cbz	r3, 800de70 <_fstat_r+0x1c>
 800de6e:	6023      	str	r3, [r4, #0]
 800de70:	bd38      	pop	{r3, r4, r5, pc}
 800de72:	bf00      	nop
 800de74:	20005a60 	.word	0x20005a60

0800de78 <_isatty_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d06      	ldr	r5, [pc, #24]	@ (800de94 <_isatty_r+0x1c>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	f7f5 fe36 	bl	8003af4 <_isatty>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d102      	bne.n	800de92 <_isatty_r+0x1a>
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	b103      	cbz	r3, 800de92 <_isatty_r+0x1a>
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20005a60 	.word	0x20005a60

0800de98 <_init>:
 800de98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9a:	bf00      	nop
 800de9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9e:	bc08      	pop	{r3}
 800dea0:	469e      	mov	lr, r3
 800dea2:	4770      	bx	lr

0800dea4 <_fini>:
 800dea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea6:	bf00      	nop
 800dea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deaa:	bc08      	pop	{r3}
 800deac:	469e      	mov	lr, r3
 800deae:	4770      	bx	lr
