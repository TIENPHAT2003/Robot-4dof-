
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004614  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004624  20004624  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fc14  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002876  00000000  00000000  0002fc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fa8  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c0f  00000000  00000000  000334b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022b25  00000000  00000000  000340c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001201e  00000000  00000000  00056bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d230d  00000000  00000000  00068c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004304  00000000  00000000  0013af18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0013f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f54 	.word	0x08005f54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005f54 	.word	0x08005f54

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b970 	b.w	8000e14 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	460d      	mov	r5, r1
 8000b54:	4604      	mov	r4, r0
 8000b56:	460f      	mov	r7, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14a      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4694      	mov	ip, r2
 8000b60:	d965      	bls.n	8000c2e <__udivmoddi4+0xe2>
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	b143      	cbz	r3, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b6c:	f1c3 0220 	rsb	r2, r3, #32
 8000b70:	409f      	lsls	r7, r3
 8000b72:	fa20 f202 	lsr.w	r2, r0, r2
 8000b76:	4317      	orrs	r7, r2
 8000b78:	409c      	lsls	r4, r3
 8000b7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7e:	fa1f f58c 	uxth.w	r5, ip
 8000b82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b86:	0c22      	lsrs	r2, r4, #16
 8000b88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b90:	fb01 f005 	mul.w	r0, r1, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x62>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba0:	f080 811c 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	f240 8119 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000baa:	3902      	subs	r1, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	b2a4      	uxth	r4, r4
 8000bb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bbe:	fb00 f505 	mul.w	r5, r0, r5
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x90>
 8000bc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bce:	f080 8107 	bcs.w	8000de0 <__udivmoddi4+0x294>
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	f240 8104 	bls.w	8000de0 <__udivmoddi4+0x294>
 8000bd8:	4464      	add	r4, ip
 8000bda:	3802      	subs	r0, #2
 8000bdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	2100      	movs	r1, #0
 8000be4:	b11e      	cbz	r6, 8000bee <__udivmoddi4+0xa2>
 8000be6:	40dc      	lsrs	r4, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	e9c6 4300 	strd	r4, r3, [r6]
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0xbc>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80ed 	beq.w	8000dd6 <__udivmoddi4+0x28a>
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000c02:	4608      	mov	r0, r1
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	fab3 f183 	clz	r1, r3
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d149      	bne.n	8000ca4 <__udivmoddi4+0x158>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	d302      	bcc.n	8000c1a <__udivmoddi4+0xce>
 8000c14:	4282      	cmp	r2, r0
 8000c16:	f200 80f8 	bhi.w	8000e0a <__udivmoddi4+0x2be>
 8000c1a:	1a84      	subs	r4, r0, r2
 8000c1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	4617      	mov	r7, r2
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d0e2      	beq.n	8000bee <__udivmoddi4+0xa2>
 8000c28:	e9c6 4700 	strd	r4, r7, [r6]
 8000c2c:	e7df      	b.n	8000bee <__udivmoddi4+0xa2>
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xe6>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f382 	clz	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8090 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3c:	1a8a      	subs	r2, r1, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2101      	movs	r1, #1
 8000c48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c50:	0c22      	lsrs	r2, r4, #16
 8000c52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c56:	fb0e f005 	mul.w	r0, lr, r5
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2b8>
 8000c6e:	4645      	mov	r5, r8
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c78:	fb07 2210 	mls	r2, r7, r0, r2
 8000c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x14e>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x14c>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2c2>
 8000c98:	4610      	mov	r0, r2
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca2:	e79f      	b.n	8000be4 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0720 	rsb	r7, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cba:	40fd      	lsrs	r5, r7
 8000cbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc0:	4323      	orrs	r3, r4
 8000cc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	fb09 5518 	mls	r5, r9, r8, r5
 8000cce:	0c1c      	lsrs	r4, r3, #16
 8000cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	fa02 f201 	lsl.w	r2, r2, r1
 8000cde:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf0:	42a5      	cmp	r5, r4
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4464      	add	r4, ip
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	b29d      	uxth	r5, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2ac>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2ac>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	4464      	add	r4, ip
 8000d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	42ac      	cmp	r4, r5
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46ae      	mov	lr, r5
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x29c>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x298>
 8000d3c:	b156      	cbz	r6, 8000d54 <__udivmoddi4+0x208>
 8000d3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d42:	eb64 040e 	sbc.w	r4, r4, lr
 8000d46:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4a:	40ca      	lsrs	r2, r1
 8000d4c:	40cc      	lsrs	r4, r1
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	e9c6 7400 	strd	r7, r4, [r6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	f1c3 0120 	rsb	r1, r3, #32
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	fa20 f201 	lsr.w	r2, r0, r1
 8000d68:	fa25 f101 	lsr.w	r1, r5, r1
 8000d6c:	409d      	lsls	r5, r3
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d86:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8a:	428d      	cmp	r5, r1
 8000d8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x258>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000d9c:	428d      	cmp	r5, r1
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1b49      	subs	r1, r1, r5
 8000da6:	b292      	uxth	r2, r2
 8000da8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dac:	fb07 1115 	mls	r1, r7, r5, r1
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	fb05 f10e 	mul.w	r1, r5, lr
 8000db8:	4291      	cmp	r1, r2
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x282>
 8000dbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000dc6:	4291      	cmp	r1, r2
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000dca:	3d02      	subs	r5, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	1a52      	subs	r2, r2, r1
 8000dd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0xfc>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e708      	b.n	8000bee <__udivmoddi4+0xa2>
 8000ddc:	4639      	mov	r1, r7
 8000dde:	e6e6      	b.n	8000bae <__udivmoddi4+0x62>
 8000de0:	4610      	mov	r0, r2
 8000de2:	e6fb      	b.n	8000bdc <__udivmoddi4+0x90>
 8000de4:	4548      	cmp	r0, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df0:	3b01      	subs	r3, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df4:	4645      	mov	r5, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x282>
 8000df8:	462b      	mov	r3, r5
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x258>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e04:	3d02      	subs	r5, #2
 8000e06:	4462      	add	r2, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e70a      	b.n	8000c24 <__udivmoddi4+0xd8>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x14e>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6178      	str	r0, [r7, #20]
 8000e20:	6139      	str	r1, [r7, #16]
 8000e22:	60fa      	str	r2, [r7, #12]
 8000e24:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000e34:	6979      	ldr	r1, [r7, #20]
 8000e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e3a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000e3e:	bf00      	nop
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	0000      	movs	r0, r0
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e70:	441a      	add	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff faf2 	bl	8000474 <__aeabi_i2d>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000e96:	f7ff fc81 	bl	800079c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4614      	mov	r4, r2
 8000ea0:	461d      	mov	r5, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fae3 	bl	8000474 <__aeabi_i2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	4629      	mov	r1, r5
 8000eb6:	f7ff fc71 	bl	800079c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <SpeedReadNonReset+0x118>)
 8000ec8:	f7ff fb3e 	bl	8000548 <__aeabi_dmul>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000edc:	a31e      	add	r3, pc, #120	; (adr r3, 8000f58 <SpeedReadNonReset+0x108>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff fb31 	bl	8000548 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4614      	mov	r4, r2
 8000eec:	461d      	mov	r5, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000ef4:	a31a      	add	r3, pc, #104	; (adr r3, 8000f60 <SpeedReadNonReset+0x110>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	f7ff fb25 	bl	8000548 <__aeabi_dmul>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4620      	mov	r0, r4
 8000f04:	4629      	mov	r1, r5
 8000f06:	f7ff f969 	bl	80001dc <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4614      	mov	r4, r2
 8000f10:	461d      	mov	r5, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f18:	a311      	add	r3, pc, #68	; (adr r3, 8000f60 <SpeedReadNonReset+0x110>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb13 	bl	8000548 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4620      	mov	r0, r4
 8000f28:	4629      	mov	r1, r5
 8000f2a:	f7ff f957 	bl	80001dc <__adddf3>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}
 8000f54:	f3af 8000 	nop.w
 8000f58:	ced91687 	.word	0xced91687
 8000f5c:	3feb53f7 	.word	0x3feb53f7
 8000f60:	532617c2 	.word	0x532617c2
 8000f64:	3fb2a305 	.word	0x3fb2a305
 8000f68:	404e0000 	.word	0x404e0000

08000f6c <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f96:	441a      	add	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e1b      	ldrb	r3, [r3, #24]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d107      	bne.n	8000fbe <CountRead+0x52>
	{
		return enc->count_X4;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa5e 	bl	8000474 <__aeabi_i2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	e033      	b.n	8001026 <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7e1b      	ldrb	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d110      	bne.n	8000fe8 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da00      	bge.n	8000fd0 <CountRead+0x64>
 8000fce:	3303      	adds	r3, #3
 8000fd0:	109b      	asrs	r3, r3, #2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa49 	bl	8000474 <__aeabi_i2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e01e      	b.n	8001026 <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7e1b      	ldrb	r3, [r3, #24]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d116      	bne.n	800101e <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000ff8:	fb03 f202 	mul.w	r2, r3, r2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	fb92 f3f3 	sdiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa34 	bl	8000474 <__aeabi_i2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800101c:	e003      	b.n	8001026 <CountRead+0xba>
	}else {
		return 0;
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
	}
}
 8001026:	ec43 2b17 	vmov	d7, r2, r3
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	eef0 0a67 	vmov.f32	s1, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d107      	bne.n	800105a <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	}
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 8001066:	b480      	push	{r7}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bfb8      	it	lt
 8001080:	425b      	neglt	r3, r3
 8001082:	b29a      	uxth	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	615a      	str	r2, [r3, #20]

	if(Input<0){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	da4d      	bge.n	8001136 <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d105      	bne.n	80010ae <Drive+0x48>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
 80010ac:	e018      	b.n	80010e0 <Drive+0x7a>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d105      	bne.n	80010c2 <Drive+0x5c>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	6393      	str	r3, [r2, #56]	; 0x38
 80010c0:	e00e      	b.n	80010e0 <Drive+0x7a>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d105      	bne.n	80010d6 <Drive+0x70>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2300      	movs	r3, #0
 80010d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010d4:	e004      	b.n	80010e0 <Drive+0x7a>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <Drive+0x90>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	89da      	ldrh	r2, [r3, #14]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80010f4:	e0b7      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d107      	bne.n	800110e <Drive+0xa8>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	89d9      	ldrh	r1, [r3, #14]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	6393      	str	r3, [r2, #56]	; 0x38
 800110c:	e0ab      	b.n	8001266 <Drive+0x200>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d107      	bne.n	8001126 <Drive+0xc0>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	89d9      	ldrh	r1, [r3, #14]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	460b      	mov	r3, r1
 8001122:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001124:	e09f      	b.n	8001266 <Drive+0x200>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	89d9      	ldrh	r1, [r3, #14]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001134:	e097      	b.n	8001266 <Drive+0x200>
	else if(Input>0){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd4d      	ble.n	80011d8 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d106      	bne.n	8001152 <Drive+0xec>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	89da      	ldrh	r2, [r3, #14]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
 8001150:	e01e      	b.n	8001190 <Drive+0x12a>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d107      	bne.n	800116a <Drive+0x104>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	89d9      	ldrh	r1, [r3, #14]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	460b      	mov	r3, r1
 8001166:	6393      	str	r3, [r2, #56]	; 0x38
 8001168:	e012      	b.n	8001190 <Drive+0x12a>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b08      	cmp	r3, #8
 8001170:	d107      	bne.n	8001182 <Drive+0x11c>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	89d9      	ldrh	r1, [r3, #14]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001180:	e006      	b.n	8001190 <Drive+0x12a>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	89d9      	ldrh	r1, [r3, #14]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	460b      	mov	r3, r1
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <Drive+0x13e>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011a2:	e060      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d105      	bne.n	80011b8 <Drive+0x152>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2300      	movs	r3, #0
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38
 80011b6:	e056      	b.n	8001266 <Drive+0x200>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d105      	bne.n	80011cc <Drive+0x166>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2300      	movs	r3, #0
 80011c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011ca:	e04c      	b.n	8001266 <Drive+0x200>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011d6:	e046      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <Drive+0x186>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	635a      	str	r2, [r3, #52]	; 0x34
 80011ea:	e018      	b.n	800121e <Drive+0x1b8>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d105      	bne.n	8001200 <Drive+0x19a>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	6393      	str	r3, [r2, #56]	; 0x38
 80011fe:	e00e      	b.n	800121e <Drive+0x1b8>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d105      	bne.n	8001214 <Drive+0x1ae>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001212:	e004      	b.n	800121e <Drive+0x1b8>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d105      	bne.n	8001232 <Drive+0x1cc>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001230:	e019      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d105      	bne.n	8001246 <Drive+0x1e0>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001244:	e00f      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d105      	bne.n	800125a <Drive+0x1f4>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001258:	e005      	b.n	8001266 <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001264:	e7ff      	b.n	8001266 <Drive+0x200>
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	ed87 0a02 	vstr	s0, [r7, #8]
 800127e:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	ed93 7a00 	vldr	s14, [r3]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edd3 7a01 	vldr	s15, [r3, #4]
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	edd3 6a07 	vldr	s13, [r3, #28]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd06      	ble.n	800130e <Pid_Cal+0x9c>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	e002      	b.n	8001314 <Pid_Cal+0xa2>
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	edd3 7a08 	vldr	s15, [r3, #32]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d506      	bpl.n	8001344 <Pid_Cal+0xd2>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	e002      	b.n	800134a <Pid_Cal+0xd8>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	edd3 7a08 	vldr	s15, [r3, #32]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 6a02 	vldr	s13, [r3, #8]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001362:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001366:	ee67 6a27 	vmul.f32	s13, s14, s15
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001384:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800138e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800139e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a1a      	ldr	r2, [r3, #32]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80013d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80013f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	dd02      	ble.n	8001400 <Pid_Cal+0x18e>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	e001      	b.n	8001404 <Pid_Cal+0x192>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	d502      	bpl.n	8001424 <Pid_Cal+0x1b2>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	e001      	b.n	8001428 <Pid_Cal+0x1b6>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <vApplicationGetIdleTaskMemory+0x2c>)
 8001448:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <vApplicationGetIdleTaskMemory+0x30>)
 800144e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000002c 	.word	0x2000002c
 8001468:	20000080 	.word	0x20000080

0800146c <PID_LINK1_Init>:
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
int AngleLink1;
void PID_LINK1_Init()
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <PID_LINK1_Init+0x88>)
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <PID_LINK1_Init+0x8c>)
 8001474:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <PID_LINK1_Init+0x88>)
 8001478:	4a20      	ldr	r2, [pc, #128]	; (80014fc <PID_LINK1_Init+0x90>)
 800147a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <PID_LINK1_Init+0x88>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <PID_LINK1_Init+0x88>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <PID_LINK1_Init+0x88>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <PID_LINK1_Init+0x94>)
 8001490:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <PID_LINK1_Init+0x88>)
 8001494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <PID_LINK1_Init+0x88>)
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <PID_LINK1_Init+0x98>)
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <PID_LINK1_Init+0x88>)
 80014a2:	4a19      	ldr	r2, [pc, #100]	; (8001508 <PID_LINK1_Init+0x9c>)
 80014a4:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <PID_LINK1_Init+0x88>)
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <PID_LINK1_Init+0xa0>)
 80014aa:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <PID_LINK1_Init+0xa8>)
 80014b0:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <PID_LINK1_Init+0x94>)
 80014ce:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <PID_LINK1_Init+0x98>)
 80014dc:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <PID_LINK1_Init+0x9c>)
 80014e2:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <PID_LINK1_Init+0xa4>)
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <PID_LINK1_Init+0xa0>)
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000500 	.word	0x20000500
 80014f8:	42480000 	.word	0x42480000
 80014fc:	437a0000 	.word	0x437a0000
 8001500:	3c23d70a 	.word	0x3c23d70a
 8001504:	fffffc18 	.word	0xfffffc18
 8001508:	447a0000 	.word	0x447a0000
 800150c:	c47a0000 	.word	0xc47a0000
 8001510:	20000550 	.word	0x20000550
 8001514:	41200000 	.word	0x41200000

08001518 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001518:	b580      	push	{r7, lr}
 800151a:	ed2d 8b02 	vpush	{d8}
 800151e:	b082      	sub	sp, #8
 8001520:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <PID_LINK1_Speed+0x5c>)
 8001524:	f7ff fc94 	bl	8000e50 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <PID_LINK1_Speed+0x60>)
 800152a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <PID_LINK1_Speed+0x5c>)
 8001530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff faa0 	bl	8000a7c <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	ee00 3a90 	vmov	s1, r3
 8001542:	eeb0 0a48 	vmov.f32	s0, s16
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <PID_LINK1_Speed+0x64>)
 8001548:	f7ff fe93 	bl	8001272 <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <PID_LINK1_Speed+0x64>)
 800154e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001556:	230c      	movs	r3, #12
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2308      	movs	r3, #8
 800155c:	ee17 2a90 	vmov	r2, s15
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <PID_LINK1_Speed+0x68>)
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <PID_LINK1_Speed+0x6c>)
 8001564:	f7ff fd7f 	bl	8001066 <Drive>
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	ecbd 8b02 	vpop	{d8}
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200004a0 	.word	0x200004a0
 8001578:	20000550 	.word	0x20000550
 800157c:	20000500 	.word	0x20000500
 8001580:	200003e8 	.word	0x200003e8
 8001584:	200004e8 	.word	0x200004e8

08001588 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001588:	b580      	push	{r7, lr}
 800158a:	ed2d 8b02 	vpush	{d8}
 800158e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <PID_LINK1_Pos+0x48>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800159c:	2102      	movs	r1, #2
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <PID_LINK1_Pos+0x4c>)
 80015a0:	f7ff fce4 	bl	8000f6c <CountRead>
 80015a4:	ec53 2b10 	vmov	r2, r3, d0
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fa66 	bl	8000a7c <__aeabi_d2f>
 80015b0:	4603      	mov	r3, r0
 80015b2:	ee00 3a90 	vmov	s1, r3
 80015b6:	eeb0 0a48 	vmov.f32	s0, s16
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <PID_LINK1_Pos+0x50>)
 80015bc:	f7ff fe59 	bl	8001272 <Pid_Cal>
	PID_LINK1_Speed();
 80015c0:	f7ff ffaa 	bl	8001518 <PID_LINK1_Speed>
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	ecbd 8b02 	vpop	{d8}
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200005a0 	.word	0x200005a0
 80015d4:	200004a0 	.word	0x200004a0
 80015d8:	20000550 	.word	0x20000550

080015dc <PID_LINK2_Init>:
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
int AngleLink2;
void PID_LINK2_Init()
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <PID_LINK2_Init+0x88>)
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <PID_LINK2_Init+0x8c>)
 80015e4:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <PID_LINK2_Init+0x88>)
 80015e8:	4a20      	ldr	r2, [pc, #128]	; (800166c <PID_LINK2_Init+0x90>)
 80015ea:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <PID_LINK2_Init+0x88>)
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <PID_LINK2_Init+0x88>)
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <PID_LINK2_Init+0x88>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <PID_LINK2_Init+0x94>)
 8001600:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <PID_LINK2_Init+0x88>)
 8001604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <PID_LINK2_Init+0x88>)
 800160c:	4a19      	ldr	r2, [pc, #100]	; (8001674 <PID_LINK2_Init+0x98>)
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <PID_LINK2_Init+0x88>)
 8001612:	4a19      	ldr	r2, [pc, #100]	; (8001678 <PID_LINK2_Init+0x9c>)
 8001614:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <PID_LINK2_Init+0x88>)
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <PID_LINK2_Init+0xa0>)
 800161a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <PID_LINK2_Init+0xa4>)
 800161e:	4a19      	ldr	r2, [pc, #100]	; (8001684 <PID_LINK2_Init+0xa8>)
 8001620:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <PID_LINK2_Init+0xa4>)
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <PID_LINK2_Init+0xa4>)
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <PID_LINK2_Init+0xa4>)
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <PID_LINK2_Init+0xa4>)
 800163c:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <PID_LINK2_Init+0x94>)
 800163e:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <PID_LINK2_Init+0xa4>)
 8001642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <PID_LINK2_Init+0xa4>)
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <PID_LINK2_Init+0x98>)
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <PID_LINK2_Init+0xa4>)
 8001650:	4a09      	ldr	r2, [pc, #36]	; (8001678 <PID_LINK2_Init+0x9c>)
 8001652:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <PID_LINK2_Init+0xa4>)
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <PID_LINK2_Init+0xa0>)
 8001658:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20000608 	.word	0x20000608
 8001668:	42480000 	.word	0x42480000
 800166c:	437a0000 	.word	0x437a0000
 8001670:	3c23d70a 	.word	0x3c23d70a
 8001674:	fffffc18 	.word	0xfffffc18
 8001678:	447a0000 	.word	0x447a0000
 800167c:	c47a0000 	.word	0xc47a0000
 8001680:	20000658 	.word	0x20000658
 8001684:	41200000 	.word	0x41200000

08001688 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 8001688:	b580      	push	{r7, lr}
 800168a:	ed2d 8b02 	vpush	{d8}
 800168e:	b082      	sub	sp, #8
 8001690:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <PID_LINK2_Speed+0x5c>)
 8001694:	f7ff fbdc 	bl	8000e50 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <PID_LINK2_Speed+0x60>)
 800169a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <PID_LINK2_Speed+0x5c>)
 80016a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff f9e8 	bl	8000a7c <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	ee00 3a90 	vmov	s1, r3
 80016b2:	eeb0 0a48 	vmov.f32	s0, s16
 80016b6:	480d      	ldr	r0, [pc, #52]	; (80016ec <PID_LINK2_Speed+0x64>)
 80016b8:	f7ff fddb 	bl	8001272 <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <PID_LINK2_Speed+0x64>)
 80016be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	230c      	movs	r3, #12
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2308      	movs	r3, #8
 80016cc:	ee17 2a90 	vmov	r2, s15
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <PID_LINK2_Speed+0x68>)
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <PID_LINK2_Speed+0x6c>)
 80016d4:	f7ff fcc7 	bl	8001066 <Drive>
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	ecbd 8b02 	vpop	{d8}
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200005a8 	.word	0x200005a8
 80016e8:	20000658 	.word	0x20000658
 80016ec:	20000608 	.word	0x20000608
 80016f0:	20000358 	.word	0x20000358
 80016f4:	200005f0 	.word	0x200005f0

080016f8 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	ed2d 8b02 	vpush	{d8}
 80016fe:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <PID_LINK2_Pos+0x48>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3bbb      	subs	r3, #187	; 0xbb
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800170e:	2102      	movs	r1, #2
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <PID_LINK2_Pos+0x4c>)
 8001712:	f7ff fc2b 	bl	8000f6c <CountRead>
 8001716:	ec53 2b10 	vmov	r2, r3, d0
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f9ad 	bl	8000a7c <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	ee00 3a90 	vmov	s1, r3
 8001728:	eeb0 0a48 	vmov.f32	s0, s16
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <PID_LINK2_Pos+0x50>)
 800172e:	f7ff fda0 	bl	8001272 <Pid_Cal>
	PID_LINK2_Speed();
 8001732:	f7ff ffa9 	bl	8001688 <PID_LINK2_Speed>
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	ecbd 8b02 	vpop	{d8}
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200006a8 	.word	0x200006a8
 8001744:	200005a8 	.word	0x200005a8
 8001748:	20000658 	.word	0x20000658

0800174c <PID_LINK3_Init>:
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
int AngleLink3;
void PID_LINK3_Init()
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <PID_LINK3_Init+0x8c>)
 8001754:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 250;
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <PID_LINK3_Init+0x90>)
 800175a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <PID_LINK3_Init+0x88>)
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <PID_LINK3_Init+0x88>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <PID_LINK3_Init+0x94>)
 8001770:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <PID_LINK3_Init+0x88>)
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <PID_LINK3_Init+0x98>)
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001782:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <PID_LINK3_Init+0x9c>)
 8001784:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <PID_LINK3_Init+0x88>)
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <PID_LINK3_Init+0xa0>)
 800178a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <PID_LINK3_Init+0xa4>)
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <PID_LINK3_Init+0xa8>)
 8001790:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <PID_LINK3_Init+0xa4>)
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <PID_LINK3_Init+0xa4>)
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <PID_LINK3_Init+0x94>)
 80017ae:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <PID_LINK3_Init+0x98>)
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <PID_LINK3_Init+0x9c>)
 80017c2:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <PID_LINK3_Init+0xa4>)
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <PID_LINK3_Init+0xa0>)
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000710 	.word	0x20000710
 80017d8:	42480000 	.word	0x42480000
 80017dc:	437a0000 	.word	0x437a0000
 80017e0:	3c23d70a 	.word	0x3c23d70a
 80017e4:	fffffc18 	.word	0xfffffc18
 80017e8:	447a0000 	.word	0x447a0000
 80017ec:	c47a0000 	.word	0xc47a0000
 80017f0:	20000760 	.word	0x20000760
 80017f4:	41200000 	.word	0x41200000

080017f8 <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	ed2d 8b02 	vpush	{d8}
 80017fe:	b082      	sub	sp, #8
 8001800:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <PID_LINK3_Speed+0x5c>)
 8001804:	f7ff fb24 	bl	8000e50 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <PID_LINK3_Speed+0x60>)
 800180a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <PID_LINK3_Speed+0x5c>)
 8001810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f930 	bl	8000a7c <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	ee00 3a90 	vmov	s1, r3
 8001822:	eeb0 0a48 	vmov.f32	s0, s16
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <PID_LINK3_Speed+0x64>)
 8001828:	f7ff fd23 	bl	8001272 <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <PID_LINK3_Speed+0x64>)
 800182e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001836:	2304      	movs	r3, #4
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	ee17 2a90 	vmov	r2, s15
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <PID_LINK3_Speed+0x68>)
 8001842:	4808      	ldr	r0, [pc, #32]	; (8001864 <PID_LINK3_Speed+0x6c>)
 8001844:	f7ff fc0f 	bl	8001066 <Drive>
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	ecbd 8b02 	vpop	{d8}
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200006b0 	.word	0x200006b0
 8001858:	20000760 	.word	0x20000760
 800185c:	20000710 	.word	0x20000710
 8001860:	20000358 	.word	0x20000358
 8001864:	200006f8 	.word	0x200006f8

08001868 <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 8001868:	b580      	push	{r7, lr}
 800186a:	ed2d 8b02 	vpush	{d8}
 800186e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <PID_LINK3_Pos+0x48>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3387      	adds	r3, #135	; 0x87
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800187e:	2102      	movs	r1, #2
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <PID_LINK3_Pos+0x4c>)
 8001882:	f7ff fb73 	bl	8000f6c <CountRead>
 8001886:	ec53 2b10 	vmov	r2, r3, d0
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f8f5 	bl	8000a7c <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	ee00 3a90 	vmov	s1, r3
 8001898:	eeb0 0a48 	vmov.f32	s0, s16
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <PID_LINK3_Pos+0x50>)
 800189e:	f7ff fce8 	bl	8001272 <Pid_Cal>
	PID_LINK3_Speed();
 80018a2:	f7ff ffa9 	bl	80017f8 <PID_LINK3_Speed>
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	ecbd 8b02 	vpop	{d8}
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200007b0 	.word	0x200007b0
 80018b4:	200006b0 	.word	0x200006b0
 80018b8:	20000760 	.word	0x20000760

080018bc <PID_LINK4_Init>:
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
int AngleLink4;
void PID_LINK4_Init()
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 80018c0:	4b20      	ldr	r3, [pc, #128]	; (8001944 <PID_LINK4_Init+0x88>)
 80018c2:	4a21      	ldr	r2, [pc, #132]	; (8001948 <PID_LINK4_Init+0x8c>)
 80018c4:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 250;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <PID_LINK4_Init+0x88>)
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <PID_LINK4_Init+0x90>)
 80018ca:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <PID_LINK4_Init+0x88>)
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <PID_LINK4_Init+0x88>)
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <PID_LINK4_Init+0x88>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <PID_LINK4_Init+0x94>)
 80018e0:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <PID_LINK4_Init+0x88>)
 80018e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <PID_LINK4_Init+0x88>)
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <PID_LINK4_Init+0x98>)
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <PID_LINK4_Init+0x88>)
 80018f2:	4a19      	ldr	r2, [pc, #100]	; (8001958 <PID_LINK4_Init+0x9c>)
 80018f4:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <PID_LINK4_Init+0x88>)
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <PID_LINK4_Init+0xa0>)
 80018fa:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <PID_LINK4_Init+0xa4>)
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <PID_LINK4_Init+0xa8>)
 8001900:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <PID_LINK4_Init+0xa4>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <PID_LINK4_Init+0xa4>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <PID_LINK4_Init+0xa4>)
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <PID_LINK4_Init+0xa4>)
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <PID_LINK4_Init+0x94>)
 800191e:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <PID_LINK4_Init+0xa4>)
 8001922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <PID_LINK4_Init+0xa4>)
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <PID_LINK4_Init+0x98>)
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <PID_LINK4_Init+0xa4>)
 8001930:	4a09      	ldr	r2, [pc, #36]	; (8001958 <PID_LINK4_Init+0x9c>)
 8001932:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <PID_LINK4_Init+0xa4>)
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <PID_LINK4_Init+0xa0>)
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	20000818 	.word	0x20000818
 8001948:	42480000 	.word	0x42480000
 800194c:	437a0000 	.word	0x437a0000
 8001950:	3c23d70a 	.word	0x3c23d70a
 8001954:	fffffc18 	.word	0xfffffc18
 8001958:	447a0000 	.word	0x447a0000
 800195c:	c47a0000 	.word	0xc47a0000
 8001960:	20000868 	.word	0x20000868
 8001964:	41200000 	.word	0x41200000

08001968 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 8001968:	b580      	push	{r7, lr}
 800196a:	ed2d 8b02 	vpush	{d8}
 800196e:	b082      	sub	sp, #8
 8001970:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <PID_LINK4_Speed+0x5c>)
 8001974:	f7ff fa6c 	bl	8000e50 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <PID_LINK4_Speed+0x60>)
 800197a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <PID_LINK4_Speed+0x5c>)
 8001980:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f878 	bl	8000a7c <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee00 3a90 	vmov	s1, r3
 8001992:	eeb0 0a48 	vmov.f32	s0, s16
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <PID_LINK4_Speed+0x64>)
 8001998:	f7ff fc6b 	bl	8001272 <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <PID_LINK4_Speed+0x64>)
 800199e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80019a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a6:	2304      	movs	r3, #4
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <PID_LINK4_Speed+0x68>)
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <PID_LINK4_Speed+0x6c>)
 80019b4:	f7ff fb57 	bl	8001066 <Drive>
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	ecbd 8b02 	vpop	{d8}
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200007b8 	.word	0x200007b8
 80019c8:	20000868 	.word	0x20000868
 80019cc:	20000818 	.word	0x20000818
 80019d0:	20000430 	.word	0x20000430
 80019d4:	20000800 	.word	0x20000800

080019d8 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 80019d8:	b580      	push	{r7, lr}
 80019da:	ed2d 8b02 	vpush	{d8}
 80019de:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <PID_LINK4_Pos+0x48>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3b5a      	subs	r3, #90	; 0x5a
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80019ee:	2102      	movs	r1, #2
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <PID_LINK4_Pos+0x4c>)
 80019f2:	f7ff fabb 	bl	8000f6c <CountRead>
 80019f6:	ec53 2b10 	vmov	r2, r3, d0
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f83d 	bl	8000a7c <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ee00 3a90 	vmov	s1, r3
 8001a08:	eeb0 0a48 	vmov.f32	s0, s16
 8001a0c:	4806      	ldr	r0, [pc, #24]	; (8001a28 <PID_LINK4_Pos+0x50>)
 8001a0e:	f7ff fc30 	bl	8001272 <Pid_Cal>
	PID_LINK4_Speed();
 8001a12:	f7ff ffa9 	bl	8001968 <PID_LINK4_Speed>
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	ecbd 8b02 	vpop	{d8}
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200008b8 	.word	0x200008b8
 8001a24:	200007b8 	.word	0x200007b8
 8001a28:	20000868 	.word	0x20000868
 8001a2c:	00000000 	.word	0x00000000

08001a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b096      	sub	sp, #88	; 0x58
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a36:	f001 f8c3 	bl	8002bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3a:	f000 f8cb 	bl	8001bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a3e:	f000 fbdf 	bl	8002200 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a42:	f000 f92f 	bl	8001ca4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a46:	f000 fa2d 	bl	8001ea4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001a4a:	f000 f983 	bl	8001d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a4e:	f000 f9d5 	bl	8001dfc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a52:	f000 faa1 	bl	8001f98 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001a56:	f000 faf3 	bl	8002040 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001a5a:	f000 fb81 	bl	8002160 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	484b      	ldr	r0, [pc, #300]	; (8001b90 <main+0x160>)
 8001a62:	f002 f899 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a66:	2104      	movs	r1, #4
 8001a68:	4849      	ldr	r0, [pc, #292]	; (8001b90 <main+0x160>)
 8001a6a:	f002 f895 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001a6e:	2108      	movs	r1, #8
 8001a70:	4847      	ldr	r0, [pc, #284]	; (8001b90 <main+0x160>)
 8001a72:	f002 f891 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001a76:	210c      	movs	r1, #12
 8001a78:	4845      	ldr	r0, [pc, #276]	; (8001b90 <main+0x160>)
 8001a7a:	f002 f88d 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4844      	ldr	r0, [pc, #272]	; (8001b94 <main+0x164>)
 8001a82:	f002 f889 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001a86:	2104      	movs	r1, #4
 8001a88:	4842      	ldr	r0, [pc, #264]	; (8001b94 <main+0x164>)
 8001a8a:	f002 f885 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4841      	ldr	r0, [pc, #260]	; (8001b98 <main+0x168>)
 8001a92:	f002 f881 	bl	8003b98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001a96:	210c      	movs	r1, #12
 8001a98:	483f      	ldr	r0, [pc, #252]	; (8001b98 <main+0x168>)
 8001a9a:	f002 f87d 	bl	8003b98 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a9e:	213c      	movs	r1, #60	; 0x3c
 8001aa0:	483e      	ldr	r0, [pc, #248]	; (8001b9c <main+0x16c>)
 8001aa2:	f002 f9e7 	bl	8003e74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001aa6:	213c      	movs	r1, #60	; 0x3c
 8001aa8:	483d      	ldr	r0, [pc, #244]	; (8001ba0 <main+0x170>)
 8001aaa:	f002 f9e3 	bl	8003e74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001aae:	213c      	movs	r1, #60	; 0x3c
 8001ab0:	483c      	ldr	r0, [pc, #240]	; (8001ba4 <main+0x174>)
 8001ab2:	f002 f9df 	bl	8003e74 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001ab6:	213c      	movs	r1, #60	; 0x3c
 8001ab8:	483b      	ldr	r0, [pc, #236]	; (8001ba8 <main+0x178>)
 8001aba:	f002 f9db 	bl	8003e74 <HAL_TIM_Encoder_Start>


  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 8001abe:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001b88 <main+0x158>
 8001ac2:	f641 3226 	movw	r2, #6950	; 0x1b26
 8001ac6:	4935      	ldr	r1, [pc, #212]	; (8001b9c <main+0x16c>)
 8001ac8:	4838      	ldr	r0, [pc, #224]	; (8001bac <main+0x17c>)
 8001aca:	f7ff f9a5 	bl	8000e18 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 8001ace:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8001b88 <main+0x158>
 8001ad2:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8001ad6:	4932      	ldr	r1, [pc, #200]	; (8001ba0 <main+0x170>)
 8001ad8:	4835      	ldr	r0, [pc, #212]	; (8001bb0 <main+0x180>)
 8001ada:	f7ff f99d 	bl	8000e18 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 6880, 0.01);
 8001ade:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001b88 <main+0x158>
 8001ae2:	f44f 52d7 	mov.w	r2, #6880	; 0x1ae0
 8001ae6:	492f      	ldr	r1, [pc, #188]	; (8001ba4 <main+0x174>)
 8001ae8:	4832      	ldr	r0, [pc, #200]	; (8001bb4 <main+0x184>)
 8001aea:	f7ff f995 	bl	8000e18 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3350, 0.01);
 8001aee:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001b88 <main+0x158>
 8001af2:	f640 5216 	movw	r2, #3350	; 0xd16
 8001af6:	492c      	ldr	r1, [pc, #176]	; (8001ba8 <main+0x178>)
 8001af8:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <main+0x188>)
 8001afa:	f7ff f98d 	bl	8000e18 <EncoderSetting>

  PID_LINK1_Init();
 8001afe:	f7ff fcb5 	bl	800146c <PID_LINK1_Init>
  PID_LINK2_Init();
 8001b02:	f7ff fd6b 	bl	80015dc <PID_LINK2_Init>
  PID_LINK3_Init();
 8001b06:	f7ff fe21 	bl	800174c <PID_LINK3_Init>
  PID_LINK4_Init();
 8001b0a:	f7ff fed7 	bl	80018bc <PID_LINK4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <main+0x18c>)
 8001b10:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001b14:	461d      	mov	r5, r3
 8001b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 ff98 	bl	8004a5e <osThreadCreate>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <main+0x190>)
 8001b32:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <main+0x194>)
 8001b36:	f107 0420 	add.w	r4, r7, #32
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 ff85 	bl	8004a5e <osThreadCreate>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <main+0x198>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <main+0x19c>)
 8001b5c:	1d3c      	adds	r4, r7, #4
 8001b5e:	461d      	mov	r5, r3
 8001b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 ff74 	bl	8004a5e <osThreadCreate>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <main+0x1a0>)
 8001b7a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b7c:	f002 ff68 	bl	8004a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x150>
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	47ae147b 	.word	0x47ae147b
 8001b8c:	3f847ae1 	.word	0x3f847ae1
 8001b90:	20000358 	.word	0x20000358
 8001b94:	20000430 	.word	0x20000430
 8001b98:	200003e8 	.word	0x200003e8
 8001b9c:	20000280 	.word	0x20000280
 8001ba0:	200002c8 	.word	0x200002c8
 8001ba4:	20000310 	.word	0x20000310
 8001ba8:	200003a0 	.word	0x200003a0
 8001bac:	200004a0 	.word	0x200004a0
 8001bb0:	200005a8 	.word	0x200005a8
 8001bb4:	200006b0 	.word	0x200006b0
 8001bb8:	200007b8 	.word	0x200007b8
 8001bbc:	08005f78 	.word	0x08005f78
 8001bc0:	20000478 	.word	0x20000478
 8001bc4:	08005fa0 	.word	0x08005fa0
 8001bc8:	2000047c 	.word	0x2000047c
 8001bcc:	08005fc8 	.word	0x08005fc8
 8001bd0:	20000480 	.word	0x20000480

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	; 0x50
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	2230      	movs	r2, #48	; 0x30
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 f98a 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <SystemClock_Config+0xc8>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <SystemClock_Config+0xc8>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <SystemClock_Config+0xc8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c38:	2310      	movs	r3, #16
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c44:	2308      	movs	r3, #8
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c48:	2348      	movs	r3, #72	; 0x48
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fae9 	bl	8003230 <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c64:	f000 fd20 	bl	80026a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c68:	230f      	movs	r3, #15
 8001c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2102      	movs	r1, #2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fd4b 	bl	8003720 <HAL_RCC_ClockConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c90:	f000 fd0a 	bl	80026a8 <Error_Handler>
  }
}
 8001c94:	bf00      	nop
 8001c96:	3750      	adds	r7, #80	; 0x50
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	; 0x30
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2224      	movs	r2, #36	; 0x24
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 f922 	bl	8005efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001cc2:	4a23      	ldr	r2, [pc, #140]	; (8001d50 <MX_TIM1_Init+0xac>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cec:	2303      	movs	r3, #3
 8001cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001d18:	f002 f806 	bl	8003d28 <HAL_TIM_Encoder_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001d22:	f000 fcc1 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	; (8001d4c <MX_TIM1_Init+0xa8>)
 8001d34:	f002 fd92 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d3e:	f000 fcb3 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000280 	.word	0x20000280
 8001d50:	40010000 	.word	0x40010000

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2224      	movs	r2, #36	; 0x24
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 f8ca 	bl	8005efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d86:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001da0:	2301      	movs	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001dc4:	f001 ffb0 	bl	8003d28 <HAL_TIM_Encoder_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001dce:	f000 fc6b 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <MX_TIM2_Init+0xa4>)
 8001de0:	f002 fd3c 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dea:	f000 fc5d 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200002c8 	.word	0x200002c8

08001dfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 f876 	bl	8005efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <MX_TIM3_Init+0xa4>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e46:	2301      	movs	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e6a:	f001 ff5d 	bl	8003d28 <HAL_TIM_Encoder_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e74:	f000 fc18 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_TIM3_Init+0xa0>)
 8001e86:	f002 fce9 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e90:	f000 fc0a 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000310 	.word	0x20000310
 8001ea0:	40000400 	.word	0x40000400

08001ea4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eaa:	f107 0320 	add.w	r3, r7, #32
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ec6:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <MX_TIM4_Init+0xf0>)
 8001eca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001ece:	2206      	movs	r2, #6
 8001ed0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001eda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ede:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eec:	4828      	ldr	r0, [pc, #160]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001eee:	f001 fe03 	bl	8003af8 <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ef8:	f000 fbd6 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4821      	ldr	r0, [pc, #132]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f0c:	f002 fca6 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f16:	f000 fbc7 	bl	80026a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f1a:	2360      	movs	r3, #96	; 0x60
 8001f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4817      	ldr	r0, [pc, #92]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f32:	f002 f91d 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001f3c:	f000 fbb4 	bl	80026a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2204      	movs	r2, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f48:	f002 f912 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f52:	f000 fba9 	bl	80026a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f5e:	f002 f907 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001f68:	f000 fb9e 	bl	80026a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	220c      	movs	r2, #12
 8001f70:	4619      	mov	r1, r3
 8001f72:	4807      	ldr	r0, [pc, #28]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f74:	f002 f8fc 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001f7e:	f000 fb93 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <MX_TIM4_Init+0xec>)
 8001f84:	f000 fd22 	bl	80029cc <HAL_TIM_MspPostInit>

}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000358 	.word	0x20000358
 8001f94:	40000800 	.word	0x40000800

08001f98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 ffa8 	bl	8005efc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <MX_TIM5_Init+0xa4>)
 8001fb8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fcc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_TIM5_Init+0xa0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_TIM5_Init+0xa0>)
 8002006:	f001 fe8f 	bl	8003d28 <HAL_TIM_Encoder_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002010:	f000 fb4a 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_TIM5_Init+0xa0>)
 8002022:	f002 fc1b 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800202c:	f000 fb3c 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3730      	adds	r7, #48	; 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200003a0 	.word	0x200003a0
 800203c:	40000c00 	.word	0x40000c00

08002040 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b092      	sub	sp, #72	; 0x48
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002046:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	615a      	str	r2, [r3, #20]
 8002062:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	2220      	movs	r2, #32
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f003 ff46 	bl	8005efc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <MX_TIM8_Init+0x118>)
 8002072:	4a3a      	ldr	r2, [pc, #232]	; (800215c <MX_TIM8_Init+0x11c>)
 8002074:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <MX_TIM8_Init+0x118>)
 8002078:	2206      	movs	r2, #6
 800207a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <MX_TIM8_Init+0x118>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002082:	4b35      	ldr	r3, [pc, #212]	; (8002158 <MX_TIM8_Init+0x118>)
 8002084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002088:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <MX_TIM8_Init+0x118>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002090:	4b31      	ldr	r3, [pc, #196]	; (8002158 <MX_TIM8_Init+0x118>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <MX_TIM8_Init+0x118>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800209c:	482e      	ldr	r0, [pc, #184]	; (8002158 <MX_TIM8_Init+0x118>)
 800209e:	f001 fd2b 	bl	8003af8 <HAL_TIM_PWM_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80020a8:	f000 fafe 	bl	80026a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b8:	4619      	mov	r1, r3
 80020ba:	4827      	ldr	r0, [pc, #156]	; (8002158 <MX_TIM8_Init+0x118>)
 80020bc:	f002 fbce 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80020c6:	f000 faef 	bl	80026a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ca:	2360      	movs	r3, #96	; 0x60
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ea:	2208      	movs	r2, #8
 80020ec:	4619      	mov	r1, r3
 80020ee:	481a      	ldr	r0, [pc, #104]	; (8002158 <MX_TIM8_Init+0x118>)
 80020f0:	f002 f83e 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80020fa:	f000 fad5 	bl	80026a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002102:	220c      	movs	r2, #12
 8002104:	4619      	mov	r1, r3
 8002106:	4814      	ldr	r0, [pc, #80]	; (8002158 <MX_TIM8_Init+0x118>)
 8002108:	f002 f832 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002112:	f000 fac9 	bl	80026a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800212a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800212e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	4619      	mov	r1, r3
 8002138:	4807      	ldr	r0, [pc, #28]	; (8002158 <MX_TIM8_Init+0x118>)
 800213a:	f002 fc0b 	bl	8004954 <HAL_TIMEx_ConfigBreakDeadTime>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002144:	f000 fab0 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <MX_TIM8_Init+0x118>)
 800214a:	f000 fc3f 	bl	80029cc <HAL_TIM_MspPostInit>

}
 800214e:	bf00      	nop
 8002150:	3748      	adds	r7, #72	; 0x48
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200003e8 	.word	0x200003e8
 800215c:	40010400 	.word	0x40010400

08002160 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	615a      	str	r2, [r3, #20]
 8002176:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MX_TIM9_Init+0x98>)
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <MX_TIM9_Init+0x9c>)
 800217c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 800217e:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <MX_TIM9_Init+0x98>)
 8002180:	2206      	movs	r2, #6
 8002182:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_TIM9_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_TIM9_Init+0x98>)
 800218c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002190:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_TIM9_Init+0x98>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_TIM9_Init+0x98>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800219e:	4816      	ldr	r0, [pc, #88]	; (80021f8 <MX_TIM9_Init+0x98>)
 80021a0:	f001 fcaa 	bl	8003af8 <HAL_TIM_PWM_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80021aa:	f000 fa7d 	bl	80026a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ae:	2360      	movs	r3, #96	; 0x60
 80021b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM9_Init+0x98>)
 80021c6:	f001 ffd3 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80021d0:	f000 fa6a 	bl	80026a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2204      	movs	r2, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_TIM9_Init+0x98>)
 80021dc:	f001 ffc8 	bl	8004170 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80021e6:	f000 fa5f 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80021ea:	4803      	ldr	r0, [pc, #12]	; (80021f8 <MX_TIM9_Init+0x98>)
 80021ec:	f000 fbee 	bl	80029cc <HAL_TIM_MspPostInit>

}
 80021f0:	bf00      	nop
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000430 	.word	0x20000430
 80021fc:	40014000 	.word	0x40014000

08002200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <MX_GPIO_Init+0xc0>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a28      	ldr	r2, [pc, #160]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <MX_GPIO_Init+0xc0>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <MX_GPIO_Init+0xc0>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_GPIO_Init+0xc0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 8002286:	2330      	movs	r3, #48	; 0x30
 8002288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228e:	2301      	movs	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	480a      	ldr	r0, [pc, #40]	; (80022c4 <MX_GPIO_Init+0xc4>)
 800229a:	f000 fe15 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 800229e:	23c0      	movs	r3, #192	; 0xc0
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_GPIO_Init+0xc8>)
 80022b2:	f000 fe09 	bl	8002ec8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020800 	.word	0x40020800

080022cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f002 fc0e 	bl	8004af6 <osDelay>
 80022da:	e7fb      	b.n	80022d4 <StartDefaultTask+0x8>

080022dc <StartTaskSetHome>:
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
int sensor1, sensor2, sensor3, sensor4;
void StartTaskSetHome(void const * argument)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  startProgram = 0;
 80022e4:	4b96      	ldr	r3, [pc, #600]	; (8002540 <StartTaskSetHome+0x264>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	4895      	ldr	r0, [pc, #596]	; (8002544 <StartTaskSetHome+0x268>)
 80022ee:	f000 ff87 	bl	8003200 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b94      	ldr	r3, [pc, #592]	; (8002548 <StartTaskSetHome+0x26c>)
 80022f8:	601a      	str	r2, [r3, #0]
	sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 80022fa:	2180      	movs	r1, #128	; 0x80
 80022fc:	4891      	ldr	r0, [pc, #580]	; (8002544 <StartTaskSetHome+0x268>)
 80022fe:	f000 ff7f 	bl	8003200 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	4b91      	ldr	r3, [pc, #580]	; (800254c <StartTaskSetHome+0x270>)
 8002308:	601a      	str	r2, [r3, #0]
	sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 800230a:	2110      	movs	r1, #16
 800230c:	4890      	ldr	r0, [pc, #576]	; (8002550 <StartTaskSetHome+0x274>)
 800230e:	f000 ff77 	bl	8003200 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	4b8f      	ldr	r3, [pc, #572]	; (8002554 <StartTaskSetHome+0x278>)
 8002318:	601a      	str	r2, [r3, #0]
	sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 800231a:	2120      	movs	r1, #32
 800231c:	488c      	ldr	r0, [pc, #560]	; (8002550 <StartTaskSetHome+0x274>)
 800231e:	f000 ff6f 	bl	8003200 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	4b8c      	ldr	r3, [pc, #560]	; (8002558 <StartTaskSetHome+0x27c>)
 8002328:	601a      	str	r2, [r3, #0]

	if(startProgram == 0){
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <StartTaskSetHome+0x264>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8178 	bne.w	8002624 <StartTaskSetHome+0x348>
		if(sethomeJ1 == 0){
 8002334:	4b89      	ldr	r3, [pc, #548]	; (800255c <StartTaskSetHome+0x280>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d15a      	bne.n	80023f2 <StartTaskSetHome+0x116>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 800233c:	2140      	movs	r1, #64	; 0x40
 800233e:	4881      	ldr	r0, [pc, #516]	; (8002544 <StartTaskSetHome+0x268>)
 8002340:	f000 ff5e 	bl	8003200 <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d117      	bne.n	800237a <StartTaskSetHome+0x9e>
				osDelay(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f002 fbd3 	bl	8004af6 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	487c      	ldr	r0, [pc, #496]	; (8002544 <StartTaskSetHome+0x268>)
 8002354:	f000 ff54 	bl	8003200 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d149      	bne.n	80023f2 <StartTaskSetHome+0x116>
					ResetCount(&ENC_LINK1, 1);
 800235e:	2101      	movs	r1, #1
 8002360:	487f      	ldr	r0, [pc, #508]	; (8002560 <StartTaskSetHome+0x284>)
 8002362:	f7fe fe69 	bl	8001038 <ResetCount>
					SpeedSetHomeJ1 = 0;
 8002366:	4b7f      	ldr	r3, [pc, #508]	; (8002564 <StartTaskSetHome+0x288>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
					sethomeJ1 = 1;
 800236c:	4b7b      	ldr	r3, [pc, #492]	; (800255c <StartTaskSetHome+0x280>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
					AngleLink1 = 0;
 8002372:	4b7d      	ldr	r3, [pc, #500]	; (8002568 <StartTaskSetHome+0x28c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e03b      	b.n	80023f2 <StartTaskSetHome+0x116>
				}
			}
			else {
				SpeedSetHomeJ1 = 400;
 800237a:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <StartTaskSetHome+0x288>)
 800237c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002380:	601a      	str	r2, [r3, #0]
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ1 > 0){
 8002382:	2102      	movs	r1, #2
 8002384:	4876      	ldr	r0, [pc, #472]	; (8002560 <StartTaskSetHome+0x284>)
 8002386:	f7fe fdf1 	bl	8000f6c <CountRead>
 800238a:	ec51 0b10 	vmov	r0, r1, d0
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <StartTaskSetHome+0x290>)
 8002394:	f7fe fb68 	bl	8000a68 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <StartTaskSetHome+0xd6>
 800239e:	4b71      	ldr	r3, [pc, #452]	; (8002564 <StartTaskSetHome+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	dd05      	ble.n	80023b2 <StartTaskSetHome+0xd6>
					SpeedSetHomeJ1 *= -1;
 80023a6:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <StartTaskSetHome+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	425b      	negs	r3, r3
 80023ac:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <StartTaskSetHome+0x288>)
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e016      	b.n	80023e0 <StartTaskSetHome+0x104>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ1 < 0) {
 80023b2:	2102      	movs	r1, #2
 80023b4:	486a      	ldr	r0, [pc, #424]	; (8002560 <StartTaskSetHome+0x284>)
 80023b6:	f7fe fdd9 	bl	8000f6c <CountRead>
 80023ba:	ec51 0b10 	vmov	r0, r1, d0
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	4b6b      	ldr	r3, [pc, #428]	; (8002570 <StartTaskSetHome+0x294>)
 80023c4:	f7fe fb32 	bl	8000a2c <__aeabi_dcmplt>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <StartTaskSetHome+0x104>
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <StartTaskSetHome+0x288>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da04      	bge.n	80023e0 <StartTaskSetHome+0x104>
					SpeedSetHomeJ1 *= -1;
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <StartTaskSetHome+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	425b      	negs	r3, r3
 80023dc:	4a61      	ldr	r2, [pc, #388]	; (8002564 <StartTaskSetHome+0x288>)
 80023de:	6013      	str	r3, [r2, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80023e0:	4b60      	ldr	r3, [pc, #384]	; (8002564 <StartTaskSetHome+0x288>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	230c      	movs	r3, #12
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2308      	movs	r3, #8
 80023ea:	4962      	ldr	r1, [pc, #392]	; (8002574 <StartTaskSetHome+0x298>)
 80023ec:	4862      	ldr	r0, [pc, #392]	; (8002578 <StartTaskSetHome+0x29c>)
 80023ee:	f7fe fe3a 	bl	8001066 <Drive>
			}
		}
		if(sethomeJ2 == 0){
 80023f2:	4b62      	ldr	r3, [pc, #392]	; (800257c <StartTaskSetHome+0x2a0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13d      	bne.n	8002476 <StartTaskSetHome+0x19a>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	4851      	ldr	r0, [pc, #324]	; (8002544 <StartTaskSetHome+0x268>)
 80023fe:	f000 feff 	bl	8003200 <HAL_GPIO_ReadPin>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d117      	bne.n	8002438 <StartTaskSetHome+0x15c>
				osDelay(1);
 8002408:	2001      	movs	r0, #1
 800240a:	f002 fb74 	bl	8004af6 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	484c      	ldr	r0, [pc, #304]	; (8002544 <StartTaskSetHome+0x268>)
 8002412:	f000 fef5 	bl	8003200 <HAL_GPIO_ReadPin>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d12c      	bne.n	8002476 <StartTaskSetHome+0x19a>
					ResetCount(&ENC_LINK2, 1);
 800241c:	2101      	movs	r1, #1
 800241e:	4858      	ldr	r0, [pc, #352]	; (8002580 <StartTaskSetHome+0x2a4>)
 8002420:	f7fe fe0a 	bl	8001038 <ResetCount>
					SpeedSetHomeJ2 = 0;
 8002424:	4b57      	ldr	r3, [pc, #348]	; (8002584 <StartTaskSetHome+0x2a8>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
					sethomeJ2 = 1;
 800242a:	4b54      	ldr	r3, [pc, #336]	; (800257c <StartTaskSetHome+0x2a0>)
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
					AngleLink2 = 187;
 8002430:	4b55      	ldr	r3, [pc, #340]	; (8002588 <StartTaskSetHome+0x2ac>)
 8002432:	22bb      	movs	r2, #187	; 0xbb
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e01e      	b.n	8002476 <StartTaskSetHome+0x19a>
				}
			}
			else {
				SpeedSetHomeJ2 = -400;
 8002438:	4b52      	ldr	r3, [pc, #328]	; (8002584 <StartTaskSetHome+0x2a8>)
 800243a:	4a54      	ldr	r2, [pc, #336]	; (800258c <StartTaskSetHome+0x2b0>)
 800243c:	601a      	str	r2, [r3, #0]
				if(CountRead(&ENC_LINK2, count_ModeDegree) > 10) SpeedSetHomeJ2 *= -1;
 800243e:	2102      	movs	r1, #2
 8002440:	484f      	ldr	r0, [pc, #316]	; (8002580 <StartTaskSetHome+0x2a4>)
 8002442:	f7fe fd93 	bl	8000f6c <CountRead>
 8002446:	ec51 0b10 	vmov	r0, r1, d0
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b50      	ldr	r3, [pc, #320]	; (8002590 <StartTaskSetHome+0x2b4>)
 8002450:	f7fe fb0a 	bl	8000a68 <__aeabi_dcmpgt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <StartTaskSetHome+0x188>
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <StartTaskSetHome+0x2a8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	425b      	negs	r3, r3
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <StartTaskSetHome+0x2a8>)
 8002462:	6013      	str	r3, [r2, #0]
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <StartTaskSetHome+0x2a8>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	230c      	movs	r3, #12
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2308      	movs	r3, #8
 800246e:	4949      	ldr	r1, [pc, #292]	; (8002594 <StartTaskSetHome+0x2b8>)
 8002470:	4849      	ldr	r0, [pc, #292]	; (8002598 <StartTaskSetHome+0x2bc>)
 8002472:	f7fe fdf8 	bl	8001066 <Drive>
			}
		}
		if(sethomeJ3 == 0){
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <StartTaskSetHome+0x2c0>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13c      	bne.n	80024f8 <StartTaskSetHome+0x21c>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 800247e:	2110      	movs	r1, #16
 8002480:	4833      	ldr	r0, [pc, #204]	; (8002550 <StartTaskSetHome+0x274>)
 8002482:	f000 febd 	bl	8003200 <HAL_GPIO_ReadPin>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d115      	bne.n	80024b8 <StartTaskSetHome+0x1dc>
				osDelay(1);
 800248c:	2001      	movs	r0, #1
 800248e:	f002 fb32 	bl	8004af6 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002492:	2110      	movs	r1, #16
 8002494:	482e      	ldr	r0, [pc, #184]	; (8002550 <StartTaskSetHome+0x274>)
 8002496:	f000 feb3 	bl	8003200 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12b      	bne.n	80024f8 <StartTaskSetHome+0x21c>
					ResetCount(&ENC_LINK3, 1);
 80024a0:	2101      	movs	r1, #1
 80024a2:	483f      	ldr	r0, [pc, #252]	; (80025a0 <StartTaskSetHome+0x2c4>)
 80024a4:	f7fe fdc8 	bl	8001038 <ResetCount>
					sethomeJ3 = 1;
 80024a8:	4b3c      	ldr	r3, [pc, #240]	; (800259c <StartTaskSetHome+0x2c0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
					AngleLink3 = -135;
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <StartTaskSetHome+0x2c8>)
 80024b0:	f06f 0286 	mvn.w	r2, #134	; 0x86
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e01f      	b.n	80024f8 <StartTaskSetHome+0x21c>
				}
			}
			else {
				SpeedSetHomeJ3 = 300;
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <StartTaskSetHome+0x2cc>)
 80024ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024be:	601a      	str	r2, [r3, #0]
				if(CountRead(&ENC_LINK3, count_ModeDegree) > 10) SpeedSetHomeJ3 *= -1;
 80024c0:	2102      	movs	r1, #2
 80024c2:	4837      	ldr	r0, [pc, #220]	; (80025a0 <StartTaskSetHome+0x2c4>)
 80024c4:	f7fe fd52 	bl	8000f6c <CountRead>
 80024c8:	ec51 0b10 	vmov	r0, r1, d0
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <StartTaskSetHome+0x2b4>)
 80024d2:	f7fe fac9 	bl	8000a68 <__aeabi_dcmpgt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <StartTaskSetHome+0x20a>
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <StartTaskSetHome+0x2cc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	425b      	negs	r3, r3
 80024e2:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <StartTaskSetHome+0x2cc>)
 80024e4:	6013      	str	r3, [r2, #0]
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <StartTaskSetHome+0x2cc>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	2304      	movs	r3, #4
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2300      	movs	r3, #0
 80024f0:	4928      	ldr	r1, [pc, #160]	; (8002594 <StartTaskSetHome+0x2b8>)
 80024f2:	482e      	ldr	r0, [pc, #184]	; (80025ac <StartTaskSetHome+0x2d0>)
 80024f4:	f7fe fdb7 	bl	8001066 <Drive>
			}
		}
		if(sethomeJ4 == 0){
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <StartTaskSetHome+0x2d4>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d17e      	bne.n	80025fe <StartTaskSetHome+0x322>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002500:	2120      	movs	r1, #32
 8002502:	4813      	ldr	r0, [pc, #76]	; (8002550 <StartTaskSetHome+0x274>)
 8002504:	f000 fe7c 	bl	8003200 <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d158      	bne.n	80025c0 <StartTaskSetHome+0x2e4>
				osDelay(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f002 faf1 	bl	8004af6 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002514:	2120      	movs	r1, #32
 8002516:	480e      	ldr	r0, [pc, #56]	; (8002550 <StartTaskSetHome+0x274>)
 8002518:	f000 fe72 	bl	8003200 <HAL_GPIO_ReadPin>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d16d      	bne.n	80025fe <StartTaskSetHome+0x322>
					ResetCount(&ENC_LINK4, 1);
 8002522:	2101      	movs	r1, #1
 8002524:	4823      	ldr	r0, [pc, #140]	; (80025b4 <StartTaskSetHome+0x2d8>)
 8002526:	f7fe fd87 	bl	8001038 <ResetCount>
					SpeedSetHomeJ4 = 0;
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <StartTaskSetHome+0x2dc>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
					sethomeJ4 = 1;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <StartTaskSetHome+0x2d4>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
					AngleLink4 = 90;
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <StartTaskSetHome+0x2e0>)
 8002538:	225a      	movs	r2, #90	; 0x5a
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e05f      	b.n	80025fe <StartTaskSetHome+0x322>
 800253e:	bf00      	nop
 8002540:	20000484 	.word	0x20000484
 8002544:	40020800 	.word	0x40020800
 8002548:	200008bc 	.word	0x200008bc
 800254c:	200008c0 	.word	0x200008c0
 8002550:	40020000 	.word	0x40020000
 8002554:	200008c4 	.word	0x200008c4
 8002558:	200008c8 	.word	0x200008c8
 800255c:	20000498 	.word	0x20000498
 8002560:	200004a0 	.word	0x200004a0
 8002564:	20000488 	.word	0x20000488
 8002568:	200005a0 	.word	0x200005a0
 800256c:	40568000 	.word	0x40568000
 8002570:	c0568000 	.word	0xc0568000
 8002574:	200003e8 	.word	0x200003e8
 8002578:	200004e8 	.word	0x200004e8
 800257c:	20000499 	.word	0x20000499
 8002580:	200005a8 	.word	0x200005a8
 8002584:	2000048c 	.word	0x2000048c
 8002588:	200006a8 	.word	0x200006a8
 800258c:	fffffe70 	.word	0xfffffe70
 8002590:	40240000 	.word	0x40240000
 8002594:	20000358 	.word	0x20000358
 8002598:	200005f0 	.word	0x200005f0
 800259c:	2000049a 	.word	0x2000049a
 80025a0:	200006b0 	.word	0x200006b0
 80025a4:	200007b0 	.word	0x200007b0
 80025a8:	20000490 	.word	0x20000490
 80025ac:	200006f8 	.word	0x200006f8
 80025b0:	2000049b 	.word	0x2000049b
 80025b4:	200007b8 	.word	0x200007b8
 80025b8:	20000494 	.word	0x20000494
 80025bc:	200008b8 	.word	0x200008b8
				}
			}
			else {
				SpeedSetHomeJ4 = -300;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <StartTaskSetHome+0x350>)
 80025c2:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <StartTaskSetHome+0x354>)
 80025c4:	601a      	str	r2, [r3, #0]
				if(CountRead(&ENC_LINK4, count_ModeDegree) > 10) SpeedSetHomeJ4 *= -1;
 80025c6:	2102      	movs	r1, #2
 80025c8:	481a      	ldr	r0, [pc, #104]	; (8002634 <StartTaskSetHome+0x358>)
 80025ca:	f7fe fccf 	bl	8000f6c <CountRead>
 80025ce:	ec51 0b10 	vmov	r0, r1, d0
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <StartTaskSetHome+0x35c>)
 80025d8:	f7fe fa46 	bl	8000a68 <__aeabi_dcmpgt>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <StartTaskSetHome+0x310>
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <StartTaskSetHome+0x350>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	425b      	negs	r3, r3
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <StartTaskSetHome+0x350>)
 80025ea:	6013      	str	r3, [r2, #0]
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <StartTaskSetHome+0x350>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2304      	movs	r3, #4
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	4911      	ldr	r1, [pc, #68]	; (800263c <StartTaskSetHome+0x360>)
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <StartTaskSetHome+0x364>)
 80025fa:	f7fe fd34 	bl	8001066 <Drive>
			}
		}
		if(sethomeJ1 == 1 && sethomeJ2 == 1 && sethomeJ3 == 1 && sethomeJ4 == 1){
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <StartTaskSetHome+0x368>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d10e      	bne.n	8002624 <StartTaskSetHome+0x348>
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <StartTaskSetHome+0x36c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10a      	bne.n	8002624 <StartTaskSetHome+0x348>
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <StartTaskSetHome+0x370>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d106      	bne.n	8002624 <StartTaskSetHome+0x348>
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <StartTaskSetHome+0x374>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <StartTaskSetHome+0x348>
			startProgram = 1;
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <StartTaskSetHome+0x378>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
		}
	}
    osDelay(10);
 8002624:	200a      	movs	r0, #10
 8002626:	f002 fa66 	bl	8004af6 <osDelay>
	sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 800262a:	e65e      	b.n	80022ea <StartTaskSetHome+0xe>
 800262c:	20000494 	.word	0x20000494
 8002630:	fffffed4 	.word	0xfffffed4
 8002634:	200007b8 	.word	0x200007b8
 8002638:	40240000 	.word	0x40240000
 800263c:	20000430 	.word	0x20000430
 8002640:	20000800 	.word	0x20000800
 8002644:	20000498 	.word	0x20000498
 8002648:	20000499 	.word	0x20000499
 800264c:	2000049a 	.word	0x2000049a
 8002650:	2000049b 	.word	0x2000049b
 8002654:	20000484 	.word	0x20000484

08002658 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ1 == 1)	PID_LINK1_Pos();
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <StartTaskPID+0x40>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <StartTaskPID+0x14>
 8002668:	f7fe ff8e 	bl	8001588 <PID_LINK1_Pos>
	  if(sethomeJ2 == 1)	PID_LINK2_Pos();
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <StartTaskPID+0x44>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <StartTaskPID+0x20>
 8002674:	f7ff f840 	bl	80016f8 <PID_LINK2_Pos>
	  if(sethomeJ3 == 1)	PID_LINK3_Pos();
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <StartTaskPID+0x48>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <StartTaskPID+0x2c>
 8002680:	f7ff f8f2 	bl	8001868 <PID_LINK3_Pos>
	  if(sethomeJ4 == 1)	PID_LINK4_Pos();
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <StartTaskPID+0x4c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <StartTaskPID+0x38>
 800268c:	f7ff f9a4 	bl	80019d8 <PID_LINK4_Pos>
//	  if(startProgram == 1){
//		  PID_LINK2_Pos();
//		  PID_LINK3_Pos();
//		  PID_LINK4_Pos();
//	  }
	  osDelay(10);
 8002690:	200a      	movs	r0, #10
 8002692:	f002 fa30 	bl	8004af6 <osDelay>
	  if(sethomeJ1 == 1)	PID_LINK1_Pos();
 8002696:	e7e3      	b.n	8002660 <StartTaskPID+0x8>
 8002698:	20000498 	.word	0x20000498
 800269c:	20000499 	.word	0x20000499
 80026a0:	2000049a 	.word	0x2000049a
 80026a4:	2000049b 	.word	0x2000049b

080026a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b0:	e7fe      	b.n	80026b0 <Error_Handler+0x8>
	...

080026b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_MspInit+0x54>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_MspInit+0x54>)
 80026c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_MspInit+0x54>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_MspInit+0x54>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_MspInit+0x54>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_MspInit+0x54>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	210f      	movs	r1, #15
 80026f6:	f06f 0001 	mvn.w	r0, #1
 80026fa:	f000 fbae 	bl	8002e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800

0800270c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b090      	sub	sp, #64	; 0x40
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a78      	ldr	r2, [pc, #480]	; (800290c <HAL_TIM_Encoder_MspInit+0x200>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d135      	bne.n	800279a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a76      	ldr	r2, [pc, #472]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b74      	ldr	r3, [pc, #464]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a6f      	ldr	r2, [pc, #444]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8002766:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002778:	2301      	movs	r3, #1
 800277a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002780:	4619      	mov	r1, r3
 8002782:	4864      	ldr	r0, [pc, #400]	; (8002914 <HAL_TIM_Encoder_MspInit+0x208>)
 8002784:	f000 fba0 	bl	8002ec8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2105      	movs	r1, #5
 800278c:	2018      	movs	r0, #24
 800278e:	f000 fb64 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002792:	2018      	movs	r0, #24
 8002794:	f000 fb7d 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002798:	e0b3      	b.n	8002902 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d14b      	bne.n	800283c <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
 80027b4:	4b56      	ldr	r3, [pc, #344]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6313      	str	r3, [r2, #48]	; 0x30
 80027d0:	4b4f      	ldr	r3, [pc, #316]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	6313      	str	r3, [r2, #48]	; 0x30
 80027ec:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 80027f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800280a:	2301      	movs	r3, #1
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002812:	4619      	mov	r1, r3
 8002814:	483f      	ldr	r0, [pc, #252]	; (8002914 <HAL_TIM_Encoder_MspInit+0x208>)
 8002816:	f000 fb57 	bl	8002ec8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 800281a:	2308      	movs	r3, #8
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800282a:	2301      	movs	r3, #1
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	4838      	ldr	r0, [pc, #224]	; (8002918 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002836:	f000 fb47 	bl	8002ec8 <HAL_GPIO_Init>
}
 800283a:	e062      	b.n	8002902 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a36      	ldr	r2, [pc, #216]	; (800291c <HAL_TIM_Encoder_MspInit+0x210>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d12c      	bne.n	80028a0 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	4b31      	ldr	r3, [pc, #196]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a30      	ldr	r2, [pc, #192]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 800287e:	23c0      	movs	r3, #192	; 0xc0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800288e:	2302      	movs	r3, #2
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	4619      	mov	r1, r3
 8002898:	481e      	ldr	r0, [pc, #120]	; (8002914 <HAL_TIM_Encoder_MspInit+0x208>)
 800289a:	f000 fb15 	bl	8002ec8 <HAL_GPIO_Init>
}
 800289e:	e030      	b.n	8002902 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_TIM_Encoder_MspInit+0x214>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d12b      	bne.n	8002902 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028b4:	f043 0308 	orr.w	r3, r3, #8
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_TIM_Encoder_MspInit+0x204>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 80028e2:	2303      	movs	r3, #3
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028f2:	2302      	movs	r3, #2
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <HAL_TIM_Encoder_MspInit+0x208>)
 80028fe:	f000 fae3 	bl	8002ec8 <HAL_GPIO_Init>
}
 8002902:	bf00      	nop
 8002904:	3740      	adds	r7, #64	; 0x40
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40023800 	.word	0x40023800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40000400 	.word	0x40000400
 8002920:	40000c00 	.word	0x40000c00

08002924 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <HAL_TIM_PWM_MspInit+0x98>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002940:	f043 0304 	orr.w	r3, r3, #4
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002952:	e02e      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_TIM_PWM_MspInit+0xa0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10e      	bne.n	800297c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
}
 800297a:	e01a      	b.n	80029b2 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM9)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <HAL_TIM_PWM_MspInit+0xa4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d115      	bne.n	80029b2 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_TIM_PWM_MspInit+0x9c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2105      	movs	r1, #5
 80029a6:	2018      	movs	r0, #24
 80029a8:	f000 fa57 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80029ac:	2018      	movs	r0, #24
 80029ae:	f000 fa70 	bl	8002e92 <HAL_NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40010400 	.word	0x40010400
 80029c8:	40014000 	.word	0x40014000

080029cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a37      	ldr	r2, [pc, #220]	; (8002ac8 <HAL_TIM_MspPostInit+0xfc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11f      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a35      	ldr	r2, [pc, #212]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8002a0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	482a      	ldr	r0, [pc, #168]	; (8002ad0 <HAL_TIM_MspPostInit+0x104>)
 8002a28:	f000 fa4e 	bl	8002ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002a2c:	e047      	b.n	8002abe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_TIM_MspPostInit+0x108>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d11f      	bne.n	8002a78 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8002a54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a66:	2303      	movs	r3, #3
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4819      	ldr	r0, [pc, #100]	; (8002ad8 <HAL_TIM_MspPostInit+0x10c>)
 8002a72:	f000 fa29 	bl	8002ec8 <HAL_GPIO_Init>
}
 8002a76:	e022      	b.n	8002abe <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_TIM_MspPostInit+0x110>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11d      	bne.n	8002abe <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_TIM_MspPostInit+0x100>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4809      	ldr	r0, [pc, #36]	; (8002ae0 <HAL_TIM_MspPostInit+0x114>)
 8002aba:	f000 fa05 	bl	8002ec8 <HAL_GPIO_Init>
}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40000800 	.word	0x40000800
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <NMI_Handler+0x4>

08002aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <HardFault_Handler+0x4>

08002af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <MemManage_Handler+0x4>

08002af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afa:	e7fe      	b.n	8002afa <BusFault_Handler+0x4>

08002afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <UsageFault_Handler+0x4>

08002b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b14:	f000 f8a6 	bl	8002c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b18:	f002 fd70 	bl	80055fc <xTaskGetSchedulerState>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b22:	f002 ffb1 	bl	8005a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002b32:	f001 fa2d 	bl	8003f90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002b36:	4803      	ldr	r0, [pc, #12]	; (8002b44 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002b38:	f001 fa2a 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000280 	.word	0x20000280
 8002b44:	20000430 	.word	0x20000430

08002b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <SystemInit+0x20>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <SystemInit+0x20>)
 8002b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b70:	f7ff ffea 	bl	8002b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b76:	490d      	ldr	r1, [pc, #52]	; (8002bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b7c:	e002      	b.n	8002b84 <LoopCopyDataInit>

08002b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b82:	3304      	adds	r3, #4

08002b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b88:	d3f9      	bcc.n	8002b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b90:	e001      	b.n	8002b96 <LoopFillZerobss>

08002b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b94:	3204      	adds	r2, #4

08002b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b98:	d3fb      	bcc.n	8002b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f003 f9b7 	bl	8005f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9e:	f7fe ff47 	bl	8001a30 <main>
  bx  lr    
 8002ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002bb0:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 8002bb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002bb8:	20004624 	.word	0x20004624

08002bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <HAL_Init+0x40>)
 8002bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_Init+0x40>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0a      	ldr	r2, [pc, #40]	; (8002c00 <HAL_Init+0x40>)
 8002bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_Init+0x40>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f000 f92b 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bee:	200f      	movs	r0, #15
 8002bf0:	f000 f808 	bl	8002c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf4:	f7ff fd5e 	bl	80026b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_InitTick+0x54>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0x58>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f943 	bl	8002eae <HAL_SYSTICK_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00e      	b.n	8002c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0f      	cmp	r3, #15
 8002c36:	d80a      	bhi.n	8002c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	f000 f90b 	bl	8002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c44:	4a06      	ldr	r2, [pc, #24]	; (8002c60 <HAL_InitTick+0x5c>)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008
 8002c88:	200008cc 	.word	0x200008cc

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200008cc 	.word	0x200008cc

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <__NVIC_EnableIRQ+0x38>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	; (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f7ff ff8e 	bl	8002d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff29 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6c:	f7ff ff3e 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff ff8e 	bl	8002d98 <NVIC_EncodePriority>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5d 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff31 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffa2 	bl	8002e00 <SysTick_Config>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e16b      	b.n	80031bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f040 815a 	bne.w	80031b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d017      	beq.n	8002fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80b4 	beq.w	80031b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a5f      	ldr	r2, [pc, #380]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_GPIO_Init+0x310>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_GPIO_Init+0x314>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02b      	beq.n	80030ee <HAL_GPIO_Init+0x226>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a51      	ldr	r2, [pc, #324]	; (80031e0 <HAL_GPIO_Init+0x318>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d025      	beq.n	80030ea <HAL_GPIO_Init+0x222>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_GPIO_Init+0x31c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01f      	beq.n	80030e6 <HAL_GPIO_Init+0x21e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4f      	ldr	r2, [pc, #316]	; (80031e8 <HAL_GPIO_Init+0x320>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d019      	beq.n	80030e2 <HAL_GPIO_Init+0x21a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4e      	ldr	r2, [pc, #312]	; (80031ec <HAL_GPIO_Init+0x324>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d013      	beq.n	80030de <HAL_GPIO_Init+0x216>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <HAL_GPIO_Init+0x328>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00d      	beq.n	80030da <HAL_GPIO_Init+0x212>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4c      	ldr	r2, [pc, #304]	; (80031f4 <HAL_GPIO_Init+0x32c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <HAL_GPIO_Init+0x20e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4b      	ldr	r2, [pc, #300]	; (80031f8 <HAL_GPIO_Init+0x330>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_GPIO_Init+0x20a>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00e      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e00c      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030d6:	2306      	movs	r3, #6
 80030d8:	e00a      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030da:	2305      	movs	r3, #5
 80030dc:	e008      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030de:	2304      	movs	r3, #4
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e2:	2303      	movs	r3, #3
 80030e4:	e004      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e002      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x228>
 80030ee:	2300      	movs	r3, #0
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f002 0203 	and.w	r2, r2, #3
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	4093      	lsls	r3, r2
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003100:	4935      	ldr	r1, [pc, #212]	; (80031d8 <HAL_GPIO_Init+0x310>)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003132:	4a32      	ldr	r2, [pc, #200]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003138:	4b30      	ldr	r3, [pc, #192]	; (80031fc <HAL_GPIO_Init+0x334>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_GPIO_Init+0x334>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_GPIO_Init+0x334>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_GPIO_Init+0x334>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031b0:	4a12      	ldr	r2, [pc, #72]	; (80031fc <HAL_GPIO_Init+0x334>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f67f ae90 	bls.w	8002ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40013800 	.word	0x40013800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40020400 	.word	0x40020400
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40021400 	.word	0x40021400
 80031f4:	40021800 	.word	0x40021800
 80031f8:	40021c00 	.word	0x40021c00
 80031fc:	40013c00 	.word	0x40013c00

08003200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e001      	b.n	8003222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e267      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d075      	beq.n	800333a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d00c      	beq.n	8003274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003262:	2b08      	cmp	r3, #8
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003266:	4b82      	ldr	r3, [pc, #520]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003272:	d10b      	bne.n	800328c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05b      	beq.n	8003338 <HAL_RCC_OscConfig+0x108>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d157      	bne.n	8003338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e242      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_OscConfig+0x74>
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	e01d      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x98>
 80032ae:	4b70      	ldr	r3, [pc, #448]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6f      	ldr	r2, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6c      	ldr	r2, [pc, #432]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e00b      	b.n	80032e0 <HAL_RCC_OscConfig+0xb0>
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a68      	ldr	r2, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a65      	ldr	r2, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80032da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff fcd0 	bl	8002c8c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff fccc 	bl	8002c8c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e207      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0xc0>
 800330e:	e014      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff fcbc 	bl	8002c8c <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff fcb8 	bl	8002c8c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1f3      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0xe8>
 8003336:	e000      	b.n	800333a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d063      	beq.n	800340e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003346:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800335a:	2b08      	cmp	r3, #8
 800335c:	d11c      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335e:	4b44      	ldr	r3, [pc, #272]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	4b41      	ldr	r3, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d001      	beq.n	8003382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e1c7      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	e03a      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	4b34      	ldr	r3, [pc, #208]	; (8003474 <HAL_RCC_OscConfig+0x244>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7ff fc71 	bl	8002c8c <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ae:	f7ff fc6d 	bl	8002c8c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1a8      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4925      	ldr	r1, [pc, #148]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e2:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCC_OscConfig+0x244>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7ff fc50 	bl	8002c8c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f0:	f7ff fc4c 	bl	8002c8c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e187      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d036      	beq.n	8003488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_RCC_OscConfig+0x248>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7ff fc30 	bl	8002c8c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003430:	f7ff fc2c 	bl	8002c8c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e167      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_OscConfig+0x240>)
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x200>
 800344e:	e01b      	b.n	8003488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x248>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7ff fc19 	bl	8002c8c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	e00e      	b.n	800347c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345e:	f7ff fc15 	bl	8002c8c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d907      	bls.n	800347c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e150      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 8003470:	40023800 	.word	0x40023800
 8003474:	42470000 	.word	0x42470000
 8003478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b88      	ldr	r3, [pc, #544]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800347e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ea      	bne.n	800345e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8097 	beq.w	80035c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	4b7d      	ldr	r3, [pc, #500]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a7c      	ldr	r2, [pc, #496]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6413      	str	r3, [r2, #64]	; 0x40
 80034b6:	4b7a      	ldr	r3, [pc, #488]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c2:	2301      	movs	r3, #1
 80034c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b77      	ldr	r3, [pc, #476]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b74      	ldr	r3, [pc, #464]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a73      	ldr	r2, [pc, #460]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7ff fbd5 	bl	8002c8c <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7ff fbd1 	bl	8002c8c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e10c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_OscConfig+0x474>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x2ea>
 800350c:	4b64      	ldr	r3, [pc, #400]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003510:	4a63      	ldr	r2, [pc, #396]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6713      	str	r3, [r2, #112]	; 0x70
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b05      	cmp	r3, #5
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x30c>
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0x324>
 800353c:	4b58      	ldr	r3, [pc, #352]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	4a57      	ldr	r2, [pc, #348]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
 8003548:	4b55      	ldr	r3, [pc, #340]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a54      	ldr	r2, [pc, #336]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 0304 	bic.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d015      	beq.n	8003588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7ff fb96 	bl	8002c8c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7ff fb92 	bl	8002c8c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e0cb      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0ee      	beq.n	8003564 <HAL_RCC_OscConfig+0x334>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003588:	f7ff fb80 	bl	8002c8c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7ff fb7c 	bl	8002c8c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0b5      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a6:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ee      	bne.n	8003590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a38      	ldr	r2, [pc, #224]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a1 	beq.w	8003710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d05c      	beq.n	8003694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d141      	bne.n	8003666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e8:	f7ff fb50 	bl	8002c8c <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f0:	f7ff fb4c 	bl	8002c8c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e087      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	019b      	lsls	r3, r3, #6
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	085b      	lsrs	r3, r3, #1
 8003626:	3b01      	subs	r3, #1
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	491b      	ldr	r1, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7ff fb25 	bl	8002c8c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7ff fb21 	bl	8002c8c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e05c      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x416>
 8003664:	e054      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <HAL_RCC_OscConfig+0x478>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7ff fb0e 	bl	8002c8c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7ff fb0a 	bl	8002c8c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e045      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_OscConfig+0x470>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x444>
 8003692:	e03d      	b.n	8003710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e038      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40007000 	.word	0x40007000
 80036a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <HAL_RCC_OscConfig+0x4ec>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d028      	beq.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d121      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d11a      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d111      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	3b01      	subs	r3, #1
 80036f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7ff fa3c 	bl	8002c8c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7ff fa38 	bl	8002c8c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f99c 	bl	8002c04 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	08005fec 	.word	0x08005fec
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b094      	sub	sp, #80	; 0x50
 80038f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4b79      	ldr	r3, [pc, #484]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003910:	2b08      	cmp	r3, #8
 8003912:	f200 80e1 	bhi.w	8003ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e0db      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003924:	e0db      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800392a:	e0d8      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003934:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d063      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	2200      	movs	r2, #0
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
 800394c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
 8003956:	2300      	movs	r3, #0
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
 800395a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	0159      	lsls	r1, r3, #5
 800396c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003970:	0150      	lsls	r0, r2, #5
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4621      	mov	r1, r4
 8003978:	1a51      	subs	r1, r2, r1
 800397a:	6139      	str	r1, [r7, #16]
 800397c:	4629      	mov	r1, r5
 800397e:	eb63 0301 	sbc.w	r3, r3, r1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003990:	4659      	mov	r1, fp
 8003992:	018b      	lsls	r3, r1, #6
 8003994:	4651      	mov	r1, sl
 8003996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800399a:	4651      	mov	r1, sl
 800399c:	018a      	lsls	r2, r1, #6
 800399e:	4651      	mov	r1, sl
 80039a0:	ebb2 0801 	subs.w	r8, r2, r1
 80039a4:	4659      	mov	r1, fp
 80039a6:	eb63 0901 	sbc.w	r9, r3, r1
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039be:	4690      	mov	r8, r2
 80039c0:	4699      	mov	r9, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	eb18 0303 	adds.w	r3, r8, r3
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	462b      	mov	r3, r5
 80039cc:	eb49 0303 	adc.w	r3, r9, r3
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039de:	4629      	mov	r1, r5
 80039e0:	024b      	lsls	r3, r1, #9
 80039e2:	4621      	mov	r1, r4
 80039e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e8:	4621      	mov	r1, r4
 80039ea:	024a      	lsls	r2, r1, #9
 80039ec:	4610      	mov	r0, r2
 80039ee:	4619      	mov	r1, r3
 80039f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f2:	2200      	movs	r2, #0
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039fc:	f7fd f88e 	bl	8000b1c <__aeabi_uldivmod>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4613      	mov	r3, r2
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	e058      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0a:	4b38      	ldr	r3, [pc, #224]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2200      	movs	r2, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	4611      	mov	r1, r2
 8003a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a1a:	623b      	str	r3, [r7, #32]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a24:	4642      	mov	r2, r8
 8003a26:	464b      	mov	r3, r9
 8003a28:	f04f 0000 	mov.w	r0, #0
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	0159      	lsls	r1, r3, #5
 8003a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a36:	0150      	lsls	r0, r2, #5
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a60:	eb63 050b 	sbc.w	r5, r3, fp
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	00eb      	lsls	r3, r5, #3
 8003a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a72:	00e2      	lsls	r2, r4, #3
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	4643      	mov	r3, r8
 8003a7a:	18e3      	adds	r3, r4, r3
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	464b      	mov	r3, r9
 8003a80:	eb45 0303 	adc.w	r3, r5, r3
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a92:	4629      	mov	r1, r5
 8003a94:	028b      	lsls	r3, r1, #10
 8003a96:	4621      	mov	r1, r4
 8003a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	028a      	lsls	r2, r1, #10
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	61fa      	str	r2, [r7, #28]
 8003aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ab0:	f7fd f834 	bl	8000b1c <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_GetSysClockFreq+0x200>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3750      	adds	r7, #80	; 0x50
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	007a1200 	.word	0x007a1200

08003af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e041      	b.n	8003b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe ff00 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4619      	mov	r1, r3
 8003b36:	4610      	mov	r0, r2
 8003b38:	f000 fc0e 	bl	8004358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x24>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e022      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d109      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x3e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e015      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x58>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e07c      	b.n	8003d04 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fde0 	bl	8004810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <HAL_TIM_PWM_Start+0x174>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <HAL_TIM_PWM_Start+0xcc>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_TIM_PWM_Start+0x178>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_PWM_Start+0xd0>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_TIM_PWM_Start+0xd2>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_TIM_PWM_Start+0x174>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d022      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d01d      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_TIM_PWM_Start+0x17c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d018      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <HAL_TIM_PWM_Start+0x180>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <HAL_TIM_PWM_Start+0x184>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00e      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_TIM_PWM_Start+0x178>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d009      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <HAL_TIM_PWM_Start+0x188>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIM_PWM_Start+0x136>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_TIM_PWM_Start+0x18c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d111      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b06      	cmp	r3, #6
 8003cde:	d010      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf0:	e007      	b.n	8003d02 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400
 8003d14:	40000400 	.word	0x40000400
 8003d18:	40000800 	.word	0x40000800
 8003d1c:	40000c00 	.word	0x40000c00
 8003d20:	40014000 	.word	0x40014000
 8003d24:	40001800 	.word	0x40001800

08003d28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e097      	b.n	8003e6c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7fe fcdb 	bl	800270c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0307 	bic.w	r3, r3, #7
 8003d70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f000 faeb 	bl	8004358 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003dc8:	f023 030c 	bic.w	r3, r3, #12
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	4313      	orrs	r3, r2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	031b      	lsls	r3, r3, #12
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e84:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e8c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e94:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e9c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d102      	bne.n	8003eb0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eaa:	7b7b      	ldrb	r3, [r7, #13]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e069      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec4:	e031      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d110      	bne.n	8003eee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ecc:	7bbb      	ldrb	r3, [r7, #14]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ed2:	7b3b      	ldrb	r3, [r7, #12]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d001      	beq.n	8003edc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e055      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eec:	e01d      	b.n	8003f2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003efa:	7b7b      	ldrb	r3, [r7, #13]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d102      	bne.n	8003f06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f00:	7b3b      	ldrb	r3, [r7, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e03e      	b.n	8003f88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_TIM_Encoder_Start+0xc4>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d008      	beq.n	8003f48 <HAL_TIM_Encoder_Start+0xd4>
 8003f36:	e00f      	b.n	8003f58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fc65 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003f46:	e016      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2104      	movs	r1, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fc5d 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003f56:	e00e      	b.n	8003f76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fc55 	bl	8004810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc4e 	bl	8004810 <TIM_CCxChannelCmd>
      break;
 8003f74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0202 	mvn.w	r2, #2
 8003fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f99e 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f990 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f9a1 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0204 	mvn.w	r2, #4
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f978 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f96a 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f97b 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d020      	beq.n	800408c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01b      	beq.n	800408c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0208 	mvn.w	r2, #8
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2204      	movs	r2, #4
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f952 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f944 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f955 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d020      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01b      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0210 	mvn.w	r2, #16
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2208      	movs	r2, #8
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f92c 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f91e 	bl	8004308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f92f 	bl	8004330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0201 	mvn.w	r2, #1
 80040f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8fc 	bl	80042f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fc76 	bl	8004a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f900 	bl	8004344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0220 	mvn.w	r2, #32
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fc48 	bl	80049f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004168:	bf00      	nop
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800418a:	2302      	movs	r3, #2
 800418c:	e0ae      	b.n	80042ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	f200 809f 	bhi.w	80042dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080042dd 	.word	0x080042dd
 80041ac:	080042dd 	.word	0x080042dd
 80041b0:	080042dd 	.word	0x080042dd
 80041b4:	08004219 	.word	0x08004219
 80041b8:	080042dd 	.word	0x080042dd
 80041bc:	080042dd 	.word	0x080042dd
 80041c0:	080042dd 	.word	0x080042dd
 80041c4:	0800425b 	.word	0x0800425b
 80041c8:	080042dd 	.word	0x080042dd
 80041cc:	080042dd 	.word	0x080042dd
 80041d0:	080042dd 	.word	0x080042dd
 80041d4:	0800429b 	.word	0x0800429b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f966 	bl	80044b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0208 	orr.w	r2, r2, #8
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	619a      	str	r2, [r3, #24]
      break;
 8004216:	e064      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f9b6 	bl	8004590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]
      break;
 8004258:	e043      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa0b 	bl	800467c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0208 	orr.w	r2, r2, #8
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	61da      	str	r2, [r3, #28]
      break;
 8004298:	e023      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fa5f 	bl	8004764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
      break;
 80042da:	e002      	b.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
      break;
 80042e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d00f      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a43      	ldr	r2, [pc, #268]	; (8004488 <TIM_Base_SetConfig+0x130>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00b      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a42      	ldr	r2, [pc, #264]	; (800448c <TIM_Base_SetConfig+0x134>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d007      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a41      	ldr	r2, [pc, #260]	; (8004490 <TIM_Base_SetConfig+0x138>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d003      	beq.n	8004398 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a40      	ldr	r2, [pc, #256]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d108      	bne.n	80043aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a35      	ldr	r2, [pc, #212]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d02b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d027      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a32      	ldr	r2, [pc, #200]	; (8004488 <TIM_Base_SetConfig+0x130>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d023      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a31      	ldr	r2, [pc, #196]	; (800448c <TIM_Base_SetConfig+0x134>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01f      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a30      	ldr	r2, [pc, #192]	; (8004490 <TIM_Base_SetConfig+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2f      	ldr	r2, [pc, #188]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d017      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <TIM_Base_SetConfig+0x140>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <TIM_Base_SetConfig+0x144>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00f      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <TIM_Base_SetConfig+0x148>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <TIM_Base_SetConfig+0x14c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <TIM_Base_SetConfig+0x150>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a29      	ldr	r2, [pc, #164]	; (80044ac <TIM_Base_SetConfig+0x154>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <TIM_Base_SetConfig+0x12c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_Base_SetConfig+0xf8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a12      	ldr	r2, [pc, #72]	; (8004494 <TIM_Base_SetConfig+0x13c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d103      	bne.n	8004458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	611a      	str	r2, [r3, #16]
  }
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800
 8004490:	40000c00 	.word	0x40000c00
 8004494:	40010400 	.word	0x40010400
 8004498:	40014000 	.word	0x40014000
 800449c:	40014400 	.word	0x40014400
 80044a0:	40014800 	.word	0x40014800
 80044a4:	40001800 	.word	0x40001800
 80044a8:	40001c00 	.word	0x40001c00
 80044ac:	40002000 	.word	0x40002000

080044b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f023 0201 	bic.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0302 	bic.w	r3, r3, #2
 80044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a20      	ldr	r2, [pc, #128]	; (8004588 <TIM_OC1_SetConfig+0xd8>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC1_SetConfig+0x64>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a1f      	ldr	r2, [pc, #124]	; (800458c <TIM_OC1_SetConfig+0xdc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d10c      	bne.n	800452e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0308 	bic.w	r3, r3, #8
 800451a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <TIM_OC1_SetConfig+0xd8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d003      	beq.n	800453e <TIM_OC1_SetConfig+0x8e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <TIM_OC1_SetConfig+0xdc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d111      	bne.n	8004562 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800454c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	40010000 	.word	0x40010000
 800458c:	40010400 	.word	0x40010400

08004590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a22      	ldr	r2, [pc, #136]	; (8004674 <TIM_OC2_SetConfig+0xe4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0x68>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a21      	ldr	r2, [pc, #132]	; (8004678 <TIM_OC2_SetConfig+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10d      	bne.n	8004614 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004612:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <TIM_OC2_SetConfig+0xe4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_OC2_SetConfig+0x94>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a16      	ldr	r2, [pc, #88]	; (8004678 <TIM_OC2_SetConfig+0xe8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d113      	bne.n	800464c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800462a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	40010400 	.word	0x40010400

0800467c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a21      	ldr	r2, [pc, #132]	; (800475c <TIM_OC3_SetConfig+0xe0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC3_SetConfig+0x66>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <TIM_OC3_SetConfig+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10d      	bne.n	80046fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <TIM_OC3_SetConfig+0xe0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_OC3_SetConfig+0x92>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <TIM_OC3_SetConfig+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d113      	bne.n	8004736 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	621a      	str	r2, [r3, #32]
}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40010000 	.word	0x40010000
 8004760:	40010400 	.word	0x40010400

08004764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800479a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <TIM_OC4_SetConfig+0xa4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC4_SetConfig+0x68>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a11      	ldr	r2, [pc, #68]	; (800480c <TIM_OC4_SetConfig+0xa8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	019b      	lsls	r3, r3, #6
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40010400 	.word	0x40010400

08004810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	43db      	mvns	r3, r3
 8004832:	401a      	ands	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004870:	2302      	movs	r3, #2
 8004872:	e05a      	b.n	800492a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d022      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c0:	d01d      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d018      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00e      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d009      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a15      	ldr	r2, [pc, #84]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10c      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4313      	orrs	r3, r2
 800490e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40010400 	.word	0x40010400
 800494c:	40014000 	.word	0x40014000
 8004950:	40001800 	.word	0x40001800

08004954 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800496c:	2302      	movs	r3, #2
 800496e:	e03d      	b.n	80049ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a32:	2b84      	cmp	r3, #132	; 0x84
 8004a34:	d005      	beq.n	8004a42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3303      	adds	r3, #3
 8004a40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a54:	f000 fade 	bl	8005014 <vTaskStartScheduler>
  
  return osOK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a60:	b089      	sub	sp, #36	; 0x24
 8004a62:	af04      	add	r7, sp, #16
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <osThreadCreate+0x54>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01c      	beq.n	8004ab2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685c      	ldr	r4, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691e      	ldr	r6, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ffc8 	bl	8004a20 <makeFreeRtosPriority>
 8004a90:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a9a:	9202      	str	r2, [sp, #8]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	9100      	str	r1, [sp, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 f8ed 	bl	8004c86 <xTaskCreateStatic>
 8004aac:	4603      	mov	r3, r0
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	e01c      	b.n	8004aec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685c      	ldr	r4, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004abe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ffaa 	bl	8004a20 <makeFreeRtosPriority>
 8004acc:	4602      	mov	r2, r0
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	9200      	str	r2, [sp, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	4632      	mov	r2, r6
 8004ada:	4629      	mov	r1, r5
 8004adc:	4620      	mov	r0, r4
 8004ade:	f000 f92f 	bl	8004d40 <xTaskCreate>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004af6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <osDelay+0x16>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	e000      	b.n	8004b0e <osDelay+0x18>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fa4c 	bl	8004fac <vTaskDelay>
  
  return osOK;
 8004b14:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f103 0208 	add.w	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295
 8004b36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f103 0208 	add.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f103 0208 	add.w	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	601a      	str	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d103      	bne.n	8004be0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e00c      	b.n	8004bfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3308      	adds	r3, #8
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e002      	b.n	8004bee <vListInsert+0x2e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d2f6      	bcs.n	8004be8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6892      	ldr	r2, [r2, #8]
 8004c48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6852      	ldr	r2, [r2, #4]
 8004c52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d103      	bne.n	8004c66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08e      	sub	sp, #56	; 0x38
 8004c8a:	af04      	add	r7, sp, #16
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <xTaskCreateStatic+0x46>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	61fb      	str	r3, [r7, #28]
}
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ccc:	2354      	movs	r3, #84	; 0x54
 8004cce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b54      	cmp	r3, #84	; 0x54
 8004cd4:	d00a      	beq.n	8004cec <xTaskCreateStatic+0x66>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61bb      	str	r3, [r7, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01e      	beq.n	8004d32 <xTaskCreateStatic+0xac>
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01b      	beq.n	8004d32 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f850 	bl	8004dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d2c:	f000 f8d4 	bl	8004ed8 <prvAddNewTaskToReadyList>
 8004d30:	e001      	b.n	8004d36 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d36:	697b      	ldr	r3, [r7, #20]
	}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	; 0x30
 8004d44:	af04      	add	r7, sp, #16
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fee7 	bl	8005b28 <pvPortMalloc>
 8004d5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00e      	beq.n	8004d80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d62:	2054      	movs	r0, #84	; 0x54
 8004d64:	f000 fee0 	bl	8005b28 <pvPortMalloc>
 8004d68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
 8004d76:	e005      	b.n	8004d84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f000 ffa1 	bl	8005cc0 <vPortFree>
 8004d7e:	e001      	b.n	8004d84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d017      	beq.n	8004dba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	2300      	movs	r3, #0
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f80e 	bl	8004dca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dae:	69f8      	ldr	r0, [r7, #28]
 8004db0:	f000 f892 	bl	8004ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e002      	b.n	8004dc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
	}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004de2:	3b01      	subs	r3, #1
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	617b      	str	r3, [r7, #20]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01f      	beq.n	8004e58 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	e012      	b.n	8004e44 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4413      	add	r3, r2
 8004e24:	7819      	ldrb	r1, [r3, #0]
 8004e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3334      	adds	r3, #52	; 0x34
 8004e2e:	460a      	mov	r2, r1
 8004e30:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d006      	beq.n	8004e4c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d9e9      	bls.n	8004e1e <prvInitialiseNewTask+0x54>
 8004e4a:	e000      	b.n	8004e4e <prvInitialiseNewTask+0x84>
			{
				break;
 8004e4c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e56:	e003      	b.n	8004e60 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b06      	cmp	r3, #6
 8004e64:	d901      	bls.n	8004e6a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e66:	2306      	movs	r3, #6
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e74:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	2200      	movs	r2, #0
 8004e7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fe6c 	bl	8004b5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	3318      	adds	r3, #24
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fe67 	bl	8004b5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f1c3 0207 	rsb	r2, r3, #7
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	68f9      	ldr	r1, [r7, #12]
 8004eb8:	69b8      	ldr	r0, [r7, #24]
 8004eba:	f000 fc23 	bl	8005704 <pxPortInitialiseStack>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ece:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ee0:	f000 fd40 	bl	8005964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <prvAddNewTaskToReadyList+0xb8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4a29      	ldr	r2, [pc, #164]	; (8004f90 <prvAddNewTaskToReadyList+0xb8>)
 8004eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <prvAddNewTaskToReadyList+0xbc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <prvAddNewTaskToReadyList+0xbc>)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004efc:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <prvAddNewTaskToReadyList+0xb8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d110      	bne.n	8004f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f04:	f000 fabc 	bl	8005480 <prvInitialiseTaskLists>
 8004f08:	e00d      	b.n	8004f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f0a:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <prvAddNewTaskToReadyList+0xc0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <prvAddNewTaskToReadyList+0xbc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d802      	bhi.n	8004f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f20:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <prvAddNewTaskToReadyList+0xbc>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f26:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <prvAddNewTaskToReadyList+0xc4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <prvAddNewTaskToReadyList+0xc4>)
 8004f2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <prvAddNewTaskToReadyList+0xc8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <prvAddNewTaskToReadyList+0xc8>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <prvAddNewTaskToReadyList+0xcc>)
 8004f50:	441a      	add	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7ff fe0d 	bl	8004b78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f5e:	f000 fd31 	bl	80059c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <prvAddNewTaskToReadyList+0xc0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00e      	beq.n	8004f88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <prvAddNewTaskToReadyList+0xbc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d207      	bcs.n	8004f88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <prvAddNewTaskToReadyList+0xd0>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	200009d0 	.word	0x200009d0
 8004f94:	200008d0 	.word	0x200008d0
 8004f98:	200009dc 	.word	0x200009dc
 8004f9c:	200009ec 	.word	0x200009ec
 8004fa0:	200009d8 	.word	0x200009d8
 8004fa4:	200008d4 	.word	0x200008d4
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d017      	beq.n	8004fee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <vTaskDelay+0x60>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <vTaskDelay+0x30>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60bb      	str	r3, [r7, #8]
}
 8004fd8:	bf00      	nop
 8004fda:	e7fe      	b.n	8004fda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fdc:	f000 f87a 	bl	80050d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fb28 	bl	8005638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fe8:	f000 f882 	bl	80050f0 <xTaskResumeAll>
 8004fec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <vTaskDelay+0x64>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200009f8 	.word	0x200009f8
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005022:	463a      	mov	r2, r7
 8005024:	1d39      	adds	r1, r7, #4
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc fa04 	bl	8001438 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	9202      	str	r2, [sp, #8]
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2300      	movs	r3, #0
 8005040:	460a      	mov	r2, r1
 8005042:	491e      	ldr	r1, [pc, #120]	; (80050bc <vTaskStartScheduler+0xa8>)
 8005044:	481e      	ldr	r0, [pc, #120]	; (80050c0 <vTaskStartScheduler+0xac>)
 8005046:	f7ff fe1e 	bl	8004c86 <xTaskCreateStatic>
 800504a:	4603      	mov	r3, r0
 800504c:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <vTaskStartScheduler+0xb0>)
 800504e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005050:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <vTaskStartScheduler+0xb0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	e001      	b.n	8005062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d116      	bne.n	8005096 <vTaskStartScheduler+0x82>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	613b      	str	r3, [r7, #16]
}
 800507a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <vTaskStartScheduler+0xb4>)
 800507e:	f04f 32ff 	mov.w	r2, #4294967295
 8005082:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <vTaskStartScheduler+0xb8>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <vTaskStartScheduler+0xbc>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005090:	f000 fbc6 	bl	8005820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005094:	e00e      	b.n	80050b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d10a      	bne.n	80050b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60fb      	str	r3, [r7, #12]
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <vTaskStartScheduler+0x9e>
}
 80050b4:	bf00      	nop
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	08005fe4 	.word	0x08005fe4
 80050c0:	08005451 	.word	0x08005451
 80050c4:	200009f4 	.word	0x200009f4
 80050c8:	200009f0 	.word	0x200009f0
 80050cc:	200009dc 	.word	0x200009dc
 80050d0:	200009d4 	.word	0x200009d4

080050d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <vTaskSuspendAll+0x18>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	4a03      	ldr	r2, [pc, #12]	; (80050ec <vTaskSuspendAll+0x18>)
 80050e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	200009f8 	.word	0x200009f8

080050f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050fe:	4b41      	ldr	r3, [pc, #260]	; (8005204 <xTaskResumeAll+0x114>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xTaskResumeAll+0x2c>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	603b      	str	r3, [r7, #0]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800511c:	f000 fc22 	bl	8005964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005120:	4b38      	ldr	r3, [pc, #224]	; (8005204 <xTaskResumeAll+0x114>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3b01      	subs	r3, #1
 8005126:	4a37      	ldr	r2, [pc, #220]	; (8005204 <xTaskResumeAll+0x114>)
 8005128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <xTaskResumeAll+0x114>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d161      	bne.n	80051f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <xTaskResumeAll+0x118>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d05d      	beq.n	80051f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513a:	e02e      	b.n	800519a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	4b33      	ldr	r3, [pc, #204]	; (800520c <xTaskResumeAll+0x11c>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3318      	adds	r3, #24
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fd72 	bl	8004c32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fd6d 	bl	8004c32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2201      	movs	r2, #1
 800515e:	409a      	lsls	r2, r3
 8005160:	4b2b      	ldr	r3, [pc, #172]	; (8005210 <xTaskResumeAll+0x120>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4313      	orrs	r3, r2
 8005166:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <xTaskResumeAll+0x120>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <xTaskResumeAll+0x124>)
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7ff fcf9 	bl	8004b78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <xTaskResumeAll+0x128>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <xTaskResumeAll+0x12c>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800519a:	4b1c      	ldr	r3, [pc, #112]	; (800520c <xTaskResumeAll+0x11c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1cc      	bne.n	800513c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051a8:	f000 fa08 	bl	80055bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051ac:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <xTaskResumeAll+0x130>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051b8:	f000 f836 	bl	8005228 <xTaskIncrementTick>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051c2:	4b16      	ldr	r3, [pc, #88]	; (800521c <xTaskResumeAll+0x12c>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f1      	bne.n	80051b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <xTaskResumeAll+0x130>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <xTaskResumeAll+0x12c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <xTaskResumeAll+0x134>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051f6:	f000 fbe5 	bl	80059c4 <vPortExitCritical>

	return xAlreadyYielded;
 80051fa:	68bb      	ldr	r3, [r7, #8]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200009f8 	.word	0x200009f8
 8005208:	200009d0 	.word	0x200009d0
 800520c:	20000990 	.word	0x20000990
 8005210:	200009d8 	.word	0x200009d8
 8005214:	200008d4 	.word	0x200008d4
 8005218:	200008d0 	.word	0x200008d0
 800521c:	200009e4 	.word	0x200009e4
 8005220:	200009e0 	.word	0x200009e0
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005232:	4b4e      	ldr	r3, [pc, #312]	; (800536c <xTaskIncrementTick+0x144>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	f040 808e 	bne.w	8005358 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800523c:	4b4c      	ldr	r3, [pc, #304]	; (8005370 <xTaskIncrementTick+0x148>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005244:	4a4a      	ldr	r2, [pc, #296]	; (8005370 <xTaskIncrementTick+0x148>)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d120      	bne.n	8005292 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005250:	4b48      	ldr	r3, [pc, #288]	; (8005374 <xTaskIncrementTick+0x14c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <xTaskIncrementTick+0x48>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	603b      	str	r3, [r7, #0]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <xTaskIncrementTick+0x46>
 8005270:	4b40      	ldr	r3, [pc, #256]	; (8005374 <xTaskIncrementTick+0x14c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b40      	ldr	r3, [pc, #256]	; (8005378 <xTaskIncrementTick+0x150>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a3e      	ldr	r2, [pc, #248]	; (8005374 <xTaskIncrementTick+0x14c>)
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4a3e      	ldr	r2, [pc, #248]	; (8005378 <xTaskIncrementTick+0x150>)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b3d      	ldr	r3, [pc, #244]	; (800537c <xTaskIncrementTick+0x154>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a3c      	ldr	r2, [pc, #240]	; (800537c <xTaskIncrementTick+0x154>)
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	f000 f995 	bl	80055bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005292:	4b3b      	ldr	r3, [pc, #236]	; (8005380 <xTaskIncrementTick+0x158>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	429a      	cmp	r2, r3
 800529a:	d348      	bcc.n	800532e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800529c:	4b35      	ldr	r3, [pc, #212]	; (8005374 <xTaskIncrementTick+0x14c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a6:	4b36      	ldr	r3, [pc, #216]	; (8005380 <xTaskIncrementTick+0x158>)
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	601a      	str	r2, [r3, #0]
					break;
 80052ae:	e03e      	b.n	800532e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	4b30      	ldr	r3, [pc, #192]	; (8005374 <xTaskIncrementTick+0x14c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d203      	bcs.n	80052d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052c8:	4a2d      	ldr	r2, [pc, #180]	; (8005380 <xTaskIncrementTick+0x158>)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ce:	e02e      	b.n	800532e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fcac 	bl	8004c32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d004      	beq.n	80052ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3318      	adds	r3, #24
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fca3 	bl	8004c32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	2201      	movs	r2, #1
 80052f2:	409a      	lsls	r2, r3
 80052f4:	4b23      	ldr	r3, [pc, #140]	; (8005384 <xTaskIncrementTick+0x15c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	4a22      	ldr	r2, [pc, #136]	; (8005384 <xTaskIncrementTick+0x15c>)
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005302:	4613      	mov	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <xTaskIncrementTick+0x160>)
 800530c:	441a      	add	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	3304      	adds	r3, #4
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7ff fc2f 	bl	8004b78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	4b1b      	ldr	r3, [pc, #108]	; (800538c <xTaskIncrementTick+0x164>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	429a      	cmp	r2, r3
 8005326:	d3b9      	bcc.n	800529c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532c:	e7b6      	b.n	800529c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <xTaskIncrementTick+0x164>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4914      	ldr	r1, [pc, #80]	; (8005388 <xTaskIncrementTick+0x160>)
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d901      	bls.n	800534a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <xTaskIncrementTick+0x168>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e004      	b.n	8005362 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005358:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <xTaskIncrementTick+0x16c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <xTaskIncrementTick+0x16c>)
 8005360:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200009f8 	.word	0x200009f8
 8005370:	200009d4 	.word	0x200009d4
 8005374:	20000988 	.word	0x20000988
 8005378:	2000098c 	.word	0x2000098c
 800537c:	200009e8 	.word	0x200009e8
 8005380:	200009f0 	.word	0x200009f0
 8005384:	200009d8 	.word	0x200009d8
 8005388:	200008d4 	.word	0x200008d4
 800538c:	200008d0 	.word	0x200008d0
 8005390:	200009e4 	.word	0x200009e4
 8005394:	200009e0 	.word	0x200009e0

08005398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800539e:	4b27      	ldr	r3, [pc, #156]	; (800543c <vTaskSwitchContext+0xa4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053a6:	4b26      	ldr	r3, [pc, #152]	; (8005440 <vTaskSwitchContext+0xa8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053ac:	e03f      	b.n	800542e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <vTaskSwitchContext+0xa8>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	4b23      	ldr	r3, [pc, #140]	; (8005444 <vTaskSwitchContext+0xac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	f1c3 031f 	rsb	r3, r3, #31
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	491f      	ldr	r1, [pc, #124]	; (8005448 <vTaskSwitchContext+0xb0>)
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	607b      	str	r3, [r7, #4]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <vTaskSwitchContext+0x5a>
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <vTaskSwitchContext+0xb0>)
 8005400:	4413      	add	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3308      	adds	r3, #8
 8005416:	429a      	cmp	r2, r3
 8005418:	d104      	bne.n	8005424 <vTaskSwitchContext+0x8c>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <vTaskSwitchContext+0xb4>)
 800542c:	6013      	str	r3, [r2, #0]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	200009f8 	.word	0x200009f8
 8005440:	200009e4 	.word	0x200009e4
 8005444:	200009d8 	.word	0x200009d8
 8005448:	200008d4 	.word	0x200008d4
 800544c:	200008d0 	.word	0x200008d0

08005450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005458:	f000 f852 	bl	8005500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <prvIdleTask+0x28>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d9f9      	bls.n	8005458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <prvIdleTask+0x2c>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005474:	e7f0      	b.n	8005458 <prvIdleTask+0x8>
 8005476:	bf00      	nop
 8005478:	200008d4 	.word	0x200008d4
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005486:	2300      	movs	r3, #0
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	e00c      	b.n	80054a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <prvInitialiseTaskLists+0x60>)
 8005498:	4413      	add	r3, r2
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fb3f 	bl	8004b1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3301      	adds	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b06      	cmp	r3, #6
 80054aa:	d9ef      	bls.n	800548c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054ac:	480d      	ldr	r0, [pc, #52]	; (80054e4 <prvInitialiseTaskLists+0x64>)
 80054ae:	f7ff fb36 	bl	8004b1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054b2:	480d      	ldr	r0, [pc, #52]	; (80054e8 <prvInitialiseTaskLists+0x68>)
 80054b4:	f7ff fb33 	bl	8004b1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054b8:	480c      	ldr	r0, [pc, #48]	; (80054ec <prvInitialiseTaskLists+0x6c>)
 80054ba:	f7ff fb30 	bl	8004b1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054be:	480c      	ldr	r0, [pc, #48]	; (80054f0 <prvInitialiseTaskLists+0x70>)
 80054c0:	f7ff fb2d 	bl	8004b1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054c4:	480b      	ldr	r0, [pc, #44]	; (80054f4 <prvInitialiseTaskLists+0x74>)
 80054c6:	f7ff fb2a 	bl	8004b1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054ca:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <prvInitialiseTaskLists+0x78>)
 80054cc:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <prvInitialiseTaskLists+0x64>)
 80054ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvInitialiseTaskLists+0x7c>)
 80054d2:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <prvInitialiseTaskLists+0x68>)
 80054d4:	601a      	str	r2, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200008d4 	.word	0x200008d4
 80054e4:	20000960 	.word	0x20000960
 80054e8:	20000974 	.word	0x20000974
 80054ec:	20000990 	.word	0x20000990
 80054f0:	200009a4 	.word	0x200009a4
 80054f4:	200009bc 	.word	0x200009bc
 80054f8:	20000988 	.word	0x20000988
 80054fc:	2000098c 	.word	0x2000098c

08005500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005506:	e019      	b.n	800553c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005508:	f000 fa2c 	bl	8005964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <prvCheckTasksWaitingTermination+0x50>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fb8a 	bl	8004c32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <prvCheckTasksWaitingTermination+0x54>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3b01      	subs	r3, #1
 8005524:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <prvCheckTasksWaitingTermination+0x54>)
 8005526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <prvCheckTasksWaitingTermination+0x58>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3b01      	subs	r3, #1
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <prvCheckTasksWaitingTermination+0x58>)
 8005530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005532:	f000 fa47 	bl	80059c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f810 	bl	800555c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800553c:	4b06      	ldr	r3, [pc, #24]	; (8005558 <prvCheckTasksWaitingTermination+0x58>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e1      	bne.n	8005508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200009a4 	.word	0x200009a4
 8005554:	200009d0 	.word	0x200009d0
 8005558:	200009b8 	.word	0x200009b8

0800555c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fba4 	bl	8005cc0 <vPortFree>
				vPortFree( pxTCB );
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fba1 	bl	8005cc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800557e:	e018      	b.n	80055b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005586:	2b01      	cmp	r3, #1
 8005588:	d103      	bne.n	8005592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb98 	bl	8005cc0 <vPortFree>
	}
 8005590:	e00f      	b.n	80055b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005598:	2b02      	cmp	r3, #2
 800559a:	d00a      	beq.n	80055b2 <prvDeleteTCB+0x56>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60fb      	str	r3, [r7, #12]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <prvDeleteTCB+0x54>
	}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <prvResetNextTaskUnblockTime+0x38>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <prvResetNextTaskUnblockTime+0x3c>)
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295
 80055d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055d4:	e008      	b.n	80055e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <prvResetNextTaskUnblockTime+0x38>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <prvResetNextTaskUnblockTime+0x3c>)
 80055e6:	6013      	str	r3, [r2, #0]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000988 	.word	0x20000988
 80055f8:	200009f0 	.word	0x200009f0

080055fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <xTaskGetSchedulerState+0x34>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800560a:	2301      	movs	r3, #1
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	e008      	b.n	8005622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <xTaskGetSchedulerState+0x38>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005618:	2302      	movs	r3, #2
 800561a:	607b      	str	r3, [r7, #4]
 800561c:	e001      	b.n	8005622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005622:	687b      	ldr	r3, [r7, #4]
	}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	200009dc 	.word	0x200009dc
 8005634:	200009f8 	.word	0x200009f8

08005638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005642:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005648:	4b28      	ldr	r3, [pc, #160]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff faef 	bl	8004c32 <uxListRemove>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2201      	movs	r2, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43da      	mvns	r2, r3
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4013      	ands	r3, r2
 800566e:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005670:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d10a      	bne.n	8005690 <prvAddCurrentTaskToDelayedList+0x58>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3304      	adds	r3, #4
 8005686:	4619      	mov	r1, r3
 8005688:	481a      	ldr	r0, [pc, #104]	; (80056f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800568a:	f7ff fa75 	bl	8004b78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800568e:	e026      	b.n	80056de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4413      	add	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005698:	4b14      	ldr	r3, [pc, #80]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d209      	bcs.n	80056bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056a8:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f7ff fa83 	bl	8004bc0 <vListInsert>
}
 80056ba:	e010      	b.n	80056de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f7ff fa79 	bl	8004bc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <prvAddCurrentTaskToDelayedList+0xc8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d202      	bcs.n	80056de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80056d8:	4a09      	ldr	r2, [pc, #36]	; (8005700 <prvAddCurrentTaskToDelayedList+0xc8>)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200009d4 	.word	0x200009d4
 80056ec:	200008d0 	.word	0x200008d0
 80056f0:	200009d8 	.word	0x200009d8
 80056f4:	200009bc 	.word	0x200009bc
 80056f8:	2000098c 	.word	0x2000098c
 80056fc:	20000988 	.word	0x20000988
 8005700:	200009f0 	.word	0x200009f0

08005704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b04      	subs	r3, #4
 8005714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800571c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3b04      	subs	r3, #4
 8005722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3b04      	subs	r3, #4
 8005732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005734:	4a0c      	ldr	r2, [pc, #48]	; (8005768 <pxPortInitialiseStack+0x64>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b14      	subs	r3, #20
 800573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3b04      	subs	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f06f 0202 	mvn.w	r2, #2
 8005752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3b20      	subs	r3, #32
 8005758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800575a:	68fb      	ldr	r3, [r7, #12]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3714      	adds	r7, #20
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	0800576d 	.word	0x0800576d

0800576c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005776:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <prvTaskExitError+0x54>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d00a      	beq.n	8005796 <prvTaskExitError+0x2a>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <prvTaskExitError+0x28>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60bb      	str	r3, [r7, #8]
}
 80057a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057aa:	bf00      	nop
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0fc      	beq.n	80057ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	2000000c 	.word	0x2000000c
	...

080057d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <pxCurrentTCBConst2>)
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057da:	f380 8809 	msr	PSP, r0
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f380 8811 	msr	BASEPRI, r0
 80057ea:	4770      	bx	lr
 80057ec:	f3af 8000 	nop.w

080057f0 <pxCurrentTCBConst2>:
 80057f0:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop

080057f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057f8:	4808      	ldr	r0, [pc, #32]	; (800581c <prvPortStartFirstTask+0x24>)
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f380 8808 	msr	MSP, r0
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8814 	msr	CONTROL, r0
 800580a:	b662      	cpsie	i
 800580c:	b661      	cpsie	f
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	df00      	svc	0
 8005818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800581a:	bf00      	nop
 800581c:	e000ed08 	.word	0xe000ed08

08005820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005826:	4b46      	ldr	r3, [pc, #280]	; (8005940 <xPortStartScheduler+0x120>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a46      	ldr	r2, [pc, #280]	; (8005944 <xPortStartScheduler+0x124>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10a      	bne.n	8005846 <xPortStartScheduler+0x26>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	613b      	str	r3, [r7, #16]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005846:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <xPortStartScheduler+0x120>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3f      	ldr	r2, [pc, #252]	; (8005948 <xPortStartScheduler+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10a      	bne.n	8005866 <xPortStartScheduler+0x46>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <xPortStartScheduler+0x12c>)
 8005868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	22ff      	movs	r2, #255	; 0xff
 8005876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <xPortStartScheduler+0x130>)
 800588c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800588e:	4b31      	ldr	r3, [pc, #196]	; (8005954 <xPortStartScheduler+0x134>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005894:	e009      	b.n	80058aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <xPortStartScheduler+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3b01      	subs	r3, #1
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <xPortStartScheduler+0x134>)
 800589e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058a0:	78fb      	ldrb	r3, [r7, #3]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d0ef      	beq.n	8005896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058b6:	4b27      	ldr	r3, [pc, #156]	; (8005954 <xPortStartScheduler+0x134>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1c3 0307 	rsb	r3, r3, #7
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00a      	beq.n	80058d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60bb      	str	r3, [r7, #8]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <xPortStartScheduler+0x134>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <xPortStartScheduler+0x134>)
 80058e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xPortStartScheduler+0x134>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <xPortStartScheduler+0x134>)
 80058ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <xPortStartScheduler+0x138>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <xPortStartScheduler+0x138>)
 80058fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <xPortStartScheduler+0x138>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <xPortStartScheduler+0x138>)
 8005908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800590c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800590e:	f000 f8dd 	bl	8005acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005912:	4b12      	ldr	r3, [pc, #72]	; (800595c <xPortStartScheduler+0x13c>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005918:	f000 f8fc 	bl	8005b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800591c:	4b10      	ldr	r3, [pc, #64]	; (8005960 <xPortStartScheduler+0x140>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0f      	ldr	r2, [pc, #60]	; (8005960 <xPortStartScheduler+0x140>)
 8005922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005928:	f7ff ff66 	bl	80057f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800592c:	f7ff fd34 	bl	8005398 <vTaskSwitchContext>
	prvTaskExitError();
 8005930:	f7ff ff1c 	bl	800576c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00
 8005944:	410fc271 	.word	0x410fc271
 8005948:	410fc270 	.word	0x410fc270
 800594c:	e000e400 	.word	0xe000e400
 8005950:	200009fc 	.word	0x200009fc
 8005954:	20000a00 	.word	0x20000a00
 8005958:	e000ed20 	.word	0xe000ed20
 800595c:	2000000c 	.word	0x2000000c
 8005960:	e000ef34 	.word	0xe000ef34

08005964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
}
 800597c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <vPortEnterCritical+0x58>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <vPortEnterCritical+0x58>)
 8005986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <vPortEnterCritical+0x58>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10f      	bne.n	80059b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortEnterCritical+0x5c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	603b      	str	r3, [r7, #0]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <vPortEnterCritical+0x4a>
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	2000000c 	.word	0x2000000c
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <vPortExitCritical+0x50>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <vPortExitCritical+0x24>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	607b      	str	r3, [r7, #4]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <vPortExitCritical+0x50>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <vPortExitCritical+0x50>)
 80059f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <vPortExitCritical+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <vPortExitCritical+0x42>
 80059fa:	2300      	movs	r3, #0
 80059fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	2000000c 	.word	0x2000000c
	...

08005a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a20:	f3ef 8009 	mrs	r0, PSP
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <pxCurrentTCBConst>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f01e 0f10 	tst.w	lr, #16
 8005a30:	bf08      	it	eq
 8005a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	6010      	str	r0, [r2, #0]
 8005a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a44:	f380 8811 	msr	BASEPRI, r0
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f7ff fca2 	bl	8005398 <vTaskSwitchContext>
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f380 8811 	msr	BASEPRI, r0
 8005a5c:	bc09      	pop	{r0, r3}
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	6808      	ldr	r0, [r1, #0]
 8005a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a66:	f01e 0f10 	tst.w	lr, #16
 8005a6a:	bf08      	it	eq
 8005a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a70:	f380 8809 	msr	PSP, r0
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w

08005a80 <pxCurrentTCBConst>:
 8005a80:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop

08005a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
}
 8005aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005aa2:	f7ff fbc1 	bl	8005228 <xTaskIncrementTick>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <xPortSysTickHandler+0x40>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortSetupTimerInterrupt+0x38>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <vPortSetupTimerInterrupt+0x3c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <vPortSetupTimerInterrupt+0x40>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	099b      	lsrs	r3, r3, #6
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <vPortSetupTimerInterrupt+0x44>)
 8005aea:	3b01      	subs	r3, #1
 8005aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005aee:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <vPortSetupTimerInterrupt+0x34>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010
 8005b04:	e000e018 	.word	0xe000e018
 8005b08:	20000000 	.word	0x20000000
 8005b0c:	10624dd3 	.word	0x10624dd3
 8005b10:	e000e014 	.word	0xe000e014

08005b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b24 <vPortEnableVFP+0x10>
 8005b18:	6801      	ldr	r1, [r0, #0]
 8005b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b1e:	6001      	str	r1, [r0, #0]
 8005b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b22:	bf00      	nop
 8005b24:	e000ed88 	.word	0xe000ed88

08005b28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08a      	sub	sp, #40	; 0x28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b34:	f7ff face 	bl	80050d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b38:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <pvPortMalloc+0x180>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b40:	f000 f920 	bl	8005d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <pvPortMalloc+0x184>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8093 	bne.w	8005c78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01d      	beq.n	8005b94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b58:	2208      	movs	r2, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d014      	beq.n	8005b94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <pvPortMalloc+0x6c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06e      	beq.n	8005c78 <pvPortMalloc+0x150>
 8005b9a:	4b45      	ldr	r3, [pc, #276]	; (8005cb0 <pvPortMalloc+0x188>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d869      	bhi.n	8005c78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ba4:	4b43      	ldr	r3, [pc, #268]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005ba6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ba8:	4b42      	ldr	r3, [pc, #264]	; (8005cb4 <pvPortMalloc+0x18c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bae:	e004      	b.n	8005bba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <pvPortMalloc+0xa4>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f1      	bne.n	8005bb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bcc:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <pvPortMalloc+0x180>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d050      	beq.n	8005c78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	4413      	add	r3, r2
 8005bde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d91f      	bls.n	8005c38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <pvPortMalloc+0xf8>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	613b      	str	r3, [r7, #16]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1ad2      	subs	r2, r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f000 f908 	bl	8005e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d203      	bcs.n	8005c5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c52:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <pvPortMalloc+0x188>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <pvPortMalloc+0x190>)
 8005c58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c6e:	4b13      	ldr	r3, [pc, #76]	; (8005cbc <pvPortMalloc+0x194>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <pvPortMalloc+0x194>)
 8005c76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c78:	f7ff fa3a 	bl	80050f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <pvPortMalloc+0x174>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	60fb      	str	r3, [r7, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <pvPortMalloc+0x172>
	return pvReturn;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3728      	adds	r7, #40	; 0x28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000460c 	.word	0x2000460c
 8005cac:	20004620 	.word	0x20004620
 8005cb0:	20004610 	.word	0x20004610
 8005cb4:	20004604 	.word	0x20004604
 8005cb8:	20004614 	.word	0x20004614
 8005cbc:	20004618 	.word	0x20004618

08005cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04d      	beq.n	8005d6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	425b      	negs	r3, r3
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4413      	add	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <vPortFree+0xb8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <vPortFree+0x44>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60fb      	str	r3, [r7, #12]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <vPortFree+0x62>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60bb      	str	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <vPortFree+0xb8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01e      	beq.n	8005d6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11a      	bne.n	8005d6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <vPortFree+0xb8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d48:	f7ff f9c4 	bl	80050d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <vPortFree+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4413      	add	r3, r2
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <vPortFree+0xbc>)
 8005d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5a:	6938      	ldr	r0, [r7, #16]
 8005d5c:	f000 f874 	bl	8005e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d60:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <vPortFree+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <vPortFree+0xc0>)
 8005d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d6a:	f7ff f9c1 	bl	80050f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004620 	.word	0x20004620
 8005d7c:	20004610 	.word	0x20004610
 8005d80:	2000461c 	.word	0x2000461c

08005d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d90:	4b27      	ldr	r3, [pc, #156]	; (8005e30 <prvHeapInit+0xac>)
 8005d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <prvHeapInit+0xac>)
 8005db4:	4413      	add	r3, r2
 8005db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <prvHeapInit+0xb0>)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <prvHeapInit+0xb0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1a9b      	subs	r3, r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <prvHeapInit+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <prvHeapInit+0xb4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <prvHeapInit+0xb4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e04:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <prvHeapInit+0xb4>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <prvHeapInit+0xb8>)
 8005e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <prvHeapInit+0xbc>)
 8005e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <prvHeapInit+0xc0>)
 8005e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000a04 	.word	0x20000a04
 8005e34:	20004604 	.word	0x20004604
 8005e38:	2000460c 	.word	0x2000460c
 8005e3c:	20004614 	.word	0x20004614
 8005e40:	20004610 	.word	0x20004610
 8005e44:	20004620 	.word	0x20004620

08005e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e50:	4b28      	ldr	r3, [pc, #160]	; (8005ef4 <prvInsertBlockIntoFreeList+0xac>)
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	e002      	b.n	8005e5c <prvInsertBlockIntoFreeList+0x14>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8f7      	bhi.n	8005e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d108      	bne.n	8005e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	441a      	add	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d118      	bne.n	8005ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d00d      	beq.n	8005ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e008      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e003      	b.n	8005ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d002      	beq.n	8005ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20004604 	.word	0x20004604
 8005ef8:	2000460c 	.word	0x2000460c

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <__libc_init_array>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4d0d      	ldr	r5, [pc, #52]	; (8005f44 <__libc_init_array+0x38>)
 8005f10:	4c0d      	ldr	r4, [pc, #52]	; (8005f48 <__libc_init_array+0x3c>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	2600      	movs	r6, #0
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d109      	bne.n	8005f30 <__libc_init_array+0x24>
 8005f1c:	4d0b      	ldr	r5, [pc, #44]	; (8005f4c <__libc_init_array+0x40>)
 8005f1e:	4c0c      	ldr	r4, [pc, #48]	; (8005f50 <__libc_init_array+0x44>)
 8005f20:	f000 f818 	bl	8005f54 <_init>
 8005f24:	1b64      	subs	r4, r4, r5
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	2600      	movs	r6, #0
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	d105      	bne.n	8005f3a <__libc_init_array+0x2e>
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f34:	4798      	blx	r3
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7ee      	b.n	8005f18 <__libc_init_array+0xc>
 8005f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3e:	4798      	blx	r3
 8005f40:	3601      	adds	r6, #1
 8005f42:	e7f2      	b.n	8005f2a <__libc_init_array+0x1e>
 8005f44:	08006004 	.word	0x08006004
 8005f48:	08006004 	.word	0x08006004
 8005f4c:	08006004 	.word	0x08006004
 8005f50:	08006008 	.word	0x08006008

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
