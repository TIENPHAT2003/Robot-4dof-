
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800ab60  0800ab60  0001ab60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae78  0800ae78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae78  0800ae78  0001ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800ae80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000482c  20000070  20000070  00020070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000489c  2000489c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013b4a  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dfc  00000000  00000000  00033c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001250  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e48  00000000  00000000  00037c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ec4  00000000  00000000  00038ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015973  00000000  00000000  0005b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d51a4  00000000  00000000  000712ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055cc  00000000  00000000  001464a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0014ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab48 	.word	0x0800ab48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800ab48 	.word	0x0800ab48

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6178      	str	r0, [r7, #20]
 8000e9c:	6139      	str	r1, [r7, #16]
 8000e9e:	60fa      	str	r2, [r7, #12]
 8000ea0:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ee8:	441a      	add	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fab6 	bl	8000474 <__aeabi_i2d>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f0e:	f7ff fc45 	bl	800079c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff faa7 	bl	8000474 <__aeabi_i2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fc35 	bl	800079c <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SpeedReadNonReset+0x118>)
 8000f40:	f7ff fb02 	bl	8000548 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000f54:	a31e      	add	r3, pc, #120	; (adr r3, 8000fd0 <SpeedReadNonReset+0x108>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000f6c:	a31a      	add	r3, pc, #104	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fae9 	bl	8000548 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f92d 	bl	80001dc <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f90:	a311      	add	r3, pc, #68	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff f91b 	bl	80001dc <__adddf3>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	ced91687 	.word	0xced91687
 8000fd4:	3feb53f7 	.word	0x3feb53f7
 8000fd8:	532617c2 	.word	0x532617c2
 8000fdc:	3fb2a305 	.word	0x3fb2a305
 8000fe0:	404e0000 	.word	0x404e0000

08000fe4 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800100e:	441a      	add	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7e1b      	ldrb	r3, [r3, #24]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <CountRead+0x52>
	{
		return enc->count_X4;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_i2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	e033      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d110      	bne.n	8001060 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da00      	bge.n	8001048 <CountRead+0x64>
 8001046:	3303      	adds	r3, #3
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa0d 	bl	8000474 <__aeabi_i2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e01e      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d116      	bne.n	8001096 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001070:	fb03 f202 	mul.w	r2, r3, r2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fb92 f3f3 	sdiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9f8 	bl	8000474 <__aeabi_i2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001094:	e003      	b.n	800109e <CountRead+0xba>
	}else {
		return 0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
	}
}
 800109e:	ec43 2b17 	vmov	d7, r2, r3
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	}
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfb8      	it	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	da4d      	bge.n	80011ae <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <Drive+0x48>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34
 8001124:	e018      	b.n	8001158 <Drive+0x7a>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <Drive+0x5c>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
 8001138:	e00e      	b.n	8001158 <Drive+0x7a>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <Drive+0x70>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800114c:	e004      	b.n	8001158 <Drive+0x7a>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <Drive+0x90>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	89da      	ldrh	r2, [r3, #14]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 800116c:	e0b7      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <Drive+0xa8>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	89d9      	ldrh	r1, [r3, #14]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	460b      	mov	r3, r1
 8001182:	6393      	str	r3, [r2, #56]	; 0x38
 8001184:	e0ab      	b.n	80012de <Drive+0x200>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d107      	bne.n	800119e <Drive+0xc0>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	89d9      	ldrh	r1, [r3, #14]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800119c:	e09f      	b.n	80012de <Drive+0x200>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	89d9      	ldrh	r1, [r3, #14]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011ac:	e097      	b.n	80012de <Drive+0x200>
	else if(Input>0){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd4d      	ble.n	8001250 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <Drive+0xec>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	89da      	ldrh	r2, [r3, #14]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	e01e      	b.n	8001208 <Drive+0x12a>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d107      	bne.n	80011e2 <Drive+0x104>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	89d9      	ldrh	r1, [r3, #14]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6393      	str	r3, [r2, #56]	; 0x38
 80011e0:	e012      	b.n	8001208 <Drive+0x12a>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d107      	bne.n	80011fa <Drive+0x11c>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	89d9      	ldrh	r1, [r3, #14]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011f8:	e006      	b.n	8001208 <Drive+0x12a>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	89d9      	ldrh	r1, [r3, #14]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <Drive+0x13e>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
}
 800121a:	e060      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d105      	bne.n	8001230 <Drive+0x152>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	6393      	str	r3, [r2, #56]	; 0x38
 800122e:	e056      	b.n	80012de <Drive+0x200>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d105      	bne.n	8001244 <Drive+0x166>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001242:	e04c      	b.n	80012de <Drive+0x200>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800124e:	e046      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <Drive+0x186>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e018      	b.n	8001296 <Drive+0x1b8>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d105      	bne.n	8001278 <Drive+0x19a>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	6393      	str	r3, [r2, #56]	; 0x38
 8001276:	e00e      	b.n	8001296 <Drive+0x1b8>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d105      	bne.n	800128c <Drive+0x1ae>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e004      	b.n	8001296 <Drive+0x1b8>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <Drive+0x1cc>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012a8:	e019      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d105      	bne.n	80012be <Drive+0x1e0>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012bc:	e00f      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d105      	bne.n	80012d2 <Drive+0x1f4>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012d0:	e005      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012dc:	e7ff      	b.n	80012de <Drive+0x200>
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f6:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a02 	vldr	s15, [r3, #8]
 8001328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	edd3 6a07 	vldr	s13, [r3, #28]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	edd3 7a02 	vldr	s15, [r3, #8]
 8001344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	edd3 7a04 	vldr	s15, [r3, #16]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	dd06      	ble.n	8001386 <Pid_Cal+0x9c>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	e002      	b.n	800138c <Pid_Cal+0xa2>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	edd3 7a08 	vldr	s15, [r3, #32]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	ed93 7a08 	vldr	s14, [r3, #32]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d506      	bpl.n	80013bc <Pid_Cal+0xd2>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	e002      	b.n	80013c2 <Pid_Cal+0xd8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	edd3 7a08 	vldr	s15, [r3, #32]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	edd3 7a08 	vldr	s15, [r3, #32]
 8001448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	dd02      	ble.n	8001478 <Pid_Cal+0x18e>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	e001      	b.n	800147c <Pid_Cal+0x192>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800148c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d502      	bpl.n	800149c <Pid_Cal+0x1b2>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	e001      	b.n	80014a0 <Pid_Cal+0x1b6>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <vApplicationGetIdleTaskMemory+0x2c>)
 80014c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <vApplicationGetIdleTaskMemory+0x30>)
 80014c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000008c 	.word	0x2000008c
 80014e0:	200000e0 	.word	0x200000e0

080014e4 <PID_LINK1_Init>:
EncoderRead ENC_LINK1;
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
void PID_LINK1_Init()
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <PID_LINK1_Init+0x88>)
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <PID_LINK1_Init+0x8c>)
 80014ec:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PID_LINK1_Init+0x88>)
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <PID_LINK1_Init+0x90>)
 80014f2:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <PID_LINK1_Init+0x88>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <PID_LINK1_Init+0x88>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <PID_LINK1_Init+0x88>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <PID_LINK1_Init+0x94>)
 8001508:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <PID_LINK1_Init+0x88>)
 800150c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <PID_LINK1_Init+0x88>)
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <PID_LINK1_Init+0x98>)
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <PID_LINK1_Init+0x88>)
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <PID_LINK1_Init+0x9c>)
 800151c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <PID_LINK1_Init+0x88>)
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <PID_LINK1_Init+0xa0>)
 8001522:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001526:	4a19      	ldr	r2, [pc, #100]	; (800158c <PID_LINK1_Init+0xa8>)
 8001528:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <PID_LINK1_Init+0xa4>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <PID_LINK1_Init+0xa4>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <PID_LINK1_Init+0x94>)
 8001546:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <PID_LINK1_Init+0xa4>)
 800154a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <PID_LINK1_Init+0x98>)
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <PID_LINK1_Init+0x9c>)
 800155a:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <PID_LINK1_Init+0xa4>)
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <PID_LINK1_Init+0xa0>)
 8001560:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200005b0 	.word	0x200005b0
 8001570:	42480000 	.word	0x42480000
 8001574:	437a0000 	.word	0x437a0000
 8001578:	3c23d70a 	.word	0x3c23d70a
 800157c:	fffffc18 	.word	0xfffffc18
 8001580:	447a0000 	.word	0x447a0000
 8001584:	c47a0000 	.word	0xc47a0000
 8001588:	20000600 	.word	0x20000600
 800158c:	41200000 	.word	0x41200000

08001590 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001590:	b580      	push	{r7, lr}
 8001592:	ed2d 8b02 	vpush	{d8}
 8001596:	b082      	sub	sp, #8
 8001598:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <PID_LINK1_Speed+0x5c>)
 800159c:	f7ff fc94 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <PID_LINK1_Speed+0x60>)
 80015a2:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <PID_LINK1_Speed+0x5c>)
 80015a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff faa2 	bl	8000af8 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ee00 3a90 	vmov	s1, r3
 80015ba:	eeb0 0a48 	vmov.f32	s0, s16
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <PID_LINK1_Speed+0x64>)
 80015c0:	f7ff fe93 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <PID_LINK1_Speed+0x64>)
 80015c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	230c      	movs	r3, #12
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2308      	movs	r3, #8
 80015d4:	ee17 2a90 	vmov	r2, s15
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <PID_LINK1_Speed+0x68>)
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <PID_LINK1_Speed+0x6c>)
 80015dc:	f7ff fd7f 	bl	80010de <Drive>
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	ecbd 8b02 	vpop	{d8}
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000550 	.word	0x20000550
 80015f0:	20000600 	.word	0x20000600
 80015f4:	200005b0 	.word	0x200005b0
 80015f8:	20000448 	.word	0x20000448
 80015fc:	20000598 	.word	0x20000598

08001600 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001600:	b580      	push	{r7, lr}
 8001602:	ed2d 8b02 	vpush	{d8}
 8001606:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, Angle.AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <PID_LINK1_Pos+0x40>)
 800160a:	ed93 8a00 	vldr	s16, [r3]
 800160e:	2102      	movs	r1, #2
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <PID_LINK1_Pos+0x44>)
 8001612:	f7ff fce7 	bl	8000fe4 <CountRead>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa6b 	bl	8000af8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	ee00 3a90 	vmov	s1, r3
 8001628:	eeb0 0a48 	vmov.f32	s0, s16
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <PID_LINK1_Pos+0x48>)
 800162e:	f7ff fe5c 	bl	80012ea <Pid_Cal>
	PID_LINK1_Speed();
 8001632:	f7ff ffad 	bl	8001590 <PID_LINK1_Speed>
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	ecbd 8b02 	vpop	{d8}
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000540 	.word	0x20000540
 8001644:	20000550 	.word	0x20000550
 8001648:	20000600 	.word	0x20000600

0800164c <PID_LINK2_Init>:
EncoderRead ENC_LINK2;
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
void PID_LINK2_Init()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <PID_LINK2_Init+0x8c>)
 8001654:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <PID_LINK2_Init+0x90>)
 800165a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <PID_LINK2_Init+0x88>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <PID_LINK2_Init+0x88>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <PID_LINK2_Init+0x94>)
 8001670:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <PID_LINK2_Init+0x88>)
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <PID_LINK2_Init+0x98>)
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <PID_LINK2_Init+0x9c>)
 8001684:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <PID_LINK2_Init+0xa0>)
 800168a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <PID_LINK2_Init+0xa4>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <PID_LINK2_Init+0xa8>)
 8001690:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <PID_LINK2_Init+0xa4>)
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <PID_LINK2_Init+0xa4>)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <PID_LINK2_Init+0x94>)
 80016ae:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <PID_LINK2_Init+0x98>)
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016c0:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <PID_LINK2_Init+0x9c>)
 80016c2:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <PID_LINK2_Init+0xa0>)
 80016c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	200006b0 	.word	0x200006b0
 80016d8:	42480000 	.word	0x42480000
 80016dc:	437a0000 	.word	0x437a0000
 80016e0:	3c23d70a 	.word	0x3c23d70a
 80016e4:	fffffc18 	.word	0xfffffc18
 80016e8:	447a0000 	.word	0x447a0000
 80016ec:	c47a0000 	.word	0xc47a0000
 80016f0:	20000700 	.word	0x20000700
 80016f4:	41200000 	.word	0x41200000

080016f8 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	ed2d 8b02 	vpush	{d8}
 80016fe:	b082      	sub	sp, #8
 8001700:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <PID_LINK2_Speed+0x5c>)
 8001704:	f7ff fbe0 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <PID_LINK2_Speed+0x60>)
 800170a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <PID_LINK2_Speed+0x5c>)
 8001710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff f9ee 	bl	8000af8 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	ee00 3a90 	vmov	s1, r3
 8001722:	eeb0 0a48 	vmov.f32	s0, s16
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <PID_LINK2_Speed+0x64>)
 8001728:	f7ff fddf 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <PID_LINK2_Speed+0x64>)
 800172e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	230c      	movs	r3, #12
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2308      	movs	r3, #8
 800173c:	ee17 2a90 	vmov	r2, s15
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <PID_LINK2_Speed+0x68>)
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <PID_LINK2_Speed+0x6c>)
 8001744:	f7ff fccb 	bl	80010de <Drive>
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	ecbd 8b02 	vpop	{d8}
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000650 	.word	0x20000650
 8001758:	20000700 	.word	0x20000700
 800175c:	200006b0 	.word	0x200006b0
 8001760:	200003b8 	.word	0x200003b8
 8001764:	20000698 	.word	0x20000698

08001768 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 8001768:	b580      	push	{r7, lr}
 800176a:	ed2d 8b02 	vpush	{d8}
 800176e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, Angle.AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <PID_LINK2_Pos+0x48>)
 8001772:	edd3 7a01 	vldr	s15, [r3, #4]
 8001776:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017b4 <PID_LINK2_Pos+0x4c>
 800177a:	ee37 8ac7 	vsub.f32	s16, s15, s14
 800177e:	2102      	movs	r1, #2
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <PID_LINK2_Pos+0x50>)
 8001782:	f7ff fc2f 	bl	8000fe4 <CountRead>
 8001786:	ec53 2b10 	vmov	r2, r3, d0
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9b3 	bl	8000af8 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	ee00 3a90 	vmov	s1, r3
 8001798:	eeb0 0a48 	vmov.f32	s0, s16
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <PID_LINK2_Pos+0x54>)
 800179e:	f7ff fda4 	bl	80012ea <Pid_Cal>
	PID_LINK2_Speed();
 80017a2:	f7ff ffa9 	bl	80016f8 <PID_LINK2_Speed>
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	ecbd 8b02 	vpop	{d8}
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000540 	.word	0x20000540
 80017b4:	433b0000 	.word	0x433b0000
 80017b8:	20000650 	.word	0x20000650
 80017bc:	20000700 	.word	0x20000700

080017c0 <PID_LINK3_Init>:
EncoderRead ENC_LINK3;
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
void PID_LINK3_Init()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <PID_LINK3_Init+0x88>)
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <PID_LINK3_Init+0x8c>)
 80017c8:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 250;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <PID_LINK3_Init+0x88>)
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <PID_LINK3_Init+0x90>)
 80017ce:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <PID_LINK3_Init+0x88>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <PID_LINK3_Init+0x88>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <PID_LINK3_Init+0x88>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <PID_LINK3_Init+0x94>)
 80017e4:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <PID_LINK3_Init+0x88>)
 80017e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <PID_LINK3_Init+0x88>)
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <PID_LINK3_Init+0x98>)
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <PID_LINK3_Init+0x88>)
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <PID_LINK3_Init+0x9c>)
 80017f8:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <PID_LINK3_Init+0x88>)
 80017fc:	4a18      	ldr	r2, [pc, #96]	; (8001860 <PID_LINK3_Init+0xa0>)
 80017fe:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001802:	4a19      	ldr	r2, [pc, #100]	; (8001868 <PID_LINK3_Init+0xa8>)
 8001804:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <PID_LINK3_Init+0x94>)
 8001822:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <PID_LINK3_Init+0xa4>)
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <PID_LINK3_Init+0x98>)
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <PID_LINK3_Init+0x9c>)
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <PID_LINK3_Init+0xa4>)
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <PID_LINK3_Init+0xa0>)
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	200007b0 	.word	0x200007b0
 800184c:	42480000 	.word	0x42480000
 8001850:	437a0000 	.word	0x437a0000
 8001854:	3c23d70a 	.word	0x3c23d70a
 8001858:	fffffc18 	.word	0xfffffc18
 800185c:	447a0000 	.word	0x447a0000
 8001860:	c47a0000 	.word	0xc47a0000
 8001864:	20000800 	.word	0x20000800
 8001868:	41200000 	.word	0x41200000

0800186c <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 800186c:	b580      	push	{r7, lr}
 800186e:	ed2d 8b02 	vpush	{d8}
 8001872:	b082      	sub	sp, #8
 8001874:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <PID_LINK3_Speed+0x5c>)
 8001878:	f7ff fb26 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <PID_LINK3_Speed+0x60>)
 800187e:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <PID_LINK3_Speed+0x5c>)
 8001884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f934 	bl	8000af8 <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	ee00 3a90 	vmov	s1, r3
 8001896:	eeb0 0a48 	vmov.f32	s0, s16
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <PID_LINK3_Speed+0x64>)
 800189c:	f7ff fd25 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <PID_LINK3_Speed+0x64>)
 80018a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018aa:	2304      	movs	r3, #4
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	ee17 2a90 	vmov	r2, s15
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <PID_LINK3_Speed+0x68>)
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <PID_LINK3_Speed+0x6c>)
 80018b8:	f7ff fc11 	bl	80010de <Drive>
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	ecbd 8b02 	vpop	{d8}
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000750 	.word	0x20000750
 80018cc:	20000800 	.word	0x20000800
 80018d0:	200007b0 	.word	0x200007b0
 80018d4:	200003b8 	.word	0x200003b8
 80018d8:	20000798 	.word	0x20000798

080018dc <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	ed2d 8b02 	vpush	{d8}
 80018e2:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, Angle.AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <PID_LINK3_Pos+0x48>)
 80018e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80018ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001928 <PID_LINK3_Pos+0x4c>
 80018ee:	ee37 8a87 	vadd.f32	s16, s15, s14
 80018f2:	2102      	movs	r1, #2
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <PID_LINK3_Pos+0x50>)
 80018f6:	f7ff fb75 	bl	8000fe4 <CountRead>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f8f9 	bl	8000af8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	ee00 3a90 	vmov	s1, r3
 800190c:	eeb0 0a48 	vmov.f32	s0, s16
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <PID_LINK3_Pos+0x54>)
 8001912:	f7ff fcea 	bl	80012ea <Pid_Cal>
	PID_LINK3_Speed();
 8001916:	f7ff ffa9 	bl	800186c <PID_LINK3_Speed>
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	ecbd 8b02 	vpop	{d8}
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000540 	.word	0x20000540
 8001928:	43070000 	.word	0x43070000
 800192c:	20000750 	.word	0x20000750
 8001930:	20000800 	.word	0x20000800

08001934 <PID_LINK4_Init>:
EncoderRead ENC_LINK4;
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
void PID_LINK4_Init()
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <PID_LINK4_Init+0x88>)
 800193a:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <PID_LINK4_Init+0x8c>)
 800193c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 300;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <PID_LINK4_Init+0x88>)
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <PID_LINK4_Init+0x90>)
 8001942:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <PID_LINK4_Init+0x88>)
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <PID_LINK4_Init+0x88>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <PID_LINK4_Init+0x88>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <PID_LINK4_Init+0x94>)
 8001958:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <PID_LINK4_Init+0x88>)
 800195c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <PID_LINK4_Init+0x88>)
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <PID_LINK4_Init+0x98>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <PID_LINK4_Init+0x88>)
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <PID_LINK4_Init+0x9c>)
 800196c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <PID_LINK4_Init+0x88>)
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <PID_LINK4_Init+0xa0>)
 8001972:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <PID_LINK4_Init+0xa8>)
 8001978:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <PID_LINK4_Init+0x94>)
 8001996:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800199a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <PID_LINK4_Init+0x98>)
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <PID_LINK4_Init+0x9c>)
 80019aa:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <PID_LINK4_Init+0xa0>)
 80019b0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	200008b0 	.word	0x200008b0
 80019c0:	42480000 	.word	0x42480000
 80019c4:	43960000 	.word	0x43960000
 80019c8:	3c23d70a 	.word	0x3c23d70a
 80019cc:	fffffc18 	.word	0xfffffc18
 80019d0:	447a0000 	.word	0x447a0000
 80019d4:	c47a0000 	.word	0xc47a0000
 80019d8:	20000900 	.word	0x20000900
 80019dc:	41200000 	.word	0x41200000

080019e0 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	ed2d 8b02 	vpush	{d8}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <PID_LINK4_Speed+0x5c>)
 80019ec:	f7ff fa6c 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <PID_LINK4_Speed+0x60>)
 80019f2:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <PID_LINK4_Speed+0x5c>)
 80019f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f87a 	bl	8000af8 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	ee00 3a90 	vmov	s1, r3
 8001a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <PID_LINK4_Speed+0x64>)
 8001a10:	f7ff fc6b 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <PID_LINK4_Speed+0x64>)
 8001a16:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1e:	2304      	movs	r3, #4
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	ee17 2a90 	vmov	r2, s15
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <PID_LINK4_Speed+0x68>)
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <PID_LINK4_Speed+0x6c>)
 8001a2c:	f7ff fb57 	bl	80010de <Drive>
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	ecbd 8b02 	vpop	{d8}
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000850 	.word	0x20000850
 8001a40:	20000900 	.word	0x20000900
 8001a44:	200008b0 	.word	0x200008b0
 8001a48:	20000490 	.word	0x20000490
 8001a4c:	20000898 	.word	0x20000898

08001a50 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	ed2d 8b02 	vpush	{d8}
 8001a56:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, Angle.AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <PID_LINK4_Pos+0x48>)
 8001a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a5e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a9c <PID_LINK4_Pos+0x4c>
 8001a62:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001a66:	2102      	movs	r1, #2
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <PID_LINK4_Pos+0x50>)
 8001a6a:	f7ff fabb 	bl	8000fe4 <CountRead>
 8001a6e:	ec53 2b10 	vmov	r2, r3, d0
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f83f 	bl	8000af8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	ee00 3a90 	vmov	s1, r3
 8001a80:	eeb0 0a48 	vmov.f32	s0, s16
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <PID_LINK4_Pos+0x54>)
 8001a86:	f7ff fc30 	bl	80012ea <Pid_Cal>
	PID_LINK4_Speed();
 8001a8a:	f7ff ffa9 	bl	80019e0 <PID_LINK4_Speed>
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	ecbd 8b02 	vpop	{d8}
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000540 	.word	0x20000540
 8001a9c:	42b40000 	.word	0x42b40000
 8001aa0:	20000850 	.word	0x20000850
 8001aa4:	20000900 	.word	0x20000900

08001aa8 <calculate_FK>:

float px_qd = 0, py_qd = 0, pz_qd = 0, theta_qd = 0, time = 0;

int16_t t1, t2, t3, t4;

void calculate_FK(ForwardKinematics_ *FK ,float theta1Value, float theta2Value, float theta3Value, float theta4Value) {
 8001aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6178      	str	r0, [r7, #20]
 8001ab2:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ab6:	edc7 0a03 	vstr	s1, [r7, #12]
 8001aba:	ed87 1a02 	vstr	s2, [r7, #8]
 8001abe:	edc7 1a01 	vstr	s3, [r7, #4]

	FK->theta1_FK = theta1Value;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	601a      	str	r2, [r3, #0]
	FK->theta1_FK_rad = (FK->theta1_FK * M_PI) / 180.0;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fce3 	bl	8000498 <__aeabi_f2d>
 8001ad2:	a3d3      	add	r3, pc, #844	; (adr r3, 8001e20 <calculate_FK+0x378>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fd36 	bl	8000548 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	4bd3      	ldr	r3, [pc, #844]	; (8001e38 <calculate_FK+0x390>)
 8001aea:	f7fe fe57 	bl	800079c <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe ffff 	bl	8000af8 <__aeabi_d2f>
 8001afa:	4602      	mov	r2, r0
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	619a      	str	r2, [r3, #24]

	FK->theta2_FK = theta2Value;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]
	FK->theta2_FK_rad = (FK->theta2_FK * M_PI) / 180.0;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcc4 	bl	8000498 <__aeabi_f2d>
 8001b10:	a3c3      	add	r3, pc, #780	; (adr r3, 8001e20 <calculate_FK+0x378>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd17 	bl	8000548 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4bc4      	ldr	r3, [pc, #784]	; (8001e38 <calculate_FK+0x390>)
 8001b28:	f7fe fe38 	bl	800079c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ffe0 	bl	8000af8 <__aeabi_d2f>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	61da      	str	r2, [r3, #28]

	FK->theta3_FK = theta3Value;
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	609a      	str	r2, [r3, #8]
	FK->theta3_FK_rad = (FK->theta3_FK * M_PI) / 180.0;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fca5 	bl	8000498 <__aeabi_f2d>
 8001b4e:	a3b4      	add	r3, pc, #720	; (adr r3, 8001e20 <calculate_FK+0x378>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4bb4      	ldr	r3, [pc, #720]	; (8001e38 <calculate_FK+0x390>)
 8001b66:	f7fe fe19 	bl	800079c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffc1 	bl	8000af8 <__aeabi_d2f>
 8001b76:	4602      	mov	r2, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	621a      	str	r2, [r3, #32]

	FK->theta4_FK = theta4Value;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	60da      	str	r2, [r3, #12]
	FK->theta4_FK_rad = (FK->theta4_FK * M_PI) / 180.0;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc86 	bl	8000498 <__aeabi_f2d>
 8001b8c:	a3a4      	add	r3, pc, #656	; (adr r3, 8001e20 <calculate_FK+0x378>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fcd9 	bl	8000548 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4ba5      	ldr	r3, [pc, #660]	; (8001e38 <calculate_FK+0x390>)
 8001ba4:	f7fe fdfa 	bl	800079c <__aeabi_ddiv>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ffa2 	bl	8000af8 <__aeabi_d2f>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

	FK->psi_FK = FK->theta2_FK + FK->theta3_FK + FK->theta4_FK;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	edc3 7a05 	vstr	s15, [r3, #20]
	FK->psi_FK_rad = FK->theta2_FK_rad + FK->theta3_FK_rad + FK->theta4_FK_rad;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	// Tính toán giá trị Px, Py, Pz
	FK->Px_FK = cos(FK->theta1_FK_rad) * (L1 + L2 * cos(FK->theta2_FK_rad) + L3 * cos(FK->theta2_FK_rad + FK->theta3_FK_rad) + L4 * cos(FK->psi_FK_rad));
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc4a 	bl	8000498 <__aeabi_f2d>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b10 	vmov	d0, r2, r3
 8001c0c:	f006 fe58 	bl	80088c0 <cos>
 8001c10:	ec59 8b10 	vmov	r8, r9, d0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc3d 	bl	8000498 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	ec43 2b10 	vmov	d0, r2, r3
 8001c26:	f006 fe4b 	bl	80088c0 <cos>
 8001c2a:	ec51 0b10 	vmov	r0, r1, d0
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <calculate_FK+0x394>)
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	a379      	add	r3, pc, #484	; (adr r3, 8001e28 <calculate_FK+0x380>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fac9 	bl	80001dc <__adddf3>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	ee17 0a90 	vmov	r0, s15
 8001c66:	f7fe fc17 	bl	8000498 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	ec43 2b10 	vmov	d0, r2, r3
 8001c72:	f006 fe25 	bl	80088c0 <cos>
 8001c76:	ec51 0b10 	vmov	r0, r1, d0
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b70      	ldr	r3, [pc, #448]	; (8001e40 <calculate_FK+0x398>)
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe faa6 	bl	80001dc <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	461d      	mov	r5, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fbfb 	bl	8000498 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	ec43 2b10 	vmov	d0, r2, r3
 8001caa:	f006 fe09 	bl	80088c0 <cos>
 8001cae:	ec51 0b10 	vmov	r0, r1, d0
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <calculate_FK+0x39c>)
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fa8a 	bl	80001dc <__adddf3>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4640      	mov	r0, r8
 8001cce:	4649      	mov	r1, r9
 8001cd0:	f7fe fc3a 	bl	8000548 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff0c 	bl	8000af8 <__aeabi_d2f>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30

	FK->Py_FK = sin(FK->theta1_FK_rad) * (L1 + L2 * cos(FK->theta2_FK_rad) + L3 * cos(FK->theta2_FK_rad + FK->theta3_FK_rad) + L4 * cos(FK->psi_FK_rad));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fbd4 	bl	8000498 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	ec43 2b10 	vmov	d0, r2, r3
 8001cf8:	f006 fe36 	bl	8008968 <sin>
 8001cfc:	ec59 8b10 	vmov	r8, r9, d0
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fbc7 	bl	8000498 <__aeabi_f2d>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	ec43 2b10 	vmov	d0, r2, r3
 8001d12:	f006 fdd5 	bl	80088c0 <cos>
 8001d16:	ec51 0b10 	vmov	r0, r1, d0
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <calculate_FK+0x394>)
 8001d20:	f7fe fc12 	bl	8000548 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	a33e      	add	r3, pc, #248	; (adr r3, 8001e28 <calculate_FK+0x380>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fa53 	bl	80001dc <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4614      	mov	r4, r2
 8001d3c:	461d      	mov	r5, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4e:	ee17 0a90 	vmov	r0, s15
 8001d52:	f7fe fba1 	bl	8000498 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	ec43 2b10 	vmov	d0, r2, r3
 8001d5e:	f006 fdaf 	bl	80088c0 <cos>
 8001d62:	ec51 0b10 	vmov	r0, r1, d0
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <calculate_FK+0x398>)
 8001d6c:	f7fe fbec 	bl	8000548 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa30 	bl	80001dc <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fb85 	bl	8000498 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	ec43 2b10 	vmov	d0, r2, r3
 8001d96:	f006 fd93 	bl	80088c0 <cos>
 8001d9a:	ec51 0b10 	vmov	r0, r1, d0
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <calculate_FK+0x39c>)
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4620      	mov	r0, r4
 8001dae:	4629      	mov	r1, r5
 8001db0:	f7fe fa14 	bl	80001dc <__adddf3>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4640      	mov	r0, r8
 8001dba:	4649      	mov	r1, r9
 8001dbc:	f7fe fbc4 	bl	8000548 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe fe96 	bl	8000af8 <__aeabi_d2f>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34

	FK->Pz_FK = d1 + L3 * sin(FK->theta2_FK_rad + FK->theta3_FK_rad) + L2 * sin(FK->theta2_FK_rad) + L4 * sin(FK->psi_FK_rad);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	ed93 7a07 	vldr	s14, [r3, #28]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de2:	ee17 0a90 	vmov	r0, s15
 8001de6:	f7fe fb57 	bl	8000498 <__aeabi_f2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	ec43 2b10 	vmov	d0, r2, r3
 8001df2:	f006 fdb9 	bl	8008968 <sin>
 8001df6:	ec51 0b10 	vmov	r0, r1, d0
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <calculate_FK+0x398>)
 8001e00:	f7fe fba2 	bl	8000548 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	a308      	add	r3, pc, #32	; (adr r3, 8001e30 <calculate_FK+0x388>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe f9e3 	bl	80001dc <__adddf3>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	e015      	b.n	8001e48 <calculate_FK+0x3a0>
 8001e1c:	f3af 8000 	nop.w
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	400921fb 	.word	0x400921fb
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	4056c000 	.word	0x4056c000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	406dc000 	.word	0x406dc000
 8001e38:	40668000 	.word	0x40668000
 8001e3c:	405e8000 	.word	0x405e8000
 8001e40:	40534000 	.word	0x40534000
 8001e44:	40538000 	.word	0x40538000
 8001e48:	4614      	mov	r4, r2
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb21 	bl	8000498 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	ec43 2b10 	vmov	d0, r2, r3
 8001e5e:	f006 fd83 	bl	8008968 <sin>
 8001e62:	ec51 0b10 	vmov	r0, r1, d0
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <calculate_FK+0x428>)
 8001e6c:	f7fe fb6c 	bl	8000548 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe f9b0 	bl	80001dc <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb05 	bl	8000498 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ec43 2b10 	vmov	d0, r2, r3
 8001e96:	f006 fd67 	bl	8008968 <sin>
 8001e9a:	ec51 0b10 	vmov	r0, r1, d0
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <calculate_FK+0x42c>)
 8001ea4:	f7fe fb50 	bl	8000548 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4620      	mov	r0, r4
 8001eae:	4629      	mov	r1, r5
 8001eb0:	f7fe f994 	bl	80001dc <__adddf3>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe1c 	bl	8000af8 <__aeabi_d2f>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ed0:	405e8000 	.word	0x405e8000
 8001ed4:	40538000 	.word	0x40538000

08001ed8 <calculate_IK_BN1>:
	float inputPz;
	float inputTheta;
}InputIK_;
InputIK_ InputIK;

void calculate_IK_BN1(InverseKinematics_ *IK,float Px_value, float Py_value, float Pz_value, float Theta_value){
 8001ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001edc:	ed2d 8b02 	vpush	{d8}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6178      	str	r0, [r7, #20]
 8001ee6:	ed87 0a04 	vstr	s0, [r7, #16]
 8001eea:	edc7 0a03 	vstr	s1, [r7, #12]
 8001eee:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ef2:	edc7 1a01 	vstr	s3, [r7, #4]

    IK->Px_IK = Px_value;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	601a      	str	r2, [r3, #0]
    IK->Py_IK = Py_value;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]
    IK->Pz_IK = Pz_value;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	609a      	str	r2, [r3, #8]
    IK->Theta_IK = Theta_value;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	61da      	str	r2, [r3, #28]

    IK->t_rad = IK->Theta_IK * (M_PI / 180);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fac0 	bl	8000498 <__aeabi_f2d>
 8001f18:	a34e      	add	r3, pc, #312	; (adr r3, 8002054 <calculate_IK_BN1+0x17c>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb13 	bl	8000548 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fde5 	bl	8000af8 <__aeabi_d2f>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
    IK->k = sqrt(pow(IK->Px_IK, 2) + pow(IK->Py_IK, 2));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faad 	bl	8000498 <__aeabi_f2d>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8002048 <calculate_IK_BN1+0x170>
 8001f46:	ec43 2b10 	vmov	d0, r2, r3
 8001f4a:	f006 fc1b 	bl	8008784 <pow>
 8001f4e:	ec55 4b10 	vmov	r4, r5, d0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa9e 	bl	8000498 <__aeabi_f2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8002048 <calculate_IK_BN1+0x170>
 8001f64:	ec43 2b10 	vmov	d0, r2, r3
 8001f68:	f006 fc0c 	bl	8008784 <pow>
 8001f6c:	ec53 2b10 	vmov	r2, r3, d0
 8001f70:	4620      	mov	r0, r4
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7fe f932 	bl	80001dc <__adddf3>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	ec43 2b17 	vmov	d7, r2, r3
 8001f80:	eeb0 0a47 	vmov.f32	s0, s14
 8001f84:	eef0 0a67 	vmov.f32	s1, s15
 8001f88:	f006 fc6c 	bl	8008864 <sqrt>
 8001f8c:	ec53 2b10 	vmov	r2, r3, d0
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fdb0 	bl	8000af8 <__aeabi_d2f>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
    IK->theta1_IK_rad = atan2((IK->Py_IK / IK->k), (IK->Px_IK / IK->k));
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fae:	ee16 0a90 	vmov	r0, s13
 8001fb2:	f7fe fa71 	bl	8000498 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001fc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fca:	ee16 0a90 	vmov	r0, s13
 8001fce:	f7fe fa63 	bl	8000498 <__aeabi_f2d>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	ec43 2b11 	vmov	d1, r2, r3
 8001fda:	ec45 4b10 	vmov	d0, r4, r5
 8001fde:	f006 fbcf 	bl	8008780 <atan2>
 8001fe2:	ec53 2b10 	vmov	r2, r3, d0
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fd85 	bl	8000af8 <__aeabi_d2f>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	621a      	str	r2, [r3, #32]
    IK->Theta1_IK = IK->theta1_IK_rad * (180 / M_PI);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa4d 	bl	8000498 <__aeabi_f2d>
 8001ffe:	a317      	add	r3, pc, #92	; (adr r3, 800205c <calculate_IK_BN1+0x184>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe faa0 	bl	8000548 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd72 	bl	8000af8 <__aeabi_d2f>
 8002014:	4602      	mov	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	60da      	str	r2, [r3, #12]

    if (IK->Theta1_IK < -180) {
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002020:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002050 <calculate_IK_BN1+0x178>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d51e      	bpl.n	800206c <calculate_IK_BN1+0x194>
    	IK->Theta1_IK += 360;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	edd3 7a03 	vldr	s15, [r3, #12]
 8002034:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002068 <calculate_IK_BN1+0x190>
 8002038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	edc3 7a03 	vstr	s15, [r3, #12]
 8002042:	e027      	b.n	8002094 <calculate_IK_BN1+0x1bc>
 8002044:	f3af 8000 	nop.w
 8002048:	00000000 	.word	0x00000000
 800204c:	40000000 	.word	0x40000000
 8002050:	c3340000 	.word	0xc3340000
 8002054:	a2529d39 	.word	0xa2529d39
 8002058:	3f91df46 	.word	0x3f91df46
 800205c:	1a63c1f8 	.word	0x1a63c1f8
 8002060:	404ca5dc 	.word	0x404ca5dc
 8002064:	43340000 	.word	0x43340000
 8002068:	43b40000 	.word	0x43b40000
    } else if (IK->Theta1_IK > 180) {
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002072:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002064 <calculate_IK_BN1+0x18c>
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	dd09      	ble.n	8002094 <calculate_IK_BN1+0x1bc>
    	IK->Theta1_IK -= 360;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	edd3 7a03 	vldr	s15, [r3, #12]
 8002086:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002068 <calculate_IK_BN1+0x190>
 800208a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    IK->E = IK->Px_IK * cos(IK->theta1_IK_rad) + IK->Py_IK * sin(IK->theta1_IK_rad) - L1 - L4 * cos(IK->t_rad);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f9fd 	bl	8000498 <__aeabi_f2d>
 800209e:	4604      	mov	r4, r0
 80020a0:	460d      	mov	r5, r1
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe f9f6 	bl	8000498 <__aeabi_f2d>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f006 fc04 	bl	80088c0 <cos>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4620      	mov	r0, r4
 80020be:	4629      	mov	r1, r5
 80020c0:	f7fe fa42 	bl	8000548 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9e1 	bl	8000498 <__aeabi_f2d>
 80020d6:	4604      	mov	r4, r0
 80020d8:	460d      	mov	r5, r1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9da 	bl	8000498 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	ec43 2b10 	vmov	d0, r2, r3
 80020ec:	f006 fc3c 	bl	8008968 <sin>
 80020f0:	ec53 2b10 	vmov	r2, r3, d0
 80020f4:	4620      	mov	r0, r4
 80020f6:	4629      	mov	r1, r5
 80020f8:	f7fe fa26 	bl	8000548 <__aeabi_dmul>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4640      	mov	r0, r8
 8002102:	4649      	mov	r1, r9
 8002104:	f7fe f86a 	bl	80001dc <__adddf3>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	a3e5      	add	r3, pc, #916	; (adr r3, 80024a8 <calculate_IK_BN1+0x5d0>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe f85f 	bl	80001d8 <__aeabi_dsub>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4614      	mov	r4, r2
 8002120:	461d      	mov	r5, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe f9b6 	bl	8000498 <__aeabi_f2d>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	ec43 2b10 	vmov	d0, r2, r3
 8002134:	f006 fbc4 	bl	80088c0 <cos>
 8002138:	ec51 0b10 	vmov	r0, r1, d0
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	4bd5      	ldr	r3, [pc, #852]	; (8002498 <calculate_IK_BN1+0x5c0>)
 8002142:	f7fe fa01 	bl	8000548 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4620      	mov	r0, r4
 800214c:	4629      	mov	r1, r5
 800214e:	f7fe f843 	bl	80001d8 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fccd 	bl	8000af8 <__aeabi_d2f>
 800215e:	4602      	mov	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
    IK->F = IK->Pz_IK - d1 - L4 * sin(IK->t_rad);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	edd3 7a02 	vldr	s15, [r3, #8]
 800216a:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800249c <calculate_IK_BN1+0x5c4>
 800216e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002172:	ee17 0a90 	vmov	r0, s15
 8002176:	f7fe f98f 	bl	8000498 <__aeabi_f2d>
 800217a:	4604      	mov	r4, r0
 800217c:	460d      	mov	r5, r1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f988 	bl	8000498 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	ec43 2b10 	vmov	d0, r2, r3
 8002190:	f006 fbea 	bl	8008968 <sin>
 8002194:	ec51 0b10 	vmov	r0, r1, d0
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4bbe      	ldr	r3, [pc, #760]	; (8002498 <calculate_IK_BN1+0x5c0>)
 800219e:	f7fe f9d3 	bl	8000548 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe f815 	bl	80001d8 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fc9f 	bl	8000af8 <__aeabi_d2f>
 80021ba:	4602      	mov	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
    IK->a = -2 * L2 * IK->F;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80021c6:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80024a0 <calculate_IK_BN1+0x5c8>
 80021ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    IK->b = -2 * L2 * IK->E;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80021da:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80024a0 <calculate_IK_BN1+0x5c8>
 80021de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    IK->d = pow(L3, 2) - pow(IK->E, 2) - pow(IK->F, 2) - pow(L2, 2);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f953 	bl	8000498 <__aeabi_f2d>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8002478 <calculate_IK_BN1+0x5a0>
 80021fa:	ec43 2b10 	vmov	d0, r2, r3
 80021fe:	f006 fac1 	bl	8008784 <pow>
 8002202:	ec53 2b10 	vmov	r2, r3, d0
 8002206:	a19e      	add	r1, pc, #632	; (adr r1, 8002480 <calculate_IK_BN1+0x5a8>)
 8002208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800220c:	f7fd ffe4 	bl	80001d8 <__aeabi_dsub>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	461d      	mov	r5, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f93b 	bl	8000498 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002478 <calculate_IK_BN1+0x5a0>
 800222a:	ec43 2b10 	vmov	d0, r2, r3
 800222e:	f006 faa9 	bl	8008784 <pow>
 8002232:	ec53 2b10 	vmov	r2, r3, d0
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f7fd ffcd 	bl	80001d8 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	a390      	add	r3, pc, #576	; (adr r3, 8002488 <calculate_IK_BN1+0x5b0>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fd ffc4 	bl	80001d8 <__aeabi_dsub>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fc4e 	bl	8000af8 <__aeabi_d2f>
 800225c:	4602      	mov	r2, r0
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	649a      	str	r2, [r3, #72]	; 0x48
    IK->f = sqrt(pow(IK->a, 2) + pow(IK->b, 2));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f916 	bl	8000498 <__aeabi_f2d>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8002478 <calculate_IK_BN1+0x5a0>
 8002274:	ec43 2b10 	vmov	d0, r2, r3
 8002278:	f006 fa84 	bl	8008784 <pow>
 800227c:	ec55 4b10 	vmov	r4, r5, d0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f907 	bl	8000498 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8002478 <calculate_IK_BN1+0x5a0>
 8002292:	ec43 2b10 	vmov	d0, r2, r3
 8002296:	f006 fa75 	bl	8008784 <pow>
 800229a:	ec53 2b10 	vmov	r2, r3, d0
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fd ff9b 	bl	80001dc <__adddf3>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	ec43 2b17 	vmov	d7, r2, r3
 80022ae:	eeb0 0a47 	vmov.f32	s0, s14
 80022b2:	eef0 0a67 	vmov.f32	s1, s15
 80022b6:	f006 fad5 	bl	8008864 <sqrt>
 80022ba:	ec53 2b10 	vmov	r2, r3, d0
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7fe fc19 	bl	8000af8 <__aeabi_d2f>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	64da      	str	r2, [r3, #76]	; 0x4c
    IK->alpha = atan2(-2 * L2 * IK->F / IK->f, -2 * L2 * IK->E / IK->f);
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022d2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80024a0 <calculate_IK_BN1+0x5c8>
 80022d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80022e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022e4:	ee16 0a90 	vmov	r0, s13
 80022e8:	f7fe f8d6 	bl	8000498 <__aeabi_f2d>
 80022ec:	4604      	mov	r4, r0
 80022ee:	460d      	mov	r5, r1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022f6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80024a0 <calculate_IK_BN1+0x5c8>
 80022fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002304:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002308:	ee16 0a90 	vmov	r0, s13
 800230c:	f7fe f8c4 	bl	8000498 <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ec43 2b11 	vmov	d1, r2, r3
 8002318:	ec45 4b10 	vmov	d0, r4, r5
 800231c:	f006 fa30 	bl	8008780 <atan2>
 8002320:	ec53 2b10 	vmov	r2, r3, d0
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbe6 	bl	8000af8 <__aeabi_d2f>
 800232c:	4602      	mov	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	631a      	str	r2, [r3, #48]	; 0x30

    IK->var_temp = pow(IK->d, 2) / pow(IK->f, 2);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f8ae 	bl	8000498 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8002478 <calculate_IK_BN1+0x5a0>
 8002344:	ec43 2b10 	vmov	d0, r2, r3
 8002348:	f006 fa1c 	bl	8008784 <pow>
 800234c:	ec55 4b10 	vmov	r4, r5, d0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f89f 	bl	8000498 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002478 <calculate_IK_BN1+0x5a0>
 8002362:	ec43 2b10 	vmov	d0, r2, r3
 8002366:	f006 fa0d 	bl	8008784 <pow>
 800236a:	ec53 2b10 	vmov	r2, r3, d0
 800236e:	4620      	mov	r0, r4
 8002370:	4629      	mov	r1, r5
 8002372:	f7fe fa13 	bl	800079c <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fbbb 	bl	8000af8 <__aeabi_d2f>
 8002382:	4602      	mov	r2, r0
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
    if (IK->var_temp > 1) IK->var_temp = 1;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800238e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	dd03      	ble.n	80023a4 <calculate_IK_BN1+0x4cc>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50

    IK->theta2_IK_rad = atan2(sqrt(1 - IK->var_temp), IK->d / IK->f) + IK->alpha;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80023aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	ee17 0a90 	vmov	r0, s15
 80023b6:	f7fe f86f 	bl	8000498 <__aeabi_f2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	ec43 2b10 	vmov	d0, r2, r3
 80023c2:	f006 fa4f 	bl	8008864 <sqrt>
 80023c6:	eeb0 8a40 	vmov.f32	s16, s0
 80023ca:	eef0 8a60 	vmov.f32	s17, s1
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80023da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023de:	ee16 0a90 	vmov	r0, s13
 80023e2:	f7fe f859 	bl	8000498 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ec43 2b11 	vmov	d1, r2, r3
 80023ee:	eeb0 0a48 	vmov.f32	s0, s16
 80023f2:	eef0 0a68 	vmov.f32	s1, s17
 80023f6:	f006 f9c3 	bl	8008780 <atan2>
 80023fa:	ec55 4b10 	vmov	r4, r5, d0
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f848 	bl	8000498 <__aeabi_f2d>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd fee4 	bl	80001dc <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fb6c 	bl	8000af8 <__aeabi_d2f>
 8002420:	4602      	mov	r2, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    IK->Theta2_IK = IK->theta2_IK_rad * (180 / M_PI);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f834 	bl	8000498 <__aeabi_f2d>
 8002430:	a317      	add	r3, pc, #92	; (adr r3, 8002490 <calculate_IK_BN1+0x5b8>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe f887 	bl	8000548 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fb59 	bl	8000af8 <__aeabi_d2f>
 8002446:	4602      	mov	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	611a      	str	r2, [r3, #16]

    if (IK->Theta2_IK < -180) {
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002452:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024a4 <calculate_IK_BN1+0x5cc>
 8002456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d52b      	bpl.n	80024b8 <calculate_IK_BN1+0x5e0>
    	IK->Theta2_IK += 360;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	edd3 7a04 	vldr	s15, [r3, #16]
 8002466:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024b4 <calculate_IK_BN1+0x5dc>
 800246a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	edc3 7a04 	vstr	s15, [r3, #16]
 8002474:	e034      	b.n	80024e0 <calculate_IK_BN1+0x608>
 8002476:	bf00      	nop
 8002478:	00000000 	.word	0x00000000
 800247c:	40000000 	.word	0x40000000
 8002480:	00000000 	.word	0x00000000
 8002484:	40b72900 	.word	0x40b72900
 8002488:	00000000 	.word	0x00000000
 800248c:	40cd1200 	.word	0x40cd1200
 8002490:	1a63c1f8 	.word	0x1a63c1f8
 8002494:	404ca5dc 	.word	0x404ca5dc
 8002498:	40538000 	.word	0x40538000
 800249c:	436e0000 	.word	0x436e0000
 80024a0:	c3740000 	.word	0xc3740000
 80024a4:	c3340000 	.word	0xc3340000
 80024a8:	00000000 	.word	0x00000000
 80024ac:	4056c000 	.word	0x4056c000
 80024b0:	43340000 	.word	0x43340000
 80024b4:	43b40000 	.word	0x43b40000
    } else if (IK->Theta2_IK > 180) {
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80024be:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80024b0 <calculate_IK_BN1+0x5d8>
 80024c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	dd09      	ble.n	80024e0 <calculate_IK_BN1+0x608>
    	IK->Theta2_IK -= 360;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80024d2:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 80024b4 <calculate_IK_BN1+0x5dc>
 80024d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    IK->c23 = (IK->Px_IK * cos(IK->theta1_IK_rad) + IK->Py_IK * sin(IK->theta1_IK_rad) - L1 - L2 * cos(IK->theta2_IK_rad) - L4 * cos(IK->t_rad)) / L3;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffd7 	bl	8000498 <__aeabi_f2d>
 80024ea:	4604      	mov	r4, r0
 80024ec:	460d      	mov	r5, r1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ffd0 	bl	8000498 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	ec43 2b10 	vmov	d0, r2, r3
 8002500:	f006 f9de 	bl	80088c0 <cos>
 8002504:	ec53 2b10 	vmov	r2, r3, d0
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fe f81c 	bl	8000548 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4690      	mov	r8, r2
 8002516:	4699      	mov	r9, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ffbb 	bl	8000498 <__aeabi_f2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ffb4 	bl	8000498 <__aeabi_f2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	ec43 2b10 	vmov	d0, r2, r3
 8002538:	f006 fa16 	bl	8008968 <sin>
 800253c:	ec53 2b10 	vmov	r2, r3, d0
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fe f800 	bl	8000548 <__aeabi_dmul>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4640      	mov	r0, r8
 800254e:	4649      	mov	r1, r9
 8002550:	f7fd fe44 	bl	80001dc <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a3a1      	add	r3, pc, #644	; (adr r3, 80027e4 <calculate_IK_BN1+0x90c>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fd fe39 	bl	80001d8 <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4614      	mov	r4, r2
 800256c:	461d      	mov	r5, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ff90 	bl	8000498 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b10 	vmov	d0, r2, r3
 8002580:	f006 f99e 	bl	80088c0 <cos>
 8002584:	ec51 0b10 	vmov	r0, r1, d0
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <calculate_IK_BN1+0x8f0>)
 800258e:	f7fd ffdb 	bl	8000548 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe1d 	bl	80001d8 <__aeabi_dsub>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	461d      	mov	r5, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ff74 	bl	8000498 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	ec43 2b10 	vmov	d0, r2, r3
 80025b8:	f006 f982 	bl	80088c0 <cos>
 80025bc:	ec51 0b10 	vmov	r0, r1, d0
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <calculate_IK_BN1+0x8f4>)
 80025c6:	f7fd ffbf 	bl	8000548 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fd fe01 	bl	80001d8 <__aeabi_dsub>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <calculate_IK_BN1+0x8f8>)
 80025e4:	f7fe f8da 	bl	800079c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fa82 	bl	8000af8 <__aeabi_d2f>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
    IK->s23 = (IK->Pz_IK - d1 - L2 * sin(IK->theta2_IK_rad) - L4 * sin(IK->t_rad)) / L3;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002600:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80027d4 <calculate_IK_BN1+0x8fc>
 8002604:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002608:	ee17 0a90 	vmov	r0, s15
 800260c:	f7fd ff44 	bl	8000498 <__aeabi_f2d>
 8002610:	4604      	mov	r4, r0
 8002612:	460d      	mov	r5, r1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff3d 	bl	8000498 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	ec43 2b10 	vmov	d0, r2, r3
 8002626:	f006 f99f 	bl	8008968 <sin>
 800262a:	ec51 0b10 	vmov	r0, r1, d0
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <calculate_IK_BN1+0x8f0>)
 8002634:	f7fd ff88 	bl	8000548 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4620      	mov	r0, r4
 800263e:	4629      	mov	r1, r5
 8002640:	f7fd fdca 	bl	80001d8 <__aeabi_dsub>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4614      	mov	r4, r2
 800264a:	461d      	mov	r5, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ff21 	bl	8000498 <__aeabi_f2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	ec43 2b10 	vmov	d0, r2, r3
 800265e:	f006 f983 	bl	8008968 <sin>
 8002662:	ec51 0b10 	vmov	r0, r1, d0
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4b58      	ldr	r3, [pc, #352]	; (80027cc <calculate_IK_BN1+0x8f4>)
 800266c:	f7fd ff6c 	bl	8000548 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4620      	mov	r0, r4
 8002676:	4629      	mov	r1, r5
 8002678:	f7fd fdae 	bl	80001d8 <__aeabi_dsub>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <calculate_IK_BN1+0x8f8>)
 800268a:	f7fe f887 	bl	800079c <__aeabi_ddiv>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe fa2f 	bl	8000af8 <__aeabi_d2f>
 800269a:	4602      	mov	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	659a      	str	r2, [r3, #88]	; 0x58
    IK->theta3_IK_rad = atan2(IK->s23, IK->c23) - IK->theta2_IK_rad;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fef7 	bl	8000498 <__aeabi_f2d>
 80026aa:	4604      	mov	r4, r0
 80026ac:	460d      	mov	r5, r1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fef0 	bl	8000498 <__aeabi_f2d>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	ec43 2b11 	vmov	d1, r2, r3
 80026c0:	ec45 4b10 	vmov	d0, r4, r5
 80026c4:	f006 f85c 	bl	8008780 <atan2>
 80026c8:	ec55 4b10 	vmov	r4, r5, d0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fee1 	bl	8000498 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4620      	mov	r0, r4
 80026dc:	4629      	mov	r1, r5
 80026de:	f7fd fd7b 	bl	80001d8 <__aeabi_dsub>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe fa05 	bl	8000af8 <__aeabi_d2f>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
    IK->Theta3_IK = IK->theta3_IK_rad * (180 / M_PI);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fecd 	bl	8000498 <__aeabi_f2d>
 80026fe:	a330      	add	r3, pc, #192	; (adr r3, 80027c0 <calculate_IK_BN1+0x8e8>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fd ff20 	bl	8000548 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe f9f2 	bl	8000af8 <__aeabi_d2f>
 8002714:	4602      	mov	r2, r0
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	615a      	str	r2, [r3, #20]

    if (IK->Theta3_IK < -180) {
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002720:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80027d8 <calculate_IK_BN1+0x900>
 8002724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272c:	d50a      	bpl.n	8002744 <calculate_IK_BN1+0x86c>
    	IK->Theta3_IK += 360;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	edd3 7a05 	vldr	s15, [r3, #20]
 8002734:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80027dc <calculate_IK_BN1+0x904>
 8002738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	edc3 7a05 	vstr	s15, [r3, #20]
 8002742:	e013      	b.n	800276c <calculate_IK_BN1+0x894>
    } else if (IK->Theta3_IK > 180) {
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	edd3 7a05 	vldr	s15, [r3, #20]
 800274a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80027e0 <calculate_IK_BN1+0x908>
 800274e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	dd09      	ble.n	800276c <calculate_IK_BN1+0x894>
    	IK->Theta3_IK -= 360;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	edd3 7a05 	vldr	s15, [r3, #20]
 800275e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80027dc <calculate_IK_BN1+0x904>
 8002762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    IK->theta4_IK_rad = IK->t_rad - IK->theta2_IK_rad - IK->theta3_IK_rad;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    IK->Theta4_IK = IK->theta4_IK_rad * (180 / M_PI);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe81 	bl	8000498 <__aeabi_f2d>
 8002796:	a30a      	add	r3, pc, #40	; (adr r3, 80027c0 <calculate_IK_BN1+0x8e8>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe f9a6 	bl	8000af8 <__aeabi_d2f>
 80027ac:	4602      	mov	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	619a      	str	r2, [r3, #24]

}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	ecbd 8b02 	vpop	{d8}
 80027bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027c0:	1a63c1f8 	.word	0x1a63c1f8
 80027c4:	404ca5dc 	.word	0x404ca5dc
 80027c8:	405e8000 	.word	0x405e8000
 80027cc:	40538000 	.word	0x40538000
 80027d0:	40534000 	.word	0x40534000
 80027d4:	436e0000 	.word	0x436e0000
 80027d8:	c3340000 	.word	0xc3340000
 80027dc:	43b40000 	.word	0x43b40000
 80027e0:	43340000 	.word	0x43340000
 80027e4:	00000000 	.word	0x00000000
 80027e8:	4056c000 	.word	0x4056c000
 80027ec:	00000000 	.word	0x00000000

080027f0 <calculate_IK_BN2>:

void calculate_IK_BN2(InverseKinematics_ *IK,float px_value, float py_value, float pz_value, float Theta_value) {
 80027f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6178      	str	r0, [r7, #20]
 80027fa:	ed87 0a04 	vstr	s0, [r7, #16]
 80027fe:	edc7 0a03 	vstr	s1, [r7, #12]
 8002802:	ed87 1a02 	vstr	s2, [r7, #8]
 8002806:	edc7 1a01 	vstr	s3, [r7, #4]

	IK->Px_IK = px_value;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	601a      	str	r2, [r3, #0]
	IK->Py_IK = py_value;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]
	IK->Pz_IK = pz_value;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	609a      	str	r2, [r3, #8]
	IK->Theta_IK = Theta_value;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	61da      	str	r2, [r3, #28]

	IK->t_rad = IK->Theta_IK * (M_PI / 180);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe36 	bl	8000498 <__aeabi_f2d>
 800282c:	a34d      	add	r3, pc, #308	; (adr r3, 8002964 <calculate_IK_BN2+0x174>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fe89 	bl	8000548 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f95b 	bl	8000af8 <__aeabi_d2f>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c
	IK->k = sqrt(pow(IK->Px_IK, 2) + pow(IK->Py_IK, 2));
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe23 	bl	8000498 <__aeabi_f2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002958 <calculate_IK_BN2+0x168>
 800285a:	ec43 2b10 	vmov	d0, r2, r3
 800285e:	f005 ff91 	bl	8008784 <pow>
 8002862:	ec55 4b10 	vmov	r4, r5, d0
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe14 	bl	8000498 <__aeabi_f2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8002958 <calculate_IK_BN2+0x168>
 8002878:	ec43 2b10 	vmov	d0, r2, r3
 800287c:	f005 ff82 	bl	8008784 <pow>
 8002880:	ec53 2b10 	vmov	r2, r3, d0
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fca8 	bl	80001dc <__adddf3>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	ec43 2b17 	vmov	d7, r2, r3
 8002894:	eeb0 0a47 	vmov.f32	s0, s14
 8002898:	eef0 0a67 	vmov.f32	s1, s15
 800289c:	f005 ffe2 	bl	8008864 <sqrt>
 80028a0:	ec53 2b10 	vmov	r2, r3, d0
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7fe f926 	bl	8000af8 <__aeabi_d2f>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
	IK->theta1_IK_rad = atan2((IK->Py_IK / IK->k), (IK->Px_IK / IK->k));
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80028be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028c2:	ee16 0a90 	vmov	r0, s13
 80028c6:	f7fd fde7 	bl	8000498 <__aeabi_f2d>
 80028ca:	4604      	mov	r4, r0
 80028cc:	460d      	mov	r5, r1
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	ed93 7a00 	vldr	s14, [r3]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80028da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028de:	ee16 0a90 	vmov	r0, s13
 80028e2:	f7fd fdd9 	bl	8000498 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	ec43 2b11 	vmov	d1, r2, r3
 80028ee:	ec45 4b10 	vmov	d0, r4, r5
 80028f2:	f005 ff45 	bl	8008780 <atan2>
 80028f6:	ec53 2b10 	vmov	r2, r3, d0
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f8fb 	bl	8000af8 <__aeabi_d2f>
 8002902:	4602      	mov	r2, r0
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	621a      	str	r2, [r3, #32]
	IK->Theta1_IK = IK->theta1_IK_rad * (180 / M_PI);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fdc3 	bl	8000498 <__aeabi_f2d>
 8002912:	a316      	add	r3, pc, #88	; (adr r3, 800296c <calculate_IK_BN2+0x17c>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe16 	bl	8000548 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f7fe f8e8 	bl	8000af8 <__aeabi_d2f>
 8002928:	4602      	mov	r2, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	60da      	str	r2, [r3, #12]

    if (IK->Theta1_IK < -180) {
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	edd3 7a03 	vldr	s15, [r3, #12]
 8002934:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002960 <calculate_IK_BN2+0x170>
 8002938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d51c      	bpl.n	800297c <calculate_IK_BN2+0x18c>
    	IK->Theta1_IK += 360;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	edd3 7a03 	vldr	s15, [r3, #12]
 8002948:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002978 <calculate_IK_BN2+0x188>
 800294c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	edc3 7a03 	vstr	s15, [r3, #12]
 8002956:	e025      	b.n	80029a4 <calculate_IK_BN2+0x1b4>
 8002958:	00000000 	.word	0x00000000
 800295c:	40000000 	.word	0x40000000
 8002960:	c3340000 	.word	0xc3340000
 8002964:	a2529d39 	.word	0xa2529d39
 8002968:	3f91df46 	.word	0x3f91df46
 800296c:	1a63c1f8 	.word	0x1a63c1f8
 8002970:	404ca5dc 	.word	0x404ca5dc
 8002974:	43340000 	.word	0x43340000
 8002978:	43b40000 	.word	0x43b40000
    } else if (IK->Theta1_IK > 180) {
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002982:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002974 <calculate_IK_BN2+0x184>
 8002986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	dd09      	ble.n	80029a4 <calculate_IK_BN2+0x1b4>
    	IK->Theta1_IK -= 360;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	edd3 7a03 	vldr	s15, [r3, #12]
 8002996:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002978 <calculate_IK_BN2+0x188>
 800299a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    IK->E = IK->Px_IK * cos(IK->theta1_IK_rad) + IK->Py_IK * sin(IK->theta1_IK_rad) - L1 - L4 * cos(IK->t_rad);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fd75 	bl	8000498 <__aeabi_f2d>
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fd6e 	bl	8000498 <__aeabi_f2d>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	ec43 2b10 	vmov	d0, r2, r3
 80029c4:	f005 ff7c 	bl	80088c0 <cos>
 80029c8:	ec53 2b10 	vmov	r2, r3, d0
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fdba 	bl	8000548 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4690      	mov	r8, r2
 80029da:	4699      	mov	r9, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd59 	bl	8000498 <__aeabi_f2d>
 80029e6:	4604      	mov	r4, r0
 80029e8:	460d      	mov	r5, r1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fd52 	bl	8000498 <__aeabi_f2d>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	ec43 2b10 	vmov	d0, r2, r3
 80029fc:	f005 ffb4 	bl	8008968 <sin>
 8002a00:	ec53 2b10 	vmov	r2, r3, d0
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fd9e 	bl	8000548 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4640      	mov	r0, r8
 8002a12:	4649      	mov	r1, r9
 8002a14:	f7fd fbe2 	bl	80001dc <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	a3e5      	add	r3, pc, #916	; (adr r3, 8002db8 <calculate_IK_BN2+0x5c8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fbd7 	bl	80001d8 <__aeabi_dsub>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4614      	mov	r4, r2
 8002a30:	461d      	mov	r5, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fd2e 	bl	8000498 <__aeabi_f2d>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	ec43 2b10 	vmov	d0, r2, r3
 8002a44:	f005 ff3c 	bl	80088c0 <cos>
 8002a48:	ec51 0b10 	vmov	r0, r1, d0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4bd5      	ldr	r3, [pc, #852]	; (8002da8 <calculate_IK_BN2+0x5b8>)
 8002a52:	f7fd fd79 	bl	8000548 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fbbb 	bl	80001d8 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fe f845 	bl	8000af8 <__aeabi_d2f>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
    IK->F = IK->Pz_IK - d1 - L4 * sin(IK->t_rad);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a7a:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8002dac <calculate_IK_BN2+0x5bc>
 8002a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a82:	ee17 0a90 	vmov	r0, s15
 8002a86:	f7fd fd07 	bl	8000498 <__aeabi_f2d>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460d      	mov	r5, r1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd00 	bl	8000498 <__aeabi_f2d>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	ec43 2b10 	vmov	d0, r2, r3
 8002aa0:	f005 ff62 	bl	8008968 <sin>
 8002aa4:	ec51 0b10 	vmov	r0, r1, d0
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	4bbe      	ldr	r3, [pc, #760]	; (8002da8 <calculate_IK_BN2+0x5b8>)
 8002aae:	f7fd fd4b 	bl	8000548 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fd fb8d 	bl	80001d8 <__aeabi_dsub>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe f817 	bl	8000af8 <__aeabi_d2f>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c

    IK->a = -2 * L2 * IK->F;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ad6:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002db0 <calculate_IK_BN2+0x5c0>
 8002ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    IK->b = -2 * L2 * IK->E;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002aea:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002db0 <calculate_IK_BN2+0x5c0>
 8002aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    IK->d = pow(L3, 2) - pow(IK->E, 2) - pow(IK->F, 2) - pow(L2, 2);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fccb 	bl	8000498 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8002d88 <calculate_IK_BN2+0x598>
 8002b0a:	ec43 2b10 	vmov	d0, r2, r3
 8002b0e:	f005 fe39 	bl	8008784 <pow>
 8002b12:	ec53 2b10 	vmov	r2, r3, d0
 8002b16:	a19e      	add	r1, pc, #632	; (adr r1, 8002d90 <calculate_IK_BN2+0x5a0>)
 8002b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b1c:	f7fd fb5c 	bl	80001d8 <__aeabi_dsub>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcb3 	bl	8000498 <__aeabi_f2d>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8002d88 <calculate_IK_BN2+0x598>
 8002b3a:	ec43 2b10 	vmov	d0, r2, r3
 8002b3e:	f005 fe21 	bl	8008784 <pow>
 8002b42:	ec53 2b10 	vmov	r2, r3, d0
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd fb45 	bl	80001d8 <__aeabi_dsub>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	a390      	add	r3, pc, #576	; (adr r3, 8002d98 <calculate_IK_BN2+0x5a8>)
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f7fd fb3c 	bl	80001d8 <__aeabi_dsub>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fd ffc6 	bl	8000af8 <__aeabi_d2f>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	649a      	str	r2, [r3, #72]	; 0x48
    IK->f = sqrt(pow(IK->a, 2) + pow(IK->b, 2));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc8e 	bl	8000498 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8002d88 <calculate_IK_BN2+0x598>
 8002b84:	ec43 2b10 	vmov	d0, r2, r3
 8002b88:	f005 fdfc 	bl	8008784 <pow>
 8002b8c:	ec55 4b10 	vmov	r4, r5, d0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fc7f 	bl	8000498 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8002d88 <calculate_IK_BN2+0x598>
 8002ba2:	ec43 2b10 	vmov	d0, r2, r3
 8002ba6:	f005 fded 	bl	8008784 <pow>
 8002baa:	ec53 2b10 	vmov	r2, r3, d0
 8002bae:	4620      	mov	r0, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	f7fd fb13 	bl	80001dc <__adddf3>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	ec43 2b17 	vmov	d7, r2, r3
 8002bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc2:	eef0 0a67 	vmov.f32	s1, s15
 8002bc6:	f005 fe4d 	bl	8008864 <sqrt>
 8002bca:	ec53 2b10 	vmov	r2, r3, d0
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f7fd ff91 	bl	8000af8 <__aeabi_d2f>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	64da      	str	r2, [r3, #76]	; 0x4c
    IK->alpha = atan2(-2 * L2 * IK->F / IK->f, -2 * L2 * IK->E / IK->f);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002be2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002db0 <calculate_IK_BN2+0x5c0>
 8002be6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002bf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bf4:	ee16 0a90 	vmov	r0, s13
 8002bf8:	f7fd fc4e 	bl	8000498 <__aeabi_f2d>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	460d      	mov	r5, r1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002c06:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002db0 <calculate_IK_BN2+0x5c0>
 8002c0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c18:	ee16 0a90 	vmov	r0, s13
 8002c1c:	f7fd fc3c 	bl	8000498 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	ec43 2b11 	vmov	d1, r2, r3
 8002c28:	ec45 4b10 	vmov	d0, r4, r5
 8002c2c:	f005 fda8 	bl	8008780 <atan2>
 8002c30:	ec53 2b10 	vmov	r2, r3, d0
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7fd ff5e 	bl	8000af8 <__aeabi_d2f>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30

    IK->var_temp = pow(IK->d, 2) / pow(IK->f, 2);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc26 	bl	8000498 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8002d88 <calculate_IK_BN2+0x598>
 8002c54:	ec43 2b10 	vmov	d0, r2, r3
 8002c58:	f005 fd94 	bl	8008784 <pow>
 8002c5c:	ec55 4b10 	vmov	r4, r5, d0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc17 	bl	8000498 <__aeabi_f2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002d88 <calculate_IK_BN2+0x598>
 8002c72:	ec43 2b10 	vmov	d0, r2, r3
 8002c76:	f005 fd85 	bl	8008784 <pow>
 8002c7a:	ec53 2b10 	vmov	r2, r3, d0
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fd8b 	bl	800079c <__aeabi_ddiv>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f7fd ff33 	bl	8000af8 <__aeabi_d2f>
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	651a      	str	r2, [r3, #80]	; 0x50
    if (IK->var_temp > 1) IK->var_temp = 1;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	dd03      	ble.n	8002cb4 <calculate_IK_BN2+0x4c4>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cb2:	651a      	str	r2, [r3, #80]	; 0x50

    IK->theta2_IK_rad = atan2(-sqrt(1 - IK->var_temp), IK->d / IK->f) + IK->alpha;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc2:	ee17 0a90 	vmov	r0, s15
 8002cc6:	f7fd fbe7 	bl	8000498 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	ec43 2b10 	vmov	d0, r2, r3
 8002cd2:	f005 fdc7 	bl	8008864 <sqrt>
 8002cd6:	ec53 2b10 	vmov	r2, r3, d0
 8002cda:	4692      	mov	sl, r2
 8002cdc:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002cec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cf0:	ee16 0a90 	vmov	r0, s13
 8002cf4:	f7fd fbd0 	bl	8000498 <__aeabi_f2d>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	ec43 2b11 	vmov	d1, r2, r3
 8002d00:	ec4b ab10 	vmov	d0, sl, fp
 8002d04:	f005 fd3c 	bl	8008780 <atan2>
 8002d08:	ec55 4b10 	vmov	r4, r5, d0
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbc1 	bl	8000498 <__aeabi_f2d>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fa5d 	bl	80001dc <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd fee5 	bl	8000af8 <__aeabi_d2f>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
    IK->Theta2_IK = IK->theta2_IK_rad * (180 / M_PI);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fbad 	bl	8000498 <__aeabi_f2d>
 8002d3e:	a318      	add	r3, pc, #96	; (adr r3, 8002da0 <calculate_IK_BN2+0x5b0>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f7fd fc00 	bl	8000548 <__aeabi_dmul>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd fed2 	bl	8000af8 <__aeabi_d2f>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	611a      	str	r2, [r3, #16]

    if (IK->Theta2_IK < -180) {
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d60:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002db4 <calculate_IK_BN2+0x5c4>
 8002d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6c:	d52c      	bpl.n	8002dc8 <calculate_IK_BN2+0x5d8>
    	IK->Theta2_IK += 360;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d74:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002dc4 <calculate_IK_BN2+0x5d4>
 8002d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	edc3 7a04 	vstr	s15, [r3, #16]
 8002d82:	e035      	b.n	8002df0 <calculate_IK_BN2+0x600>
 8002d84:	f3af 8000 	nop.w
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	40000000 	.word	0x40000000
 8002d90:	00000000 	.word	0x00000000
 8002d94:	40b72900 	.word	0x40b72900
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	40cd1200 	.word	0x40cd1200
 8002da0:	1a63c1f8 	.word	0x1a63c1f8
 8002da4:	404ca5dc 	.word	0x404ca5dc
 8002da8:	40538000 	.word	0x40538000
 8002dac:	436e0000 	.word	0x436e0000
 8002db0:	c3740000 	.word	0xc3740000
 8002db4:	c3340000 	.word	0xc3340000
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	4056c000 	.word	0x4056c000
 8002dc0:	43340000 	.word	0x43340000
 8002dc4:	43b40000 	.word	0x43b40000
    } else if (IK->Theta2_IK > 180) {
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dce:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002dc0 <calculate_IK_BN2+0x5d0>
 8002dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	dd09      	ble.n	8002df0 <calculate_IK_BN2+0x600>
    	IK->Theta2_IK -= 360;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	edd3 7a04 	vldr	s15, [r3, #16]
 8002de2:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8002dc4 <calculate_IK_BN2+0x5d4>
 8002de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    IK->c23 = (IK->Px_IK * cos(IK->theta1_IK_rad) + IK->Py_IK * sin(IK->theta1_IK_rad) - L1 - L2 * cos(IK->theta2_IK_rad) - L4 * cos(IK->t_rad)) / L3;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fb4f 	bl	8000498 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb48 	bl	8000498 <__aeabi_f2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	ec43 2b10 	vmov	d0, r2, r3
 8002e10:	f005 fd56 	bl	80088c0 <cos>
 8002e14:	ec53 2b10 	vmov	r2, r3, d0
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	f7fd fb94 	bl	8000548 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4690      	mov	r8, r2
 8002e26:	4699      	mov	r9, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb33 	bl	8000498 <__aeabi_f2d>
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb2c 	bl	8000498 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	ec43 2b10 	vmov	d0, r2, r3
 8002e48:	f005 fd8e 	bl	8008968 <sin>
 8002e4c:	ec53 2b10 	vmov	r2, r3, d0
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	4649      	mov	r1, r9
 8002e60:	f7fd f9bc 	bl	80001dc <__adddf3>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	a3a1      	add	r3, pc, #644	; (adr r3, 80030f4 <calculate_IK_BN2+0x904>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd f9b1 	bl	80001d8 <__aeabi_dsub>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4614      	mov	r4, r2
 8002e7c:	461d      	mov	r5, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb08 	bl	8000498 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	ec43 2b10 	vmov	d0, r2, r3
 8002e90:	f005 fd16 	bl	80088c0 <cos>
 8002e94:	ec51 0b10 	vmov	r0, r1, d0
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	4b8e      	ldr	r3, [pc, #568]	; (80030d8 <calculate_IK_BN2+0x8e8>)
 8002e9e:	f7fd fb53 	bl	8000548 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f7fd f995 	bl	80001d8 <__aeabi_dsub>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd faec 	bl	8000498 <__aeabi_f2d>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	ec43 2b10 	vmov	d0, r2, r3
 8002ec8:	f005 fcfa 	bl	80088c0 <cos>
 8002ecc:	ec51 0b10 	vmov	r0, r1, d0
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b81      	ldr	r3, [pc, #516]	; (80030dc <calculate_IK_BN2+0x8ec>)
 8002ed6:	f7fd fb37 	bl	8000548 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	f7fd f979 	bl	80001d8 <__aeabi_dsub>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	4b7b      	ldr	r3, [pc, #492]	; (80030e0 <calculate_IK_BN2+0x8f0>)
 8002ef4:	f7fd fc52 	bl	800079c <__aeabi_ddiv>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fdfa 	bl	8000af8 <__aeabi_d2f>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	655a      	str	r2, [r3, #84]	; 0x54
    IK->s23 = (IK->Pz_IK - d1 - L2 * sin(IK->theta2_IK_rad) - L4 * sin(IK->t_rad)) / L3;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f10:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80030e4 <calculate_IK_BN2+0x8f4>
 8002f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f18:	ee17 0a90 	vmov	r0, s15
 8002f1c:	f7fd fabc 	bl	8000498 <__aeabi_f2d>
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fab5 	bl	8000498 <__aeabi_f2d>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	ec43 2b10 	vmov	d0, r2, r3
 8002f36:	f005 fd17 	bl	8008968 <sin>
 8002f3a:	ec51 0b10 	vmov	r0, r1, d0
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <calculate_IK_BN2+0x8e8>)
 8002f44:	f7fd fb00 	bl	8000548 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7fd f942 	bl	80001d8 <__aeabi_dsub>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4614      	mov	r4, r2
 8002f5a:	461d      	mov	r5, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fa99 	bl	8000498 <__aeabi_f2d>
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	ec43 2b10 	vmov	d0, r2, r3
 8002f6e:	f005 fcfb 	bl	8008968 <sin>
 8002f72:	ec51 0b10 	vmov	r0, r1, d0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <calculate_IK_BN2+0x8ec>)
 8002f7c:	f7fd fae4 	bl	8000548 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4620      	mov	r0, r4
 8002f86:	4629      	mov	r1, r5
 8002f88:	f7fd f926 	bl	80001d8 <__aeabi_dsub>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <calculate_IK_BN2+0x8f0>)
 8002f9a:	f7fd fbff 	bl	800079c <__aeabi_ddiv>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fda7 	bl	8000af8 <__aeabi_d2f>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58
    IK->theta3_IK_rad = atan2(IK->s23, IK->c23) - IK->theta2_IK_rad;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fa6f 	bl	8000498 <__aeabi_f2d>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	460d      	mov	r5, r1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fa68 	bl	8000498 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	ec43 2b11 	vmov	d1, r2, r3
 8002fd0:	ec45 4b10 	vmov	d0, r4, r5
 8002fd4:	f005 fbd4 	bl	8008780 <atan2>
 8002fd8:	ec55 4b10 	vmov	r4, r5, d0
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fa59 	bl	8000498 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4620      	mov	r0, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	f7fd f8f3 	bl	80001d8 <__aeabi_dsub>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fd7d 	bl	8000af8 <__aeabi_d2f>
 8002ffe:	4602      	mov	r2, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	629a      	str	r2, [r3, #40]	; 0x28
    IK->Theta3_IK = IK->theta3_IK_rad * (180 / M_PI);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa45 	bl	8000498 <__aeabi_f2d>
 800300e:	a330      	add	r3, pc, #192	; (adr r3, 80030d0 <calculate_IK_BN2+0x8e0>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd fa98 	bl	8000548 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f7fd fd6a 	bl	8000af8 <__aeabi_d2f>
 8003024:	4602      	mov	r2, r0
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	615a      	str	r2, [r3, #20]

    if (IK->Theta3_IK < -180) {
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003030:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80030e8 <calculate_IK_BN2+0x8f8>
 8003034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d50a      	bpl.n	8003054 <calculate_IK_BN2+0x864>
    	IK->Theta3_IK += 360;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	edd3 7a05 	vldr	s15, [r3, #20]
 8003044:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80030ec <calculate_IK_BN2+0x8fc>
 8003048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	edc3 7a05 	vstr	s15, [r3, #20]
 8003052:	e013      	b.n	800307c <calculate_IK_BN2+0x88c>
    } else if (IK->Theta3_IK > 180) {
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	edd3 7a05 	vldr	s15, [r3, #20]
 800305a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80030f0 <calculate_IK_BN2+0x900>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	dd09      	ble.n	800307c <calculate_IK_BN2+0x88c>
    	IK->Theta3_IK -= 360;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	edd3 7a05 	vldr	s15, [r3, #20]
 800306e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80030ec <calculate_IK_BN2+0x8fc>
 8003072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    IK->theta4_IK_rad = IK->t_rad - IK->theta2_IK_rad - IK->theta3_IK_rad;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    IK->Theta4_IK = IK->theta4_IK_rad * (180 / M_PI);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd f9f9 	bl	8000498 <__aeabi_f2d>
 80030a6:	a30a      	add	r3, pc, #40	; (adr r3, 80030d0 <calculate_IK_BN2+0x8e0>)
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	f7fd fa4c 	bl	8000548 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd1e 	bl	8000af8 <__aeabi_d2f>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030cc:	f3af 8000 	nop.w
 80030d0:	1a63c1f8 	.word	0x1a63c1f8
 80030d4:	404ca5dc 	.word	0x404ca5dc
 80030d8:	405e8000 	.word	0x405e8000
 80030dc:	40538000 	.word	0x40538000
 80030e0:	40534000 	.word	0x40534000
 80030e4:	436e0000 	.word	0x436e0000
 80030e8:	c3340000 	.word	0xc3340000
 80030ec:	43b40000 	.word	0x43b40000
 80030f0:	43340000 	.word	0x43340000
 80030f4:	00000000 	.word	0x00000000
 80030f8:	4056c000 	.word	0x4056c000
 80030fc:	00000000 	.word	0x00000000

08003100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b096      	sub	sp, #88	; 0x58
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003106:	f001 f987 	bl	8004418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310a:	f000 f8cb 	bl	80032a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800310e:	f000 fc09 	bl	8003924 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003112:	f000 f92f 	bl	8003374 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003116:	f000 fa2d 	bl	8003574 <MX_TIM4_Init>
  MX_TIM2_Init();
 800311a:	f000 f983 	bl	8003424 <MX_TIM2_Init>
  MX_TIM3_Init();
 800311e:	f000 f9d5 	bl	80034cc <MX_TIM3_Init>
  MX_TIM5_Init();
 8003122:	f000 faa1 	bl	8003668 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003126:	f000 faf3 	bl	8003710 <MX_TIM8_Init>
  MX_TIM9_Init();
 800312a:	f000 fb81 	bl	8003830 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 800312e:	f000 fbcf 	bl	80038d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003132:	2100      	movs	r1, #0
 8003134:	484a      	ldr	r0, [pc, #296]	; (8003260 <main+0x160>)
 8003136:	f002 fa21 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800313a:	2104      	movs	r1, #4
 800313c:	4848      	ldr	r0, [pc, #288]	; (8003260 <main+0x160>)
 800313e:	f002 fa1d 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003142:	2108      	movs	r1, #8
 8003144:	4846      	ldr	r0, [pc, #280]	; (8003260 <main+0x160>)
 8003146:	f002 fa19 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800314a:	210c      	movs	r1, #12
 800314c:	4844      	ldr	r0, [pc, #272]	; (8003260 <main+0x160>)
 800314e:	f002 fa15 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003152:	2100      	movs	r1, #0
 8003154:	4843      	ldr	r0, [pc, #268]	; (8003264 <main+0x164>)
 8003156:	f002 fa11 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800315a:	2104      	movs	r1, #4
 800315c:	4841      	ldr	r0, [pc, #260]	; (8003264 <main+0x164>)
 800315e:	f002 fa0d 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003162:	2108      	movs	r1, #8
 8003164:	4840      	ldr	r0, [pc, #256]	; (8003268 <main+0x168>)
 8003166:	f002 fa09 	bl	800557c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800316a:	210c      	movs	r1, #12
 800316c:	483e      	ldr	r0, [pc, #248]	; (8003268 <main+0x168>)
 800316e:	f002 fa05 	bl	800557c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8003172:	213c      	movs	r1, #60	; 0x3c
 8003174:	483d      	ldr	r0, [pc, #244]	; (800326c <main+0x16c>)
 8003176:	f002 fb6f 	bl	8005858 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800317a:	213c      	movs	r1, #60	; 0x3c
 800317c:	483c      	ldr	r0, [pc, #240]	; (8003270 <main+0x170>)
 800317e:	f002 fb6b 	bl	8005858 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003182:	213c      	movs	r1, #60	; 0x3c
 8003184:	483b      	ldr	r0, [pc, #236]	; (8003274 <main+0x174>)
 8003186:	f002 fb67 	bl	8005858 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800318a:	213c      	movs	r1, #60	; 0x3c
 800318c:	483a      	ldr	r0, [pc, #232]	; (8003278 <main+0x178>)
 800318e:	f002 fb63 	bl	8005858 <HAL_TIM_Encoder_Start>


  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 8003192:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8003258 <main+0x158>
 8003196:	f641 3226 	movw	r2, #6950	; 0x1b26
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <main+0x16c>)
 800319c:	4837      	ldr	r0, [pc, #220]	; (800327c <main+0x17c>)
 800319e:	f7fd fe79 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 80031a2:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8003258 <main+0x158>
 80031a6:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80031aa:	4931      	ldr	r1, [pc, #196]	; (8003270 <main+0x170>)
 80031ac:	4834      	ldr	r0, [pc, #208]	; (8003280 <main+0x180>)
 80031ae:	f7fd fe71 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 6880, 0.01);
 80031b2:	ed9f 0b29 	vldr	d0, [pc, #164]	; 8003258 <main+0x158>
 80031b6:	f44f 52d7 	mov.w	r2, #6880	; 0x1ae0
 80031ba:	492e      	ldr	r1, [pc, #184]	; (8003274 <main+0x174>)
 80031bc:	4831      	ldr	r0, [pc, #196]	; (8003284 <main+0x184>)
 80031be:	f7fd fe69 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 80031c2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8003258 <main+0x158>
 80031c6:	f640 4294 	movw	r2, #3220	; 0xc94
 80031ca:	492b      	ldr	r1, [pc, #172]	; (8003278 <main+0x178>)
 80031cc:	482e      	ldr	r0, [pc, #184]	; (8003288 <main+0x188>)
 80031ce:	f7fd fe61 	bl	8000e94 <EncoderSetting>

  PID_LINK1_Init();
 80031d2:	f7fe f987 	bl	80014e4 <PID_LINK1_Init>
  PID_LINK2_Init();
 80031d6:	f7fe fa39 	bl	800164c <PID_LINK2_Init>
  PID_LINK3_Init();
 80031da:	f7fe faf1 	bl	80017c0 <PID_LINK3_Init>
  PID_LINK4_Init();
 80031de:	f7fe fba9 	bl	8001934 <PID_LINK4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80031e2:	4b2a      	ldr	r3, [pc, #168]	; (800328c <main+0x18c>)
 80031e4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80031e8:	461d      	mov	r5, r3
 80031ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80031f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f004 f83e 	bl	800727e <osThreadCreate>
 8003202:	4603      	mov	r3, r0
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <main+0x190>)
 8003206:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8003208:	4b22      	ldr	r3, [pc, #136]	; (8003294 <main+0x194>)
 800320a:	f107 0420 	add.w	r4, r7, #32
 800320e:	461d      	mov	r5, r3
 8003210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 800321c:	f107 0320 	add.w	r3, r7, #32
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f004 f82b 	bl	800727e <osThreadCreate>
 8003228:	4603      	mov	r3, r0
 800322a:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <main+0x198>)
 800322c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <main+0x19c>)
 8003230:	1d3c      	adds	r4, r7, #4
 8003232:	461d      	mov	r5, r3
 8003234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003238:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800323c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f004 f81a 	bl	800727e <osThreadCreate>
 800324a:	4603      	mov	r3, r0
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <main+0x1a0>)
 800324e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003250:	f004 f80e 	bl	8007270 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003254:	e7fe      	b.n	8003254 <main+0x154>
 8003256:	bf00      	nop
 8003258:	47ae147b 	.word	0x47ae147b
 800325c:	3f847ae1 	.word	0x3f847ae1
 8003260:	200003b8 	.word	0x200003b8
 8003264:	20000490 	.word	0x20000490
 8003268:	20000448 	.word	0x20000448
 800326c:	200002e0 	.word	0x200002e0
 8003270:	20000328 	.word	0x20000328
 8003274:	20000370 	.word	0x20000370
 8003278:	20000400 	.word	0x20000400
 800327c:	20000550 	.word	0x20000550
 8003280:	20000650 	.word	0x20000650
 8003284:	20000750 	.word	0x20000750
 8003288:	20000850 	.word	0x20000850
 800328c:	0800ab6c 	.word	0x0800ab6c
 8003290:	20000520 	.word	0x20000520
 8003294:	0800ab94 	.word	0x0800ab94
 8003298:	20000524 	.word	0x20000524
 800329c:	0800abbc 	.word	0x0800abbc
 80032a0:	20000528 	.word	0x20000528

080032a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b094      	sub	sp, #80	; 0x50
 80032a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032aa:	f107 0320 	add.w	r3, r7, #32
 80032ae:	2230      	movs	r2, #48	; 0x30
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f005 fa32 	bl	800871c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <SystemClock_Config+0xc8>)
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4a26      	ldr	r2, [pc, #152]	; (800336c <SystemClock_Config+0xc8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6413      	str	r3, [r2, #64]	; 0x40
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <SystemClock_Config+0xc8>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <SystemClock_Config+0xcc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <SystemClock_Config+0xcc>)
 80032ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <SystemClock_Config+0xcc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003304:	2301      	movs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003308:	2310      	movs	r3, #16
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800330c:	2302      	movs	r3, #2
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003314:	2308      	movs	r3, #8
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003318:	2348      	movs	r3, #72	; 0x48
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800331c:	2302      	movs	r3, #2
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003320:	2304      	movs	r3, #4
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003324:	f107 0320 	add.w	r3, r7, #32
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fc3f 	bl	8004bac <HAL_RCC_OscConfig>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003334:	f000 fd8a 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003338:	230f      	movs	r3, #15
 800333a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003348:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800334e:	f107 030c 	add.w	r3, r7, #12
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fea1 	bl	800509c <HAL_RCC_ClockConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003360:	f000 fd74 	bl	8003e4c <Error_Handler>
  }
}
 8003364:	bf00      	nop
 8003366:	3750      	adds	r7, #80	; 0x50
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	40007000 	.word	0x40007000

08003374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	; 0x30
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f005 f9ca 	bl	800871c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <MX_TIM1_Init+0xa8>)
 8003392:	4a23      	ldr	r2, [pc, #140]	; (8003420 <MX_TIM1_Init+0xac>)
 8003394:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <MX_TIM1_Init+0xa8>)
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <MX_TIM1_Init+0xa8>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80033a2:	4b1e      	ldr	r3, [pc, #120]	; (800341c <MX_TIM1_Init+0xa8>)
 80033a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <MX_TIM1_Init+0xa8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <MX_TIM1_Init+0xa8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <MX_TIM1_Init+0xa8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033bc:	2303      	movs	r3, #3
 80033be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033c4:	2301      	movs	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033d0:	2300      	movs	r3, #0
 80033d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033d4:	2301      	movs	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	4619      	mov	r1, r3
 80033e6:	480d      	ldr	r0, [pc, #52]	; (800341c <MX_TIM1_Init+0xa8>)
 80033e8:	f002 f990 	bl	800570c <HAL_TIM_Encoder_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80033f2:	f000 fd2b 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	4619      	mov	r1, r3
 8003402:	4806      	ldr	r0, [pc, #24]	; (800341c <MX_TIM1_Init+0xa8>)
 8003404:	f002 ff1c 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800340e:	f000 fd1d 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003412:	bf00      	nop
 8003414:	3730      	adds	r7, #48	; 0x30
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200002e0 	.word	0x200002e0
 8003420:	40010000 	.word	0x40010000

08003424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	2224      	movs	r2, #36	; 0x24
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f005 f972 	bl	800871c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <MX_TIM2_Init+0xa4>)
 8003442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003448:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <MX_TIM2_Init+0xa4>)
 800344a:	2200      	movs	r2, #0
 800344c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <MX_TIM2_Init+0xa4>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <MX_TIM2_Init+0xa4>)
 8003456:	f04f 32ff 	mov.w	r2, #4294967295
 800345a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <MX_TIM2_Init+0xa4>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003462:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <MX_TIM2_Init+0xa4>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003468:	2301      	movs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800347c:	2300      	movs	r3, #0
 800347e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003480:	2301      	movs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003484:	2300      	movs	r3, #0
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	4619      	mov	r1, r3
 8003492:	480d      	ldr	r0, [pc, #52]	; (80034c8 <MX_TIM2_Init+0xa4>)
 8003494:	f002 f93a 	bl	800570c <HAL_TIM_Encoder_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800349e:	f000 fcd5 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4806      	ldr	r0, [pc, #24]	; (80034c8 <MX_TIM2_Init+0xa4>)
 80034b0:	f002 fec6 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80034ba:	f000 fcc7 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034be:	bf00      	nop
 80034c0:	3730      	adds	r7, #48	; 0x30
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000328 	.word	0x20000328

080034cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08c      	sub	sp, #48	; 0x30
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f005 f91e 	bl	800871c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <MX_TIM3_Init+0xa0>)
 80034ea:	4a21      	ldr	r2, [pc, #132]	; (8003570 <MX_TIM3_Init+0xa4>)
 80034ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <MX_TIM3_Init+0xa0>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <MX_TIM3_Init+0xa0>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <MX_TIM3_Init+0xa0>)
 80034fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003500:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <MX_TIM3_Init+0xa0>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <MX_TIM3_Init+0xa0>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800350e:	2303      	movs	r3, #3
 8003510:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003516:	2301      	movs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003526:	2301      	movs	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800352a:	2300      	movs	r3, #0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003532:	f107 030c 	add.w	r3, r7, #12
 8003536:	4619      	mov	r1, r3
 8003538:	480c      	ldr	r0, [pc, #48]	; (800356c <MX_TIM3_Init+0xa0>)
 800353a:	f002 f8e7 	bl	800570c <HAL_TIM_Encoder_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003544:	f000 fc82 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	; (800356c <MX_TIM3_Init+0xa0>)
 8003556:	f002 fe73 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003560:	f000 fc74 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003564:	bf00      	nop
 8003566:	3730      	adds	r7, #48	; 0x30
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000370 	.word	0x20000370
 8003570:	40000400 	.word	0x40000400

08003574 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357a:	f107 0320 	add.w	r3, r7, #32
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003584:	1d3b      	adds	r3, r7, #4
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	615a      	str	r2, [r3, #20]
 8003594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <MX_TIM4_Init+0xec>)
 8003598:	4a32      	ldr	r2, [pc, #200]	; (8003664 <MX_TIM4_Init+0xf0>)
 800359a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 800359c:	4b30      	ldr	r3, [pc, #192]	; (8003660 <MX_TIM4_Init+0xec>)
 800359e:	2206      	movs	r2, #6
 80035a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <MX_TIM4_Init+0xec>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <MX_TIM4_Init+0xec>)
 80035aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b0:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <MX_TIM4_Init+0xec>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <MX_TIM4_Init+0xec>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80035bc:	4828      	ldr	r0, [pc, #160]	; (8003660 <MX_TIM4_Init+0xec>)
 80035be:	f001 ff8d 	bl	80054dc <HAL_TIM_PWM_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80035c8:	f000 fc40 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035d4:	f107 0320 	add.w	r3, r7, #32
 80035d8:	4619      	mov	r1, r3
 80035da:	4821      	ldr	r0, [pc, #132]	; (8003660 <MX_TIM4_Init+0xec>)
 80035dc:	f002 fe30 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80035e6:	f000 fc31 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ea:	2360      	movs	r3, #96	; 0x60
 80035ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	2200      	movs	r2, #0
 80035fe:	4619      	mov	r1, r3
 8003600:	4817      	ldr	r0, [pc, #92]	; (8003660 <MX_TIM4_Init+0xec>)
 8003602:	f002 faa7 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800360c:	f000 fc1e 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2204      	movs	r2, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4812      	ldr	r0, [pc, #72]	; (8003660 <MX_TIM4_Init+0xec>)
 8003618:	f002 fa9c 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003622:	f000 fc13 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2208      	movs	r2, #8
 800362a:	4619      	mov	r1, r3
 800362c:	480c      	ldr	r0, [pc, #48]	; (8003660 <MX_TIM4_Init+0xec>)
 800362e:	f002 fa91 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8003638:	f000 fc08 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	220c      	movs	r2, #12
 8003640:	4619      	mov	r1, r3
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <MX_TIM4_Init+0xec>)
 8003644:	f002 fa86 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800364e:	f000 fbfd 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003652:	4803      	ldr	r0, [pc, #12]	; (8003660 <MX_TIM4_Init+0xec>)
 8003654:	f000 fd8c 	bl	8004170 <HAL_TIM_MspPostInit>

}
 8003658:	bf00      	nop
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	200003b8 	.word	0x200003b8
 8003664:	40000800 	.word	0x40000800

08003668 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f005 f850 	bl	800871c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <MX_TIM5_Init+0xa0>)
 8003686:	4a21      	ldr	r2, [pc, #132]	; (800370c <MX_TIM5_Init+0xa4>)
 8003688:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <MX_TIM5_Init+0xa0>)
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <MX_TIM5_Init+0xa0>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <MX_TIM5_Init+0xa0>)
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <MX_TIM5_Init+0xa0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <MX_TIM5_Init+0xa0>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036aa:	2303      	movs	r3, #3
 80036ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036c2:	2301      	movs	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	; (8003708 <MX_TIM5_Init+0xa0>)
 80036d6:	f002 f819 	bl	800570c <HAL_TIM_Encoder_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80036e0:	f000 fbb4 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_TIM5_Init+0xa0>)
 80036f2:	f002 fda5 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80036fc:	f000 fba6 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	3730      	adds	r7, #48	; 0x30
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000400 	.word	0x20000400
 800370c:	40000c00 	.word	0x40000c00

08003710 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b092      	sub	sp, #72	; 0x48
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003716:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	60da      	str	r2, [r3, #12]
 800372e:	611a      	str	r2, [r3, #16]
 8003730:	615a      	str	r2, [r3, #20]
 8003732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	2220      	movs	r2, #32
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f004 ffee 	bl	800871c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <MX_TIM8_Init+0x118>)
 8003742:	4a3a      	ldr	r2, [pc, #232]	; (800382c <MX_TIM8_Init+0x11c>)
 8003744:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <MX_TIM8_Init+0x118>)
 8003748:	2206      	movs	r2, #6
 800374a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <MX_TIM8_Init+0x118>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8003752:	4b35      	ldr	r3, [pc, #212]	; (8003828 <MX_TIM8_Init+0x118>)
 8003754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003758:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800375a:	4b33      	ldr	r3, [pc, #204]	; (8003828 <MX_TIM8_Init+0x118>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <MX_TIM8_Init+0x118>)
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <MX_TIM8_Init+0x118>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800376c:	482e      	ldr	r0, [pc, #184]	; (8003828 <MX_TIM8_Init+0x118>)
 800376e:	f001 feb5 	bl	80054dc <HAL_TIM_PWM_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003778:	f000 fb68 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800377c:	2300      	movs	r3, #0
 800377e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003780:	2300      	movs	r3, #0
 8003782:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003788:	4619      	mov	r1, r3
 800378a:	4827      	ldr	r0, [pc, #156]	; (8003828 <MX_TIM8_Init+0x118>)
 800378c:	f002 fd58 	bl	8006240 <HAL_TIMEx_MasterConfigSynchronization>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003796:	f000 fb59 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800379a:	2360      	movs	r3, #96	; 0x60
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037a2:	2300      	movs	r3, #0
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037a6:	2300      	movs	r3, #0
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ba:	2208      	movs	r2, #8
 80037bc:	4619      	mov	r1, r3
 80037be:	481a      	ldr	r0, [pc, #104]	; (8003828 <MX_TIM8_Init+0x118>)
 80037c0:	f002 f9c8 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80037ca:	f000 fb3f 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80037ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d2:	220c      	movs	r2, #12
 80037d4:	4619      	mov	r1, r3
 80037d6:	4814      	ldr	r0, [pc, #80]	; (8003828 <MX_TIM8_Init+0x118>)
 80037d8:	f002 f9bc 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80037e2:	f000 fb33 	bl	8003e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4807      	ldr	r0, [pc, #28]	; (8003828 <MX_TIM8_Init+0x118>)
 800380a:	f002 fd95 	bl	8006338 <HAL_TIMEx_ConfigBreakDeadTime>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003814:	f000 fb1a 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003818:	4803      	ldr	r0, [pc, #12]	; (8003828 <MX_TIM8_Init+0x118>)
 800381a:	f000 fca9 	bl	8004170 <HAL_TIM_MspPostInit>

}
 800381e:	bf00      	nop
 8003820:	3748      	adds	r7, #72	; 0x48
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000448 	.word	0x20000448
 800382c:	40010400 	.word	0x40010400

08003830 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]
 8003846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <MX_TIM9_Init+0x98>)
 800384a:	4a20      	ldr	r2, [pc, #128]	; (80038cc <MX_TIM9_Init+0x9c>)
 800384c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <MX_TIM9_Init+0x98>)
 8003850:	2206      	movs	r2, #6
 8003852:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <MX_TIM9_Init+0x98>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <MX_TIM9_Init+0x98>)
 800385c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003860:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <MX_TIM9_Init+0x98>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <MX_TIM9_Init+0x98>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800386e:	4816      	ldr	r0, [pc, #88]	; (80038c8 <MX_TIM9_Init+0x98>)
 8003870:	f001 fe34 	bl	80054dc <HAL_TIM_PWM_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800387a:	f000 fae7 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800387e:	2360      	movs	r3, #96	; 0x60
 8003880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	2200      	movs	r2, #0
 8003892:	4619      	mov	r1, r3
 8003894:	480c      	ldr	r0, [pc, #48]	; (80038c8 <MX_TIM9_Init+0x98>)
 8003896:	f002 f95d 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80038a0:	f000 fad4 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	2204      	movs	r2, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4807      	ldr	r0, [pc, #28]	; (80038c8 <MX_TIM9_Init+0x98>)
 80038ac:	f002 f952 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80038b6:	f000 fac9 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80038ba:	4803      	ldr	r0, [pc, #12]	; (80038c8 <MX_TIM9_Init+0x98>)
 80038bc:	f000 fc58 	bl	8004170 <HAL_TIM_MspPostInit>

}
 80038c0:	bf00      	nop
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000490 	.word	0x20000490
 80038cc:	40014000 	.word	0x40014000

080038d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <MX_USART2_UART_Init+0x50>)
 80038d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038f6:	220c      	movs	r2, #12
 80038f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <MX_USART2_UART_Init+0x4c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <MX_USART2_UART_Init+0x4c>)
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003906:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_USART2_UART_Init+0x4c>)
 8003908:	f002 fd7c 	bl	8006404 <HAL_UART_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003912:	f000 fa9b 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200004d8 	.word	0x200004d8
 8003920:	40004400 	.word	0x40004400

08003924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392a:	f107 0314 	add.w	r3, r7, #20
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <MX_GPIO_Init+0xc0>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <MX_GPIO_Init+0xc0>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a21      	ldr	r2, [pc, #132]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <MX_GPIO_Init+0xc0>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <MX_GPIO_Init+0xc0>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_GPIO_Init+0xc0>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 80039aa:	2330      	movs	r3, #48	; 0x30
 80039ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4619      	mov	r1, r3
 80039bc:	480a      	ldr	r0, [pc, #40]	; (80039e8 <MX_GPIO_Init+0xc4>)
 80039be:	f000 ff41 	bl	8004844 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 80039c2:	23c0      	movs	r3, #192	; 0xc0
 80039c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_GPIO_Init+0xc8>)
 80039d6:	f000 ff35 	bl	8004844 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020800 	.word	0x40020800

080039f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(FlagStart.startProgram == 1){
 80039f8:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <StartDefaultTask+0xbc>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d150      	bne.n	8003aa2 <StartDefaultTask+0xb2>
		if(FlagStart.startFK == 1){
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <StartDefaultTask+0xbc>)
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d116      	bne.n	8003a36 <StartDefaultTask+0x46>
			calculate_FK(&FK, InputFK.inputTheta1, InputFK.inputTheta2, InputFK.inputTheta3, InputFK.inputTheta4);
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <StartDefaultTask+0xc0>)
 8003a0a:	edd3 7a00 	vldr	s15, [r3]
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <StartDefaultTask+0xc0>)
 8003a10:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <StartDefaultTask+0xc0>)
 8003a16:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a1a:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <StartDefaultTask+0xc0>)
 8003a1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8003a20:	eef0 1a46 	vmov.f32	s3, s12
 8003a24:	eeb0 1a66 	vmov.f32	s2, s13
 8003a28:	eef0 0a47 	vmov.f32	s1, s14
 8003a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a30:	4820      	ldr	r0, [pc, #128]	; (8003ab4 <StartDefaultTask+0xc4>)
 8003a32:	f7fe f839 	bl	8001aa8 <calculate_FK>
		}
		if(FlagStart.startIK_BN1 == 1){
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <StartDefaultTask+0xbc>)
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d116      	bne.n	8003a6c <StartDefaultTask+0x7c>
			calculate_IK_BN1(&IK, InputIK.inputPx, InputIK.inputPy, InputIK.inputPz, InputIK.inputTheta);
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a46:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a52:	ed93 6a03 	vldr	s12, [r3, #12]
 8003a56:	eef0 1a46 	vmov.f32	s3, s12
 8003a5a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a5e:	eef0 0a47 	vmov.f32	s1, s14
 8003a62:	eeb0 0a67 	vmov.f32	s0, s15
 8003a66:	4815      	ldr	r0, [pc, #84]	; (8003abc <StartDefaultTask+0xcc>)
 8003a68:	f7fe fa36 	bl	8001ed8 <calculate_IK_BN1>
		}
		if(FlagStart.startIK_BN2 == 1){
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <StartDefaultTask+0xbc>)
 8003a6e:	78db      	ldrb	r3, [r3, #3]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d116      	bne.n	8003aa2 <StartDefaultTask+0xb2>
			calculate_IK_BN2(&IK, InputIK.inputPx, InputIK.inputPy, InputIK.inputPz, InputIK.inputTheta);
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a82:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <StartDefaultTask+0xc8>)
 8003a88:	ed93 6a03 	vldr	s12, [r3, #12]
 8003a8c:	eef0 1a46 	vmov.f32	s3, s12
 8003a90:	eeb0 1a66 	vmov.f32	s2, s13
 8003a94:	eef0 0a47 	vmov.f32	s1, s14
 8003a98:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9c:	4807      	ldr	r0, [pc, #28]	; (8003abc <StartDefaultTask+0xcc>)
 8003a9e:	f7fe fea7 	bl	80027f0 <calculate_IK_BN2>
		}
	}
    osDelay(10);
 8003aa2:	200a      	movs	r0, #10
 8003aa4:	f003 fc37 	bl	8007316 <osDelay>
	if(FlagStart.startProgram == 1){
 8003aa8:	e7a6      	b.n	80039f8 <StartDefaultTask+0x8>
 8003aaa:	bf00      	nop
 8003aac:	2000052c 	.word	0x2000052c
 8003ab0:	20000950 	.word	0x20000950
 8003ab4:	20000960 	.word	0x20000960
 8003ab8:	200009fc 	.word	0x200009fc
 8003abc:	2000099c 	.word	0x2000099c

08003ac0 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  for(;;)
  {
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	489e      	ldr	r0, [pc, #632]	; (8003d44 <StartTaskSetHome+0x284>)
 8003acc:	f001 f856 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b25a      	sxtb	r2, r3
 8003ad4:	4b9c      	ldr	r3, [pc, #624]	; (8003d48 <StartTaskSetHome+0x288>)
 8003ad6:	701a      	strb	r2, [r3, #0]
	sensor.sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8003ad8:	2180      	movs	r1, #128	; 0x80
 8003ada:	489a      	ldr	r0, [pc, #616]	; (8003d44 <StartTaskSetHome+0x284>)
 8003adc:	f001 f84e 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b25a      	sxtb	r2, r3
 8003ae4:	4b98      	ldr	r3, [pc, #608]	; (8003d48 <StartTaskSetHome+0x288>)
 8003ae6:	705a      	strb	r2, [r3, #1]
	sensor.sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4898      	ldr	r0, [pc, #608]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003aec:	f001 f846 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	b25a      	sxtb	r2, r3
 8003af4:	4b94      	ldr	r3, [pc, #592]	; (8003d48 <StartTaskSetHome+0x288>)
 8003af6:	709a      	strb	r2, [r3, #2]
	sensor.sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8003af8:	2120      	movs	r1, #32
 8003afa:	4894      	ldr	r0, [pc, #592]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003afc:	f001 f83e 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003b00:	4603      	mov	r3, r0
 8003b02:	b25a      	sxtb	r2, r3
 8003b04:	4b90      	ldr	r3, [pc, #576]	; (8003d48 <StartTaskSetHome+0x288>)
 8003b06:	70da      	strb	r2, [r3, #3]

	if(FlagStart.startProgram == 0){
 8003b08:	4b91      	ldr	r3, [pc, #580]	; (8003d50 <StartTaskSetHome+0x290>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8115 	bne.w	8003d3c <StartTaskSetHome+0x27c>
		if(sethomeJ.sethomeJ1 == 0){
 8003b12:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <StartTaskSetHome+0x294>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d167      	bne.n	8003bea <StartTaskSetHome+0x12a>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8003b1a:	2140      	movs	r1, #64	; 0x40
 8003b1c:	4889      	ldr	r0, [pc, #548]	; (8003d44 <StartTaskSetHome+0x284>)
 8003b1e:	f001 f82d 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d118      	bne.n	8003b5a <StartTaskSetHome+0x9a>
				osDelay(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f003 fbf4 	bl	8007316 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8003b2e:	2140      	movs	r1, #64	; 0x40
 8003b30:	4884      	ldr	r0, [pc, #528]	; (8003d44 <StartTaskSetHome+0x284>)
 8003b32:	f001 f823 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d156      	bne.n	8003bea <StartTaskSetHome+0x12a>
					ResetCount(&ENC_LINK1, 1);
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4886      	ldr	r0, [pc, #536]	; (8003d58 <StartTaskSetHome+0x298>)
 8003b40:	f7fd fab6 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ1 = 0;
 8003b44:	4b85      	ldr	r3, [pc, #532]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	801a      	strh	r2, [r3, #0]
					sethomeJ.sethomeJ1 = 1;
 8003b4a:	4b82      	ldr	r3, [pc, #520]	; (8003d54 <StartTaskSetHome+0x294>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
					Angle.AngleLink1 = 0;
 8003b50:	4b83      	ldr	r3, [pc, #524]	; (8003d60 <StartTaskSetHome+0x2a0>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e047      	b.n	8003bea <StartTaskSetHome+0x12a>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
 8003b5a:	4b80      	ldr	r3, [pc, #512]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003b5c:	f64f 6270 	movw	r2, #65136	; 0xfe70
 8003b60:	801a      	strh	r2, [r3, #0]
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ.SpeedSetHomeJ1 > 0){
 8003b62:	2102      	movs	r1, #2
 8003b64:	487c      	ldr	r0, [pc, #496]	; (8003d58 <StartTaskSetHome+0x298>)
 8003b66:	f7fd fa3d 	bl	8000fe4 <CountRead>
 8003b6a:	ec51 0b10 	vmov	r0, r1, d0
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <StartTaskSetHome+0x2a4>)
 8003b74:	f7fc ff78 	bl	8000a68 <__aeabi_dcmpgt>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <StartTaskSetHome+0xdc>
 8003b7e:	4b77      	ldr	r3, [pc, #476]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dd09      	ble.n	8003b9c <StartTaskSetHome+0xdc>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8003b88:	4b74      	ldr	r3, [pc, #464]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	425b      	negs	r3, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	4b71      	ldr	r3, [pc, #452]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	e01b      	b.n	8003bd4 <StartTaskSetHome+0x114>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ.SpeedSetHomeJ1 < 0) {
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	486e      	ldr	r0, [pc, #440]	; (8003d58 <StartTaskSetHome+0x298>)
 8003ba0:	f7fd fa20 	bl	8000fe4 <CountRead>
 8003ba4:	ec51 0b10 	vmov	r0, r1, d0
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	4b6e      	ldr	r3, [pc, #440]	; (8003d68 <StartTaskSetHome+0x2a8>)
 8003bae:	f7fc ff3d 	bl	8000a2c <__aeabi_dcmplt>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <StartTaskSetHome+0x114>
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da08      	bge.n	8003bd4 <StartTaskSetHome+0x114>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8003bc2:	4b66      	ldr	r3, [pc, #408]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	425b      	negs	r3, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b21a      	sxth	r2, r3
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003bd2:	801a      	strh	r2, [r3, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ.SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8003bd4:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	230c      	movs	r3, #12
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2308      	movs	r3, #8
 8003be2:	4962      	ldr	r1, [pc, #392]	; (8003d6c <StartTaskSetHome+0x2ac>)
 8003be4:	4862      	ldr	r0, [pc, #392]	; (8003d70 <StartTaskSetHome+0x2b0>)
 8003be6:	f7fd fa7a 	bl	80010de <Drive>
			}
		}
		if(sethomeJ.sethomeJ2 == 0){
 8003bea:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <StartTaskSetHome+0x294>)
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d12d      	bne.n	8003c4e <StartTaskSetHome+0x18e>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	4853      	ldr	r0, [pc, #332]	; (8003d44 <StartTaskSetHome+0x284>)
 8003bf6:	f000 ffc1 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d117      	bne.n	8003c30 <StartTaskSetHome+0x170>
				osDelay(1);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f003 fb88 	bl	8007316 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	484e      	ldr	r0, [pc, #312]	; (8003d44 <StartTaskSetHome+0x284>)
 8003c0a:	f000 ffb7 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d11c      	bne.n	8003c4e <StartTaskSetHome+0x18e>
					ResetCount(&ENC_LINK2, 1);
 8003c14:	2101      	movs	r1, #1
 8003c16:	4857      	ldr	r0, [pc, #348]	; (8003d74 <StartTaskSetHome+0x2b4>)
 8003c18:	f7fd fa4a 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ2 = 0;
 8003c1c:	4b4f      	ldr	r3, [pc, #316]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	805a      	strh	r2, [r3, #2]
					sethomeJ.sethomeJ2 = 1;
 8003c22:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <StartTaskSetHome+0x294>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	705a      	strb	r2, [r3, #1]
					Angle.AngleLink2 = 187;
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <StartTaskSetHome+0x2a0>)
 8003c2a:	4a53      	ldr	r2, [pc, #332]	; (8003d78 <StartTaskSetHome+0x2b8>)
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e00e      	b.n	8003c4e <StartTaskSetHome+0x18e>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
 8003c30:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003c36:	805a      	strh	r2, [r3, #2]
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ.SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8003c38:	4b48      	ldr	r3, [pc, #288]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	230c      	movs	r3, #12
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2308      	movs	r3, #8
 8003c46:	494d      	ldr	r1, [pc, #308]	; (8003d7c <StartTaskSetHome+0x2bc>)
 8003c48:	484d      	ldr	r0, [pc, #308]	; (8003d80 <StartTaskSetHome+0x2c0>)
 8003c4a:	f7fd fa48 	bl	80010de <Drive>
			}
		}
		if(sethomeJ.sethomeJ3 == 0){
 8003c4e:	4b41      	ldr	r3, [pc, #260]	; (8003d54 <StartTaskSetHome+0x294>)
 8003c50:	789b      	ldrb	r3, [r3, #2]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12d      	bne.n	8003cb2 <StartTaskSetHome+0x1f2>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8003c56:	2110      	movs	r1, #16
 8003c58:	483c      	ldr	r0, [pc, #240]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003c5a:	f000 ff8f 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d117      	bne.n	8003c94 <StartTaskSetHome+0x1d4>
				osDelay(1);
 8003c64:	2001      	movs	r0, #1
 8003c66:	f003 fb56 	bl	8007316 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8003c6a:	2110      	movs	r1, #16
 8003c6c:	4837      	ldr	r0, [pc, #220]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003c6e:	f000 ff85 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11c      	bne.n	8003cb2 <StartTaskSetHome+0x1f2>
					ResetCount(&ENC_LINK3, 1);
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4842      	ldr	r0, [pc, #264]	; (8003d84 <StartTaskSetHome+0x2c4>)
 8003c7c:	f7fd fa18 	bl	80010b0 <ResetCount>
					sethomeJ.sethomeJ3 = 1;
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <StartTaskSetHome+0x294>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	709a      	strb	r2, [r3, #2]
					SpeedSetHomeJ.SpeedSetHomeJ3 = 0;
 8003c86:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	809a      	strh	r2, [r3, #4]
					Angle.AngleLink3 = -135;
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <StartTaskSetHome+0x2a0>)
 8003c8e:	4a3e      	ldr	r2, [pc, #248]	; (8003d88 <StartTaskSetHome+0x2c8>)
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	e00e      	b.n	8003cb2 <StartTaskSetHome+0x1f2>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c96:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8003c9a:	809a      	strh	r2, [r3, #4]
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ.SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003c9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <StartTaskSetHome+0x2bc>)
 8003cac:	4837      	ldr	r0, [pc, #220]	; (8003d8c <StartTaskSetHome+0x2cc>)
 8003cae:	f7fd fa16 	bl	80010de <Drive>
			}
		}
		if(sethomeJ.sethomeJ4 == 0){
 8003cb2:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <StartTaskSetHome+0x294>)
 8003cb4:	78db      	ldrb	r3, [r3, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d12d      	bne.n	8003d16 <StartTaskSetHome+0x256>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8003cba:	2120      	movs	r1, #32
 8003cbc:	4823      	ldr	r0, [pc, #140]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003cbe:	f000 ff5d 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d117      	bne.n	8003cf8 <StartTaskSetHome+0x238>
				osDelay(1);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f003 fb24 	bl	8007316 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8003cce:	2120      	movs	r1, #32
 8003cd0:	481e      	ldr	r0, [pc, #120]	; (8003d4c <StartTaskSetHome+0x28c>)
 8003cd2:	f000 ff53 	bl	8004b7c <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d11c      	bne.n	8003d16 <StartTaskSetHome+0x256>
					ResetCount(&ENC_LINK4, 1);
 8003cdc:	2101      	movs	r1, #1
 8003cde:	482c      	ldr	r0, [pc, #176]	; (8003d90 <StartTaskSetHome+0x2d0>)
 8003ce0:	f7fd f9e6 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ4 = 0;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	80da      	strh	r2, [r3, #6]
					sethomeJ.sethomeJ4 = 1;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <StartTaskSetHome+0x294>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	70da      	strb	r2, [r3, #3]
					Angle.AngleLink4 = 90;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <StartTaskSetHome+0x2a0>)
 8003cf2:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <StartTaskSetHome+0x2d4>)
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	e00e      	b.n	8003d16 <StartTaskSetHome+0x256>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfe:	80da      	strh	r2, [r3, #6]
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ.SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8003d00:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <StartTaskSetHome+0x29c>)
 8003d02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d06:	461a      	mov	r2, r3
 8003d08:	2304      	movs	r3, #4
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4922      	ldr	r1, [pc, #136]	; (8003d98 <StartTaskSetHome+0x2d8>)
 8003d10:	4822      	ldr	r0, [pc, #136]	; (8003d9c <StartTaskSetHome+0x2dc>)
 8003d12:	f7fd f9e4 	bl	80010de <Drive>
			}
		}
		if(sethomeJ.sethomeJ1 == 1 && sethomeJ.sethomeJ2 == 1 && sethomeJ.sethomeJ3 == 1 && sethomeJ.sethomeJ4 == 1){
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <StartTaskSetHome+0x294>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <StartTaskSetHome+0x27c>
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <StartTaskSetHome+0x294>)
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10a      	bne.n	8003d3c <StartTaskSetHome+0x27c>
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <StartTaskSetHome+0x294>)
 8003d28:	789b      	ldrb	r3, [r3, #2]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d106      	bne.n	8003d3c <StartTaskSetHome+0x27c>
 8003d2e:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <StartTaskSetHome+0x294>)
 8003d30:	78db      	ldrb	r3, [r3, #3]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d102      	bne.n	8003d3c <StartTaskSetHome+0x27c>
			FlagStart.startProgram = 1;
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <StartTaskSetHome+0x290>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
		}
	}
    osDelay(10);
 8003d3c:	200a      	movs	r0, #10
 8003d3e:	f003 faea 	bl	8007316 <osDelay>
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8003d42:	e6c1      	b.n	8003ac8 <StartTaskSetHome+0x8>
 8003d44:	40020800 	.word	0x40020800
 8003d48:	2000053c 	.word	0x2000053c
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	2000052c 	.word	0x2000052c
 8003d54:	20000538 	.word	0x20000538
 8003d58:	20000550 	.word	0x20000550
 8003d5c:	20000530 	.word	0x20000530
 8003d60:	20000540 	.word	0x20000540
 8003d64:	40568000 	.word	0x40568000
 8003d68:	c0568000 	.word	0xc0568000
 8003d6c:	20000448 	.word	0x20000448
 8003d70:	20000598 	.word	0x20000598
 8003d74:	20000650 	.word	0x20000650
 8003d78:	433b0000 	.word	0x433b0000
 8003d7c:	200003b8 	.word	0x200003b8
 8003d80:	20000698 	.word	0x20000698
 8003d84:	20000750 	.word	0x20000750
 8003d88:	c3070000 	.word	0xc3070000
 8003d8c:	20000798 	.word	0x20000798
 8003d90:	20000850 	.word	0x20000850
 8003d94:	42b40000 	.word	0x42b40000
 8003d98:	20000490 	.word	0x20000490
 8003d9c:	20000898 	.word	0x20000898

08003da0 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8003da8:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <StartTaskPID+0x98>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <StartTaskPID+0x14>
 8003db0:	f7fd fc26 	bl	8001600 <PID_LINK1_Pos>
	  if(sethomeJ.sethomeJ2 == 1)	PID_LINK2_Pos();
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <StartTaskPID+0x98>)
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <StartTaskPID+0x20>
 8003dbc:	f7fd fcd4 	bl	8001768 <PID_LINK2_Pos>
	  if(sethomeJ.sethomeJ3 == 1)	PID_LINK3_Pos();
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <StartTaskPID+0x98>)
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <StartTaskPID+0x2c>
 8003dc8:	f7fd fd88 	bl	80018dc <PID_LINK3_Pos>
	  if(sethomeJ.sethomeJ4 == 1)	PID_LINK4_Pos();
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <StartTaskPID+0x98>)
 8003dce:	78db      	ldrb	r3, [r3, #3]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <StartTaskPID+0x38>
 8003dd4:	f7fd fe3c 	bl	8001a50 <PID_LINK4_Pos>

	  if(FlagStart.startFK == 1){
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <StartTaskPID+0x9c>)
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10f      	bne.n	8003e00 <StartTaskPID+0x60>
		  Angle.AngleLink1 = InputFK.inputTheta1;
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <StartTaskPID+0xa0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <StartTaskPID+0xa4>)
 8003de6:	6013      	str	r3, [r2, #0]
		  Angle.AngleLink2 = InputFK.inputTheta2;
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <StartTaskPID+0xa0>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <StartTaskPID+0xa4>)
 8003dee:	6053      	str	r3, [r2, #4]
		  Angle.AngleLink3 = InputFK.inputTheta3;
 8003df0:	4b13      	ldr	r3, [pc, #76]	; (8003e40 <StartTaskPID+0xa0>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <StartTaskPID+0xa4>)
 8003df6:	6093      	str	r3, [r2, #8]
		  Angle.AngleLink4 = InputFK.inputTheta4;
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <StartTaskPID+0xa0>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <StartTaskPID+0xa4>)
 8003dfe:	60d3      	str	r3, [r2, #12]
	  }
	  if(FlagStart.startIK_BN1 == 1 || FlagStart.startIK_BN2 == 1){
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <StartTaskPID+0x9c>)
 8003e02:	789b      	ldrb	r3, [r3, #2]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d003      	beq.n	8003e10 <StartTaskPID+0x70>
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <StartTaskPID+0x9c>)
 8003e0a:	78db      	ldrb	r3, [r3, #3]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10f      	bne.n	8003e30 <StartTaskPID+0x90>
		  Angle.AngleLink1 = IK.Theta1_IK;
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <StartTaskPID+0xa8>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <StartTaskPID+0xa4>)
 8003e16:	6013      	str	r3, [r2, #0]
		  Angle.AngleLink2 = IK.Theta2_IK;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <StartTaskPID+0xa8>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <StartTaskPID+0xa4>)
 8003e1e:	6053      	str	r3, [r2, #4]
		  Angle.AngleLink3 = IK.Theta3_IK;
 8003e20:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <StartTaskPID+0xa8>)
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <StartTaskPID+0xa4>)
 8003e26:	6093      	str	r3, [r2, #8]
		  Angle.AngleLink4 = IK.Theta4_IK;
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <StartTaskPID+0xa8>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <StartTaskPID+0xa4>)
 8003e2e:	60d3      	str	r3, [r2, #12]
	  }
	  osDelay(10);
 8003e30:	200a      	movs	r0, #10
 8003e32:	f003 fa70 	bl	8007316 <osDelay>
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8003e36:	e7b7      	b.n	8003da8 <StartTaskPID+0x8>
 8003e38:	20000538 	.word	0x20000538
 8003e3c:	2000052c 	.word	0x2000052c
 8003e40:	20000950 	.word	0x20000950
 8003e44:	20000540 	.word	0x20000540
 8003e48:	2000099c 	.word	0x2000099c

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <Error_Handler+0x8>
	...

08003e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_MspInit+0x54>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <HAL_MspInit+0x54>)
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_MspInit+0x54>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_MspInit+0x54>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <HAL_MspInit+0x54>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_MspInit+0x54>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	210f      	movs	r1, #15
 8003e9a:	f06f 0001 	mvn.w	r0, #1
 8003e9e:	f000 fc08 	bl	80046b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b090      	sub	sp, #64	; 0x40
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
 8003ec6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a78      	ldr	r2, [pc, #480]	; (80040b0 <HAL_TIM_Encoder_MspInit+0x200>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d135      	bne.n	8003f3e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed6:	4b77      	ldr	r3, [pc, #476]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	4a76      	ldr	r2, [pc, #472]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee2:	4b74      	ldr	r3, [pc, #464]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	4b70      	ldr	r3, [pc, #448]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a6f      	ldr	r2, [pc, #444]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b6d      	ldr	r3, [pc, #436]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8003f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f24:	4619      	mov	r1, r3
 8003f26:	4864      	ldr	r0, [pc, #400]	; (80040b8 <HAL_TIM_Encoder_MspInit+0x208>)
 8003f28:	f000 fc8c 	bl	8004844 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2105      	movs	r1, #5
 8003f30:	2018      	movs	r0, #24
 8003f32:	f000 fbbe 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003f36:	2018      	movs	r0, #24
 8003f38:	f000 fbd7 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003f3c:	e0b3      	b.n	80040a6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d14b      	bne.n	8003fe0 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f48:	2300      	movs	r3, #0
 8003f4a:	623b      	str	r3, [r7, #32]
 8003f4c:	4b59      	ldr	r3, [pc, #356]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6413      	str	r3, [r2, #64]	; 0x40
 8003f58:	4b56      	ldr	r3, [pc, #344]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	4b52      	ldr	r3, [pc, #328]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	4a51      	ldr	r2, [pc, #324]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6313      	str	r3, [r2, #48]	; 0x30
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	4b4b      	ldr	r3, [pc, #300]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4a4a      	ldr	r2, [pc, #296]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f90:	4b48      	ldr	r3, [pc, #288]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8003f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	483f      	ldr	r0, [pc, #252]	; (80040b8 <HAL_TIM_Encoder_MspInit+0x208>)
 8003fba:	f000 fc43 	bl	8004844 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 8003fbe:	2308      	movs	r3, #8
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8003fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4838      	ldr	r0, [pc, #224]	; (80040bc <HAL_TIM_Encoder_MspInit+0x20c>)
 8003fda:	f000 fc33 	bl	8004844 <HAL_GPIO_Init>
}
 8003fde:	e062      	b.n	80040a6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a36      	ldr	r2, [pc, #216]	; (80040c0 <HAL_TIM_Encoder_MspInit+0x210>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d12c      	bne.n	8004044 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	4b2a      	ldr	r3, [pc, #168]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8004022:	23c0      	movs	r3, #192	; 0xc0
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004032:	2302      	movs	r3, #2
 8004034:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800403a:	4619      	mov	r1, r3
 800403c:	481e      	ldr	r0, [pc, #120]	; (80040b8 <HAL_TIM_Encoder_MspInit+0x208>)
 800403e:	f000 fc01 	bl	8004844 <HAL_GPIO_Init>
}
 8004042:	e030      	b.n	80040a6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x214>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d12b      	bne.n	80040a6 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a10      	ldr	r2, [pc, #64]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_TIM_Encoder_MspInit+0x204>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 8004086:	2303      	movs	r3, #3
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004092:	2300      	movs	r3, #0
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004096:	2302      	movs	r3, #2
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800409a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800409e:	4619      	mov	r1, r3
 80040a0:	4805      	ldr	r0, [pc, #20]	; (80040b8 <HAL_TIM_Encoder_MspInit+0x208>)
 80040a2:	f000 fbcf 	bl	8004844 <HAL_GPIO_Init>
}
 80040a6:	bf00      	nop
 80040a8:	3740      	adds	r7, #64	; 0x40
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40020000 	.word	0x40020000
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000c00 	.word	0x40000c00

080040c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_TIM_PWM_MspInit+0x98>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a20      	ldr	r2, [pc, #128]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80040f6:	e02e      	b.n	8004156 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM8)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_TIM_PWM_MspInit+0xa0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6453      	str	r3, [r2, #68]	; 0x44
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
}
 800411e:	e01a      	b.n	8004156 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM9)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a11      	ldr	r2, [pc, #68]	; (800416c <HAL_TIM_PWM_MspInit+0xa4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d115      	bne.n	8004156 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6453      	str	r3, [r2, #68]	; 0x44
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_TIM_PWM_MspInit+0x9c>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2105      	movs	r1, #5
 800414a:	2018      	movs	r0, #24
 800414c:	f000 fab1 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004150:	2018      	movs	r0, #24
 8004152:	f000 faca 	bl	80046ea <HAL_NVIC_EnableIRQ>
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40000800 	.word	0x40000800
 8004164:	40023800 	.word	0x40023800
 8004168:	40010400 	.word	0x40010400
 800416c:	40014000 	.word	0x40014000

08004170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a37      	ldr	r2, [pc, #220]	; (800426c <HAL_TIM_MspPostInit+0xfc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d11f      	bne.n	80041d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b33      	ldr	r3, [pc, #204]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 80041ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80041b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041c0:	2302      	movs	r3, #2
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	4619      	mov	r1, r3
 80041ca:	482a      	ldr	r0, [pc, #168]	; (8004274 <HAL_TIM_MspPostInit+0x104>)
 80041cc:	f000 fb3a 	bl	8004844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80041d0:	e047      	b.n	8004262 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a28      	ldr	r2, [pc, #160]	; (8004278 <HAL_TIM_MspPostInit+0x108>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d11f      	bne.n	800421c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6313      	str	r3, [r2, #48]	; 0x30
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 80041f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800420a:	2303      	movs	r3, #3
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	4819      	ldr	r0, [pc, #100]	; (800427c <HAL_TIM_MspPostInit+0x10c>)
 8004216:	f000 fb15 	bl	8004844 <HAL_GPIO_Init>
}
 800421a:	e022      	b.n	8004262 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <HAL_TIM_MspPostInit+0x110>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d11d      	bne.n	8004262 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	4a10      	ldr	r2, [pc, #64]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6313      	str	r3, [r2, #48]	; 0x30
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_TIM_MspPostInit+0x100>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8004242:	230c      	movs	r3, #12
 8004244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	2302      	movs	r3, #2
 8004248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800424e:	2300      	movs	r3, #0
 8004250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8004252:	2303      	movs	r3, #3
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004256:	f107 0314 	add.w	r3, r7, #20
 800425a:	4619      	mov	r1, r3
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <HAL_TIM_MspPostInit+0x114>)
 800425e:	f000 faf1 	bl	8004844 <HAL_GPIO_Init>
}
 8004262:	bf00      	nop
 8004264:	3728      	adds	r7, #40	; 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40000800 	.word	0x40000800
 8004270:	40023800 	.word	0x40023800
 8004274:	40020c00 	.word	0x40020c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40020800 	.word	0x40020800
 8004280:	40014000 	.word	0x40014000
 8004284:	40020000 	.word	0x40020000

08004288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_UART_MspInit+0x94>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d133      	bne.n	8004312 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_UART_MspInit+0x98>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80042e2:	2360      	movs	r3, #96	; 0x60
 80042e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	2302      	movs	r3, #2
 80042e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ee:	2303      	movs	r3, #3
 80042f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042f2:	2307      	movs	r3, #7
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	4619      	mov	r1, r3
 80042fc:	4809      	ldr	r0, [pc, #36]	; (8004324 <HAL_UART_MspInit+0x9c>)
 80042fe:	f000 faa1 	bl	8004844 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2105      	movs	r1, #5
 8004306:	2026      	movs	r0, #38	; 0x26
 8004308:	f000 f9d3 	bl	80046b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800430c:	2026      	movs	r0, #38	; 0x26
 800430e:	f000 f9ec 	bl	80046ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004312:	bf00      	nop
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40004400 	.word	0x40004400
 8004320:	40023800 	.word	0x40023800
 8004324:	40020c00 	.word	0x40020c00

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800432c:	e7fe      	b.n	800432c <NMI_Handler+0x4>

0800432e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004332:	e7fe      	b.n	8004332 <HardFault_Handler+0x4>

08004334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004338:	e7fe      	b.n	8004338 <MemManage_Handler+0x4>

0800433a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433e:	e7fe      	b.n	800433e <BusFault_Handler+0x4>

08004340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <UsageFault_Handler+0x4>

08004346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004358:	f000 f8b0 	bl	80044bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800435c:	f003 fd5e 	bl	8007e1c <xTaskGetSchedulerState>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004366:	f003 ff9f 	bl	80082a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004374:	4803      	ldr	r0, [pc, #12]	; (8004384 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004376:	f001 fafd 	bl	8005974 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800437a:	4803      	ldr	r0, [pc, #12]	; (8004388 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800437c:	f001 fafa 	bl	8005974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	200002e0 	.word	0x200002e0
 8004388:	20000490 	.word	0x20000490

0800438c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004390:	4802      	ldr	r0, [pc, #8]	; (800439c <USART2_IRQHandler+0x10>)
 8004392:	f002 f887 	bl	80064a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200004d8 	.word	0x200004d8

080043a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80043c8:	f7ff ffea 	bl	80043a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f2:	f004 f9a1 	bl	8008738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043f6:	f7fe fe83 	bl	8003100 <main>
  bx  lr    
 80043fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004408:	0800ae80 	.word	0x0800ae80
  ldr r2, =_sbss
 800440c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004410:	2000489c 	.word	0x2000489c

08004414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC_IRQHandler>
	...

08004418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800441c:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_Init+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <HAL_Init+0x40>)
 8004422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <HAL_Init+0x40>)
 800442e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004434:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_Init+0x40>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_Init+0x40>)
 800443a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004440:	2003      	movs	r0, #3
 8004442:	f000 f92b 	bl	800469c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004446:	200f      	movs	r0, #15
 8004448:	f000 f808 	bl	800445c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800444c:	f7ff fd04 	bl	8003e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00

0800445c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_InitTick+0x54>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_InitTick+0x58>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	4619      	mov	r1, r3
 800446e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004472:	fbb3 f3f1 	udiv	r3, r3, r1
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f943 	bl	8004706 <HAL_SYSTICK_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e00e      	b.n	80044a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d80a      	bhi.n	80044a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004490:	2200      	movs	r2, #0
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	f000 f90b 	bl	80046b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800449c:	4a06      	ldr	r2, [pc, #24]	; (80044b8 <HAL_InitTick+0x5c>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000008 	.word	0x20000008
 80044b8:	20000004 	.word	0x20000004

080044bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_IncTick+0x20>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x24>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_IncTick+0x24>)
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000008 	.word	0x20000008
 80044e0:	20000a0c 	.word	0x20000a0c

080044e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return uwTick;
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_GetTick+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000a0c 	.word	0x20000a0c

080044fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <__NVIC_SetPriorityGrouping+0x44>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452e:	4a04      	ldr	r2, [pc, #16]	; (8004540 <__NVIC_SetPriorityGrouping+0x44>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	60d3      	str	r3, [r2, #12]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <__NVIC_GetPriorityGrouping+0x18>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 0307 	and.w	r3, r3, #7
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	db0b      	blt.n	800458a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	f003 021f 	and.w	r2, r3, #31
 8004578:	4907      	ldr	r1, [pc, #28]	; (8004598 <__NVIC_EnableIRQ+0x38>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2001      	movs	r0, #1
 8004582:	fa00 f202 	lsl.w	r2, r0, r2
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	db0a      	blt.n	80045c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	490c      	ldr	r1, [pc, #48]	; (80045e8 <__NVIC_SetPriority+0x4c>)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	440b      	add	r3, r1
 80045c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c4:	e00a      	b.n	80045dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4908      	ldr	r1, [pc, #32]	; (80045ec <__NVIC_SetPriority+0x50>)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	3b04      	subs	r3, #4
 80045d4:	0112      	lsls	r2, r2, #4
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	440b      	add	r3, r1
 80045da:	761a      	strb	r2, [r3, #24]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000e100 	.word	0xe000e100
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f1c3 0307 	rsb	r3, r3, #7
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf28      	it	cs
 800460e:	2304      	movcs	r3, #4
 8004610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3304      	adds	r3, #4
 8004616:	2b06      	cmp	r3, #6
 8004618:	d902      	bls.n	8004620 <NVIC_EncodePriority+0x30>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3b03      	subs	r3, #3
 800461e:	e000      	b.n	8004622 <NVIC_EncodePriority+0x32>
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	401a      	ands	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004638:	f04f 31ff 	mov.w	r1, #4294967295
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	43d9      	mvns	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	4313      	orrs	r3, r2
         );
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d301      	bcc.n	800466e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800466a:	2301      	movs	r3, #1
 800466c:	e00f      	b.n	800468e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <SysTick_Config+0x40>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004676:	210f      	movs	r1, #15
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	f7ff ff8e 	bl	800459c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <SysTick_Config+0x40>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SysTick_Config+0x40>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff29 	bl	80044fc <__NVIC_SetPriorityGrouping>
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c4:	f7ff ff3e 	bl	8004544 <__NVIC_GetPriorityGrouping>
 80046c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff8e 	bl	80045f0 <NVIC_EncodePriority>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5d 	bl	800459c <__NVIC_SetPriority>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff31 	bl	8004560 <__NVIC_EnableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ffa2 	bl	8004658 <SysTick_Config>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800472c:	f7ff feda 	bl	80044e4 <HAL_GetTick>
 8004730:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d008      	beq.n	8004750 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e052      	b.n	80047f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0216 	bic.w	r2, r2, #22
 800475e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <HAL_DMA_Abort+0x62>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0208 	bic.w	r2, r2, #8
 800478e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a0:	e013      	b.n	80047ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a2:	f7ff fe9f 	bl	80044e4 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d90c      	bls.n	80047ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2203      	movs	r2, #3
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e015      	b.n	80047f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e4      	bne.n	80047a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047dc:	223f      	movs	r2, #63	; 0x3f
 80047de:	409a      	lsls	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d004      	beq.n	800481c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2280      	movs	r2, #128	; 0x80
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e00c      	b.n	8004836 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2205      	movs	r2, #5
 8004820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e16b      	b.n	8004b38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	f040 815a 	bne.w	8004b32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b01      	cmp	r3, #1
 8004888:	d005      	beq.n	8004896 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004892:	2b02      	cmp	r3, #2
 8004894:	d130      	bne.n	80048f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048cc:	2201      	movs	r2, #1
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 0201 	and.w	r2, r3, #1
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b03      	cmp	r3, #3
 8004902:	d017      	beq.n	8004934 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d123      	bne.n	8004988 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	220f      	movs	r2, #15
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	4013      	ands	r3, r2
 8004962:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	08da      	lsrs	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3208      	adds	r2, #8
 8004982:	69b9      	ldr	r1, [r7, #24]
 8004984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	2203      	movs	r2, #3
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0203 	and.w	r2, r3, #3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80b4 	beq.w	8004b32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b60      	ldr	r3, [pc, #384]	; (8004b50 <HAL_GPIO_Init+0x30c>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	4a5f      	ldr	r2, [pc, #380]	; (8004b50 <HAL_GPIO_Init+0x30c>)
 80049d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d8:	6453      	str	r3, [r2, #68]	; 0x44
 80049da:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <HAL_GPIO_Init+0x30c>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049e6:	4a5b      	ldr	r2, [pc, #364]	; (8004b54 <HAL_GPIO_Init+0x310>)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	3302      	adds	r3, #2
 80049ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a52      	ldr	r2, [pc, #328]	; (8004b58 <HAL_GPIO_Init+0x314>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02b      	beq.n	8004a6a <HAL_GPIO_Init+0x226>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a51      	ldr	r2, [pc, #324]	; (8004b5c <HAL_GPIO_Init+0x318>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d025      	beq.n	8004a66 <HAL_GPIO_Init+0x222>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a50      	ldr	r2, [pc, #320]	; (8004b60 <HAL_GPIO_Init+0x31c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <HAL_GPIO_Init+0x21e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	; (8004b64 <HAL_GPIO_Init+0x320>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d019      	beq.n	8004a5e <HAL_GPIO_Init+0x21a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <HAL_GPIO_Init+0x324>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_GPIO_Init+0x216>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4d      	ldr	r2, [pc, #308]	; (8004b6c <HAL_GPIO_Init+0x328>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <HAL_GPIO_Init+0x212>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4c      	ldr	r2, [pc, #304]	; (8004b70 <HAL_GPIO_Init+0x32c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_GPIO_Init+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4b      	ldr	r2, [pc, #300]	; (8004b74 <HAL_GPIO_Init+0x330>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_GPIO_Init+0x20a>
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	e00e      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	e00c      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a52:	2306      	movs	r3, #6
 8004a54:	e00a      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a56:	2305      	movs	r3, #5
 8004a58:	e008      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	e006      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e004      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e002      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_GPIO_Init+0x228>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	f002 0203 	and.w	r2, r2, #3
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	4093      	lsls	r3, r2
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a7c:	4935      	ldr	r1, [pc, #212]	; (8004b54 <HAL_GPIO_Init+0x310>)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	3302      	adds	r3, #2
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aae:	4a32      	ldr	r2, [pc, #200]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad8:	4a27      	ldr	r2, [pc, #156]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b2c:	4a12      	ldr	r2, [pc, #72]	; (8004b78 <HAL_GPIO_Init+0x334>)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	f67f ae90 	bls.w	8004860 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3724      	adds	r7, #36	; 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40013800 	.word	0x40013800
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	40020400 	.word	0x40020400
 8004b60:	40020800 	.word	0x40020800
 8004b64:	40020c00 	.word	0x40020c00
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40021400 	.word	0x40021400
 8004b70:	40021800 	.word	0x40021800
 8004b74:	40021c00 	.word	0x40021c00
 8004b78:	40013c00 	.word	0x40013c00

08004b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e001      	b.n	8004b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e267      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bca:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b85      	ldr	r3, [pc, #532]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b82      	ldr	r3, [pc, #520]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b7e      	ldr	r3, [pc, #504]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x108>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e242      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x74>
 8004c12:	4b76      	ldr	r3, [pc, #472]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a75      	ldr	r2, [pc, #468]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x98>
 8004c2a:	4b70      	ldr	r3, [pc, #448]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a6f      	ldr	r2, [pc, #444]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6c      	ldr	r2, [pc, #432]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c44:	4b69      	ldr	r3, [pc, #420]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a65      	ldr	r2, [pc, #404]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7ff fc3e 	bl	80044e4 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7ff fc3a 	bl	80044e4 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e207      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xc0>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7ff fc2a 	bl	80044e4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7ff fc26 	bl	80044e4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1f3      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0xe8>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cc2:	4b4a      	ldr	r3, [pc, #296]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b47      	ldr	r3, [pc, #284]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b44      	ldr	r3, [pc, #272]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b41      	ldr	r3, [pc, #260]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1c7      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b3b      	ldr	r3, [pc, #236]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b34      	ldr	r3, [pc, #208]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7ff fbdf 	bl	80044e4 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7ff fbdb 	bl	80044e4 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1a8      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4925      	ldr	r1, [pc, #148]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b24      	ldr	r3, [pc, #144]	; (8004df0 <HAL_RCC_OscConfig+0x244>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7ff fbbe 	bl	80044e4 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7ff fbba 	bl	80044e4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e187      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d036      	beq.n	8004e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7ff fb9e 	bl	80044e4 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dac:	f7ff fb9a 	bl	80044e4 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e167      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_OscConfig+0x240>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x200>
 8004dca:	e01b      	b.n	8004e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_OscConfig+0x248>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7ff fb87 	bl	80044e4 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e00e      	b.n	8004df8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dda:	f7ff fb83 	bl	80044e4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d907      	bls.n	8004df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e150      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	42470000 	.word	0x42470000
 8004df4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df8:	4b88      	ldr	r3, [pc, #544]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ea      	bne.n	8004dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8097 	beq.w	8004f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e16:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10f      	bne.n	8004e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	4b7d      	ldr	r3, [pc, #500]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a7c      	ldr	r2, [pc, #496]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6413      	str	r3, [r2, #64]	; 0x40
 8004e32:	4b7a      	ldr	r3, [pc, #488]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	4b77      	ldr	r3, [pc, #476]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d118      	bne.n	8004e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a73      	ldr	r2, [pc, #460]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5a:	f7ff fb43 	bl	80044e4 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e62:	f7ff fb3f 	bl	80044e4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e10c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e74:	4b6a      	ldr	r3, [pc, #424]	; (8005020 <HAL_RCC_OscConfig+0x474>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d106      	bne.n	8004e96 <HAL_RCC_OscConfig+0x2ea>
 8004e88:	4b64      	ldr	r3, [pc, #400]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a63      	ldr	r2, [pc, #396]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e01c      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b05      	cmp	r3, #5
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x30c>
 8004e9e:	4b5f      	ldr	r3, [pc, #380]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea2:	4a5e      	ldr	r2, [pc, #376]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	4a5b      	ldr	r2, [pc, #364]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0x324>
 8004eb8:	4b58      	ldr	r3, [pc, #352]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 0301 	bic.w	r3, r3, #1
 8004ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec4:	4b55      	ldr	r3, [pc, #340]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a54      	ldr	r2, [pc, #336]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004eca:	f023 0304 	bic.w	r3, r3, #4
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7ff fb04 	bl	80044e4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7ff fb00 	bl	80044e4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0cb      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	4b49      	ldr	r3, [pc, #292]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0ee      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x334>
 8004f02:	e014      	b.n	8004f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f04:	f7ff faee 	bl	80044e4 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7ff faea 	bl	80044e4 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0b5      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1ee      	bne.n	8004f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d105      	bne.n	8004f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a1 	beq.w	800508c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4a:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d05c      	beq.n	8005010 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d141      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7ff fabe 	bl	80044e4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7ff faba 	bl	80044e4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e087      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7e:	4b27      	ldr	r3, [pc, #156]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69da      	ldr	r2, [r3, #28]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	491b      	ldr	r1, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fba:	f7ff fa93 	bl	80044e4 <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7ff fa8f 	bl	80044e4 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e05c      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x416>
 8004fe0:	e054      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe8:	f7ff fa7c 	bl	80044e4 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7ff fa78 	bl	80044e4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e045      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCC_OscConfig+0x470>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x444>
 800500e:	e03d      	b.n	800508c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e038      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
 800501c:	40023800 	.word	0x40023800
 8005020:	40007000 	.word	0x40007000
 8005024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <HAL_RCC_OscConfig+0x4ec>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d028      	beq.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d121      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	429a      	cmp	r2, r3
 8005050:	d11a      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005058:	4013      	ands	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800505e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	4293      	cmp	r3, r2
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	3b01      	subs	r3, #1
 8005072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d107      	bne.n	8005088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800

0800509c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0cc      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b68      	ldr	r3, [pc, #416]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d90c      	bls.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b65      	ldr	r3, [pc, #404]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d001      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0b8      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d020      	beq.n	8005126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a58      	ldr	r2, [pc, #352]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005108:	4b53      	ldr	r3, [pc, #332]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a52      	ldr	r2, [pc, #328]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005114:	4b50      	ldr	r3, [pc, #320]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	494d      	ldr	r1, [pc, #308]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d044      	beq.n	80051bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d119      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e07f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005156:	2b03      	cmp	r3, #3
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515a:	4b3f      	ldr	r3, [pc, #252]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516a:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e067      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f023 0203 	bic.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4934      	ldr	r1, [pc, #208]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800518c:	f7ff f9aa 	bl	80044e4 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005192:	e00a      	b.n	80051aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005194:	f7ff f9a6 	bl	80044e4 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e04f      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 020c 	and.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d1eb      	bne.n	8005194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d20c      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e032      	b.n	800524a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	4b19      	ldr	r3, [pc, #100]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	4916      	ldr	r1, [pc, #88]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	490e      	ldr	r1, [pc, #56]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005222:	f000 f821 	bl	8005268 <HAL_RCC_GetSysClockFreq>
 8005226:	4602      	mov	r2, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	490a      	ldr	r1, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f90a 	bl	800445c <HAL_InitTick>

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40023c00 	.word	0x40023c00
 8005258:	40023800 	.word	0x40023800
 800525c:	0800abe0 	.word	0x0800abe0
 8005260:	20000000 	.word	0x20000000
 8005264:	20000004 	.word	0x20000004

08005268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800526c:	b094      	sub	sp, #80	; 0x50
 800526e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 030c 	and.w	r3, r3, #12
 8005288:	2b08      	cmp	r3, #8
 800528a:	d00d      	beq.n	80052a8 <HAL_RCC_GetSysClockFreq+0x40>
 800528c:	2b08      	cmp	r3, #8
 800528e:	f200 80e1 	bhi.w	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_RCC_GetSysClockFreq+0x34>
 8005296:	2b04      	cmp	r3, #4
 8005298:	d003      	beq.n	80052a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800529a:	e0db      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529c:	4b73      	ldr	r3, [pc, #460]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a0:	e0db      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a2:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCC_GetSysClockFreq+0x208>)
 80052a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052a6:	e0d8      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a8:	4b6f      	ldr	r3, [pc, #444]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b2:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d063      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b6a      	ldr	r3, [pc, #424]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30
 80052d2:	2300      	movs	r3, #0
 80052d4:	637b      	str	r3, [r7, #52]	; 0x34
 80052d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052da:	4622      	mov	r2, r4
 80052dc:	462b      	mov	r3, r5
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ec:	0150      	lsls	r0, r2, #5
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4621      	mov	r1, r4
 80052f4:	1a51      	subs	r1, r2, r1
 80052f6:	6139      	str	r1, [r7, #16]
 80052f8:	4629      	mov	r1, r5
 80052fa:	eb63 0301 	sbc.w	r3, r3, r1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800530c:	4659      	mov	r1, fp
 800530e:	018b      	lsls	r3, r1, #6
 8005310:	4651      	mov	r1, sl
 8005312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005316:	4651      	mov	r1, sl
 8005318:	018a      	lsls	r2, r1, #6
 800531a:	4651      	mov	r1, sl
 800531c:	ebb2 0801 	subs.w	r8, r2, r1
 8005320:	4659      	mov	r1, fp
 8005322:	eb63 0901 	sbc.w	r9, r3, r1
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533a:	4690      	mov	r8, r2
 800533c:	4699      	mov	r9, r3
 800533e:	4623      	mov	r3, r4
 8005340:	eb18 0303 	adds.w	r3, r8, r3
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	462b      	mov	r3, r5
 8005348:	eb49 0303 	adc.w	r3, r9, r3
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	f04f 0300 	mov.w	r3, #0
 8005356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800535a:	4629      	mov	r1, r5
 800535c:	024b      	lsls	r3, r1, #9
 800535e:	4621      	mov	r1, r4
 8005360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005364:	4621      	mov	r1, r4
 8005366:	024a      	lsls	r2, r1, #9
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
 8005372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005378:	f7fb fc0e 	bl	8000b98 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4613      	mov	r3, r2
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005384:	e058      	b.n	8005438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005386:	4b38      	ldr	r3, [pc, #224]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	099b      	lsrs	r3, r3, #6
 800538c:	2200      	movs	r2, #0
 800538e:	4618      	mov	r0, r3
 8005390:	4611      	mov	r1, r2
 8005392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	2300      	movs	r3, #0
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	f04f 0000 	mov.w	r0, #0
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	0159      	lsls	r1, r3, #5
 80053ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053b2:	0150      	lsls	r0, r2, #5
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4641      	mov	r1, r8
 80053ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80053be:	4649      	mov	r1, r9
 80053c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053d8:	ebb2 040a 	subs.w	r4, r2, sl
 80053dc:	eb63 050b 	sbc.w	r5, r3, fp
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	00eb      	lsls	r3, r5, #3
 80053ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053ee:	00e2      	lsls	r2, r4, #3
 80053f0:	4614      	mov	r4, r2
 80053f2:	461d      	mov	r5, r3
 80053f4:	4643      	mov	r3, r8
 80053f6:	18e3      	adds	r3, r4, r3
 80053f8:	603b      	str	r3, [r7, #0]
 80053fa:	464b      	mov	r3, r9
 80053fc:	eb45 0303 	adc.w	r3, r5, r3
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	f04f 0200 	mov.w	r2, #0
 8005406:	f04f 0300 	mov.w	r3, #0
 800540a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800540e:	4629      	mov	r1, r5
 8005410:	028b      	lsls	r3, r1, #10
 8005412:	4621      	mov	r1, r4
 8005414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005418:	4621      	mov	r1, r4
 800541a:	028a      	lsls	r2, r1, #10
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005422:	2200      	movs	r2, #0
 8005424:	61bb      	str	r3, [r7, #24]
 8005426:	61fa      	str	r2, [r7, #28]
 8005428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800542c:	f7fb fbb4 	bl	8000b98 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_GetSysClockFreq+0x200>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	3301      	adds	r3, #1
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005452:	e002      	b.n	800545a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <HAL_RCC_GetSysClockFreq+0x204>)
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800545a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800545c:	4618      	mov	r0, r3
 800545e:	3750      	adds	r7, #80	; 0x50
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	00f42400 	.word	0x00f42400
 8005470:	007a1200 	.word	0x007a1200

08005474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <HAL_RCC_GetHCLKFreq+0x14>)
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	20000000 	.word	0x20000000

0800548c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005490:	f7ff fff0 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 8005494:	4602      	mov	r2, r0
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	4903      	ldr	r1, [pc, #12]	; (80054b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054a2:	5ccb      	ldrb	r3, [r1, r3]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40023800 	.word	0x40023800
 80054b0:	0800abf0 	.word	0x0800abf0

080054b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054b8:	f7ff ffdc 	bl	8005474 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	0b5b      	lsrs	r3, r3, #13
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800abf0 	.word	0x0800abf0

080054dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e041      	b.n	8005572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fe fde0 	bl	80040c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f000 fc0e 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <HAL_TIM_PWM_Start+0x24>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e022      	b.n	80055e6 <HAL_TIM_PWM_Start+0x6a>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d109      	bne.n	80055ba <HAL_TIM_PWM_Start+0x3e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	bf14      	ite	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	2300      	moveq	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	e015      	b.n	80055e6 <HAL_TIM_PWM_Start+0x6a>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start+0x58>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e008      	b.n	80055e6 <HAL_TIM_PWM_Start+0x6a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07c      	b.n	80056e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0x82>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	e013      	b.n	8005626 <HAL_TIM_PWM_Start+0xaa>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0x92>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	e00b      	b.n	8005626 <HAL_TIM_PWM_Start+0xaa>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Start+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	e003      	b.n	8005626 <HAL_TIM_PWM_Start+0xaa>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	6839      	ldr	r1, [r7, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fde0 	bl	80061f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2d      	ldr	r2, [pc, #180]	; (80056f0 <HAL_TIM_PWM_Start+0x174>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_PWM_Start+0xcc>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2c      	ldr	r2, [pc, #176]	; (80056f4 <HAL_TIM_PWM_Start+0x178>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d101      	bne.n	800564c <HAL_TIM_PWM_Start+0xd0>
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <HAL_TIM_PWM_Start+0xd2>
 800564c:	2300      	movs	r3, #0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_TIM_PWM_Start+0x174>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d022      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d01d      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_TIM_PWM_Start+0x17c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <HAL_TIM_PWM_Start+0x180>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_TIM_PWM_Start+0x184>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_TIM_PWM_Start+0x178>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_TIM_PWM_Start+0x188>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_TIM_PWM_Start+0x136>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_TIM_PWM_Start+0x18c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b06      	cmp	r3, #6
 80056c2:	d010      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	e007      	b.n	80056e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010400 	.word	0x40010400
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40014000 	.word	0x40014000
 8005708:	40001800 	.word	0x40001800

0800570c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e097      	b.n	8005850 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe fbbb 	bl	8003eb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005750:	f023 0307 	bic.w	r3, r3, #7
 8005754:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 faeb 	bl	8005d3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	4313      	orrs	r3, r2
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057ac:	f023 030c 	bic.w	r3, r3, #12
 80057b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	4313      	orrs	r3, r2
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	011a      	lsls	r2, r3, #4
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	031b      	lsls	r3, r3, #12
 80057dc:	4313      	orrs	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	4313      	orrs	r3, r2
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005868:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005870:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005878:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005880:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d110      	bne.n	80058aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800588e:	7b7b      	ldrb	r3, [r7, #13]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d001      	beq.n	8005898 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e069      	b.n	800596c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a8:	e031      	b.n	800590e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d110      	bne.n	80058d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d102      	bne.n	80058bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b6:	7b3b      	ldrb	r3, [r7, #12]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e055      	b.n	800596c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d0:	e01d      	b.n	800590e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d108      	bne.n	80058ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d105      	bne.n	80058ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058de:	7b7b      	ldrb	r3, [r7, #13]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d102      	bne.n	80058ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e4:	7b3b      	ldrb	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d001      	beq.n	80058ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e03e      	b.n	800596c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_Encoder_Start+0xc4>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b04      	cmp	r3, #4
 8005918:	d008      	beq.n	800592c <HAL_TIM_Encoder_Start+0xd4>
 800591a:	e00f      	b.n	800593c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fc65 	bl	80061f4 <TIM_CCxChannelCmd>
      break;
 800592a:	e016      	b.n	800595a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	2104      	movs	r1, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fc5d 	bl	80061f4 <TIM_CCxChannelCmd>
      break;
 800593a:	e00e      	b.n	800595a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	2100      	movs	r1, #0
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fc55 	bl	80061f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2201      	movs	r2, #1
 8005950:	2104      	movs	r1, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fc4e 	bl	80061f4 <TIM_CCxChannelCmd>
      break;
 8005958:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d020      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01b      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0202 	mvn.w	r2, #2
 80059a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f99e 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 80059c4:	e005      	b.n	80059d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f990 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f9a1 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d020      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0204 	mvn.w	r2, #4
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f978 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f96a 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f97b 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0208 	mvn.w	r2, #8
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2204      	movs	r2, #4
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f952 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f944 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f955 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d020      	beq.n	8005abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0310 	and.w	r3, r3, #16
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0210 	mvn.w	r2, #16
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2208      	movs	r2, #8
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f92c 	bl	8005d00 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f91e 	bl	8005cec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f92f 	bl	8005d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0201 	mvn.w	r2, #1
 8005ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8fc 	bl	8005cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fc76 	bl	80063f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f900 	bl	8005d28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00c      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0220 	mvn.w	r2, #32
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fc48 	bl	80063dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e0ae      	b.n	8005cd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	f200 809f 	bhi.w	8005cc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005cc1 	.word	0x08005cc1
 8005b90:	08005cc1 	.word	0x08005cc1
 8005b94:	08005cc1 	.word	0x08005cc1
 8005b98:	08005bfd 	.word	0x08005bfd
 8005b9c:	08005cc1 	.word	0x08005cc1
 8005ba0:	08005cc1 	.word	0x08005cc1
 8005ba4:	08005cc1 	.word	0x08005cc1
 8005ba8:	08005c3f 	.word	0x08005c3f
 8005bac:	08005cc1 	.word	0x08005cc1
 8005bb0:	08005cc1 	.word	0x08005cc1
 8005bb4:	08005cc1 	.word	0x08005cc1
 8005bb8:	08005c7f 	.word	0x08005c7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f966 	bl	8005e94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0208 	orr.w	r2, r2, #8
 8005bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0204 	bic.w	r2, r2, #4
 8005be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6999      	ldr	r1, [r3, #24]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	619a      	str	r2, [r3, #24]
      break;
 8005bfa:	e064      	b.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f9b6 	bl	8005f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	021a      	lsls	r2, r3, #8
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	619a      	str	r2, [r3, #24]
      break;
 8005c3c:	e043      	b.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fa0b 	bl	8006060 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f042 0208 	orr.w	r2, r2, #8
 8005c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69da      	ldr	r2, [r3, #28]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0204 	bic.w	r2, r2, #4
 8005c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69d9      	ldr	r1, [r3, #28]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	61da      	str	r2, [r3, #28]
      break;
 8005c7c:	e023      	b.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fa5f 	bl	8006148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	021a      	lsls	r2, r3, #8
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	61da      	str	r2, [r3, #28]
      break;
 8005cbe:	e002      	b.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a46      	ldr	r2, [pc, #280]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d00f      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a43      	ldr	r2, [pc, #268]	; (8005e6c <TIM_Base_SetConfig+0x130>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00b      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a42      	ldr	r2, [pc, #264]	; (8005e70 <TIM_Base_SetConfig+0x134>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a41      	ldr	r2, [pc, #260]	; (8005e74 <TIM_Base_SetConfig+0x138>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a35      	ldr	r2, [pc, #212]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d027      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a32      	ldr	r2, [pc, #200]	; (8005e6c <TIM_Base_SetConfig+0x130>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d023      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a31      	ldr	r2, [pc, #196]	; (8005e70 <TIM_Base_SetConfig+0x134>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a30      	ldr	r2, [pc, #192]	; (8005e74 <TIM_Base_SetConfig+0x138>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2e      	ldr	r2, [pc, #184]	; (8005e7c <TIM_Base_SetConfig+0x140>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2d      	ldr	r2, [pc, #180]	; (8005e80 <TIM_Base_SetConfig+0x144>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <TIM_Base_SetConfig+0x148>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2b      	ldr	r2, [pc, #172]	; (8005e88 <TIM_Base_SetConfig+0x14c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2a      	ldr	r2, [pc, #168]	; (8005e8c <TIM_Base_SetConfig+0x150>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a29      	ldr	r2, [pc, #164]	; (8005e90 <TIM_Base_SetConfig+0x154>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <TIM_Base_SetConfig+0x12c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	611a      	str	r2, [r3, #16]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40001800 	.word	0x40001800
 8005e8c:	40001c00 	.word	0x40001c00
 8005e90:	40002000 	.word	0x40002000

08005e94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f023 0201 	bic.w	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 0302 	bic.w	r3, r3, #2
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <TIM_OC1_SetConfig+0xd8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC1_SetConfig+0x64>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <TIM_OC1_SetConfig+0xdc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0308 	bic.w	r3, r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 0304 	bic.w	r3, r3, #4
 8005f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <TIM_OC1_SetConfig+0xd8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d003      	beq.n	8005f22 <TIM_OC1_SetConfig+0x8e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <TIM_OC1_SetConfig+0xdc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d111      	bne.n	8005f46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010400 	.word	0x40010400

08005f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f023 0210 	bic.w	r2, r3, #16
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0320 	bic.w	r3, r3, #32
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a22      	ldr	r2, [pc, #136]	; (8006058 <TIM_OC2_SetConfig+0xe4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_OC2_SetConfig+0x68>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_OC2_SetConfig+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d10d      	bne.n	8005ff8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <TIM_OC2_SetConfig+0xe4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC2_SetConfig+0x94>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a16      	ldr	r2, [pc, #88]	; (800605c <TIM_OC2_SetConfig+0xe8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d113      	bne.n	8006030 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800600e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40010400 	.word	0x40010400

08006060 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0303 	bic.w	r3, r3, #3
 8006096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a21      	ldr	r2, [pc, #132]	; (8006140 <TIM_OC3_SetConfig+0xe0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d003      	beq.n	80060c6 <TIM_OC3_SetConfig+0x66>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a20      	ldr	r2, [pc, #128]	; (8006144 <TIM_OC3_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a16      	ldr	r2, [pc, #88]	; (8006140 <TIM_OC3_SetConfig+0xe0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_OC3_SetConfig+0x92>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a15      	ldr	r2, [pc, #84]	; (8006144 <TIM_OC3_SetConfig+0xe4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d113      	bne.n	800611a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40010000 	.word	0x40010000
 8006144:	40010400 	.word	0x40010400

08006148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <TIM_OC4_SetConfig+0xa4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC4_SetConfig+0x68>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <TIM_OC4_SetConfig+0xa8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2201      	movs	r2, #1
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a1a      	ldr	r2, [r3, #32]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	43db      	mvns	r3, r3
 8006216:	401a      	ands	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1a      	ldr	r2, [r3, #32]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	fa01 f303 	lsl.w	r3, r1, r3
 800622c:	431a      	orrs	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006254:	2302      	movs	r3, #2
 8006256:	e05a      	b.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a21      	ldr	r2, [pc, #132]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d01d      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1a      	ldr	r2, [pc, #104]	; (8006328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a18      	ldr	r2, [pc, #96]	; (800632c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a17      	ldr	r2, [pc, #92]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a15      	ldr	r2, [pc, #84]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40010000 	.word	0x40010000
 8006320:	40000400 	.word	0x40000400
 8006324:	40000800 	.word	0x40000800
 8006328:	40000c00 	.word	0x40000c00
 800632c:	40010400 	.word	0x40010400
 8006330:	40014000 	.word	0x40014000
 8006334:	40001800 	.word	0x40001800

08006338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006350:	2302      	movs	r3, #2
 8006352:	e03d      	b.n	80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e042      	b.n	800649c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fd ff2c 	bl	8004288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2224      	movs	r2, #36	; 0x24
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fc85 	bl	8006d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800645c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800646c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b0ba      	sub	sp, #232	; 0xe8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10f      	bne.n	800650a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_UART_IRQHandler+0x66>
 80064f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fb69 	bl	8006bda <UART_Receive_IT>
      return;
 8006508:	e25b      	b.n	80069c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800650a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80de 	beq.w	80066d0 <HAL_UART_IRQHandler+0x22c>
 8006514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006524:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 80d1 	beq.w	80066d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_UART_IRQHandler+0xae>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_UART_IRQHandler+0xd2>
 800655e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	f043 0202 	orr.w	r2, r3, #2
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_UART_IRQHandler+0xf6>
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006592:	f043 0204 	orr.w	r2, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d011      	beq.n	80065ca <HAL_UART_IRQHandler+0x126>
 80065a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	f043 0208 	orr.w	r2, r3, #8
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 81f2 	beq.w	80069b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d008      	beq.n	80065f2 <HAL_UART_IRQHandler+0x14e>
 80065e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 faf4 	bl	8006bda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <HAL_UART_IRQHandler+0x17a>
 8006616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04f      	beq.n	80066be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9fc 	bl	8006a1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d141      	bne.n	80066b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3314      	adds	r3, #20
 8006638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800664c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3314      	adds	r3, #20
 800665a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800666a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d9      	bne.n	8006632 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d013      	beq.n	80066ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	4a7e      	ldr	r2, [pc, #504]	; (8006884 <HAL_UART_IRQHandler+0x3e0>)
 800668c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe f8b3 	bl	80047fe <HAL_DMA_Abort_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e00e      	b.n	80066cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f99e 	bl	80069f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	e00a      	b.n	80066cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f99a 	bl	80069f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	e006      	b.n	80066cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f996 	bl	80069f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80066ca:	e175      	b.n	80069b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066cc:	bf00      	nop
    return;
 80066ce:	e173      	b.n	80069b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f040 814f 	bne.w	8006978 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0310 	and.w	r3, r3, #16
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 8148 	beq.w	8006978 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8141 	beq.w	8006978 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b40      	cmp	r3, #64	; 0x40
 8006718:	f040 80b6 	bne.w	8006888 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8145 	beq.w	80069bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800673a:	429a      	cmp	r2, r3
 800673c:	f080 813e 	bcs.w	80069bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006746:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	f000 8088 	beq.w	8006866 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	330c      	adds	r3, #12
 800675c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800676c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800678e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800679a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1d9      	bne.n	8006756 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3314      	adds	r3, #20
 80067a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3314      	adds	r3, #20
 80067c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e1      	bne.n	80067a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e3      	bne.n	80067de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006836:	f023 0310 	bic.w	r3, r3, #16
 800683a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006848:	65ba      	str	r2, [r7, #88]	; 0x58
 800684a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800684e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e3      	bne.n	8006824 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd ff5c 	bl	800471e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006874:	b29b      	uxth	r3, r3
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	b29b      	uxth	r3, r3
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f8c1 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006882:	e09b      	b.n	80069bc <HAL_UART_IRQHandler+0x518>
 8006884:	08006ae3 	.word	0x08006ae3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006890:	b29b      	uxth	r3, r3
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 808e 	beq.w	80069c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8089 	beq.w	80069c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068d2:	647a      	str	r2, [r7, #68]	; 0x44
 80068d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e3      	bne.n	80068ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3314      	adds	r3, #20
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	623b      	str	r3, [r7, #32]
   return(result);
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3314      	adds	r3, #20
 8006906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800690a:	633a      	str	r2, [r7, #48]	; 0x30
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e3      	bne.n	80068e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	60fb      	str	r3, [r7, #12]
   return(result);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0310 	bic.w	r3, r3, #16
 8006942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	330c      	adds	r3, #12
 800694c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006950:	61fa      	str	r2, [r7, #28]
 8006952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69b9      	ldr	r1, [r7, #24]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	617b      	str	r3, [r7, #20]
   return(result);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e3      	bne.n	800692c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800696a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f847 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006976:	e023      	b.n	80069c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <HAL_UART_IRQHandler+0x4f4>
 8006984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f8ba 	bl	8006b0a <UART_Transmit_IT>
    return;
 8006996:	e014      	b.n	80069c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00e      	beq.n	80069c2 <HAL_UART_IRQHandler+0x51e>
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f8fa 	bl	8006baa <UART_EndTransmit_IT>
    return;
 80069b6:	e004      	b.n	80069c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80069c0:	bf00      	nop
  }
}
 80069c2:	37e8      	adds	r7, #232	; 0xe8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b095      	sub	sp, #84	; 0x54
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a44:	643a      	str	r2, [r7, #64]	; 0x40
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e5      	bne.n	8006a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d119      	bne.n	8006ac8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab4:	61ba      	str	r2, [r7, #24]
 8006ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e5      	bne.n	8006a94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ad6:	bf00      	nop
 8006ad8:	3754      	adds	r7, #84	; 0x54
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff ff77 	bl	80069f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b21      	cmp	r3, #33	; 0x21
 8006b1c:	d13e      	bne.n	8006b9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d114      	bne.n	8006b52 <UART_Transmit_IT+0x48>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d110      	bne.n	8006b52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	621a      	str	r2, [r3, #32]
 8006b50:	e008      	b.n	8006b64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	1c59      	adds	r1, r3, #1
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6211      	str	r1, [r2, #32]
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4619      	mov	r1, r3
 8006b72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10f      	bne.n	8006b98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b082      	sub	sp, #8
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fefc 	bl	80069c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b08c      	sub	sp, #48	; 0x30
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b22      	cmp	r3, #34	; 0x22
 8006bec:	f040 80ae 	bne.w	8006d4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d117      	bne.n	8006c2a <UART_Receive_IT+0x50>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d113      	bne.n	8006c2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	1c9a      	adds	r2, r3, #2
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28
 8006c28:	e026      	b.n	8006c78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d007      	beq.n	8006c4e <UART_Receive_IT+0x74>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <UART_Receive_IT+0x82>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	e008      	b.n	8006c6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4619      	mov	r1, r3
 8006c86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d15d      	bne.n	8006d48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0220 	bic.w	r2, r2, #32
 8006c9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0201 	bic.w	r2, r2, #1
 8006cba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d135      	bne.n	8006d3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf8:	623a      	str	r2, [r7, #32]
 8006cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d10a      	bne.n	8006d30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe64 	bl	8006a04 <HAL_UARTEx_RxEventCallback>
 8006d3c:	e002      	b.n	8006d44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe4c 	bl	80069dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e002      	b.n	8006d4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3730      	adds	r7, #48	; 0x30
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d5c:	b0c0      	sub	sp, #256	; 0x100
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	68d9      	ldr	r1, [r3, #12]
 8006d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	ea40 0301 	orr.w	r3, r0, r1
 8006d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006db0:	f021 010c 	bic.w	r1, r1, #12
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd2:	6999      	ldr	r1, [r3, #24]
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	ea40 0301 	orr.w	r3, r0, r1
 8006dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b8f      	ldr	r3, [pc, #572]	; (8007024 <UART_SetConfig+0x2cc>)
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d005      	beq.n	8006df8 <UART_SetConfig+0xa0>
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4b8d      	ldr	r3, [pc, #564]	; (8007028 <UART_SetConfig+0x2d0>)
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d104      	bne.n	8006e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df8:	f7fe fb5c 	bl	80054b4 <HAL_RCC_GetPCLK2Freq>
 8006dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e00:	e003      	b.n	8006e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7fe fb43 	bl	800548c <HAL_RCC_GetPCLK1Freq>
 8006e06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e14:	f040 810c 	bne.w	8007030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	462b      	mov	r3, r5
 8006e2e:	1891      	adds	r1, r2, r2
 8006e30:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e32:	415b      	adcs	r3, r3
 8006e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	eb12 0801 	adds.w	r8, r2, r1
 8006e40:	4629      	mov	r1, r5
 8006e42:	eb43 0901 	adc.w	r9, r3, r1
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	eb18 0303 	adds.w	r3, r8, r3
 8006e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e68:	462b      	mov	r3, r5
 8006e6a:	eb49 0303 	adc.w	r3, r9, r3
 8006e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e86:	460b      	mov	r3, r1
 8006e88:	18db      	adds	r3, r3, r3
 8006e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	eb42 0303 	adc.w	r3, r2, r3
 8006e92:	657b      	str	r3, [r7, #84]	; 0x54
 8006e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e9c:	f7f9 fe7c 	bl	8000b98 <__aeabi_uldivmod>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4b61      	ldr	r3, [pc, #388]	; (800702c <UART_SetConfig+0x2d4>)
 8006ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eaa:	095b      	lsrs	r3, r3, #5
 8006eac:	011c      	lsls	r4, r3, #4
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef0:	4692      	mov	sl, r2
 8006ef2:	469b      	mov	fp, r3
 8006ef4:	4643      	mov	r3, r8
 8006ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8006efa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006efe:	464b      	mov	r3, r9
 8006f00:	eb4b 0303 	adc.w	r3, fp, r3
 8006f04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	18db      	adds	r3, r3, r3
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
 8006f22:	4613      	mov	r3, r2
 8006f24:	eb42 0303 	adc.w	r3, r2, r3
 8006f28:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f32:	f7f9 fe31 	bl	8000b98 <__aeabi_uldivmod>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	4b3b      	ldr	r3, [pc, #236]	; (800702c <UART_SetConfig+0x2d4>)
 8006f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	2264      	movs	r2, #100	; 0x64
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
 8006f4a:	1acb      	subs	r3, r1, r3
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f52:	4b36      	ldr	r3, [pc, #216]	; (800702c <UART_SetConfig+0x2d4>)
 8006f54:	fba3 2302 	umull	r2, r3, r3, r2
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f60:	441c      	add	r4, r3
 8006f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f74:	4642      	mov	r2, r8
 8006f76:	464b      	mov	r3, r9
 8006f78:	1891      	adds	r1, r2, r2
 8006f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f84:	4641      	mov	r1, r8
 8006f86:	1851      	adds	r1, r2, r1
 8006f88:	6339      	str	r1, [r7, #48]	; 0x30
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	414b      	adcs	r3, r1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f9c:	4659      	mov	r1, fp
 8006f9e:	00cb      	lsls	r3, r1, #3
 8006fa0:	4651      	mov	r1, sl
 8006fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa6:	4651      	mov	r1, sl
 8006fa8:	00ca      	lsls	r2, r1, #3
 8006faa:	4610      	mov	r0, r2
 8006fac:	4619      	mov	r1, r3
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fb8:	464b      	mov	r3, r9
 8006fba:	460a      	mov	r2, r1
 8006fbc:	eb42 0303 	adc.w	r3, r2, r3
 8006fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fd8:	460b      	mov	r3, r1
 8006fda:	18db      	adds	r3, r3, r3
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fde:	4613      	mov	r3, r2
 8006fe0:	eb42 0303 	adc.w	r3, r2, r3
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fee:	f7f9 fdd3 	bl	8000b98 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	; (800702c <UART_SetConfig+0x2d4>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a08      	ldr	r2, [pc, #32]	; (800702c <UART_SetConfig+0x2d4>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	f003 0207 	and.w	r2, r3, #7
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4422      	add	r2, r4
 800701e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007020:	e106      	b.n	8007230 <UART_SetConfig+0x4d8>
 8007022:	bf00      	nop
 8007024:	40011000 	.word	0x40011000
 8007028:	40011400 	.word	0x40011400
 800702c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800703a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800703e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007042:	4642      	mov	r2, r8
 8007044:	464b      	mov	r3, r9
 8007046:	1891      	adds	r1, r2, r2
 8007048:	6239      	str	r1, [r7, #32]
 800704a:	415b      	adcs	r3, r3
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
 800704e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007052:	4641      	mov	r1, r8
 8007054:	1854      	adds	r4, r2, r1
 8007056:	4649      	mov	r1, r9
 8007058:	eb43 0501 	adc.w	r5, r3, r1
 800705c:	f04f 0200 	mov.w	r2, #0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	00eb      	lsls	r3, r5, #3
 8007066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800706a:	00e2      	lsls	r2, r4, #3
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	4643      	mov	r3, r8
 8007072:	18e3      	adds	r3, r4, r3
 8007074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007078:	464b      	mov	r3, r9
 800707a:	eb45 0303 	adc.w	r3, r5, r3
 800707e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800708e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007092:	f04f 0200 	mov.w	r2, #0
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800709e:	4629      	mov	r1, r5
 80070a0:	008b      	lsls	r3, r1, #2
 80070a2:	4621      	mov	r1, r4
 80070a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a8:	4621      	mov	r1, r4
 80070aa:	008a      	lsls	r2, r1, #2
 80070ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070b0:	f7f9 fd72 	bl	8000b98 <__aeabi_uldivmod>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4b60      	ldr	r3, [pc, #384]	; (800723c <UART_SetConfig+0x4e4>)
 80070ba:	fba3 2302 	umull	r2, r3, r3, r2
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	011c      	lsls	r4, r3, #4
 80070c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070d4:	4642      	mov	r2, r8
 80070d6:	464b      	mov	r3, r9
 80070d8:	1891      	adds	r1, r2, r2
 80070da:	61b9      	str	r1, [r7, #24]
 80070dc:	415b      	adcs	r3, r3
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070e4:	4641      	mov	r1, r8
 80070e6:	1851      	adds	r1, r2, r1
 80070e8:	6139      	str	r1, [r7, #16]
 80070ea:	4649      	mov	r1, r9
 80070ec:	414b      	adcs	r3, r1
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070fc:	4659      	mov	r1, fp
 80070fe:	00cb      	lsls	r3, r1, #3
 8007100:	4651      	mov	r1, sl
 8007102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007106:	4651      	mov	r1, sl
 8007108:	00ca      	lsls	r2, r1, #3
 800710a:	4610      	mov	r0, r2
 800710c:	4619      	mov	r1, r3
 800710e:	4603      	mov	r3, r0
 8007110:	4642      	mov	r2, r8
 8007112:	189b      	adds	r3, r3, r2
 8007114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007118:	464b      	mov	r3, r9
 800711a:	460a      	mov	r2, r1
 800711c:	eb42 0303 	adc.w	r3, r2, r3
 8007120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	67bb      	str	r3, [r7, #120]	; 0x78
 800712e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800713c:	4649      	mov	r1, r9
 800713e:	008b      	lsls	r3, r1, #2
 8007140:	4641      	mov	r1, r8
 8007142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007146:	4641      	mov	r1, r8
 8007148:	008a      	lsls	r2, r1, #2
 800714a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800714e:	f7f9 fd23 	bl	8000b98 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4611      	mov	r1, r2
 8007158:	4b38      	ldr	r3, [pc, #224]	; (800723c <UART_SetConfig+0x4e4>)
 800715a:	fba3 2301 	umull	r2, r3, r3, r1
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	2264      	movs	r2, #100	; 0x64
 8007162:	fb02 f303 	mul.w	r3, r2, r3
 8007166:	1acb      	subs	r3, r1, r3
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	3332      	adds	r3, #50	; 0x32
 800716c:	4a33      	ldr	r2, [pc, #204]	; (800723c <UART_SetConfig+0x4e4>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007178:	441c      	add	r4, r3
 800717a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800717e:	2200      	movs	r2, #0
 8007180:	673b      	str	r3, [r7, #112]	; 0x70
 8007182:	677a      	str	r2, [r7, #116]	; 0x74
 8007184:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	1891      	adds	r1, r2, r2
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	415b      	adcs	r3, r3
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007198:	4641      	mov	r1, r8
 800719a:	1851      	adds	r1, r2, r1
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	4649      	mov	r1, r9
 80071a0:	414b      	adcs	r3, r1
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071b0:	4659      	mov	r1, fp
 80071b2:	00cb      	lsls	r3, r1, #3
 80071b4:	4651      	mov	r1, sl
 80071b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ba:	4651      	mov	r1, sl
 80071bc:	00ca      	lsls	r2, r1, #3
 80071be:	4610      	mov	r0, r2
 80071c0:	4619      	mov	r1, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	4642      	mov	r2, r8
 80071c6:	189b      	adds	r3, r3, r2
 80071c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ca:	464b      	mov	r3, r9
 80071cc:	460a      	mov	r2, r1
 80071ce:	eb42 0303 	adc.w	r3, r2, r3
 80071d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	663b      	str	r3, [r7, #96]	; 0x60
 80071de:	667a      	str	r2, [r7, #100]	; 0x64
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071ec:	4649      	mov	r1, r9
 80071ee:	008b      	lsls	r3, r1, #2
 80071f0:	4641      	mov	r1, r8
 80071f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f6:	4641      	mov	r1, r8
 80071f8:	008a      	lsls	r2, r1, #2
 80071fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071fe:	f7f9 fccb 	bl	8000b98 <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <UART_SetConfig+0x4e4>)
 8007208:	fba3 1302 	umull	r1, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	2164      	movs	r1, #100	; 0x64
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	3332      	adds	r3, #50	; 0x32
 800721a:	4a08      	ldr	r2, [pc, #32]	; (800723c <UART_SetConfig+0x4e4>)
 800721c:	fba2 2303 	umull	r2, r3, r2, r3
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 020f 	and.w	r2, r3, #15
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4422      	add	r2, r4
 800722e:	609a      	str	r2, [r3, #8]
}
 8007230:	bf00      	nop
 8007232:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007236:	46bd      	mov	sp, r7
 8007238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723c:	51eb851f 	.word	0x51eb851f

08007240 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800724e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007252:	2b84      	cmp	r3, #132	; 0x84
 8007254:	d005      	beq.n	8007262 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007256:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	3303      	adds	r3, #3
 8007260:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007262:	68fb      	ldr	r3, [r7, #12]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007274:	f000 fade 	bl	8007834 <vTaskStartScheduler>
  
  return osOK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	bd80      	pop	{r7, pc}

0800727e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800727e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007280:	b089      	sub	sp, #36	; 0x24
 8007282:	af04      	add	r7, sp, #16
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d020      	beq.n	80072d2 <osThreadCreate+0x54>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01c      	beq.n	80072d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685c      	ldr	r4, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691e      	ldr	r6, [r3, #16]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ffc8 	bl	8007240 <makeFreeRtosPriority>
 80072b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ba:	9202      	str	r2, [sp, #8]
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	9100      	str	r1, [sp, #0]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	4632      	mov	r2, r6
 80072c4:	4629      	mov	r1, r5
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f8ed 	bl	80074a6 <xTaskCreateStatic>
 80072cc:	4603      	mov	r3, r0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e01c      	b.n	800730c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685c      	ldr	r4, [r3, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ffaa 	bl	8007240 <makeFreeRtosPriority>
 80072ec:	4602      	mov	r2, r0
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	9200      	str	r2, [sp, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	4632      	mov	r2, r6
 80072fa:	4629      	mov	r1, r5
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 f92f 	bl	8007560 <xTaskCreate>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007316 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <osDelay+0x16>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	e000      	b.n	800732e <osDelay+0x18>
 800732c:	2301      	movs	r3, #1
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fa4c 	bl	80077cc <vTaskDelay>
  
  return osOK;
 8007334:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f103 0208 	add.w	r2, r3, #8
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f103 0208 	add.w	r2, r3, #8
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f103 0208 	add.w	r2, r3, #8
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
}
 80073d4:	bf00      	nop
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d103      	bne.n	8007400 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e00c      	b.n	800741a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3308      	adds	r3, #8
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e002      	b.n	800740e <vListInsert+0x2e>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	d2f6      	bcs.n	8007408 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6892      	ldr	r2, [r2, #8]
 8007468:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6852      	ldr	r2, [r2, #4]
 8007472:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	d103      	bne.n	8007486 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08e      	sub	sp, #56	; 0x38
 80074aa:	af04      	add	r7, sp, #16
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <xTaskCreateStatic+0x46>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ec:	2354      	movs	r3, #84	; 0x54
 80074ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b54      	cmp	r3, #84	; 0x54
 80074f4:	d00a      	beq.n	800750c <xTaskCreateStatic+0x66>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	61bb      	str	r3, [r7, #24]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800750c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01e      	beq.n	8007552 <xTaskCreateStatic+0xac>
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01b      	beq.n	8007552 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007522:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800752c:	2300      	movs	r3, #0
 800752e:	9303      	str	r3, [sp, #12]
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	f107 0314 	add.w	r3, r7, #20
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f850 	bl	80075ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800754a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800754c:	f000 f8d4 	bl	80076f8 <prvAddNewTaskToReadyList>
 8007550:	e001      	b.n	8007556 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007556:	697b      	ldr	r3, [r7, #20]
	}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	; 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	; 0x30
 8007564:	af04      	add	r7, sp, #16
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fee7 	bl	8008348 <pvPortMalloc>
 800757a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007582:	2054      	movs	r0, #84	; 0x54
 8007584:	f000 fee0 	bl	8008348 <pvPortMalloc>
 8007588:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
 8007596:	e005      	b.n	80075a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007598:	6978      	ldr	r0, [r7, #20]
 800759a:	f000 ffa1 	bl	80084e0 <vPortFree>
 800759e:	e001      	b.n	80075a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d017      	beq.n	80075da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	2300      	movs	r3, #0
 80075b6:	9303      	str	r3, [sp, #12]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	9302      	str	r3, [sp, #8]
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f80e 	bl	80075ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075ce:	69f8      	ldr	r0, [r7, #28]
 80075d0:	f000 f892 	bl	80076f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075d4:	2301      	movs	r3, #1
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	e002      	b.n	80075e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075da:	f04f 33ff 	mov.w	r3, #4294967295
 80075de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075e0:	69bb      	ldr	r3, [r7, #24]
	}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007602:	3b01      	subs	r3, #1
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f023 0307 	bic.w	r3, r3, #7
 8007610:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	f003 0307 	and.w	r3, r3, #7
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <prvInitialiseNewTask+0x48>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	617b      	str	r3, [r7, #20]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01f      	beq.n	8007678 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e012      	b.n	8007664 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	7819      	ldrb	r1, [r3, #0]
 8007646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	3334      	adds	r3, #52	; 0x34
 800764e:	460a      	mov	r2, r1
 8007650:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b0f      	cmp	r3, #15
 8007668:	d9e9      	bls.n	800763e <prvInitialiseNewTask+0x54>
 800766a:	e000      	b.n	800766e <prvInitialiseNewTask+0x84>
			{
				break;
 800766c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007676:	e003      	b.n	8007680 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	2b06      	cmp	r3, #6
 8007684:	d901      	bls.n	800768a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007686:	2306      	movs	r3, #6
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007694:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2200      	movs	r2, #0
 800769a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	3304      	adds	r3, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fe6c 	bl	800737e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	3318      	adds	r3, #24
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fe67 	bl	800737e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	f1c3 0207 	rsb	r2, r3, #7
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	68f9      	ldr	r1, [r7, #12]
 80076d8:	69b8      	ldr	r0, [r7, #24]
 80076da:	f000 fc23 	bl	8007f24 <pxPortInitialiseStack>
 80076de:	4602      	mov	r2, r0
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f0:	bf00      	nop
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007700:	f000 fd40 	bl	8008184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007704:	4b2a      	ldr	r3, [pc, #168]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a29      	ldr	r2, [pc, #164]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800770c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800770e:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007716:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800771c:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <prvAddNewTaskToReadyList+0xb8>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d110      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007724:	f000 fabc 	bl	8007ca0 <prvInitialiseTaskLists>
 8007728:	e00d      	b.n	8007746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	429a      	cmp	r2, r3
 800773e:	d802      	bhi.n	8007746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007740:	4a1c      	ldr	r2, [pc, #112]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007746:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <prvAddNewTaskToReadyList+0xc4>)
 800774e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	4b19      	ldr	r3, [pc, #100]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <prvAddNewTaskToReadyList+0xc8>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <prvAddNewTaskToReadyList+0xcc>)
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7ff fe0d 	bl	8007398 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800777e:	f000 fd31 	bl	80081e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <prvAddNewTaskToReadyList+0xc0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddNewTaskToReadyList+0xbc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
 8007796:	d207      	bcs.n	80077a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvAddNewTaskToReadyList+0xd0>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000b10 	.word	0x20000b10
 80077b4:	20000a10 	.word	0x20000a10
 80077b8:	20000b1c 	.word	0x20000b1c
 80077bc:	20000b2c 	.word	0x20000b2c
 80077c0:	20000b18 	.word	0x20000b18
 80077c4:	20000a14 	.word	0x20000a14
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <vTaskDelay+0x60>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <vTaskDelay+0x30>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077fc:	f000 f87a 	bl	80078f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fb28 	bl	8007e58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007808:	f000 f882 	bl	8007910 <xTaskResumeAll>
 800780c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <vTaskDelay+0x64>)
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000b38 	.word	0x20000b38
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007842:	463a      	mov	r2, r7
 8007844:	1d39      	adds	r1, r7, #4
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 fe30 	bl	80014b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	9202      	str	r2, [sp, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	460a      	mov	r2, r1
 8007862:	491e      	ldr	r1, [pc, #120]	; (80078dc <vTaskStartScheduler+0xa8>)
 8007864:	481e      	ldr	r0, [pc, #120]	; (80078e0 <vTaskStartScheduler+0xac>)
 8007866:	f7ff fe1e 	bl	80074a6 <xTaskCreateStatic>
 800786a:	4603      	mov	r3, r0
 800786c:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <vTaskStartScheduler+0xb0>)
 800786e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007870:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <vTaskStartScheduler+0xb0>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e001      	b.n	8007882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d116      	bne.n	80078b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	613b      	str	r3, [r7, #16]
}
 800789a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <vTaskStartScheduler+0xb4>)
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <vTaskStartScheduler+0xb8>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <vTaskStartScheduler+0xbc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078b0:	f000 fbc6 	bl	8008040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b4:	e00e      	b.n	80078d4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d10a      	bne.n	80078d4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <vTaskStartScheduler+0x9e>
}
 80078d4:	bf00      	nop
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	0800abd8 	.word	0x0800abd8
 80078e0:	08007c71 	.word	0x08007c71
 80078e4:	20000b34 	.word	0x20000b34
 80078e8:	20000b30 	.word	0x20000b30
 80078ec:	20000b1c 	.word	0x20000b1c
 80078f0:	20000b14 	.word	0x20000b14

080078f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <vTaskSuspendAll+0x18>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	4a03      	ldr	r2, [pc, #12]	; (800790c <vTaskSuspendAll+0x18>)
 8007900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007902:	bf00      	nop
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000b38 	.word	0x20000b38

08007910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800791e:	4b41      	ldr	r3, [pc, #260]	; (8007a24 <xTaskResumeAll+0x114>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <xTaskResumeAll+0x2c>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800793c:	f000 fc22 	bl	8008184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007940:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <xTaskResumeAll+0x114>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3b01      	subs	r3, #1
 8007946:	4a37      	ldr	r2, [pc, #220]	; (8007a24 <xTaskResumeAll+0x114>)
 8007948:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794a:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <xTaskResumeAll+0x114>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d161      	bne.n	8007a16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007952:	4b35      	ldr	r3, [pc, #212]	; (8007a28 <xTaskResumeAll+0x118>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d05d      	beq.n	8007a16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795a:	e02e      	b.n	80079ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4b33      	ldr	r3, [pc, #204]	; (8007a2c <xTaskResumeAll+0x11c>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3318      	adds	r3, #24
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fd72 	bl	8007452 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff fd6d 	bl	8007452 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	2201      	movs	r2, #1
 800797e:	409a      	lsls	r2, r3
 8007980:	4b2b      	ldr	r3, [pc, #172]	; (8007a30 <xTaskResumeAll+0x120>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4313      	orrs	r3, r2
 8007986:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <xTaskResumeAll+0x120>)
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <xTaskResumeAll+0x124>)
 8007998:	441a      	add	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3304      	adds	r3, #4
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7ff fcf9 	bl	8007398 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <xTaskResumeAll+0x128>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d302      	bcc.n	80079ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079b4:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <xTaskResumeAll+0x12c>)
 80079b6:	2201      	movs	r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ba:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <xTaskResumeAll+0x11c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1cc      	bne.n	800795c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079c8:	f000 fa08 	bl	8007ddc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079cc:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <xTaskResumeAll+0x130>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d010      	beq.n	80079fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079d8:	f000 f836 	bl	8007a48 <xTaskIncrementTick>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079e2:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <xTaskResumeAll+0x12c>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f1      	bne.n	80079d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <xTaskResumeAll+0x130>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <xTaskResumeAll+0x12c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a06:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskResumeAll+0x134>)
 8007a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a16:	f000 fbe5 	bl	80081e4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000b38 	.word	0x20000b38
 8007a28:	20000b10 	.word	0x20000b10
 8007a2c:	20000ad0 	.word	0x20000ad0
 8007a30:	20000b18 	.word	0x20000b18
 8007a34:	20000a14 	.word	0x20000a14
 8007a38:	20000a10 	.word	0x20000a10
 8007a3c:	20000b24 	.word	0x20000b24
 8007a40:	20000b20 	.word	0x20000b20
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a52:	4b4e      	ldr	r3, [pc, #312]	; (8007b8c <xTaskIncrementTick+0x144>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f040 808e 	bne.w	8007b78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a5c:	4b4c      	ldr	r3, [pc, #304]	; (8007b90 <xTaskIncrementTick+0x148>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a64:	4a4a      	ldr	r2, [pc, #296]	; (8007b90 <xTaskIncrementTick+0x148>)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d120      	bne.n	8007ab2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a70:	4b48      	ldr	r3, [pc, #288]	; (8007b94 <xTaskIncrementTick+0x14c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	603b      	str	r3, [r7, #0]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <xTaskIncrementTick+0x46>
 8007a90:	4b40      	ldr	r3, [pc, #256]	; (8007b94 <xTaskIncrementTick+0x14c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4b40      	ldr	r3, [pc, #256]	; (8007b98 <xTaskIncrementTick+0x150>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3e      	ldr	r2, [pc, #248]	; (8007b94 <xTaskIncrementTick+0x14c>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4a3e      	ldr	r2, [pc, #248]	; (8007b98 <xTaskIncrementTick+0x150>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	4b3d      	ldr	r3, [pc, #244]	; (8007b9c <xTaskIncrementTick+0x154>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a3c      	ldr	r2, [pc, #240]	; (8007b9c <xTaskIncrementTick+0x154>)
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	f000 f995 	bl	8007ddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ab2:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <xTaskIncrementTick+0x158>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d348      	bcc.n	8007b4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007abc:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <xTaskIncrementTick+0x14c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac6:	4b36      	ldr	r3, [pc, #216]	; (8007ba0 <xTaskIncrementTick+0x158>)
 8007ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8007acc:	601a      	str	r2, [r3, #0]
					break;
 8007ace:	e03e      	b.n	8007b4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad0:	4b30      	ldr	r3, [pc, #192]	; (8007b94 <xTaskIncrementTick+0x14c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d203      	bcs.n	8007af0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <xTaskIncrementTick+0x158>)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aee:	e02e      	b.n	8007b4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3304      	adds	r3, #4
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fcac 	bl	8007452 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	3318      	adds	r3, #24
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fca3 	bl	8007452 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	2201      	movs	r2, #1
 8007b12:	409a      	lsls	r2, r3
 8007b14:	4b23      	ldr	r3, [pc, #140]	; (8007ba4 <xTaskIncrementTick+0x15c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	4a22      	ldr	r2, [pc, #136]	; (8007ba4 <xTaskIncrementTick+0x15c>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a1f      	ldr	r2, [pc, #124]	; (8007ba8 <xTaskIncrementTick+0x160>)
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7ff fc2f 	bl	8007398 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	4b1b      	ldr	r3, [pc, #108]	; (8007bac <xTaskIncrementTick+0x164>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d3b9      	bcc.n	8007abc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4c:	e7b6      	b.n	8007abc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b4e:	4b17      	ldr	r3, [pc, #92]	; (8007bac <xTaskIncrementTick+0x164>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4914      	ldr	r1, [pc, #80]	; (8007ba8 <xTaskIncrementTick+0x160>)
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d901      	bls.n	8007b6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b6a:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <xTaskIncrementTick+0x168>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b72:	2301      	movs	r3, #1
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	e004      	b.n	8007b82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <xTaskIncrementTick+0x16c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <xTaskIncrementTick+0x16c>)
 8007b80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b82:	697b      	ldr	r3, [r7, #20]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20000b38 	.word	0x20000b38
 8007b90:	20000b14 	.word	0x20000b14
 8007b94:	20000ac8 	.word	0x20000ac8
 8007b98:	20000acc 	.word	0x20000acc
 8007b9c:	20000b28 	.word	0x20000b28
 8007ba0:	20000b30 	.word	0x20000b30
 8007ba4:	20000b18 	.word	0x20000b18
 8007ba8:	20000a14 	.word	0x20000a14
 8007bac:	20000a10 	.word	0x20000a10
 8007bb0:	20000b24 	.word	0x20000b24
 8007bb4:	20000b20 	.word	0x20000b20

08007bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <vTaskSwitchContext+0xa4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bc6:	4b26      	ldr	r3, [pc, #152]	; (8007c60 <vTaskSwitchContext+0xa8>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bcc:	e03f      	b.n	8007c4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <vTaskSwitchContext+0xa8>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <vTaskSwitchContext+0xac>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	fab3 f383 	clz	r3, r3
 8007be0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	f1c3 031f 	rsb	r3, r3, #31
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	491f      	ldr	r1, [pc, #124]	; (8007c68 <vTaskSwitchContext+0xb0>)
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10a      	bne.n	8007c14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	607b      	str	r3, [r7, #4]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <vTaskSwitchContext+0x5a>
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4a12      	ldr	r2, [pc, #72]	; (8007c68 <vTaskSwitchContext+0xb0>)
 8007c20:	4413      	add	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3308      	adds	r3, #8
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d104      	bne.n	8007c44 <vTaskSwitchContext+0x8c>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	605a      	str	r2, [r3, #4]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <vTaskSwitchContext+0xb4>)
 8007c4c:	6013      	str	r3, [r2, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000b38 	.word	0x20000b38
 8007c60:	20000b24 	.word	0x20000b24
 8007c64:	20000b18 	.word	0x20000b18
 8007c68:	20000a14 	.word	0x20000a14
 8007c6c:	20000a10 	.word	0x20000a10

08007c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c78:	f000 f852 	bl	8007d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <prvIdleTask+0x28>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d9f9      	bls.n	8007c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <prvIdleTask+0x2c>)
 8007c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c94:	e7f0      	b.n	8007c78 <prvIdleTask+0x8>
 8007c96:	bf00      	nop
 8007c98:	20000a14 	.word	0x20000a14
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	e00c      	b.n	8007cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4a12      	ldr	r2, [pc, #72]	; (8007d00 <prvInitialiseTaskLists+0x60>)
 8007cb8:	4413      	add	r3, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fb3f 	bl	800733e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	607b      	str	r3, [r7, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b06      	cmp	r3, #6
 8007cca:	d9ef      	bls.n	8007cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ccc:	480d      	ldr	r0, [pc, #52]	; (8007d04 <prvInitialiseTaskLists+0x64>)
 8007cce:	f7ff fb36 	bl	800733e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cd2:	480d      	ldr	r0, [pc, #52]	; (8007d08 <prvInitialiseTaskLists+0x68>)
 8007cd4:	f7ff fb33 	bl	800733e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cd8:	480c      	ldr	r0, [pc, #48]	; (8007d0c <prvInitialiseTaskLists+0x6c>)
 8007cda:	f7ff fb30 	bl	800733e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cde:	480c      	ldr	r0, [pc, #48]	; (8007d10 <prvInitialiseTaskLists+0x70>)
 8007ce0:	f7ff fb2d 	bl	800733e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ce4:	480b      	ldr	r0, [pc, #44]	; (8007d14 <prvInitialiseTaskLists+0x74>)
 8007ce6:	f7ff fb2a 	bl	800733e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cea:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <prvInitialiseTaskLists+0x78>)
 8007cec:	4a05      	ldr	r2, [pc, #20]	; (8007d04 <prvInitialiseTaskLists+0x64>)
 8007cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <prvInitialiseTaskLists+0x7c>)
 8007cf2:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <prvInitialiseTaskLists+0x68>)
 8007cf4:	601a      	str	r2, [r3, #0]
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000a14 	.word	0x20000a14
 8007d04:	20000aa0 	.word	0x20000aa0
 8007d08:	20000ab4 	.word	0x20000ab4
 8007d0c:	20000ad0 	.word	0x20000ad0
 8007d10:	20000ae4 	.word	0x20000ae4
 8007d14:	20000afc 	.word	0x20000afc
 8007d18:	20000ac8 	.word	0x20000ac8
 8007d1c:	20000acc 	.word	0x20000acc

08007d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d26:	e019      	b.n	8007d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d28:	f000 fa2c 	bl	8008184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <prvCheckTasksWaitingTermination+0x50>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff fb8a 	bl	8007452 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <prvCheckTasksWaitingTermination+0x54>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	4a0b      	ldr	r2, [pc, #44]	; (8007d74 <prvCheckTasksWaitingTermination+0x54>)
 8007d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <prvCheckTasksWaitingTermination+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	4a0a      	ldr	r2, [pc, #40]	; (8007d78 <prvCheckTasksWaitingTermination+0x58>)
 8007d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d52:	f000 fa47 	bl	80081e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f810 	bl	8007d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <prvCheckTasksWaitingTermination+0x58>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e1      	bne.n	8007d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000ae4 	.word	0x20000ae4
 8007d74:	20000b10 	.word	0x20000b10
 8007d78:	20000af8 	.word	0x20000af8

08007d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d108      	bne.n	8007da0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fba4 	bl	80084e0 <vPortFree>
				vPortFree( pxTCB );
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fba1 	bl	80084e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d9e:	e018      	b.n	8007dd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d103      	bne.n	8007db2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb98 	bl	80084e0 <vPortFree>
	}
 8007db0:	e00f      	b.n	8007dd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d00a      	beq.n	8007dd2 <prvDeleteTCB+0x56>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	60fb      	str	r3, [r7, #12]
}
 8007dce:	bf00      	nop
 8007dd0:	e7fe      	b.n	8007dd0 <prvDeleteTCB+0x54>
	}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <prvResetNextTaskUnblockTime+0x38>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <prvResetNextTaskUnblockTime+0x3c>)
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295
 8007df2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007df4:	e008      	b.n	8007e08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007df6:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <prvResetNextTaskUnblockTime+0x38>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <prvResetNextTaskUnblockTime+0x3c>)
 8007e06:	6013      	str	r3, [r2, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	20000ac8 	.word	0x20000ac8
 8007e18:	20000b30 	.word	0x20000b30

08007e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <xTaskGetSchedulerState+0x34>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	e008      	b.n	8007e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e30:	4b08      	ldr	r3, [pc, #32]	; (8007e54 <xTaskGetSchedulerState+0x38>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	607b      	str	r3, [r7, #4]
 8007e3c:	e001      	b.n	8007e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e42:	687b      	ldr	r3, [r7, #4]
	}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20000b1c 	.word	0x20000b1c
 8007e54:	20000b38 	.word	0x20000b38

08007e58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e62:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e68:	4b28      	ldr	r3, [pc, #160]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff faef 	bl	8007452 <uxListRemove>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10b      	bne.n	8007e92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	2201      	movs	r2, #1
 8007e82:	fa02 f303 	lsl.w	r3, r2, r3
 8007e86:	43da      	mvns	r2, r3
 8007e88:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	4a20      	ldr	r2, [pc, #128]	; (8007f10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d10a      	bne.n	8007eb0 <prvAddCurrentTaskToDelayedList+0x58>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ea0:	4b1a      	ldr	r3, [pc, #104]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	481a      	ldr	r0, [pc, #104]	; (8007f14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007eaa:	f7ff fa75 	bl	8007398 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eae:	e026      	b.n	8007efe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eb8:	4b14      	ldr	r3, [pc, #80]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d209      	bcs.n	8007edc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ec8:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7ff fa83 	bl	80073e0 <vListInsert>
}
 8007eda:	e010      	b.n	8007efe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f7ff fa79 	bl	80073e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d202      	bcs.n	8007efe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ef8:	4a09      	ldr	r2, [pc, #36]	; (8007f20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6013      	str	r3, [r2, #0]
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000b14 	.word	0x20000b14
 8007f0c:	20000a10 	.word	0x20000a10
 8007f10:	20000b18 	.word	0x20000b18
 8007f14:	20000afc 	.word	0x20000afc
 8007f18:	20000acc 	.word	0x20000acc
 8007f1c:	20000ac8 	.word	0x20000ac8
 8007f20:	20000b30 	.word	0x20000b30

08007f24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3b04      	subs	r3, #4
 8007f34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3b04      	subs	r3, #4
 8007f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f54:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <pxPortInitialiseStack+0x64>)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b14      	subs	r3, #20
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f06f 0202 	mvn.w	r2, #2
 8007f72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3b20      	subs	r3, #32
 8007f78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	08007f8d 	.word	0x08007f8d

08007f8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <prvTaskExitError+0x54>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9e:	d00a      	beq.n	8007fb6 <prvTaskExitError+0x2a>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	60fb      	str	r3, [r7, #12]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <prvTaskExitError+0x28>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60bb      	str	r3, [r7, #8]
}
 8007fc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fca:	bf00      	nop
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0fc      	beq.n	8007fcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	2000000c 	.word	0x2000000c
	...

08007ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <pxCurrentTCBConst2>)
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	6808      	ldr	r0, [r1, #0]
 8007ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	f380 8809 	msr	PSP, r0
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f04f 0000 	mov.w	r0, #0
 8008006:	f380 8811 	msr	BASEPRI, r0
 800800a:	4770      	bx	lr
 800800c:	f3af 8000 	nop.w

08008010 <pxCurrentTCBConst2>:
 8008010:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop

08008018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008018:	4808      	ldr	r0, [pc, #32]	; (800803c <prvPortStartFirstTask+0x24>)
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f380 8808 	msr	MSP, r0
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8814 	msr	CONTROL, r0
 800802a:	b662      	cpsie	i
 800802c:	b661      	cpsie	f
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	df00      	svc	0
 8008038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800803a:	bf00      	nop
 800803c:	e000ed08 	.word	0xe000ed08

08008040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008046:	4b46      	ldr	r3, [pc, #280]	; (8008160 <xPortStartScheduler+0x120>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a46      	ldr	r2, [pc, #280]	; (8008164 <xPortStartScheduler+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10a      	bne.n	8008066 <xPortStartScheduler+0x26>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	613b      	str	r3, [r7, #16]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008066:	4b3e      	ldr	r3, [pc, #248]	; (8008160 <xPortStartScheduler+0x120>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a3f      	ldr	r2, [pc, #252]	; (8008168 <xPortStartScheduler+0x128>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10a      	bne.n	8008086 <xPortStartScheduler+0x46>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008086:	4b39      	ldr	r3, [pc, #228]	; (800816c <xPortStartScheduler+0x12c>)
 8008088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	22ff      	movs	r2, #255	; 0xff
 8008096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <xPortStartScheduler+0x130>)
 80080ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080ae:	4b31      	ldr	r3, [pc, #196]	; (8008174 <xPortStartScheduler+0x134>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080b4:	e009      	b.n	80080ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080b6:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <xPortStartScheduler+0x134>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4a2d      	ldr	r2, [pc, #180]	; (8008174 <xPortStartScheduler+0x134>)
 80080be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d0ef      	beq.n	80080b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080d6:	4b27      	ldr	r3, [pc, #156]	; (8008174 <xPortStartScheduler+0x134>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f1c3 0307 	rsb	r3, r3, #7
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d00a      	beq.n	80080f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	60bb      	str	r3, [r7, #8]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080f8:	4b1e      	ldr	r3, [pc, #120]	; (8008174 <xPortStartScheduler+0x134>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <xPortStartScheduler+0x134>)
 8008100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008102:	4b1c      	ldr	r3, [pc, #112]	; (8008174 <xPortStartScheduler+0x134>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800810a:	4a1a      	ldr	r2, [pc, #104]	; (8008174 <xPortStartScheduler+0x134>)
 800810c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008116:	4b18      	ldr	r3, [pc, #96]	; (8008178 <xPortStartScheduler+0x138>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a17      	ldr	r2, [pc, #92]	; (8008178 <xPortStartScheduler+0x138>)
 800811c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <xPortStartScheduler+0x138>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a14      	ldr	r2, [pc, #80]	; (8008178 <xPortStartScheduler+0x138>)
 8008128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800812c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800812e:	f000 f8dd 	bl	80082ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008132:	4b12      	ldr	r3, [pc, #72]	; (800817c <xPortStartScheduler+0x13c>)
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008138:	f000 f8fc 	bl	8008334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <xPortStartScheduler+0x140>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <xPortStartScheduler+0x140>)
 8008142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008148:	f7ff ff66 	bl	8008018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800814c:	f7ff fd34 	bl	8007bb8 <vTaskSwitchContext>
	prvTaskExitError();
 8008150:	f7ff ff1c 	bl	8007f8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	e000ed00 	.word	0xe000ed00
 8008164:	410fc271 	.word	0x410fc271
 8008168:	410fc270 	.word	0x410fc270
 800816c:	e000e400 	.word	0xe000e400
 8008170:	20000b3c 	.word	0x20000b3c
 8008174:	20000b40 	.word	0x20000b40
 8008178:	e000ed20 	.word	0xe000ed20
 800817c:	2000000c 	.word	0x2000000c
 8008180:	e000ef34 	.word	0xe000ef34

08008184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	607b      	str	r3, [r7, #4]
}
 800819c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <vPortEnterCritical+0x58>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3301      	adds	r3, #1
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <vPortEnterCritical+0x58>)
 80081a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081a8:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <vPortEnterCritical+0x58>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d10f      	bne.n	80081d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <vPortEnterCritical+0x5c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	603b      	str	r3, [r7, #0]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <vPortEnterCritical+0x4a>
	}
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	2000000c 	.word	0x2000000c
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <vPortExitCritical+0x50>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <vPortExitCritical+0x24>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	607b      	str	r3, [r7, #4]
}
 8008204:	bf00      	nop
 8008206:	e7fe      	b.n	8008206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <vPortExitCritical+0x50>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3b01      	subs	r3, #1
 800820e:	4a09      	ldr	r2, [pc, #36]	; (8008234 <vPortExitCritical+0x50>)
 8008210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <vPortExitCritical+0x50>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <vPortExitCritical+0x42>
 800821a:	2300      	movs	r3, #0
 800821c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	2000000c 	.word	0x2000000c
	...

08008240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008240:	f3ef 8009 	mrs	r0, PSP
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <pxCurrentTCBConst>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f01e 0f10 	tst.w	lr, #16
 8008250:	bf08      	it	eq
 8008252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825a:	6010      	str	r0, [r2, #0]
 800825c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008264:	f380 8811 	msr	BASEPRI, r0
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f7ff fca2 	bl	8007bb8 <vTaskSwitchContext>
 8008274:	f04f 0000 	mov.w	r0, #0
 8008278:	f380 8811 	msr	BASEPRI, r0
 800827c:	bc09      	pop	{r0, r3}
 800827e:	6819      	ldr	r1, [r3, #0]
 8008280:	6808      	ldr	r0, [r1, #0]
 8008282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008286:	f01e 0f10 	tst.w	lr, #16
 800828a:	bf08      	it	eq
 800828c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008290:	f380 8809 	msr	PSP, r0
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	f3af 8000 	nop.w

080082a0 <pxCurrentTCBConst>:
 80082a0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop

080082a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	607b      	str	r3, [r7, #4]
}
 80082c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082c2:	f7ff fbc1 	bl	8007a48 <xTaskIncrementTick>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082cc:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <xPortSysTickHandler+0x40>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	2300      	movs	r3, #0
 80082d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f383 8811 	msr	BASEPRI, r3
}
 80082de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082e0:	bf00      	nop
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082f0:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <vPortSetupTimerInterrupt+0x34>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <vPortSetupTimerInterrupt+0x38>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <vPortSetupTimerInterrupt+0x3c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0a      	ldr	r2, [pc, #40]	; (800832c <vPortSetupTimerInterrupt+0x40>)
 8008302:	fba2 2303 	umull	r2, r3, r2, r3
 8008306:	099b      	lsrs	r3, r3, #6
 8008308:	4a09      	ldr	r2, [pc, #36]	; (8008330 <vPortSetupTimerInterrupt+0x44>)
 800830a:	3b01      	subs	r3, #1
 800830c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800830e:	4b04      	ldr	r3, [pc, #16]	; (8008320 <vPortSetupTimerInterrupt+0x34>)
 8008310:	2207      	movs	r2, #7
 8008312:	601a      	str	r2, [r3, #0]
}
 8008314:	bf00      	nop
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	e000e010 	.word	0xe000e010
 8008324:	e000e018 	.word	0xe000e018
 8008328:	20000000 	.word	0x20000000
 800832c:	10624dd3 	.word	0x10624dd3
 8008330:	e000e014 	.word	0xe000e014

08008334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008344 <vPortEnableVFP+0x10>
 8008338:	6801      	ldr	r1, [r0, #0]
 800833a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800833e:	6001      	str	r1, [r0, #0]
 8008340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008342:	bf00      	nop
 8008344:	e000ed88 	.word	0xe000ed88

08008348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008354:	f7ff face 	bl	80078f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008358:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <pvPortMalloc+0x180>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008360:	f000 f920 	bl	80085a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008364:	4b59      	ldr	r3, [pc, #356]	; (80084cc <pvPortMalloc+0x184>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8093 	bne.w	8008498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01d      	beq.n	80083b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008378:	2208      	movs	r2, #8
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d014      	beq.n	80083b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f023 0307 	bic.w	r3, r3, #7
 8008390:	3308      	adds	r3, #8
 8008392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <pvPortMalloc+0x6c>
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d06e      	beq.n	8008498 <pvPortMalloc+0x150>
 80083ba:	4b45      	ldr	r3, [pc, #276]	; (80084d0 <pvPortMalloc+0x188>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d869      	bhi.n	8008498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083c4:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <pvPortMalloc+0x18c>)
 80083c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083c8:	4b42      	ldr	r3, [pc, #264]	; (80084d4 <pvPortMalloc+0x18c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ce:	e004      	b.n	80083da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d903      	bls.n	80083ec <pvPortMalloc+0xa4>
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f1      	bne.n	80083d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083ec:	4b36      	ldr	r3, [pc, #216]	; (80084c8 <pvPortMalloc+0x180>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d050      	beq.n	8008498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2208      	movs	r2, #8
 80083fc:	4413      	add	r3, r2
 80083fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	1ad2      	subs	r2, r2, r3
 8008410:	2308      	movs	r3, #8
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	429a      	cmp	r2, r3
 8008416:	d91f      	bls.n	8008458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <pvPortMalloc+0xf8>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	613b      	str	r3, [r7, #16]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	1ad2      	subs	r2, r2, r3
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008452:	69b8      	ldr	r0, [r7, #24]
 8008454:	f000 f908 	bl	8008668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008458:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <pvPortMalloc+0x188>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <pvPortMalloc+0x188>)
 8008464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008466:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <pvPortMalloc+0x188>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <pvPortMalloc+0x190>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d203      	bcs.n	800847a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <pvPortMalloc+0x188>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <pvPortMalloc+0x190>)
 8008478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <pvPortMalloc+0x184>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	431a      	orrs	r2, r3
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <pvPortMalloc+0x194>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3301      	adds	r3, #1
 8008494:	4a11      	ldr	r2, [pc, #68]	; (80084dc <pvPortMalloc+0x194>)
 8008496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008498:	f7ff fa3a 	bl	8007910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <pvPortMalloc+0x174>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	60fb      	str	r3, [r7, #12]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <pvPortMalloc+0x172>
	return pvReturn;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3728      	adds	r7, #40	; 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	2000474c 	.word	0x2000474c
 80084cc:	20004760 	.word	0x20004760
 80084d0:	20004750 	.word	0x20004750
 80084d4:	20004744 	.word	0x20004744
 80084d8:	20004754 	.word	0x20004754
 80084dc:	20004758 	.word	0x20004758

080084e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d04d      	beq.n	800858e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084f2:	2308      	movs	r3, #8
 80084f4:	425b      	negs	r3, r3
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4413      	add	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	4b24      	ldr	r3, [pc, #144]	; (8008598 <vPortFree+0xb8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <vPortFree+0x44>
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60fb      	str	r3, [r7, #12]
}
 8008520:	bf00      	nop
 8008522:	e7fe      	b.n	8008522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <vPortFree+0x62>
	__asm volatile
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	60bb      	str	r3, [r7, #8]
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <vPortFree+0xb8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4013      	ands	r3, r2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01e      	beq.n	800858e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11a      	bne.n	800858e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <vPortFree+0xb8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	43db      	mvns	r3, r3
 8008562:	401a      	ands	r2, r3
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008568:	f7ff f9c4 	bl	80078f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	4b0a      	ldr	r3, [pc, #40]	; (800859c <vPortFree+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4413      	add	r3, r2
 8008576:	4a09      	ldr	r2, [pc, #36]	; (800859c <vPortFree+0xbc>)
 8008578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800857a:	6938      	ldr	r0, [r7, #16]
 800857c:	f000 f874 	bl	8008668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <vPortFree+0xc0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	4a06      	ldr	r2, [pc, #24]	; (80085a0 <vPortFree+0xc0>)
 8008588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800858a:	f7ff f9c1 	bl	8007910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800858e:	bf00      	nop
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20004760 	.word	0x20004760
 800859c:	20004750 	.word	0x20004750
 80085a0:	2000475c 	.word	0x2000475c

080085a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <prvHeapInit+0xac>)
 80085b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3307      	adds	r3, #7
 80085c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <prvHeapInit+0xac>)
 80085d4:	4413      	add	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085dc:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <prvHeapInit+0xb0>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <prvHeapInit+0xb0>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	4413      	add	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085f0:	2208      	movs	r2, #8
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0307 	bic.w	r3, r3, #7
 80085fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <prvHeapInit+0xb4>)
 8008604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <prvHeapInit+0xb4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860e:	4b12      	ldr	r3, [pc, #72]	; (8008658 <prvHeapInit+0xb4>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	1ad2      	subs	r2, r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvHeapInit+0xb4>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <prvHeapInit+0xb8>)
 8008632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <prvHeapInit+0xbc>)
 800863a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800863c:	4b09      	ldr	r3, [pc, #36]	; (8008664 <prvHeapInit+0xc0>)
 800863e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000b44 	.word	0x20000b44
 8008654:	20004744 	.word	0x20004744
 8008658:	2000474c 	.word	0x2000474c
 800865c:	20004754 	.word	0x20004754
 8008660:	20004750 	.word	0x20004750
 8008664:	20004760 	.word	0x20004760

08008668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <prvInsertBlockIntoFreeList+0xac>)
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e002      	b.n	800867c <prvInsertBlockIntoFreeList+0x14>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d8f7      	bhi.n	8008676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	4413      	add	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	429a      	cmp	r2, r3
 8008696:	d108      	bne.n	80086aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	441a      	add	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	441a      	add	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d118      	bne.n	80086f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d00d      	beq.n	80086e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	441a      	add	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e008      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvInsertBlockIntoFreeList+0xb0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d002      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20004744 	.word	0x20004744
 8008718:	2000474c 	.word	0x2000474c

0800871c <memset>:
 800871c:	4402      	add	r2, r0
 800871e:	4603      	mov	r3, r0
 8008720:	4293      	cmp	r3, r2
 8008722:	d100      	bne.n	8008726 <memset+0xa>
 8008724:	4770      	bx	lr
 8008726:	f803 1b01 	strb.w	r1, [r3], #1
 800872a:	e7f9      	b.n	8008720 <memset+0x4>

0800872c <__errno>:
 800872c:	4b01      	ldr	r3, [pc, #4]	; (8008734 <__errno+0x8>)
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	2000005c 	.word	0x2000005c

08008738 <__libc_init_array>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4d0d      	ldr	r5, [pc, #52]	; (8008770 <__libc_init_array+0x38>)
 800873c:	4c0d      	ldr	r4, [pc, #52]	; (8008774 <__libc_init_array+0x3c>)
 800873e:	1b64      	subs	r4, r4, r5
 8008740:	10a4      	asrs	r4, r4, #2
 8008742:	2600      	movs	r6, #0
 8008744:	42a6      	cmp	r6, r4
 8008746:	d109      	bne.n	800875c <__libc_init_array+0x24>
 8008748:	4d0b      	ldr	r5, [pc, #44]	; (8008778 <__libc_init_array+0x40>)
 800874a:	4c0c      	ldr	r4, [pc, #48]	; (800877c <__libc_init_array+0x44>)
 800874c:	f002 f9fc 	bl	800ab48 <_init>
 8008750:	1b64      	subs	r4, r4, r5
 8008752:	10a4      	asrs	r4, r4, #2
 8008754:	2600      	movs	r6, #0
 8008756:	42a6      	cmp	r6, r4
 8008758:	d105      	bne.n	8008766 <__libc_init_array+0x2e>
 800875a:	bd70      	pop	{r4, r5, r6, pc}
 800875c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008760:	4798      	blx	r3
 8008762:	3601      	adds	r6, #1
 8008764:	e7ee      	b.n	8008744 <__libc_init_array+0xc>
 8008766:	f855 3b04 	ldr.w	r3, [r5], #4
 800876a:	4798      	blx	r3
 800876c:	3601      	adds	r6, #1
 800876e:	e7f2      	b.n	8008756 <__libc_init_array+0x1e>
 8008770:	0800ae78 	.word	0x0800ae78
 8008774:	0800ae78 	.word	0x0800ae78
 8008778:	0800ae78 	.word	0x0800ae78
 800877c:	0800ae7c 	.word	0x0800ae7c

08008780 <atan2>:
 8008780:	f000 bbba 	b.w	8008ef8 <__ieee754_atan2>

08008784 <pow>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	ed2d 8b02 	vpush	{d8}
 800878a:	eeb0 8a40 	vmov.f32	s16, s0
 800878e:	eef0 8a60 	vmov.f32	s17, s1
 8008792:	ec55 4b11 	vmov	r4, r5, d1
 8008796:	f000 fc77 	bl	8009088 <__ieee754_pow>
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	4629      	mov	r1, r5
 80087a2:	ec57 6b10 	vmov	r6, r7, d0
 80087a6:	f7f8 f969 	bl	8000a7c <__aeabi_dcmpun>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d13b      	bne.n	8008826 <pow+0xa2>
 80087ae:	ec51 0b18 	vmov	r0, r1, d8
 80087b2:	2200      	movs	r2, #0
 80087b4:	2300      	movs	r3, #0
 80087b6:	f7f8 f92f 	bl	8000a18 <__aeabi_dcmpeq>
 80087ba:	b1b8      	cbz	r0, 80087ec <pow+0x68>
 80087bc:	2200      	movs	r2, #0
 80087be:	2300      	movs	r3, #0
 80087c0:	4620      	mov	r0, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	f7f8 f928 	bl	8000a18 <__aeabi_dcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d146      	bne.n	800885a <pow+0xd6>
 80087cc:	ec45 4b10 	vmov	d0, r4, r5
 80087d0:	f000 f922 	bl	8008a18 <finite>
 80087d4:	b338      	cbz	r0, 8008826 <pow+0xa2>
 80087d6:	2200      	movs	r2, #0
 80087d8:	2300      	movs	r3, #0
 80087da:	4620      	mov	r0, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	f7f8 f925 	bl	8000a2c <__aeabi_dcmplt>
 80087e2:	b300      	cbz	r0, 8008826 <pow+0xa2>
 80087e4:	f7ff ffa2 	bl	800872c <__errno>
 80087e8:	2322      	movs	r3, #34	; 0x22
 80087ea:	e01b      	b.n	8008824 <pow+0xa0>
 80087ec:	ec47 6b10 	vmov	d0, r6, r7
 80087f0:	f000 f912 	bl	8008a18 <finite>
 80087f4:	b9e0      	cbnz	r0, 8008830 <pow+0xac>
 80087f6:	eeb0 0a48 	vmov.f32	s0, s16
 80087fa:	eef0 0a68 	vmov.f32	s1, s17
 80087fe:	f000 f90b 	bl	8008a18 <finite>
 8008802:	b1a8      	cbz	r0, 8008830 <pow+0xac>
 8008804:	ec45 4b10 	vmov	d0, r4, r5
 8008808:	f000 f906 	bl	8008a18 <finite>
 800880c:	b180      	cbz	r0, 8008830 <pow+0xac>
 800880e:	4632      	mov	r2, r6
 8008810:	463b      	mov	r3, r7
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f8 f931 	bl	8000a7c <__aeabi_dcmpun>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0e2      	beq.n	80087e4 <pow+0x60>
 800881e:	f7ff ff85 	bl	800872c <__errno>
 8008822:	2321      	movs	r3, #33	; 0x21
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	ecbd 8b02 	vpop	{d8}
 800882a:	ec47 6b10 	vmov	d0, r6, r7
 800882e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	4630      	mov	r0, r6
 8008836:	4639      	mov	r1, r7
 8008838:	f7f8 f8ee 	bl	8000a18 <__aeabi_dcmpeq>
 800883c:	2800      	cmp	r0, #0
 800883e:	d0f2      	beq.n	8008826 <pow+0xa2>
 8008840:	eeb0 0a48 	vmov.f32	s0, s16
 8008844:	eef0 0a68 	vmov.f32	s1, s17
 8008848:	f000 f8e6 	bl	8008a18 <finite>
 800884c:	2800      	cmp	r0, #0
 800884e:	d0ea      	beq.n	8008826 <pow+0xa2>
 8008850:	ec45 4b10 	vmov	d0, r4, r5
 8008854:	f000 f8e0 	bl	8008a18 <finite>
 8008858:	e7c3      	b.n	80087e2 <pow+0x5e>
 800885a:	4f01      	ldr	r7, [pc, #4]	; (8008860 <pow+0xdc>)
 800885c:	2600      	movs	r6, #0
 800885e:	e7e2      	b.n	8008826 <pow+0xa2>
 8008860:	3ff00000 	.word	0x3ff00000

08008864 <sqrt>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	ed2d 8b02 	vpush	{d8}
 800886a:	ec55 4b10 	vmov	r4, r5, d0
 800886e:	f000 f8df 	bl	8008a30 <__ieee754_sqrt>
 8008872:	4622      	mov	r2, r4
 8008874:	462b      	mov	r3, r5
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	eeb0 8a40 	vmov.f32	s16, s0
 800887e:	eef0 8a60 	vmov.f32	s17, s1
 8008882:	f7f8 f8fb 	bl	8000a7c <__aeabi_dcmpun>
 8008886:	b990      	cbnz	r0, 80088ae <sqrt+0x4a>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	4620      	mov	r0, r4
 800888e:	4629      	mov	r1, r5
 8008890:	f7f8 f8cc 	bl	8000a2c <__aeabi_dcmplt>
 8008894:	b158      	cbz	r0, 80088ae <sqrt+0x4a>
 8008896:	f7ff ff49 	bl	800872c <__errno>
 800889a:	2321      	movs	r3, #33	; 0x21
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	2200      	movs	r2, #0
 80088a0:	2300      	movs	r3, #0
 80088a2:	4610      	mov	r0, r2
 80088a4:	4619      	mov	r1, r3
 80088a6:	f7f7 ff79 	bl	800079c <__aeabi_ddiv>
 80088aa:	ec41 0b18 	vmov	d8, r0, r1
 80088ae:	eeb0 0a48 	vmov.f32	s0, s16
 80088b2:	eef0 0a68 	vmov.f32	s1, s17
 80088b6:	ecbd 8b02 	vpop	{d8}
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	0000      	movs	r0, r0
	...

080088c0 <cos>:
 80088c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088c2:	ec53 2b10 	vmov	r2, r3, d0
 80088c6:	4826      	ldr	r0, [pc, #152]	; (8008960 <cos+0xa0>)
 80088c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088cc:	4281      	cmp	r1, r0
 80088ce:	dc06      	bgt.n	80088de <cos+0x1e>
 80088d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008958 <cos+0x98>
 80088d4:	b005      	add	sp, #20
 80088d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80088da:	f000 b985 	b.w	8008be8 <__kernel_cos>
 80088de:	4821      	ldr	r0, [pc, #132]	; (8008964 <cos+0xa4>)
 80088e0:	4281      	cmp	r1, r0
 80088e2:	dd09      	ble.n	80088f8 <cos+0x38>
 80088e4:	ee10 0a10 	vmov	r0, s0
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f7 fc75 	bl	80001d8 <__aeabi_dsub>
 80088ee:	ec41 0b10 	vmov	d0, r0, r1
 80088f2:	b005      	add	sp, #20
 80088f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088f8:	4668      	mov	r0, sp
 80088fa:	f001 f8f1 	bl	8009ae0 <__ieee754_rem_pio2>
 80088fe:	f000 0003 	and.w	r0, r0, #3
 8008902:	2801      	cmp	r0, #1
 8008904:	d00b      	beq.n	800891e <cos+0x5e>
 8008906:	2802      	cmp	r0, #2
 8008908:	d016      	beq.n	8008938 <cos+0x78>
 800890a:	b9e0      	cbnz	r0, 8008946 <cos+0x86>
 800890c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008910:	ed9d 0b00 	vldr	d0, [sp]
 8008914:	f000 f968 	bl	8008be8 <__kernel_cos>
 8008918:	ec51 0b10 	vmov	r0, r1, d0
 800891c:	e7e7      	b.n	80088ee <cos+0x2e>
 800891e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008922:	ed9d 0b00 	vldr	d0, [sp]
 8008926:	f000 fa27 	bl	8008d78 <__kernel_sin>
 800892a:	ec53 2b10 	vmov	r2, r3, d0
 800892e:	ee10 0a10 	vmov	r0, s0
 8008932:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008936:	e7da      	b.n	80088ee <cos+0x2e>
 8008938:	ed9d 1b02 	vldr	d1, [sp, #8]
 800893c:	ed9d 0b00 	vldr	d0, [sp]
 8008940:	f000 f952 	bl	8008be8 <__kernel_cos>
 8008944:	e7f1      	b.n	800892a <cos+0x6a>
 8008946:	ed9d 1b02 	vldr	d1, [sp, #8]
 800894a:	ed9d 0b00 	vldr	d0, [sp]
 800894e:	2001      	movs	r0, #1
 8008950:	f000 fa12 	bl	8008d78 <__kernel_sin>
 8008954:	e7e0      	b.n	8008918 <cos+0x58>
 8008956:	bf00      	nop
	...
 8008960:	3fe921fb 	.word	0x3fe921fb
 8008964:	7fefffff 	.word	0x7fefffff

08008968 <sin>:
 8008968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800896a:	ec53 2b10 	vmov	r2, r3, d0
 800896e:	4828      	ldr	r0, [pc, #160]	; (8008a10 <sin+0xa8>)
 8008970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008974:	4281      	cmp	r1, r0
 8008976:	dc07      	bgt.n	8008988 <sin+0x20>
 8008978:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008a08 <sin+0xa0>
 800897c:	2000      	movs	r0, #0
 800897e:	b005      	add	sp, #20
 8008980:	f85d eb04 	ldr.w	lr, [sp], #4
 8008984:	f000 b9f8 	b.w	8008d78 <__kernel_sin>
 8008988:	4822      	ldr	r0, [pc, #136]	; (8008a14 <sin+0xac>)
 800898a:	4281      	cmp	r1, r0
 800898c:	dd09      	ble.n	80089a2 <sin+0x3a>
 800898e:	ee10 0a10 	vmov	r0, s0
 8008992:	4619      	mov	r1, r3
 8008994:	f7f7 fc20 	bl	80001d8 <__aeabi_dsub>
 8008998:	ec41 0b10 	vmov	d0, r0, r1
 800899c:	b005      	add	sp, #20
 800899e:	f85d fb04 	ldr.w	pc, [sp], #4
 80089a2:	4668      	mov	r0, sp
 80089a4:	f001 f89c 	bl	8009ae0 <__ieee754_rem_pio2>
 80089a8:	f000 0003 	and.w	r0, r0, #3
 80089ac:	2801      	cmp	r0, #1
 80089ae:	d00c      	beq.n	80089ca <sin+0x62>
 80089b0:	2802      	cmp	r0, #2
 80089b2:	d011      	beq.n	80089d8 <sin+0x70>
 80089b4:	b9f0      	cbnz	r0, 80089f4 <sin+0x8c>
 80089b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089ba:	ed9d 0b00 	vldr	d0, [sp]
 80089be:	2001      	movs	r0, #1
 80089c0:	f000 f9da 	bl	8008d78 <__kernel_sin>
 80089c4:	ec51 0b10 	vmov	r0, r1, d0
 80089c8:	e7e6      	b.n	8008998 <sin+0x30>
 80089ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089ce:	ed9d 0b00 	vldr	d0, [sp]
 80089d2:	f000 f909 	bl	8008be8 <__kernel_cos>
 80089d6:	e7f5      	b.n	80089c4 <sin+0x5c>
 80089d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089dc:	ed9d 0b00 	vldr	d0, [sp]
 80089e0:	2001      	movs	r0, #1
 80089e2:	f000 f9c9 	bl	8008d78 <__kernel_sin>
 80089e6:	ec53 2b10 	vmov	r2, r3, d0
 80089ea:	ee10 0a10 	vmov	r0, s0
 80089ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089f2:	e7d1      	b.n	8008998 <sin+0x30>
 80089f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089f8:	ed9d 0b00 	vldr	d0, [sp]
 80089fc:	f000 f8f4 	bl	8008be8 <__kernel_cos>
 8008a00:	e7f1      	b.n	80089e6 <sin+0x7e>
 8008a02:	bf00      	nop
 8008a04:	f3af 8000 	nop.w
	...
 8008a10:	3fe921fb 	.word	0x3fe921fb
 8008a14:	7fefffff 	.word	0x7fefffff

08008a18 <finite>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	ed8d 0b00 	vstr	d0, [sp]
 8008a1e:	9801      	ldr	r0, [sp, #4]
 8008a20:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008a24:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008a28:	0fc0      	lsrs	r0, r0, #31
 8008a2a:	b002      	add	sp, #8
 8008a2c:	4770      	bx	lr
	...

08008a30 <__ieee754_sqrt>:
 8008a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	ec55 4b10 	vmov	r4, r5, d0
 8008a38:	4e67      	ldr	r6, [pc, #412]	; (8008bd8 <__ieee754_sqrt+0x1a8>)
 8008a3a:	43ae      	bics	r6, r5
 8008a3c:	ee10 0a10 	vmov	r0, s0
 8008a40:	ee10 2a10 	vmov	r2, s0
 8008a44:	4629      	mov	r1, r5
 8008a46:	462b      	mov	r3, r5
 8008a48:	d10d      	bne.n	8008a66 <__ieee754_sqrt+0x36>
 8008a4a:	f7f7 fd7d 	bl	8000548 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	f7f7 fbc1 	bl	80001dc <__adddf3>
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	ec45 4b10 	vmov	d0, r4, r5
 8008a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	dc0b      	bgt.n	8008a82 <__ieee754_sqrt+0x52>
 8008a6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a6e:	4326      	orrs	r6, r4
 8008a70:	d0f5      	beq.n	8008a5e <__ieee754_sqrt+0x2e>
 8008a72:	b135      	cbz	r5, 8008a82 <__ieee754_sqrt+0x52>
 8008a74:	f7f7 fbb0 	bl	80001d8 <__aeabi_dsub>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	f7f7 fe8e 	bl	800079c <__aeabi_ddiv>
 8008a80:	e7eb      	b.n	8008a5a <__ieee754_sqrt+0x2a>
 8008a82:	1509      	asrs	r1, r1, #20
 8008a84:	f000 808d 	beq.w	8008ba2 <__ieee754_sqrt+0x172>
 8008a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a8c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a94:	07c9      	lsls	r1, r1, #31
 8008a96:	bf5c      	itt	pl
 8008a98:	005b      	lslpl	r3, r3, #1
 8008a9a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008a9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aa2:	bf58      	it	pl
 8008aa4:	0052      	lslpl	r2, r2, #1
 8008aa6:	2500      	movs	r5, #0
 8008aa8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008aac:	1076      	asrs	r6, r6, #1
 8008aae:	0052      	lsls	r2, r2, #1
 8008ab0:	f04f 0e16 	mov.w	lr, #22
 8008ab4:	46ac      	mov	ip, r5
 8008ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aba:	eb0c 0001 	add.w	r0, ip, r1
 8008abe:	4298      	cmp	r0, r3
 8008ac0:	bfde      	ittt	le
 8008ac2:	1a1b      	suble	r3, r3, r0
 8008ac4:	eb00 0c01 	addle.w	ip, r0, r1
 8008ac8:	186d      	addle	r5, r5, r1
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	f1be 0e01 	subs.w	lr, lr, #1
 8008ad0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008ad4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008ad8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008adc:	d1ed      	bne.n	8008aba <__ieee754_sqrt+0x8a>
 8008ade:	4674      	mov	r4, lr
 8008ae0:	2720      	movs	r7, #32
 8008ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008ae6:	4563      	cmp	r3, ip
 8008ae8:	eb01 000e 	add.w	r0, r1, lr
 8008aec:	dc02      	bgt.n	8008af4 <__ieee754_sqrt+0xc4>
 8008aee:	d113      	bne.n	8008b18 <__ieee754_sqrt+0xe8>
 8008af0:	4290      	cmp	r0, r2
 8008af2:	d811      	bhi.n	8008b18 <__ieee754_sqrt+0xe8>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	eb00 0e01 	add.w	lr, r0, r1
 8008afa:	da57      	bge.n	8008bac <__ieee754_sqrt+0x17c>
 8008afc:	f1be 0f00 	cmp.w	lr, #0
 8008b00:	db54      	blt.n	8008bac <__ieee754_sqrt+0x17c>
 8008b02:	f10c 0801 	add.w	r8, ip, #1
 8008b06:	eba3 030c 	sub.w	r3, r3, ip
 8008b0a:	4290      	cmp	r0, r2
 8008b0c:	bf88      	it	hi
 8008b0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008b12:	1a12      	subs	r2, r2, r0
 8008b14:	440c      	add	r4, r1
 8008b16:	46c4      	mov	ip, r8
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008b20:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008b28:	d1dd      	bne.n	8008ae6 <__ieee754_sqrt+0xb6>
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	d01b      	beq.n	8008b66 <__ieee754_sqrt+0x136>
 8008b2e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008bdc <__ieee754_sqrt+0x1ac>
 8008b32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008be0 <__ieee754_sqrt+0x1b0>
 8008b36:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b3e:	f7f7 fb4b 	bl	80001d8 <__aeabi_dsub>
 8008b42:	e9da 8900 	ldrd	r8, r9, [sl]
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 ff77 	bl	8000a40 <__aeabi_dcmple>
 8008b52:	b140      	cbz	r0, 8008b66 <__ieee754_sqrt+0x136>
 8008b54:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008b58:	e9da 0100 	ldrd	r0, r1, [sl]
 8008b5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008b60:	d126      	bne.n	8008bb0 <__ieee754_sqrt+0x180>
 8008b62:	3501      	adds	r5, #1
 8008b64:	463c      	mov	r4, r7
 8008b66:	106a      	asrs	r2, r5, #1
 8008b68:	0863      	lsrs	r3, r4, #1
 8008b6a:	07e9      	lsls	r1, r5, #31
 8008b6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008b70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008b74:	bf48      	it	mi
 8008b76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b7a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008b7e:	461c      	mov	r4, r3
 8008b80:	e76d      	b.n	8008a5e <__ieee754_sqrt+0x2e>
 8008b82:	0ad3      	lsrs	r3, r2, #11
 8008b84:	3815      	subs	r0, #21
 8008b86:	0552      	lsls	r2, r2, #21
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0fa      	beq.n	8008b82 <__ieee754_sqrt+0x152>
 8008b8c:	02dc      	lsls	r4, r3, #11
 8008b8e:	d50a      	bpl.n	8008ba6 <__ieee754_sqrt+0x176>
 8008b90:	f1c1 0420 	rsb	r4, r1, #32
 8008b94:	fa22 f404 	lsr.w	r4, r2, r4
 8008b98:	1e4d      	subs	r5, r1, #1
 8008b9a:	408a      	lsls	r2, r1
 8008b9c:	4323      	orrs	r3, r4
 8008b9e:	1b41      	subs	r1, r0, r5
 8008ba0:	e772      	b.n	8008a88 <__ieee754_sqrt+0x58>
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	e7f0      	b.n	8008b88 <__ieee754_sqrt+0x158>
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	3101      	adds	r1, #1
 8008baa:	e7ef      	b.n	8008b8c <__ieee754_sqrt+0x15c>
 8008bac:	46e0      	mov	r8, ip
 8008bae:	e7aa      	b.n	8008b06 <__ieee754_sqrt+0xd6>
 8008bb0:	f7f7 fb14 	bl	80001dc <__adddf3>
 8008bb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	f7f7 ff34 	bl	8000a2c <__aeabi_dcmplt>
 8008bc4:	b120      	cbz	r0, 8008bd0 <__ieee754_sqrt+0x1a0>
 8008bc6:	1ca0      	adds	r0, r4, #2
 8008bc8:	bf08      	it	eq
 8008bca:	3501      	addeq	r5, #1
 8008bcc:	3402      	adds	r4, #2
 8008bce:	e7ca      	b.n	8008b66 <__ieee754_sqrt+0x136>
 8008bd0:	3401      	adds	r4, #1
 8008bd2:	f024 0401 	bic.w	r4, r4, #1
 8008bd6:	e7c6      	b.n	8008b66 <__ieee754_sqrt+0x136>
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	20000060 	.word	0x20000060
 8008be0:	20000068 	.word	0x20000068
 8008be4:	00000000 	.word	0x00000000

08008be8 <__kernel_cos>:
 8008be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	ec57 6b10 	vmov	r6, r7, d0
 8008bf0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008bf4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008bf8:	ed8d 1b00 	vstr	d1, [sp]
 8008bfc:	da07      	bge.n	8008c0e <__kernel_cos+0x26>
 8008bfe:	ee10 0a10 	vmov	r0, s0
 8008c02:	4639      	mov	r1, r7
 8008c04:	f7f7 ff50 	bl	8000aa8 <__aeabi_d2iz>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f000 8088 	beq.w	8008d1e <__kernel_cos+0x136>
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463b      	mov	r3, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fc97 	bl	8000548 <__aeabi_dmul>
 8008c1a:	4b51      	ldr	r3, [pc, #324]	; (8008d60 <__kernel_cos+0x178>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460d      	mov	r5, r1
 8008c22:	f7f7 fc91 	bl	8000548 <__aeabi_dmul>
 8008c26:	a340      	add	r3, pc, #256	; (adr r3, 8008d28 <__kernel_cos+0x140>)
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	4682      	mov	sl, r0
 8008c2e:	468b      	mov	fp, r1
 8008c30:	4620      	mov	r0, r4
 8008c32:	4629      	mov	r1, r5
 8008c34:	f7f7 fc88 	bl	8000548 <__aeabi_dmul>
 8008c38:	a33d      	add	r3, pc, #244	; (adr r3, 8008d30 <__kernel_cos+0x148>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 facd 	bl	80001dc <__adddf3>
 8008c42:	4622      	mov	r2, r4
 8008c44:	462b      	mov	r3, r5
 8008c46:	f7f7 fc7f 	bl	8000548 <__aeabi_dmul>
 8008c4a:	a33b      	add	r3, pc, #236	; (adr r3, 8008d38 <__kernel_cos+0x150>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 fac2 	bl	80001d8 <__aeabi_dsub>
 8008c54:	4622      	mov	r2, r4
 8008c56:	462b      	mov	r3, r5
 8008c58:	f7f7 fc76 	bl	8000548 <__aeabi_dmul>
 8008c5c:	a338      	add	r3, pc, #224	; (adr r3, 8008d40 <__kernel_cos+0x158>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fabb 	bl	80001dc <__adddf3>
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	f7f7 fc6d 	bl	8000548 <__aeabi_dmul>
 8008c6e:	a336      	add	r3, pc, #216	; (adr r3, 8008d48 <__kernel_cos+0x160>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	f7f7 fab0 	bl	80001d8 <__aeabi_dsub>
 8008c78:	4622      	mov	r2, r4
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f7f7 fc64 	bl	8000548 <__aeabi_dmul>
 8008c80:	a333      	add	r3, pc, #204	; (adr r3, 8008d50 <__kernel_cos+0x168>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 faa9 	bl	80001dc <__adddf3>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	f7f7 fc5b 	bl	8000548 <__aeabi_dmul>
 8008c92:	4622      	mov	r2, r4
 8008c94:	462b      	mov	r3, r5
 8008c96:	f7f7 fc57 	bl	8000548 <__aeabi_dmul>
 8008c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	f7f7 fc4f 	bl	8000548 <__aeabi_dmul>
 8008caa:	460b      	mov	r3, r1
 8008cac:	4602      	mov	r2, r0
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7f7 fa91 	bl	80001d8 <__aeabi_dsub>
 8008cb6:	4b2b      	ldr	r3, [pc, #172]	; (8008d64 <__kernel_cos+0x17c>)
 8008cb8:	4598      	cmp	r8, r3
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	dc10      	bgt.n	8008ce2 <__kernel_cos+0xfa>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4650      	mov	r0, sl
 8008cc6:	4659      	mov	r1, fp
 8008cc8:	f7f7 fa86 	bl	80001d8 <__aeabi_dsub>
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4926      	ldr	r1, [pc, #152]	; (8008d68 <__kernel_cos+0x180>)
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f7f7 fa80 	bl	80001d8 <__aeabi_dsub>
 8008cd8:	ec41 0b10 	vmov	d0, r0, r1
 8008cdc:	b003      	add	sp, #12
 8008cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce2:	4b22      	ldr	r3, [pc, #136]	; (8008d6c <__kernel_cos+0x184>)
 8008ce4:	4920      	ldr	r1, [pc, #128]	; (8008d68 <__kernel_cos+0x180>)
 8008ce6:	4598      	cmp	r8, r3
 8008ce8:	bfcc      	ite	gt
 8008cea:	4d21      	ldrgt	r5, [pc, #132]	; (8008d70 <__kernel_cos+0x188>)
 8008cec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008cf0:	2400      	movs	r4, #0
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f7f7 fa6e 	bl	80001d8 <__aeabi_dsub>
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4680      	mov	r8, r0
 8008d00:	4689      	mov	r9, r1
 8008d02:	462b      	mov	r3, r5
 8008d04:	4650      	mov	r0, sl
 8008d06:	4659      	mov	r1, fp
 8008d08:	f7f7 fa66 	bl	80001d8 <__aeabi_dsub>
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	f7f7 fa62 	bl	80001d8 <__aeabi_dsub>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	e7da      	b.n	8008cd4 <__kernel_cos+0xec>
 8008d1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008d58 <__kernel_cos+0x170>
 8008d22:	e7db      	b.n	8008cdc <__kernel_cos+0xf4>
 8008d24:	f3af 8000 	nop.w
 8008d28:	be8838d4 	.word	0xbe8838d4
 8008d2c:	bda8fae9 	.word	0xbda8fae9
 8008d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d34:	3e21ee9e 	.word	0x3e21ee9e
 8008d38:	809c52ad 	.word	0x809c52ad
 8008d3c:	3e927e4f 	.word	0x3e927e4f
 8008d40:	19cb1590 	.word	0x19cb1590
 8008d44:	3efa01a0 	.word	0x3efa01a0
 8008d48:	16c15177 	.word	0x16c15177
 8008d4c:	3f56c16c 	.word	0x3f56c16c
 8008d50:	5555554c 	.word	0x5555554c
 8008d54:	3fa55555 	.word	0x3fa55555
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	3ff00000 	.word	0x3ff00000
 8008d60:	3fe00000 	.word	0x3fe00000
 8008d64:	3fd33332 	.word	0x3fd33332
 8008d68:	3ff00000 	.word	0x3ff00000
 8008d6c:	3fe90000 	.word	0x3fe90000
 8008d70:	3fd20000 	.word	0x3fd20000
 8008d74:	00000000 	.word	0x00000000

08008d78 <__kernel_sin>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	ed2d 8b04 	vpush	{d8-d9}
 8008d80:	eeb0 8a41 	vmov.f32	s16, s2
 8008d84:	eef0 8a61 	vmov.f32	s17, s3
 8008d88:	ec55 4b10 	vmov	r4, r5, d0
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008d96:	9001      	str	r0, [sp, #4]
 8008d98:	da06      	bge.n	8008da8 <__kernel_sin+0x30>
 8008d9a:	ee10 0a10 	vmov	r0, s0
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fe82 	bl	8000aa8 <__aeabi_d2iz>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d051      	beq.n	8008e4c <__kernel_sin+0xd4>
 8008da8:	4622      	mov	r2, r4
 8008daa:	462b      	mov	r3, r5
 8008dac:	4620      	mov	r0, r4
 8008dae:	4629      	mov	r1, r5
 8008db0:	f7f7 fbca 	bl	8000548 <__aeabi_dmul>
 8008db4:	4682      	mov	sl, r0
 8008db6:	468b      	mov	fp, r1
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	4629      	mov	r1, r5
 8008dc0:	f7f7 fbc2 	bl	8000548 <__aeabi_dmul>
 8008dc4:	a341      	add	r3, pc, #260	; (adr r3, 8008ecc <__kernel_sin+0x154>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	4680      	mov	r8, r0
 8008dcc:	4689      	mov	r9, r1
 8008dce:	4650      	mov	r0, sl
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	f7f7 fbb9 	bl	8000548 <__aeabi_dmul>
 8008dd6:	a33f      	add	r3, pc, #252	; (adr r3, 8008ed4 <__kernel_sin+0x15c>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 f9fc 	bl	80001d8 <__aeabi_dsub>
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	f7f7 fbb0 	bl	8000548 <__aeabi_dmul>
 8008de8:	a33c      	add	r3, pc, #240	; (adr r3, 8008edc <__kernel_sin+0x164>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f7f7 f9f5 	bl	80001dc <__adddf3>
 8008df2:	4652      	mov	r2, sl
 8008df4:	465b      	mov	r3, fp
 8008df6:	f7f7 fba7 	bl	8000548 <__aeabi_dmul>
 8008dfa:	a33a      	add	r3, pc, #232	; (adr r3, 8008ee4 <__kernel_sin+0x16c>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 f9ea 	bl	80001d8 <__aeabi_dsub>
 8008e04:	4652      	mov	r2, sl
 8008e06:	465b      	mov	r3, fp
 8008e08:	f7f7 fb9e 	bl	8000548 <__aeabi_dmul>
 8008e0c:	a337      	add	r3, pc, #220	; (adr r3, 8008eec <__kernel_sin+0x174>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 f9e3 	bl	80001dc <__adddf3>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	4606      	mov	r6, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	b9eb      	cbnz	r3, 8008e5a <__kernel_sin+0xe2>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4650      	mov	r0, sl
 8008e24:	4659      	mov	r1, fp
 8008e26:	f7f7 fb8f 	bl	8000548 <__aeabi_dmul>
 8008e2a:	a325      	add	r3, pc, #148	; (adr r3, 8008ec0 <__kernel_sin+0x148>)
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	f7f7 f9d2 	bl	80001d8 <__aeabi_dsub>
 8008e34:	4642      	mov	r2, r8
 8008e36:	464b      	mov	r3, r9
 8008e38:	f7f7 fb86 	bl	8000548 <__aeabi_dmul>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	4620      	mov	r0, r4
 8008e42:	4629      	mov	r1, r5
 8008e44:	f7f7 f9ca 	bl	80001dc <__adddf3>
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	ec45 4b10 	vmov	d0, r4, r5
 8008e50:	b003      	add	sp, #12
 8008e52:	ecbd 8b04 	vpop	{d8-d9}
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ec8 <__kernel_sin+0x150>)
 8008e5c:	ec51 0b18 	vmov	r0, r1, d8
 8008e60:	2200      	movs	r2, #0
 8008e62:	f7f7 fb71 	bl	8000548 <__aeabi_dmul>
 8008e66:	4632      	mov	r2, r6
 8008e68:	ec41 0b19 	vmov	d9, r0, r1
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	f7f7 fb69 	bl	8000548 <__aeabi_dmul>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	ec51 0b19 	vmov	r0, r1, d9
 8008e7e:	f7f7 f9ab 	bl	80001d8 <__aeabi_dsub>
 8008e82:	4652      	mov	r2, sl
 8008e84:	465b      	mov	r3, fp
 8008e86:	f7f7 fb5f 	bl	8000548 <__aeabi_dmul>
 8008e8a:	ec53 2b18 	vmov	r2, r3, d8
 8008e8e:	f7f7 f9a3 	bl	80001d8 <__aeabi_dsub>
 8008e92:	a30b      	add	r3, pc, #44	; (adr r3, 8008ec0 <__kernel_sin+0x148>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 fb52 	bl	8000548 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 f996 	bl	80001dc <__adddf3>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f7f7 f98e 	bl	80001d8 <__aeabi_dsub>
 8008ebc:	e7c4      	b.n	8008e48 <__kernel_sin+0xd0>
 8008ebe:	bf00      	nop
 8008ec0:	55555549 	.word	0x55555549
 8008ec4:	3fc55555 	.word	0x3fc55555
 8008ec8:	3fe00000 	.word	0x3fe00000
 8008ecc:	5acfd57c 	.word	0x5acfd57c
 8008ed0:	3de5d93a 	.word	0x3de5d93a
 8008ed4:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ed8:	3e5ae5e6 	.word	0x3e5ae5e6
 8008edc:	57b1fe7d 	.word	0x57b1fe7d
 8008ee0:	3ec71de3 	.word	0x3ec71de3
 8008ee4:	19c161d5 	.word	0x19c161d5
 8008ee8:	3f2a01a0 	.word	0x3f2a01a0
 8008eec:	1110f8a6 	.word	0x1110f8a6
 8008ef0:	3f811111 	.word	0x3f811111
 8008ef4:	00000000 	.word	0x00000000

08008ef8 <__ieee754_atan2>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	ec57 6b11 	vmov	r6, r7, d1
 8008f00:	4273      	negs	r3, r6
 8008f02:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009080 <__ieee754_atan2+0x188>
 8008f06:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008f0a:	4333      	orrs	r3, r6
 8008f0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f10:	4543      	cmp	r3, r8
 8008f12:	ec51 0b10 	vmov	r0, r1, d0
 8008f16:	ee11 5a10 	vmov	r5, s2
 8008f1a:	d80a      	bhi.n	8008f32 <__ieee754_atan2+0x3a>
 8008f1c:	4244      	negs	r4, r0
 8008f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f22:	4304      	orrs	r4, r0
 8008f24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008f28:	4544      	cmp	r4, r8
 8008f2a:	ee10 9a10 	vmov	r9, s0
 8008f2e:	468e      	mov	lr, r1
 8008f30:	d907      	bls.n	8008f42 <__ieee754_atan2+0x4a>
 8008f32:	4632      	mov	r2, r6
 8008f34:	463b      	mov	r3, r7
 8008f36:	f7f7 f951 	bl	80001dc <__adddf3>
 8008f3a:	ec41 0b10 	vmov	d0, r0, r1
 8008f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008f46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f4a:	4334      	orrs	r4, r6
 8008f4c:	d103      	bne.n	8008f56 <__ieee754_atan2+0x5e>
 8008f4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f52:	f000 bfcd 	b.w	8009ef0 <atan>
 8008f56:	17bc      	asrs	r4, r7, #30
 8008f58:	f004 0402 	and.w	r4, r4, #2
 8008f5c:	ea53 0909 	orrs.w	r9, r3, r9
 8008f60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008f64:	d107      	bne.n	8008f76 <__ieee754_atan2+0x7e>
 8008f66:	2c02      	cmp	r4, #2
 8008f68:	d05f      	beq.n	800902a <__ieee754_atan2+0x132>
 8008f6a:	2c03      	cmp	r4, #3
 8008f6c:	d1e5      	bne.n	8008f3a <__ieee754_atan2+0x42>
 8008f6e:	a140      	add	r1, pc, #256	; (adr r1, 8009070 <__ieee754_atan2+0x178>)
 8008f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f74:	e7e1      	b.n	8008f3a <__ieee754_atan2+0x42>
 8008f76:	4315      	orrs	r5, r2
 8008f78:	d106      	bne.n	8008f88 <__ieee754_atan2+0x90>
 8008f7a:	f1be 0f00 	cmp.w	lr, #0
 8008f7e:	da5f      	bge.n	8009040 <__ieee754_atan2+0x148>
 8008f80:	a13d      	add	r1, pc, #244	; (adr r1, 8009078 <__ieee754_atan2+0x180>)
 8008f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f86:	e7d8      	b.n	8008f3a <__ieee754_atan2+0x42>
 8008f88:	4542      	cmp	r2, r8
 8008f8a:	d10f      	bne.n	8008fac <__ieee754_atan2+0xb4>
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f92:	d107      	bne.n	8008fa4 <__ieee754_atan2+0xac>
 8008f94:	2c02      	cmp	r4, #2
 8008f96:	d84c      	bhi.n	8009032 <__ieee754_atan2+0x13a>
 8008f98:	4b33      	ldr	r3, [pc, #204]	; (8009068 <__ieee754_atan2+0x170>)
 8008f9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fa2:	e7ca      	b.n	8008f3a <__ieee754_atan2+0x42>
 8008fa4:	2c02      	cmp	r4, #2
 8008fa6:	d848      	bhi.n	800903a <__ieee754_atan2+0x142>
 8008fa8:	4b30      	ldr	r3, [pc, #192]	; (800906c <__ieee754_atan2+0x174>)
 8008faa:	e7f6      	b.n	8008f9a <__ieee754_atan2+0xa2>
 8008fac:	4543      	cmp	r3, r8
 8008fae:	d0e4      	beq.n	8008f7a <__ieee754_atan2+0x82>
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008fb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fba:	da1e      	bge.n	8008ffa <__ieee754_atan2+0x102>
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	da01      	bge.n	8008fc4 <__ieee754_atan2+0xcc>
 8008fc0:	323c      	adds	r2, #60	; 0x3c
 8008fc2:	db1e      	blt.n	8009002 <__ieee754_atan2+0x10a>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	f7f7 fbe8 	bl	800079c <__aeabi_ddiv>
 8008fcc:	ec41 0b10 	vmov	d0, r0, r1
 8008fd0:	f001 f92e 	bl	800a230 <fabs>
 8008fd4:	f000 ff8c 	bl	8009ef0 <atan>
 8008fd8:	ec51 0b10 	vmov	r0, r1, d0
 8008fdc:	2c01      	cmp	r4, #1
 8008fde:	d013      	beq.n	8009008 <__ieee754_atan2+0x110>
 8008fe0:	2c02      	cmp	r4, #2
 8008fe2:	d015      	beq.n	8009010 <__ieee754_atan2+0x118>
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d0a8      	beq.n	8008f3a <__ieee754_atan2+0x42>
 8008fe8:	a317      	add	r3, pc, #92	; (adr r3, 8009048 <__ieee754_atan2+0x150>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 f8f3 	bl	80001d8 <__aeabi_dsub>
 8008ff2:	a317      	add	r3, pc, #92	; (adr r3, 8009050 <__ieee754_atan2+0x158>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	e014      	b.n	8009024 <__ieee754_atan2+0x12c>
 8008ffa:	a117      	add	r1, pc, #92	; (adr r1, 8009058 <__ieee754_atan2+0x160>)
 8008ffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009000:	e7ec      	b.n	8008fdc <__ieee754_atan2+0xe4>
 8009002:	2000      	movs	r0, #0
 8009004:	2100      	movs	r1, #0
 8009006:	e7e9      	b.n	8008fdc <__ieee754_atan2+0xe4>
 8009008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800900c:	4619      	mov	r1, r3
 800900e:	e794      	b.n	8008f3a <__ieee754_atan2+0x42>
 8009010:	a30d      	add	r3, pc, #52	; (adr r3, 8009048 <__ieee754_atan2+0x150>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 f8df 	bl	80001d8 <__aeabi_dsub>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	a10c      	add	r1, pc, #48	; (adr r1, 8009050 <__ieee754_atan2+0x158>)
 8009020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009024:	f7f7 f8d8 	bl	80001d8 <__aeabi_dsub>
 8009028:	e787      	b.n	8008f3a <__ieee754_atan2+0x42>
 800902a:	a109      	add	r1, pc, #36	; (adr r1, 8009050 <__ieee754_atan2+0x158>)
 800902c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009030:	e783      	b.n	8008f3a <__ieee754_atan2+0x42>
 8009032:	a10b      	add	r1, pc, #44	; (adr r1, 8009060 <__ieee754_atan2+0x168>)
 8009034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009038:	e77f      	b.n	8008f3a <__ieee754_atan2+0x42>
 800903a:	2000      	movs	r0, #0
 800903c:	2100      	movs	r1, #0
 800903e:	e77c      	b.n	8008f3a <__ieee754_atan2+0x42>
 8009040:	a105      	add	r1, pc, #20	; (adr r1, 8009058 <__ieee754_atan2+0x160>)
 8009042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009046:	e778      	b.n	8008f3a <__ieee754_atan2+0x42>
 8009048:	33145c07 	.word	0x33145c07
 800904c:	3ca1a626 	.word	0x3ca1a626
 8009050:	54442d18 	.word	0x54442d18
 8009054:	400921fb 	.word	0x400921fb
 8009058:	54442d18 	.word	0x54442d18
 800905c:	3ff921fb 	.word	0x3ff921fb
 8009060:	54442d18 	.word	0x54442d18
 8009064:	3fe921fb 	.word	0x3fe921fb
 8009068:	0800abf8 	.word	0x0800abf8
 800906c:	0800ac10 	.word	0x0800ac10
 8009070:	54442d18 	.word	0x54442d18
 8009074:	c00921fb 	.word	0xc00921fb
 8009078:	54442d18 	.word	0x54442d18
 800907c:	bff921fb 	.word	0xbff921fb
 8009080:	7ff00000 	.word	0x7ff00000
 8009084:	00000000 	.word	0x00000000

08009088 <__ieee754_pow>:
 8009088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	ed2d 8b06 	vpush	{d8-d10}
 8009090:	b089      	sub	sp, #36	; 0x24
 8009092:	ed8d 1b00 	vstr	d1, [sp]
 8009096:	e9dd 2900 	ldrd	r2, r9, [sp]
 800909a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800909e:	ea58 0102 	orrs.w	r1, r8, r2
 80090a2:	ec57 6b10 	vmov	r6, r7, d0
 80090a6:	d115      	bne.n	80090d4 <__ieee754_pow+0x4c>
 80090a8:	19b3      	adds	r3, r6, r6
 80090aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80090ae:	4152      	adcs	r2, r2
 80090b0:	4299      	cmp	r1, r3
 80090b2:	4b89      	ldr	r3, [pc, #548]	; (80092d8 <__ieee754_pow+0x250>)
 80090b4:	4193      	sbcs	r3, r2
 80090b6:	f080 84d1 	bcs.w	8009a5c <__ieee754_pow+0x9d4>
 80090ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090be:	4630      	mov	r0, r6
 80090c0:	4639      	mov	r1, r7
 80090c2:	f7f7 f88b 	bl	80001dc <__adddf3>
 80090c6:	ec41 0b10 	vmov	d0, r0, r1
 80090ca:	b009      	add	sp, #36	; 0x24
 80090cc:	ecbd 8b06 	vpop	{d8-d10}
 80090d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d4:	4b81      	ldr	r3, [pc, #516]	; (80092dc <__ieee754_pow+0x254>)
 80090d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80090da:	429c      	cmp	r4, r3
 80090dc:	ee10 aa10 	vmov	sl, s0
 80090e0:	463d      	mov	r5, r7
 80090e2:	dc06      	bgt.n	80090f2 <__ieee754_pow+0x6a>
 80090e4:	d101      	bne.n	80090ea <__ieee754_pow+0x62>
 80090e6:	2e00      	cmp	r6, #0
 80090e8:	d1e7      	bne.n	80090ba <__ieee754_pow+0x32>
 80090ea:	4598      	cmp	r8, r3
 80090ec:	dc01      	bgt.n	80090f2 <__ieee754_pow+0x6a>
 80090ee:	d10f      	bne.n	8009110 <__ieee754_pow+0x88>
 80090f0:	b172      	cbz	r2, 8009110 <__ieee754_pow+0x88>
 80090f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80090f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80090fa:	ea55 050a 	orrs.w	r5, r5, sl
 80090fe:	d1dc      	bne.n	80090ba <__ieee754_pow+0x32>
 8009100:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009104:	18db      	adds	r3, r3, r3
 8009106:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800910a:	4152      	adcs	r2, r2
 800910c:	429d      	cmp	r5, r3
 800910e:	e7d0      	b.n	80090b2 <__ieee754_pow+0x2a>
 8009110:	2d00      	cmp	r5, #0
 8009112:	da3b      	bge.n	800918c <__ieee754_pow+0x104>
 8009114:	4b72      	ldr	r3, [pc, #456]	; (80092e0 <__ieee754_pow+0x258>)
 8009116:	4598      	cmp	r8, r3
 8009118:	dc51      	bgt.n	80091be <__ieee754_pow+0x136>
 800911a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800911e:	4598      	cmp	r8, r3
 8009120:	f340 84ab 	ble.w	8009a7a <__ieee754_pow+0x9f2>
 8009124:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800912c:	2b14      	cmp	r3, #20
 800912e:	dd0f      	ble.n	8009150 <__ieee754_pow+0xc8>
 8009130:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009134:	fa22 f103 	lsr.w	r1, r2, r3
 8009138:	fa01 f303 	lsl.w	r3, r1, r3
 800913c:	4293      	cmp	r3, r2
 800913e:	f040 849c 	bne.w	8009a7a <__ieee754_pow+0x9f2>
 8009142:	f001 0101 	and.w	r1, r1, #1
 8009146:	f1c1 0302 	rsb	r3, r1, #2
 800914a:	9304      	str	r3, [sp, #16]
 800914c:	b182      	cbz	r2, 8009170 <__ieee754_pow+0xe8>
 800914e:	e05f      	b.n	8009210 <__ieee754_pow+0x188>
 8009150:	2a00      	cmp	r2, #0
 8009152:	d15b      	bne.n	800920c <__ieee754_pow+0x184>
 8009154:	f1c3 0314 	rsb	r3, r3, #20
 8009158:	fa48 f103 	asr.w	r1, r8, r3
 800915c:	fa01 f303 	lsl.w	r3, r1, r3
 8009160:	4543      	cmp	r3, r8
 8009162:	f040 8487 	bne.w	8009a74 <__ieee754_pow+0x9ec>
 8009166:	f001 0101 	and.w	r1, r1, #1
 800916a:	f1c1 0302 	rsb	r3, r1, #2
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	4b5c      	ldr	r3, [pc, #368]	; (80092e4 <__ieee754_pow+0x25c>)
 8009172:	4598      	cmp	r8, r3
 8009174:	d132      	bne.n	80091dc <__ieee754_pow+0x154>
 8009176:	f1b9 0f00 	cmp.w	r9, #0
 800917a:	f280 8477 	bge.w	8009a6c <__ieee754_pow+0x9e4>
 800917e:	4959      	ldr	r1, [pc, #356]	; (80092e4 <__ieee754_pow+0x25c>)
 8009180:	4632      	mov	r2, r6
 8009182:	463b      	mov	r3, r7
 8009184:	2000      	movs	r0, #0
 8009186:	f7f7 fb09 	bl	800079c <__aeabi_ddiv>
 800918a:	e79c      	b.n	80090c6 <__ieee754_pow+0x3e>
 800918c:	2300      	movs	r3, #0
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	2a00      	cmp	r2, #0
 8009192:	d13d      	bne.n	8009210 <__ieee754_pow+0x188>
 8009194:	4b51      	ldr	r3, [pc, #324]	; (80092dc <__ieee754_pow+0x254>)
 8009196:	4598      	cmp	r8, r3
 8009198:	d1ea      	bne.n	8009170 <__ieee754_pow+0xe8>
 800919a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800919e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091a2:	ea53 030a 	orrs.w	r3, r3, sl
 80091a6:	f000 8459 	beq.w	8009a5c <__ieee754_pow+0x9d4>
 80091aa:	4b4f      	ldr	r3, [pc, #316]	; (80092e8 <__ieee754_pow+0x260>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	dd08      	ble.n	80091c2 <__ieee754_pow+0x13a>
 80091b0:	f1b9 0f00 	cmp.w	r9, #0
 80091b4:	f2c0 8456 	blt.w	8009a64 <__ieee754_pow+0x9dc>
 80091b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091bc:	e783      	b.n	80090c6 <__ieee754_pow+0x3e>
 80091be:	2302      	movs	r3, #2
 80091c0:	e7e5      	b.n	800918e <__ieee754_pow+0x106>
 80091c2:	f1b9 0f00 	cmp.w	r9, #0
 80091c6:	f04f 0000 	mov.w	r0, #0
 80091ca:	f04f 0100 	mov.w	r1, #0
 80091ce:	f6bf af7a 	bge.w	80090c6 <__ieee754_pow+0x3e>
 80091d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80091d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80091da:	e774      	b.n	80090c6 <__ieee754_pow+0x3e>
 80091dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80091e0:	d106      	bne.n	80091f0 <__ieee754_pow+0x168>
 80091e2:	4632      	mov	r2, r6
 80091e4:	463b      	mov	r3, r7
 80091e6:	4630      	mov	r0, r6
 80091e8:	4639      	mov	r1, r7
 80091ea:	f7f7 f9ad 	bl	8000548 <__aeabi_dmul>
 80091ee:	e76a      	b.n	80090c6 <__ieee754_pow+0x3e>
 80091f0:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <__ieee754_pow+0x264>)
 80091f2:	4599      	cmp	r9, r3
 80091f4:	d10c      	bne.n	8009210 <__ieee754_pow+0x188>
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	db0a      	blt.n	8009210 <__ieee754_pow+0x188>
 80091fa:	ec47 6b10 	vmov	d0, r6, r7
 80091fe:	b009      	add	sp, #36	; 0x24
 8009200:	ecbd 8b06 	vpop	{d8-d10}
 8009204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	f7ff bc12 	b.w	8008a30 <__ieee754_sqrt>
 800920c:	2300      	movs	r3, #0
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	ec47 6b10 	vmov	d0, r6, r7
 8009214:	f001 f80c 	bl	800a230 <fabs>
 8009218:	ec51 0b10 	vmov	r0, r1, d0
 800921c:	f1ba 0f00 	cmp.w	sl, #0
 8009220:	d129      	bne.n	8009276 <__ieee754_pow+0x1ee>
 8009222:	b124      	cbz	r4, 800922e <__ieee754_pow+0x1a6>
 8009224:	4b2f      	ldr	r3, [pc, #188]	; (80092e4 <__ieee754_pow+0x25c>)
 8009226:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800922a:	429a      	cmp	r2, r3
 800922c:	d123      	bne.n	8009276 <__ieee754_pow+0x1ee>
 800922e:	f1b9 0f00 	cmp.w	r9, #0
 8009232:	da05      	bge.n	8009240 <__ieee754_pow+0x1b8>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	2000      	movs	r0, #0
 800923a:	492a      	ldr	r1, [pc, #168]	; (80092e4 <__ieee754_pow+0x25c>)
 800923c:	f7f7 faae 	bl	800079c <__aeabi_ddiv>
 8009240:	2d00      	cmp	r5, #0
 8009242:	f6bf af40 	bge.w	80090c6 <__ieee754_pow+0x3e>
 8009246:	9b04      	ldr	r3, [sp, #16]
 8009248:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800924c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009250:	431c      	orrs	r4, r3
 8009252:	d108      	bne.n	8009266 <__ieee754_pow+0x1de>
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	f7f6 ffbc 	bl	80001d8 <__aeabi_dsub>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	e78f      	b.n	8009186 <__ieee754_pow+0xfe>
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	2b01      	cmp	r3, #1
 800926a:	f47f af2c 	bne.w	80090c6 <__ieee754_pow+0x3e>
 800926e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009272:	4619      	mov	r1, r3
 8009274:	e727      	b.n	80090c6 <__ieee754_pow+0x3e>
 8009276:	0feb      	lsrs	r3, r5, #31
 8009278:	3b01      	subs	r3, #1
 800927a:	9306      	str	r3, [sp, #24]
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	9b04      	ldr	r3, [sp, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	d102      	bne.n	800928a <__ieee754_pow+0x202>
 8009284:	4632      	mov	r2, r6
 8009286:	463b      	mov	r3, r7
 8009288:	e7e6      	b.n	8009258 <__ieee754_pow+0x1d0>
 800928a:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <__ieee754_pow+0x268>)
 800928c:	4598      	cmp	r8, r3
 800928e:	f340 80fb 	ble.w	8009488 <__ieee754_pow+0x400>
 8009292:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009296:	4598      	cmp	r8, r3
 8009298:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <__ieee754_pow+0x260>)
 800929a:	dd0c      	ble.n	80092b6 <__ieee754_pow+0x22e>
 800929c:	429c      	cmp	r4, r3
 800929e:	dc0f      	bgt.n	80092c0 <__ieee754_pow+0x238>
 80092a0:	f1b9 0f00 	cmp.w	r9, #0
 80092a4:	da0f      	bge.n	80092c6 <__ieee754_pow+0x23e>
 80092a6:	2000      	movs	r0, #0
 80092a8:	b009      	add	sp, #36	; 0x24
 80092aa:	ecbd 8b06 	vpop	{d8-d10}
 80092ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b2:	f001 b86e 	b.w	800a392 <__math_oflow>
 80092b6:	429c      	cmp	r4, r3
 80092b8:	dbf2      	blt.n	80092a0 <__ieee754_pow+0x218>
 80092ba:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <__ieee754_pow+0x25c>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	dd19      	ble.n	80092f4 <__ieee754_pow+0x26c>
 80092c0:	f1b9 0f00 	cmp.w	r9, #0
 80092c4:	dcef      	bgt.n	80092a6 <__ieee754_pow+0x21e>
 80092c6:	2000      	movs	r0, #0
 80092c8:	b009      	add	sp, #36	; 0x24
 80092ca:	ecbd 8b06 	vpop	{d8-d10}
 80092ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d2:	f001 b855 	b.w	800a380 <__math_uflow>
 80092d6:	bf00      	nop
 80092d8:	fff00000 	.word	0xfff00000
 80092dc:	7ff00000 	.word	0x7ff00000
 80092e0:	433fffff 	.word	0x433fffff
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	3fefffff 	.word	0x3fefffff
 80092ec:	3fe00000 	.word	0x3fe00000
 80092f0:	41e00000 	.word	0x41e00000
 80092f4:	4b60      	ldr	r3, [pc, #384]	; (8009478 <__ieee754_pow+0x3f0>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	f7f6 ff6e 	bl	80001d8 <__aeabi_dsub>
 80092fc:	a354      	add	r3, pc, #336	; (adr r3, 8009450 <__ieee754_pow+0x3c8>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	4604      	mov	r4, r0
 8009304:	460d      	mov	r5, r1
 8009306:	f7f7 f91f 	bl	8000548 <__aeabi_dmul>
 800930a:	a353      	add	r3, pc, #332	; (adr r3, 8009458 <__ieee754_pow+0x3d0>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	4606      	mov	r6, r0
 8009312:	460f      	mov	r7, r1
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f7 f916 	bl	8000548 <__aeabi_dmul>
 800931c:	4b57      	ldr	r3, [pc, #348]	; (800947c <__ieee754_pow+0x3f4>)
 800931e:	4682      	mov	sl, r0
 8009320:	468b      	mov	fp, r1
 8009322:	2200      	movs	r2, #0
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f7 f90e 	bl	8000548 <__aeabi_dmul>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	a14b      	add	r1, pc, #300	; (adr r1, 8009460 <__ieee754_pow+0x3d8>)
 8009332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009336:	f7f6 ff4f 	bl	80001d8 <__aeabi_dsub>
 800933a:	4622      	mov	r2, r4
 800933c:	462b      	mov	r3, r5
 800933e:	f7f7 f903 	bl	8000548 <__aeabi_dmul>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	2000      	movs	r0, #0
 8009348:	494d      	ldr	r1, [pc, #308]	; (8009480 <__ieee754_pow+0x3f8>)
 800934a:	f7f6 ff45 	bl	80001d8 <__aeabi_dsub>
 800934e:	4622      	mov	r2, r4
 8009350:	4680      	mov	r8, r0
 8009352:	4689      	mov	r9, r1
 8009354:	462b      	mov	r3, r5
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f7 f8f5 	bl	8000548 <__aeabi_dmul>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4640      	mov	r0, r8
 8009364:	4649      	mov	r1, r9
 8009366:	f7f7 f8ef 	bl	8000548 <__aeabi_dmul>
 800936a:	a33f      	add	r3, pc, #252	; (adr r3, 8009468 <__ieee754_pow+0x3e0>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f7f7 f8ea 	bl	8000548 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4650      	mov	r0, sl
 800937a:	4659      	mov	r1, fp
 800937c:	f7f6 ff2c 	bl	80001d8 <__aeabi_dsub>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f6 ff26 	bl	80001dc <__adddf3>
 8009390:	2000      	movs	r0, #0
 8009392:	4632      	mov	r2, r6
 8009394:	463b      	mov	r3, r7
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	f7f6 ff1d 	bl	80001d8 <__aeabi_dsub>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f7f6 ff17 	bl	80001d8 <__aeabi_dsub>
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	9a06      	ldr	r2, [sp, #24]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	4682      	mov	sl, r0
 80093b4:	468b      	mov	fp, r1
 80093b6:	f040 81e7 	bne.w	8009788 <__ieee754_pow+0x700>
 80093ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009470 <__ieee754_pow+0x3e8>
 80093be:	eeb0 8a47 	vmov.f32	s16, s14
 80093c2:	eef0 8a67 	vmov.f32	s17, s15
 80093c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80093ca:	2600      	movs	r6, #0
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d4:	f7f6 ff00 	bl	80001d8 <__aeabi_dsub>
 80093d8:	4622      	mov	r2, r4
 80093da:	462b      	mov	r3, r5
 80093dc:	f7f7 f8b4 	bl	8000548 <__aeabi_dmul>
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	4680      	mov	r8, r0
 80093e6:	4689      	mov	r9, r1
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	f7f7 f8ac 	bl	8000548 <__aeabi_dmul>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4640      	mov	r0, r8
 80093f6:	4649      	mov	r1, r9
 80093f8:	f7f6 fef0 	bl	80001dc <__adddf3>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	4680      	mov	r8, r0
 8009402:	4689      	mov	r9, r1
 8009404:	4620      	mov	r0, r4
 8009406:	4629      	mov	r1, r5
 8009408:	f7f7 f89e 	bl	8000548 <__aeabi_dmul>
 800940c:	460b      	mov	r3, r1
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	4602      	mov	r2, r0
 8009414:	4649      	mov	r1, r9
 8009416:	4640      	mov	r0, r8
 8009418:	f7f6 fee0 	bl	80001dc <__adddf3>
 800941c:	4b19      	ldr	r3, [pc, #100]	; (8009484 <__ieee754_pow+0x3fc>)
 800941e:	4299      	cmp	r1, r3
 8009420:	ec45 4b19 	vmov	d9, r4, r5
 8009424:	4606      	mov	r6, r0
 8009426:	460f      	mov	r7, r1
 8009428:	468b      	mov	fp, r1
 800942a:	f340 82f0 	ble.w	8009a0e <__ieee754_pow+0x986>
 800942e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009432:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009436:	4303      	orrs	r3, r0
 8009438:	f000 81e4 	beq.w	8009804 <__ieee754_pow+0x77c>
 800943c:	ec51 0b18 	vmov	r0, r1, d8
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	f7f7 faf2 	bl	8000a2c <__aeabi_dcmplt>
 8009448:	3800      	subs	r0, #0
 800944a:	bf18      	it	ne
 800944c:	2001      	movne	r0, #1
 800944e:	e72b      	b.n	80092a8 <__ieee754_pow+0x220>
 8009450:	60000000 	.word	0x60000000
 8009454:	3ff71547 	.word	0x3ff71547
 8009458:	f85ddf44 	.word	0xf85ddf44
 800945c:	3e54ae0b 	.word	0x3e54ae0b
 8009460:	55555555 	.word	0x55555555
 8009464:	3fd55555 	.word	0x3fd55555
 8009468:	652b82fe 	.word	0x652b82fe
 800946c:	3ff71547 	.word	0x3ff71547
 8009470:	00000000 	.word	0x00000000
 8009474:	bff00000 	.word	0xbff00000
 8009478:	3ff00000 	.word	0x3ff00000
 800947c:	3fd00000 	.word	0x3fd00000
 8009480:	3fe00000 	.word	0x3fe00000
 8009484:	408fffff 	.word	0x408fffff
 8009488:	4bd5      	ldr	r3, [pc, #852]	; (80097e0 <__ieee754_pow+0x758>)
 800948a:	402b      	ands	r3, r5
 800948c:	2200      	movs	r2, #0
 800948e:	b92b      	cbnz	r3, 800949c <__ieee754_pow+0x414>
 8009490:	4bd4      	ldr	r3, [pc, #848]	; (80097e4 <__ieee754_pow+0x75c>)
 8009492:	f7f7 f859 	bl	8000548 <__aeabi_dmul>
 8009496:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800949a:	460c      	mov	r4, r1
 800949c:	1523      	asrs	r3, r4, #20
 800949e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094a2:	4413      	add	r3, r2
 80094a4:	9305      	str	r3, [sp, #20]
 80094a6:	4bd0      	ldr	r3, [pc, #832]	; (80097e8 <__ieee754_pow+0x760>)
 80094a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80094ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80094b0:	429c      	cmp	r4, r3
 80094b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094b6:	dd08      	ble.n	80094ca <__ieee754_pow+0x442>
 80094b8:	4bcc      	ldr	r3, [pc, #816]	; (80097ec <__ieee754_pow+0x764>)
 80094ba:	429c      	cmp	r4, r3
 80094bc:	f340 8162 	ble.w	8009784 <__ieee754_pow+0x6fc>
 80094c0:	9b05      	ldr	r3, [sp, #20]
 80094c2:	3301      	adds	r3, #1
 80094c4:	9305      	str	r3, [sp, #20]
 80094c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80094ca:	2400      	movs	r4, #0
 80094cc:	00e3      	lsls	r3, r4, #3
 80094ce:	9307      	str	r3, [sp, #28]
 80094d0:	4bc7      	ldr	r3, [pc, #796]	; (80097f0 <__ieee754_pow+0x768>)
 80094d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094d6:	ed93 7b00 	vldr	d7, [r3]
 80094da:	4629      	mov	r1, r5
 80094dc:	ec53 2b17 	vmov	r2, r3, d7
 80094e0:	eeb0 9a47 	vmov.f32	s18, s14
 80094e4:	eef0 9a67 	vmov.f32	s19, s15
 80094e8:	4682      	mov	sl, r0
 80094ea:	f7f6 fe75 	bl	80001d8 <__aeabi_dsub>
 80094ee:	4652      	mov	r2, sl
 80094f0:	4606      	mov	r6, r0
 80094f2:	460f      	mov	r7, r1
 80094f4:	462b      	mov	r3, r5
 80094f6:	ec51 0b19 	vmov	r0, r1, d9
 80094fa:	f7f6 fe6f 	bl	80001dc <__adddf3>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	2000      	movs	r0, #0
 8009504:	49bb      	ldr	r1, [pc, #748]	; (80097f4 <__ieee754_pow+0x76c>)
 8009506:	f7f7 f949 	bl	800079c <__aeabi_ddiv>
 800950a:	ec41 0b1a 	vmov	d10, r0, r1
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4630      	mov	r0, r6
 8009514:	4639      	mov	r1, r7
 8009516:	f7f7 f817 	bl	8000548 <__aeabi_dmul>
 800951a:	2300      	movs	r3, #0
 800951c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009520:	9302      	str	r3, [sp, #8]
 8009522:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009526:	46ab      	mov	fp, r5
 8009528:	106d      	asrs	r5, r5, #1
 800952a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800952e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009532:	ec41 0b18 	vmov	d8, r0, r1
 8009536:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800953a:	2200      	movs	r2, #0
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	4614      	mov	r4, r2
 8009542:	461d      	mov	r5, r3
 8009544:	f7f7 f800 	bl	8000548 <__aeabi_dmul>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f6 fe42 	bl	80001d8 <__aeabi_dsub>
 8009554:	ec53 2b19 	vmov	r2, r3, d9
 8009558:	4606      	mov	r6, r0
 800955a:	460f      	mov	r7, r1
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f6 fe3a 	bl	80001d8 <__aeabi_dsub>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4650      	mov	r0, sl
 800956a:	4659      	mov	r1, fp
 800956c:	f7f6 fe34 	bl	80001d8 <__aeabi_dsub>
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	f7f6 ffe8 	bl	8000548 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f7f6 fe2a 	bl	80001d8 <__aeabi_dsub>
 8009584:	ec53 2b1a 	vmov	r2, r3, d10
 8009588:	f7f6 ffde 	bl	8000548 <__aeabi_dmul>
 800958c:	ec53 2b18 	vmov	r2, r3, d8
 8009590:	ec41 0b19 	vmov	d9, r0, r1
 8009594:	ec51 0b18 	vmov	r0, r1, d8
 8009598:	f7f6 ffd6 	bl	8000548 <__aeabi_dmul>
 800959c:	a37c      	add	r3, pc, #496	; (adr r3, 8009790 <__ieee754_pow+0x708>)
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	4604      	mov	r4, r0
 80095a4:	460d      	mov	r5, r1
 80095a6:	f7f6 ffcf 	bl	8000548 <__aeabi_dmul>
 80095aa:	a37b      	add	r3, pc, #492	; (adr r3, 8009798 <__ieee754_pow+0x710>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 fe14 	bl	80001dc <__adddf3>
 80095b4:	4622      	mov	r2, r4
 80095b6:	462b      	mov	r3, r5
 80095b8:	f7f6 ffc6 	bl	8000548 <__aeabi_dmul>
 80095bc:	a378      	add	r3, pc, #480	; (adr r3, 80097a0 <__ieee754_pow+0x718>)
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f6 fe0b 	bl	80001dc <__adddf3>
 80095c6:	4622      	mov	r2, r4
 80095c8:	462b      	mov	r3, r5
 80095ca:	f7f6 ffbd 	bl	8000548 <__aeabi_dmul>
 80095ce:	a376      	add	r3, pc, #472	; (adr r3, 80097a8 <__ieee754_pow+0x720>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f7f6 fe02 	bl	80001dc <__adddf3>
 80095d8:	4622      	mov	r2, r4
 80095da:	462b      	mov	r3, r5
 80095dc:	f7f6 ffb4 	bl	8000548 <__aeabi_dmul>
 80095e0:	a373      	add	r3, pc, #460	; (adr r3, 80097b0 <__ieee754_pow+0x728>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f7f6 fdf9 	bl	80001dc <__adddf3>
 80095ea:	4622      	mov	r2, r4
 80095ec:	462b      	mov	r3, r5
 80095ee:	f7f6 ffab 	bl	8000548 <__aeabi_dmul>
 80095f2:	a371      	add	r3, pc, #452	; (adr r3, 80097b8 <__ieee754_pow+0x730>)
 80095f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f8:	f7f6 fdf0 	bl	80001dc <__adddf3>
 80095fc:	4622      	mov	r2, r4
 80095fe:	4606      	mov	r6, r0
 8009600:	460f      	mov	r7, r1
 8009602:	462b      	mov	r3, r5
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f6 ff9e 	bl	8000548 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 ff98 	bl	8000548 <__aeabi_dmul>
 8009618:	4642      	mov	r2, r8
 800961a:	4604      	mov	r4, r0
 800961c:	460d      	mov	r5, r1
 800961e:	464b      	mov	r3, r9
 8009620:	ec51 0b18 	vmov	r0, r1, d8
 8009624:	f7f6 fdda 	bl	80001dc <__adddf3>
 8009628:	ec53 2b19 	vmov	r2, r3, d9
 800962c:	f7f6 ff8c 	bl	8000548 <__aeabi_dmul>
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	f7f6 fdd2 	bl	80001dc <__adddf3>
 8009638:	4642      	mov	r2, r8
 800963a:	4682      	mov	sl, r0
 800963c:	468b      	mov	fp, r1
 800963e:	464b      	mov	r3, r9
 8009640:	4640      	mov	r0, r8
 8009642:	4649      	mov	r1, r9
 8009644:	f7f6 ff80 	bl	8000548 <__aeabi_dmul>
 8009648:	4b6b      	ldr	r3, [pc, #428]	; (80097f8 <__ieee754_pow+0x770>)
 800964a:	2200      	movs	r2, #0
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f6 fdc4 	bl	80001dc <__adddf3>
 8009654:	4652      	mov	r2, sl
 8009656:	465b      	mov	r3, fp
 8009658:	f7f6 fdc0 	bl	80001dc <__adddf3>
 800965c:	2000      	movs	r0, #0
 800965e:	4604      	mov	r4, r0
 8009660:	460d      	mov	r5, r1
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4640      	mov	r0, r8
 8009668:	4649      	mov	r1, r9
 800966a:	f7f6 ff6d 	bl	8000548 <__aeabi_dmul>
 800966e:	4b62      	ldr	r3, [pc, #392]	; (80097f8 <__ieee754_pow+0x770>)
 8009670:	4680      	mov	r8, r0
 8009672:	4689      	mov	r9, r1
 8009674:	2200      	movs	r2, #0
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fdad 	bl	80001d8 <__aeabi_dsub>
 800967e:	4632      	mov	r2, r6
 8009680:	463b      	mov	r3, r7
 8009682:	f7f6 fda9 	bl	80001d8 <__aeabi_dsub>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f6 fda3 	bl	80001d8 <__aeabi_dsub>
 8009692:	ec53 2b18 	vmov	r2, r3, d8
 8009696:	f7f6 ff57 	bl	8000548 <__aeabi_dmul>
 800969a:	4622      	mov	r2, r4
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	462b      	mov	r3, r5
 80096a2:	ec51 0b19 	vmov	r0, r1, d9
 80096a6:	f7f6 ff4f 	bl	8000548 <__aeabi_dmul>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	4630      	mov	r0, r6
 80096b0:	4639      	mov	r1, r7
 80096b2:	f7f6 fd93 	bl	80001dc <__adddf3>
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	4640      	mov	r0, r8
 80096c0:	4649      	mov	r1, r9
 80096c2:	f7f6 fd8b 	bl	80001dc <__adddf3>
 80096c6:	a33e      	add	r3, pc, #248	; (adr r3, 80097c0 <__ieee754_pow+0x738>)
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	2000      	movs	r0, #0
 80096ce:	4604      	mov	r4, r0
 80096d0:	460d      	mov	r5, r1
 80096d2:	f7f6 ff39 	bl	8000548 <__aeabi_dmul>
 80096d6:	4642      	mov	r2, r8
 80096d8:	ec41 0b18 	vmov	d8, r0, r1
 80096dc:	464b      	mov	r3, r9
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f6 fd79 	bl	80001d8 <__aeabi_dsub>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	f7f6 fd73 	bl	80001d8 <__aeabi_dsub>
 80096f2:	a335      	add	r3, pc, #212	; (adr r3, 80097c8 <__ieee754_pow+0x740>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 ff26 	bl	8000548 <__aeabi_dmul>
 80096fc:	a334      	add	r3, pc, #208	; (adr r3, 80097d0 <__ieee754_pow+0x748>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	4606      	mov	r6, r0
 8009704:	460f      	mov	r7, r1
 8009706:	4620      	mov	r0, r4
 8009708:	4629      	mov	r1, r5
 800970a:	f7f6 ff1d 	bl	8000548 <__aeabi_dmul>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4630      	mov	r0, r6
 8009714:	4639      	mov	r1, r7
 8009716:	f7f6 fd61 	bl	80001dc <__adddf3>
 800971a:	9a07      	ldr	r2, [sp, #28]
 800971c:	4b37      	ldr	r3, [pc, #220]	; (80097fc <__ieee754_pow+0x774>)
 800971e:	4413      	add	r3, r2
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 fd5a 	bl	80001dc <__adddf3>
 8009728:	4682      	mov	sl, r0
 800972a:	9805      	ldr	r0, [sp, #20]
 800972c:	468b      	mov	fp, r1
 800972e:	f7f6 fea1 	bl	8000474 <__aeabi_i2d>
 8009732:	9a07      	ldr	r2, [sp, #28]
 8009734:	4b32      	ldr	r3, [pc, #200]	; (8009800 <__ieee754_pow+0x778>)
 8009736:	4413      	add	r3, r2
 8009738:	e9d3 8900 	ldrd	r8, r9, [r3]
 800973c:	4606      	mov	r6, r0
 800973e:	460f      	mov	r7, r1
 8009740:	4652      	mov	r2, sl
 8009742:	465b      	mov	r3, fp
 8009744:	ec51 0b18 	vmov	r0, r1, d8
 8009748:	f7f6 fd48 	bl	80001dc <__adddf3>
 800974c:	4642      	mov	r2, r8
 800974e:	464b      	mov	r3, r9
 8009750:	f7f6 fd44 	bl	80001dc <__adddf3>
 8009754:	4632      	mov	r2, r6
 8009756:	463b      	mov	r3, r7
 8009758:	f7f6 fd40 	bl	80001dc <__adddf3>
 800975c:	2000      	movs	r0, #0
 800975e:	4632      	mov	r2, r6
 8009760:	463b      	mov	r3, r7
 8009762:	4604      	mov	r4, r0
 8009764:	460d      	mov	r5, r1
 8009766:	f7f6 fd37 	bl	80001d8 <__aeabi_dsub>
 800976a:	4642      	mov	r2, r8
 800976c:	464b      	mov	r3, r9
 800976e:	f7f6 fd33 	bl	80001d8 <__aeabi_dsub>
 8009772:	ec53 2b18 	vmov	r2, r3, d8
 8009776:	f7f6 fd2f 	bl	80001d8 <__aeabi_dsub>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4650      	mov	r0, sl
 8009780:	4659      	mov	r1, fp
 8009782:	e610      	b.n	80093a6 <__ieee754_pow+0x31e>
 8009784:	2401      	movs	r4, #1
 8009786:	e6a1      	b.n	80094cc <__ieee754_pow+0x444>
 8009788:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80097d8 <__ieee754_pow+0x750>
 800978c:	e617      	b.n	80093be <__ieee754_pow+0x336>
 800978e:	bf00      	nop
 8009790:	4a454eef 	.word	0x4a454eef
 8009794:	3fca7e28 	.word	0x3fca7e28
 8009798:	93c9db65 	.word	0x93c9db65
 800979c:	3fcd864a 	.word	0x3fcd864a
 80097a0:	a91d4101 	.word	0xa91d4101
 80097a4:	3fd17460 	.word	0x3fd17460
 80097a8:	518f264d 	.word	0x518f264d
 80097ac:	3fd55555 	.word	0x3fd55555
 80097b0:	db6fabff 	.word	0xdb6fabff
 80097b4:	3fdb6db6 	.word	0x3fdb6db6
 80097b8:	33333303 	.word	0x33333303
 80097bc:	3fe33333 	.word	0x3fe33333
 80097c0:	e0000000 	.word	0xe0000000
 80097c4:	3feec709 	.word	0x3feec709
 80097c8:	dc3a03fd 	.word	0xdc3a03fd
 80097cc:	3feec709 	.word	0x3feec709
 80097d0:	145b01f5 	.word	0x145b01f5
 80097d4:	be3e2fe0 	.word	0xbe3e2fe0
 80097d8:	00000000 	.word	0x00000000
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	43400000 	.word	0x43400000
 80097e8:	0003988e 	.word	0x0003988e
 80097ec:	000bb679 	.word	0x000bb679
 80097f0:	0800ac28 	.word	0x0800ac28
 80097f4:	3ff00000 	.word	0x3ff00000
 80097f8:	40080000 	.word	0x40080000
 80097fc:	0800ac48 	.word	0x0800ac48
 8009800:	0800ac38 	.word	0x0800ac38
 8009804:	a3b3      	add	r3, pc, #716	; (adr r3, 8009ad4 <__ieee754_pow+0xa4c>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	4640      	mov	r0, r8
 800980c:	4649      	mov	r1, r9
 800980e:	f7f6 fce5 	bl	80001dc <__adddf3>
 8009812:	4622      	mov	r2, r4
 8009814:	ec41 0b1a 	vmov	d10, r0, r1
 8009818:	462b      	mov	r3, r5
 800981a:	4630      	mov	r0, r6
 800981c:	4639      	mov	r1, r7
 800981e:	f7f6 fcdb 	bl	80001d8 <__aeabi_dsub>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	ec51 0b1a 	vmov	r0, r1, d10
 800982a:	f7f7 f91d 	bl	8000a68 <__aeabi_dcmpgt>
 800982e:	2800      	cmp	r0, #0
 8009830:	f47f ae04 	bne.w	800943c <__ieee754_pow+0x3b4>
 8009834:	4aa2      	ldr	r2, [pc, #648]	; (8009ac0 <__ieee754_pow+0xa38>)
 8009836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800983a:	4293      	cmp	r3, r2
 800983c:	f340 8107 	ble.w	8009a4e <__ieee754_pow+0x9c6>
 8009840:	151b      	asrs	r3, r3, #20
 8009842:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009846:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800984a:	fa4a fa03 	asr.w	sl, sl, r3
 800984e:	44da      	add	sl, fp
 8009850:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009854:	489b      	ldr	r0, [pc, #620]	; (8009ac4 <__ieee754_pow+0xa3c>)
 8009856:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800985a:	4108      	asrs	r0, r1
 800985c:	ea00 030a 	and.w	r3, r0, sl
 8009860:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009864:	f1c1 0114 	rsb	r1, r1, #20
 8009868:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800986c:	fa4a fa01 	asr.w	sl, sl, r1
 8009870:	f1bb 0f00 	cmp.w	fp, #0
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	bfb8      	it	lt
 800987e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009882:	f7f6 fca9 	bl	80001d8 <__aeabi_dsub>
 8009886:	ec41 0b19 	vmov	d9, r0, r1
 800988a:	4642      	mov	r2, r8
 800988c:	464b      	mov	r3, r9
 800988e:	ec51 0b19 	vmov	r0, r1, d9
 8009892:	f7f6 fca3 	bl	80001dc <__adddf3>
 8009896:	a37a      	add	r3, pc, #488	; (adr r3, 8009a80 <__ieee754_pow+0x9f8>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	2000      	movs	r0, #0
 800989e:	4604      	mov	r4, r0
 80098a0:	460d      	mov	r5, r1
 80098a2:	f7f6 fe51 	bl	8000548 <__aeabi_dmul>
 80098a6:	ec53 2b19 	vmov	r2, r3, d9
 80098aa:	4606      	mov	r6, r0
 80098ac:	460f      	mov	r7, r1
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f6 fc91 	bl	80001d8 <__aeabi_dsub>
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f6 fc8b 	bl	80001d8 <__aeabi_dsub>
 80098c2:	a371      	add	r3, pc, #452	; (adr r3, 8009a88 <__ieee754_pow+0xa00>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fe3e 	bl	8000548 <__aeabi_dmul>
 80098cc:	a370      	add	r3, pc, #448	; (adr r3, 8009a90 <__ieee754_pow+0xa08>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4680      	mov	r8, r0
 80098d4:	4689      	mov	r9, r1
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 fe35 	bl	8000548 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4640      	mov	r0, r8
 80098e4:	4649      	mov	r1, r9
 80098e6:	f7f6 fc79 	bl	80001dc <__adddf3>
 80098ea:	4604      	mov	r4, r0
 80098ec:	460d      	mov	r5, r1
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4630      	mov	r0, r6
 80098f4:	4639      	mov	r1, r7
 80098f6:	f7f6 fc71 	bl	80001dc <__adddf3>
 80098fa:	4632      	mov	r2, r6
 80098fc:	463b      	mov	r3, r7
 80098fe:	4680      	mov	r8, r0
 8009900:	4689      	mov	r9, r1
 8009902:	f7f6 fc69 	bl	80001d8 <__aeabi_dsub>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	f7f6 fc63 	bl	80001d8 <__aeabi_dsub>
 8009912:	4642      	mov	r2, r8
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	464b      	mov	r3, r9
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f6 fe13 	bl	8000548 <__aeabi_dmul>
 8009922:	a35d      	add	r3, pc, #372	; (adr r3, 8009a98 <__ieee754_pow+0xa10>)
 8009924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009928:	4604      	mov	r4, r0
 800992a:	460d      	mov	r5, r1
 800992c:	f7f6 fe0c 	bl	8000548 <__aeabi_dmul>
 8009930:	a35b      	add	r3, pc, #364	; (adr r3, 8009aa0 <__ieee754_pow+0xa18>)
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	f7f6 fc4f 	bl	80001d8 <__aeabi_dsub>
 800993a:	4622      	mov	r2, r4
 800993c:	462b      	mov	r3, r5
 800993e:	f7f6 fe03 	bl	8000548 <__aeabi_dmul>
 8009942:	a359      	add	r3, pc, #356	; (adr r3, 8009aa8 <__ieee754_pow+0xa20>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fc48 	bl	80001dc <__adddf3>
 800994c:	4622      	mov	r2, r4
 800994e:	462b      	mov	r3, r5
 8009950:	f7f6 fdfa 	bl	8000548 <__aeabi_dmul>
 8009954:	a356      	add	r3, pc, #344	; (adr r3, 8009ab0 <__ieee754_pow+0xa28>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	f7f6 fc3d 	bl	80001d8 <__aeabi_dsub>
 800995e:	4622      	mov	r2, r4
 8009960:	462b      	mov	r3, r5
 8009962:	f7f6 fdf1 	bl	8000548 <__aeabi_dmul>
 8009966:	a354      	add	r3, pc, #336	; (adr r3, 8009ab8 <__ieee754_pow+0xa30>)
 8009968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996c:	f7f6 fc36 	bl	80001dc <__adddf3>
 8009970:	4622      	mov	r2, r4
 8009972:	462b      	mov	r3, r5
 8009974:	f7f6 fde8 	bl	8000548 <__aeabi_dmul>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4640      	mov	r0, r8
 800997e:	4649      	mov	r1, r9
 8009980:	f7f6 fc2a 	bl	80001d8 <__aeabi_dsub>
 8009984:	4604      	mov	r4, r0
 8009986:	460d      	mov	r5, r1
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4640      	mov	r0, r8
 800998e:	4649      	mov	r1, r9
 8009990:	f7f6 fdda 	bl	8000548 <__aeabi_dmul>
 8009994:	2200      	movs	r2, #0
 8009996:	ec41 0b19 	vmov	d9, r0, r1
 800999a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fc19 	bl	80001d8 <__aeabi_dsub>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	ec51 0b19 	vmov	r0, r1, d9
 80099ae:	f7f6 fef5 	bl	800079c <__aeabi_ddiv>
 80099b2:	4632      	mov	r2, r6
 80099b4:	4604      	mov	r4, r0
 80099b6:	460d      	mov	r5, r1
 80099b8:	463b      	mov	r3, r7
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fdc3 	bl	8000548 <__aeabi_dmul>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	f7f6 fc09 	bl	80001dc <__adddf3>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4620      	mov	r0, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f6 fc01 	bl	80001d8 <__aeabi_dsub>
 80099d6:	4642      	mov	r2, r8
 80099d8:	464b      	mov	r3, r9
 80099da:	f7f6 fbfd 	bl	80001d8 <__aeabi_dsub>
 80099de:	460b      	mov	r3, r1
 80099e0:	4602      	mov	r2, r0
 80099e2:	4939      	ldr	r1, [pc, #228]	; (8009ac8 <__ieee754_pow+0xa40>)
 80099e4:	2000      	movs	r0, #0
 80099e6:	f7f6 fbf7 	bl	80001d8 <__aeabi_dsub>
 80099ea:	ec41 0b10 	vmov	d0, r0, r1
 80099ee:	ee10 3a90 	vmov	r3, s1
 80099f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80099f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099fa:	da2b      	bge.n	8009a54 <__ieee754_pow+0x9cc>
 80099fc:	4650      	mov	r0, sl
 80099fe:	f000 fc23 	bl	800a248 <scalbn>
 8009a02:	ec51 0b10 	vmov	r0, r1, d0
 8009a06:	ec53 2b18 	vmov	r2, r3, d8
 8009a0a:	f7ff bbee 	b.w	80091ea <__ieee754_pow+0x162>
 8009a0e:	4b2f      	ldr	r3, [pc, #188]	; (8009acc <__ieee754_pow+0xa44>)
 8009a10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a14:	429e      	cmp	r6, r3
 8009a16:	f77f af0d 	ble.w	8009834 <__ieee754_pow+0x7ac>
 8009a1a:	4b2d      	ldr	r3, [pc, #180]	; (8009ad0 <__ieee754_pow+0xa48>)
 8009a1c:	440b      	add	r3, r1
 8009a1e:	4303      	orrs	r3, r0
 8009a20:	d009      	beq.n	8009a36 <__ieee754_pow+0x9ae>
 8009a22:	ec51 0b18 	vmov	r0, r1, d8
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f7f6 ffff 	bl	8000a2c <__aeabi_dcmplt>
 8009a2e:	3800      	subs	r0, #0
 8009a30:	bf18      	it	ne
 8009a32:	2001      	movne	r0, #1
 8009a34:	e448      	b.n	80092c8 <__ieee754_pow+0x240>
 8009a36:	4622      	mov	r2, r4
 8009a38:	462b      	mov	r3, r5
 8009a3a:	f7f6 fbcd 	bl	80001d8 <__aeabi_dsub>
 8009a3e:	4642      	mov	r2, r8
 8009a40:	464b      	mov	r3, r9
 8009a42:	f7f7 f807 	bl	8000a54 <__aeabi_dcmpge>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	f43f aef4 	beq.w	8009834 <__ieee754_pow+0x7ac>
 8009a4c:	e7e9      	b.n	8009a22 <__ieee754_pow+0x99a>
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	e71a      	b.n	800988a <__ieee754_pow+0x802>
 8009a54:	ec51 0b10 	vmov	r0, r1, d0
 8009a58:	4619      	mov	r1, r3
 8009a5a:	e7d4      	b.n	8009a06 <__ieee754_pow+0x97e>
 8009a5c:	491a      	ldr	r1, [pc, #104]	; (8009ac8 <__ieee754_pow+0xa40>)
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7ff bb31 	b.w	80090c6 <__ieee754_pow+0x3e>
 8009a64:	2000      	movs	r0, #0
 8009a66:	2100      	movs	r1, #0
 8009a68:	f7ff bb2d 	b.w	80090c6 <__ieee754_pow+0x3e>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7ff bb29 	b.w	80090c6 <__ieee754_pow+0x3e>
 8009a74:	9204      	str	r2, [sp, #16]
 8009a76:	f7ff bb7b 	b.w	8009170 <__ieee754_pow+0xe8>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f7ff bb65 	b.w	800914a <__ieee754_pow+0xc2>
 8009a80:	00000000 	.word	0x00000000
 8009a84:	3fe62e43 	.word	0x3fe62e43
 8009a88:	fefa39ef 	.word	0xfefa39ef
 8009a8c:	3fe62e42 	.word	0x3fe62e42
 8009a90:	0ca86c39 	.word	0x0ca86c39
 8009a94:	be205c61 	.word	0xbe205c61
 8009a98:	72bea4d0 	.word	0x72bea4d0
 8009a9c:	3e663769 	.word	0x3e663769
 8009aa0:	c5d26bf1 	.word	0xc5d26bf1
 8009aa4:	3ebbbd41 	.word	0x3ebbbd41
 8009aa8:	af25de2c 	.word	0xaf25de2c
 8009aac:	3f11566a 	.word	0x3f11566a
 8009ab0:	16bebd93 	.word	0x16bebd93
 8009ab4:	3f66c16c 	.word	0x3f66c16c
 8009ab8:	5555553e 	.word	0x5555553e
 8009abc:	3fc55555 	.word	0x3fc55555
 8009ac0:	3fe00000 	.word	0x3fe00000
 8009ac4:	fff00000 	.word	0xfff00000
 8009ac8:	3ff00000 	.word	0x3ff00000
 8009acc:	4090cbff 	.word	0x4090cbff
 8009ad0:	3f6f3400 	.word	0x3f6f3400
 8009ad4:	652b82fe 	.word	0x652b82fe
 8009ad8:	3c971547 	.word	0x3c971547
 8009adc:	00000000 	.word	0x00000000

08009ae0 <__ieee754_rem_pio2>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b02 	vpush	{d8}
 8009ae8:	ec55 4b10 	vmov	r4, r5, d0
 8009aec:	4bca      	ldr	r3, [pc, #808]	; (8009e18 <__ieee754_rem_pio2+0x338>)
 8009aee:	b08b      	sub	sp, #44	; 0x2c
 8009af0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009af4:	4598      	cmp	r8, r3
 8009af6:	4682      	mov	sl, r0
 8009af8:	9502      	str	r5, [sp, #8]
 8009afa:	dc08      	bgt.n	8009b0e <__ieee754_rem_pio2+0x2e>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	ed80 0b00 	vstr	d0, [r0]
 8009b04:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009b08:	f04f 0b00 	mov.w	fp, #0
 8009b0c:	e028      	b.n	8009b60 <__ieee754_rem_pio2+0x80>
 8009b0e:	4bc3      	ldr	r3, [pc, #780]	; (8009e1c <__ieee754_rem_pio2+0x33c>)
 8009b10:	4598      	cmp	r8, r3
 8009b12:	dc78      	bgt.n	8009c06 <__ieee754_rem_pio2+0x126>
 8009b14:	9b02      	ldr	r3, [sp, #8]
 8009b16:	4ec2      	ldr	r6, [pc, #776]	; (8009e20 <__ieee754_rem_pio2+0x340>)
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	ee10 0a10 	vmov	r0, s0
 8009b1e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x300>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	4629      	mov	r1, r5
 8009b26:	dd39      	ble.n	8009b9c <__ieee754_rem_pio2+0xbc>
 8009b28:	f7f6 fb56 	bl	80001d8 <__aeabi_dsub>
 8009b2c:	45b0      	cmp	r8, r6
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	d01b      	beq.n	8009b6c <__ieee754_rem_pio2+0x8c>
 8009b34:	a3ac      	add	r3, pc, #688	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x308>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fb4d 	bl	80001d8 <__aeabi_dsub>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	e9ca 2300 	strd	r2, r3, [sl]
 8009b46:	4620      	mov	r0, r4
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7f6 fb45 	bl	80001d8 <__aeabi_dsub>
 8009b4e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x308>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fb40 	bl	80001d8 <__aeabi_dsub>
 8009b58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b5c:	f04f 0b01 	mov.w	fp, #1
 8009b60:	4658      	mov	r0, fp
 8009b62:	b00b      	add	sp, #44	; 0x2c
 8009b64:	ecbd 8b02 	vpop	{d8}
 8009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6c:	a3a0      	add	r3, pc, #640	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x310>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 fb31 	bl	80001d8 <__aeabi_dsub>
 8009b76:	a3a0      	add	r3, pc, #640	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x318>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	f7f6 fb2a 	bl	80001d8 <__aeabi_dsub>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	e9ca 2300 	strd	r2, r3, [sl]
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	f7f6 fb22 	bl	80001d8 <__aeabi_dsub>
 8009b94:	a398      	add	r3, pc, #608	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x318>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	e7db      	b.n	8009b54 <__ieee754_rem_pio2+0x74>
 8009b9c:	f7f6 fb1e 	bl	80001dc <__adddf3>
 8009ba0:	45b0      	cmp	r8, r6
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	460d      	mov	r5, r1
 8009ba6:	d016      	beq.n	8009bd6 <__ieee754_rem_pio2+0xf6>
 8009ba8:	a38f      	add	r3, pc, #572	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x308>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fb15 	bl	80001dc <__adddf3>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	e9ca 2300 	strd	r2, r3, [sl]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	f7f6 fb0b 	bl	80001d8 <__aeabi_dsub>
 8009bc2:	a389      	add	r3, pc, #548	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x308>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fb08 	bl	80001dc <__adddf3>
 8009bcc:	f04f 3bff 	mov.w	fp, #4294967295
 8009bd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bd4:	e7c4      	b.n	8009b60 <__ieee754_rem_pio2+0x80>
 8009bd6:	a386      	add	r3, pc, #536	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x310>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fafe 	bl	80001dc <__adddf3>
 8009be0:	a385      	add	r3, pc, #532	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x318>)
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	4604      	mov	r4, r0
 8009be8:	460d      	mov	r5, r1
 8009bea:	f7f6 faf7 	bl	80001dc <__adddf3>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	e9ca 2300 	strd	r2, r3, [sl]
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	f7f6 faed 	bl	80001d8 <__aeabi_dsub>
 8009bfe:	a37e      	add	r3, pc, #504	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x318>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	e7e0      	b.n	8009bc8 <__ieee754_rem_pio2+0xe8>
 8009c06:	4b87      	ldr	r3, [pc, #540]	; (8009e24 <__ieee754_rem_pio2+0x344>)
 8009c08:	4598      	cmp	r8, r3
 8009c0a:	f300 80d8 	bgt.w	8009dbe <__ieee754_rem_pio2+0x2de>
 8009c0e:	f000 fb0f 	bl	800a230 <fabs>
 8009c12:	ec55 4b10 	vmov	r4, r5, d0
 8009c16:	ee10 0a10 	vmov	r0, s0
 8009c1a:	a379      	add	r3, pc, #484	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x320>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 fc91 	bl	8000548 <__aeabi_dmul>
 8009c26:	4b80      	ldr	r3, [pc, #512]	; (8009e28 <__ieee754_rem_pio2+0x348>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f7f6 fad7 	bl	80001dc <__adddf3>
 8009c2e:	f7f6 ff3b 	bl	8000aa8 <__aeabi_d2iz>
 8009c32:	4683      	mov	fp, r0
 8009c34:	f7f6 fc1e 	bl	8000474 <__aeabi_i2d>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	ec43 2b18 	vmov	d8, r2, r3
 8009c40:	a367      	add	r3, pc, #412	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x300>)
 8009c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c46:	f7f6 fc7f 	bl	8000548 <__aeabi_dmul>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 fac1 	bl	80001d8 <__aeabi_dsub>
 8009c56:	a364      	add	r3, pc, #400	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x308>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	ec51 0b18 	vmov	r0, r1, d8
 8009c64:	f7f6 fc70 	bl	8000548 <__aeabi_dmul>
 8009c68:	f1bb 0f1f 	cmp.w	fp, #31
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	dc0d      	bgt.n	8009c8e <__ieee754_rem_pio2+0x1ae>
 8009c72:	4b6e      	ldr	r3, [pc, #440]	; (8009e2c <__ieee754_rem_pio2+0x34c>)
 8009c74:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7c:	4543      	cmp	r3, r8
 8009c7e:	d006      	beq.n	8009c8e <__ieee754_rem_pio2+0x1ae>
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	4630      	mov	r0, r6
 8009c86:	4639      	mov	r1, r7
 8009c88:	f7f6 faa6 	bl	80001d8 <__aeabi_dsub>
 8009c8c:	e00e      	b.n	8009cac <__ieee754_rem_pio2+0x1cc>
 8009c8e:	462b      	mov	r3, r5
 8009c90:	4622      	mov	r2, r4
 8009c92:	4630      	mov	r0, r6
 8009c94:	4639      	mov	r1, r7
 8009c96:	f7f6 fa9f 	bl	80001d8 <__aeabi_dsub>
 8009c9a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ca4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	dc02      	bgt.n	8009cb2 <__ieee754_rem_pio2+0x1d2>
 8009cac:	e9ca 0100 	strd	r0, r1, [sl]
 8009cb0:	e039      	b.n	8009d26 <__ieee754_rem_pio2+0x246>
 8009cb2:	a34f      	add	r3, pc, #316	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x310>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	ec51 0b18 	vmov	r0, r1, d8
 8009cbc:	f7f6 fc44 	bl	8000548 <__aeabi_dmul>
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fa84 	bl	80001d8 <__aeabi_dsub>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	4630      	mov	r0, r6
 8009cda:	4639      	mov	r1, r7
 8009cdc:	f7f6 fa7c 	bl	80001d8 <__aeabi_dsub>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f7f6 fa78 	bl	80001d8 <__aeabi_dsub>
 8009ce8:	a343      	add	r3, pc, #268	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x318>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	4604      	mov	r4, r0
 8009cf0:	460d      	mov	r5, r1
 8009cf2:	ec51 0b18 	vmov	r0, r1, d8
 8009cf6:	f7f6 fc27 	bl	8000548 <__aeabi_dmul>
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	f7f6 fa6b 	bl	80001d8 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4604      	mov	r4, r0
 8009d08:	460d      	mov	r5, r1
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	f7f6 fa63 	bl	80001d8 <__aeabi_dsub>
 8009d12:	9a03      	ldr	r2, [sp, #12]
 8009d14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b31      	cmp	r3, #49	; 0x31
 8009d1c:	dc24      	bgt.n	8009d68 <__ieee754_rem_pio2+0x288>
 8009d1e:	e9ca 0100 	strd	r0, r1, [sl]
 8009d22:	4646      	mov	r6, r8
 8009d24:	464f      	mov	r7, r9
 8009d26:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	464b      	mov	r3, r9
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fa51 	bl	80001d8 <__aeabi_dsub>
 8009d36:	462b      	mov	r3, r5
 8009d38:	4622      	mov	r2, r4
 8009d3a:	f7f6 fa4d 	bl	80001d8 <__aeabi_dsub>
 8009d3e:	9b02      	ldr	r3, [sp, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d46:	f6bf af0b 	bge.w	8009b60 <__ieee754_rem_pio2+0x80>
 8009d4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d4e:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d56:	f8ca 8000 	str.w	r8, [sl]
 8009d5a:	f8ca 0008 	str.w	r0, [sl, #8]
 8009d5e:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d62:	f1cb 0b00 	rsb	fp, fp, #0
 8009d66:	e6fb      	b.n	8009b60 <__ieee754_rem_pio2+0x80>
 8009d68:	a327      	add	r3, pc, #156	; (adr r3, 8009e08 <__ieee754_rem_pio2+0x328>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	ec51 0b18 	vmov	r0, r1, d8
 8009d72:	f7f6 fbe9 	bl	8000548 <__aeabi_dmul>
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 fa29 	bl	80001d8 <__aeabi_dsub>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	4640      	mov	r0, r8
 8009d90:	4649      	mov	r1, r9
 8009d92:	f7f6 fa21 	bl	80001d8 <__aeabi_dsub>
 8009d96:	4622      	mov	r2, r4
 8009d98:	462b      	mov	r3, r5
 8009d9a:	f7f6 fa1d 	bl	80001d8 <__aeabi_dsub>
 8009d9e:	a31c      	add	r3, pc, #112	; (adr r3, 8009e10 <__ieee754_rem_pio2+0x330>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4604      	mov	r4, r0
 8009da6:	460d      	mov	r5, r1
 8009da8:	ec51 0b18 	vmov	r0, r1, d8
 8009dac:	f7f6 fbcc 	bl	8000548 <__aeabi_dmul>
 8009db0:	4622      	mov	r2, r4
 8009db2:	462b      	mov	r3, r5
 8009db4:	f7f6 fa10 	bl	80001d8 <__aeabi_dsub>
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	e760      	b.n	8009c80 <__ieee754_rem_pio2+0x1a0>
 8009dbe:	4b1c      	ldr	r3, [pc, #112]	; (8009e30 <__ieee754_rem_pio2+0x350>)
 8009dc0:	4598      	cmp	r8, r3
 8009dc2:	dd37      	ble.n	8009e34 <__ieee754_rem_pio2+0x354>
 8009dc4:	ee10 2a10 	vmov	r2, s0
 8009dc8:	462b      	mov	r3, r5
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fa03 	bl	80001d8 <__aeabi_dsub>
 8009dd2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dd6:	e9ca 0100 	strd	r0, r1, [sl]
 8009dda:	e695      	b.n	8009b08 <__ieee754_rem_pio2+0x28>
 8009ddc:	f3af 8000 	nop.w
 8009de0:	54400000 	.word	0x54400000
 8009de4:	3ff921fb 	.word	0x3ff921fb
 8009de8:	1a626331 	.word	0x1a626331
 8009dec:	3dd0b461 	.word	0x3dd0b461
 8009df0:	1a600000 	.word	0x1a600000
 8009df4:	3dd0b461 	.word	0x3dd0b461
 8009df8:	2e037073 	.word	0x2e037073
 8009dfc:	3ba3198a 	.word	0x3ba3198a
 8009e00:	6dc9c883 	.word	0x6dc9c883
 8009e04:	3fe45f30 	.word	0x3fe45f30
 8009e08:	2e000000 	.word	0x2e000000
 8009e0c:	3ba3198a 	.word	0x3ba3198a
 8009e10:	252049c1 	.word	0x252049c1
 8009e14:	397b839a 	.word	0x397b839a
 8009e18:	3fe921fb 	.word	0x3fe921fb
 8009e1c:	4002d97b 	.word	0x4002d97b
 8009e20:	3ff921fb 	.word	0x3ff921fb
 8009e24:	413921fb 	.word	0x413921fb
 8009e28:	3fe00000 	.word	0x3fe00000
 8009e2c:	0800ac58 	.word	0x0800ac58
 8009e30:	7fefffff 	.word	0x7fefffff
 8009e34:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009e38:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009e3c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009e40:	4620      	mov	r0, r4
 8009e42:	460d      	mov	r5, r1
 8009e44:	f7f6 fe30 	bl	8000aa8 <__aeabi_d2iz>
 8009e48:	f7f6 fb14 	bl	8000474 <__aeabi_i2d>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4620      	mov	r0, r4
 8009e52:	4629      	mov	r1, r5
 8009e54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e58:	f7f6 f9be 	bl	80001d8 <__aeabi_dsub>
 8009e5c:	4b21      	ldr	r3, [pc, #132]	; (8009ee4 <__ieee754_rem_pio2+0x404>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f7f6 fb72 	bl	8000548 <__aeabi_dmul>
 8009e64:	460d      	mov	r5, r1
 8009e66:	4604      	mov	r4, r0
 8009e68:	f7f6 fe1e 	bl	8000aa8 <__aeabi_d2iz>
 8009e6c:	f7f6 fb02 	bl	8000474 <__aeabi_i2d>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e7c:	f7f6 f9ac 	bl	80001d8 <__aeabi_dsub>
 8009e80:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <__ieee754_rem_pio2+0x404>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	f7f6 fb60 	bl	8000548 <__aeabi_dmul>
 8009e88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e8c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009e90:	2703      	movs	r7, #3
 8009e92:	2400      	movs	r4, #0
 8009e94:	2500      	movs	r5, #0
 8009e96:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	46b9      	mov	r9, r7
 8009ea0:	3f01      	subs	r7, #1
 8009ea2:	f7f6 fdb9 	bl	8000a18 <__aeabi_dcmpeq>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d1f5      	bne.n	8009e96 <__ieee754_rem_pio2+0x3b6>
 8009eaa:	4b0f      	ldr	r3, [pc, #60]	; (8009ee8 <__ieee754_rem_pio2+0x408>)
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	2302      	movs	r3, #2
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	4632      	mov	r2, r6
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	4651      	mov	r1, sl
 8009eb8:	a804      	add	r0, sp, #16
 8009eba:	f000 fa75 	bl	800a3a8 <__kernel_rem_pio2>
 8009ebe:	9b02      	ldr	r3, [sp, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	4683      	mov	fp, r0
 8009ec4:	f6bf ae4c 	bge.w	8009b60 <__ieee754_rem_pio2+0x80>
 8009ec8:	e9da 2100 	ldrd	r2, r1, [sl]
 8009ecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ed0:	e9ca 2300 	strd	r2, r3, [sl]
 8009ed4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009ed8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009edc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009ee0:	e73f      	b.n	8009d62 <__ieee754_rem_pio2+0x282>
 8009ee2:	bf00      	nop
 8009ee4:	41700000 	.word	0x41700000
 8009ee8:	0800acd8 	.word	0x0800acd8
 8009eec:	00000000 	.word	0x00000000

08009ef0 <atan>:
 8009ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	ec55 4b10 	vmov	r4, r5, d0
 8009ef8:	4bc3      	ldr	r3, [pc, #780]	; (800a208 <atan+0x318>)
 8009efa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009efe:	429e      	cmp	r6, r3
 8009f00:	46ab      	mov	fp, r5
 8009f02:	dd18      	ble.n	8009f36 <atan+0x46>
 8009f04:	4bc1      	ldr	r3, [pc, #772]	; (800a20c <atan+0x31c>)
 8009f06:	429e      	cmp	r6, r3
 8009f08:	dc01      	bgt.n	8009f0e <atan+0x1e>
 8009f0a:	d109      	bne.n	8009f20 <atan+0x30>
 8009f0c:	b144      	cbz	r4, 8009f20 <atan+0x30>
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	4620      	mov	r0, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7f6 f961 	bl	80001dc <__adddf3>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	e006      	b.n	8009f2e <atan+0x3e>
 8009f20:	f1bb 0f00 	cmp.w	fp, #0
 8009f24:	f300 8131 	bgt.w	800a18a <atan+0x29a>
 8009f28:	a59b      	add	r5, pc, #620	; (adr r5, 800a198 <atan+0x2a8>)
 8009f2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f2e:	ec45 4b10 	vmov	d0, r4, r5
 8009f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	4bb6      	ldr	r3, [pc, #728]	; (800a210 <atan+0x320>)
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	dc14      	bgt.n	8009f66 <atan+0x76>
 8009f3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009f40:	429e      	cmp	r6, r3
 8009f42:	dc0d      	bgt.n	8009f60 <atan+0x70>
 8009f44:	a396      	add	r3, pc, #600	; (adr r3, 800a1a0 <atan+0x2b0>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	ee10 0a10 	vmov	r0, s0
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 f944 	bl	80001dc <__adddf3>
 8009f54:	4baf      	ldr	r3, [pc, #700]	; (800a214 <atan+0x324>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	f7f6 fd86 	bl	8000a68 <__aeabi_dcmpgt>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1e6      	bne.n	8009f2e <atan+0x3e>
 8009f60:	f04f 3aff 	mov.w	sl, #4294967295
 8009f64:	e02b      	b.n	8009fbe <atan+0xce>
 8009f66:	f000 f963 	bl	800a230 <fabs>
 8009f6a:	4bab      	ldr	r3, [pc, #684]	; (800a218 <atan+0x328>)
 8009f6c:	429e      	cmp	r6, r3
 8009f6e:	ec55 4b10 	vmov	r4, r5, d0
 8009f72:	f300 80bf 	bgt.w	800a0f4 <atan+0x204>
 8009f76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009f7a:	429e      	cmp	r6, r3
 8009f7c:	f300 80a0 	bgt.w	800a0c0 <atan+0x1d0>
 8009f80:	ee10 2a10 	vmov	r2, s0
 8009f84:	ee10 0a10 	vmov	r0, s0
 8009f88:	462b      	mov	r3, r5
 8009f8a:	4629      	mov	r1, r5
 8009f8c:	f7f6 f926 	bl	80001dc <__adddf3>
 8009f90:	4ba0      	ldr	r3, [pc, #640]	; (800a214 <atan+0x324>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 f920 	bl	80001d8 <__aeabi_dsub>
 8009f98:	2200      	movs	r2, #0
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7f6 f919 	bl	80001dc <__adddf3>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	4630      	mov	r0, r6
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 fbf3 	bl	800079c <__aeabi_ddiv>
 8009fb6:	f04f 0a00 	mov.w	sl, #0
 8009fba:	4604      	mov	r4, r0
 8009fbc:	460d      	mov	r5, r1
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	462b      	mov	r3, r5
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7f6 fabf 	bl	8000548 <__aeabi_dmul>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4680      	mov	r8, r0
 8009fd0:	4689      	mov	r9, r1
 8009fd2:	f7f6 fab9 	bl	8000548 <__aeabi_dmul>
 8009fd6:	a374      	add	r3, pc, #464	; (adr r3, 800a1a8 <atan+0x2b8>)
 8009fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	f7f6 fab2 	bl	8000548 <__aeabi_dmul>
 8009fe4:	a372      	add	r3, pc, #456	; (adr r3, 800a1b0 <atan+0x2c0>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f7f6 f8f7 	bl	80001dc <__adddf3>
 8009fee:	4632      	mov	r2, r6
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	f7f6 faa9 	bl	8000548 <__aeabi_dmul>
 8009ff6:	a370      	add	r3, pc, #448	; (adr r3, 800a1b8 <atan+0x2c8>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f8ee 	bl	80001dc <__adddf3>
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	f7f6 faa0 	bl	8000548 <__aeabi_dmul>
 800a008:	a36d      	add	r3, pc, #436	; (adr r3, 800a1c0 <atan+0x2d0>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 f8e5 	bl	80001dc <__adddf3>
 800a012:	4632      	mov	r2, r6
 800a014:	463b      	mov	r3, r7
 800a016:	f7f6 fa97 	bl	8000548 <__aeabi_dmul>
 800a01a:	a36b      	add	r3, pc, #428	; (adr r3, 800a1c8 <atan+0x2d8>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f8dc 	bl	80001dc <__adddf3>
 800a024:	4632      	mov	r2, r6
 800a026:	463b      	mov	r3, r7
 800a028:	f7f6 fa8e 	bl	8000548 <__aeabi_dmul>
 800a02c:	a368      	add	r3, pc, #416	; (adr r3, 800a1d0 <atan+0x2e0>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f8d3 	bl	80001dc <__adddf3>
 800a036:	4642      	mov	r2, r8
 800a038:	464b      	mov	r3, r9
 800a03a:	f7f6 fa85 	bl	8000548 <__aeabi_dmul>
 800a03e:	a366      	add	r3, pc, #408	; (adr r3, 800a1d8 <atan+0x2e8>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	4680      	mov	r8, r0
 800a046:	4689      	mov	r9, r1
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 fa7c 	bl	8000548 <__aeabi_dmul>
 800a050:	a363      	add	r3, pc, #396	; (adr r3, 800a1e0 <atan+0x2f0>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 f8bf 	bl	80001d8 <__aeabi_dsub>
 800a05a:	4632      	mov	r2, r6
 800a05c:	463b      	mov	r3, r7
 800a05e:	f7f6 fa73 	bl	8000548 <__aeabi_dmul>
 800a062:	a361      	add	r3, pc, #388	; (adr r3, 800a1e8 <atan+0x2f8>)
 800a064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a068:	f7f6 f8b6 	bl	80001d8 <__aeabi_dsub>
 800a06c:	4632      	mov	r2, r6
 800a06e:	463b      	mov	r3, r7
 800a070:	f7f6 fa6a 	bl	8000548 <__aeabi_dmul>
 800a074:	a35e      	add	r3, pc, #376	; (adr r3, 800a1f0 <atan+0x300>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	f7f6 f8ad 	bl	80001d8 <__aeabi_dsub>
 800a07e:	4632      	mov	r2, r6
 800a080:	463b      	mov	r3, r7
 800a082:	f7f6 fa61 	bl	8000548 <__aeabi_dmul>
 800a086:	a35c      	add	r3, pc, #368	; (adr r3, 800a1f8 <atan+0x308>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f7f6 f8a4 	bl	80001d8 <__aeabi_dsub>
 800a090:	4632      	mov	r2, r6
 800a092:	463b      	mov	r3, r7
 800a094:	f7f6 fa58 	bl	8000548 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4640      	mov	r0, r8
 800a09e:	4649      	mov	r1, r9
 800a0a0:	f7f6 f89c 	bl	80001dc <__adddf3>
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	f7f6 fa4e 	bl	8000548 <__aeabi_dmul>
 800a0ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	d14b      	bne.n	800a14e <atan+0x25e>
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 f88d 	bl	80001d8 <__aeabi_dsub>
 800a0be:	e72c      	b.n	8009f1a <atan+0x2a>
 800a0c0:	ee10 0a10 	vmov	r0, s0
 800a0c4:	4b53      	ldr	r3, [pc, #332]	; (800a214 <atan+0x324>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7f6 f885 	bl	80001d8 <__aeabi_dsub>
 800a0ce:	4b51      	ldr	r3, [pc, #324]	; (800a214 <atan+0x324>)
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f87f 	bl	80001dc <__adddf3>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 fb59 	bl	800079c <__aeabi_ddiv>
 800a0ea:	f04f 0a01 	mov.w	sl, #1
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	460d      	mov	r5, r1
 800a0f2:	e764      	b.n	8009fbe <atan+0xce>
 800a0f4:	4b49      	ldr	r3, [pc, #292]	; (800a21c <atan+0x32c>)
 800a0f6:	429e      	cmp	r6, r3
 800a0f8:	da1d      	bge.n	800a136 <atan+0x246>
 800a0fa:	ee10 0a10 	vmov	r0, s0
 800a0fe:	4b48      	ldr	r3, [pc, #288]	; (800a220 <atan+0x330>)
 800a100:	2200      	movs	r2, #0
 800a102:	4629      	mov	r1, r5
 800a104:	f7f6 f868 	bl	80001d8 <__aeabi_dsub>
 800a108:	4b45      	ldr	r3, [pc, #276]	; (800a220 <atan+0x330>)
 800a10a:	4606      	mov	r6, r0
 800a10c:	460f      	mov	r7, r1
 800a10e:	2200      	movs	r2, #0
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 fa18 	bl	8000548 <__aeabi_dmul>
 800a118:	4b3e      	ldr	r3, [pc, #248]	; (800a214 <atan+0x324>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f85e 	bl	80001dc <__adddf3>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4630      	mov	r0, r6
 800a126:	4639      	mov	r1, r7
 800a128:	f7f6 fb38 	bl	800079c <__aeabi_ddiv>
 800a12c:	f04f 0a02 	mov.w	sl, #2
 800a130:	4604      	mov	r4, r0
 800a132:	460d      	mov	r5, r1
 800a134:	e743      	b.n	8009fbe <atan+0xce>
 800a136:	462b      	mov	r3, r5
 800a138:	ee10 2a10 	vmov	r2, s0
 800a13c:	4939      	ldr	r1, [pc, #228]	; (800a224 <atan+0x334>)
 800a13e:	2000      	movs	r0, #0
 800a140:	f7f6 fb2c 	bl	800079c <__aeabi_ddiv>
 800a144:	f04f 0a03 	mov.w	sl, #3
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	e737      	b.n	8009fbe <atan+0xce>
 800a14e:	4b36      	ldr	r3, [pc, #216]	; (800a228 <atan+0x338>)
 800a150:	4e36      	ldr	r6, [pc, #216]	; (800a22c <atan+0x33c>)
 800a152:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f83d 	bl	80001d8 <__aeabi_dsub>
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	f7f6 f839 	bl	80001d8 <__aeabi_dsub>
 800a166:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a172:	f7f6 f831 	bl	80001d8 <__aeabi_dsub>
 800a176:	f1bb 0f00 	cmp.w	fp, #0
 800a17a:	4604      	mov	r4, r0
 800a17c:	460d      	mov	r5, r1
 800a17e:	f6bf aed6 	bge.w	8009f2e <atan+0x3e>
 800a182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a186:	461d      	mov	r5, r3
 800a188:	e6d1      	b.n	8009f2e <atan+0x3e>
 800a18a:	a51d      	add	r5, pc, #116	; (adr r5, 800a200 <atan+0x310>)
 800a18c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a190:	e6cd      	b.n	8009f2e <atan+0x3e>
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
 800a198:	54442d18 	.word	0x54442d18
 800a19c:	bff921fb 	.word	0xbff921fb
 800a1a0:	8800759c 	.word	0x8800759c
 800a1a4:	7e37e43c 	.word	0x7e37e43c
 800a1a8:	e322da11 	.word	0xe322da11
 800a1ac:	3f90ad3a 	.word	0x3f90ad3a
 800a1b0:	24760deb 	.word	0x24760deb
 800a1b4:	3fa97b4b 	.word	0x3fa97b4b
 800a1b8:	a0d03d51 	.word	0xa0d03d51
 800a1bc:	3fb10d66 	.word	0x3fb10d66
 800a1c0:	c54c206e 	.word	0xc54c206e
 800a1c4:	3fb745cd 	.word	0x3fb745cd
 800a1c8:	920083ff 	.word	0x920083ff
 800a1cc:	3fc24924 	.word	0x3fc24924
 800a1d0:	5555550d 	.word	0x5555550d
 800a1d4:	3fd55555 	.word	0x3fd55555
 800a1d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a1dc:	bfa2b444 	.word	0xbfa2b444
 800a1e0:	52defd9a 	.word	0x52defd9a
 800a1e4:	3fadde2d 	.word	0x3fadde2d
 800a1e8:	af749a6d 	.word	0xaf749a6d
 800a1ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800a1f0:	fe231671 	.word	0xfe231671
 800a1f4:	3fbc71c6 	.word	0x3fbc71c6
 800a1f8:	9998ebc4 	.word	0x9998ebc4
 800a1fc:	3fc99999 	.word	0x3fc99999
 800a200:	54442d18 	.word	0x54442d18
 800a204:	3ff921fb 	.word	0x3ff921fb
 800a208:	440fffff 	.word	0x440fffff
 800a20c:	7ff00000 	.word	0x7ff00000
 800a210:	3fdbffff 	.word	0x3fdbffff
 800a214:	3ff00000 	.word	0x3ff00000
 800a218:	3ff2ffff 	.word	0x3ff2ffff
 800a21c:	40038000 	.word	0x40038000
 800a220:	3ff80000 	.word	0x3ff80000
 800a224:	bff00000 	.word	0xbff00000
 800a228:	0800ae00 	.word	0x0800ae00
 800a22c:	0800ade0 	.word	0x0800ade0

0800a230 <fabs>:
 800a230:	ec51 0b10 	vmov	r0, r1, d0
 800a234:	ee10 2a10 	vmov	r2, s0
 800a238:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a23c:	ec43 2b10 	vmov	d0, r2, r3
 800a240:	4770      	bx	lr
 800a242:	0000      	movs	r0, r0
 800a244:	0000      	movs	r0, r0
	...

0800a248 <scalbn>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	ec55 4b10 	vmov	r4, r5, d0
 800a24e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a252:	4606      	mov	r6, r0
 800a254:	462b      	mov	r3, r5
 800a256:	b999      	cbnz	r1, 800a280 <scalbn+0x38>
 800a258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a25c:	4323      	orrs	r3, r4
 800a25e:	d03f      	beq.n	800a2e0 <scalbn+0x98>
 800a260:	4b35      	ldr	r3, [pc, #212]	; (800a338 <scalbn+0xf0>)
 800a262:	4629      	mov	r1, r5
 800a264:	ee10 0a10 	vmov	r0, s0
 800a268:	2200      	movs	r2, #0
 800a26a:	f7f6 f96d 	bl	8000548 <__aeabi_dmul>
 800a26e:	4b33      	ldr	r3, [pc, #204]	; (800a33c <scalbn+0xf4>)
 800a270:	429e      	cmp	r6, r3
 800a272:	4604      	mov	r4, r0
 800a274:	460d      	mov	r5, r1
 800a276:	da10      	bge.n	800a29a <scalbn+0x52>
 800a278:	a327      	add	r3, pc, #156	; (adr r3, 800a318 <scalbn+0xd0>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	e01f      	b.n	800a2c0 <scalbn+0x78>
 800a280:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a284:	4291      	cmp	r1, r2
 800a286:	d10c      	bne.n	800a2a2 <scalbn+0x5a>
 800a288:	ee10 2a10 	vmov	r2, s0
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f5 ffa4 	bl	80001dc <__adddf3>
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	e022      	b.n	800a2e0 <scalbn+0x98>
 800a29a:	460b      	mov	r3, r1
 800a29c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a2a0:	3936      	subs	r1, #54	; 0x36
 800a2a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a2a6:	4296      	cmp	r6, r2
 800a2a8:	dd0d      	ble.n	800a2c6 <scalbn+0x7e>
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	a11c      	add	r1, pc, #112	; (adr r1, 800a320 <scalbn+0xd8>)
 800a2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b2:	da02      	bge.n	800a2ba <scalbn+0x72>
 800a2b4:	a11c      	add	r1, pc, #112	; (adr r1, 800a328 <scalbn+0xe0>)
 800a2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ba:	a319      	add	r3, pc, #100	; (adr r3, 800a320 <scalbn+0xd8>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f6 f942 	bl	8000548 <__aeabi_dmul>
 800a2c4:	e7e6      	b.n	800a294 <scalbn+0x4c>
 800a2c6:	1872      	adds	r2, r6, r1
 800a2c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a2cc:	428a      	cmp	r2, r1
 800a2ce:	dcec      	bgt.n	800a2aa <scalbn+0x62>
 800a2d0:	2a00      	cmp	r2, #0
 800a2d2:	dd08      	ble.n	800a2e6 <scalbn+0x9e>
 800a2d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a2d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a2dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2e0:	ec45 4b10 	vmov	d0, r4, r5
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a2ea:	da08      	bge.n	800a2fe <scalbn+0xb6>
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	a10a      	add	r1, pc, #40	; (adr r1, 800a318 <scalbn+0xd0>)
 800a2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f4:	dac0      	bge.n	800a278 <scalbn+0x30>
 800a2f6:	a10e      	add	r1, pc, #56	; (adr r1, 800a330 <scalbn+0xe8>)
 800a2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2fc:	e7bc      	b.n	800a278 <scalbn+0x30>
 800a2fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a302:	3236      	adds	r2, #54	; 0x36
 800a304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a308:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a30c:	4620      	mov	r0, r4
 800a30e:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <scalbn+0xf8>)
 800a310:	2200      	movs	r2, #0
 800a312:	e7d5      	b.n	800a2c0 <scalbn+0x78>
 800a314:	f3af 8000 	nop.w
 800a318:	c2f8f359 	.word	0xc2f8f359
 800a31c:	01a56e1f 	.word	0x01a56e1f
 800a320:	8800759c 	.word	0x8800759c
 800a324:	7e37e43c 	.word	0x7e37e43c
 800a328:	8800759c 	.word	0x8800759c
 800a32c:	fe37e43c 	.word	0xfe37e43c
 800a330:	c2f8f359 	.word	0xc2f8f359
 800a334:	81a56e1f 	.word	0x81a56e1f
 800a338:	43500000 	.word	0x43500000
 800a33c:	ffff3cb0 	.word	0xffff3cb0
 800a340:	3c900000 	.word	0x3c900000

0800a344 <with_errno>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	4616      	mov	r6, r2
 800a34c:	f7fe f9ee 	bl	800872c <__errno>
 800a350:	4629      	mov	r1, r5
 800a352:	6006      	str	r6, [r0, #0]
 800a354:	4620      	mov	r0, r4
 800a356:	bd70      	pop	{r4, r5, r6, pc}

0800a358 <xflow>:
 800a358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35a:	4614      	mov	r4, r2
 800a35c:	461d      	mov	r5, r3
 800a35e:	b108      	cbz	r0, 800a364 <xflow+0xc>
 800a360:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a364:	e9cd 2300 	strd	r2, r3, [sp]
 800a368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f6 f8ea 	bl	8000548 <__aeabi_dmul>
 800a374:	2222      	movs	r2, #34	; 0x22
 800a376:	b003      	add	sp, #12
 800a378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a37c:	f7ff bfe2 	b.w	800a344 <with_errno>

0800a380 <__math_uflow>:
 800a380:	b508      	push	{r3, lr}
 800a382:	2200      	movs	r2, #0
 800a384:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a388:	f7ff ffe6 	bl	800a358 <xflow>
 800a38c:	ec41 0b10 	vmov	d0, r0, r1
 800a390:	bd08      	pop	{r3, pc}

0800a392 <__math_oflow>:
 800a392:	b508      	push	{r3, lr}
 800a394:	2200      	movs	r2, #0
 800a396:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a39a:	f7ff ffdd 	bl	800a358 <xflow>
 800a39e:	ec41 0b10 	vmov	d0, r0, r1
 800a3a2:	bd08      	pop	{r3, pc}
 800a3a4:	0000      	movs	r0, r0
	...

0800a3a8 <__kernel_rem_pio2>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	ed2d 8b02 	vpush	{d8}
 800a3b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a3b4:	f112 0f14 	cmn.w	r2, #20
 800a3b8:	9306      	str	r3, [sp, #24]
 800a3ba:	9104      	str	r1, [sp, #16]
 800a3bc:	4bc2      	ldr	r3, [pc, #776]	; (800a6c8 <__kernel_rem_pio2+0x320>)
 800a3be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a3c0:	9009      	str	r0, [sp, #36]	; 0x24
 800a3c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	9b06      	ldr	r3, [sp, #24]
 800a3ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ce:	bfa8      	it	ge
 800a3d0:	1ed4      	subge	r4, r2, #3
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	bfb2      	itee	lt
 800a3d6:	2400      	movlt	r4, #0
 800a3d8:	2318      	movge	r3, #24
 800a3da:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3de:	f06f 0317 	mvn.w	r3, #23
 800a3e2:	fb04 3303 	mla	r3, r4, r3, r3
 800a3e6:	eb03 0a02 	add.w	sl, r3, r2
 800a3ea:	9b00      	ldr	r3, [sp, #0]
 800a3ec:	9a05      	ldr	r2, [sp, #20]
 800a3ee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a6b8 <__kernel_rem_pio2+0x310>
 800a3f2:	eb03 0802 	add.w	r8, r3, r2
 800a3f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a3f8:	1aa7      	subs	r7, r4, r2
 800a3fa:	ae20      	add	r6, sp, #128	; 0x80
 800a3fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a400:	2500      	movs	r5, #0
 800a402:	4545      	cmp	r5, r8
 800a404:	dd13      	ble.n	800a42e <__kernel_rem_pio2+0x86>
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	aa20      	add	r2, sp, #128	; 0x80
 800a40a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a40e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a412:	f04f 0800 	mov.w	r8, #0
 800a416:	9b00      	ldr	r3, [sp, #0]
 800a418:	4598      	cmp	r8, r3
 800a41a:	dc31      	bgt.n	800a480 <__kernel_rem_pio2+0xd8>
 800a41c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a6b8 <__kernel_rem_pio2+0x310>
 800a420:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a424:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a428:	462f      	mov	r7, r5
 800a42a:	2600      	movs	r6, #0
 800a42c:	e01b      	b.n	800a466 <__kernel_rem_pio2+0xbe>
 800a42e:	42ef      	cmn	r7, r5
 800a430:	d407      	bmi.n	800a442 <__kernel_rem_pio2+0x9a>
 800a432:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a436:	f7f6 f81d 	bl	8000474 <__aeabi_i2d>
 800a43a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a43e:	3501      	adds	r5, #1
 800a440:	e7df      	b.n	800a402 <__kernel_rem_pio2+0x5a>
 800a442:	ec51 0b18 	vmov	r0, r1, d8
 800a446:	e7f8      	b.n	800a43a <__kernel_rem_pio2+0x92>
 800a448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a450:	f7f6 f87a 	bl	8000548 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a45c:	f7f5 febe 	bl	80001dc <__adddf3>
 800a460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a464:	3601      	adds	r6, #1
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	429e      	cmp	r6, r3
 800a46a:	f1a7 0708 	sub.w	r7, r7, #8
 800a46e:	ddeb      	ble.n	800a448 <__kernel_rem_pio2+0xa0>
 800a470:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a474:	f108 0801 	add.w	r8, r8, #1
 800a478:	ecab 7b02 	vstmia	fp!, {d7}
 800a47c:	3508      	adds	r5, #8
 800a47e:	e7ca      	b.n	800a416 <__kernel_rem_pio2+0x6e>
 800a480:	9b00      	ldr	r3, [sp, #0]
 800a482:	aa0c      	add	r2, sp, #48	; 0x30
 800a484:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a488:	930b      	str	r3, [sp, #44]	; 0x2c
 800a48a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a48c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a490:	9c00      	ldr	r4, [sp, #0]
 800a492:	930a      	str	r3, [sp, #40]	; 0x28
 800a494:	00e3      	lsls	r3, r4, #3
 800a496:	9308      	str	r3, [sp, #32]
 800a498:	ab98      	add	r3, sp, #608	; 0x260
 800a49a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a49e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a4a2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a4a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800a4a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a4ac:	46c3      	mov	fp, r8
 800a4ae:	46a1      	mov	r9, r4
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	f1a5 0508 	sub.w	r5, r5, #8
 800a4b8:	dc77      	bgt.n	800a5aa <__kernel_rem_pio2+0x202>
 800a4ba:	ec47 6b10 	vmov	d0, r6, r7
 800a4be:	4650      	mov	r0, sl
 800a4c0:	f7ff fec2 	bl	800a248 <scalbn>
 800a4c4:	ec57 6b10 	vmov	r6, r7, d0
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4ce:	ee10 0a10 	vmov	r0, s0
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 f838 	bl	8000548 <__aeabi_dmul>
 800a4d8:	ec41 0b10 	vmov	d0, r0, r1
 800a4dc:	f000 fab4 	bl	800aa48 <floor>
 800a4e0:	4b7a      	ldr	r3, [pc, #488]	; (800a6cc <__kernel_rem_pio2+0x324>)
 800a4e2:	ec51 0b10 	vmov	r0, r1, d0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f7f6 f82e 	bl	8000548 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 fe70 	bl	80001d8 <__aeabi_dsub>
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	f7f6 fad4 	bl	8000aa8 <__aeabi_d2iz>
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	f7f5 ffb7 	bl	8000474 <__aeabi_i2d>
 800a506:	4602      	mov	r2, r0
 800a508:	460b      	mov	r3, r1
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f5 fe63 	bl	80001d8 <__aeabi_dsub>
 800a512:	f1ba 0f00 	cmp.w	sl, #0
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	dd6d      	ble.n	800a5f8 <__kernel_rem_pio2+0x250>
 800a51c:	1e61      	subs	r1, r4, #1
 800a51e:	ab0c      	add	r3, sp, #48	; 0x30
 800a520:	9d02      	ldr	r5, [sp, #8]
 800a522:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a526:	f1ca 0018 	rsb	r0, sl, #24
 800a52a:	fa43 f200 	asr.w	r2, r3, r0
 800a52e:	4415      	add	r5, r2
 800a530:	4082      	lsls	r2, r0
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	aa0c      	add	r2, sp, #48	; 0x30
 800a536:	9502      	str	r5, [sp, #8]
 800a538:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a53c:	f1ca 0217 	rsb	r2, sl, #23
 800a540:	fa43 fb02 	asr.w	fp, r3, r2
 800a544:	f1bb 0f00 	cmp.w	fp, #0
 800a548:	dd65      	ble.n	800a616 <__kernel_rem_pio2+0x26e>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	2200      	movs	r2, #0
 800a54e:	3301      	adds	r3, #1
 800a550:	9302      	str	r3, [sp, #8]
 800a552:	4615      	mov	r5, r2
 800a554:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a558:	4294      	cmp	r4, r2
 800a55a:	f300 809f 	bgt.w	800a69c <__kernel_rem_pio2+0x2f4>
 800a55e:	f1ba 0f00 	cmp.w	sl, #0
 800a562:	dd07      	ble.n	800a574 <__kernel_rem_pio2+0x1cc>
 800a564:	f1ba 0f01 	cmp.w	sl, #1
 800a568:	f000 80c1 	beq.w	800a6ee <__kernel_rem_pio2+0x346>
 800a56c:	f1ba 0f02 	cmp.w	sl, #2
 800a570:	f000 80c7 	beq.w	800a702 <__kernel_rem_pio2+0x35a>
 800a574:	f1bb 0f02 	cmp.w	fp, #2
 800a578:	d14d      	bne.n	800a616 <__kernel_rem_pio2+0x26e>
 800a57a:	4632      	mov	r2, r6
 800a57c:	463b      	mov	r3, r7
 800a57e:	4954      	ldr	r1, [pc, #336]	; (800a6d0 <__kernel_rem_pio2+0x328>)
 800a580:	2000      	movs	r0, #0
 800a582:	f7f5 fe29 	bl	80001d8 <__aeabi_dsub>
 800a586:	4606      	mov	r6, r0
 800a588:	460f      	mov	r7, r1
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	d043      	beq.n	800a616 <__kernel_rem_pio2+0x26e>
 800a58e:	4650      	mov	r0, sl
 800a590:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a6c0 <__kernel_rem_pio2+0x318>
 800a594:	f7ff fe58 	bl	800a248 <scalbn>
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	ec53 2b10 	vmov	r2, r3, d0
 800a5a0:	f7f5 fe1a 	bl	80001d8 <__aeabi_dsub>
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	460f      	mov	r7, r1
 800a5a8:	e035      	b.n	800a616 <__kernel_rem_pio2+0x26e>
 800a5aa:	4b4a      	ldr	r3, [pc, #296]	; (800a6d4 <__kernel_rem_pio2+0x32c>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f5 ffc9 	bl	8000548 <__aeabi_dmul>
 800a5b6:	f7f6 fa77 	bl	8000aa8 <__aeabi_d2iz>
 800a5ba:	f7f5 ff5b 	bl	8000474 <__aeabi_i2d>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	ec43 2b18 	vmov	d8, r2, r3
 800a5c6:	4b44      	ldr	r3, [pc, #272]	; (800a6d8 <__kernel_rem_pio2+0x330>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f7f5 ffbd 	bl	8000548 <__aeabi_dmul>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	f7f5 fdff 	bl	80001d8 <__aeabi_dsub>
 800a5da:	f7f6 fa65 	bl	8000aa8 <__aeabi_d2iz>
 800a5de:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5e2:	f84b 0b04 	str.w	r0, [fp], #4
 800a5e6:	ec51 0b18 	vmov	r0, r1, d8
 800a5ea:	f7f5 fdf7 	bl	80001dc <__adddf3>
 800a5ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	460f      	mov	r7, r1
 800a5f6:	e75b      	b.n	800a4b0 <__kernel_rem_pio2+0x108>
 800a5f8:	d106      	bne.n	800a608 <__kernel_rem_pio2+0x260>
 800a5fa:	1e63      	subs	r3, r4, #1
 800a5fc:	aa0c      	add	r2, sp, #48	; 0x30
 800a5fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a602:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a606:	e79d      	b.n	800a544 <__kernel_rem_pio2+0x19c>
 800a608:	4b34      	ldr	r3, [pc, #208]	; (800a6dc <__kernel_rem_pio2+0x334>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	f7f6 fa22 	bl	8000a54 <__aeabi_dcmpge>
 800a610:	2800      	cmp	r0, #0
 800a612:	d140      	bne.n	800a696 <__kernel_rem_pio2+0x2ee>
 800a614:	4683      	mov	fp, r0
 800a616:	2200      	movs	r2, #0
 800a618:	2300      	movs	r3, #0
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f6 f9fb 	bl	8000a18 <__aeabi_dcmpeq>
 800a622:	2800      	cmp	r0, #0
 800a624:	f000 80c1 	beq.w	800a7aa <__kernel_rem_pio2+0x402>
 800a628:	1e65      	subs	r5, r4, #1
 800a62a:	462b      	mov	r3, r5
 800a62c:	2200      	movs	r2, #0
 800a62e:	9900      	ldr	r1, [sp, #0]
 800a630:	428b      	cmp	r3, r1
 800a632:	da6d      	bge.n	800a710 <__kernel_rem_pio2+0x368>
 800a634:	2a00      	cmp	r2, #0
 800a636:	f000 808a 	beq.w	800a74e <__kernel_rem_pio2+0x3a6>
 800a63a:	ab0c      	add	r3, sp, #48	; 0x30
 800a63c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a640:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 80ae 	beq.w	800a7a6 <__kernel_rem_pio2+0x3fe>
 800a64a:	4650      	mov	r0, sl
 800a64c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a6c0 <__kernel_rem_pio2+0x318>
 800a650:	f7ff fdfa 	bl	800a248 <scalbn>
 800a654:	1c6b      	adds	r3, r5, #1
 800a656:	00da      	lsls	r2, r3, #3
 800a658:	9205      	str	r2, [sp, #20]
 800a65a:	ec57 6b10 	vmov	r6, r7, d0
 800a65e:	aa70      	add	r2, sp, #448	; 0x1c0
 800a660:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a6d4 <__kernel_rem_pio2+0x32c>
 800a664:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a668:	462c      	mov	r4, r5
 800a66a:	f04f 0800 	mov.w	r8, #0
 800a66e:	2c00      	cmp	r4, #0
 800a670:	f280 80d4 	bge.w	800a81c <__kernel_rem_pio2+0x474>
 800a674:	462c      	mov	r4, r5
 800a676:	2c00      	cmp	r4, #0
 800a678:	f2c0 8102 	blt.w	800a880 <__kernel_rem_pio2+0x4d8>
 800a67c:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <__kernel_rem_pio2+0x338>)
 800a67e:	461e      	mov	r6, r3
 800a680:	ab70      	add	r3, sp, #448	; 0x1c0
 800a682:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a686:	1b2b      	subs	r3, r5, r4
 800a688:	f04f 0900 	mov.w	r9, #0
 800a68c:	f04f 0a00 	mov.w	sl, #0
 800a690:	2700      	movs	r7, #0
 800a692:	9306      	str	r3, [sp, #24]
 800a694:	e0e6      	b.n	800a864 <__kernel_rem_pio2+0x4bc>
 800a696:	f04f 0b02 	mov.w	fp, #2
 800a69a:	e756      	b.n	800a54a <__kernel_rem_pio2+0x1a2>
 800a69c:	f8d8 3000 	ldr.w	r3, [r8]
 800a6a0:	bb05      	cbnz	r5, 800a6e4 <__kernel_rem_pio2+0x33c>
 800a6a2:	b123      	cbz	r3, 800a6ae <__kernel_rem_pio2+0x306>
 800a6a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6a8:	f8c8 3000 	str.w	r3, [r8]
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	f108 0804 	add.w	r8, r8, #4
 800a6b4:	461d      	mov	r5, r3
 800a6b6:	e74f      	b.n	800a558 <__kernel_rem_pio2+0x1b0>
	...
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	0800ae60 	.word	0x0800ae60
 800a6cc:	40200000 	.word	0x40200000
 800a6d0:	3ff00000 	.word	0x3ff00000
 800a6d4:	3e700000 	.word	0x3e700000
 800a6d8:	41700000 	.word	0x41700000
 800a6dc:	3fe00000 	.word	0x3fe00000
 800a6e0:	0800ae20 	.word	0x0800ae20
 800a6e4:	1acb      	subs	r3, r1, r3
 800a6e6:	f8c8 3000 	str.w	r3, [r8]
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	e7df      	b.n	800a6ae <__kernel_rem_pio2+0x306>
 800a6ee:	1e62      	subs	r2, r4, #1
 800a6f0:	ab0c      	add	r3, sp, #48	; 0x30
 800a6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a6fa:	a90c      	add	r1, sp, #48	; 0x30
 800a6fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a700:	e738      	b.n	800a574 <__kernel_rem_pio2+0x1cc>
 800a702:	1e62      	subs	r2, r4, #1
 800a704:	ab0c      	add	r3, sp, #48	; 0x30
 800a706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a70e:	e7f4      	b.n	800a6fa <__kernel_rem_pio2+0x352>
 800a710:	a90c      	add	r1, sp, #48	; 0x30
 800a712:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a716:	3b01      	subs	r3, #1
 800a718:	430a      	orrs	r2, r1
 800a71a:	e788      	b.n	800a62e <__kernel_rem_pio2+0x286>
 800a71c:	3301      	adds	r3, #1
 800a71e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a722:	2900      	cmp	r1, #0
 800a724:	d0fa      	beq.n	800a71c <__kernel_rem_pio2+0x374>
 800a726:	9a08      	ldr	r2, [sp, #32]
 800a728:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a72c:	446a      	add	r2, sp
 800a72e:	3a98      	subs	r2, #152	; 0x98
 800a730:	9208      	str	r2, [sp, #32]
 800a732:	9a06      	ldr	r2, [sp, #24]
 800a734:	a920      	add	r1, sp, #128	; 0x80
 800a736:	18a2      	adds	r2, r4, r2
 800a738:	18e3      	adds	r3, r4, r3
 800a73a:	f104 0801 	add.w	r8, r4, #1
 800a73e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	9b02      	ldr	r3, [sp, #8]
 800a746:	4543      	cmp	r3, r8
 800a748:	da04      	bge.n	800a754 <__kernel_rem_pio2+0x3ac>
 800a74a:	461c      	mov	r4, r3
 800a74c:	e6a2      	b.n	800a494 <__kernel_rem_pio2+0xec>
 800a74e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a750:	2301      	movs	r3, #1
 800a752:	e7e4      	b.n	800a71e <__kernel_rem_pio2+0x376>
 800a754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a756:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a75a:	f7f5 fe8b 	bl	8000474 <__aeabi_i2d>
 800a75e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a764:	46ab      	mov	fp, r5
 800a766:	461c      	mov	r4, r3
 800a768:	f04f 0900 	mov.w	r9, #0
 800a76c:	2600      	movs	r6, #0
 800a76e:	2700      	movs	r7, #0
 800a770:	9b05      	ldr	r3, [sp, #20]
 800a772:	4599      	cmp	r9, r3
 800a774:	dd06      	ble.n	800a784 <__kernel_rem_pio2+0x3dc>
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a77c:	f108 0801 	add.w	r8, r8, #1
 800a780:	9308      	str	r3, [sp, #32]
 800a782:	e7df      	b.n	800a744 <__kernel_rem_pio2+0x39c>
 800a784:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a788:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a78c:	f7f5 fedc 	bl	8000548 <__aeabi_dmul>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f5 fd20 	bl	80001dc <__adddf3>
 800a79c:	f109 0901 	add.w	r9, r9, #1
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	e7e4      	b.n	800a770 <__kernel_rem_pio2+0x3c8>
 800a7a6:	3d01      	subs	r5, #1
 800a7a8:	e747      	b.n	800a63a <__kernel_rem_pio2+0x292>
 800a7aa:	ec47 6b10 	vmov	d0, r6, r7
 800a7ae:	f1ca 0000 	rsb	r0, sl, #0
 800a7b2:	f7ff fd49 	bl	800a248 <scalbn>
 800a7b6:	ec57 6b10 	vmov	r6, r7, d0
 800a7ba:	4ba0      	ldr	r3, [pc, #640]	; (800aa3c <__kernel_rem_pio2+0x694>)
 800a7bc:	ee10 0a10 	vmov	r0, s0
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	4639      	mov	r1, r7
 800a7c4:	f7f6 f946 	bl	8000a54 <__aeabi_dcmpge>
 800a7c8:	b1f8      	cbz	r0, 800a80a <__kernel_rem_pio2+0x462>
 800a7ca:	4b9d      	ldr	r3, [pc, #628]	; (800aa40 <__kernel_rem_pio2+0x698>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4639      	mov	r1, r7
 800a7d2:	f7f5 feb9 	bl	8000548 <__aeabi_dmul>
 800a7d6:	f7f6 f967 	bl	8000aa8 <__aeabi_d2iz>
 800a7da:	4680      	mov	r8, r0
 800a7dc:	f7f5 fe4a 	bl	8000474 <__aeabi_i2d>
 800a7e0:	4b96      	ldr	r3, [pc, #600]	; (800aa3c <__kernel_rem_pio2+0x694>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f7f5 feb0 	bl	8000548 <__aeabi_dmul>
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	f7f5 fcf2 	bl	80001d8 <__aeabi_dsub>
 800a7f4:	f7f6 f958 	bl	8000aa8 <__aeabi_d2iz>
 800a7f8:	1c65      	adds	r5, r4, #1
 800a7fa:	ab0c      	add	r3, sp, #48	; 0x30
 800a7fc:	f10a 0a18 	add.w	sl, sl, #24
 800a800:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a804:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a808:	e71f      	b.n	800a64a <__kernel_rem_pio2+0x2a2>
 800a80a:	4630      	mov	r0, r6
 800a80c:	4639      	mov	r1, r7
 800a80e:	f7f6 f94b 	bl	8000aa8 <__aeabi_d2iz>
 800a812:	ab0c      	add	r3, sp, #48	; 0x30
 800a814:	4625      	mov	r5, r4
 800a816:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a81a:	e716      	b.n	800a64a <__kernel_rem_pio2+0x2a2>
 800a81c:	ab0c      	add	r3, sp, #48	; 0x30
 800a81e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a822:	f7f5 fe27 	bl	8000474 <__aeabi_i2d>
 800a826:	4632      	mov	r2, r6
 800a828:	463b      	mov	r3, r7
 800a82a:	f7f5 fe8d 	bl	8000548 <__aeabi_dmul>
 800a82e:	4642      	mov	r2, r8
 800a830:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a834:	464b      	mov	r3, r9
 800a836:	4630      	mov	r0, r6
 800a838:	4639      	mov	r1, r7
 800a83a:	f7f5 fe85 	bl	8000548 <__aeabi_dmul>
 800a83e:	3c01      	subs	r4, #1
 800a840:	4606      	mov	r6, r0
 800a842:	460f      	mov	r7, r1
 800a844:	e713      	b.n	800a66e <__kernel_rem_pio2+0x2c6>
 800a846:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a84a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a84e:	f7f5 fe7b 	bl	8000548 <__aeabi_dmul>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4648      	mov	r0, r9
 800a858:	4651      	mov	r1, sl
 800a85a:	f7f5 fcbf 	bl	80001dc <__adddf3>
 800a85e:	3701      	adds	r7, #1
 800a860:	4681      	mov	r9, r0
 800a862:	468a      	mov	sl, r1
 800a864:	9b00      	ldr	r3, [sp, #0]
 800a866:	429f      	cmp	r7, r3
 800a868:	dc02      	bgt.n	800a870 <__kernel_rem_pio2+0x4c8>
 800a86a:	9b06      	ldr	r3, [sp, #24]
 800a86c:	429f      	cmp	r7, r3
 800a86e:	ddea      	ble.n	800a846 <__kernel_rem_pio2+0x49e>
 800a870:	9a06      	ldr	r2, [sp, #24]
 800a872:	ab48      	add	r3, sp, #288	; 0x120
 800a874:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a878:	e9c6 9a00 	strd	r9, sl, [r6]
 800a87c:	3c01      	subs	r4, #1
 800a87e:	e6fa      	b.n	800a676 <__kernel_rem_pio2+0x2ce>
 800a880:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a882:	2b02      	cmp	r3, #2
 800a884:	dc0b      	bgt.n	800a89e <__kernel_rem_pio2+0x4f6>
 800a886:	2b00      	cmp	r3, #0
 800a888:	dc39      	bgt.n	800a8fe <__kernel_rem_pio2+0x556>
 800a88a:	d05d      	beq.n	800a948 <__kernel_rem_pio2+0x5a0>
 800a88c:	9b02      	ldr	r3, [sp, #8]
 800a88e:	f003 0007 	and.w	r0, r3, #7
 800a892:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a896:	ecbd 8b02 	vpop	{d8}
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a8a0:	2b03      	cmp	r3, #3
 800a8a2:	d1f3      	bne.n	800a88c <__kernel_rem_pio2+0x4e4>
 800a8a4:	9b05      	ldr	r3, [sp, #20]
 800a8a6:	9500      	str	r5, [sp, #0]
 800a8a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a8ac:	eb0d 0403 	add.w	r4, sp, r3
 800a8b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a8b4:	46a2      	mov	sl, r4
 800a8b6:	9b00      	ldr	r3, [sp, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f1aa 0a08 	sub.w	sl, sl, #8
 800a8be:	dc69      	bgt.n	800a994 <__kernel_rem_pio2+0x5ec>
 800a8c0:	46aa      	mov	sl, r5
 800a8c2:	f1ba 0f01 	cmp.w	sl, #1
 800a8c6:	f1a4 0408 	sub.w	r4, r4, #8
 800a8ca:	f300 8083 	bgt.w	800a9d4 <__kernel_rem_pio2+0x62c>
 800a8ce:	9c05      	ldr	r4, [sp, #20]
 800a8d0:	ab48      	add	r3, sp, #288	; 0x120
 800a8d2:	441c      	add	r4, r3
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	2d01      	cmp	r5, #1
 800a8da:	f300 809a 	bgt.w	800aa12 <__kernel_rem_pio2+0x66a>
 800a8de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a8e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a8e6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ea:	f040 8098 	bne.w	800aa1e <__kernel_rem_pio2+0x676>
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	e9c3 7800 	strd	r7, r8, [r3]
 800a8f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a8f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a8fc:	e7c6      	b.n	800a88c <__kernel_rem_pio2+0x4e4>
 800a8fe:	9e05      	ldr	r6, [sp, #20]
 800a900:	ab48      	add	r3, sp, #288	; 0x120
 800a902:	441e      	add	r6, r3
 800a904:	462c      	mov	r4, r5
 800a906:	2000      	movs	r0, #0
 800a908:	2100      	movs	r1, #0
 800a90a:	2c00      	cmp	r4, #0
 800a90c:	da33      	bge.n	800a976 <__kernel_rem_pio2+0x5ce>
 800a90e:	f1bb 0f00 	cmp.w	fp, #0
 800a912:	d036      	beq.n	800a982 <__kernel_rem_pio2+0x5da>
 800a914:	4602      	mov	r2, r0
 800a916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a91a:	9c04      	ldr	r4, [sp, #16]
 800a91c:	e9c4 2300 	strd	r2, r3, [r4]
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a928:	f7f5 fc56 	bl	80001d8 <__aeabi_dsub>
 800a92c:	ae4a      	add	r6, sp, #296	; 0x128
 800a92e:	2401      	movs	r4, #1
 800a930:	42a5      	cmp	r5, r4
 800a932:	da29      	bge.n	800a988 <__kernel_rem_pio2+0x5e0>
 800a934:	f1bb 0f00 	cmp.w	fp, #0
 800a938:	d002      	beq.n	800a940 <__kernel_rem_pio2+0x598>
 800a93a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a93e:	4619      	mov	r1, r3
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a946:	e7a1      	b.n	800a88c <__kernel_rem_pio2+0x4e4>
 800a948:	9c05      	ldr	r4, [sp, #20]
 800a94a:	ab48      	add	r3, sp, #288	; 0x120
 800a94c:	441c      	add	r4, r3
 800a94e:	2000      	movs	r0, #0
 800a950:	2100      	movs	r1, #0
 800a952:	2d00      	cmp	r5, #0
 800a954:	da09      	bge.n	800a96a <__kernel_rem_pio2+0x5c2>
 800a956:	f1bb 0f00 	cmp.w	fp, #0
 800a95a:	d002      	beq.n	800a962 <__kernel_rem_pio2+0x5ba>
 800a95c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a960:	4619      	mov	r1, r3
 800a962:	9b04      	ldr	r3, [sp, #16]
 800a964:	e9c3 0100 	strd	r0, r1, [r3]
 800a968:	e790      	b.n	800a88c <__kernel_rem_pio2+0x4e4>
 800a96a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a96e:	f7f5 fc35 	bl	80001dc <__adddf3>
 800a972:	3d01      	subs	r5, #1
 800a974:	e7ed      	b.n	800a952 <__kernel_rem_pio2+0x5aa>
 800a976:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a97a:	f7f5 fc2f 	bl	80001dc <__adddf3>
 800a97e:	3c01      	subs	r4, #1
 800a980:	e7c3      	b.n	800a90a <__kernel_rem_pio2+0x562>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	e7c8      	b.n	800a91a <__kernel_rem_pio2+0x572>
 800a988:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a98c:	f7f5 fc26 	bl	80001dc <__adddf3>
 800a990:	3401      	adds	r4, #1
 800a992:	e7cd      	b.n	800a930 <__kernel_rem_pio2+0x588>
 800a994:	e9da 8900 	ldrd	r8, r9, [sl]
 800a998:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a99c:	9b00      	ldr	r3, [sp, #0]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	463b      	mov	r3, r7
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fc17 	bl	80001dc <__adddf3>
 800a9ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fc0d 	bl	80001d8 <__aeabi_dsub>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	f7f5 fc0b 	bl	80001dc <__adddf3>
 800a9c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a9ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9ce:	ed8a 7b00 	vstr	d7, [sl]
 800a9d2:	e770      	b.n	800a8b6 <__kernel_rem_pio2+0x50e>
 800a9d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a9d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a9dc:	4640      	mov	r0, r8
 800a9de:	4632      	mov	r2, r6
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f5 fbfa 	bl	80001dc <__adddf3>
 800a9e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 fbf0 	bl	80001d8 <__aeabi_dsub>
 800a9f8:	4632      	mov	r2, r6
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	f7f5 fbee 	bl	80001dc <__adddf3>
 800aa00:	ed9d 7b00 	vldr	d7, [sp]
 800aa04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa08:	ed84 7b00 	vstr	d7, [r4]
 800aa0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa10:	e757      	b.n	800a8c2 <__kernel_rem_pio2+0x51a>
 800aa12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa16:	f7f5 fbe1 	bl	80001dc <__adddf3>
 800aa1a:	3d01      	subs	r5, #1
 800aa1c:	e75c      	b.n	800a8d8 <__kernel_rem_pio2+0x530>
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	9a04      	ldr	r2, [sp, #16]
 800aa22:	601f      	str	r7, [r3, #0]
 800aa24:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800aa28:	605c      	str	r4, [r3, #4]
 800aa2a:	609d      	str	r5, [r3, #8]
 800aa2c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aa30:	60d3      	str	r3, [r2, #12]
 800aa32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa36:	6110      	str	r0, [r2, #16]
 800aa38:	6153      	str	r3, [r2, #20]
 800aa3a:	e727      	b.n	800a88c <__kernel_rem_pio2+0x4e4>
 800aa3c:	41700000 	.word	0x41700000
 800aa40:	3e700000 	.word	0x3e700000
 800aa44:	00000000 	.word	0x00000000

0800aa48 <floor>:
 800aa48:	ec51 0b10 	vmov	r0, r1, d0
 800aa4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800aa58:	2e13      	cmp	r6, #19
 800aa5a:	ee10 5a10 	vmov	r5, s0
 800aa5e:	ee10 8a10 	vmov	r8, s0
 800aa62:	460c      	mov	r4, r1
 800aa64:	dc31      	bgt.n	800aaca <floor+0x82>
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	da14      	bge.n	800aa94 <floor+0x4c>
 800aa6a:	a333      	add	r3, pc, #204	; (adr r3, 800ab38 <floor+0xf0>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fbb4 	bl	80001dc <__adddf3>
 800aa74:	2200      	movs	r2, #0
 800aa76:	2300      	movs	r3, #0
 800aa78:	f7f5 fff6 	bl	8000a68 <__aeabi_dcmpgt>
 800aa7c:	b138      	cbz	r0, 800aa8e <floor+0x46>
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	da53      	bge.n	800ab2a <floor+0xe2>
 800aa82:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800aa86:	4325      	orrs	r5, r4
 800aa88:	d052      	beq.n	800ab30 <floor+0xe8>
 800aa8a:	4c2d      	ldr	r4, [pc, #180]	; (800ab40 <floor+0xf8>)
 800aa8c:	2500      	movs	r5, #0
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	e024      	b.n	800aade <floor+0x96>
 800aa94:	4f2b      	ldr	r7, [pc, #172]	; (800ab44 <floor+0xfc>)
 800aa96:	4137      	asrs	r7, r6
 800aa98:	ea01 0307 	and.w	r3, r1, r7
 800aa9c:	4303      	orrs	r3, r0
 800aa9e:	d01e      	beq.n	800aade <floor+0x96>
 800aaa0:	a325      	add	r3, pc, #148	; (adr r3, 800ab38 <floor+0xf0>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fb99 	bl	80001dc <__adddf3>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2300      	movs	r3, #0
 800aaae:	f7f5 ffdb 	bl	8000a68 <__aeabi_dcmpgt>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0eb      	beq.n	800aa8e <floor+0x46>
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	bfbe      	ittt	lt
 800aaba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aabe:	4133      	asrlt	r3, r6
 800aac0:	18e4      	addlt	r4, r4, r3
 800aac2:	ea24 0407 	bic.w	r4, r4, r7
 800aac6:	2500      	movs	r5, #0
 800aac8:	e7e1      	b.n	800aa8e <floor+0x46>
 800aaca:	2e33      	cmp	r6, #51	; 0x33
 800aacc:	dd0b      	ble.n	800aae6 <floor+0x9e>
 800aace:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aad2:	d104      	bne.n	800aade <floor+0x96>
 800aad4:	ee10 2a10 	vmov	r2, s0
 800aad8:	460b      	mov	r3, r1
 800aada:	f7f5 fb7f 	bl	80001dc <__adddf3>
 800aade:	ec41 0b10 	vmov	d0, r0, r1
 800aae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800aaea:	f04f 37ff 	mov.w	r7, #4294967295
 800aaee:	40df      	lsrs	r7, r3
 800aaf0:	4238      	tst	r0, r7
 800aaf2:	d0f4      	beq.n	800aade <floor+0x96>
 800aaf4:	a310      	add	r3, pc, #64	; (adr r3, 800ab38 <floor+0xf0>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fb6f 	bl	80001dc <__adddf3>
 800aafe:	2200      	movs	r2, #0
 800ab00:	2300      	movs	r3, #0
 800ab02:	f7f5 ffb1 	bl	8000a68 <__aeabi_dcmpgt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0c1      	beq.n	800aa8e <floor+0x46>
 800ab0a:	2c00      	cmp	r4, #0
 800ab0c:	da0a      	bge.n	800ab24 <floor+0xdc>
 800ab0e:	2e14      	cmp	r6, #20
 800ab10:	d101      	bne.n	800ab16 <floor+0xce>
 800ab12:	3401      	adds	r4, #1
 800ab14:	e006      	b.n	800ab24 <floor+0xdc>
 800ab16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	40b3      	lsls	r3, r6
 800ab1e:	441d      	add	r5, r3
 800ab20:	45a8      	cmp	r8, r5
 800ab22:	d8f6      	bhi.n	800ab12 <floor+0xca>
 800ab24:	ea25 0507 	bic.w	r5, r5, r7
 800ab28:	e7b1      	b.n	800aa8e <floor+0x46>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	462c      	mov	r4, r5
 800ab2e:	e7ae      	b.n	800aa8e <floor+0x46>
 800ab30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ab34:	e7ab      	b.n	800aa8e <floor+0x46>
 800ab36:	bf00      	nop
 800ab38:	8800759c 	.word	0x8800759c
 800ab3c:	7e37e43c 	.word	0x7e37e43c
 800ab40:	bff00000 	.word	0xbff00000
 800ab44:	000fffff 	.word	0x000fffff

0800ab48 <_init>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	bf00      	nop
 800ab4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4e:	bc08      	pop	{r3}
 800ab50:	469e      	mov	lr, r3
 800ab52:	4770      	bx	lr

0800ab54 <_fini>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	bf00      	nop
 800ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5a:	bc08      	pop	{r3}
 800ab5c:	469e      	mov	lr, r3
 800ab5e:	4770      	bx	lr
