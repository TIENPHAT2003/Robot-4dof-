
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800ded8  0800ded8  0001ded8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e514  0800e514  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e514  0800e514  0001e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e51c  0800e51c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e51c  0800e51c  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e520  0800e520  0001e520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00005888  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005a68  20005a68  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015345  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003301  00000000  00000000  00035594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001390  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f29  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023786  00000000  00000000  0003ab51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016c99  00000000  00000000  0005e2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d70f3  00000000  00000000  00074f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006960  00000000  00000000  0014c064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  001529c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800debc 	.word	0x0800debc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800debc 	.word	0x0800debc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6178      	str	r0, [r7, #20]
 8000ff8:	6139      	str	r1, [r7, #16]
 8000ffa:	60fa      	str	r2, [r7, #12]
 8000ffc:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 800100c:	6979      	ldr	r1, [r7, #20]
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	0000      	movs	r0, r0
 8001024:	0000      	movs	r0, r0
	...

08001028 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001048:	441a      	add	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa5e 	bl	8000524 <__aeabi_i2d>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800106e:	f7ff fbed 	bl	800084c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4614      	mov	r4, r2
 8001078:	461d      	mov	r5, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff fbdd 	bl	800084c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <SpeedReadNonReset+0x118>)
 80010a0:	f7ff faaa 	bl	80005f8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001130 <SpeedReadNonReset+0x108>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4614      	mov	r4, r2
 80010c4:	461d      	mov	r5, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff f8d5 	bl	800028c <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010f0:	a311      	add	r3, pc, #68	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	ced91687 	.word	0xced91687
 8001134:	3feb53f7 	.word	0x3feb53f7
 8001138:	532617c2 	.word	0x532617c2
 800113c:	3fb2a305 	.word	0x3fb2a305
 8001140:	404e0000 	.word	0x404e0000

08001144 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <CountRead+0x52>
	{
		return enc->count_X4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ca 	bl	8000524 <__aeabi_i2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e033      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e1b      	ldrb	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <CountRead+0x64>
 80011a6:	3303      	adds	r3, #3
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9b5 	bl	8000524 <__aeabi_i2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e01e      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d116      	bne.n	80011f6 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011f4:	e003      	b.n	80011fe <CountRead+0xba>
	}else {
		return 0;
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
	}
}
 80011fe:	ec43 2b17 	vmov	d7, r2, r3
 8001202:	eeb0 0a47 	vmov.f32	s0, s14
 8001206:	eef0 0a67 	vmov.f32	s1, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	}
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfb8      	it	lt
 8001258:	425b      	neglt	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da4d      	bge.n	800130e <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <Drive+0x48>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e018      	b.n	80012b8 <Drive+0x7a>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d105      	bne.n	800129a <Drive+0x5c>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
 8001298:	e00e      	b.n	80012b8 <Drive+0x7a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d105      	bne.n	80012ae <Drive+0x70>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ac:	e004      	b.n	80012b8 <Drive+0x7a>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <Drive+0x90>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	89da      	ldrh	r2, [r3, #14]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80012cc:	e0b7      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d107      	bne.n	80012e6 <Drive+0xa8>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	89d9      	ldrh	r1, [r3, #14]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	6393      	str	r3, [r2, #56]	; 0x38
 80012e4:	e0ab      	b.n	800143e <Drive+0x200>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d107      	bne.n	80012fe <Drive+0xc0>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	89d9      	ldrh	r1, [r3, #14]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	460b      	mov	r3, r1
 80012fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012fc:	e09f      	b.n	800143e <Drive+0x200>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	89d9      	ldrh	r1, [r3, #14]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800130c:	e097      	b.n	800143e <Drive+0x200>
	else if(Input>0){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd4d      	ble.n	80013b0 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <Drive+0xec>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	89da      	ldrh	r2, [r3, #14]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
 8001328:	e01e      	b.n	8001368 <Drive+0x12a>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d107      	bne.n	8001342 <Drive+0x104>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	89d9      	ldrh	r1, [r3, #14]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	6393      	str	r3, [r2, #56]	; 0x38
 8001340:	e012      	b.n	8001368 <Drive+0x12a>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d107      	bne.n	800135a <Drive+0x11c>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	89d9      	ldrh	r1, [r3, #14]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001358:	e006      	b.n	8001368 <Drive+0x12a>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	89d9      	ldrh	r1, [r3, #14]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	460b      	mov	r3, r1
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <Drive+0x13e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
}
 800137a:	e060      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d105      	bne.n	8001390 <Drive+0x152>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	6393      	str	r3, [r2, #56]	; 0x38
 800138e:	e056      	b.n	800143e <Drive+0x200>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d105      	bne.n	80013a4 <Drive+0x166>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013a2:	e04c      	b.n	800143e <Drive+0x200>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ae:	e046      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <Drive+0x186>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
 80013c2:	e018      	b.n	80013f6 <Drive+0x1b8>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d105      	bne.n	80013d8 <Drive+0x19a>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	6393      	str	r3, [r2, #56]	; 0x38
 80013d6:	e00e      	b.n	80013f6 <Drive+0x1b8>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d105      	bne.n	80013ec <Drive+0x1ae>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ea:	e004      	b.n	80013f6 <Drive+0x1b8>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <Drive+0x1cc>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001408:	e019      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d105      	bne.n	800141e <Drive+0x1e0>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800141c:	e00f      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d105      	bne.n	8001432 <Drive+0x1f4>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001430:	e005      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800143c:	e7ff      	b.n	800143e <Drive+0x200>
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	ed87 0a02 	vstr	s0, [r7, #8]
 8001456:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a02 	vldr	s15, [r3, #8]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 6a07 	vldr	s13, [r3, #28]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	ed93 7a08 	vldr	s14, [r3, #32]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd06      	ble.n	80014e6 <Pid_Cal+0x9c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	e002      	b.n	80014ec <Pid_Cal+0xa2>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d506      	bpl.n	800151c <Pid_Cal+0xd2>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	e002      	b.n	8001522 <Pid_Cal+0xd8>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edd3 6a02 	vldr	s13, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a03 	vldr	s15, [r3, #12]
 800153a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	ed93 7a04 	vldr	s14, [r3, #16]
 8001548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800155c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ed93 7a06 	vldr	s14, [r3, #24]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd02      	ble.n	80015d8 <Pid_Cal+0x18e>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	e001      	b.n	80015dc <Pid_Cal+0x192>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d502      	bpl.n	80015fc <Pid_Cal+0x1b2>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	e001      	b.n	8001600 <Pid_Cal+0x1b6>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <vApplicationGetIdleTaskMemory+0x2c>)
 8001620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <vApplicationGetIdleTaskMemory+0x30>)
 8001626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200001fc 	.word	0x200001fc
 8001640:	20000250 	.word	0x20000250

08001644 <p>:

float T1, T2, T3, T4;
float Tf=3000;

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	ed87 0a05 	vstr	s0, [r7, #20]
 800164e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001652:	ed87 1a03 	vstr	s2, [r7, #12]
 8001656:	edc7 1a02 	vstr	s3, [r7, #8]
 800165a:	ed87 2a01 	vstr	s4, [r7, #4]
 800165e:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	edd7 7a00 	vldr	s15, [r7]
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001676:	edd7 6a04 	vldr	s13, [r7, #16]
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001682:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001686:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001692:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001696:	edd7 7a02 	vldr	s15, [r7, #8]
 800169a:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800169e:	ed97 6a03 	vldr	s12, [r7, #12]
 80016a2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016aa:	edd7 5a01 	vldr	s11, [r7, #4]
 80016ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80016b2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80016ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d6:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80016da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80016f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80016f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fa:	ee76 5a27 	vadd.f32	s11, s12, s15
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001706:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800170a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800170e:	edd7 7a00 	vldr	s15, [r7]
 8001712:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001716:	edd7 7a00 	vldr	s15, [r7]
 800171a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <UartIdle_Init>:
uint16_t uartLogRxSize;
char dataAngle[128];
uint16_t count_timer = 0;
uint8_t count = 0;
void UartIdle_Init()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <UartIdle_Init+0x24>)
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <UartIdle_Init+0x28>)
 8001740:	f005 f812 	bl	8006768 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <UartIdle_Init+0x2c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <UartIdle_Init+0x2c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0208 	bic.w	r2, r2, #8
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000ae8 	.word	0x20000ae8
 800175c:	20000690 	.word	0x20000690
 8001760:	200006d8 	.word	0x200006d8

08001764 <UART_Handle>:

void UART_Handle(char* data, Setpoint_* Setpoint)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af04      	add	r7, sp, #16
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    static char uartDataBuffer[1024] = "";
    static size_t dataBufferIndex = 0;

    if (flag_uart_rx == 1 && strstr(data, "\n"))
 800176e:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <UART_Handle+0x260>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 8121 	bne.w	80019ba <UART_Handle+0x256>
 8001778:	210a      	movs	r1, #10
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f009 f9f7 	bl	800ab6e <strchr>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8119 	beq.w	80019ba <UART_Handle+0x256>
    {
        if (strstr(data, "theta1"))
 8001788:	498f      	ldr	r1, [pc, #572]	; (80019c8 <UART_Handle+0x264>)
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f009 fa4c 	bl	800ac28 <strstr>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <UART_Handle+0x60>
        {
            if (sscanf(data, "theta1:%f,theta2:%f,theta3:%f,theta4:%f\n",
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	1d18      	adds	r0, r3, #4
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3308      	adds	r3, #8
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	320c      	adds	r2, #12
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4603      	mov	r3, r0
 80017aa:	460a      	mov	r2, r1
 80017ac:	4987      	ldr	r1, [pc, #540]	; (80019cc <UART_Handle+0x268>)
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f009 f964 	bl	800aa7c <siscanf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	f040 80f5 	bne.w	80019a6 <UART_Handle+0x242>
                       &Setpoint->setpoint1, &Setpoint->setpoint2,
                       &Setpoint->setpoint3, &Setpoint->setpoint4) == 4)
            {
                FlagStart.starKinematics = 1;
 80017bc:	4b84      	ldr	r3, [pc, #528]	; (80019d0 <UART_Handle+0x26c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	709a      	strb	r2, [r3, #2]
 80017c2:	e0f0      	b.n	80019a6 <UART_Handle+0x242>
            }
        }
        else if (strstr(data, "NhaT1"))
 80017c4:	4983      	ldr	r1, [pc, #524]	; (80019d4 <UART_Handle+0x270>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f009 fa2e 	bl	800ac28 <strstr>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <UART_Handle+0xa2>
        {
            if (sscanf(data, "NhaT1:%f,NhaT2:%f,NhaT3:%f,NhaT4:%f\n",
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3338      	adds	r3, #56	; 0x38
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	323c      	adds	r2, #60	; 0x3c
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	497a      	ldr	r1, [pc, #488]	; (80019d8 <UART_Handle+0x274>)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f009 f943 	bl	800aa7c <siscanf>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	f040 80d4 	bne.w	80019a6 <UART_Handle+0x242>
                       &Setpoint->theta1_Nha, &Setpoint->theta2_Nha,
                       &Setpoint->theta3_Nha, &Setpoint->theta4_Nha) == 4)
            {
                FlagStart.SetPoint_Nha = 1;
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <UART_Handle+0x26c>)
 8001800:	2201      	movs	r2, #1
 8001802:	70da      	strb	r2, [r3, #3]
 8001804:	e0cf      	b.n	80019a6 <UART_Handle+0x242>
            }
        }
        else if (strstr(data, "Point"))
 8001806:	4975      	ldr	r1, [pc, #468]	; (80019dc <UART_Handle+0x278>)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f009 fa0d 	bl	800ac28 <strstr>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8087 	beq.w	8001924 <UART_Handle+0x1c0>
        {
        	if (dataBufferIndex + strlen(data) < sizeof(uartDataBuffer) - 1) {
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fd2a 	bl	8000270 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <UART_Handle+0x27c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001828:	4293      	cmp	r3, r2
 800182a:	f200 80bc 	bhi.w	80019a6 <UART_Handle+0x242>
				strncat(uartDataBuffer, data, sizeof(uartDataBuffer) - dataBufferIndex - 1);
 800182e:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <UART_Handle+0x27c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8001836:	3303      	adds	r3, #3
 8001838:	461a      	mov	r2, r3
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4869      	ldr	r0, [pc, #420]	; (80019e4 <UART_Handle+0x280>)
 800183e:	f009 f9a3 	bl	800ab88 <strncat>
				dataBufferIndex += strlen(data);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fd14 	bl	8000270 <strlen>
 8001848:	4602      	mov	r2, r0
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <UART_Handle+0x27c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a63      	ldr	r2, [pc, #396]	; (80019e0 <UART_Handle+0x27c>)
 8001852:	6013      	str	r3, [r2, #0]

				if (strchr(uartDataBuffer, '\n') != NULL) {
 8001854:	210a      	movs	r1, #10
 8001856:	4863      	ldr	r0, [pc, #396]	; (80019e4 <UART_Handle+0x280>)
 8001858:	f009 f989 	bl	800ab6e <strchr>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80a1 	beq.w	80019a6 <UART_Handle+0x242>
					char* savePtr;
					char* token = strtok_r(uartDataBuffer, ";", &savePtr);
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	461a      	mov	r2, r3
 800186a:	495f      	ldr	r1, [pc, #380]	; (80019e8 <UART_Handle+0x284>)
 800186c:	485d      	ldr	r0, [pc, #372]	; (80019e4 <UART_Handle+0x280>)
 800186e:	f009 f9d8 	bl	800ac22 <strtok_r>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24

					while (token != NULL) {
 8001874:	e049      	b.n	800190a <UART_Handle+0x1a6>
						int pointId;
						float theta1, theta2, theta3, theta4;


						if (sscanf(token, "Point:%d, HutT1:%f, HutT2:%f, HutT3:%f, HutT4:%f", &pointId, &theta1, &theta2, &theta3, &theta4) == 5) {
 8001876:	f107 0118 	add.w	r1, r7, #24
 800187a:	f107 021c 	add.w	r2, r7, #28
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	460b      	mov	r3, r1
 8001892:	4956      	ldr	r1, [pc, #344]	; (80019ec <UART_Handle+0x288>)
 8001894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001896:	f009 f8f1 	bl	800aa7c <siscanf>
 800189a:	4603      	mov	r3, r0
 800189c:	2b05      	cmp	r3, #5
 800189e:	d126      	bne.n	80018ee <UART_Handle+0x18a>
							Setpoint->points[pointId].theta1 = theta1;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	3304      	adds	r3, #4
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	440b      	add	r3, r1
 80018ac:	3304      	adds	r3, #4
 80018ae:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta2 = theta2;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	3304      	adds	r3, #4
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	3308      	adds	r3, #8
 80018be:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta3 = theta3;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	440b      	add	r3, r1
 80018ca:	334c      	adds	r3, #76	; 0x4c
 80018cc:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta4 = theta4;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	3350      	adds	r3, #80	; 0x50
 80018da:	601a      	str	r2, [r3, #0]
							FlagStart.SetPoint_Hut = 1;
 80018dc:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <UART_Handle+0x26c>)
 80018de:	2201      	movs	r2, #1
 80018e0:	711a      	strb	r2, [r3, #4]
							Setpoint->countPoint++;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	e005      	b.n	80018fa <UART_Handle+0x196>
						}
						else{
							FlagStart.startQD = 1;
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <UART_Handle+0x26c>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	715a      	strb	r2, [r3, #5]
							count = 0;
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <UART_Handle+0x28c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
						}
						token = strtok_r(NULL, ";", &savePtr);
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	461a      	mov	r2, r3
 8001900:	4939      	ldr	r1, [pc, #228]	; (80019e8 <UART_Handle+0x284>)
 8001902:	2000      	movs	r0, #0
 8001904:	f009 f98d 	bl	800ac22 <strtok_r>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24
					while (token != NULL) {
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1b2      	bne.n	8001876 <UART_Handle+0x112>
					}

					memset(uartDataBuffer, 0, sizeof(uartDataBuffer));
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	2100      	movs	r1, #0
 8001916:	4833      	ldr	r0, [pc, #204]	; (80019e4 <UART_Handle+0x280>)
 8001918:	f009 f921 	bl	800ab5e <memset>
					dataBufferIndex = 0;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <UART_Handle+0x27c>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e040      	b.n	80019a6 <UART_Handle+0x242>
				}
			}
        }
        else if (strstr(data, "home"))
 8001924:	4933      	ldr	r1, [pc, #204]	; (80019f4 <UART_Handle+0x290>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f009 f97e 	bl	800ac28 <strstr>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <UART_Handle+0x1d6>
        {
            FlagStart.startSetHome = 0;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <UART_Handle+0x26c>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e035      	b.n	80019a6 <UART_Handle+0x242>
        }
        else if (strstr(data, "Reset"))
 800193a:	492f      	ldr	r1, [pc, #188]	; (80019f8 <UART_Handle+0x294>)
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f009 f973 	bl	800ac28 <strstr>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <UART_Handle+0x1ea>
        {
            HAL_NVIC_SystemReset();
 8001948:	f002 fa57 	bl	8003dfa <HAL_NVIC_SystemReset>
 800194c:	e02b      	b.n	80019a6 <UART_Handle+0x242>
        }
        else if (strstr(data, "hut"))
 800194e:	492b      	ldr	r1, [pc, #172]	; (80019fc <UART_Handle+0x298>)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f009 f969 	bl	800ac28 <strstr>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d124      	bne.n	80019a6 <UART_Handle+0x242>
        {
            // Handle "hut" command here
        }
        else if (strstr(data, "nha"))
 800195c:	4928      	ldr	r1, [pc, #160]	; (8001a00 <UART_Handle+0x29c>)
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f009 f962 	bl	800ac28 <strstr>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d11d      	bne.n	80019a6 <UART_Handle+0x242>
        {
            // Handle "nha" command here
        }
        else if (strstr(data, "start"))
 800196a:	4926      	ldr	r1, [pc, #152]	; (8001a04 <UART_Handle+0x2a0>)
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f009 f95b 	bl	800ac28 <strstr>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <UART_Handle+0x21c>
        {
            FlagStart.startProgram = 1;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <UART_Handle+0x26c>)
 800197a:	2201      	movs	r2, #1
 800197c:	705a      	strb	r2, [r3, #1]
 800197e:	e012      	b.n	80019a6 <UART_Handle+0x242>
        }
        else if (strstr(data, "disconnected"))
 8001980:	4921      	ldr	r1, [pc, #132]	; (8001a08 <UART_Handle+0x2a4>)
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f009 f950 	bl	800ac28 <strstr>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <UART_Handle+0x242>
        {
            FlagStart.startProgram = 0;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <UART_Handle+0x26c>)
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
            FlagStart.SetPoint_Hut = 0;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <UART_Handle+0x26c>)
 8001996:	2200      	movs	r2, #0
 8001998:	711a      	strb	r2, [r3, #4]
            FlagStart.SetPoint_Nha = 0;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <UART_Handle+0x26c>)
 800199c:	2200      	movs	r2, #0
 800199e:	70da      	strb	r2, [r3, #3]
            FlagStart.starKinematics = 0;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <UART_Handle+0x26c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	709a      	strb	r2, [r3, #2]
        }
        flag_uart_rx = 0;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <UART_Handle+0x260>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
        memset(data, 0, uartLogRxSize);
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <UART_Handle+0x2a8>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f009 f8d2 	bl	800ab5e <memset>
    }
}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200012e8 	.word	0x200012e8
 80019c8:	0800ded8 	.word	0x0800ded8
 80019cc:	0800dee0 	.word	0x0800dee0
 80019d0:	2000074c 	.word	0x2000074c
 80019d4:	0800df0c 	.word	0x0800df0c
 80019d8:	0800df14 	.word	0x0800df14
 80019dc:	0800df3c 	.word	0x0800df3c
 80019e0:	20001770 	.word	0x20001770
 80019e4:	20001774 	.word	0x20001774
 80019e8:	0800df44 	.word	0x0800df44
 80019ec:	0800df48 	.word	0x0800df48
 80019f0:	2000136e 	.word	0x2000136e
 80019f4:	0800df7c 	.word	0x0800df7c
 80019f8:	0800df84 	.word	0x0800df84
 80019fc:	0800df8c 	.word	0x0800df8c
 8001a00:	0800df90 	.word	0x0800df90
 8001a04:	0800df94 	.word	0x0800df94
 8001a08:	0800df9c 	.word	0x0800df9c
 8001a0c:	200012ea 	.word	0x200012ea

08001a10 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10f      	bne.n	8001a46 <HAL_UARTEx_RxEventCallback+0x36>
  {
    uartLogRxSize = Size;
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_UARTEx_RxEventCallback+0x44>)
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
	UART_Handle(uartLogBuffer, &Setpoint);
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_UARTEx_RxEventCallback+0x4c>)
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a36:	f7ff fe95 	bl	8001764 <UART_Handle>

    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f004 fe91 	bl	8006768 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40011000 	.word	0x40011000
 8001a54:	200012ea 	.word	0x200012ea
 8001a58:	200012e8 	.word	0x200012e8
 8001a5c:	20000774 	.word	0x20000774
 8001a60:	20000ae8 	.word	0x20000ae8

08001a64 <PID_LINK1_Init>:
EncoderRead ENC_LINK1;
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
void PID_LINK1_Init()
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a6a:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <PID_LINK1_Init+0x8c>)
 8001a6c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a70:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <PID_LINK1_Init+0x90>)
 8001a72:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <PID_LINK1_Init+0x94>)
 8001a88:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <PID_LINK1_Init+0x98>)
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <PID_LINK1_Init+0x88>)
 8001a9a:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <PID_LINK1_Init+0x9c>)
 8001a9c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <PID_LINK1_Init+0x88>)
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <PID_LINK1_Init+0xa0>)
 8001aa2:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001aa6:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <PID_LINK1_Init+0xa8>)
 8001aa8:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <PID_LINK1_Init+0x94>)
 8001ac6:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001aca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <PID_LINK1_Init+0x98>)
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <PID_LINK1_Init+0x9c>)
 8001ada:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <PID_LINK1_Init+0xa4>)
 8001ade:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <PID_LINK1_Init+0xa0>)
 8001ae0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	200013d0 	.word	0x200013d0
 8001af0:	42480000 	.word	0x42480000
 8001af4:	437a0000 	.word	0x437a0000
 8001af8:	3c23d70a 	.word	0x3c23d70a
 8001afc:	fffffc18 	.word	0xfffffc18
 8001b00:	447a0000 	.word	0x447a0000
 8001b04:	c47a0000 	.word	0xc47a0000
 8001b08:	20001420 	.word	0x20001420
 8001b0c:	41200000 	.word	0x41200000

08001b10 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	ed2d 8b02 	vpush	{d8}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <PID_LINK1_Speed+0x5c>)
 8001b1c:	f7ff fa84 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <PID_LINK1_Speed+0x60>)
 8001b22:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <PID_LINK1_Speed+0x5c>)
 8001b28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f85a 	bl	8000be8 <__aeabi_d2f>
 8001b34:	4603      	mov	r3, r0
 8001b36:	ee00 3a90 	vmov	s1, r3
 8001b3a:	eeb0 0a48 	vmov.f32	s0, s16
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <PID_LINK1_Speed+0x64>)
 8001b40:	f7ff fc83 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <PID_LINK1_Speed+0x64>)
 8001b46:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b4e:	230c      	movs	r3, #12
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2308      	movs	r3, #8
 8001b54:	ee17 2a90 	vmov	r2, s15
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <PID_LINK1_Speed+0x68>)
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <PID_LINK1_Speed+0x6c>)
 8001b5c:	f7ff fb6f 	bl	800123e <Drive>
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	ecbd 8b02 	vpop	{d8}
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20001370 	.word	0x20001370
 8001b70:	20001420 	.word	0x20001420
 8001b74:	200013d0 	.word	0x200013d0
 8001b78:	200005b8 	.word	0x200005b8
 8001b7c:	200013b8 	.word	0x200013b8

08001b80 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	ed2d 8b02 	vpush	{d8}
 8001b86:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, Angle.AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001b88:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <PID_LINK1_Pos+0x40>)
 8001b8a:	ed93 8a00 	vldr	s16, [r3]
 8001b8e:	2102      	movs	r1, #2
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <PID_LINK1_Pos+0x44>)
 8001b92:	f7ff fad7 	bl	8001144 <CountRead>
 8001b96:	ec53 2b10 	vmov	r2, r3, d0
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f823 	bl	8000be8 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	ee00 3a90 	vmov	s1, r3
 8001ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8001bac:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <PID_LINK1_Pos+0x48>)
 8001bae:	f7ff fc4c 	bl	800144a <Pid_Cal>
	PID_LINK1_Speed();
 8001bb2:	f7ff ffad 	bl	8001b10 <PID_LINK1_Speed>
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	ecbd 8b02 	vpop	{d8}
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000764 	.word	0x20000764
 8001bc4:	20001370 	.word	0x20001370
 8001bc8:	20001420 	.word	0x20001420

08001bcc <PID_LINK2_Init>:
EncoderRead ENC_LINK2;
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
void PID_LINK2_Init()
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <PID_LINK2_Init+0x8c>)
 8001bd4:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bd8:	4a20      	ldr	r2, [pc, #128]	; (8001c5c <PID_LINK2_Init+0x90>)
 8001bda:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <PID_LINK2_Init+0x94>)
 8001bf0:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <PID_LINK2_Init+0x98>)
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <PID_LINK2_Init+0x9c>)
 8001c04:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <PID_LINK2_Init+0x88>)
 8001c08:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <PID_LINK2_Init+0xa0>)
 8001c0a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c0e:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <PID_LINK2_Init+0xa8>)
 8001c10:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c2c:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <PID_LINK2_Init+0x94>)
 8001c2e:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <PID_LINK2_Init+0x98>)
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <PID_LINK2_Init+0x9c>)
 8001c42:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <PID_LINK2_Init+0xa4>)
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <PID_LINK2_Init+0xa0>)
 8001c48:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	200014d0 	.word	0x200014d0
 8001c58:	42480000 	.word	0x42480000
 8001c5c:	437a0000 	.word	0x437a0000
 8001c60:	3c23d70a 	.word	0x3c23d70a
 8001c64:	fffffc18 	.word	0xfffffc18
 8001c68:	447a0000 	.word	0x447a0000
 8001c6c:	c47a0000 	.word	0xc47a0000
 8001c70:	20001520 	.word	0x20001520
 8001c74:	41200000 	.word	0x41200000

08001c78 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001c82:	4814      	ldr	r0, [pc, #80]	; (8001cd4 <PID_LINK2_Speed+0x5c>)
 8001c84:	f7ff f9d0 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <PID_LINK2_Speed+0x60>)
 8001c8a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <PID_LINK2_Speed+0x5c>)
 8001c90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ffa6 	bl	8000be8 <__aeabi_d2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	ee00 3a90 	vmov	s1, r3
 8001ca2:	eeb0 0a48 	vmov.f32	s0, s16
 8001ca6:	480d      	ldr	r0, [pc, #52]	; (8001cdc <PID_LINK2_Speed+0x64>)
 8001ca8:	f7ff fbcf 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <PID_LINK2_Speed+0x64>)
 8001cae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2308      	movs	r3, #8
 8001cbc:	ee17 2a90 	vmov	r2, s15
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <PID_LINK2_Speed+0x68>)
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <PID_LINK2_Speed+0x6c>)
 8001cc4:	f7ff fabb 	bl	800123e <Drive>
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	ecbd 8b02 	vpop	{d8}
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20001470 	.word	0x20001470
 8001cd8:	20001520 	.word	0x20001520
 8001cdc:	200014d0 	.word	0x200014d0
 8001ce0:	20000528 	.word	0x20000528
 8001ce4:	200014b8 	.word	0x200014b8

08001ce8 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	ed2d 8b02 	vpush	{d8}
 8001cee:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, Angle.AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <PID_LINK2_Pos+0x48>)
 8001cf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cf6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d34 <PID_LINK2_Pos+0x4c>
 8001cfa:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001cfe:	2102      	movs	r1, #2
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <PID_LINK2_Pos+0x50>)
 8001d02:	f7ff fa1f 	bl	8001144 <CountRead>
 8001d06:	ec53 2b10 	vmov	r2, r3, d0
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff6b 	bl	8000be8 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	ee00 3a90 	vmov	s1, r3
 8001d18:	eeb0 0a48 	vmov.f32	s0, s16
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <PID_LINK2_Pos+0x54>)
 8001d1e:	f7ff fb94 	bl	800144a <Pid_Cal>
	PID_LINK2_Speed();
 8001d22:	f7ff ffa9 	bl	8001c78 <PID_LINK2_Speed>
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	ecbd 8b02 	vpop	{d8}
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000764 	.word	0x20000764
 8001d34:	433b0000 	.word	0x433b0000
 8001d38:	20001470 	.word	0x20001470
 8001d3c:	20001520 	.word	0x20001520

08001d40 <PID_LINK3_Init>:
EncoderRead ENC_LINK3;
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
void PID_LINK3_Init()
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d46:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <PID_LINK3_Init+0x8c>)
 8001d48:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 300;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d4c:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <PID_LINK3_Init+0x90>)
 8001d4e:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <PID_LINK3_Init+0x94>)
 8001d64:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <PID_LINK3_Init+0x98>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d76:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <PID_LINK3_Init+0x9c>)
 8001d78:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <PID_LINK3_Init+0x88>)
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <PID_LINK3_Init+0xa0>)
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <PID_LINK3_Init+0xa8>)
 8001d84:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001da0:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <PID_LINK3_Init+0x94>)
 8001da2:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <PID_LINK3_Init+0x98>)
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <PID_LINK3_Init+0x9c>)
 8001db6:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <PID_LINK3_Init+0xa4>)
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <PID_LINK3_Init+0xa0>)
 8001dbc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	200015d0 	.word	0x200015d0
 8001dcc:	42480000 	.word	0x42480000
 8001dd0:	43960000 	.word	0x43960000
 8001dd4:	3c23d70a 	.word	0x3c23d70a
 8001dd8:	fffffc18 	.word	0xfffffc18
 8001ddc:	447a0000 	.word	0x447a0000
 8001de0:	c47a0000 	.word	0xc47a0000
 8001de4:	20001620 	.word	0x20001620
 8001de8:	41200000 	.word	0x41200000

08001dec <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	ed2d 8b02 	vpush	{d8}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001df6:	4814      	ldr	r0, [pc, #80]	; (8001e48 <PID_LINK3_Speed+0x5c>)
 8001df8:	f7ff f916 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <PID_LINK3_Speed+0x60>)
 8001dfe:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <PID_LINK3_Speed+0x5c>)
 8001e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe feec 	bl	8000be8 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	ee00 3a90 	vmov	s1, r3
 8001e16:	eeb0 0a48 	vmov.f32	s0, s16
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <PID_LINK3_Speed+0x64>)
 8001e1c:	f7ff fb15 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <PID_LINK3_Speed+0x64>)
 8001e22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	ee17 2a90 	vmov	r2, s15
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <PID_LINK3_Speed+0x68>)
 8001e36:	4808      	ldr	r0, [pc, #32]	; (8001e58 <PID_LINK3_Speed+0x6c>)
 8001e38:	f7ff fa01 	bl	800123e <Drive>
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	ecbd 8b02 	vpop	{d8}
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20001570 	.word	0x20001570
 8001e4c:	20001620 	.word	0x20001620
 8001e50:	200015d0 	.word	0x200015d0
 8001e54:	20000528 	.word	0x20000528
 8001e58:	200015b8 	.word	0x200015b8

08001e5c <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	ed2d 8b02 	vpush	{d8}
 8001e62:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, Angle.AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <PID_LINK3_Pos+0x48>)
 8001e66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ea8 <PID_LINK3_Pos+0x4c>
 8001e6e:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001e72:	2102      	movs	r1, #2
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <PID_LINK3_Pos+0x50>)
 8001e76:	f7ff f965 	bl	8001144 <CountRead>
 8001e7a:	ec53 2b10 	vmov	r2, r3, d0
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe feb1 	bl	8000be8 <__aeabi_d2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	ee00 3a90 	vmov	s1, r3
 8001e8c:	eeb0 0a48 	vmov.f32	s0, s16
 8001e90:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <PID_LINK3_Pos+0x54>)
 8001e92:	f7ff fada 	bl	800144a <Pid_Cal>
	PID_LINK3_Speed();
 8001e96:	f7ff ffa9 	bl	8001dec <PID_LINK3_Speed>
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	ecbd 8b02 	vpop	{d8}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000764 	.word	0x20000764
 8001ea8:	43070000 	.word	0x43070000
 8001eac:	20001570 	.word	0x20001570
 8001eb0:	20001620 	.word	0x20001620

08001eb4 <PID_LINK4_Init>:
EncoderRead ENC_LINK4;
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
void PID_LINK4_Init()
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <PID_LINK4_Init+0x8c>)
 8001ebc:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 250;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <PID_LINK4_Init+0x90>)
 8001ec2:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <PID_LINK4_Init+0x94>)
 8001ed8:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <PID_LINK4_Init+0x98>)
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <PID_LINK4_Init+0x9c>)
 8001eec:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <PID_LINK4_Init+0x88>)
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <PID_LINK4_Init+0xa0>)
 8001ef2:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <PID_LINK4_Init+0xa8>)
 8001ef8:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <PID_LINK4_Init+0x94>)
 8001f16:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <PID_LINK4_Init+0x98>)
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <PID_LINK4_Init+0x9c>)
 8001f2a:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <PID_LINK4_Init+0xa4>)
 8001f2e:	4a09      	ldr	r2, [pc, #36]	; (8001f54 <PID_LINK4_Init+0xa0>)
 8001f30:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	200016d0 	.word	0x200016d0
 8001f40:	42480000 	.word	0x42480000
 8001f44:	437a0000 	.word	0x437a0000
 8001f48:	3c23d70a 	.word	0x3c23d70a
 8001f4c:	fffffc18 	.word	0xfffffc18
 8001f50:	447a0000 	.word	0x447a0000
 8001f54:	c47a0000 	.word	0xc47a0000
 8001f58:	20001720 	.word	0x20001720
 8001f5c:	41200000 	.word	0x41200000

08001f60 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 8001f60:	b580      	push	{r7, lr}
 8001f62:	ed2d 8b02 	vpush	{d8}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <PID_LINK4_Speed+0x5c>)
 8001f6c:	f7ff f85c 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <PID_LINK4_Speed+0x60>)
 8001f72:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <PID_LINK4_Speed+0x5c>)
 8001f78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fe32 	bl	8000be8 <__aeabi_d2f>
 8001f84:	4603      	mov	r3, r0
 8001f86:	ee00 3a90 	vmov	s1, r3
 8001f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <PID_LINK4_Speed+0x64>)
 8001f90:	f7ff fa5b 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <PID_LINK4_Speed+0x64>)
 8001f96:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	ee17 2a90 	vmov	r2, s15
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <PID_LINK4_Speed+0x68>)
 8001faa:	4808      	ldr	r0, [pc, #32]	; (8001fcc <PID_LINK4_Speed+0x6c>)
 8001fac:	f7ff f947 	bl	800123e <Drive>
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	ecbd 8b02 	vpop	{d8}
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20001670 	.word	0x20001670
 8001fc0:	20001720 	.word	0x20001720
 8001fc4:	200016d0 	.word	0x200016d0
 8001fc8:	20000600 	.word	0x20000600
 8001fcc:	200016b8 	.word	0x200016b8

08001fd0 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	ed2d 8b02 	vpush	{d8}
 8001fd6:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, Angle.AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <PID_LINK4_Pos+0x48>)
 8001fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fde:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800201c <PID_LINK4_Pos+0x4c>
 8001fe2:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <PID_LINK4_Pos+0x50>)
 8001fea:	f7ff f8ab 	bl	8001144 <CountRead>
 8001fee:	ec53 2b10 	vmov	r2, r3, d0
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fdf7 	bl	8000be8 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	ee00 3a90 	vmov	s1, r3
 8002000:	eeb0 0a48 	vmov.f32	s0, s16
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <PID_LINK4_Pos+0x54>)
 8002006:	f7ff fa20 	bl	800144a <Pid_Cal>
	PID_LINK4_Speed();
 800200a:	f7ff ffa9 	bl	8001f60 <PID_LINK4_Speed>
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	ecbd 8b02 	vpop	{d8}
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000764 	.word	0x20000764
 800201c:	42b40000 	.word	0x42b40000
 8002020:	20001670 	.word	0x20001670
 8002024:	20001720 	.word	0x20001720

08002028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b0a4      	sub	sp, #144	; 0x90
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800202e:	f001 fda9 	bl	8003b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002032:	f000 f905 	bl	8002240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002036:	f000 fc9d 	bl	8002974 <MX_GPIO_Init>
  MX_DMA_Init();
 800203a:	f000 fc7b 	bl	8002934 <MX_DMA_Init>
  MX_TIM1_Init();
 800203e:	f000 f967 	bl	8002310 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002042:	f000 fa65 	bl	8002510 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002046:	f000 f9bb 	bl	80023c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800204a:	f000 fa0d 	bl	8002468 <MX_TIM3_Init>
  MX_TIM5_Init();
 800204e:	f000 fad9 	bl	8002604 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002052:	f000 fb2b 	bl	80026ac <MX_TIM8_Init>
  MX_TIM9_Init();
 8002056:	f000 fbb9 	bl	80027cc <MX_TIM9_Init>
  MX_USART1_UART_Init();
 800205a:	f000 fc41 	bl	80028e0 <MX_USART1_UART_Init>
  MX_TIM12_Init();
 800205e:	f000 fc05 	bl	800286c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002062:	2100      	movs	r1, #0
 8002064:	4860      	ldr	r0, [pc, #384]	; (80021e8 <main+0x1c0>)
 8002066:	f003 fa5d 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800206a:	2104      	movs	r1, #4
 800206c:	485e      	ldr	r0, [pc, #376]	; (80021e8 <main+0x1c0>)
 800206e:	f003 fa59 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002072:	2108      	movs	r1, #8
 8002074:	485c      	ldr	r0, [pc, #368]	; (80021e8 <main+0x1c0>)
 8002076:	f003 fa55 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800207a:	210c      	movs	r1, #12
 800207c:	485a      	ldr	r0, [pc, #360]	; (80021e8 <main+0x1c0>)
 800207e:	f003 fa51 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002082:	2100      	movs	r1, #0
 8002084:	4859      	ldr	r0, [pc, #356]	; (80021ec <main+0x1c4>)
 8002086:	f003 fa4d 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800208a:	2104      	movs	r1, #4
 800208c:	4857      	ldr	r0, [pc, #348]	; (80021ec <main+0x1c4>)
 800208e:	f003 fa49 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002092:	2108      	movs	r1, #8
 8002094:	4856      	ldr	r0, [pc, #344]	; (80021f0 <main+0x1c8>)
 8002096:	f003 fa45 	bl	8005524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800209a:	210c      	movs	r1, #12
 800209c:	4854      	ldr	r0, [pc, #336]	; (80021f0 <main+0x1c8>)
 800209e:	f003 fa41 	bl	8005524 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim12);
 80020a2:	4854      	ldr	r0, [pc, #336]	; (80021f4 <main+0x1cc>)
 80020a4:	f003 f97e 	bl	80053a4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80020a8:	213c      	movs	r1, #60	; 0x3c
 80020aa:	4853      	ldr	r0, [pc, #332]	; (80021f8 <main+0x1d0>)
 80020ac:	f003 fba8 	bl	8005800 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80020b0:	213c      	movs	r1, #60	; 0x3c
 80020b2:	4852      	ldr	r0, [pc, #328]	; (80021fc <main+0x1d4>)
 80020b4:	f003 fba4 	bl	8005800 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80020b8:	213c      	movs	r1, #60	; 0x3c
 80020ba:	4851      	ldr	r0, [pc, #324]	; (8002200 <main+0x1d8>)
 80020bc:	f003 fba0 	bl	8005800 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80020c0:	213c      	movs	r1, #60	; 0x3c
 80020c2:	4850      	ldr	r0, [pc, #320]	; (8002204 <main+0x1dc>)
 80020c4:	f003 fb9c 	bl	8005800 <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 80020c8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80021e0 <main+0x1b8>
 80020cc:	f641 3226 	movw	r2, #6950	; 0x1b26
 80020d0:	4949      	ldr	r1, [pc, #292]	; (80021f8 <main+0x1d0>)
 80020d2:	484d      	ldr	r0, [pc, #308]	; (8002208 <main+0x1e0>)
 80020d4:	f7fe ff8c 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 80020d8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80021e0 <main+0x1b8>
 80020dc:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80020e0:	4946      	ldr	r1, [pc, #280]	; (80021fc <main+0x1d4>)
 80020e2:	484a      	ldr	r0, [pc, #296]	; (800220c <main+0x1e4>)
 80020e4:	f7fe ff84 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 7050, 0.01);
 80020e8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 80021e0 <main+0x1b8>
 80020ec:	f641 328a 	movw	r2, #7050	; 0x1b8a
 80020f0:	4943      	ldr	r1, [pc, #268]	; (8002200 <main+0x1d8>)
 80020f2:	4847      	ldr	r0, [pc, #284]	; (8002210 <main+0x1e8>)
 80020f4:	f7fe ff7c 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 80020f8:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80021e0 <main+0x1b8>
 80020fc:	f640 4294 	movw	r2, #3220	; 0xc94
 8002100:	4940      	ldr	r1, [pc, #256]	; (8002204 <main+0x1dc>)
 8002102:	4844      	ldr	r0, [pc, #272]	; (8002214 <main+0x1ec>)
 8002104:	f7fe ff74 	bl	8000ff0 <EncoderSetting>

  PID_LINK1_Init();
 8002108:	f7ff fcac 	bl	8001a64 <PID_LINK1_Init>
  PID_LINK2_Init();
 800210c:	f7ff fd5e 	bl	8001bcc <PID_LINK2_Init>
  PID_LINK3_Init();
 8002110:	f7ff fe16 	bl	8001d40 <PID_LINK3_Init>
  PID_LINK4_Init();
 8002114:	f7ff fece 	bl	8001eb4 <PID_LINK4_Init>

  UartIdle_Init();
 8002118:	f7ff fb0c 	bl	8001734 <UartIdle_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskLogic */
  osThreadDef(TaskLogic, StartTaskLogic, osPriorityNormal, 0, 128);
 800211c:	4b3e      	ldr	r3, [pc, #248]	; (8002218 <main+0x1f0>)
 800211e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002122:	461d      	mov	r5, r3
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800212c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLogicHandle = osThreadCreate(osThread(TaskLogic), NULL);
 8002130:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f005 fc1f 	bl	800797a <osThreadCreate>
 800213c:	4603      	mov	r3, r0
 800213e:	4a37      	ldr	r2, [pc, #220]	; (800221c <main+0x1f4>)
 8002140:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <main+0x1f8>)
 8002144:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002148:	461d      	mov	r5, r3
 800214a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 8002156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f005 fc0c 	bl	800797a <osThreadCreate>
 8002162:	4603      	mov	r3, r0
 8002164:	4a2f      	ldr	r2, [pc, #188]	; (8002224 <main+0x1fc>)
 8002166:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 8002168:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <main+0x200>)
 800216a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800216e:	461d      	mov	r5, r3
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 800217c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f005 fbf9 	bl	800797a <osThreadCreate>
 8002188:	4603      	mov	r3, r0
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <main+0x204>)
 800218c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTrajectory */
  osThreadDef(TaskTrajectory, StartTaskTrajectory, osPriorityBelowNormal, 0, 128);
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <main+0x208>)
 8002190:	f107 0420 	add.w	r4, r7, #32
 8002194:	461d      	mov	r5, r3
 8002196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800219e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTrajectoryHandle = osThreadCreate(osThread(TaskTrajectory), NULL);
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f005 fbe6 	bl	800797a <osThreadCreate>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <main+0x20c>)
 80021b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskUart */
  osThreadDef(TaskUart, StartTaskUart, osPriorityIdle, 0, 128);
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <main+0x210>)
 80021b6:	1d3c      	adds	r4, r7, #4
 80021b8:	461d      	mov	r5, r3
 80021ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUartHandle = osThreadCreate(osThread(TaskUart), NULL);
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f005 fbd5 	bl	800797a <osThreadCreate>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4a1a      	ldr	r2, [pc, #104]	; (800223c <main+0x214>)
 80021d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80021d6:	f005 fbc9 	bl	800796c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021da:	e7fe      	b.n	80021da <main+0x1b2>
 80021dc:	f3af 8000 	nop.w
 80021e0:	47ae147b 	.word	0x47ae147b
 80021e4:	3f847ae1 	.word	0x3f847ae1
 80021e8:	20000528 	.word	0x20000528
 80021ec:	20000600 	.word	0x20000600
 80021f0:	200005b8 	.word	0x200005b8
 80021f4:	20000648 	.word	0x20000648
 80021f8:	20000450 	.word	0x20000450
 80021fc:	20000498 	.word	0x20000498
 8002200:	200004e0 	.word	0x200004e0
 8002204:	20000570 	.word	0x20000570
 8002208:	20001370 	.word	0x20001370
 800220c:	20001470 	.word	0x20001470
 8002210:	20001570 	.word	0x20001570
 8002214:	20001670 	.word	0x20001670
 8002218:	0800dfb8 	.word	0x0800dfb8
 800221c:	20000738 	.word	0x20000738
 8002220:	0800dfe0 	.word	0x0800dfe0
 8002224:	2000073c 	.word	0x2000073c
 8002228:	0800e008 	.word	0x0800e008
 800222c:	20000740 	.word	0x20000740
 8002230:	0800e034 	.word	0x0800e034
 8002234:	20000744 	.word	0x20000744
 8002238:	0800e05c 	.word	0x0800e05c
 800223c:	20000748 	.word	0x20000748

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b094      	sub	sp, #80	; 0x50
 8002244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	2230      	movs	r2, #48	; 0x30
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f008 fc85 	bl	800ab5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	4b27      	ldr	r3, [pc, #156]	; (8002308 <SystemClock_Config+0xc8>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a26      	ldr	r2, [pc, #152]	; (8002308 <SystemClock_Config+0xc8>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <SystemClock_Config+0xc8>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <SystemClock_Config+0xcc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <SystemClock_Config+0xcc>)
 800228a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <SystemClock_Config+0xcc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800229c:	2302      	movs	r3, #2
 800229e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a4:	2310      	movs	r3, #16
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a8:	2302      	movs	r3, #2
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022b0:	2308      	movs	r3, #8
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80022b4:	2348      	movs	r3, #72	; 0x48
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022bc:	2304      	movs	r3, #4
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 fb53 	bl	8004970 <HAL_RCC_OscConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022d0:	f000 ffae 	bl	8003230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d4:	230f      	movs	r3, #15
 80022d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2102      	movs	r1, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f002 fdb5 	bl	8004e60 <HAL_RCC_ClockConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022fc:	f000 ff98 	bl	8003230 <Error_Handler>
  }
}
 8002300:	bf00      	nop
 8002302:	3750      	adds	r7, #80	; 0x50
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000

08002310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fc1d 	bl	800ab5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800232e:	4a23      	ldr	r2, [pc, #140]	; (80023bc <MX_TIM1_Init+0xac>)
 8002330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800233e:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_TIM1_Init+0xa8>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002358:	2303      	movs	r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002360:	2301      	movs	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002370:	2301      	movs	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002374:	2300      	movs	r3, #0
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4619      	mov	r1, r3
 8002382:	480d      	ldr	r0, [pc, #52]	; (80023b8 <MX_TIM1_Init+0xa8>)
 8002384:	f003 f996 	bl	80056b4 <HAL_TIM_Encoder_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800238e:	f000 ff4f 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	4619      	mov	r1, r3
 800239e:	4806      	ldr	r0, [pc, #24]	; (80023b8 <MX_TIM1_Init+0xa8>)
 80023a0:	f004 f87a 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023aa:	f000 ff41 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ae:	bf00      	nop
 80023b0:	3730      	adds	r7, #48	; 0x30
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000450 	.word	0x20000450
 80023bc:	40010000 	.word	0x40010000

080023c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f008 fbc5 	bl	800ab5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <MX_TIM2_Init+0xa4>)
 80023de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_TIM2_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <MX_TIM2_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_TIM2_Init+0xa4>)
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_TIM2_Init+0xa4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_TIM2_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002404:	2301      	movs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800240c:	2301      	movs	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800241c:	2301      	movs	r3, #1
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <MX_TIM2_Init+0xa4>)
 8002430:	f003 f940 	bl	80056b4 <HAL_TIM_Encoder_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800243a:	f000 fef9 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4806      	ldr	r0, [pc, #24]	; (8002464 <MX_TIM2_Init+0xa4>)
 800244c:	f004 f824 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002456:	f000 feeb 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	3730      	adds	r7, #48	; 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000498 	.word	0x20000498

08002468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f008 fb71 	bl	800ab5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <MX_TIM3_Init+0xa0>)
 8002486:	4a21      	ldr	r2, [pc, #132]	; (800250c <MX_TIM3_Init+0xa4>)
 8002488:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_TIM3_Init+0xa0>)
 800248c:	2200      	movs	r2, #0
 800248e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_TIM3_Init+0xa0>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_TIM3_Init+0xa0>)
 8002498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_TIM3_Init+0xa0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <MX_TIM3_Init+0xa0>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024aa:	2303      	movs	r3, #3
 80024ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024b2:	2301      	movs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024c2:	2301      	movs	r3, #1
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4619      	mov	r1, r3
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_TIM3_Init+0xa0>)
 80024d6:	f003 f8ed 	bl	80056b4 <HAL_TIM_Encoder_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80024e0:	f000 fea6 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_TIM3_Init+0xa0>)
 80024f2:	f003 ffd1 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024fc:	f000 fe98 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	3730      	adds	r7, #48	; 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200004e0 	.word	0x200004e0
 800250c:	40000400 	.word	0x40000400

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	615a      	str	r2, [r3, #20]
 8002530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <MX_TIM4_Init+0xec>)
 8002534:	4a32      	ldr	r2, [pc, #200]	; (8002600 <MX_TIM4_Init+0xf0>)
 8002536:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <MX_TIM4_Init+0xec>)
 800253a:	2206      	movs	r2, #6
 800253c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <MX_TIM4_Init+0xec>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002544:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <MX_TIM4_Init+0xec>)
 8002546:	f240 32e7 	movw	r2, #999	; 0x3e7
 800254a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <MX_TIM4_Init+0xec>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <MX_TIM4_Init+0xec>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002558:	4828      	ldr	r0, [pc, #160]	; (80025fc <MX_TIM4_Init+0xec>)
 800255a:	f002 ff93 	bl	8005484 <HAL_TIM_PWM_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002564:	f000 fe64 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4619      	mov	r1, r3
 8002576:	4821      	ldr	r0, [pc, #132]	; (80025fc <MX_TIM4_Init+0xec>)
 8002578:	f003 ff8e 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002582:	f000 fe55 	bl	8003230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2360      	movs	r3, #96	; 0x60
 8002588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	4817      	ldr	r0, [pc, #92]	; (80025fc <MX_TIM4_Init+0xec>)
 800259e:	f003 faad 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80025a8:	f000 fe42 	bl	8003230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2204      	movs	r2, #4
 80025b0:	4619      	mov	r1, r3
 80025b2:	4812      	ldr	r0, [pc, #72]	; (80025fc <MX_TIM4_Init+0xec>)
 80025b4:	f003 faa2 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80025be:	f000 fe37 	bl	8003230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2208      	movs	r2, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	480c      	ldr	r0, [pc, #48]	; (80025fc <MX_TIM4_Init+0xec>)
 80025ca:	f003 fa97 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80025d4:	f000 fe2c 	bl	8003230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	220c      	movs	r2, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <MX_TIM4_Init+0xec>)
 80025e0:	f003 fa8c 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80025ea:	f000 fe21 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <MX_TIM4_Init+0xec>)
 80025f0:	f000 ffe8 	bl	80035c4 <HAL_TIM_MspPostInit>

}
 80025f4:	bf00      	nop
 80025f6:	3728      	adds	r7, #40	; 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000528 	.word	0x20000528
 8002600:	40000800 	.word	0x40000800

08002604 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f008 faa3 	bl	800ab5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MX_TIM5_Init+0xa0>)
 8002622:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <MX_TIM5_Init+0xa4>)
 8002624:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <MX_TIM5_Init+0xa0>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_TIM5_Init+0xa0>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <MX_TIM5_Init+0xa0>)
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_TIM5_Init+0xa0>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <MX_TIM5_Init+0xa0>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002646:	2303      	movs	r3, #3
 8002648:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800264e:	2301      	movs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800265e:	2301      	movs	r3, #1
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800266a:	f107 030c 	add.w	r3, r7, #12
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <MX_TIM5_Init+0xa0>)
 8002672:	f003 f81f 	bl	80056b4 <HAL_TIM_Encoder_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800267c:	f000 fdd8 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_TIM5_Init+0xa0>)
 800268e:	f003 ff03 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002698:	f000 fdca 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000570 	.word	0x20000570
 80026a8:	40000c00 	.word	0x40000c00

080026ac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b092      	sub	sp, #72	; 0x48
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2220      	movs	r2, #32
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f008 fa41 	bl	800ab5e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026de:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <MX_TIM8_Init+0x11c>)
 80026e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026e4:	2206      	movs	r2, #6
 80026e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026fc:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <MX_TIM8_Init+0x118>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <MX_TIM8_Init+0x118>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002708:	482e      	ldr	r0, [pc, #184]	; (80027c4 <MX_TIM8_Init+0x118>)
 800270a:	f002 febb 	bl	8005484 <HAL_TIM_PWM_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002714:	f000 fd8c 	bl	8003230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002724:	4619      	mov	r1, r3
 8002726:	4827      	ldr	r0, [pc, #156]	; (80027c4 <MX_TIM8_Init+0x118>)
 8002728:	f003 feb6 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002732:	f000 fd7d 	bl	8003230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002736:	2360      	movs	r3, #96	; 0x60
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273e:	2300      	movs	r3, #0
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002742:	2300      	movs	r3, #0
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	2208      	movs	r2, #8
 8002758:	4619      	mov	r1, r3
 800275a:	481a      	ldr	r0, [pc, #104]	; (80027c4 <MX_TIM8_Init+0x118>)
 800275c:	f003 f9ce 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002766:	f000 fd63 	bl	8003230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800276a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276e:	220c      	movs	r2, #12
 8002770:	4619      	mov	r1, r3
 8002772:	4814      	ldr	r0, [pc, #80]	; (80027c4 <MX_TIM8_Init+0x118>)
 8002774:	f003 f9c2 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800277e:	f000 fd57 	bl	8003230 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <MX_TIM8_Init+0x118>)
 80027a6:	f003 fef3 	bl	8006590 <HAL_TIMEx_ConfigBreakDeadTime>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80027b0:	f000 fd3e 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027b4:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_TIM8_Init+0x118>)
 80027b6:	f000 ff05 	bl	80035c4 <HAL_TIM_MspPostInit>

}
 80027ba:	bf00      	nop
 80027bc:	3748      	adds	r7, #72	; 0x48
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200005b8 	.word	0x200005b8
 80027c8:	40010400 	.word	0x40010400

080027cc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	615a      	str	r2, [r3, #20]
 80027e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <MX_TIM9_Init+0x98>)
 80027e6:	4a20      	ldr	r2, [pc, #128]	; (8002868 <MX_TIM9_Init+0x9c>)
 80027e8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_TIM9_Init+0x98>)
 80027ec:	2206      	movs	r2, #6
 80027ee:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <MX_TIM9_Init+0x98>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_TIM9_Init+0x98>)
 80027f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027fc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <MX_TIM9_Init+0x98>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_TIM9_Init+0x98>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800280a:	4816      	ldr	r0, [pc, #88]	; (8002864 <MX_TIM9_Init+0x98>)
 800280c:	f002 fe3a 	bl	8005484 <HAL_TIM_PWM_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002816:	f000 fd0b 	bl	8003230 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	2200      	movs	r2, #0
 800282e:	4619      	mov	r1, r3
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <MX_TIM9_Init+0x98>)
 8002832:	f003 f963 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800283c:	f000 fcf8 	bl	8003230 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	2204      	movs	r2, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4807      	ldr	r0, [pc, #28]	; (8002864 <MX_TIM9_Init+0x98>)
 8002848:	f003 f958 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002852:	f000 fced 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002856:	4803      	ldr	r0, [pc, #12]	; (8002864 <MX_TIM9_Init+0x98>)
 8002858:	f000 feb4 	bl	80035c4 <HAL_TIM_MspPostInit>

}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000600 	.word	0x20000600
 8002868:	40014000 	.word	0x40014000

0800286c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002872:	463b      	mov	r3, r7
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_TIM12_Init+0x6c>)
 8002880:	4a16      	ldr	r2, [pc, #88]	; (80028dc <MX_TIM12_Init+0x70>)
 8002882:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <MX_TIM12_Init+0x6c>)
 8002886:	2247      	movs	r2, #71	; 0x47
 8002888:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <MX_TIM12_Init+0x6c>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_TIM12_Init+0x6c>)
 8002892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002896:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <MX_TIM12_Init+0x6c>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_TIM12_Init+0x6c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80028a4:	480c      	ldr	r0, [pc, #48]	; (80028d8 <MX_TIM12_Init+0x6c>)
 80028a6:	f002 fd2d 	bl	8005304 <HAL_TIM_Base_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80028b0:	f000 fcbe 	bl	8003230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80028ba:	463b      	mov	r3, r7
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_TIM12_Init+0x6c>)
 80028c0:	f003 f9de 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80028ca:	f000 fcb1 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000648 	.word	0x20000648
 80028dc:	40001800 	.word	0x40001800

080028e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_USART1_UART_Init+0x4c>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <MX_USART1_UART_Init+0x50>)
 80028e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <MX_USART1_UART_Init+0x4c>)
 80028ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_USART1_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_USART1_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <MX_USART1_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_USART1_UART_Init+0x4c>)
 8002906:	220c      	movs	r2, #12
 8002908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <MX_USART1_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_USART1_UART_Init+0x4c>)
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_USART1_UART_Init+0x4c>)
 8002918:	f003 fea0 	bl	800665c <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002922:	f000 fc85 	bl	8003230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000690 	.word	0x20000690
 8002930:	40011000 	.word	0x40011000

08002934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <MX_DMA_Init+0x3c>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <MX_DMA_Init+0x3c>)
 8002944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <MX_DMA_Init+0x3c>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2105      	movs	r1, #5
 800295a:	203a      	movs	r0, #58	; 0x3a
 800295c:	f001 fa23 	bl	8003da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002960:	203a      	movs	r0, #58	; 0x3a
 8002962:	f001 fa3c 	bl	8003dde <HAL_NVIC_EnableIRQ>

}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <MX_GPIO_Init+0xdc>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <MX_GPIO_Init+0xdc>)
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <MX_GPIO_Init+0xdc>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029cc:	f043 0308 	orr.w	r3, r3, #8
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <MX_GPIO_Init+0xdc>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4b14      	ldr	r3, [pc, #80]	; (8002a50 <MX_GPIO_Init+0xdc>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <MX_GPIO_Init+0xdc>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_GPIO_Init+0xdc>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 8002a16:	2330      	movs	r3, #48	; 0x30
 8002a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	480a      	ldr	r0, [pc, #40]	; (8002a54 <MX_GPIO_Init+0xe0>)
 8002a2a:	f001 fded 	bl	8004608 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 8002a2e:	23c0      	movs	r3, #192	; 0xc0
 8002a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_GPIO_Init+0xe4>)
 8002a42:	f001 fde1 	bl	8004608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020800 	.word	0x40020800

08002a5c <StartTaskLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLogic */
void StartTaskLogic(void const * argument)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  if(FlagStart.startQD == 1){
 8002a64:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <StartTaskLogic+0xb0>)
 8002a66:	795b      	ldrb	r3, [r3, #5]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d14a      	bne.n	8002b02 <StartTaskLogic+0xa6>
		  if(count < Setpoint.countPoint){
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <StartTaskLogic+0xb4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <StartTaskLogic+0xb8>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	429a      	cmp	r2, r3
 8002a78:	da43      	bge.n	8002b02 <StartTaskLogic+0xa6>
			  Setpoint.setpoint1 = Setpoint.points[count].theta1;
 8002a7a:	4b25      	ldr	r3, [pc, #148]	; (8002b10 <StartTaskLogic+0xb4>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <StartTaskLogic+0xb8>)
 8002a80:	3304      	adds	r3, #4
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <StartTaskLogic+0xb8>)
 8002a8c:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.points[count].theta2;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <StartTaskLogic+0xb4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <StartTaskLogic+0xb8>)
 8002a94:	3304      	adds	r3, #4
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <StartTaskLogic+0xb8>)
 8002aa0:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.points[count].theta3;
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <StartTaskLogic+0xb4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <StartTaskLogic+0xb8>)
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4413      	add	r3, r2
 8002aac:	334c      	adds	r3, #76	; 0x4c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ab2:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.points[count].theta4;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <StartTaskLogic+0xb4>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <StartTaskLogic+0xb8>)
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	3350      	adds	r3, #80	; 0x50
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ac4:	60d3      	str	r3, [r2, #12]

			  osDelay(5000);
 8002ac6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002aca:	f004 ffa2 	bl	8007a12 <osDelay>

			  Setpoint.setpoint1 = Setpoint.theta1_Nha;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ad4:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.theta2_Nha;
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <StartTaskLogic+0xb8>)
 8002adc:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.theta3_Nha;
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ae4:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.theta4_Nha;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <StartTaskLogic+0xb8>)
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <StartTaskLogic+0xb8>)
 8002aec:	60d3      	str	r3, [r2, #12]

			  osDelay(5000);
 8002aee:	f241 3088 	movw	r0, #5000	; 0x1388
 8002af2:	f004 ff8e 	bl	8007a12 <osDelay>

			  count++;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <StartTaskLogic+0xb4>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <StartTaskLogic+0xb4>)
 8002b00:	701a      	strb	r2, [r3, #0]
		  }
	  }

    osDelay(10);
 8002b02:	200a      	movs	r0, #10
 8002b04:	f004 ff85 	bl	8007a12 <osDelay>
	  if(FlagStart.startQD == 1){
 8002b08:	e7ac      	b.n	8002a64 <StartTaskLogic+0x8>
 8002b0a:	bf00      	nop
 8002b0c:	2000074c 	.word	0x2000074c
 8002b10:	2000136e 	.word	0x2000136e
 8002b14:	20000774 	.word	0x20000774

08002b18 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  for(;;)
  {
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	48a6      	ldr	r0, [pc, #664]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002b24:	f001 ff0c 	bl	8004940 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b25a      	sxtb	r2, r3
 8002b2c:	4ba4      	ldr	r3, [pc, #656]	; (8002dc0 <StartTaskSetHome+0x2a8>)
 8002b2e:	701a      	strb	r2, [r3, #0]
	sensor.sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	48a2      	ldr	r0, [pc, #648]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002b34:	f001 ff04 	bl	8004940 <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	4ba0      	ldr	r3, [pc, #640]	; (8002dc0 <StartTaskSetHome+0x2a8>)
 8002b3e:	705a      	strb	r2, [r3, #1]
	sensor.sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8002b40:	2110      	movs	r1, #16
 8002b42:	48a0      	ldr	r0, [pc, #640]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002b44:	f001 fefc 	bl	8004940 <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b25a      	sxtb	r2, r3
 8002b4c:	4b9c      	ldr	r3, [pc, #624]	; (8002dc0 <StartTaskSetHome+0x2a8>)
 8002b4e:	709a      	strb	r2, [r3, #2]
	sensor.sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8002b50:	2120      	movs	r1, #32
 8002b52:	489c      	ldr	r0, [pc, #624]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002b54:	f001 fef4 	bl	8004940 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	4b98      	ldr	r3, [pc, #608]	; (8002dc0 <StartTaskSetHome+0x2a8>)
 8002b5e:	70da      	strb	r2, [r3, #3]
	if(FlagStart.startSetHome == 0){
 8002b60:	4b99      	ldr	r3, [pc, #612]	; (8002dc8 <StartTaskSetHome+0x2b0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d121      	bne.n	8002bac <StartTaskSetHome+0x94>
		sethomeJ.sethomeJ1 = 0;
 8002b68:	4b98      	ldr	r3, [pc, #608]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
		sethomeJ.sethomeJ2 = 0;
 8002b6e:	4b97      	ldr	r3, [pc, #604]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
		sethomeJ.sethomeJ3 = 0;
 8002b74:	4b95      	ldr	r3, [pc, #596]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	709a      	strb	r2, [r3, #2]
		sethomeJ.sethomeJ4 = 0;
 8002b7a:	4b94      	ldr	r3, [pc, #592]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	70da      	strb	r2, [r3, #3]
		FlagStart.startProgram = 0;
 8002b80:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <StartTaskSetHome+0x2b0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	705a      	strb	r2, [r3, #1]

		SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
 8002b86:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002b88:	f64f 6270 	movw	r2, #65136	; 0xfe70
 8002b8c:	801a      	strh	r2, [r3, #0]
		SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
 8002b8e:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002b90:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b94:	805a      	strh	r2, [r3, #2]
		SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
 8002b96:	4b8e      	ldr	r3, [pc, #568]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002b98:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8002b9c:	809a      	strh	r2, [r3, #4]
		SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
 8002b9e:	4b8c      	ldr	r3, [pc, #560]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002ba0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ba4:	80da      	strh	r2, [r3, #6]

		FlagStart.startSetHome = 1;
 8002ba6:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <StartTaskSetHome+0x2b0>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
	}
	if(FlagStart.startProgram == 0){
 8002bac:	4b86      	ldr	r3, [pc, #536]	; (8002dc8 <StartTaskSetHome+0x2b0>)
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 80ff 	bne.w	8002db4 <StartTaskSetHome+0x29c>
		if(sethomeJ.sethomeJ1 == 0){
 8002bb6:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d167      	bne.n	8002c8e <StartTaskSetHome+0x176>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	487e      	ldr	r0, [pc, #504]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002bc2:	f001 febd 	bl	8004940 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d11c      	bne.n	8002c06 <StartTaskSetHome+0xee>
				osDelay(1);
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f004 ff20 	bl	8007a12 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	4879      	ldr	r0, [pc, #484]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002bd6:	f001 feb3 	bl	8004940 <HAL_GPIO_ReadPin>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d156      	bne.n	8002c8e <StartTaskSetHome+0x176>
					ResetCount(&ENC_LINK1, 1);
 8002be0:	2101      	movs	r1, #1
 8002be2:	487c      	ldr	r0, [pc, #496]	; (8002dd4 <StartTaskSetHome+0x2bc>)
 8002be4:	f7fe fb14 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ1 = 0;
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	801a      	strh	r2, [r3, #0]
					sethomeJ.sethomeJ1 = 1;
 8002bee:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
					Angle.AngleLink1 = 0;
 8002bf4:	4b78      	ldr	r3, [pc, #480]	; (8002dd8 <StartTaskSetHome+0x2c0>)
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = 0;
 8002bfc:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <StartTaskSetHome+0x2c4>)
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
 8002c04:	e043      	b.n	8002c8e <StartTaskSetHome+0x176>
				}
			}
			else {
//				SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ.SpeedSetHomeJ1 > 0){
 8002c06:	2102      	movs	r1, #2
 8002c08:	4872      	ldr	r0, [pc, #456]	; (8002dd4 <StartTaskSetHome+0x2bc>)
 8002c0a:	f7fe fa9b 	bl	8001144 <CountRead>
 8002c0e:	ec51 0b10 	vmov	r0, r1, d0
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <StartTaskSetHome+0x2c8>)
 8002c18:	f7fd ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <StartTaskSetHome+0x128>
 8002c22:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	dd09      	ble.n	8002c40 <StartTaskSetHome+0x128>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002c2c:	4b68      	ldr	r3, [pc, #416]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	425b      	negs	r3, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e01b      	b.n	8002c78 <StartTaskSetHome+0x160>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ.SpeedSetHomeJ1 < 0) {
 8002c40:	2102      	movs	r1, #2
 8002c42:	4864      	ldr	r0, [pc, #400]	; (8002dd4 <StartTaskSetHome+0x2bc>)
 8002c44:	f7fe fa7e 	bl	8001144 <CountRead>
 8002c48:	ec51 0b10 	vmov	r0, r1, d0
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <StartTaskSetHome+0x2cc>)
 8002c52:	f7fd ff43 	bl	8000adc <__aeabi_dcmplt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <StartTaskSetHome+0x160>
 8002c5c:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da08      	bge.n	8002c78 <StartTaskSetHome+0x160>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002c66:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c76:	801a      	strh	r2, [r3, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ.SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002c78:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	230c      	movs	r3, #12
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2308      	movs	r3, #8
 8002c86:	4958      	ldr	r1, [pc, #352]	; (8002de8 <StartTaskSetHome+0x2d0>)
 8002c88:	4858      	ldr	r0, [pc, #352]	; (8002dec <StartTaskSetHome+0x2d4>)
 8002c8a:	f7fe fad8 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ2 == 0){
 8002c8e:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002c90:	785b      	ldrb	r3, [r3, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d12c      	bne.n	8002cf0 <StartTaskSetHome+0x1d8>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002c96:	2180      	movs	r1, #128	; 0x80
 8002c98:	4848      	ldr	r0, [pc, #288]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002c9a:	f001 fe51 	bl	8004940 <HAL_GPIO_ReadPin>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11a      	bne.n	8002cda <StartTaskSetHome+0x1c2>
				osDelay(1);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f004 feb4 	bl	8007a12 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	4843      	ldr	r0, [pc, #268]	; (8002dbc <StartTaskSetHome+0x2a4>)
 8002cae:	f001 fe47 	bl	8004940 <HAL_GPIO_ReadPin>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d11b      	bne.n	8002cf0 <StartTaskSetHome+0x1d8>
					ResetCount(&ENC_LINK2, 1);
 8002cb8:	2101      	movs	r1, #1
 8002cba:	484d      	ldr	r0, [pc, #308]	; (8002df0 <StartTaskSetHome+0x2d8>)
 8002cbc:	f7fe faa8 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ2 = 0;
 8002cc0:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	805a      	strh	r2, [r3, #2]
					sethomeJ.sethomeJ2 = 1;
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
					Angle.AngleLink2 = 187;
 8002ccc:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <StartTaskSetHome+0x2c0>)
 8002cce:	4a49      	ldr	r2, [pc, #292]	; (8002df4 <StartTaskSetHome+0x2dc>)
 8002cd0:	605a      	str	r2, [r3, #4]
					Setpoint.p0_2 = 187;
 8002cd2:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <StartTaskSetHome+0x2c4>)
 8002cd4:	4a47      	ldr	r2, [pc, #284]	; (8002df4 <StartTaskSetHome+0x2dc>)
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8002cd8:	e00a      	b.n	8002cf0 <StartTaskSetHome+0x1d8>

				}
			}
			else {
//				SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ.SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002cdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2308      	movs	r3, #8
 8002ce8:	4943      	ldr	r1, [pc, #268]	; (8002df8 <StartTaskSetHome+0x2e0>)
 8002cea:	4844      	ldr	r0, [pc, #272]	; (8002dfc <StartTaskSetHome+0x2e4>)
 8002cec:	f7fe faa7 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ3 == 0){
 8002cf0:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d12c      	bne.n	8002d52 <StartTaskSetHome+0x23a>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	4832      	ldr	r0, [pc, #200]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002cfc:	f001 fe20 	bl	8004940 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11a      	bne.n	8002d3c <StartTaskSetHome+0x224>
				osDelay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f004 fe83 	bl	8007a12 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002d0c:	2110      	movs	r1, #16
 8002d0e:	482d      	ldr	r0, [pc, #180]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002d10:	f001 fe16 	bl	8004940 <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11b      	bne.n	8002d52 <StartTaskSetHome+0x23a>
					ResetCount(&ENC_LINK3, 1);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4838      	ldr	r0, [pc, #224]	; (8002e00 <StartTaskSetHome+0x2e8>)
 8002d1e:	f7fe fa77 	bl	8001210 <ResetCount>
					sethomeJ.sethomeJ3 = 1;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	709a      	strb	r2, [r3, #2]
					SpeedSetHomeJ.SpeedSetHomeJ3 = 0;
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	809a      	strh	r2, [r3, #4]
					Angle.AngleLink3 = -135;
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <StartTaskSetHome+0x2c0>)
 8002d30:	4a34      	ldr	r2, [pc, #208]	; (8002e04 <StartTaskSetHome+0x2ec>)
 8002d32:	609a      	str	r2, [r3, #8]
					Setpoint.p0_3 = -135;
 8002d34:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <StartTaskSetHome+0x2c4>)
 8002d36:	4a33      	ldr	r2, [pc, #204]	; (8002e04 <StartTaskSetHome+0x2ec>)
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3a:	e00a      	b.n	8002d52 <StartTaskSetHome+0x23a>
				}
			}
			else {
//				SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ.SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002d3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	2304      	movs	r3, #4
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	492b      	ldr	r1, [pc, #172]	; (8002df8 <StartTaskSetHome+0x2e0>)
 8002d4c:	482e      	ldr	r0, [pc, #184]	; (8002e08 <StartTaskSetHome+0x2f0>)
 8002d4e:	f7fe fa76 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ4 == 0){
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002d54:	78db      	ldrb	r3, [r3, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d12c      	bne.n	8002db4 <StartTaskSetHome+0x29c>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002d5e:	f001 fdef 	bl	8004940 <HAL_GPIO_ReadPin>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11a      	bne.n	8002d9e <StartTaskSetHome+0x286>
				osDelay(1);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f004 fe52 	bl	8007a12 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002d6e:	2120      	movs	r1, #32
 8002d70:	4814      	ldr	r0, [pc, #80]	; (8002dc4 <StartTaskSetHome+0x2ac>)
 8002d72:	f001 fde5 	bl	8004940 <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11b      	bne.n	8002db4 <StartTaskSetHome+0x29c>
					ResetCount(&ENC_LINK4, 1);
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4823      	ldr	r0, [pc, #140]	; (8002e0c <StartTaskSetHome+0x2f4>)
 8002d80:	f7fe fa46 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ4 = 0;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	80da      	strh	r2, [r3, #6]
					sethomeJ.sethomeJ4 = 1;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <StartTaskSetHome+0x2b4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	70da      	strb	r2, [r3, #3]
					Angle.AngleLink4 = 90;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <StartTaskSetHome+0x2c0>)
 8002d92:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <StartTaskSetHome+0x2f8>)
 8002d94:	60da      	str	r2, [r3, #12]
					Setpoint.p0_4 = 90;
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <StartTaskSetHome+0x2c4>)
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <StartTaskSetHome+0x2f8>)
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d9c:	e00a      	b.n	8002db4 <StartTaskSetHome+0x29c>
				}
			}
			else {
//				SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ.SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <StartTaskSetHome+0x2b8>)
 8002da0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002da4:	461a      	mov	r2, r3
 8002da6:	2304      	movs	r3, #4
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2300      	movs	r3, #0
 8002dac:	4919      	ldr	r1, [pc, #100]	; (8002e14 <StartTaskSetHome+0x2fc>)
 8002dae:	481a      	ldr	r0, [pc, #104]	; (8002e18 <StartTaskSetHome+0x300>)
 8002db0:	f7fe fa45 	bl	800123e <Drive>
		}
//		if(sethomeJ.sethomeJ1 == 1 && sethomeJ.sethomeJ2 == 1 && sethomeJ.sethomeJ3 == 1 && sethomeJ.sethomeJ4 == 1){
//			FlagStart.startProgram = 1;
//		}
	}
    osDelay(10);
 8002db4:	200a      	movs	r0, #10
 8002db6:	f004 fe2c 	bl	8007a12 <osDelay>
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002dba:	e6b1      	b.n	8002b20 <StartTaskSetHome+0x8>
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	20000760 	.word	0x20000760
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	2000074c 	.word	0x2000074c
 8002dcc:	2000075c 	.word	0x2000075c
 8002dd0:	20000754 	.word	0x20000754
 8002dd4:	20001370 	.word	0x20001370
 8002dd8:	20000764 	.word	0x20000764
 8002ddc:	20000774 	.word	0x20000774
 8002de0:	40568000 	.word	0x40568000
 8002de4:	c0568000 	.word	0xc0568000
 8002de8:	200005b8 	.word	0x200005b8
 8002dec:	200013b8 	.word	0x200013b8
 8002df0:	20001470 	.word	0x20001470
 8002df4:	433b0000 	.word	0x433b0000
 8002df8:	20000528 	.word	0x20000528
 8002dfc:	200014b8 	.word	0x200014b8
 8002e00:	20001570 	.word	0x20001570
 8002e04:	c3070000 	.word	0xc3070000
 8002e08:	200015b8 	.word	0x200015b8
 8002e0c:	20001670 	.word	0x20001670
 8002e10:	42b40000 	.word	0x42b40000
 8002e14:	20000600 	.word	0x20000600
 8002e18:	200016b8 	.word	0x200016b8

08002e1c <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <StartTaskPID+0x40>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <StartTaskPID+0x14>
 8002e2c:	f7fe fea8 	bl	8001b80 <PID_LINK1_Pos>
	  if(sethomeJ.sethomeJ2 == 1)	PID_LINK2_Pos();
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <StartTaskPID+0x40>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <StartTaskPID+0x20>
 8002e38:	f7fe ff56 	bl	8001ce8 <PID_LINK2_Pos>
	  if(sethomeJ.sethomeJ3 == 1)	PID_LINK3_Pos();
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <StartTaskPID+0x40>)
 8002e3e:	789b      	ldrb	r3, [r3, #2]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <StartTaskPID+0x2c>
 8002e44:	f7ff f80a 	bl	8001e5c <PID_LINK3_Pos>
	  if(sethomeJ.sethomeJ4 == 1)	PID_LINK4_Pos();
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <StartTaskPID+0x40>)
 8002e4a:	78db      	ldrb	r3, [r3, #3]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <StartTaskPID+0x38>
 8002e50:	f7ff f8be 	bl	8001fd0 <PID_LINK4_Pos>

	  osDelay(10);
 8002e54:	200a      	movs	r0, #10
 8002e56:	f004 fddc 	bl	8007a12 <osDelay>
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002e5a:	e7e3      	b.n	8002e24 <StartTaskPID+0x8>
 8002e5c:	2000075c 	.word	0x2000075c

08002e60 <StartTaskTrajectory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTrajectory */
void StartTaskTrajectory(void const * argument)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTrajectory */
  /* Infinite loop */
  static uint8_t mode = 0;
  for(;;)
  {
	if(FlagStart.startProgram == 1){
 8002e68:	4bae      	ldr	r3, [pc, #696]	; (8003124 <StartTaskTrajectory+0x2c4>)
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 8154 	bne.w	800311a <StartTaskTrajectory+0x2ba>
		switch(mode){
 8002e72:	4bad      	ldr	r3, [pc, #692]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	f200 814e 	bhi.w	8003118 <StartTaskTrajectory+0x2b8>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <StartTaskTrajectory+0x24>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e99 	.word	0x08002e99
 8002e88:	08002f09 	.word	0x08002f09
 8002e8c:	08002f79 	.word	0x08002f79
 8002e90:	08002fe9 	.word	0x08002fe9
 8002e94:	08003059 	.word	0x08003059
			case 0:
				if(T1 < Tf){
 8002e98:	4ba4      	ldr	r3, [pc, #656]	; (800312c <StartTaskTrajectory+0x2cc>)
 8002e9a:	ed93 7a00 	vldr	s14, [r3]
 8002e9e:	4ba4      	ldr	r3, [pc, #656]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002ea0:	edd3 7a00 	vldr	s15, [r3]
 8002ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eac:	d528      	bpl.n	8002f00 <StartTaskTrajectory+0xa0>
					T1 += 5;
 8002eae:	4b9f      	ldr	r3, [pc, #636]	; (800312c <StartTaskTrajectory+0x2cc>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ebc:	4b9b      	ldr	r3, [pc, #620]	; (800312c <StartTaskTrajectory+0x2cc>)
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink1 = p(Setpoint.p0_1, Setpoint.setpoint1, Tf, 0, 0, T1);
 8002ec2:	4b9c      	ldr	r3, [pc, #624]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002ec4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002eca:	ed93 7a00 	vldr	s14, [r3]
 8002ece:	4b98      	ldr	r3, [pc, #608]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002ed0:	edd3 6a00 	vldr	s13, [r3]
 8002ed4:	4b95      	ldr	r3, [pc, #596]	; (800312c <StartTaskTrajectory+0x2cc>)
 8002ed6:	ed93 6a00 	vldr	s12, [r3]
 8002eda:	eef0 2a46 	vmov.f32	s5, s12
 8002ede:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002ee2:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002ee6:	eeb0 1a66 	vmov.f32	s2, s13
 8002eea:	eef0 0a47 	vmov.f32	s1, s14
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f7fe fba7 	bl	8001644 <p>
 8002ef6:	eef0 7a40 	vmov.f32	s15, s0
 8002efa:	4b90      	ldr	r3, [pc, #576]	; (800313c <StartTaskTrajectory+0x2dc>)
 8002efc:	edc3 7a00 	vstr	s15, [r3]
				}
				mode = 1;
 8002f00:	4b89      	ldr	r3, [pc, #548]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
				break;
 8002f06:	e108      	b.n	800311a <StartTaskTrajectory+0x2ba>
			case 1:
				if(T2 < Tf){
 8002f08:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <StartTaskTrajectory+0x2e0>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	4b88      	ldr	r3, [pc, #544]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1c:	d528      	bpl.n	8002f70 <StartTaskTrajectory+0x110>
					T2 += 5;
 8002f1e:	4b88      	ldr	r3, [pc, #544]	; (8003140 <StartTaskTrajectory+0x2e0>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f2c:	4b84      	ldr	r3, [pc, #528]	; (8003140 <StartTaskTrajectory+0x2e0>)
 8002f2e:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink2 = p(Setpoint.p0_2, Setpoint.setpoint2, Tf, 0, 0, T2);
 8002f32:	4b80      	ldr	r3, [pc, #512]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002f34:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f38:	4b7e      	ldr	r3, [pc, #504]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002f3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f3e:	4b7c      	ldr	r3, [pc, #496]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002f40:	edd3 6a00 	vldr	s13, [r3]
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <StartTaskTrajectory+0x2e0>)
 8002f46:	ed93 6a00 	vldr	s12, [r3]
 8002f4a:	eef0 2a46 	vmov.f32	s5, s12
 8002f4e:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002f52:	eddf 1a79 	vldr	s3, [pc, #484]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002f56:	eeb0 1a66 	vmov.f32	s2, s13
 8002f5a:	eef0 0a47 	vmov.f32	s1, s14
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	f7fe fb6f 	bl	8001644 <p>
 8002f66:	eef0 7a40 	vmov.f32	s15, s0
 8002f6a:	4b74      	ldr	r3, [pc, #464]	; (800313c <StartTaskTrajectory+0x2dc>)
 8002f6c:	edc3 7a01 	vstr	s15, [r3, #4]
				}
				mode = 2;
 8002f70:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8002f72:	2202      	movs	r2, #2
 8002f74:	701a      	strb	r2, [r3, #0]
				break;
 8002f76:	e0d0      	b.n	800311a <StartTaskTrajectory+0x2ba>

			case 2:
				if(T3 < Tf){
 8002f78:	4b72      	ldr	r3, [pc, #456]	; (8003144 <StartTaskTrajectory+0x2e4>)
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	4b6c      	ldr	r3, [pc, #432]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d528      	bpl.n	8002fe0 <StartTaskTrajectory+0x180>
					T3 += 5;
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <StartTaskTrajectory+0x2e4>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f9c:	4b69      	ldr	r3, [pc, #420]	; (8003144 <StartTaskTrajectory+0x2e4>)
 8002f9e:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink3 = p(Setpoint.p0_3, Setpoint.setpoint3, Tf, 0, 0, T3);
 8002fa2:	4b64      	ldr	r3, [pc, #400]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002fa4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002fa8:	4b62      	ldr	r3, [pc, #392]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8002faa:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fae:	4b60      	ldr	r3, [pc, #384]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	4b63      	ldr	r3, [pc, #396]	; (8003144 <StartTaskTrajectory+0x2e4>)
 8002fb6:	ed93 6a00 	vldr	s12, [r3]
 8002fba:	eef0 2a46 	vmov.f32	s5, s12
 8002fbe:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002fc2:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8003138 <StartTaskTrajectory+0x2d8>
 8002fc6:	eeb0 1a66 	vmov.f32	s2, s13
 8002fca:	eef0 0a47 	vmov.f32	s1, s14
 8002fce:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd2:	f7fe fb37 	bl	8001644 <p>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	4b58      	ldr	r3, [pc, #352]	; (800313c <StartTaskTrajectory+0x2dc>)
 8002fdc:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				mode = 3;
 8002fe0:	4b51      	ldr	r3, [pc, #324]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	701a      	strb	r2, [r3, #0]
				break;
 8002fe6:	e098      	b.n	800311a <StartTaskTrajectory+0x2ba>
			case 3:
				if(T4 < Tf){
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <StartTaskTrajectory+0x2e8>)
 8002fea:	ed93 7a00 	vldr	s14, [r3]
 8002fee:	4b50      	ldr	r3, [pc, #320]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d528      	bpl.n	8003050 <StartTaskTrajectory+0x1f0>
					T4 += 5;
 8002ffe:	4b52      	ldr	r3, [pc, #328]	; (8003148 <StartTaskTrajectory+0x2e8>)
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800300c:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <StartTaskTrajectory+0x2e8>)
 800300e:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink4 = p(Setpoint.p0_4, Setpoint.setpoint4, Tf, 0, 0, T4);
 8003012:	4b48      	ldr	r3, [pc, #288]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003014:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003018:	4b46      	ldr	r3, [pc, #280]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800301a:	ed93 7a03 	vldr	s14, [r3, #12]
 800301e:	4b44      	ldr	r3, [pc, #272]	; (8003130 <StartTaskTrajectory+0x2d0>)
 8003020:	edd3 6a00 	vldr	s13, [r3]
 8003024:	4b48      	ldr	r3, [pc, #288]	; (8003148 <StartTaskTrajectory+0x2e8>)
 8003026:	ed93 6a00 	vldr	s12, [r3]
 800302a:	eef0 2a46 	vmov.f32	s5, s12
 800302e:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8003138 <StartTaskTrajectory+0x2d8>
 8003032:	eddf 1a41 	vldr	s3, [pc, #260]	; 8003138 <StartTaskTrajectory+0x2d8>
 8003036:	eeb0 1a66 	vmov.f32	s2, s13
 800303a:	eef0 0a47 	vmov.f32	s1, s14
 800303e:	eeb0 0a67 	vmov.f32	s0, s15
 8003042:	f7fe faff 	bl	8001644 <p>
 8003046:	eef0 7a40 	vmov.f32	s15, s0
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <StartTaskTrajectory+0x2dc>)
 800304c:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				mode = 4;
 8003050:	4b35      	ldr	r3, [pc, #212]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8003052:	2204      	movs	r2, #4
 8003054:	701a      	strb	r2, [r3, #0]
				break;
 8003056:	e060      	b.n	800311a <StartTaskTrajectory+0x2ba>
			case 4:

				  if (Setpoint.setpoint1 != Setpoint.preSetpoint1)
 8003058:	4b36      	ldr	r3, [pc, #216]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800305a:	ed93 7a00 	vldr	s14, [r3]
 800305e:	4b35      	ldr	r3, [pc, #212]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003060:	edd3 7a04 	vldr	s15, [r3, #16]
 8003064:	eeb4 7a67 	vcmp.f32	s14, s15
 8003068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306c:	d00b      	beq.n	8003086 <StartTaskTrajectory+0x226>
				  {
					T1 = 0;
 800306e:	4b2f      	ldr	r3, [pc, #188]	; (800312c <StartTaskTrajectory+0x2cc>)
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = Angle.AngleLink1;
 8003076:	4b31      	ldr	r3, [pc, #196]	; (800313c <StartTaskTrajectory+0x2dc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800307c:	6213      	str	r3, [r2, #32]
					Setpoint.preSetpoint1 = Setpoint.setpoint1;
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003084:	6113      	str	r3, [r2, #16]
				  }
				  if (Setpoint.setpoint2 != Setpoint.preSetpoint2)
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003088:	ed93 7a01 	vldr	s14, [r3, #4]
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800308e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003092:	eeb4 7a67 	vcmp.f32	s14, s15
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d00b      	beq.n	80030b4 <StartTaskTrajectory+0x254>
				  {
					T2 = 0;
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <StartTaskTrajectory+0x2e0>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
					Setpoint.p0_2 = Angle.AngleLink2;
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <StartTaskTrajectory+0x2dc>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030aa:	6253      	str	r3, [r2, #36]	; 0x24
					Setpoint.preSetpoint2 = Setpoint.setpoint2;
 80030ac:	4b21      	ldr	r3, [pc, #132]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a20      	ldr	r2, [pc, #128]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030b2:	6153      	str	r3, [r2, #20]
				  }
				  if (Setpoint.setpoint3 != Setpoint.preSetpoint3)
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80030c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	d00b      	beq.n	80030e2 <StartTaskTrajectory+0x282>
				  {
					T3 = 0;
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <StartTaskTrajectory+0x2e4>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
					Setpoint.p0_3 = Angle.AngleLink3;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <StartTaskTrajectory+0x2dc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030d8:	6293      	str	r3, [r2, #40]	; 0x28
					Setpoint.preSetpoint3 = Setpoint.setpoint3;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4a15      	ldr	r2, [pc, #84]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030e0:	6193      	str	r3, [r2, #24]
				  }
				  if (Setpoint.setpoint4 != Setpoint.preSetpoint4)
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <StartTaskTrajectory+0x2d4>)
 80030ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	d00b      	beq.n	8003110 <StartTaskTrajectory+0x2b0>
				  {
					T4 = 0;
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <StartTaskTrajectory+0x2e8>)
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
					Setpoint.p0_4 = Angle.AngleLink4;
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <StartTaskTrajectory+0x2dc>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <StartTaskTrajectory+0x2d4>)
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c
					Setpoint.preSetpoint4 = Setpoint.setpoint4;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a09      	ldr	r2, [pc, #36]	; (8003134 <StartTaskTrajectory+0x2d4>)
 800310e:	61d3      	str	r3, [r2, #28]
				  }
				  mode = 0;
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <StartTaskTrajectory+0x2c8>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]

				  break;
 8003116:	e000      	b.n	800311a <StartTaskTrajectory+0x2ba>
			default:
			  break;
 8003118:	bf00      	nop
		}

	}
    osDelay(1);
 800311a:	2001      	movs	r0, #1
 800311c:	f004 fc79 	bl	8007a12 <osDelay>
	if(FlagStart.startProgram == 1){
 8003120:	e6a2      	b.n	8002e68 <StartTaskTrajectory+0x8>
 8003122:	bf00      	nop
 8003124:	2000074c 	.word	0x2000074c
 8003128:	20001b74 	.word	0x20001b74
 800312c:	20000ad8 	.word	0x20000ad8
 8003130:	20000000 	.word	0x20000000
 8003134:	20000774 	.word	0x20000774
 8003138:	00000000 	.word	0x00000000
 800313c:	20000764 	.word	0x20000764
 8003140:	20000adc 	.word	0x20000adc
 8003144:	20000ae0 	.word	0x20000ae0
 8003148:	20000ae4 	.word	0x20000ae4

0800314c <StartTaskUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUart */
void StartTaskUart(void const * argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUart */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8003154:	200a      	movs	r0, #10
 8003156:	f004 fc5c 	bl	8007a12 <osDelay>
 800315a:	e7fb      	b.n	8003154 <StartTaskUart+0x8>

0800315c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003160:	b088      	sub	sp, #32
 8003162:	af06      	add	r7, sp, #24
 8003164:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a29      	ldr	r2, [pc, #164]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003170:	f000 fd2a 	bl	8003bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM12){
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d142      	bne.n	8003204 <HAL_TIM_PeriodElapsedCallback+0xa8>
	if(FlagStart.startProgram == 1){
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d13e      	bne.n	8003204 <HAL_TIM_PeriodElapsedCallback+0xa8>
		count_timer++;
 8003186:	4b25      	ldr	r3, [pc, #148]	; (800321c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003190:	801a      	strh	r2, [r3, #0]
		if(count_timer >= 200){
 8003192:	4b22      	ldr	r3, [pc, #136]	; (800321c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	2bc7      	cmp	r3, #199	; 0xc7
 8003198:	d934      	bls.n	8003204 <HAL_TIM_PeriodElapsedCallback+0xa8>
		  sprintf(dataAngle, "t1:%.1f,t2:%.1f,t3:%.1f,t4:%.1f\n", (float)Angle.AngleLink1, (float)Angle.AngleLink2, (float)Angle.AngleLink3, (float)Angle.AngleLink4);
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd f9d2 	bl	8000548 <__aeabi_f2d>
 80031a4:	4682      	mov	sl, r0
 80031a6:	468b      	mov	fp, r1
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9cb 	bl	8000548 <__aeabi_f2d>
 80031b2:	4604      	mov	r4, r0
 80031b4:	460d      	mov	r5, r1
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9c4 	bl	8000548 <__aeabi_f2d>
 80031c0:	4680      	mov	r8, r0
 80031c2:	4689      	mov	r9, r1
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9bd 	bl	8000548 <__aeabi_f2d>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031da:	e9cd 4500 	strd	r4, r5, [sp]
 80031de:	4652      	mov	r2, sl
 80031e0:	465b      	mov	r3, fp
 80031e2:	4910      	ldr	r1, [pc, #64]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80031e4:	4810      	ldr	r0, [pc, #64]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80031e6:	f007 fc29 	bl	800aa3c <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t*)dataAngle, strlen(dataAngle));
 80031ea:	480f      	ldr	r0, [pc, #60]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80031ec:	f7fd f840 	bl	8000270 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
 80031f6:	490c      	ldr	r1, [pc, #48]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80031f8:	480c      	ldr	r0, [pc, #48]	; (800322c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80031fa:	f003 fa7f 	bl	80066fc <HAL_UART_Transmit_IT>
		  count_timer = 0;
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003200:	2200      	movs	r2, #0
 8003202:	801a      	strh	r2, [r3, #0]
		}
	}
  }
  /* USER CODE END Callback 1 */
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800320e:	bf00      	nop
 8003210:	40002000 	.word	0x40002000
 8003214:	40001800 	.word	0x40001800
 8003218:	2000074c 	.word	0x2000074c
 800321c:	2000136c 	.word	0x2000136c
 8003220:	20000764 	.word	0x20000764
 8003224:	0800e078 	.word	0x0800e078
 8003228:	200012ec 	.word	0x200012ec
 800322c:	20000690 	.word	0x20000690

08003230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003234:	b672      	cpsid	i
}
 8003236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003238:	e7fe      	b.n	8003238 <Error_Handler+0x8>
	...

0800323c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_MspInit+0x54>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_MspInit+0x54>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_MspInit+0x54>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_MspInit+0x54>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_MspInit+0x54>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_MspInit+0x54>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	210f      	movs	r1, #15
 800327e:	f06f 0001 	mvn.w	r0, #1
 8003282:	f000 fd90 	bl	8003da6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b090      	sub	sp, #64	; 0x40
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a78      	ldr	r2, [pc, #480]	; (8003494 <HAL_TIM_Encoder_MspInit+0x200>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d135      	bne.n	8003322 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ba:	4b77      	ldr	r3, [pc, #476]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a76      	ldr	r2, [pc, #472]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b74      	ldr	r3, [pc, #464]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 80032ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fc:	2300      	movs	r3, #0
 80032fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003300:	2301      	movs	r3, #1
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003308:	4619      	mov	r1, r3
 800330a:	4864      	ldr	r0, [pc, #400]	; (800349c <HAL_TIM_Encoder_MspInit+0x208>)
 800330c:	f001 f97c 	bl	8004608 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2105      	movs	r1, #5
 8003314:	2018      	movs	r0, #24
 8003316:	f000 fd46 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800331a:	2018      	movs	r0, #24
 800331c:	f000 fd5f 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003320:	e0b3      	b.n	800348a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d14b      	bne.n	80033c4 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4a58      	ldr	r2, [pc, #352]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6413      	str	r3, [r2, #64]	; 0x40
 800333c:	4b56      	ldr	r3, [pc, #344]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	4b52      	ldr	r3, [pc, #328]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	6313      	str	r3, [r2, #48]	; 0x30
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8003380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003392:	2301      	movs	r3, #1
 8003394:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8003396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800339a:	4619      	mov	r1, r3
 800339c:	483f      	ldr	r0, [pc, #252]	; (800349c <HAL_TIM_Encoder_MspInit+0x208>)
 800339e:	f001 f933 	bl	8004608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 80033a2:	2308      	movs	r3, #8
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a6:	2302      	movs	r3, #2
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ae:	2300      	movs	r3, #0
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033b2:	2301      	movs	r3, #1
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 80033b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ba:	4619      	mov	r1, r3
 80033bc:	4838      	ldr	r0, [pc, #224]	; (80034a0 <HAL_TIM_Encoder_MspInit+0x20c>)
 80033be:	f001 f923 	bl	8004608 <HAL_GPIO_Init>
}
 80033c2:	e062      	b.n	800348a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a36      	ldr	r2, [pc, #216]	; (80034a4 <HAL_TIM_Encoder_MspInit+0x210>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12c      	bne.n	8003428 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a30      	ldr	r2, [pc, #192]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a29      	ldr	r2, [pc, #164]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003416:	2302      	movs	r3, #2
 8003418:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341e:	4619      	mov	r1, r3
 8003420:	481e      	ldr	r0, [pc, #120]	; (800349c <HAL_TIM_Encoder_MspInit+0x208>)
 8003422:	f001 f8f1 	bl	8004608 <HAL_GPIO_Init>
}
 8003426:	e030      	b.n	800348a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_Encoder_MspInit+0x214>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d12b      	bne.n	800348a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_TIM_Encoder_MspInit+0x204>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 800346a:	2303      	movs	r3, #3
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800347a:	2302      	movs	r3, #2
 800347c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003482:	4619      	mov	r1, r3
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <HAL_TIM_Encoder_MspInit+0x208>)
 8003486:	f001 f8bf 	bl	8004608 <HAL_GPIO_Init>
}
 800348a:	bf00      	nop
 800348c:	3740      	adds	r7, #64	; 0x40
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40023800 	.word	0x40023800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000c00 	.word	0x40000c00

080034ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <HAL_TIM_PWM_MspInit+0xb8>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10e      	bne.n	80034dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80034da:	e03e      	b.n	800355a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a22      	ldr	r2, [pc, #136]	; (800356c <HAL_TIM_PWM_MspInit+0xc0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11e      	bne.n	8003524 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a1e      	ldr	r2, [pc, #120]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2105      	movs	r1, #5
 8003506:	202b      	movs	r0, #43	; 0x2b
 8003508:	f000 fc4d 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800350c:	202b      	movs	r0, #43	; 0x2b
 800350e:	f000 fc66 	bl	8003dde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	210f      	movs	r1, #15
 8003516:	202d      	movs	r0, #45	; 0x2d
 8003518:	f000 fc45 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800351c:	202d      	movs	r0, #45	; 0x2d
 800351e:	f000 fc5e 	bl	8003dde <HAL_NVIC_EnableIRQ>
}
 8003522:	e01a      	b.n	800355a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM9)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_TIM_PWM_MspInit+0xc4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d115      	bne.n	800355a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	4a0c      	ldr	r2, [pc, #48]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_TIM_PWM_MspInit+0xbc>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2105      	movs	r1, #5
 800354e:	2018      	movs	r0, #24
 8003550:	f000 fc29 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003554:	2018      	movs	r0, #24
 8003556:	f000 fc42 	bl	8003dde <HAL_NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40000800 	.word	0x40000800
 8003568:	40023800 	.word	0x40023800
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000

08003574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_TIM_Base_MspInit+0x48>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d115      	bne.n	80035b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_TIM_Base_MspInit+0x4c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003594:	6413      	str	r3, [r2, #64]	; 0x40
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2105      	movs	r1, #5
 80035a6:	202b      	movs	r0, #43	; 0x2b
 80035a8:	f000 fbfd 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80035ac:	202b      	movs	r0, #43	; 0x2b
 80035ae:	f000 fc16 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40001800 	.word	0x40001800
 80035c0:	40023800 	.word	0x40023800

080035c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a37      	ldr	r2, [pc, #220]	; (80036c0 <HAL_TIM_MspPostInit+0xfc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d11f      	bne.n	8003626 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8003602:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003614:	2302      	movs	r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	482a      	ldr	r0, [pc, #168]	; (80036c8 <HAL_TIM_MspPostInit+0x104>)
 8003620:	f000 fff2 	bl	8004608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003624:	e047      	b.n	80036b6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a28      	ldr	r2, [pc, #160]	; (80036cc <HAL_TIM_MspPostInit+0x108>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d11f      	bne.n	8003670 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	4b23      	ldr	r3, [pc, #140]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 800364c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800365e:	2303      	movs	r3, #3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	4619      	mov	r1, r3
 8003668:	4819      	ldr	r0, [pc, #100]	; (80036d0 <HAL_TIM_MspPostInit+0x10c>)
 800366a:	f000 ffcd 	bl	8004608 <HAL_GPIO_Init>
}
 800366e:	e022      	b.n	80036b6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <HAL_TIM_MspPostInit+0x110>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d11d      	bne.n	80036b6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_TIM_MspPostInit+0x100>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 8003696:	230c      	movs	r3, #12
 8003698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369a:	2302      	movs	r3, #2
 800369c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80036a6:	2303      	movs	r3, #3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	4809      	ldr	r0, [pc, #36]	; (80036d8 <HAL_TIM_MspPostInit+0x114>)
 80036b2:	f000 ffa9 	bl	8004608 <HAL_GPIO_Init>
}
 80036b6:	bf00      	nop
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40010400 	.word	0x40010400
 80036d0:	40020800 	.word	0x40020800
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40020000 	.word	0x40020000

080036dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08a      	sub	sp, #40	; 0x28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_UART_MspInit+0xf0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d162      	bne.n	80037c4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	4b33      	ldr	r3, [pc, #204]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	4a32      	ldr	r2, [pc, #200]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 8003708:	f043 0310 	orr.w	r3, r3, #16
 800370c:	6453      	str	r3, [r2, #68]	; 0x44
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a2b      	ldr	r2, [pc, #172]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <HAL_UART_MspInit+0xf4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003736:	23c0      	movs	r3, #192	; 0xc0
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373a:	2302      	movs	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003746:	2307      	movs	r3, #7
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374a:	f107 0314 	add.w	r3, r7, #20
 800374e:	4619      	mov	r1, r3
 8003750:	4820      	ldr	r0, [pc, #128]	; (80037d4 <HAL_UART_MspInit+0xf8>)
 8003752:	f000 ff59 	bl	8004608 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003756:	4b20      	ldr	r3, [pc, #128]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_UART_MspInit+0x100>)
 800375a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 800375e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003762:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003776:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 800377a:	2200      	movs	r2, #0
 800377c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 800378c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003790:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003792:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 8003794:	2200      	movs	r2, #0
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003798:	480f      	ldr	r0, [pc, #60]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 800379a:	f000 fb33 	bl	8003e04 <HAL_DMA_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80037a4:	f7ff fd44 	bl	8003230 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 80037ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80037ae:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_UART_MspInit+0xfc>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2105      	movs	r1, #5
 80037b8:	2025      	movs	r0, #37	; 0x25
 80037ba:	f000 faf4 	bl	8003da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037be:	2025      	movs	r0, #37	; 0x25
 80037c0:	f000 fb0d 	bl	8003dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037c4:	bf00      	nop
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40011000 	.word	0x40011000
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40020400 	.word	0x40020400
 80037d8:	200006d8 	.word	0x200006d8
 80037dc:	40026440 	.word	0x40026440

080037e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <HAL_InitTick+0xe4>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a32      	ldr	r2, [pc, #200]	; (80038c4 <HAL_InitTick+0xe4>)
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003800:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <HAL_InitTick+0xe4>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800380c:	f107 0210 	add.w	r2, r7, #16
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fd42 	bl	80052a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003826:	f001 fd13 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 800382a:	6378      	str	r0, [r7, #52]	; 0x34
 800382c:	e004      	b.n	8003838 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800382e:	f001 fd0f 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8003832:	4603      	mov	r3, r0
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <HAL_InitTick+0xe8>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3b01      	subs	r3, #1
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_InitTick+0xec>)
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_InitTick+0xf0>)
 800384a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_InitTick+0xec>)
 800384e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003852:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_InitTick+0xec>)
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800385a:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_InitTick+0xec>)
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003860:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <HAL_InitTick+0xec>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_InitTick+0xec>)
 8003868:	2200      	movs	r2, #0
 800386a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800386c:	4817      	ldr	r0, [pc, #92]	; (80038cc <HAL_InitTick+0xec>)
 800386e:	f001 fd49 	bl	8005304 <HAL_TIM_Base_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11b      	bne.n	80038b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003880:	4812      	ldr	r0, [pc, #72]	; (80038cc <HAL_InitTick+0xec>)
 8003882:	f001 fd8f 	bl	80053a4 <HAL_TIM_Base_Start_IT>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800388c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003890:	2b00      	cmp	r3, #0
 8003892:	d111      	bne.n	80038b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003894:	202d      	movs	r0, #45	; 0x2d
 8003896:	f000 faa2 	bl	8003dde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d808      	bhi.n	80038b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80038a0:	2200      	movs	r2, #0
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	202d      	movs	r0, #45	; 0x2d
 80038a6:	f000 fa7e 	bl	8003da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <HAL_InitTick+0xf4>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e002      	b.n	80038b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3738      	adds	r7, #56	; 0x38
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40023800 	.word	0x40023800
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	20001b78 	.word	0x20001b78
 80038d0:	40002000 	.word	0x40002000
 80038d4:	20000008 	.word	0x20000008

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038dc:	e7fe      	b.n	80038dc <NMI_Handler+0x4>

080038de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e2:	e7fe      	b.n	80038e2 <HardFault_Handler+0x4>

080038e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e8:	e7fe      	b.n	80038e8 <MemManage_Handler+0x4>

080038ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ea:	b480      	push	{r7}
 80038ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038ee:	e7fe      	b.n	80038ee <BusFault_Handler+0x4>

080038f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <UsageFault_Handler+0x4>

080038f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800390a:	f002 f807 	bl	800591c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800390e:	4803      	ldr	r0, [pc, #12]	; (800391c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003910:	f002 f804 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000450 	.word	0x20000450
 800391c:	20000600 	.word	0x20000600

08003920 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <USART1_IRQHandler+0x10>)
 8003926:	f002 ff7d 	bl	8006824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000690 	.word	0x20000690

08003934 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800393a:	f001 ffef 	bl	800591c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800393e:	4803      	ldr	r0, [pc, #12]	; (800394c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8003940:	f001 ffec 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200005b8 	.word	0x200005b8
 800394c:	20000648 	.word	0x20000648

08003950 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003954:	4803      	ldr	r0, [pc, #12]	; (8003964 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003956:	f001 ffe1 	bl	800591c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 800395c:	f001 ffde 	bl	800591c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200005b8 	.word	0x200005b8
 8003968:	20001b78 	.word	0x20001b78

0800396c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <DMA2_Stream2_IRQHandler+0x10>)
 8003972:	f000 fbdf 	bl	8004134 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200006d8 	.word	0x200006d8

08003980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return 1;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <_kill>:

int _kill(int pid, int sig)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800399a:	f007 f9b5 	bl	800ad08 <__errno>
 800399e:	4603      	mov	r3, r0
 80039a0:	2216      	movs	r2, #22
 80039a2:	601a      	str	r2, [r3, #0]
  return -1;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_exit>:

void _exit (int status)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffe7 	bl	8003990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039c2:	e7fe      	b.n	80039c2 <_exit+0x12>

080039c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	e00a      	b.n	80039ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039d6:	f3af 8000 	nop.w
 80039da:	4601      	mov	r1, r0
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	60ba      	str	r2, [r7, #8]
 80039e2:	b2ca      	uxtb	r2, r1
 80039e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	3301      	adds	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dbf0      	blt.n	80039d6 <_read+0x12>
  }

  return len;
 80039f4:	687b      	ldr	r3, [r7, #4]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e009      	b.n	8003a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	60ba      	str	r2, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	3301      	adds	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	dbf1      	blt.n	8003a10 <_write+0x12>
  }
  return len;
 8003a2c:	687b      	ldr	r3, [r7, #4]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <_close>:

int _close(int file)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <_isatty>:

int _isatty(int file)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <_sbrk+0x5c>)
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <_sbrk+0x60>)
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <_sbrk+0x64>)
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <_sbrk+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <_sbrk+0x64>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d207      	bcs.n	8003ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad0:	f007 f91a 	bl	800ad08 <__errno>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	220c      	movs	r2, #12
 8003ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e009      	b.n	8003af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <_sbrk+0x64>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <_sbrk+0x64>)
 8003af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20020000 	.word	0x20020000
 8003b00:	00000400 	.word	0x00000400
 8003b04:	20001bc0 	.word	0x20001bc0
 8003b08:	20005a68 	.word	0x20005a68

08003b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <SystemInit+0x20>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <SystemInit+0x20>)
 8003b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b34:	f7ff ffea 	bl	8003b0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b38:	480c      	ldr	r0, [pc, #48]	; (8003b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b3a:	490d      	ldr	r1, [pc, #52]	; (8003b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	; (8003b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b50:	4c0a      	ldr	r4, [pc, #40]	; (8003b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b5e:	f007 f8d9 	bl	800ad14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b62:	f7fe fa61 	bl	8002028 <main>
  bx  lr    
 8003b66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b70:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003b74:	0800e524 	.word	0x0800e524
  ldr r2, =_sbss
 8003b78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003b7c:	20005a68 	.word	0x20005a68

08003b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b80:	e7fe      	b.n	8003b80 <ADC_IRQHandler>
	...

08003b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <HAL_Init+0x40>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	; (8003bc4 <HAL_Init+0x40>)
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_Init+0x40>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_Init+0x40>)
 8003b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_Init+0x40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <HAL_Init+0x40>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bac:	2003      	movs	r0, #3
 8003bae:	f000 f8ef 	bl	8003d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb2:	200f      	movs	r0, #15
 8003bb4:	f7ff fe14 	bl	80037e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb8:	f7ff fb40 	bl	800323c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	20001bc4 	.word	0x20001bc4

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20001bc4 	.word	0x20001bc4

08003c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <__NVIC_EnableIRQ+0x38>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000e100 	.word	0xe000e100

08003ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	6039      	str	r1, [r7, #0]
 8003cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	db0a      	blt.n	8003cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	490c      	ldr	r1, [pc, #48]	; (8003cf4 <__NVIC_SetPriority+0x4c>)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	440b      	add	r3, r1
 8003ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cd0:	e00a      	b.n	8003ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4908      	ldr	r1, [pc, #32]	; (8003cf8 <__NVIC_SetPriority+0x50>)
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	0112      	lsls	r2, r2, #4
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	761a      	strb	r2, [r3, #24]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000e100 	.word	0xe000e100
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b089      	sub	sp, #36	; 0x24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f1c3 0307 	rsb	r3, r3, #7
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	bf28      	it	cs
 8003d1a:	2304      	movcs	r3, #4
 8003d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2b06      	cmp	r3, #6
 8003d24:	d902      	bls.n	8003d2c <NVIC_EncodePriority+0x30>
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	3b03      	subs	r3, #3
 8003d2a:	e000      	b.n	8003d2e <NVIC_EncodePriority+0x32>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	f04f 32ff 	mov.w	r2, #4294967295
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	401a      	ands	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d44:	f04f 31ff 	mov.w	r1, #4294967295
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4e:	43d9      	mvns	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d54:	4313      	orrs	r3, r2
         );
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3724      	adds	r7, #36	; 0x24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003d68:	f3bf 8f4f 	dsb	sy
}
 8003d6c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <__NVIC_SystemReset+0x24>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <__NVIC_SystemReset+0x24>)
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <__NVIC_SystemReset+0x28>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d7e:	f3bf 8f4f 	dsb	sy
}
 8003d82:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <__NVIC_SystemReset+0x20>
 8003d88:	e000ed00 	.word	0xe000ed00
 8003d8c:	05fa0004 	.word	0x05fa0004

08003d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff35 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db8:	f7ff ff4a 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7ff ff9a 	bl	8003cfc <NVIC_EncodePriority>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff69 	bl	8003ca8 <__NVIC_SetPriority>
}
 8003dd6:	bf00      	nop
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff3d 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003dfe:	f7ff ffb1 	bl	8003d64 <__NVIC_SystemReset>
	...

08003e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff feee 	bl	8003bf0 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e099      	b.n	8003f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e40:	e00f      	b.n	8003e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e42:	f7ff fed5 	bl	8003bf0 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d908      	bls.n	8003e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e078      	b.n	8003f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e8      	bne.n	8003e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <HAL_DMA_Init+0x158>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d107      	bne.n	8003ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d117      	bne.n	8003f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fb01 	bl	8004510 <DMA_CheckFifoParam>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f22:	2301      	movs	r3, #1
 8003f24:	e016      	b.n	8003f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fab8 	bl	80044a4 <DMA_CalcBaseAndBitshift>
 8003f34:	4603      	mov	r3, r0
 8003f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	223f      	movs	r2, #63	; 0x3f
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	f010803f 	.word	0xf010803f

08003f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_DMA_Start_IT+0x26>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e040      	b.n	8004008 <HAL_DMA_Start_IT+0xa8>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d12f      	bne.n	8003ffa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fa4a 	bl	8004448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0216 	orr.w	r2, r2, #22
 8003fce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0208 	orr.w	r2, r2, #8
 8003fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e005      	b.n	8004006 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004002:	2302      	movs	r3, #2
 8004004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800401e:	f7ff fde7 	bl	8003bf0 <HAL_GetTick>
 8004022:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d008      	beq.n	8004042 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e052      	b.n	80040e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0216 	bic.w	r2, r2, #22
 8004050:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004060:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_DMA_Abort+0x62>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0208 	bic.w	r2, r2, #8
 8004080:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004092:	e013      	b.n	80040bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004094:	f7ff fdac 	bl	8003bf0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d90c      	bls.n	80040bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e015      	b.n	80040e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e4      	bne.n	8004094 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	223f      	movs	r2, #63	; 0x3f
 80040d0:	409a      	lsls	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d004      	beq.n	800410e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e00c      	b.n	8004128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2205      	movs	r2, #5
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004140:	4b8e      	ldr	r3, [pc, #568]	; (800437c <HAL_DMA_IRQHandler+0x248>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a8e      	ldr	r2, [pc, #568]	; (8004380 <HAL_DMA_IRQHandler+0x24c>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	0a9b      	lsrs	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2208      	movs	r2, #8
 8004160:	409a      	lsls	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01a      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0204 	bic.w	r2, r2, #4
 8004186:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	2208      	movs	r2, #8
 800418e:	409a      	lsls	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	2201      	movs	r2, #1
 80041c4:	409a      	lsls	r2, r3
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f043 0202 	orr.w	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	2204      	movs	r2, #4
 80041dc:	409a      	lsls	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4013      	ands	r3, r2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2204      	movs	r2, #4
 80041fa:	409a      	lsls	r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0204 	orr.w	r2, r3, #4
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	2210      	movs	r2, #16
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d043      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03c      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2210      	movs	r2, #16
 8004230:	409a      	lsls	r2, r3
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d024      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
 8004262:	e01f      	b.n	80042a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
 8004274:	e016      	b.n	80042a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0208 	bic.w	r2, r2, #8
 8004292:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	2220      	movs	r2, #32
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 808f 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8087 	beq.w	80043d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	2220      	movs	r2, #32
 80042cc:	409a      	lsls	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d136      	bne.n	800434c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0216 	bic.w	r2, r2, #22
 80042ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <HAL_DMA_IRQHandler+0x1da>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0208 	bic.w	r2, r2, #8
 800431c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	223f      	movs	r2, #63	; 0x3f
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	2b00      	cmp	r3, #0
 8004340:	d07e      	beq.n	8004440 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
        }
        return;
 800434a:	e079      	b.n	8004440 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01d      	beq.n	8004396 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	2b00      	cmp	r3, #0
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
 8004378:	e02c      	b.n	80043d4 <HAL_DMA_IRQHandler+0x2a0>
 800437a:	bf00      	nop
 800437c:	20000004 	.word	0x20000004
 8004380:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d023      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
 8004394:	e01e      	b.n	80043d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0210 	bic.w	r2, r2, #16
 80043b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d032      	beq.n	8004442 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2205      	movs	r2, #5
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3301      	adds	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	429a      	cmp	r2, r3
 800440a:	d307      	bcc.n	800441c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_DMA_IRQHandler+0x2cc>
 800441a:	e000      	b.n	800441e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800441c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e000      	b.n	8004442 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004440:	bf00      	nop
    }
  }
}
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d108      	bne.n	8004488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004486:	e007      	b.n	8004498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b10      	subs	r3, #16
 80044b4:	4a14      	ldr	r2, [pc, #80]	; (8004508 <DMA_CalcBaseAndBitshift+0x64>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <DMA_CalcBaseAndBitshift+0x68>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d909      	bls.n	80044e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	659a      	str	r2, [r3, #88]	; 0x58
 80044e4:	e007      	b.n	80044f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	aaaaaaab 	.word	0xaaaaaaab
 800450c:	0800e0c8 	.word	0x0800e0c8

08004510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11f      	bne.n	800456a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d856      	bhi.n	80045de <DMA_CheckFifoParam+0xce>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <DMA_CheckFifoParam+0x28>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004549 	.word	0x08004549
 800453c:	0800455b 	.word	0x0800455b
 8004540:	08004549 	.word	0x08004549
 8004544:	080045df 	.word	0x080045df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d046      	beq.n	80045e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004558:	e043      	b.n	80045e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004562:	d140      	bne.n	80045e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004568:	e03d      	b.n	80045e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004572:	d121      	bne.n	80045b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d837      	bhi.n	80045ea <DMA_CheckFifoParam+0xda>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <DMA_CheckFifoParam+0x70>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004591 	.word	0x08004591
 8004584:	08004597 	.word	0x08004597
 8004588:	08004591 	.word	0x08004591
 800458c:	080045a9 	.word	0x080045a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e030      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d025      	beq.n	80045ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a6:	e022      	b.n	80045ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b0:	d11f      	bne.n	80045f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045b6:	e01c      	b.n	80045f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d903      	bls.n	80045c6 <DMA_CheckFifoParam+0xb6>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d003      	beq.n	80045cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045c4:	e018      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ca:	e015      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00e      	beq.n	80045f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e00b      	b.n	80045f6 <DMA_CheckFifoParam+0xe6>
      break;
 80045de:	bf00      	nop
 80045e0:	e00a      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045e2:	bf00      	nop
 80045e4:	e008      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045e6:	bf00      	nop
 80045e8:	e006      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e004      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045ee:	bf00      	nop
 80045f0:	e002      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80045f2:	bf00      	nop
 80045f4:	e000      	b.n	80045f8 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
    }
  } 
  
  return status; 
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop

08004608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	e16b      	b.n	80048fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004624:	2201      	movs	r2, #1
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	429a      	cmp	r2, r3
 800463e:	f040 815a 	bne.w	80048f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f003 0303 	and.w	r3, r3, #3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d005      	beq.n	800465a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004656:	2b02      	cmp	r3, #2
 8004658:	d130      	bne.n	80046bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004690:	2201      	movs	r2, #1
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	091b      	lsrs	r3, r3, #4
 80046a6:	f003 0201 	and.w	r2, r3, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d017      	beq.n	80046f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	2203      	movs	r2, #3
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d123      	bne.n	800474c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	08da      	lsrs	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3208      	adds	r2, #8
 800470c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	220f      	movs	r2, #15
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	08da      	lsrs	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3208      	adds	r2, #8
 8004746:	69b9      	ldr	r1, [r7, #24]
 8004748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	2203      	movs	r2, #3
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4013      	ands	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80b4 	beq.w	80048f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	4b60      	ldr	r3, [pc, #384]	; (8004914 <HAL_GPIO_Init+0x30c>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a5f      	ldr	r2, [pc, #380]	; (8004914 <HAL_GPIO_Init+0x30c>)
 8004798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_GPIO_Init+0x30c>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047aa:	4a5b      	ldr	r2, [pc, #364]	; (8004918 <HAL_GPIO_Init+0x310>)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	089b      	lsrs	r3, r3, #2
 80047b0:	3302      	adds	r3, #2
 80047b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	220f      	movs	r2, #15
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a52      	ldr	r2, [pc, #328]	; (800491c <HAL_GPIO_Init+0x314>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d02b      	beq.n	800482e <HAL_GPIO_Init+0x226>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a51      	ldr	r2, [pc, #324]	; (8004920 <HAL_GPIO_Init+0x318>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d025      	beq.n	800482a <HAL_GPIO_Init+0x222>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a50      	ldr	r2, [pc, #320]	; (8004924 <HAL_GPIO_Init+0x31c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <HAL_GPIO_Init+0x21e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4f      	ldr	r2, [pc, #316]	; (8004928 <HAL_GPIO_Init+0x320>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d019      	beq.n	8004822 <HAL_GPIO_Init+0x21a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4e      	ldr	r2, [pc, #312]	; (800492c <HAL_GPIO_Init+0x324>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_GPIO_Init+0x216>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4d      	ldr	r2, [pc, #308]	; (8004930 <HAL_GPIO_Init+0x328>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00d      	beq.n	800481a <HAL_GPIO_Init+0x212>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4c      	ldr	r2, [pc, #304]	; (8004934 <HAL_GPIO_Init+0x32c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <HAL_GPIO_Init+0x20e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4b      	ldr	r2, [pc, #300]	; (8004938 <HAL_GPIO_Init+0x330>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_GPIO_Init+0x20a>
 800480e:	2307      	movs	r3, #7
 8004810:	e00e      	b.n	8004830 <HAL_GPIO_Init+0x228>
 8004812:	2308      	movs	r3, #8
 8004814:	e00c      	b.n	8004830 <HAL_GPIO_Init+0x228>
 8004816:	2306      	movs	r3, #6
 8004818:	e00a      	b.n	8004830 <HAL_GPIO_Init+0x228>
 800481a:	2305      	movs	r3, #5
 800481c:	e008      	b.n	8004830 <HAL_GPIO_Init+0x228>
 800481e:	2304      	movs	r3, #4
 8004820:	e006      	b.n	8004830 <HAL_GPIO_Init+0x228>
 8004822:	2303      	movs	r3, #3
 8004824:	e004      	b.n	8004830 <HAL_GPIO_Init+0x228>
 8004826:	2302      	movs	r3, #2
 8004828:	e002      	b.n	8004830 <HAL_GPIO_Init+0x228>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_GPIO_Init+0x228>
 800482e:	2300      	movs	r3, #0
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	f002 0203 	and.w	r2, r2, #3
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	4093      	lsls	r3, r2
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004840:	4935      	ldr	r1, [pc, #212]	; (8004918 <HAL_GPIO_Init+0x310>)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484e:	4b3b      	ldr	r3, [pc, #236]	; (800493c <HAL_GPIO_Init+0x334>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004872:	4a32      	ldr	r2, [pc, #200]	; (800493c <HAL_GPIO_Init+0x334>)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004878:	4b30      	ldr	r3, [pc, #192]	; (800493c <HAL_GPIO_Init+0x334>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800489c:	4a27      	ldr	r2, [pc, #156]	; (800493c <HAL_GPIO_Init+0x334>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_GPIO_Init+0x334>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c6:	4a1d      	ldr	r2, [pc, #116]	; (800493c <HAL_GPIO_Init+0x334>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_GPIO_Init+0x334>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <HAL_GPIO_Init+0x334>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	f67f ae90 	bls.w	8004624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	40013800 	.word	0x40013800
 800491c:	40020000 	.word	0x40020000
 8004920:	40020400 	.word	0x40020400
 8004924:	40020800 	.word	0x40020800
 8004928:	40020c00 	.word	0x40020c00
 800492c:	40021000 	.word	0x40021000
 8004930:	40021400 	.word	0x40021400
 8004934:	40021800 	.word	0x40021800
 8004938:	40021c00 	.word	0x40021c00
 800493c:	40013c00 	.word	0x40013c00

08004940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e001      	b.n	8004962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e267      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d075      	beq.n	8004a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800498e:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d00c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800499a:	4b85      	ldr	r3, [pc, #532]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d112      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a6:	4b82      	ldr	r3, [pc, #520]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b2:	d10b      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	4b7e      	ldr	r3, [pc, #504]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05b      	beq.n	8004a78 <HAL_RCC_OscConfig+0x108>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d157      	bne.n	8004a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e242      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_OscConfig+0x74>
 80049d6:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e01d      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x98>
 80049ee:	4b70      	ldr	r3, [pc, #448]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6f      	ldr	r2, [pc, #444]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6c      	ldr	r2, [pc, #432]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e00b      	b.n	8004a20 <HAL_RCC_OscConfig+0xb0>
 8004a08:	4b69      	ldr	r3, [pc, #420]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a68      	ldr	r2, [pc, #416]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b66      	ldr	r3, [pc, #408]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a65      	ldr	r2, [pc, #404]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d013      	beq.n	8004a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7ff f8e2 	bl	8003bf0 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7ff f8de 	bl	8003bf0 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e207      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b5b      	ldr	r3, [pc, #364]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0xc0>
 8004a4e:	e014      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a50:	f7ff f8ce 	bl	8003bf0 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a58:	f7ff f8ca 	bl	8003bf0 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b64      	cmp	r3, #100	; 0x64
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e1f3      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0xe8>
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d063      	beq.n	8004b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a86:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d11c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a9e:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d001      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e1c7      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4937      	ldr	r1, [pc, #220]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ad6:	e03a      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ae0:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7ff f883 	bl	8003bf0 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aee:	f7ff f87f 	bl	8003bf0 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1a8      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b00:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4925      	ldr	r1, [pc, #148]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	e015      	b.n	8004b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCC_OscConfig+0x244>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7ff f862 	bl	8003bf0 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b30:	f7ff f85e 	bl	8003bf0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e187      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b42:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d036      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7ff f842 	bl	8003bf0 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b70:	f7ff f83e 	bl	8003bf0 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e167      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x200>
 8004b8e:	e01b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_RCC_OscConfig+0x248>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b96:	f7ff f82b 	bl	8003bf0 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b9c:	e00e      	b.n	8004bbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7ff f827 	bl	8003bf0 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d907      	bls.n	8004bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e150      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	42470000 	.word	0x42470000
 8004bb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	4b88      	ldr	r3, [pc, #544]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ea      	bne.n	8004b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8097 	beq.w	8004d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bda:	4b81      	ldr	r3, [pc, #516]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10f      	bne.n	8004c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	4b7d      	ldr	r3, [pc, #500]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf6:	4b7a      	ldr	r3, [pc, #488]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c06:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d118      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c12:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1e:	f7fe ffe7 	bl	8003bf0 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c26:	f7fe ffe3 	bl	8003bf0 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e10c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_OscConfig+0x474>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x2ea>
 8004c4c:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a63      	ldr	r2, [pc, #396]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x30c>
 8004c62:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a5e      	ldr	r2, [pc, #376]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a5b      	ldr	r2, [pc, #364]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0x324>
 8004c7c:	4b58      	ldr	r3, [pc, #352]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a57      	ldr	r2, [pc, #348]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
 8004c88:	4b55      	ldr	r3, [pc, #340]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a54      	ldr	r2, [pc, #336]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fe ffa8 	bl	8003bf0 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fe ffa4 	bl	8003bf0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0cb      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0ee      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x334>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc8:	f7fe ff92 	bl	8003bf0 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd0:	f7fe ff8e 	bl	8003bf0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e0b5      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1ee      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d105      	bne.n	8004d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80a1 	beq.w	8004e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d0e:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d05c      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d141      	bne.n	8004da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d22:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d28:	f7fe ff62 	bl	8003bf0 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fe ff5e 	bl	8003bf0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e087      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d42:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	019b      	lsls	r3, r3, #6
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	085b      	lsrs	r3, r3, #1
 8004d66:	3b01      	subs	r3, #1
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	491b      	ldr	r1, [pc, #108]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fe ff37 	bl	8003bf0 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fe ff33 	bl	8003bf0 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e05c      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x416>
 8004da4:	e054      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCC_OscConfig+0x478>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dac:	f7fe ff20 	bl	8003bf0 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db4:	f7fe ff1c 	bl	8003bf0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e045      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x444>
 8004dd2:	e03d      	b.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e038      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40007000 	.word	0x40007000
 8004de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCC_OscConfig+0x4ec>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d028      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d121      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d11a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d111      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d107      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023800 	.word	0x40023800

08004e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0cc      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e74:	4b68      	ldr	r3, [pc, #416]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d90c      	bls.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b65      	ldr	r3, [pc, #404]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0b8      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d020      	beq.n	8004eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ebe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a52      	ldr	r2, [pc, #328]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed8:	4b50      	ldr	r3, [pc, #320]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	494d      	ldr	r1, [pc, #308]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d044      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d119      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d003      	beq.n	8004f1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b3f      	ldr	r3, [pc, #252]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2e:	4b3b      	ldr	r3, [pc, #236]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e067      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f3e:	4b37      	ldr	r3, [pc, #220]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f023 0203 	bic.w	r2, r3, #3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4934      	ldr	r1, [pc, #208]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f50:	f7fe fe4e 	bl	8003bf0 <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f58:	f7fe fe4a 	bl	8003bf0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e04f      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 020c 	and.w	r2, r3, #12
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d1eb      	bne.n	8004f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20c      	bcs.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f96:	4b20      	ldr	r3, [pc, #128]	; (8005018 <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e032      	b.n	800500e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4916      	ldr	r1, [pc, #88]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	490e      	ldr	r1, [pc, #56]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fe6:	f000 f821 	bl	800502c <HAL_RCC_GetSysClockFreq>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	490a      	ldr	r1, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	5ccb      	ldrb	r3, [r1, r3]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005002:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe fbea 	bl	80037e0 <HAL_InitTick>

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40023c00 	.word	0x40023c00
 800501c:	40023800 	.word	0x40023800
 8005020:	0800e0b0 	.word	0x0800e0b0
 8005024:	20000004 	.word	0x20000004
 8005028:	20000008 	.word	0x20000008

0800502c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800502c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005030:	b094      	sub	sp, #80	; 0x50
 8005032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005044:	4b79      	ldr	r3, [pc, #484]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	2b08      	cmp	r3, #8
 800504e:	d00d      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x40>
 8005050:	2b08      	cmp	r3, #8
 8005052:	f200 80e1 	bhi.w	8005218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_RCC_GetSysClockFreq+0x34>
 800505a:	2b04      	cmp	r3, #4
 800505c:	d003      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x3a>
 800505e:	e0db      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005060:	4b73      	ldr	r3, [pc, #460]	; (8005230 <HAL_RCC_GetSysClockFreq+0x204>)
 8005062:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005064:	e0db      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005066:	4b73      	ldr	r3, [pc, #460]	; (8005234 <HAL_RCC_GetSysClockFreq+0x208>)
 8005068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800506a:	e0d8      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800506c:	4b6f      	ldr	r3, [pc, #444]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005076:	4b6d      	ldr	r3, [pc, #436]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d063      	beq.n	800514a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005082:	4b6a      	ldr	r3, [pc, #424]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	2200      	movs	r2, #0
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
 800508c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005094:	633b      	str	r3, [r7, #48]	; 0x30
 8005096:	2300      	movs	r3, #0
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
 800509a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800509e:	4622      	mov	r2, r4
 80050a0:	462b      	mov	r3, r5
 80050a2:	f04f 0000 	mov.w	r0, #0
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	0159      	lsls	r1, r3, #5
 80050ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b0:	0150      	lsls	r0, r2, #5
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4621      	mov	r1, r4
 80050b8:	1a51      	subs	r1, r2, r1
 80050ba:	6139      	str	r1, [r7, #16]
 80050bc:	4629      	mov	r1, r5
 80050be:	eb63 0301 	sbc.w	r3, r3, r1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d0:	4659      	mov	r1, fp
 80050d2:	018b      	lsls	r3, r1, #6
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050da:	4651      	mov	r1, sl
 80050dc:	018a      	lsls	r2, r1, #6
 80050de:	4651      	mov	r1, sl
 80050e0:	ebb2 0801 	subs.w	r8, r2, r1
 80050e4:	4659      	mov	r1, fp
 80050e6:	eb63 0901 	sbc.w	r9, r3, r1
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050fe:	4690      	mov	r8, r2
 8005100:	4699      	mov	r9, r3
 8005102:	4623      	mov	r3, r4
 8005104:	eb18 0303 	adds.w	r3, r8, r3
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	462b      	mov	r3, r5
 800510c:	eb49 0303 	adc.w	r3, r9, r3
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800511e:	4629      	mov	r1, r5
 8005120:	024b      	lsls	r3, r1, #9
 8005122:	4621      	mov	r1, r4
 8005124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005128:	4621      	mov	r1, r4
 800512a:	024a      	lsls	r2, r1, #9
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005132:	2200      	movs	r2, #0
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
 8005136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513c:	f7fb fda4 	bl	8000c88 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005148:	e058      	b.n	80051fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b38      	ldr	r3, [pc, #224]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	2200      	movs	r2, #0
 8005152:	4618      	mov	r0, r3
 8005154:	4611      	mov	r1, r2
 8005156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
 8005160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005164:	4642      	mov	r2, r8
 8005166:	464b      	mov	r3, r9
 8005168:	f04f 0000 	mov.w	r0, #0
 800516c:	f04f 0100 	mov.w	r1, #0
 8005170:	0159      	lsls	r1, r3, #5
 8005172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005176:	0150      	lsls	r0, r2, #5
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4641      	mov	r1, r8
 800517e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005182:	4649      	mov	r1, r9
 8005184:	eb63 0b01 	sbc.w	fp, r3, r1
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800519c:	ebb2 040a 	subs.w	r4, r2, sl
 80051a0:	eb63 050b 	sbc.w	r5, r3, fp
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	00eb      	lsls	r3, r5, #3
 80051ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051b2:	00e2      	lsls	r2, r4, #3
 80051b4:	4614      	mov	r4, r2
 80051b6:	461d      	mov	r5, r3
 80051b8:	4643      	mov	r3, r8
 80051ba:	18e3      	adds	r3, r4, r3
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	464b      	mov	r3, r9
 80051c0:	eb45 0303 	adc.w	r3, r5, r3
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051d2:	4629      	mov	r1, r5
 80051d4:	028b      	lsls	r3, r1, #10
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051dc:	4621      	mov	r1, r4
 80051de:	028a      	lsls	r2, r1, #10
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	2200      	movs	r2, #0
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	61fa      	str	r2, [r7, #28]
 80051ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f0:	f7fb fd4a 	bl	8000c88 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_RCC_GetSysClockFreq+0x200>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	3301      	adds	r3, #1
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800520c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800520e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005216:	e002      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <HAL_RCC_GetSysClockFreq+0x204>)
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800521c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005220:	4618      	mov	r0, r3
 8005222:	3750      	adds	r7, #80	; 0x50
 8005224:	46bd      	mov	sp, r7
 8005226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	00f42400 	.word	0x00f42400
 8005234:	007a1200 	.word	0x007a1200

08005238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <HAL_RCC_GetHCLKFreq+0x14>)
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	20000004 	.word	0x20000004

08005250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005254:	f7ff fff0 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	0a9b      	lsrs	r3, r3, #10
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4903      	ldr	r1, [pc, #12]	; (8005274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40023800 	.word	0x40023800
 8005274:	0800e0c0 	.word	0x0800e0c0

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800527c:	f7ff ffdc 	bl	8005238 <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0b5b      	lsrs	r3, r3, #13
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	; (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	0800e0c0 	.word	0x0800e0c0

080052a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	220f      	movs	r2, #15
 80052ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_GetClockConfig+0x5c>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0203 	and.w	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_RCC_GetClockConfig+0x5c>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_RCC_GetClockConfig+0x5c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_RCC_GetClockConfig+0x5c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <HAL_RCC_GetClockConfig+0x60>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0207 	and.w	r2, r3, #7
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
 8005300:	40023c00 	.word	0x40023c00

08005304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e041      	b.n	800539a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fe f922 	bl	8003574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fd8c 	bl	8005e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d001      	beq.n	80053bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e04e      	b.n	800545a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a23      	ldr	r2, [pc, #140]	; (8005468 <HAL_TIM_Base_Start_IT+0xc4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d01d      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <HAL_TIM_Base_Start_IT+0xc8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_TIM_Base_Start_IT+0xcc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <HAL_TIM_Base_Start_IT+0xd0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_Base_Start_IT+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_TIM_Base_Start_IT+0xd8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x80>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_TIM_Base_Start_IT+0xdc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d111      	bne.n	8005448 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b06      	cmp	r3, #6
 8005434:	d010      	beq.n	8005458 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0201 	orr.w	r2, r2, #1
 8005444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	e007      	b.n	8005458 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010400 	.word	0x40010400
 800547c:	40014000 	.word	0x40014000
 8005480:	40001800 	.word	0x40001800

08005484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e041      	b.n	800551a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd fffe 	bl	80034ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f000 fccc 	bl	8005e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_TIM_PWM_Start+0x24>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e022      	b.n	800558e <HAL_TIM_PWM_Start+0x6a>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d109      	bne.n	8005562 <HAL_TIM_PWM_Start+0x3e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	bf14      	ite	ne
 800555a:	2301      	movne	r3, #1
 800555c:	2300      	moveq	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e015      	b.n	800558e <HAL_TIM_PWM_Start+0x6a>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d109      	bne.n	800557c <HAL_TIM_PWM_Start+0x58>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e008      	b.n	800558e <HAL_TIM_PWM_Start+0x6a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e07c      	b.n	8005690 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x82>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a4:	e013      	b.n	80055ce <HAL_TIM_PWM_Start+0xaa>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0x92>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055b4:	e00b      	b.n	80055ce <HAL_TIM_PWM_Start+0xaa>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c4:	e003      	b.n	80055ce <HAL_TIM_PWM_Start+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 ff38 	bl	800644c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <HAL_TIM_PWM_Start+0x174>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_PWM_Start+0xcc>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <HAL_TIM_PWM_Start+0x178>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_PWM_Start+0xd0>
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_PWM_Start+0xd2>
 80055f4:	2300      	movs	r3, #0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a22      	ldr	r2, [pc, #136]	; (8005698 <HAL_TIM_PWM_Start+0x174>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561c:	d01d      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <HAL_TIM_PWM_Start+0x17c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_TIM_PWM_Start+0x180>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1c      	ldr	r2, [pc, #112]	; (80056a8 <HAL_TIM_PWM_Start+0x184>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <HAL_TIM_PWM_Start+0x178>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_TIM_PWM_Start+0x188>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIM_PWM_Start+0x136>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a16      	ldr	r2, [pc, #88]	; (80056b0 <HAL_TIM_PWM_Start+0x18c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d111      	bne.n	800567e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b06      	cmp	r3, #6
 800566a:	d010      	beq.n	800568e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567c:	e007      	b.n	800568e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40010000 	.word	0x40010000
 800569c:	40010400 	.word	0x40010400
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40001800 	.word	0x40001800

080056b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e097      	b.n	80057f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fd fdd9 	bl	8003294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f000 fba9 	bl	8005e60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	4313      	orrs	r3, r2
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005754:	f023 030c 	bic.w	r3, r3, #12
 8005758:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	4313      	orrs	r3, r2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	011a      	lsls	r2, r3, #4
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	031b      	lsls	r3, r3, #12
 8005784:	4313      	orrs	r3, r2
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	4313      	orrs	r3, r2
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005810:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005818:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005820:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005828:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d110      	bne.n	8005852 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005836:	7b7b      	ldrb	r3, [r7, #13]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d001      	beq.n	8005840 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e069      	b.n	8005914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005850:	e031      	b.n	80058b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b04      	cmp	r3, #4
 8005856:	d110      	bne.n	800587a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d102      	bne.n	8005864 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800585e:	7b3b      	ldrb	r3, [r7, #12]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e055      	b.n	8005914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005878:	e01d      	b.n	80058b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d108      	bne.n	8005892 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d105      	bne.n	8005892 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005886:	7b7b      	ldrb	r3, [r7, #13]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d102      	bne.n	8005892 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800588c:	7b3b      	ldrb	r3, [r7, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d001      	beq.n	8005896 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e03e      	b.n	8005914 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_TIM_Encoder_Start+0xc4>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d008      	beq.n	80058d4 <HAL_TIM_Encoder_Start+0xd4>
 80058c2:	e00f      	b.n	80058e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fdbd 	bl	800644c <TIM_CCxChannelCmd>
      break;
 80058d2:	e016      	b.n	8005902 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2201      	movs	r2, #1
 80058da:	2104      	movs	r1, #4
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fdb5 	bl	800644c <TIM_CCxChannelCmd>
      break;
 80058e2:	e00e      	b.n	8005902 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2201      	movs	r2, #1
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fdad 	bl	800644c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	2104      	movs	r1, #4
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fda6 	bl	800644c <TIM_CCxChannelCmd>
      break;
 8005900:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d020      	beq.n	8005980 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0202 	mvn.w	r2, #2
 8005950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa5b 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa4d 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fa5e 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d020      	beq.n	80059cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0204 	mvn.w	r2, #4
 800599c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa35 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 80059b8:	e005      	b.n	80059c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa27 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa38 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d020      	beq.n	8005a18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01b      	beq.n	8005a18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0208 	mvn.w	r2, #8
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2204      	movs	r2, #4
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa0f 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa01 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fa12 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d020      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01b      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f06f 0210 	mvn.w	r2, #16
 8005a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9e9 	bl	8005e22 <HAL_TIM_IC_CaptureCallback>
 8005a50:	e005      	b.n	8005a5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9db 	bl	8005e0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9ec 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0201 	mvn.w	r2, #1
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fd fb6a 	bl	800315c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fdce 	bl	8006648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f9bd 	bl	8005e4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0220 	mvn.w	r2, #32
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fda0 	bl	8006634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0ae      	b.n	8005c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	f200 809f 	bhi.w	8005c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b2a:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b30:	08005b65 	.word	0x08005b65
 8005b34:	08005c69 	.word	0x08005c69
 8005b38:	08005c69 	.word	0x08005c69
 8005b3c:	08005c69 	.word	0x08005c69
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005c69 	.word	0x08005c69
 8005b48:	08005c69 	.word	0x08005c69
 8005b4c:	08005c69 	.word	0x08005c69
 8005b50:	08005be7 	.word	0x08005be7
 8005b54:	08005c69 	.word	0x08005c69
 8005b58:	08005c69 	.word	0x08005c69
 8005b5c:	08005c69 	.word	0x08005c69
 8005b60:	08005c27 	.word	0x08005c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fa24 	bl	8005fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6999      	ldr	r1, [r3, #24]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	619a      	str	r2, [r3, #24]
      break;
 8005ba2:	e064      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fa74 	bl	8006098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	619a      	str	r2, [r3, #24]
      break;
 8005be4:	e043      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fac9 	bl	8006184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0208 	orr.w	r2, r2, #8
 8005c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69da      	ldr	r2, [r3, #28]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0204 	bic.w	r2, r2, #4
 8005c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69d9      	ldr	r1, [r3, #28]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	61da      	str	r2, [r3, #28]
      break;
 8005c24:	e023      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fb1d 	bl	800626c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69da      	ldr	r2, [r3, #28]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69d9      	ldr	r1, [r3, #28]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	021a      	lsls	r2, r3, #8
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	61da      	str	r2, [r3, #28]
      break;
 8005c66:	e002      	b.n	8005c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_ConfigClockSource+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0b4      	b.n	8005e06 <HAL_TIM_ConfigClockSource+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd4:	d03e      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xd4>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cda:	f200 8087 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_TIM_ConfigClockSource+0x172>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cea:	d87f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b70      	cmp	r3, #112	; 0x70
 8005cee:	d01a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0xa6>
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d87b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b60      	cmp	r3, #96	; 0x60
 8005cf6:	d050      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x11a>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	d877      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b50      	cmp	r3, #80	; 0x50
 8005cfe:	d03c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0xfa>
 8005d00:	2b50      	cmp	r3, #80	; 0x50
 8005d02:	d873      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d058      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x13a>
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d86f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b30      	cmp	r3, #48	; 0x30
 8005d0e:	d064      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d86b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d060      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d867      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05c      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d05a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	e062      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	f000 fb69 	bl	800640c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e04f      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	f000 fb52 	bl	800640c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d76:	609a      	str	r2, [r3, #8]
      break;
 8005d78:	e03c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fac6 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2150      	movs	r1, #80	; 0x50
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fb1f 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e02c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 fae5 	bl	8006376 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2160      	movs	r1, #96	; 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fb0f 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e01c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 faa6 	bl	8006318 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2140      	movs	r1, #64	; 0x40
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 faff 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 faf6 	bl	80063d6 <TIM_ITRx_SetConfig>
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
	...

08005e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a46      	ldr	r2, [pc, #280]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7e:	d00f      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a43      	ldr	r2, [pc, #268]	; (8005f90 <TIM_Base_SetConfig+0x130>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00b      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a42      	ldr	r2, [pc, #264]	; (8005f94 <TIM_Base_SetConfig+0x134>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d007      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a41      	ldr	r2, [pc, #260]	; (8005f98 <TIM_Base_SetConfig+0x138>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <TIM_Base_SetConfig+0x13c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d108      	bne.n	8005eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a35      	ldr	r2, [pc, #212]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d02b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d027      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a32      	ldr	r2, [pc, #200]	; (8005f90 <TIM_Base_SetConfig+0x130>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d023      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a31      	ldr	r2, [pc, #196]	; (8005f94 <TIM_Base_SetConfig+0x134>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d01f      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a30      	ldr	r2, [pc, #192]	; (8005f98 <TIM_Base_SetConfig+0x138>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <TIM_Base_SetConfig+0x13c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d017      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <TIM_Base_SetConfig+0x140>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <TIM_Base_SetConfig+0x144>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2c      	ldr	r2, [pc, #176]	; (8005fa8 <TIM_Base_SetConfig+0x148>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <TIM_Base_SetConfig+0x14c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a2a      	ldr	r2, [pc, #168]	; (8005fb0 <TIM_Base_SetConfig+0x150>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a29      	ldr	r2, [pc, #164]	; (8005fb4 <TIM_Base_SetConfig+0x154>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a10      	ldr	r2, [pc, #64]	; (8005f8c <TIM_Base_SetConfig+0x12c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_Base_SetConfig+0xf8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a12      	ldr	r2, [pc, #72]	; (8005f9c <TIM_Base_SetConfig+0x13c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d103      	bne.n	8005f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d105      	bne.n	8005f7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f023 0201 	bic.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]
  }
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40010400 	.word	0x40010400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40014400 	.word	0x40014400
 8005fa8:	40014800 	.word	0x40014800
 8005fac:	40001800 	.word	0x40001800
 8005fb0:	40001c00 	.word	0x40001c00
 8005fb4:	40002000 	.word	0x40002000

08005fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f023 0201 	bic.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a20      	ldr	r2, [pc, #128]	; (8006090 <TIM_OC1_SetConfig+0xd8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d003      	beq.n	800601c <TIM_OC1_SetConfig+0x64>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <TIM_OC1_SetConfig+0xdc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d10c      	bne.n	8006036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 0308 	bic.w	r3, r3, #8
 8006022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <TIM_OC1_SetConfig+0xd8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC1_SetConfig+0x8e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <TIM_OC1_SetConfig+0xdc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d111      	bne.n	800606a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800604c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40010000 	.word	0x40010000
 8006094:	40010400 	.word	0x40010400

08006098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 0210 	bic.w	r2, r3, #16
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0320 	bic.w	r3, r3, #32
 80060e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a22      	ldr	r2, [pc, #136]	; (800617c <TIM_OC2_SetConfig+0xe4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_OC2_SetConfig+0x68>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <TIM_OC2_SetConfig+0xe8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10d      	bne.n	800611c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <TIM_OC2_SetConfig+0xe4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC2_SetConfig+0x94>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <TIM_OC2_SetConfig+0xe8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d113      	bne.n	8006154 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800613a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400

08006184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a21      	ldr	r2, [pc, #132]	; (8006264 <TIM_OC3_SetConfig+0xe0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d003      	beq.n	80061ea <TIM_OC3_SetConfig+0x66>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a20      	ldr	r2, [pc, #128]	; (8006268 <TIM_OC3_SetConfig+0xe4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d10d      	bne.n	8006206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a16      	ldr	r2, [pc, #88]	; (8006264 <TIM_OC3_SetConfig+0xe0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC3_SetConfig+0x92>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_OC3_SetConfig+0xe4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d113      	bne.n	800623e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	621a      	str	r2, [r3, #32]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400

0800626c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	031b      	lsls	r3, r3, #12
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a12      	ldr	r2, [pc, #72]	; (8006310 <TIM_OC4_SetConfig+0xa4>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d003      	beq.n	80062d4 <TIM_OC4_SetConfig+0x68>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a11      	ldr	r2, [pc, #68]	; (8006314 <TIM_OC4_SetConfig+0xa8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d109      	bne.n	80062e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	019b      	lsls	r3, r3, #6
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40010000 	.word	0x40010000
 8006314:	40010400 	.word	0x40010400

08006318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f023 030a 	bic.w	r3, r3, #10
 8006354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	621a      	str	r2, [r3, #32]
}
 800636a:	bf00      	nop
 800636c:	371c      	adds	r7, #28
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006376:	b480      	push	{r7}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f023 0210 	bic.w	r2, r3, #16
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	031b      	lsls	r3, r3, #12
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f043 0307 	orr.w	r3, r3, #7
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	021a      	lsls	r2, r3, #8
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	431a      	orrs	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4313      	orrs	r3, r2
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	2201      	movs	r2, #1
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	43db      	mvns	r3, r3
 800646e:	401a      	ands	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	431a      	orrs	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
	...

08006498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e05a      	b.n	8006566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a21      	ldr	r2, [pc, #132]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d022      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fc:	d01d      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d018      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d00e      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	; (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d009      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d004      	beq.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d10c      	bne.n	8006554 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40001800 	.word	0x40001800

08006590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e03d      	b.n	8006628 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e042      	b.n	80066f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fd f82a 	bl	80036dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2224      	movs	r2, #36	; 0x24
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fed7 	bl	8007454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691a      	ldr	r2, [r3, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695a      	ldr	r2, [r3, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b20      	cmp	r3, #32
 8006714:	d121      	bne.n	800675a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_UART_Transmit_IT+0x26>
 800671c:	88fb      	ldrh	r3, [r7, #6]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01a      	b.n	800675c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	88fa      	ldrh	r2, [r7, #6]
 8006730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2221      	movs	r2, #33	; 0x21
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006754:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	; 0x30
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b20      	cmp	r3, #32
 8006780:	d14a      	bne.n	8006818 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006788:	88fb      	ldrh	r3, [r7, #6]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e043      	b.n	800681a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	461a      	mov	r2, r3
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fbf5 	bl	8006f94 <UART_Start_Receive_DMA>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80067b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d12c      	bne.n	8006812 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d125      	bne.n	800680c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067c0:	2300      	movs	r3, #0
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	617b      	str	r3, [r7, #20]
   return(result);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f043 0310 	orr.w	r3, r3, #16
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f6:	627a      	str	r2, [r7, #36]	; 0x24
 80067f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6a39      	ldr	r1, [r7, #32]
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	61fb      	str	r3, [r7, #28]
   return(result);
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800680a:	e002      	b.n	8006812 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006816:	e000      	b.n	800681a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3730      	adds	r7, #48	; 0x30
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b0ba      	sub	sp, #232	; 0xe8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800684a:	2300      	movs	r3, #0
 800684c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10f      	bne.n	800688a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <HAL_UART_IRQHandler+0x66>
 8006876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fd27 	bl	80072d6 <UART_Receive_IT>
      return;
 8006888:	e25b      	b.n	8006d42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800688a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80de 	beq.w	8006a50 <HAL_UART_IRQHandler+0x22c>
 8006894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80d1 	beq.w	8006a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xae>
 80068ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ca:	f043 0201 	orr.w	r2, r3, #1
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_UART_IRQHandler+0xd2>
 80068de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	f043 0202 	orr.w	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_UART_IRQHandler+0xf6>
 8006902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f043 0204 	orr.w	r2, r3, #4
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800691a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <HAL_UART_IRQHandler+0x126>
 8006926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	f043 0208 	orr.w	r2, r3, #8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 81f2 	beq.w	8006d38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <HAL_UART_IRQHandler+0x14e>
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fcb2 	bl	80072d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_UART_IRQHandler+0x17a>
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04f      	beq.n	8006a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fbba 	bl	8007118 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	d141      	bne.n	8006a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1d9      	bne.n	80069b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d013      	beq.n	8006a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	4a7e      	ldr	r2, [pc, #504]	; (8006c04 <HAL_UART_IRQHandler+0x3e0>)
 8006a0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd fb6c 	bl	80040f0 <HAL_DMA_Abort_IT>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d016      	beq.n	8006a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	e00e      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9a8 	bl	8006d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a34:	e00a      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9a4 	bl	8006d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3c:	e006      	b.n	8006a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9a0 	bl	8006d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006a4a:	e175      	b.n	8006d38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	bf00      	nop
    return;
 8006a4e:	e173      	b.n	8006d38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	f040 814f 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8148 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8141 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	f040 80b6 	bne.w	8006c08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8145 	beq.w	8006d3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aba:	429a      	cmp	r2, r3
 8006abc:	f080 813e 	bcs.w	8006d3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ac6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad2:	f000 8088 	beq.w	8006be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	330c      	adds	r3, #12
 8006afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1d9      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3314      	adds	r3, #20
 8006b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2c:	e853 3f00 	ldrex	r3, [r3]
 8006b30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b34:	f023 0301 	bic.w	r3, r3, #1
 8006b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e1      	bne.n	8006b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e3      	bne.n	8006b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e3      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fd fa15 	bl	8004010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fa ff07 	bl	8001a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c02:	e09b      	b.n	8006d3c <HAL_UART_IRQHandler+0x518>
 8006c04:	080071df 	.word	0x080071df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 808e 	beq.w	8006d40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8089 	beq.w	8006d40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c52:	647a      	str	r2, [r7, #68]	; 0x44
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e3      	bne.n	8006c2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	623b      	str	r3, [r7, #32]
   return(result);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0310 	bic.w	r3, r3, #16
 8006cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cd0:	61fa      	str	r2, [r7, #28]
 8006cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fa fe8d 	bl	8001a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cf6:	e023      	b.n	8006d40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d009      	beq.n	8006d18 <HAL_UART_IRQHandler+0x4f4>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fa78 	bl	8007206 <UART_Transmit_IT>
    return;
 8006d16:	e014      	b.n	8006d42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00e      	beq.n	8006d42 <HAL_UART_IRQHandler+0x51e>
 8006d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fab8 	bl	80072a6 <UART_EndTransmit_IT>
    return;
 8006d36:	e004      	b.n	8006d42 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d38:	bf00      	nop
 8006d3a:	e002      	b.n	8006d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d40:	bf00      	nop
  }
}
 8006d42:	37e8      	adds	r7, #232	; 0xe8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b09c      	sub	sp, #112	; 0x70
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d172      	bne.n	8006e9a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	2200      	movs	r2, #0
 8006db8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ddc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	f023 0301 	bic.w	r3, r3, #1
 8006e04:	667b      	str	r3, [r7, #100]	; 0x64
 8006e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e0e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e5      	bne.n	8006dee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3314      	adds	r3, #20
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	623b      	str	r3, [r7, #32]
   return(result);
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e38:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e42:	633a      	str	r2, [r7, #48]	; 0x30
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e5      	bne.n	8006e22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d119      	bne.n	8006e9a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0310 	bic.w	r3, r3, #16
 8006e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e86:	61fa      	str	r2, [r7, #28]
 8006e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69b9      	ldr	r1, [r7, #24]
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	617b      	str	r3, [r7, #20]
   return(result);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d106      	bne.n	8006eb6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eac:	4619      	mov	r1, r3
 8006eae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006eb0:	f7fa fdae 	bl	8001a10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eb4:	e002      	b.n	8006ebc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006eb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006eb8:	f7ff ff50 	bl	8006d5c <HAL_UART_RxCpltCallback>
}
 8006ebc:	bf00      	nop
 8006ebe:	3770      	adds	r7, #112	; 0x70
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d108      	bne.n	8006ef2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7fa fd90 	bl	8001a10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ef0:	e002      	b.n	8006ef8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff ff3c 	bl	8006d70 <HAL_UART_RxHalfCpltCallback>
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b21      	cmp	r3, #33	; 0x21
 8006f32:	d108      	bne.n	8006f46 <UART_DMAError+0x46>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f40:	68b8      	ldr	r0, [r7, #8]
 8006f42:	f000 f8c1 	bl	80070c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b22      	cmp	r3, #34	; 0x22
 8006f66:	d108      	bne.n	8006f7a <UART_DMAError+0x7a>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f000 f8cf 	bl	8007118 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f043 0210 	orr.w	r2, r3, #16
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f86:	68b8      	ldr	r0, [r7, #8]
 8006f88:	f7ff fefc 	bl	8006d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b098      	sub	sp, #96	; 0x60
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2222      	movs	r2, #34	; 0x22
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc0:	4a3e      	ldr	r2, [pc, #248]	; (80070bc <UART_Start_Receive_DMA+0x128>)
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	4a3d      	ldr	r2, [pc, #244]	; (80070c0 <UART_Start_Receive_DMA+0x12c>)
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	4a3c      	ldr	r2, [pc, #240]	; (80070c4 <UART_Start_Receive_DMA+0x130>)
 8006fd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd8:	2200      	movs	r2, #0
 8006fda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	f7fc ffb4 	bl	8003f60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d019      	beq.n	800704a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702c:	65bb      	str	r3, [r7, #88]	; 0x58
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007036:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007038:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800703c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	f043 0301 	orr.w	r3, r3, #1
 8007060:	657b      	str	r3, [r7, #84]	; 0x54
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800706a:	63ba      	str	r2, [r7, #56]	; 0x38
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3314      	adds	r3, #20
 8007084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	617b      	str	r3, [r7, #20]
   return(result);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	653b      	str	r3, [r7, #80]	; 0x50
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3314      	adds	r3, #20
 800709c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800709e:	627a      	str	r2, [r7, #36]	; 0x24
 80070a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	6a39      	ldr	r1, [r7, #32]
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e5      	bne.n	800707e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3760      	adds	r7, #96	; 0x60
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	08006d99 	.word	0x08006d99
 80070c0:	08006ec5 	.word	0x08006ec5
 80070c4:	08006f01 	.word	0x08006f01

080070c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b089      	sub	sp, #36	; 0x24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	61ba      	str	r2, [r7, #24]
 80070f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6979      	ldr	r1, [r7, #20]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	613b      	str	r3, [r7, #16]
   return(result);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800710c:	bf00      	nop
 800710e:	3724      	adds	r7, #36	; 0x24
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b095      	sub	sp, #84	; 0x54
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007140:	643a      	str	r2, [r7, #64]	; 0x40
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	61fb      	str	r3, [r7, #28]
   return(result);
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	64bb      	str	r3, [r7, #72]	; 0x48
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800717a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	d119      	bne.n	80071c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	330c      	adds	r3, #12
 8007196:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	60bb      	str	r3, [r7, #8]
   return(result);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	647b      	str	r3, [r7, #68]	; 0x44
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b0:	61ba      	str	r2, [r7, #24]
 80071b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6979      	ldr	r1, [r7, #20]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	613b      	str	r3, [r7, #16]
   return(result);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e5      	bne.n	8007190 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071d2:	bf00      	nop
 80071d4:	3754      	adds	r7, #84	; 0x54
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f7ff fdc3 	bl	8006d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b21      	cmp	r3, #33	; 0x21
 8007218:	d13e      	bne.n	8007298 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d114      	bne.n	800724e <UART_Transmit_IT+0x48>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d110      	bne.n	800724e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007240:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	1c9a      	adds	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	621a      	str	r2, [r3, #32]
 800724c:	e008      	b.n	8007260 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6211      	str	r1, [r2, #32]
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29b      	uxth	r3, r3
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	4619      	mov	r1, r3
 800726e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007282:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007292:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	e000      	b.n	800729a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
  }
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fd3e 	bl	8006d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b08c      	sub	sp, #48	; 0x30
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	f040 80ae 	bne.w	8007448 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f4:	d117      	bne.n	8007326 <UART_Receive_IT+0x50>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d113      	bne.n	8007326 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b29b      	uxth	r3, r3
 8007310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007314:	b29a      	uxth	r2, r3
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731e:	1c9a      	adds	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
 8007324:	e026      	b.n	8007374 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d007      	beq.n	800734a <UART_Receive_IT+0x74>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <UART_Receive_IT+0x82>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e008      	b.n	800736a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007364:	b2da      	uxtb	r2, r3
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29b      	uxth	r3, r3
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	4619      	mov	r1, r3
 8007382:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007384:	2b00      	cmp	r3, #0
 8007386:	d15d      	bne.n	8007444 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0220 	bic.w	r2, r2, #32
 8007396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d135      	bne.n	800743a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	613b      	str	r3, [r7, #16]
   return(result);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f023 0310 	bic.w	r3, r3, #16
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f4:	623a      	str	r2, [r7, #32]
 80073f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	69f9      	ldr	r1, [r7, #28]
 80073fa:	6a3a      	ldr	r2, [r7, #32]
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	61bb      	str	r3, [r7, #24]
   return(result);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e5      	bne.n	80073d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b10      	cmp	r3, #16
 8007414:	d10a      	bne.n	800742c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fa faec 	bl	8001a10 <HAL_UARTEx_RxEventCallback>
 8007438:	e002      	b.n	8007440 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fc8e 	bl	8006d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e002      	b.n	800744a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3730      	adds	r7, #48	; 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007458:	b0c0      	sub	sp, #256	; 0x100
 800745a:	af00      	add	r7, sp, #0
 800745c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007470:	68d9      	ldr	r1, [r3, #12]
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	ea40 0301 	orr.w	r3, r0, r1
 800747c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	431a      	orrs	r2, r3
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	431a      	orrs	r2, r3
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	4313      	orrs	r3, r2
 800749c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074ac:	f021 010c 	bic.w	r1, r1, #12
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074ba:	430b      	orrs	r3, r1
 80074bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ce:	6999      	ldr	r1, [r3, #24]
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	ea40 0301 	orr.w	r3, r0, r1
 80074da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b8f      	ldr	r3, [pc, #572]	; (8007720 <UART_SetConfig+0x2cc>)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d005      	beq.n	80074f4 <UART_SetConfig+0xa0>
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b8d      	ldr	r3, [pc, #564]	; (8007724 <UART_SetConfig+0x2d0>)
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d104      	bne.n	80074fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074f4:	f7fd fec0 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 80074f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074fc:	e003      	b.n	8007506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074fe:	f7fd fea7 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8007502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007510:	f040 810c 	bne.w	800772c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007518:	2200      	movs	r2, #0
 800751a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800751e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007526:	4622      	mov	r2, r4
 8007528:	462b      	mov	r3, r5
 800752a:	1891      	adds	r1, r2, r2
 800752c:	65b9      	str	r1, [r7, #88]	; 0x58
 800752e:	415b      	adcs	r3, r3
 8007530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007536:	4621      	mov	r1, r4
 8007538:	eb12 0801 	adds.w	r8, r2, r1
 800753c:	4629      	mov	r1, r5
 800753e:	eb43 0901 	adc.w	r9, r3, r1
 8007542:	f04f 0200 	mov.w	r2, #0
 8007546:	f04f 0300 	mov.w	r3, #0
 800754a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800754e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007556:	4690      	mov	r8, r2
 8007558:	4699      	mov	r9, r3
 800755a:	4623      	mov	r3, r4
 800755c:	eb18 0303 	adds.w	r3, r8, r3
 8007560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007564:	462b      	mov	r3, r5
 8007566:	eb49 0303 	adc.w	r3, r9, r3
 800756a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800757a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800757e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007582:	460b      	mov	r3, r1
 8007584:	18db      	adds	r3, r3, r3
 8007586:	653b      	str	r3, [r7, #80]	; 0x50
 8007588:	4613      	mov	r3, r2
 800758a:	eb42 0303 	adc.w	r3, r2, r3
 800758e:	657b      	str	r3, [r7, #84]	; 0x54
 8007590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007598:	f7f9 fb76 	bl	8000c88 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4b61      	ldr	r3, [pc, #388]	; (8007728 <UART_SetConfig+0x2d4>)
 80075a2:	fba3 2302 	umull	r2, r3, r3, r2
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	011c      	lsls	r4, r3, #4
 80075aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075bc:	4642      	mov	r2, r8
 80075be:	464b      	mov	r3, r9
 80075c0:	1891      	adds	r1, r2, r2
 80075c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80075c4:	415b      	adcs	r3, r3
 80075c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075cc:	4641      	mov	r1, r8
 80075ce:	eb12 0a01 	adds.w	sl, r2, r1
 80075d2:	4649      	mov	r1, r9
 80075d4:	eb43 0b01 	adc.w	fp, r3, r1
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075ec:	4692      	mov	sl, r2
 80075ee:	469b      	mov	fp, r3
 80075f0:	4643      	mov	r3, r8
 80075f2:	eb1a 0303 	adds.w	r3, sl, r3
 80075f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075fa:	464b      	mov	r3, r9
 80075fc:	eb4b 0303 	adc.w	r3, fp, r3
 8007600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007618:	460b      	mov	r3, r1
 800761a:	18db      	adds	r3, r3, r3
 800761c:	643b      	str	r3, [r7, #64]	; 0x40
 800761e:	4613      	mov	r3, r2
 8007620:	eb42 0303 	adc.w	r3, r2, r3
 8007624:	647b      	str	r3, [r7, #68]	; 0x44
 8007626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800762a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800762e:	f7f9 fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4611      	mov	r1, r2
 8007638:	4b3b      	ldr	r3, [pc, #236]	; (8007728 <UART_SetConfig+0x2d4>)
 800763a:	fba3 2301 	umull	r2, r3, r3, r1
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	2264      	movs	r2, #100	; 0x64
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	1acb      	subs	r3, r1, r3
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800764e:	4b36      	ldr	r3, [pc, #216]	; (8007728 <UART_SetConfig+0x2d4>)
 8007650:	fba3 2302 	umull	r2, r3, r3, r2
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800765c:	441c      	add	r4, r3
 800765e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007662:	2200      	movs	r2, #0
 8007664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800766c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007670:	4642      	mov	r2, r8
 8007672:	464b      	mov	r3, r9
 8007674:	1891      	adds	r1, r2, r2
 8007676:	63b9      	str	r1, [r7, #56]	; 0x38
 8007678:	415b      	adcs	r3, r3
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007680:	4641      	mov	r1, r8
 8007682:	1851      	adds	r1, r2, r1
 8007684:	6339      	str	r1, [r7, #48]	; 0x30
 8007686:	4649      	mov	r1, r9
 8007688:	414b      	adcs	r3, r1
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	f04f 0300 	mov.w	r3, #0
 8007694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007698:	4659      	mov	r1, fp
 800769a:	00cb      	lsls	r3, r1, #3
 800769c:	4651      	mov	r1, sl
 800769e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076a2:	4651      	mov	r1, sl
 80076a4:	00ca      	lsls	r2, r1, #3
 80076a6:	4610      	mov	r0, r2
 80076a8:	4619      	mov	r1, r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	4642      	mov	r2, r8
 80076ae:	189b      	adds	r3, r3, r2
 80076b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076b4:	464b      	mov	r3, r9
 80076b6:	460a      	mov	r2, r1
 80076b8:	eb42 0303 	adc.w	r3, r2, r3
 80076bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076d4:	460b      	mov	r3, r1
 80076d6:	18db      	adds	r3, r3, r3
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076da:	4613      	mov	r3, r2
 80076dc:	eb42 0303 	adc.w	r3, r2, r3
 80076e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076ea:	f7f9 facd 	bl	8000c88 <__aeabi_uldivmod>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <UART_SetConfig+0x2d4>)
 80076f4:	fba3 1302 	umull	r1, r3, r3, r2
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	2164      	movs	r1, #100	; 0x64
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	3332      	adds	r3, #50	; 0x32
 8007706:	4a08      	ldr	r2, [pc, #32]	; (8007728 <UART_SetConfig+0x2d4>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0207 	and.w	r2, r3, #7
 8007712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4422      	add	r2, r4
 800771a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800771c:	e106      	b.n	800792c <UART_SetConfig+0x4d8>
 800771e:	bf00      	nop
 8007720:	40011000 	.word	0x40011000
 8007724:	40011400 	.word	0x40011400
 8007728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800772c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007730:	2200      	movs	r2, #0
 8007732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800773a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	1891      	adds	r1, r2, r2
 8007744:	6239      	str	r1, [r7, #32]
 8007746:	415b      	adcs	r3, r3
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
 800774a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800774e:	4641      	mov	r1, r8
 8007750:	1854      	adds	r4, r2, r1
 8007752:	4649      	mov	r1, r9
 8007754:	eb43 0501 	adc.w	r5, r3, r1
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	00eb      	lsls	r3, r5, #3
 8007762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007766:	00e2      	lsls	r2, r4, #3
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	4643      	mov	r3, r8
 800776e:	18e3      	adds	r3, r4, r3
 8007770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007774:	464b      	mov	r3, r9
 8007776:	eb45 0303 	adc.w	r3, r5, r3
 800777a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800778a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800779a:	4629      	mov	r1, r5
 800779c:	008b      	lsls	r3, r1, #2
 800779e:	4621      	mov	r1, r4
 80077a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a4:	4621      	mov	r1, r4
 80077a6:	008a      	lsls	r2, r1, #2
 80077a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077ac:	f7f9 fa6c 	bl	8000c88 <__aeabi_uldivmod>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4b60      	ldr	r3, [pc, #384]	; (8007938 <UART_SetConfig+0x4e4>)
 80077b6:	fba3 2302 	umull	r2, r3, r3, r2
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	011c      	lsls	r4, r3, #4
 80077be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077d0:	4642      	mov	r2, r8
 80077d2:	464b      	mov	r3, r9
 80077d4:	1891      	adds	r1, r2, r2
 80077d6:	61b9      	str	r1, [r7, #24]
 80077d8:	415b      	adcs	r3, r3
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e0:	4641      	mov	r1, r8
 80077e2:	1851      	adds	r1, r2, r1
 80077e4:	6139      	str	r1, [r7, #16]
 80077e6:	4649      	mov	r1, r9
 80077e8:	414b      	adcs	r3, r1
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	f04f 0200 	mov.w	r2, #0
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077f8:	4659      	mov	r1, fp
 80077fa:	00cb      	lsls	r3, r1, #3
 80077fc:	4651      	mov	r1, sl
 80077fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007802:	4651      	mov	r1, sl
 8007804:	00ca      	lsls	r2, r1, #3
 8007806:	4610      	mov	r0, r2
 8007808:	4619      	mov	r1, r3
 800780a:	4603      	mov	r3, r0
 800780c:	4642      	mov	r2, r8
 800780e:	189b      	adds	r3, r3, r2
 8007810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007814:	464b      	mov	r3, r9
 8007816:	460a      	mov	r2, r1
 8007818:	eb42 0303 	adc.w	r3, r2, r3
 800781c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	67bb      	str	r3, [r7, #120]	; 0x78
 800782a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007838:	4649      	mov	r1, r9
 800783a:	008b      	lsls	r3, r1, #2
 800783c:	4641      	mov	r1, r8
 800783e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007842:	4641      	mov	r1, r8
 8007844:	008a      	lsls	r2, r1, #2
 8007846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800784a:	f7f9 fa1d 	bl	8000c88 <__aeabi_uldivmod>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4611      	mov	r1, r2
 8007854:	4b38      	ldr	r3, [pc, #224]	; (8007938 <UART_SetConfig+0x4e4>)
 8007856:	fba3 2301 	umull	r2, r3, r3, r1
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2264      	movs	r2, #100	; 0x64
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	1acb      	subs	r3, r1, r3
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a33      	ldr	r2, [pc, #204]	; (8007938 <UART_SetConfig+0x4e4>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007874:	441c      	add	r4, r3
 8007876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800787a:	2200      	movs	r2, #0
 800787c:	673b      	str	r3, [r7, #112]	; 0x70
 800787e:	677a      	str	r2, [r7, #116]	; 0x74
 8007880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	1891      	adds	r1, r2, r2
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	415b      	adcs	r3, r3
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007894:	4641      	mov	r1, r8
 8007896:	1851      	adds	r1, r2, r1
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	4649      	mov	r1, r9
 800789c:	414b      	adcs	r3, r1
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ac:	4659      	mov	r1, fp
 80078ae:	00cb      	lsls	r3, r1, #3
 80078b0:	4651      	mov	r1, sl
 80078b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078b6:	4651      	mov	r1, sl
 80078b8:	00ca      	lsls	r2, r1, #3
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	4642      	mov	r2, r8
 80078c2:	189b      	adds	r3, r3, r2
 80078c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078c6:	464b      	mov	r3, r9
 80078c8:	460a      	mov	r2, r1
 80078ca:	eb42 0303 	adc.w	r3, r2, r3
 80078ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	663b      	str	r3, [r7, #96]	; 0x60
 80078da:	667a      	str	r2, [r7, #100]	; 0x64
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	f04f 0300 	mov.w	r3, #0
 80078e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078e8:	4649      	mov	r1, r9
 80078ea:	008b      	lsls	r3, r1, #2
 80078ec:	4641      	mov	r1, r8
 80078ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078f2:	4641      	mov	r1, r8
 80078f4:	008a      	lsls	r2, r1, #2
 80078f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078fa:	f7f9 f9c5 	bl	8000c88 <__aeabi_uldivmod>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <UART_SetConfig+0x4e4>)
 8007904:	fba3 1302 	umull	r1, r3, r3, r2
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	2164      	movs	r1, #100	; 0x64
 800790c:	fb01 f303 	mul.w	r3, r1, r3
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	3332      	adds	r3, #50	; 0x32
 8007916:	4a08      	ldr	r2, [pc, #32]	; (8007938 <UART_SetConfig+0x4e4>)
 8007918:	fba2 2303 	umull	r2, r3, r2, r3
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	f003 020f 	and.w	r2, r3, #15
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4422      	add	r2, r4
 800792a:	609a      	str	r2, [r3, #8]
}
 800792c:	bf00      	nop
 800792e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007932:	46bd      	mov	sp, r7
 8007934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007938:	51eb851f 	.word	0x51eb851f

0800793c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007946:	2300      	movs	r3, #0
 8007948:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800794a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800794e:	2b84      	cmp	r3, #132	; 0x84
 8007950:	d005      	beq.n	800795e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	3303      	adds	r3, #3
 800795c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007970:	f000 fade 	bl	8007f30 <vTaskStartScheduler>
  
  return osOK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	bd80      	pop	{r7, pc}

0800797a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800797a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800797c:	b089      	sub	sp, #36	; 0x24
 800797e:	af04      	add	r7, sp, #16
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d020      	beq.n	80079ce <osThreadCreate+0x54>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01c      	beq.n	80079ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685c      	ldr	r4, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691e      	ldr	r6, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff ffc8 	bl	800793c <makeFreeRtosPriority>
 80079ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	695b      	ldr	r3, [r3, #20]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079b6:	9202      	str	r2, [sp, #8]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	9100      	str	r1, [sp, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	4632      	mov	r2, r6
 80079c0:	4629      	mov	r1, r5
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 f8ed 	bl	8007ba2 <xTaskCreateStatic>
 80079c8:	4603      	mov	r3, r0
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e01c      	b.n	8007a08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685c      	ldr	r4, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff ffaa 	bl	800793c <makeFreeRtosPriority>
 80079e8:	4602      	mov	r2, r0
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	9200      	str	r2, [sp, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	4632      	mov	r2, r6
 80079f6:	4629      	mov	r1, r5
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 f92f 	bl	8007c5c <xTaskCreate>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d001      	beq.n	8007a08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e000      	b.n	8007a0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a08:	68fb      	ldr	r3, [r7, #12]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <osDelay+0x16>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	e000      	b.n	8007a2a <osDelay+0x18>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fa4c 	bl	8007ec8 <vTaskDelay>
  
  return osOK;
 8007a30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f103 0208 	add.w	r2, r3, #8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f103 0208 	add.w	r2, r3, #8
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f103 0208 	add.w	r2, r3, #8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	683a      	ldr	r2, [r7, #0]
 8007abe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	601a      	str	r2, [r3, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d103      	bne.n	8007afc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	e00c      	b.n	8007b16 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3308      	adds	r3, #8
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	e002      	b.n	8007b0a <vListInsert+0x2e>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d2f6      	bcs.n	8007b04 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6892      	ldr	r2, [r2, #8]
 8007b64:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6852      	ldr	r2, [r2, #4]
 8007b6e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d103      	bne.n	8007b82 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	1e5a      	subs	r2, r3, #1
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b08e      	sub	sp, #56	; 0x38
 8007ba6:	af04      	add	r7, sp, #16
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
 8007bae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <xTaskCreateStatic+0x46>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	61fb      	str	r3, [r7, #28]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007be8:	2354      	movs	r3, #84	; 0x54
 8007bea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b54      	cmp	r3, #84	; 0x54
 8007bf0:	d00a      	beq.n	8007c08 <xTaskCreateStatic+0x66>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61bb      	str	r3, [r7, #24]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01e      	beq.n	8007c4e <xTaskCreateStatic+0xac>
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01b      	beq.n	8007c4e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	f107 0314 	add.w	r3, r7, #20
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	68b9      	ldr	r1, [r7, #8]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f850 	bl	8007ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c48:	f000 f8d4 	bl	8007df4 <prvAddNewTaskToReadyList>
 8007c4c:	e001      	b.n	8007c52 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c52:	697b      	ldr	r3, [r7, #20]
	}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3728      	adds	r7, #40	; 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	; 0x30
 8007c60:	af04      	add	r7, sp, #16
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fec9 	bl	8008a08 <pvPortMalloc>
 8007c76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00e      	beq.n	8007c9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c7e:	2054      	movs	r0, #84	; 0x54
 8007c80:	f000 fec2 	bl	8008a08 <pvPortMalloc>
 8007c84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	631a      	str	r2, [r3, #48]	; 0x30
 8007c92:	e005      	b.n	8007ca0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c94:	6978      	ldr	r0, [r7, #20]
 8007c96:	f000 ff83 	bl	8008ba0 <vPortFree>
 8007c9a:	e001      	b.n	8007ca0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d017      	beq.n	8007cd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f80e 	bl	8007ce6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cca:	69f8      	ldr	r0, [r7, #28]
 8007ccc:	f000 f892 	bl	8007df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	61bb      	str	r3, [r7, #24]
 8007cd4:	e002      	b.n	8007cdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
	}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3720      	adds	r7, #32
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b088      	sub	sp, #32
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	f023 0307 	bic.w	r3, r3, #7
 8007d0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <prvInitialiseNewTask+0x48>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	617b      	str	r3, [r7, #20]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01f      	beq.n	8007d74 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	e012      	b.n	8007d60 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	4413      	add	r3, r2
 8007d40:	7819      	ldrb	r1, [r3, #0]
 8007d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	3334      	adds	r3, #52	; 0x34
 8007d4a:	460a      	mov	r2, r1
 8007d4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d006      	beq.n	8007d68 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d9e9      	bls.n	8007d3a <prvInitialiseNewTask+0x54>
 8007d66:	e000      	b.n	8007d6a <prvInitialiseNewTask+0x84>
			{
				break;
 8007d68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d72:	e003      	b.n	8007d7c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d901      	bls.n	8007d86 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d82:	2306      	movs	r3, #6
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d90:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fe6c 	bl	8007a7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	3318      	adds	r3, #24
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fe67 	bl	8007a7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	f1c3 0207 	rsb	r2, r3, #7
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	68f9      	ldr	r1, [r7, #12]
 8007dd4:	69b8      	ldr	r0, [r7, #24]
 8007dd6:	f000 fc05 	bl	80085e4 <pxPortInitialiseStack>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dec:	bf00      	nop
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dfc:	f000 fd22 	bl	8008844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <prvAddNewTaskToReadyList+0xb8>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	4a29      	ldr	r2, [pc, #164]	; (8007eac <prvAddNewTaskToReadyList+0xb8>)
 8007e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e0a:	4b29      	ldr	r3, [pc, #164]	; (8007eb0 <prvAddNewTaskToReadyList+0xbc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e12:	4a27      	ldr	r2, [pc, #156]	; (8007eb0 <prvAddNewTaskToReadyList+0xbc>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e18:	4b24      	ldr	r3, [pc, #144]	; (8007eac <prvAddNewTaskToReadyList+0xb8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d110      	bne.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e20:	f000 fabc 	bl	800839c <prvInitialiseTaskLists>
 8007e24:	e00d      	b.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e26:	4b23      	ldr	r3, [pc, #140]	; (8007eb4 <prvAddNewTaskToReadyList+0xc0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e2e:	4b20      	ldr	r3, [pc, #128]	; (8007eb0 <prvAddNewTaskToReadyList+0xbc>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d802      	bhi.n	8007e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <prvAddNewTaskToReadyList+0xbc>)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e42:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <prvAddNewTaskToReadyList+0xc4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	4a1b      	ldr	r2, [pc, #108]	; (8007eb8 <prvAddNewTaskToReadyList+0xc4>)
 8007e4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	2201      	movs	r2, #1
 8007e52:	409a      	lsls	r2, r3
 8007e54:	4b19      	ldr	r3, [pc, #100]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <prvAddNewTaskToReadyList+0xc8>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4a15      	ldr	r2, [pc, #84]	; (8007ec0 <prvAddNewTaskToReadyList+0xcc>)
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f7ff fe0d 	bl	8007a94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e7a:	f000 fd13 	bl	80088a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <prvAddNewTaskToReadyList+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00e      	beq.n	8007ea4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e86:	4b0a      	ldr	r3, [pc, #40]	; (8007eb0 <prvAddNewTaskToReadyList+0xbc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d207      	bcs.n	8007ea4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <prvAddNewTaskToReadyList+0xd0>)
 8007e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20001cc8 	.word	0x20001cc8
 8007eb0:	20001bc8 	.word	0x20001bc8
 8007eb4:	20001cd4 	.word	0x20001cd4
 8007eb8:	20001ce4 	.word	0x20001ce4
 8007ebc:	20001cd0 	.word	0x20001cd0
 8007ec0:	20001bcc 	.word	0x20001bcc
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d017      	beq.n	8007f0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007eda:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <vTaskDelay+0x60>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <vTaskDelay+0x30>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	60bb      	str	r3, [r7, #8]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ef8:	f000 f87a 	bl	8007ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fb0a 	bl	8008518 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f04:	f000 f882 	bl	800800c <xTaskResumeAll>
 8007f08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d107      	bne.n	8007f20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <vTaskDelay+0x64>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20001cf0 	.word	0x20001cf0
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	; 0x28
 8007f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f3e:	463a      	mov	r2, r7
 8007f40:	1d39      	adds	r1, r7, #4
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7f9 fb62 	bl	8001610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	9202      	str	r2, [sp, #8]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	2300      	movs	r3, #0
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	491e      	ldr	r1, [pc, #120]	; (8007fd8 <vTaskStartScheduler+0xa8>)
 8007f60:	481e      	ldr	r0, [pc, #120]	; (8007fdc <vTaskStartScheduler+0xac>)
 8007f62:	f7ff fe1e 	bl	8007ba2 <xTaskCreateStatic>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <vTaskStartScheduler+0xb0>)
 8007f6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <vTaskStartScheduler+0xb0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e001      	b.n	8007f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d116      	bne.n	8007fb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	613b      	str	r3, [r7, #16]
}
 8007f96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <vTaskStartScheduler+0xb4>)
 8007f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fa0:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <vTaskStartScheduler+0xb8>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <vTaskStartScheduler+0xbc>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fac:	f000 fba8 	bl	8008700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fb0:	e00e      	b.n	8007fd0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d10a      	bne.n	8007fd0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	60fb      	str	r3, [r7, #12]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vTaskStartScheduler+0x9e>
}
 8007fd0:	bf00      	nop
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	0800e09c 	.word	0x0800e09c
 8007fdc:	0800836d 	.word	0x0800836d
 8007fe0:	20001cec 	.word	0x20001cec
 8007fe4:	20001ce8 	.word	0x20001ce8
 8007fe8:	20001cd4 	.word	0x20001cd4
 8007fec:	20001ccc 	.word	0x20001ccc

08007ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <vTaskSuspendAll+0x18>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	4a03      	ldr	r2, [pc, #12]	; (8008008 <vTaskSuspendAll+0x18>)
 8007ffc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ffe:	bf00      	nop
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20001cf0 	.word	0x20001cf0

0800800c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800801a:	4b41      	ldr	r3, [pc, #260]	; (8008120 <xTaskResumeAll+0x114>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <xTaskResumeAll+0x2c>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	603b      	str	r3, [r7, #0]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008038:	f000 fc04 	bl	8008844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800803c:	4b38      	ldr	r3, [pc, #224]	; (8008120 <xTaskResumeAll+0x114>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	4a37      	ldr	r2, [pc, #220]	; (8008120 <xTaskResumeAll+0x114>)
 8008044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008046:	4b36      	ldr	r3, [pc, #216]	; (8008120 <xTaskResumeAll+0x114>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d161      	bne.n	8008112 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800804e:	4b35      	ldr	r3, [pc, #212]	; (8008124 <xTaskResumeAll+0x118>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d05d      	beq.n	8008112 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008056:	e02e      	b.n	80080b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008058:	4b33      	ldr	r3, [pc, #204]	; (8008128 <xTaskResumeAll+0x11c>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3318      	adds	r3, #24
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff fd72 	bl	8007b4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3304      	adds	r3, #4
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fd6d 	bl	8007b4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	2201      	movs	r2, #1
 800807a:	409a      	lsls	r2, r3
 800807c:	4b2b      	ldr	r3, [pc, #172]	; (800812c <xTaskResumeAll+0x120>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4313      	orrs	r3, r2
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <xTaskResumeAll+0x120>)
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4a27      	ldr	r2, [pc, #156]	; (8008130 <xTaskResumeAll+0x124>)
 8008094:	441a      	add	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3304      	adds	r3, #4
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7ff fcf9 	bl	8007a94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	4b23      	ldr	r3, [pc, #140]	; (8008134 <xTaskResumeAll+0x128>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d302      	bcc.n	80080b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80080b0:	4b21      	ldr	r3, [pc, #132]	; (8008138 <xTaskResumeAll+0x12c>)
 80080b2:	2201      	movs	r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080b6:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <xTaskResumeAll+0x11c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1cc      	bne.n	8008058 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080c4:	f000 fa08 	bl	80084d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080c8:	4b1c      	ldr	r3, [pc, #112]	; (800813c <xTaskResumeAll+0x130>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d010      	beq.n	80080f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080d4:	f000 f836 	bl	8008144 <xTaskIncrementTick>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80080de:	4b16      	ldr	r3, [pc, #88]	; (8008138 <xTaskResumeAll+0x12c>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f1      	bne.n	80080d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80080f0:	4b12      	ldr	r3, [pc, #72]	; (800813c <xTaskResumeAll+0x130>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <xTaskResumeAll+0x12c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080fe:	2301      	movs	r3, #1
 8008100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008102:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <xTaskResumeAll+0x134>)
 8008104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008112:	f000 fbc7 	bl	80088a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008116:	68bb      	ldr	r3, [r7, #8]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20001cf0 	.word	0x20001cf0
 8008124:	20001cc8 	.word	0x20001cc8
 8008128:	20001c88 	.word	0x20001c88
 800812c:	20001cd0 	.word	0x20001cd0
 8008130:	20001bcc 	.word	0x20001bcc
 8008134:	20001bc8 	.word	0x20001bc8
 8008138:	20001cdc 	.word	0x20001cdc
 800813c:	20001cd8 	.word	0x20001cd8
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800814a:	2300      	movs	r3, #0
 800814c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800814e:	4b4e      	ldr	r3, [pc, #312]	; (8008288 <xTaskIncrementTick+0x144>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f040 808e 	bne.w	8008274 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008158:	4b4c      	ldr	r3, [pc, #304]	; (800828c <xTaskIncrementTick+0x148>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3301      	adds	r3, #1
 800815e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008160:	4a4a      	ldr	r2, [pc, #296]	; (800828c <xTaskIncrementTick+0x148>)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d120      	bne.n	80081ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800816c:	4b48      	ldr	r3, [pc, #288]	; (8008290 <xTaskIncrementTick+0x14c>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <xTaskIncrementTick+0x48>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	603b      	str	r3, [r7, #0]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <xTaskIncrementTick+0x46>
 800818c:	4b40      	ldr	r3, [pc, #256]	; (8008290 <xTaskIncrementTick+0x14c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	4b40      	ldr	r3, [pc, #256]	; (8008294 <xTaskIncrementTick+0x150>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a3e      	ldr	r2, [pc, #248]	; (8008290 <xTaskIncrementTick+0x14c>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	4a3e      	ldr	r2, [pc, #248]	; (8008294 <xTaskIncrementTick+0x150>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	4b3d      	ldr	r3, [pc, #244]	; (8008298 <xTaskIncrementTick+0x154>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a3c      	ldr	r2, [pc, #240]	; (8008298 <xTaskIncrementTick+0x154>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	f000 f995 	bl	80084d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081ae:	4b3b      	ldr	r3, [pc, #236]	; (800829c <xTaskIncrementTick+0x158>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d348      	bcc.n	800824a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081b8:	4b35      	ldr	r3, [pc, #212]	; (8008290 <xTaskIncrementTick+0x14c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c2:	4b36      	ldr	r3, [pc, #216]	; (800829c <xTaskIncrementTick+0x158>)
 80081c4:	f04f 32ff 	mov.w	r2, #4294967295
 80081c8:	601a      	str	r2, [r3, #0]
					break;
 80081ca:	e03e      	b.n	800824a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081cc:	4b30      	ldr	r3, [pc, #192]	; (8008290 <xTaskIncrementTick+0x14c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d203      	bcs.n	80081ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081e4:	4a2d      	ldr	r2, [pc, #180]	; (800829c <xTaskIncrementTick+0x158>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081ea:	e02e      	b.n	800824a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fcac 	bl	8007b4e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	3318      	adds	r3, #24
 8008202:	4618      	mov	r0, r3
 8008204:	f7ff fca3 	bl	8007b4e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2201      	movs	r2, #1
 800820e:	409a      	lsls	r2, r3
 8008210:	4b23      	ldr	r3, [pc, #140]	; (80082a0 <xTaskIncrementTick+0x15c>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4313      	orrs	r3, r2
 8008216:	4a22      	ldr	r2, [pc, #136]	; (80082a0 <xTaskIncrementTick+0x15c>)
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4a1f      	ldr	r2, [pc, #124]	; (80082a4 <xTaskIncrementTick+0x160>)
 8008228:	441a      	add	r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7ff fc2f 	bl	8007a94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823a:	4b1b      	ldr	r3, [pc, #108]	; (80082a8 <xTaskIncrementTick+0x164>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	429a      	cmp	r2, r3
 8008242:	d3b9      	bcc.n	80081b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008248:	e7b6      	b.n	80081b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800824a:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <xTaskIncrementTick+0x164>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4914      	ldr	r1, [pc, #80]	; (80082a4 <xTaskIncrementTick+0x160>)
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d901      	bls.n	8008266 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008262:	2301      	movs	r3, #1
 8008264:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008266:	4b11      	ldr	r3, [pc, #68]	; (80082ac <xTaskIncrementTick+0x168>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d007      	beq.n	800827e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e004      	b.n	800827e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008274:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <xTaskIncrementTick+0x16c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	4a0d      	ldr	r2, [pc, #52]	; (80082b0 <xTaskIncrementTick+0x16c>)
 800827c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800827e:	697b      	ldr	r3, [r7, #20]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20001cf0 	.word	0x20001cf0
 800828c:	20001ccc 	.word	0x20001ccc
 8008290:	20001c80 	.word	0x20001c80
 8008294:	20001c84 	.word	0x20001c84
 8008298:	20001ce0 	.word	0x20001ce0
 800829c:	20001ce8 	.word	0x20001ce8
 80082a0:	20001cd0 	.word	0x20001cd0
 80082a4:	20001bcc 	.word	0x20001bcc
 80082a8:	20001bc8 	.word	0x20001bc8
 80082ac:	20001cdc 	.word	0x20001cdc
 80082b0:	20001cd8 	.word	0x20001cd8

080082b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082ba:	4b27      	ldr	r3, [pc, #156]	; (8008358 <vTaskSwitchContext+0xa4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082c2:	4b26      	ldr	r3, [pc, #152]	; (800835c <vTaskSwitchContext+0xa8>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082c8:	e03f      	b.n	800834a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80082ca:	4b24      	ldr	r3, [pc, #144]	; (800835c <vTaskSwitchContext+0xa8>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d0:	4b23      	ldr	r3, [pc, #140]	; (8008360 <vTaskSwitchContext+0xac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	fab3 f383 	clz	r3, r3
 80082dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80082de:	7afb      	ldrb	r3, [r7, #11]
 80082e0:	f1c3 031f 	rsb	r3, r3, #31
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	491f      	ldr	r1, [pc, #124]	; (8008364 <vTaskSwitchContext+0xb0>)
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <vTaskSwitchContext+0x5c>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	607b      	str	r3, [r7, #4]
}
 800830c:	bf00      	nop
 800830e:	e7fe      	b.n	800830e <vTaskSwitchContext+0x5a>
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4a12      	ldr	r2, [pc, #72]	; (8008364 <vTaskSwitchContext+0xb0>)
 800831c:	4413      	add	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3308      	adds	r3, #8
 8008332:	429a      	cmp	r2, r3
 8008334:	d104      	bne.n	8008340 <vTaskSwitchContext+0x8c>
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	605a      	str	r2, [r3, #4]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	4a08      	ldr	r2, [pc, #32]	; (8008368 <vTaskSwitchContext+0xb4>)
 8008348:	6013      	str	r3, [r2, #0]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20001cf0 	.word	0x20001cf0
 800835c:	20001cdc 	.word	0x20001cdc
 8008360:	20001cd0 	.word	0x20001cd0
 8008364:	20001bcc 	.word	0x20001bcc
 8008368:	20001bc8 	.word	0x20001bc8

0800836c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008374:	f000 f852 	bl	800841c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008378:	4b06      	ldr	r3, [pc, #24]	; (8008394 <prvIdleTask+0x28>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d9f9      	bls.n	8008374 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <prvIdleTask+0x2c>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008390:	e7f0      	b.n	8008374 <prvIdleTask+0x8>
 8008392:	bf00      	nop
 8008394:	20001bcc 	.word	0x20001bcc
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083a2:	2300      	movs	r3, #0
 80083a4:	607b      	str	r3, [r7, #4]
 80083a6:	e00c      	b.n	80083c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <prvInitialiseTaskLists+0x60>)
 80083b4:	4413      	add	r3, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fb3f 	bl	8007a3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3301      	adds	r3, #1
 80083c0:	607b      	str	r3, [r7, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b06      	cmp	r3, #6
 80083c6:	d9ef      	bls.n	80083a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083c8:	480d      	ldr	r0, [pc, #52]	; (8008400 <prvInitialiseTaskLists+0x64>)
 80083ca:	f7ff fb36 	bl	8007a3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ce:	480d      	ldr	r0, [pc, #52]	; (8008404 <prvInitialiseTaskLists+0x68>)
 80083d0:	f7ff fb33 	bl	8007a3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083d4:	480c      	ldr	r0, [pc, #48]	; (8008408 <prvInitialiseTaskLists+0x6c>)
 80083d6:	f7ff fb30 	bl	8007a3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083da:	480c      	ldr	r0, [pc, #48]	; (800840c <prvInitialiseTaskLists+0x70>)
 80083dc:	f7ff fb2d 	bl	8007a3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80083e0:	480b      	ldr	r0, [pc, #44]	; (8008410 <prvInitialiseTaskLists+0x74>)
 80083e2:	f7ff fb2a 	bl	8007a3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80083e6:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <prvInitialiseTaskLists+0x78>)
 80083e8:	4a05      	ldr	r2, [pc, #20]	; (8008400 <prvInitialiseTaskLists+0x64>)
 80083ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <prvInitialiseTaskLists+0x7c>)
 80083ee:	4a05      	ldr	r2, [pc, #20]	; (8008404 <prvInitialiseTaskLists+0x68>)
 80083f0:	601a      	str	r2, [r3, #0]
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20001bcc 	.word	0x20001bcc
 8008400:	20001c58 	.word	0x20001c58
 8008404:	20001c6c 	.word	0x20001c6c
 8008408:	20001c88 	.word	0x20001c88
 800840c:	20001c9c 	.word	0x20001c9c
 8008410:	20001cb4 	.word	0x20001cb4
 8008414:	20001c80 	.word	0x20001c80
 8008418:	20001c84 	.word	0x20001c84

0800841c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008422:	e019      	b.n	8008458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008424:	f000 fa0e 	bl	8008844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008428:	4b10      	ldr	r3, [pc, #64]	; (800846c <prvCheckTasksWaitingTermination+0x50>)
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff fb8a 	bl	8007b4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <prvCheckTasksWaitingTermination+0x54>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3b01      	subs	r3, #1
 8008440:	4a0b      	ldr	r2, [pc, #44]	; (8008470 <prvCheckTasksWaitingTermination+0x54>)
 8008442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008444:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <prvCheckTasksWaitingTermination+0x58>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <prvCheckTasksWaitingTermination+0x58>)
 800844c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800844e:	f000 fa29 	bl	80088a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f810 	bl	8008478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008458:	4b06      	ldr	r3, [pc, #24]	; (8008474 <prvCheckTasksWaitingTermination+0x58>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e1      	bne.n	8008424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20001c9c 	.word	0x20001c9c
 8008470:	20001cc8 	.word	0x20001cc8
 8008474:	20001cb0 	.word	0x20001cb0

08008478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008486:	2b00      	cmp	r3, #0
 8008488:	d108      	bne.n	800849c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fb86 	bl	8008ba0 <vPortFree>
				vPortFree( pxTCB );
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fb83 	bl	8008ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800849a:	e018      	b.n	80084ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d103      	bne.n	80084ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb7a 	bl	8008ba0 <vPortFree>
	}
 80084ac:	e00f      	b.n	80084ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d00a      	beq.n	80084ce <prvDeleteTCB+0x56>
	__asm volatile
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	f383 8811 	msr	BASEPRI, r3
 80084c0:	f3bf 8f6f 	isb	sy
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	60fb      	str	r3, [r7, #12]
}
 80084ca:	bf00      	nop
 80084cc:	e7fe      	b.n	80084cc <prvDeleteTCB+0x54>
	}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <prvResetNextTaskUnblockTime+0x38>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084e8:	4b0a      	ldr	r3, [pc, #40]	; (8008514 <prvResetNextTaskUnblockTime+0x3c>)
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084f0:	e008      	b.n	8008504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <prvResetNextTaskUnblockTime+0x38>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <prvResetNextTaskUnblockTime+0x3c>)
 8008502:	6013      	str	r3, [r2, #0]
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	20001c80 	.word	0x20001c80
 8008514:	20001ce8 	.word	0x20001ce8

08008518 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008522:	4b29      	ldr	r3, [pc, #164]	; (80085c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008528:	4b28      	ldr	r3, [pc, #160]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3304      	adds	r3, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff fb0d 	bl	8007b4e <uxListRemove>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800853a:	4b24      	ldr	r3, [pc, #144]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	2201      	movs	r2, #1
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43da      	mvns	r2, r3
 8008548:	4b21      	ldr	r3, [pc, #132]	; (80085d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4013      	ands	r3, r2
 800854e:	4a20      	ldr	r2, [pc, #128]	; (80085d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008550:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d10a      	bne.n	8008570 <prvAddCurrentTaskToDelayedList+0x58>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008560:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3304      	adds	r3, #4
 8008566:	4619      	mov	r1, r3
 8008568:	481a      	ldr	r0, [pc, #104]	; (80085d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800856a:	f7ff fa93 	bl	8007a94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800856e:	e026      	b.n	80085be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008578:	4b14      	ldr	r3, [pc, #80]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	429a      	cmp	r2, r3
 8008586:	d209      	bcs.n	800859c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008588:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3304      	adds	r3, #4
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7ff faa1 	bl	8007adc <vListInsert>
}
 800859a:	e010      	b.n	80085be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859c:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fa97 	bl	8007adc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d202      	bcs.n	80085be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085b8:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6013      	str	r3, [r2, #0]
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001ccc 	.word	0x20001ccc
 80085cc:	20001bc8 	.word	0x20001bc8
 80085d0:	20001cd0 	.word	0x20001cd0
 80085d4:	20001cb4 	.word	0x20001cb4
 80085d8:	20001c84 	.word	0x20001c84
 80085dc:	20001c80 	.word	0x20001c80
 80085e0:	20001ce8 	.word	0x20001ce8

080085e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3b04      	subs	r3, #4
 80085f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3b04      	subs	r3, #4
 8008602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0201 	bic.w	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3b04      	subs	r3, #4
 8008612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008614:	4a0c      	ldr	r2, [pc, #48]	; (8008648 <pxPortInitialiseStack+0x64>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3b14      	subs	r3, #20
 800861e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3b04      	subs	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f06f 0202 	mvn.w	r2, #2
 8008632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3b20      	subs	r3, #32
 8008638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800863a:	68fb      	ldr	r3, [r7, #12]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	0800864d 	.word	0x0800864d

0800864c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <prvTaskExitError+0x54>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d00a      	beq.n	8008676 <prvTaskExitError+0x2a>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	60fb      	str	r3, [r7, #12]
}
 8008672:	bf00      	nop
 8008674:	e7fe      	b.n	8008674 <prvTaskExitError+0x28>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	60bb      	str	r3, [r7, #8]
}
 8008688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800868a:	bf00      	nop
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0fc      	beq.n	800868c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000010 	.word	0x20000010
	...

080086b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <pxCurrentTCBConst2>)
 80086b2:	6819      	ldr	r1, [r3, #0]
 80086b4:	6808      	ldr	r0, [r1, #0]
 80086b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ba:	f380 8809 	msr	PSP, r0
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8811 	msr	BASEPRI, r0
 80086ca:	4770      	bx	lr
 80086cc:	f3af 8000 	nop.w

080086d0 <pxCurrentTCBConst2>:
 80086d0:	20001bc8 	.word	0x20001bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop

080086d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086d8:	4808      	ldr	r0, [pc, #32]	; (80086fc <prvPortStartFirstTask+0x24>)
 80086da:	6800      	ldr	r0, [r0, #0]
 80086dc:	6800      	ldr	r0, [r0, #0]
 80086de:	f380 8808 	msr	MSP, r0
 80086e2:	f04f 0000 	mov.w	r0, #0
 80086e6:	f380 8814 	msr	CONTROL, r0
 80086ea:	b662      	cpsie	i
 80086ec:	b661      	cpsie	f
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	df00      	svc	0
 80086f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086fa:	bf00      	nop
 80086fc:	e000ed08 	.word	0xe000ed08

08008700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008706:	4b46      	ldr	r3, [pc, #280]	; (8008820 <xPortStartScheduler+0x120>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a46      	ldr	r2, [pc, #280]	; (8008824 <xPortStartScheduler+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10a      	bne.n	8008726 <xPortStartScheduler+0x26>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	613b      	str	r3, [r7, #16]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008726:	4b3e      	ldr	r3, [pc, #248]	; (8008820 <xPortStartScheduler+0x120>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a3f      	ldr	r2, [pc, #252]	; (8008828 <xPortStartScheduler+0x128>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10a      	bne.n	8008746 <xPortStartScheduler+0x46>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	60fb      	str	r3, [r7, #12]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008746:	4b39      	ldr	r3, [pc, #228]	; (800882c <xPortStartScheduler+0x12c>)
 8008748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b2db      	uxtb	r3, r3
 8008750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	22ff      	movs	r2, #255	; 0xff
 8008756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4b31      	ldr	r3, [pc, #196]	; (8008830 <xPortStartScheduler+0x130>)
 800876c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800876e:	4b31      	ldr	r3, [pc, #196]	; (8008834 <xPortStartScheduler+0x134>)
 8008770:	2207      	movs	r2, #7
 8008772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008774:	e009      	b.n	800878a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008776:	4b2f      	ldr	r3, [pc, #188]	; (8008834 <xPortStartScheduler+0x134>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3b01      	subs	r3, #1
 800877c:	4a2d      	ldr	r2, [pc, #180]	; (8008834 <xPortStartScheduler+0x134>)
 800877e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d0ef      	beq.n	8008776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008796:	4b27      	ldr	r3, [pc, #156]	; (8008834 <xPortStartScheduler+0x134>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1c3 0307 	rsb	r3, r3, #7
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d00a      	beq.n	80087b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087b8:	4b1e      	ldr	r3, [pc, #120]	; (8008834 <xPortStartScheduler+0x134>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	4a1d      	ldr	r2, [pc, #116]	; (8008834 <xPortStartScheduler+0x134>)
 80087c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087c2:	4b1c      	ldr	r3, [pc, #112]	; (8008834 <xPortStartScheduler+0x134>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087ca:	4a1a      	ldr	r2, [pc, #104]	; (8008834 <xPortStartScheduler+0x134>)
 80087cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087d6:	4b18      	ldr	r3, [pc, #96]	; (8008838 <xPortStartScheduler+0x138>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a17      	ldr	r2, [pc, #92]	; (8008838 <xPortStartScheduler+0x138>)
 80087dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <xPortStartScheduler+0x138>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a14      	ldr	r2, [pc, #80]	; (8008838 <xPortStartScheduler+0x138>)
 80087e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087ee:	f000 f8dd 	bl	80089ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087f2:	4b12      	ldr	r3, [pc, #72]	; (800883c <xPortStartScheduler+0x13c>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087f8:	f000 f8fc 	bl	80089f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <xPortStartScheduler+0x140>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a0f      	ldr	r2, [pc, #60]	; (8008840 <xPortStartScheduler+0x140>)
 8008802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008808:	f7ff ff66 	bl	80086d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800880c:	f7ff fd52 	bl	80082b4 <vTaskSwitchContext>
	prvTaskExitError();
 8008810:	f7ff ff1c 	bl	800864c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	e000ed00 	.word	0xe000ed00
 8008824:	410fc271 	.word	0x410fc271
 8008828:	410fc270 	.word	0x410fc270
 800882c:	e000e400 	.word	0xe000e400
 8008830:	20001cf4 	.word	0x20001cf4
 8008834:	20001cf8 	.word	0x20001cf8
 8008838:	e000ed20 	.word	0xe000ed20
 800883c:	20000010 	.word	0x20000010
 8008840:	e000ef34 	.word	0xe000ef34

08008844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	607b      	str	r3, [r7, #4]
}
 800885c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <vPortEnterCritical+0x58>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	4a0d      	ldr	r2, [pc, #52]	; (800889c <vPortEnterCritical+0x58>)
 8008866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008868:	4b0c      	ldr	r3, [pc, #48]	; (800889c <vPortEnterCritical+0x58>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d10f      	bne.n	8008890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008870:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <vPortEnterCritical+0x5c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <vPortEnterCritical+0x4c>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	603b      	str	r3, [r7, #0]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <vPortEnterCritical+0x4a>
	}
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000010 	.word	0x20000010
 80088a0:	e000ed04 	.word	0xe000ed04

080088a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088aa:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <vPortExitCritical+0x50>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <vPortExitCritical+0x24>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	607b      	str	r3, [r7, #4]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088c8:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <vPortExitCritical+0x50>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <vPortExitCritical+0x50>)
 80088d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <vPortExitCritical+0x50>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d105      	bne.n	80088e6 <vPortExitCritical+0x42>
 80088da:	2300      	movs	r3, #0
 80088dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000010 	.word	0x20000010
	...

08008900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008900:	f3ef 8009 	mrs	r0, PSP
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4b15      	ldr	r3, [pc, #84]	; (8008960 <pxCurrentTCBConst>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	f01e 0f10 	tst.w	lr, #16
 8008910:	bf08      	it	eq
 8008912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891a:	6010      	str	r0, [r2, #0]
 800891c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008924:	f380 8811 	msr	BASEPRI, r0
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f7ff fcc0 	bl	80082b4 <vTaskSwitchContext>
 8008934:	f04f 0000 	mov.w	r0, #0
 8008938:	f380 8811 	msr	BASEPRI, r0
 800893c:	bc09      	pop	{r0, r3}
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	6808      	ldr	r0, [r1, #0]
 8008942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008946:	f01e 0f10 	tst.w	lr, #16
 800894a:	bf08      	it	eq
 800894c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008950:	f380 8809 	msr	PSP, r0
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	f3af 8000 	nop.w

08008960 <pxCurrentTCBConst>:
 8008960:	20001bc8 	.word	0x20001bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
}
 8008980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008982:	f7ff fbdf 	bl	8008144 <xTaskIncrementTick>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800898c:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <SysTick_Handler+0x40>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f383 8811 	msr	BASEPRI, r3
}
 800899e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <vPortSetupTimerInterrupt+0x34>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089b6:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <vPortSetupTimerInterrupt+0x38>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <vPortSetupTimerInterrupt+0x3c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <vPortSetupTimerInterrupt+0x40>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	099b      	lsrs	r3, r3, #6
 80089c8:	4a09      	ldr	r2, [pc, #36]	; (80089f0 <vPortSetupTimerInterrupt+0x44>)
 80089ca:	3b01      	subs	r3, #1
 80089cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ce:	4b04      	ldr	r3, [pc, #16]	; (80089e0 <vPortSetupTimerInterrupt+0x34>)
 80089d0:	2207      	movs	r2, #7
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	bf00      	nop
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	e000e010 	.word	0xe000e010
 80089e4:	e000e018 	.word	0xe000e018
 80089e8:	20000004 	.word	0x20000004
 80089ec:	10624dd3 	.word	0x10624dd3
 80089f0:	e000e014 	.word	0xe000e014

080089f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a04 <vPortEnableVFP+0x10>
 80089f8:	6801      	ldr	r1, [r0, #0]
 80089fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089fe:	6001      	str	r1, [r0, #0]
 8008a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a02:	bf00      	nop
 8008a04:	e000ed88 	.word	0xe000ed88

08008a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a14:	f7ff faec 	bl	8007ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a18:	4b5b      	ldr	r3, [pc, #364]	; (8008b88 <pvPortMalloc+0x180>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a20:	f000 f920 	bl	8008c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a24:	4b59      	ldr	r3, [pc, #356]	; (8008b8c <pvPortMalloc+0x184>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f040 8093 	bne.w	8008b58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01d      	beq.n	8008a74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a38:	2208      	movs	r2, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d014      	beq.n	8008a74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f023 0307 	bic.w	r3, r3, #7
 8008a50:	3308      	adds	r3, #8
 8008a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <pvPortMalloc+0x6c>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	617b      	str	r3, [r7, #20]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06e      	beq.n	8008b58 <pvPortMalloc+0x150>
 8008a7a:	4b45      	ldr	r3, [pc, #276]	; (8008b90 <pvPortMalloc+0x188>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d869      	bhi.n	8008b58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a84:	4b43      	ldr	r3, [pc, #268]	; (8008b94 <pvPortMalloc+0x18c>)
 8008a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a88:	4b42      	ldr	r3, [pc, #264]	; (8008b94 <pvPortMalloc+0x18c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a8e:	e004      	b.n	8008a9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d903      	bls.n	8008aac <pvPortMalloc+0xa4>
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1f1      	bne.n	8008a90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008aac:	4b36      	ldr	r3, [pc, #216]	; (8008b88 <pvPortMalloc+0x180>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d050      	beq.n	8008b58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2208      	movs	r2, #8
 8008abc:	4413      	add	r3, r2
 8008abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	1ad2      	subs	r2, r2, r3
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d91f      	bls.n	8008b18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <pvPortMalloc+0xf8>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	613b      	str	r3, [r7, #16]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f000 f908 	bl	8008d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b18:	4b1d      	ldr	r3, [pc, #116]	; (8008b90 <pvPortMalloc+0x188>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	4a1b      	ldr	r2, [pc, #108]	; (8008b90 <pvPortMalloc+0x188>)
 8008b24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b26:	4b1a      	ldr	r3, [pc, #104]	; (8008b90 <pvPortMalloc+0x188>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <pvPortMalloc+0x190>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d203      	bcs.n	8008b3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b32:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <pvPortMalloc+0x188>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <pvPortMalloc+0x190>)
 8008b38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <pvPortMalloc+0x184>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <pvPortMalloc+0x194>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3301      	adds	r3, #1
 8008b54:	4a11      	ldr	r2, [pc, #68]	; (8008b9c <pvPortMalloc+0x194>)
 8008b56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b58:	f7ff fa58 	bl	800800c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <pvPortMalloc+0x174>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <pvPortMalloc+0x172>
	return pvReturn;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3728      	adds	r7, #40	; 0x28
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20005904 	.word	0x20005904
 8008b8c:	20005918 	.word	0x20005918
 8008b90:	20005908 	.word	0x20005908
 8008b94:	200058fc 	.word	0x200058fc
 8008b98:	2000590c 	.word	0x2000590c
 8008b9c:	20005910 	.word	0x20005910

08008ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d04d      	beq.n	8008c4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	425b      	negs	r3, r3
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4413      	add	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	4b24      	ldr	r3, [pc, #144]	; (8008c58 <vPortFree+0xb8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <vPortFree+0x44>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	60fb      	str	r3, [r7, #12]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <vPortFree+0x62>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60bb      	str	r3, [r7, #8]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <vPortFree+0xb8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11a      	bne.n	8008c4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <vPortFree+0xb8>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	43db      	mvns	r3, r3
 8008c22:	401a      	ands	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c28:	f7ff f9e2 	bl	8007ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <vPortFree+0xbc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4413      	add	r3, r2
 8008c36:	4a09      	ldr	r2, [pc, #36]	; (8008c5c <vPortFree+0xbc>)
 8008c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c3a:	6938      	ldr	r0, [r7, #16]
 8008c3c:	f000 f874 	bl	8008d28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <vPortFree+0xc0>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	4a06      	ldr	r2, [pc, #24]	; (8008c60 <vPortFree+0xc0>)
 8008c48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c4a:	f7ff f9df 	bl	800800c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c4e:	bf00      	nop
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20005918 	.word	0x20005918
 8008c5c:	20005908 	.word	0x20005908
 8008c60:	20005914 	.word	0x20005914

08008c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <prvHeapInit+0xac>)
 8008c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00c      	beq.n	8008c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3307      	adds	r3, #7
 8008c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0307 	bic.w	r3, r3, #7
 8008c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <prvHeapInit+0xac>)
 8008c94:	4413      	add	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <prvHeapInit+0xb0>)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <prvHeapInit+0xb0>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	4413      	add	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0307 	bic.w	r3, r3, #7
 8008cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <prvHeapInit+0xb4>)
 8008cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <prvHeapInit+0xb4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cce:	4b12      	ldr	r3, [pc, #72]	; (8008d18 <prvHeapInit+0xb4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	1ad2      	subs	r2, r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ce4:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvHeapInit+0xb4>)
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <prvHeapInit+0xb8>)
 8008cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <prvHeapInit+0xbc>)
 8008cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <prvHeapInit+0xc0>)
 8008cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	20001cfc 	.word	0x20001cfc
 8008d14:	200058fc 	.word	0x200058fc
 8008d18:	20005904 	.word	0x20005904
 8008d1c:	2000590c 	.word	0x2000590c
 8008d20:	20005908 	.word	0x20005908
 8008d24:	20005918 	.word	0x20005918

08008d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d30:	4b28      	ldr	r3, [pc, #160]	; (8008dd4 <prvInsertBlockIntoFreeList+0xac>)
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e002      	b.n	8008d3c <prvInsertBlockIntoFreeList+0x14>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d8f7      	bhi.n	8008d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	4413      	add	r3, r2
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d108      	bne.n	8008d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	441a      	add	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	441a      	add	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d118      	bne.n	8008db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b15      	ldr	r3, [pc, #84]	; (8008dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d00d      	beq.n	8008da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	441a      	add	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e008      	b.n	8008db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008da6:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	e003      	b.n	8008db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d002      	beq.n	8008dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	200058fc 	.word	0x200058fc
 8008dd8:	20005904 	.word	0x20005904

08008ddc <malloc>:
 8008ddc:	4b02      	ldr	r3, [pc, #8]	; (8008de8 <malloc+0xc>)
 8008dde:	4601      	mov	r1, r0
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f000 b823 	b.w	8008e2c <_malloc_r>
 8008de6:	bf00      	nop
 8008de8:	200001d8 	.word	0x200001d8

08008dec <sbrk_aligned>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4e0e      	ldr	r6, [pc, #56]	; (8008e28 <sbrk_aligned+0x3c>)
 8008df0:	460c      	mov	r4, r1
 8008df2:	6831      	ldr	r1, [r6, #0]
 8008df4:	4605      	mov	r5, r0
 8008df6:	b911      	cbnz	r1, 8008dfe <sbrk_aligned+0x12>
 8008df8:	f001 ff64 	bl	800acc4 <_sbrk_r>
 8008dfc:	6030      	str	r0, [r6, #0]
 8008dfe:	4621      	mov	r1, r4
 8008e00:	4628      	mov	r0, r5
 8008e02:	f001 ff5f 	bl	800acc4 <_sbrk_r>
 8008e06:	1c43      	adds	r3, r0, #1
 8008e08:	d00a      	beq.n	8008e20 <sbrk_aligned+0x34>
 8008e0a:	1cc4      	adds	r4, r0, #3
 8008e0c:	f024 0403 	bic.w	r4, r4, #3
 8008e10:	42a0      	cmp	r0, r4
 8008e12:	d007      	beq.n	8008e24 <sbrk_aligned+0x38>
 8008e14:	1a21      	subs	r1, r4, r0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f001 ff54 	bl	800acc4 <_sbrk_r>
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d101      	bne.n	8008e24 <sbrk_aligned+0x38>
 8008e20:	f04f 34ff 	mov.w	r4, #4294967295
 8008e24:	4620      	mov	r0, r4
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	20005920 	.word	0x20005920

08008e2c <_malloc_r>:
 8008e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e30:	1ccd      	adds	r5, r1, #3
 8008e32:	f025 0503 	bic.w	r5, r5, #3
 8008e36:	3508      	adds	r5, #8
 8008e38:	2d0c      	cmp	r5, #12
 8008e3a:	bf38      	it	cc
 8008e3c:	250c      	movcc	r5, #12
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	4607      	mov	r7, r0
 8008e42:	db01      	blt.n	8008e48 <_malloc_r+0x1c>
 8008e44:	42a9      	cmp	r1, r5
 8008e46:	d905      	bls.n	8008e54 <_malloc_r+0x28>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	2600      	movs	r6, #0
 8008e4e:	4630      	mov	r0, r6
 8008e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f28 <_malloc_r+0xfc>
 8008e58:	f000 f868 	bl	8008f2c <__malloc_lock>
 8008e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008e60:	461c      	mov	r4, r3
 8008e62:	bb5c      	cbnz	r4, 8008ebc <_malloc_r+0x90>
 8008e64:	4629      	mov	r1, r5
 8008e66:	4638      	mov	r0, r7
 8008e68:	f7ff ffc0 	bl	8008dec <sbrk_aligned>
 8008e6c:	1c43      	adds	r3, r0, #1
 8008e6e:	4604      	mov	r4, r0
 8008e70:	d155      	bne.n	8008f1e <_malloc_r+0xf2>
 8008e72:	f8d8 4000 	ldr.w	r4, [r8]
 8008e76:	4626      	mov	r6, r4
 8008e78:	2e00      	cmp	r6, #0
 8008e7a:	d145      	bne.n	8008f08 <_malloc_r+0xdc>
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	d048      	beq.n	8008f12 <_malloc_r+0xe6>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	4631      	mov	r1, r6
 8008e84:	4638      	mov	r0, r7
 8008e86:	eb04 0903 	add.w	r9, r4, r3
 8008e8a:	f001 ff1b 	bl	800acc4 <_sbrk_r>
 8008e8e:	4581      	cmp	r9, r0
 8008e90:	d13f      	bne.n	8008f12 <_malloc_r+0xe6>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	1a6d      	subs	r5, r5, r1
 8008e96:	4629      	mov	r1, r5
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ffa7 	bl	8008dec <sbrk_aligned>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	d037      	beq.n	8008f12 <_malloc_r+0xe6>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	442b      	add	r3, r5
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d038      	beq.n	8008f22 <_malloc_r+0xf6>
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	42a2      	cmp	r2, r4
 8008eb4:	d12b      	bne.n	8008f0e <_malloc_r+0xe2>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	e00f      	b.n	8008edc <_malloc_r+0xb0>
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	1b52      	subs	r2, r2, r5
 8008ec0:	d41f      	bmi.n	8008f02 <_malloc_r+0xd6>
 8008ec2:	2a0b      	cmp	r2, #11
 8008ec4:	d917      	bls.n	8008ef6 <_malloc_r+0xca>
 8008ec6:	1961      	adds	r1, r4, r5
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	6025      	str	r5, [r4, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	6059      	strne	r1, [r3, #4]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	bf08      	it	eq
 8008ed4:	f8c8 1000 	streq.w	r1, [r8]
 8008ed8:	5162      	str	r2, [r4, r5]
 8008eda:	604b      	str	r3, [r1, #4]
 8008edc:	4638      	mov	r0, r7
 8008ede:	f104 060b 	add.w	r6, r4, #11
 8008ee2:	f000 f829 	bl	8008f38 <__malloc_unlock>
 8008ee6:	f026 0607 	bic.w	r6, r6, #7
 8008eea:	1d23      	adds	r3, r4, #4
 8008eec:	1af2      	subs	r2, r6, r3
 8008eee:	d0ae      	beq.n	8008e4e <_malloc_r+0x22>
 8008ef0:	1b9b      	subs	r3, r3, r6
 8008ef2:	50a3      	str	r3, [r4, r2]
 8008ef4:	e7ab      	b.n	8008e4e <_malloc_r+0x22>
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	d1dd      	bne.n	8008eb8 <_malloc_r+0x8c>
 8008efc:	f8c8 2000 	str.w	r2, [r8]
 8008f00:	e7ec      	b.n	8008edc <_malloc_r+0xb0>
 8008f02:	4623      	mov	r3, r4
 8008f04:	6864      	ldr	r4, [r4, #4]
 8008f06:	e7ac      	b.n	8008e62 <_malloc_r+0x36>
 8008f08:	4634      	mov	r4, r6
 8008f0a:	6876      	ldr	r6, [r6, #4]
 8008f0c:	e7b4      	b.n	8008e78 <_malloc_r+0x4c>
 8008f0e:	4613      	mov	r3, r2
 8008f10:	e7cc      	b.n	8008eac <_malloc_r+0x80>
 8008f12:	230c      	movs	r3, #12
 8008f14:	603b      	str	r3, [r7, #0]
 8008f16:	4638      	mov	r0, r7
 8008f18:	f000 f80e 	bl	8008f38 <__malloc_unlock>
 8008f1c:	e797      	b.n	8008e4e <_malloc_r+0x22>
 8008f1e:	6025      	str	r5, [r4, #0]
 8008f20:	e7dc      	b.n	8008edc <_malloc_r+0xb0>
 8008f22:	605b      	str	r3, [r3, #4]
 8008f24:	deff      	udf	#255	; 0xff
 8008f26:	bf00      	nop
 8008f28:	2000591c 	.word	0x2000591c

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f001 bf16 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20005a64 	.word	0x20005a64

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f001 bf11 	b.w	800ad60 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20005a64 	.word	0x20005a64

08008f44 <_realloc_r>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	460e      	mov	r6, r1
 8008f4e:	b921      	cbnz	r1, 8008f5a <_realloc_r+0x16>
 8008f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f54:	4611      	mov	r1, r2
 8008f56:	f7ff bf69 	b.w	8008e2c <_malloc_r>
 8008f5a:	b92a      	cbnz	r2, 8008f68 <_realloc_r+0x24>
 8008f5c:	f002 fd9a 	bl	800ba94 <_free_r>
 8008f60:	4625      	mov	r5, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	f003 fdf7 	bl	800cb5a <_malloc_usable_size_r>
 8008f6c:	4284      	cmp	r4, r0
 8008f6e:	4607      	mov	r7, r0
 8008f70:	d802      	bhi.n	8008f78 <_realloc_r+0x34>
 8008f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f76:	d812      	bhi.n	8008f9e <_realloc_r+0x5a>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f7ff ff56 	bl	8008e2c <_malloc_r>
 8008f80:	4605      	mov	r5, r0
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d0ed      	beq.n	8008f62 <_realloc_r+0x1e>
 8008f86:	42bc      	cmp	r4, r7
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	bf28      	it	cs
 8008f8e:	463a      	movcs	r2, r7
 8008f90:	f001 fee7 	bl	800ad62 <memcpy>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4640      	mov	r0, r8
 8008f98:	f002 fd7c 	bl	800ba94 <_free_r>
 8008f9c:	e7e1      	b.n	8008f62 <_realloc_r+0x1e>
 8008f9e:	4635      	mov	r5, r6
 8008fa0:	e7df      	b.n	8008f62 <_realloc_r+0x1e>

08008fa2 <sulp>:
 8008fa2:	b570      	push	{r4, r5, r6, lr}
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	ec45 4b10 	vmov	d0, r4, r5
 8008fac:	4616      	mov	r6, r2
 8008fae:	f003 fc93 	bl	800c8d8 <__ulp>
 8008fb2:	ec51 0b10 	vmov	r0, r1, d0
 8008fb6:	b17e      	cbz	r6, 8008fd8 <sulp+0x36>
 8008fb8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dd09      	ble.n	8008fd8 <sulp+0x36>
 8008fc4:	051b      	lsls	r3, r3, #20
 8008fc6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008fca:	2400      	movs	r4, #0
 8008fcc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008fd0:	4622      	mov	r2, r4
 8008fd2:	462b      	mov	r3, r5
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	0000      	movs	r0, r0
 8008fdc:	0000      	movs	r0, r0
	...

08008fe0 <_strtod_l>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ed2d 8b02 	vpush	{d8}
 8008fe8:	b09b      	sub	sp, #108	; 0x6c
 8008fea:	4604      	mov	r4, r0
 8008fec:	9213      	str	r2, [sp, #76]	; 0x4c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	9216      	str	r2, [sp, #88]	; 0x58
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	f04f 0800 	mov.w	r8, #0
 8008ff8:	f04f 0900 	mov.w	r9, #0
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	9215      	str	r2, [sp, #84]	; 0x54
 8009000:	7811      	ldrb	r1, [r2, #0]
 8009002:	292b      	cmp	r1, #43	; 0x2b
 8009004:	d04c      	beq.n	80090a0 <_strtod_l+0xc0>
 8009006:	d83a      	bhi.n	800907e <_strtod_l+0x9e>
 8009008:	290d      	cmp	r1, #13
 800900a:	d834      	bhi.n	8009076 <_strtod_l+0x96>
 800900c:	2908      	cmp	r1, #8
 800900e:	d834      	bhi.n	800907a <_strtod_l+0x9a>
 8009010:	2900      	cmp	r1, #0
 8009012:	d03d      	beq.n	8009090 <_strtod_l+0xb0>
 8009014:	2200      	movs	r2, #0
 8009016:	920a      	str	r2, [sp, #40]	; 0x28
 8009018:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800901a:	7832      	ldrb	r2, [r6, #0]
 800901c:	2a30      	cmp	r2, #48	; 0x30
 800901e:	f040 80b4 	bne.w	800918a <_strtod_l+0x1aa>
 8009022:	7872      	ldrb	r2, [r6, #1]
 8009024:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009028:	2a58      	cmp	r2, #88	; 0x58
 800902a:	d170      	bne.n	800910e <_strtod_l+0x12e>
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	ab16      	add	r3, sp, #88	; 0x58
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	4a8e      	ldr	r2, [pc, #568]	; (8009270 <_strtod_l+0x290>)
 8009038:	ab17      	add	r3, sp, #92	; 0x5c
 800903a:	a915      	add	r1, sp, #84	; 0x54
 800903c:	4620      	mov	r0, r4
 800903e:	f002 fddd 	bl	800bbfc <__gethex>
 8009042:	f010 070f 	ands.w	r7, r0, #15
 8009046:	4605      	mov	r5, r0
 8009048:	d005      	beq.n	8009056 <_strtod_l+0x76>
 800904a:	2f06      	cmp	r7, #6
 800904c:	d12a      	bne.n	80090a4 <_strtod_l+0xc4>
 800904e:	3601      	adds	r6, #1
 8009050:	2300      	movs	r3, #0
 8009052:	9615      	str	r6, [sp, #84]	; 0x54
 8009054:	930a      	str	r3, [sp, #40]	; 0x28
 8009056:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009058:	2b00      	cmp	r3, #0
 800905a:	f040 857f 	bne.w	8009b5c <_strtod_l+0xb7c>
 800905e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009060:	b1db      	cbz	r3, 800909a <_strtod_l+0xba>
 8009062:	4642      	mov	r2, r8
 8009064:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009068:	ec43 2b10 	vmov	d0, r2, r3
 800906c:	b01b      	add	sp, #108	; 0x6c
 800906e:	ecbd 8b02 	vpop	{d8}
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	2920      	cmp	r1, #32
 8009078:	d1cc      	bne.n	8009014 <_strtod_l+0x34>
 800907a:	3201      	adds	r2, #1
 800907c:	e7bf      	b.n	8008ffe <_strtod_l+0x1e>
 800907e:	292d      	cmp	r1, #45	; 0x2d
 8009080:	d1c8      	bne.n	8009014 <_strtod_l+0x34>
 8009082:	2101      	movs	r1, #1
 8009084:	910a      	str	r1, [sp, #40]	; 0x28
 8009086:	1c51      	adds	r1, r2, #1
 8009088:	9115      	str	r1, [sp, #84]	; 0x54
 800908a:	7852      	ldrb	r2, [r2, #1]
 800908c:	2a00      	cmp	r2, #0
 800908e:	d1c3      	bne.n	8009018 <_strtod_l+0x38>
 8009090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009092:	9515      	str	r5, [sp, #84]	; 0x54
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 855f 	bne.w	8009b58 <_strtod_l+0xb78>
 800909a:	4642      	mov	r2, r8
 800909c:	464b      	mov	r3, r9
 800909e:	e7e3      	b.n	8009068 <_strtod_l+0x88>
 80090a0:	2100      	movs	r1, #0
 80090a2:	e7ef      	b.n	8009084 <_strtod_l+0xa4>
 80090a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090a6:	b13a      	cbz	r2, 80090b8 <_strtod_l+0xd8>
 80090a8:	2135      	movs	r1, #53	; 0x35
 80090aa:	a818      	add	r0, sp, #96	; 0x60
 80090ac:	f003 fd11 	bl	800cad2 <__copybits>
 80090b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090b2:	4620      	mov	r0, r4
 80090b4:	f003 f8e4 	bl	800c280 <_Bfree>
 80090b8:	3f01      	subs	r7, #1
 80090ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090bc:	2f04      	cmp	r7, #4
 80090be:	d806      	bhi.n	80090ce <_strtod_l+0xee>
 80090c0:	e8df f007 	tbb	[pc, r7]
 80090c4:	201d0314 	.word	0x201d0314
 80090c8:	14          	.byte	0x14
 80090c9:	00          	.byte	0x00
 80090ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80090ce:	05e9      	lsls	r1, r5, #23
 80090d0:	bf48      	it	mi
 80090d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80090d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090da:	0d1b      	lsrs	r3, r3, #20
 80090dc:	051b      	lsls	r3, r3, #20
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1b9      	bne.n	8009056 <_strtod_l+0x76>
 80090e2:	f001 fe11 	bl	800ad08 <__errno>
 80090e6:	2322      	movs	r3, #34	; 0x22
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	e7b4      	b.n	8009056 <_strtod_l+0x76>
 80090ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80090f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80090f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80090f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80090fc:	e7e7      	b.n	80090ce <_strtod_l+0xee>
 80090fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009278 <_strtod_l+0x298>
 8009102:	e7e4      	b.n	80090ce <_strtod_l+0xee>
 8009104:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009108:	f04f 38ff 	mov.w	r8, #4294967295
 800910c:	e7df      	b.n	80090ce <_strtod_l+0xee>
 800910e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	9215      	str	r2, [sp, #84]	; 0x54
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	2b30      	cmp	r3, #48	; 0x30
 8009118:	d0f9      	beq.n	800910e <_strtod_l+0x12e>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d09b      	beq.n	8009056 <_strtod_l+0x76>
 800911e:	2301      	movs	r3, #1
 8009120:	f04f 0a00 	mov.w	sl, #0
 8009124:	9304      	str	r3, [sp, #16]
 8009126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009128:	930b      	str	r3, [sp, #44]	; 0x2c
 800912a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800912e:	46d3      	mov	fp, sl
 8009130:	220a      	movs	r2, #10
 8009132:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009134:	7806      	ldrb	r6, [r0, #0]
 8009136:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800913a:	b2d9      	uxtb	r1, r3
 800913c:	2909      	cmp	r1, #9
 800913e:	d926      	bls.n	800918e <_strtod_l+0x1ae>
 8009140:	494c      	ldr	r1, [pc, #304]	; (8009274 <_strtod_l+0x294>)
 8009142:	2201      	movs	r2, #1
 8009144:	f001 fd33 	bl	800abae <strncmp>
 8009148:	2800      	cmp	r0, #0
 800914a:	d030      	beq.n	80091ae <_strtod_l+0x1ce>
 800914c:	2000      	movs	r0, #0
 800914e:	4632      	mov	r2, r6
 8009150:	9005      	str	r0, [sp, #20]
 8009152:	465e      	mov	r6, fp
 8009154:	4603      	mov	r3, r0
 8009156:	2a65      	cmp	r2, #101	; 0x65
 8009158:	d001      	beq.n	800915e <_strtod_l+0x17e>
 800915a:	2a45      	cmp	r2, #69	; 0x45
 800915c:	d113      	bne.n	8009186 <_strtod_l+0x1a6>
 800915e:	b91e      	cbnz	r6, 8009168 <_strtod_l+0x188>
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	4302      	orrs	r2, r0
 8009164:	d094      	beq.n	8009090 <_strtod_l+0xb0>
 8009166:	2600      	movs	r6, #0
 8009168:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800916a:	1c6a      	adds	r2, r5, #1
 800916c:	9215      	str	r2, [sp, #84]	; 0x54
 800916e:	786a      	ldrb	r2, [r5, #1]
 8009170:	2a2b      	cmp	r2, #43	; 0x2b
 8009172:	d074      	beq.n	800925e <_strtod_l+0x27e>
 8009174:	2a2d      	cmp	r2, #45	; 0x2d
 8009176:	d078      	beq.n	800926a <_strtod_l+0x28a>
 8009178:	f04f 0c00 	mov.w	ip, #0
 800917c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009180:	2909      	cmp	r1, #9
 8009182:	d97f      	bls.n	8009284 <_strtod_l+0x2a4>
 8009184:	9515      	str	r5, [sp, #84]	; 0x54
 8009186:	2700      	movs	r7, #0
 8009188:	e09e      	b.n	80092c8 <_strtod_l+0x2e8>
 800918a:	2300      	movs	r3, #0
 800918c:	e7c8      	b.n	8009120 <_strtod_l+0x140>
 800918e:	f1bb 0f08 	cmp.w	fp, #8
 8009192:	bfd8      	it	le
 8009194:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009196:	f100 0001 	add.w	r0, r0, #1
 800919a:	bfda      	itte	le
 800919c:	fb02 3301 	mlale	r3, r2, r1, r3
 80091a0:	9309      	strle	r3, [sp, #36]	; 0x24
 80091a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80091a6:	f10b 0b01 	add.w	fp, fp, #1
 80091aa:	9015      	str	r0, [sp, #84]	; 0x54
 80091ac:	e7c1      	b.n	8009132 <_strtod_l+0x152>
 80091ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	9215      	str	r2, [sp, #84]	; 0x54
 80091b4:	785a      	ldrb	r2, [r3, #1]
 80091b6:	f1bb 0f00 	cmp.w	fp, #0
 80091ba:	d037      	beq.n	800922c <_strtod_l+0x24c>
 80091bc:	9005      	str	r0, [sp, #20]
 80091be:	465e      	mov	r6, fp
 80091c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d912      	bls.n	80091ee <_strtod_l+0x20e>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7c4      	b.n	8009156 <_strtod_l+0x176>
 80091cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	9215      	str	r2, [sp, #84]	; 0x54
 80091d2:	785a      	ldrb	r2, [r3, #1]
 80091d4:	3001      	adds	r0, #1
 80091d6:	2a30      	cmp	r2, #48	; 0x30
 80091d8:	d0f8      	beq.n	80091cc <_strtod_l+0x1ec>
 80091da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80091de:	2b08      	cmp	r3, #8
 80091e0:	f200 84c1 	bhi.w	8009b66 <_strtod_l+0xb86>
 80091e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091e6:	9005      	str	r0, [sp, #20]
 80091e8:	2000      	movs	r0, #0
 80091ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ec:	4606      	mov	r6, r0
 80091ee:	3a30      	subs	r2, #48	; 0x30
 80091f0:	f100 0301 	add.w	r3, r0, #1
 80091f4:	d014      	beq.n	8009220 <_strtod_l+0x240>
 80091f6:	9905      	ldr	r1, [sp, #20]
 80091f8:	4419      	add	r1, r3
 80091fa:	9105      	str	r1, [sp, #20]
 80091fc:	4633      	mov	r3, r6
 80091fe:	eb00 0c06 	add.w	ip, r0, r6
 8009202:	210a      	movs	r1, #10
 8009204:	4563      	cmp	r3, ip
 8009206:	d113      	bne.n	8009230 <_strtod_l+0x250>
 8009208:	1833      	adds	r3, r6, r0
 800920a:	2b08      	cmp	r3, #8
 800920c:	f106 0601 	add.w	r6, r6, #1
 8009210:	4406      	add	r6, r0
 8009212:	dc1a      	bgt.n	800924a <_strtod_l+0x26a>
 8009214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009216:	230a      	movs	r3, #10
 8009218:	fb03 2301 	mla	r3, r3, r1, r2
 800921c:	9309      	str	r3, [sp, #36]	; 0x24
 800921e:	2300      	movs	r3, #0
 8009220:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009222:	1c51      	adds	r1, r2, #1
 8009224:	9115      	str	r1, [sp, #84]	; 0x54
 8009226:	7852      	ldrb	r2, [r2, #1]
 8009228:	4618      	mov	r0, r3
 800922a:	e7c9      	b.n	80091c0 <_strtod_l+0x1e0>
 800922c:	4658      	mov	r0, fp
 800922e:	e7d2      	b.n	80091d6 <_strtod_l+0x1f6>
 8009230:	2b08      	cmp	r3, #8
 8009232:	f103 0301 	add.w	r3, r3, #1
 8009236:	dc03      	bgt.n	8009240 <_strtod_l+0x260>
 8009238:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800923a:	434f      	muls	r7, r1
 800923c:	9709      	str	r7, [sp, #36]	; 0x24
 800923e:	e7e1      	b.n	8009204 <_strtod_l+0x224>
 8009240:	2b10      	cmp	r3, #16
 8009242:	bfd8      	it	le
 8009244:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009248:	e7dc      	b.n	8009204 <_strtod_l+0x224>
 800924a:	2e10      	cmp	r6, #16
 800924c:	bfdc      	itt	le
 800924e:	230a      	movle	r3, #10
 8009250:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009254:	e7e3      	b.n	800921e <_strtod_l+0x23e>
 8009256:	2300      	movs	r3, #0
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	2301      	movs	r3, #1
 800925c:	e780      	b.n	8009160 <_strtod_l+0x180>
 800925e:	f04f 0c00 	mov.w	ip, #0
 8009262:	1caa      	adds	r2, r5, #2
 8009264:	9215      	str	r2, [sp, #84]	; 0x54
 8009266:	78aa      	ldrb	r2, [r5, #2]
 8009268:	e788      	b.n	800917c <_strtod_l+0x19c>
 800926a:	f04f 0c01 	mov.w	ip, #1
 800926e:	e7f8      	b.n	8009262 <_strtod_l+0x282>
 8009270:	0800e0d4 	.word	0x0800e0d4
 8009274:	0800e0d0 	.word	0x0800e0d0
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800927e:	1c51      	adds	r1, r2, #1
 8009280:	9115      	str	r1, [sp, #84]	; 0x54
 8009282:	7852      	ldrb	r2, [r2, #1]
 8009284:	2a30      	cmp	r2, #48	; 0x30
 8009286:	d0f9      	beq.n	800927c <_strtod_l+0x29c>
 8009288:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800928c:	2908      	cmp	r1, #8
 800928e:	f63f af7a 	bhi.w	8009186 <_strtod_l+0x1a6>
 8009292:	3a30      	subs	r2, #48	; 0x30
 8009294:	9208      	str	r2, [sp, #32]
 8009296:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009298:	920c      	str	r2, [sp, #48]	; 0x30
 800929a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800929c:	1c57      	adds	r7, r2, #1
 800929e:	9715      	str	r7, [sp, #84]	; 0x54
 80092a0:	7852      	ldrb	r2, [r2, #1]
 80092a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80092a6:	f1be 0f09 	cmp.w	lr, #9
 80092aa:	d938      	bls.n	800931e <_strtod_l+0x33e>
 80092ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80092ae:	1a7f      	subs	r7, r7, r1
 80092b0:	2f08      	cmp	r7, #8
 80092b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80092b6:	dc03      	bgt.n	80092c0 <_strtod_l+0x2e0>
 80092b8:	9908      	ldr	r1, [sp, #32]
 80092ba:	428f      	cmp	r7, r1
 80092bc:	bfa8      	it	ge
 80092be:	460f      	movge	r7, r1
 80092c0:	f1bc 0f00 	cmp.w	ip, #0
 80092c4:	d000      	beq.n	80092c8 <_strtod_l+0x2e8>
 80092c6:	427f      	negs	r7, r7
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d14f      	bne.n	800936c <_strtod_l+0x38c>
 80092cc:	9904      	ldr	r1, [sp, #16]
 80092ce:	4301      	orrs	r1, r0
 80092d0:	f47f aec1 	bne.w	8009056 <_strtod_l+0x76>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f47f aedb 	bne.w	8009090 <_strtod_l+0xb0>
 80092da:	2a69      	cmp	r2, #105	; 0x69
 80092dc:	d029      	beq.n	8009332 <_strtod_l+0x352>
 80092de:	dc26      	bgt.n	800932e <_strtod_l+0x34e>
 80092e0:	2a49      	cmp	r2, #73	; 0x49
 80092e2:	d026      	beq.n	8009332 <_strtod_l+0x352>
 80092e4:	2a4e      	cmp	r2, #78	; 0x4e
 80092e6:	f47f aed3 	bne.w	8009090 <_strtod_l+0xb0>
 80092ea:	499b      	ldr	r1, [pc, #620]	; (8009558 <_strtod_l+0x578>)
 80092ec:	a815      	add	r0, sp, #84	; 0x54
 80092ee:	f002 fec5 	bl	800c07c <__match>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f aecc 	beq.w	8009090 <_strtod_l+0xb0>
 80092f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b28      	cmp	r3, #40	; 0x28
 80092fe:	d12f      	bne.n	8009360 <_strtod_l+0x380>
 8009300:	4996      	ldr	r1, [pc, #600]	; (800955c <_strtod_l+0x57c>)
 8009302:	aa18      	add	r2, sp, #96	; 0x60
 8009304:	a815      	add	r0, sp, #84	; 0x54
 8009306:	f002 fecd 	bl	800c0a4 <__hexnan>
 800930a:	2805      	cmp	r0, #5
 800930c:	d128      	bne.n	8009360 <_strtod_l+0x380>
 800930e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009314:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009318:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800931c:	e69b      	b.n	8009056 <_strtod_l+0x76>
 800931e:	9f08      	ldr	r7, [sp, #32]
 8009320:	210a      	movs	r1, #10
 8009322:	fb01 2107 	mla	r1, r1, r7, r2
 8009326:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800932a:	9208      	str	r2, [sp, #32]
 800932c:	e7b5      	b.n	800929a <_strtod_l+0x2ba>
 800932e:	2a6e      	cmp	r2, #110	; 0x6e
 8009330:	e7d9      	b.n	80092e6 <_strtod_l+0x306>
 8009332:	498b      	ldr	r1, [pc, #556]	; (8009560 <_strtod_l+0x580>)
 8009334:	a815      	add	r0, sp, #84	; 0x54
 8009336:	f002 fea1 	bl	800c07c <__match>
 800933a:	2800      	cmp	r0, #0
 800933c:	f43f aea8 	beq.w	8009090 <_strtod_l+0xb0>
 8009340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009342:	4988      	ldr	r1, [pc, #544]	; (8009564 <_strtod_l+0x584>)
 8009344:	3b01      	subs	r3, #1
 8009346:	a815      	add	r0, sp, #84	; 0x54
 8009348:	9315      	str	r3, [sp, #84]	; 0x54
 800934a:	f002 fe97 	bl	800c07c <__match>
 800934e:	b910      	cbnz	r0, 8009356 <_strtod_l+0x376>
 8009350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009352:	3301      	adds	r3, #1
 8009354:	9315      	str	r3, [sp, #84]	; 0x54
 8009356:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009574 <_strtod_l+0x594>
 800935a:	f04f 0800 	mov.w	r8, #0
 800935e:	e67a      	b.n	8009056 <_strtod_l+0x76>
 8009360:	4881      	ldr	r0, [pc, #516]	; (8009568 <_strtod_l+0x588>)
 8009362:	f001 fd0d 	bl	800ad80 <nan>
 8009366:	ec59 8b10 	vmov	r8, r9, d0
 800936a:	e674      	b.n	8009056 <_strtod_l+0x76>
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009370:	1afb      	subs	r3, r7, r3
 8009372:	f1bb 0f00 	cmp.w	fp, #0
 8009376:	bf08      	it	eq
 8009378:	46b3      	moveq	fp, r6
 800937a:	2e10      	cmp	r6, #16
 800937c:	9308      	str	r3, [sp, #32]
 800937e:	4635      	mov	r5, r6
 8009380:	bfa8      	it	ge
 8009382:	2510      	movge	r5, #16
 8009384:	f7f7 f8be 	bl	8000504 <__aeabi_ui2d>
 8009388:	2e09      	cmp	r6, #9
 800938a:	4680      	mov	r8, r0
 800938c:	4689      	mov	r9, r1
 800938e:	dd13      	ble.n	80093b8 <_strtod_l+0x3d8>
 8009390:	4b76      	ldr	r3, [pc, #472]	; (800956c <_strtod_l+0x58c>)
 8009392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009396:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800939a:	f7f7 f92d 	bl	80005f8 <__aeabi_dmul>
 800939e:	4680      	mov	r8, r0
 80093a0:	4650      	mov	r0, sl
 80093a2:	4689      	mov	r9, r1
 80093a4:	f7f7 f8ae 	bl	8000504 <__aeabi_ui2d>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f6 ff6c 	bl	800028c <__adddf3>
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	2e0f      	cmp	r6, #15
 80093ba:	dc38      	bgt.n	800942e <_strtod_l+0x44e>
 80093bc:	9b08      	ldr	r3, [sp, #32]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f43f ae49 	beq.w	8009056 <_strtod_l+0x76>
 80093c4:	dd24      	ble.n	8009410 <_strtod_l+0x430>
 80093c6:	2b16      	cmp	r3, #22
 80093c8:	dc0b      	bgt.n	80093e2 <_strtod_l+0x402>
 80093ca:	4968      	ldr	r1, [pc, #416]	; (800956c <_strtod_l+0x58c>)
 80093cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d4:	4642      	mov	r2, r8
 80093d6:	464b      	mov	r3, r9
 80093d8:	f7f7 f90e 	bl	80005f8 <__aeabi_dmul>
 80093dc:	4680      	mov	r8, r0
 80093de:	4689      	mov	r9, r1
 80093e0:	e639      	b.n	8009056 <_strtod_l+0x76>
 80093e2:	9a08      	ldr	r2, [sp, #32]
 80093e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80093e8:	4293      	cmp	r3, r2
 80093ea:	db20      	blt.n	800942e <_strtod_l+0x44e>
 80093ec:	4c5f      	ldr	r4, [pc, #380]	; (800956c <_strtod_l+0x58c>)
 80093ee:	f1c6 060f 	rsb	r6, r6, #15
 80093f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80093f6:	4642      	mov	r2, r8
 80093f8:	464b      	mov	r3, r9
 80093fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fe:	f7f7 f8fb 	bl	80005f8 <__aeabi_dmul>
 8009402:	9b08      	ldr	r3, [sp, #32]
 8009404:	1b9e      	subs	r6, r3, r6
 8009406:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800940a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800940e:	e7e3      	b.n	80093d8 <_strtod_l+0x3f8>
 8009410:	9b08      	ldr	r3, [sp, #32]
 8009412:	3316      	adds	r3, #22
 8009414:	db0b      	blt.n	800942e <_strtod_l+0x44e>
 8009416:	9b05      	ldr	r3, [sp, #20]
 8009418:	1bdf      	subs	r7, r3, r7
 800941a:	4b54      	ldr	r3, [pc, #336]	; (800956c <_strtod_l+0x58c>)
 800941c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 fa10 	bl	800084c <__aeabi_ddiv>
 800942c:	e7d6      	b.n	80093dc <_strtod_l+0x3fc>
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	1b75      	subs	r5, r6, r5
 8009432:	441d      	add	r5, r3
 8009434:	2d00      	cmp	r5, #0
 8009436:	dd70      	ble.n	800951a <_strtod_l+0x53a>
 8009438:	f015 030f 	ands.w	r3, r5, #15
 800943c:	d00a      	beq.n	8009454 <_strtod_l+0x474>
 800943e:	494b      	ldr	r1, [pc, #300]	; (800956c <_strtod_l+0x58c>)
 8009440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009444:	4642      	mov	r2, r8
 8009446:	464b      	mov	r3, r9
 8009448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	4680      	mov	r8, r0
 8009452:	4689      	mov	r9, r1
 8009454:	f035 050f 	bics.w	r5, r5, #15
 8009458:	d04d      	beq.n	80094f6 <_strtod_l+0x516>
 800945a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800945e:	dd22      	ble.n	80094a6 <_strtod_l+0x4c6>
 8009460:	2500      	movs	r5, #0
 8009462:	46ab      	mov	fp, r5
 8009464:	9509      	str	r5, [sp, #36]	; 0x24
 8009466:	9505      	str	r5, [sp, #20]
 8009468:	2322      	movs	r3, #34	; 0x22
 800946a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009574 <_strtod_l+0x594>
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	f04f 0800 	mov.w	r8, #0
 8009474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	f43f aded 	beq.w	8009056 <_strtod_l+0x76>
 800947c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800947e:	4620      	mov	r0, r4
 8009480:	f002 fefe 	bl	800c280 <_Bfree>
 8009484:	9905      	ldr	r1, [sp, #20]
 8009486:	4620      	mov	r0, r4
 8009488:	f002 fefa 	bl	800c280 <_Bfree>
 800948c:	4659      	mov	r1, fp
 800948e:	4620      	mov	r0, r4
 8009490:	f002 fef6 	bl	800c280 <_Bfree>
 8009494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009496:	4620      	mov	r0, r4
 8009498:	f002 fef2 	bl	800c280 <_Bfree>
 800949c:	4629      	mov	r1, r5
 800949e:	4620      	mov	r0, r4
 80094a0:	f002 feee 	bl	800c280 <_Bfree>
 80094a4:	e5d7      	b.n	8009056 <_strtod_l+0x76>
 80094a6:	4b32      	ldr	r3, [pc, #200]	; (8009570 <_strtod_l+0x590>)
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	2300      	movs	r3, #0
 80094ac:	112d      	asrs	r5, r5, #4
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	469a      	mov	sl, r3
 80094b4:	2d01      	cmp	r5, #1
 80094b6:	dc21      	bgt.n	80094fc <_strtod_l+0x51c>
 80094b8:	b10b      	cbz	r3, 80094be <_strtod_l+0x4de>
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	492c      	ldr	r1, [pc, #176]	; (8009570 <_strtod_l+0x590>)
 80094c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80094c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094c8:	4642      	mov	r2, r8
 80094ca:	464b      	mov	r3, r9
 80094cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d0:	f7f7 f892 	bl	80005f8 <__aeabi_dmul>
 80094d4:	4b27      	ldr	r3, [pc, #156]	; (8009574 <_strtod_l+0x594>)
 80094d6:	460a      	mov	r2, r1
 80094d8:	400b      	ands	r3, r1
 80094da:	4927      	ldr	r1, [pc, #156]	; (8009578 <_strtod_l+0x598>)
 80094dc:	428b      	cmp	r3, r1
 80094de:	4680      	mov	r8, r0
 80094e0:	d8be      	bhi.n	8009460 <_strtod_l+0x480>
 80094e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80094e6:	428b      	cmp	r3, r1
 80094e8:	bf86      	itte	hi
 80094ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800957c <_strtod_l+0x59c>
 80094ee:	f04f 38ff 	movhi.w	r8, #4294967295
 80094f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80094f6:	2300      	movs	r3, #0
 80094f8:	9304      	str	r3, [sp, #16]
 80094fa:	e07b      	b.n	80095f4 <_strtod_l+0x614>
 80094fc:	07ea      	lsls	r2, r5, #31
 80094fe:	d505      	bpl.n	800950c <_strtod_l+0x52c>
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f7f7 f877 	bl	80005f8 <__aeabi_dmul>
 800950a:	2301      	movs	r3, #1
 800950c:	9a04      	ldr	r2, [sp, #16]
 800950e:	3208      	adds	r2, #8
 8009510:	f10a 0a01 	add.w	sl, sl, #1
 8009514:	106d      	asrs	r5, r5, #1
 8009516:	9204      	str	r2, [sp, #16]
 8009518:	e7cc      	b.n	80094b4 <_strtod_l+0x4d4>
 800951a:	d0ec      	beq.n	80094f6 <_strtod_l+0x516>
 800951c:	426d      	negs	r5, r5
 800951e:	f015 020f 	ands.w	r2, r5, #15
 8009522:	d00a      	beq.n	800953a <_strtod_l+0x55a>
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <_strtod_l+0x58c>)
 8009526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f7 f98b 	bl	800084c <__aeabi_ddiv>
 8009536:	4680      	mov	r8, r0
 8009538:	4689      	mov	r9, r1
 800953a:	112d      	asrs	r5, r5, #4
 800953c:	d0db      	beq.n	80094f6 <_strtod_l+0x516>
 800953e:	2d1f      	cmp	r5, #31
 8009540:	dd1e      	ble.n	8009580 <_strtod_l+0x5a0>
 8009542:	2500      	movs	r5, #0
 8009544:	46ab      	mov	fp, r5
 8009546:	9509      	str	r5, [sp, #36]	; 0x24
 8009548:	9505      	str	r5, [sp, #20]
 800954a:	2322      	movs	r3, #34	; 0x22
 800954c:	f04f 0800 	mov.w	r8, #0
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	e78d      	b.n	8009474 <_strtod_l+0x494>
 8009558:	0800e236 	.word	0x0800e236
 800955c:	0800e0e8 	.word	0x0800e0e8
 8009560:	0800e22e 	.word	0x0800e22e
 8009564:	0800e26b 	.word	0x0800e26b
 8009568:	0800e513 	.word	0x0800e513
 800956c:	0800e3d8 	.word	0x0800e3d8
 8009570:	0800e3b0 	.word	0x0800e3b0
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	7ca00000 	.word	0x7ca00000
 800957c:	7fefffff 	.word	0x7fefffff
 8009580:	f015 0310 	ands.w	r3, r5, #16
 8009584:	bf18      	it	ne
 8009586:	236a      	movne	r3, #106	; 0x6a
 8009588:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800992c <_strtod_l+0x94c>
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	4640      	mov	r0, r8
 8009590:	4649      	mov	r1, r9
 8009592:	2300      	movs	r3, #0
 8009594:	07ea      	lsls	r2, r5, #31
 8009596:	d504      	bpl.n	80095a2 <_strtod_l+0x5c2>
 8009598:	e9da 2300 	ldrd	r2, r3, [sl]
 800959c:	f7f7 f82c 	bl	80005f8 <__aeabi_dmul>
 80095a0:	2301      	movs	r3, #1
 80095a2:	106d      	asrs	r5, r5, #1
 80095a4:	f10a 0a08 	add.w	sl, sl, #8
 80095a8:	d1f4      	bne.n	8009594 <_strtod_l+0x5b4>
 80095aa:	b10b      	cbz	r3, 80095b0 <_strtod_l+0x5d0>
 80095ac:	4680      	mov	r8, r0
 80095ae:	4689      	mov	r9, r1
 80095b0:	9b04      	ldr	r3, [sp, #16]
 80095b2:	b1bb      	cbz	r3, 80095e4 <_strtod_l+0x604>
 80095b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80095b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80095bc:	2b00      	cmp	r3, #0
 80095be:	4649      	mov	r1, r9
 80095c0:	dd10      	ble.n	80095e4 <_strtod_l+0x604>
 80095c2:	2b1f      	cmp	r3, #31
 80095c4:	f340 811e 	ble.w	8009804 <_strtod_l+0x824>
 80095c8:	2b34      	cmp	r3, #52	; 0x34
 80095ca:	bfde      	ittt	le
 80095cc:	f04f 33ff 	movle.w	r3, #4294967295
 80095d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80095d4:	4093      	lslle	r3, r2
 80095d6:	f04f 0800 	mov.w	r8, #0
 80095da:	bfcc      	ite	gt
 80095dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80095e0:	ea03 0901 	andle.w	r9, r3, r1
 80095e4:	2200      	movs	r2, #0
 80095e6:	2300      	movs	r3, #0
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 fa6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1a6      	bne.n	8009542 <_strtod_l+0x562>
 80095f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095fa:	4633      	mov	r3, r6
 80095fc:	465a      	mov	r2, fp
 80095fe:	4620      	mov	r0, r4
 8009600:	f002 fea6 	bl	800c350 <__s2b>
 8009604:	9009      	str	r0, [sp, #36]	; 0x24
 8009606:	2800      	cmp	r0, #0
 8009608:	f43f af2a 	beq.w	8009460 <_strtod_l+0x480>
 800960c:	9a08      	ldr	r2, [sp, #32]
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	2a00      	cmp	r2, #0
 8009612:	eba3 0307 	sub.w	r3, r3, r7
 8009616:	bfa8      	it	ge
 8009618:	2300      	movge	r3, #0
 800961a:	930c      	str	r3, [sp, #48]	; 0x30
 800961c:	2500      	movs	r5, #0
 800961e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009622:	9312      	str	r3, [sp, #72]	; 0x48
 8009624:	46ab      	mov	fp, r5
 8009626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009628:	4620      	mov	r0, r4
 800962a:	6859      	ldr	r1, [r3, #4]
 800962c:	f002 fde8 	bl	800c200 <_Balloc>
 8009630:	9005      	str	r0, [sp, #20]
 8009632:	2800      	cmp	r0, #0
 8009634:	f43f af18 	beq.w	8009468 <_strtod_l+0x488>
 8009638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	3202      	adds	r2, #2
 800963e:	f103 010c 	add.w	r1, r3, #12
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	300c      	adds	r0, #12
 8009646:	f001 fb8c 	bl	800ad62 <memcpy>
 800964a:	ec49 8b10 	vmov	d0, r8, r9
 800964e:	aa18      	add	r2, sp, #96	; 0x60
 8009650:	a917      	add	r1, sp, #92	; 0x5c
 8009652:	4620      	mov	r0, r4
 8009654:	f003 f9b0 	bl	800c9b8 <__d2b>
 8009658:	ec49 8b18 	vmov	d8, r8, r9
 800965c:	9016      	str	r0, [sp, #88]	; 0x58
 800965e:	2800      	cmp	r0, #0
 8009660:	f43f af02 	beq.w	8009468 <_strtod_l+0x488>
 8009664:	2101      	movs	r1, #1
 8009666:	4620      	mov	r0, r4
 8009668:	f002 ff0a 	bl	800c480 <__i2b>
 800966c:	4683      	mov	fp, r0
 800966e:	2800      	cmp	r0, #0
 8009670:	f43f aefa 	beq.w	8009468 <_strtod_l+0x488>
 8009674:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009676:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009678:	2e00      	cmp	r6, #0
 800967a:	bfab      	itete	ge
 800967c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800967e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009680:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009682:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009686:	bfac      	ite	ge
 8009688:	eb06 0a03 	addge.w	sl, r6, r3
 800968c:	1b9f      	sublt	r7, r3, r6
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	1af6      	subs	r6, r6, r3
 8009692:	4416      	add	r6, r2
 8009694:	4ba0      	ldr	r3, [pc, #640]	; (8009918 <_strtod_l+0x938>)
 8009696:	3e01      	subs	r6, #1
 8009698:	429e      	cmp	r6, r3
 800969a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800969e:	f280 80c4 	bge.w	800982a <_strtod_l+0x84a>
 80096a2:	1b9b      	subs	r3, r3, r6
 80096a4:	2b1f      	cmp	r3, #31
 80096a6:	eba2 0203 	sub.w	r2, r2, r3
 80096aa:	f04f 0101 	mov.w	r1, #1
 80096ae:	f300 80b0 	bgt.w	8009812 <_strtod_l+0x832>
 80096b2:	fa01 f303 	lsl.w	r3, r1, r3
 80096b6:	930e      	str	r3, [sp, #56]	; 0x38
 80096b8:	2300      	movs	r3, #0
 80096ba:	930d      	str	r3, [sp, #52]	; 0x34
 80096bc:	eb0a 0602 	add.w	r6, sl, r2
 80096c0:	9b04      	ldr	r3, [sp, #16]
 80096c2:	45b2      	cmp	sl, r6
 80096c4:	4417      	add	r7, r2
 80096c6:	441f      	add	r7, r3
 80096c8:	4653      	mov	r3, sl
 80096ca:	bfa8      	it	ge
 80096cc:	4633      	movge	r3, r6
 80096ce:	42bb      	cmp	r3, r7
 80096d0:	bfa8      	it	ge
 80096d2:	463b      	movge	r3, r7
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfc2      	ittt	gt
 80096d8:	1af6      	subgt	r6, r6, r3
 80096da:	1aff      	subgt	r7, r7, r3
 80096dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80096e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	dd17      	ble.n	8009716 <_strtod_l+0x736>
 80096e6:	4659      	mov	r1, fp
 80096e8:	461a      	mov	r2, r3
 80096ea:	4620      	mov	r0, r4
 80096ec:	f002 ff88 	bl	800c600 <__pow5mult>
 80096f0:	4683      	mov	fp, r0
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f aeb8 	beq.w	8009468 <_strtod_l+0x488>
 80096f8:	4601      	mov	r1, r0
 80096fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80096fc:	4620      	mov	r0, r4
 80096fe:	f002 fed5 	bl	800c4ac <__multiply>
 8009702:	900b      	str	r0, [sp, #44]	; 0x2c
 8009704:	2800      	cmp	r0, #0
 8009706:	f43f aeaf 	beq.w	8009468 <_strtod_l+0x488>
 800970a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800970c:	4620      	mov	r0, r4
 800970e:	f002 fdb7 	bl	800c280 <_Bfree>
 8009712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009714:	9316      	str	r3, [sp, #88]	; 0x58
 8009716:	2e00      	cmp	r6, #0
 8009718:	f300 808c 	bgt.w	8009834 <_strtod_l+0x854>
 800971c:	9b08      	ldr	r3, [sp, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd08      	ble.n	8009734 <_strtod_l+0x754>
 8009722:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009724:	9905      	ldr	r1, [sp, #20]
 8009726:	4620      	mov	r0, r4
 8009728:	f002 ff6a 	bl	800c600 <__pow5mult>
 800972c:	9005      	str	r0, [sp, #20]
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f ae9a 	beq.w	8009468 <_strtod_l+0x488>
 8009734:	2f00      	cmp	r7, #0
 8009736:	dd08      	ble.n	800974a <_strtod_l+0x76a>
 8009738:	9905      	ldr	r1, [sp, #20]
 800973a:	463a      	mov	r2, r7
 800973c:	4620      	mov	r0, r4
 800973e:	f002 ffb9 	bl	800c6b4 <__lshift>
 8009742:	9005      	str	r0, [sp, #20]
 8009744:	2800      	cmp	r0, #0
 8009746:	f43f ae8f 	beq.w	8009468 <_strtod_l+0x488>
 800974a:	f1ba 0f00 	cmp.w	sl, #0
 800974e:	dd08      	ble.n	8009762 <_strtod_l+0x782>
 8009750:	4659      	mov	r1, fp
 8009752:	4652      	mov	r2, sl
 8009754:	4620      	mov	r0, r4
 8009756:	f002 ffad 	bl	800c6b4 <__lshift>
 800975a:	4683      	mov	fp, r0
 800975c:	2800      	cmp	r0, #0
 800975e:	f43f ae83 	beq.w	8009468 <_strtod_l+0x488>
 8009762:	9a05      	ldr	r2, [sp, #20]
 8009764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009766:	4620      	mov	r0, r4
 8009768:	f003 f82c 	bl	800c7c4 <__mdiff>
 800976c:	4605      	mov	r5, r0
 800976e:	2800      	cmp	r0, #0
 8009770:	f43f ae7a 	beq.w	8009468 <_strtod_l+0x488>
 8009774:	68c3      	ldr	r3, [r0, #12]
 8009776:	930b      	str	r3, [sp, #44]	; 0x2c
 8009778:	2300      	movs	r3, #0
 800977a:	60c3      	str	r3, [r0, #12]
 800977c:	4659      	mov	r1, fp
 800977e:	f003 f805 	bl	800c78c <__mcmp>
 8009782:	2800      	cmp	r0, #0
 8009784:	da60      	bge.n	8009848 <_strtod_l+0x868>
 8009786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009788:	ea53 0308 	orrs.w	r3, r3, r8
 800978c:	f040 8084 	bne.w	8009898 <_strtod_l+0x8b8>
 8009790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009794:	2b00      	cmp	r3, #0
 8009796:	d17f      	bne.n	8009898 <_strtod_l+0x8b8>
 8009798:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800979c:	0d1b      	lsrs	r3, r3, #20
 800979e:	051b      	lsls	r3, r3, #20
 80097a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80097a4:	d978      	bls.n	8009898 <_strtod_l+0x8b8>
 80097a6:	696b      	ldr	r3, [r5, #20]
 80097a8:	b913      	cbnz	r3, 80097b0 <_strtod_l+0x7d0>
 80097aa:	692b      	ldr	r3, [r5, #16]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	dd73      	ble.n	8009898 <_strtod_l+0x8b8>
 80097b0:	4629      	mov	r1, r5
 80097b2:	2201      	movs	r2, #1
 80097b4:	4620      	mov	r0, r4
 80097b6:	f002 ff7d 	bl	800c6b4 <__lshift>
 80097ba:	4659      	mov	r1, fp
 80097bc:	4605      	mov	r5, r0
 80097be:	f002 ffe5 	bl	800c78c <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	dd68      	ble.n	8009898 <_strtod_l+0x8b8>
 80097c6:	9904      	ldr	r1, [sp, #16]
 80097c8:	4a54      	ldr	r2, [pc, #336]	; (800991c <_strtod_l+0x93c>)
 80097ca:	464b      	mov	r3, r9
 80097cc:	2900      	cmp	r1, #0
 80097ce:	f000 8084 	beq.w	80098da <_strtod_l+0x8fa>
 80097d2:	ea02 0109 	and.w	r1, r2, r9
 80097d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80097da:	dc7e      	bgt.n	80098da <_strtod_l+0x8fa>
 80097dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80097e0:	f77f aeb3 	ble.w	800954a <_strtod_l+0x56a>
 80097e4:	4b4e      	ldr	r3, [pc, #312]	; (8009920 <_strtod_l+0x940>)
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	2200      	movs	r2, #0
 80097ec:	f7f6 ff04 	bl	80005f8 <__aeabi_dmul>
 80097f0:	4b4a      	ldr	r3, [pc, #296]	; (800991c <_strtod_l+0x93c>)
 80097f2:	400b      	ands	r3, r1
 80097f4:	4680      	mov	r8, r0
 80097f6:	4689      	mov	r9, r1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f47f ae3f 	bne.w	800947c <_strtod_l+0x49c>
 80097fe:	2322      	movs	r3, #34	; 0x22
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	e63b      	b.n	800947c <_strtod_l+0x49c>
 8009804:	f04f 32ff 	mov.w	r2, #4294967295
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	ea03 0808 	and.w	r8, r3, r8
 8009810:	e6e8      	b.n	80095e4 <_strtod_l+0x604>
 8009812:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009816:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800981a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800981e:	36e2      	adds	r6, #226	; 0xe2
 8009820:	fa01 f306 	lsl.w	r3, r1, r6
 8009824:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009828:	e748      	b.n	80096bc <_strtod_l+0x6dc>
 800982a:	2100      	movs	r1, #0
 800982c:	2301      	movs	r3, #1
 800982e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009832:	e743      	b.n	80096bc <_strtod_l+0x6dc>
 8009834:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009836:	4632      	mov	r2, r6
 8009838:	4620      	mov	r0, r4
 800983a:	f002 ff3b 	bl	800c6b4 <__lshift>
 800983e:	9016      	str	r0, [sp, #88]	; 0x58
 8009840:	2800      	cmp	r0, #0
 8009842:	f47f af6b 	bne.w	800971c <_strtod_l+0x73c>
 8009846:	e60f      	b.n	8009468 <_strtod_l+0x488>
 8009848:	46ca      	mov	sl, r9
 800984a:	d171      	bne.n	8009930 <_strtod_l+0x950>
 800984c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800984e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009852:	b352      	cbz	r2, 80098aa <_strtod_l+0x8ca>
 8009854:	4a33      	ldr	r2, [pc, #204]	; (8009924 <_strtod_l+0x944>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d12a      	bne.n	80098b0 <_strtod_l+0x8d0>
 800985a:	9b04      	ldr	r3, [sp, #16]
 800985c:	4641      	mov	r1, r8
 800985e:	b1fb      	cbz	r3, 80098a0 <_strtod_l+0x8c0>
 8009860:	4b2e      	ldr	r3, [pc, #184]	; (800991c <_strtod_l+0x93c>)
 8009862:	ea09 0303 	and.w	r3, r9, r3
 8009866:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	d81a      	bhi.n	80098a6 <_strtod_l+0x8c6>
 8009870:	0d1b      	lsrs	r3, r3, #20
 8009872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009876:	fa02 f303 	lsl.w	r3, r2, r3
 800987a:	4299      	cmp	r1, r3
 800987c:	d118      	bne.n	80098b0 <_strtod_l+0x8d0>
 800987e:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <_strtod_l+0x948>)
 8009880:	459a      	cmp	sl, r3
 8009882:	d102      	bne.n	800988a <_strtod_l+0x8aa>
 8009884:	3101      	adds	r1, #1
 8009886:	f43f adef 	beq.w	8009468 <_strtod_l+0x488>
 800988a:	4b24      	ldr	r3, [pc, #144]	; (800991c <_strtod_l+0x93c>)
 800988c:	ea0a 0303 	and.w	r3, sl, r3
 8009890:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1a2      	bne.n	80097e4 <_strtod_l+0x804>
 800989e:	e5ed      	b.n	800947c <_strtod_l+0x49c>
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	e7e9      	b.n	800987a <_strtod_l+0x89a>
 80098a6:	4613      	mov	r3, r2
 80098a8:	e7e7      	b.n	800987a <_strtod_l+0x89a>
 80098aa:	ea53 0308 	orrs.w	r3, r3, r8
 80098ae:	d08a      	beq.n	80097c6 <_strtod_l+0x7e6>
 80098b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098b2:	b1e3      	cbz	r3, 80098ee <_strtod_l+0x90e>
 80098b4:	ea13 0f0a 	tst.w	r3, sl
 80098b8:	d0ee      	beq.n	8009898 <_strtod_l+0x8b8>
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	9a04      	ldr	r2, [sp, #16]
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	b1c3      	cbz	r3, 80098f6 <_strtod_l+0x916>
 80098c4:	f7ff fb6d 	bl	8008fa2 <sulp>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	ec51 0b18 	vmov	r0, r1, d8
 80098d0:	f7f6 fcdc 	bl	800028c <__adddf3>
 80098d4:	4680      	mov	r8, r0
 80098d6:	4689      	mov	r9, r1
 80098d8:	e7de      	b.n	8009898 <_strtod_l+0x8b8>
 80098da:	4013      	ands	r3, r2
 80098dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80098e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80098e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80098e8:	f04f 38ff 	mov.w	r8, #4294967295
 80098ec:	e7d4      	b.n	8009898 <_strtod_l+0x8b8>
 80098ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f0:	ea13 0f08 	tst.w	r3, r8
 80098f4:	e7e0      	b.n	80098b8 <_strtod_l+0x8d8>
 80098f6:	f7ff fb54 	bl	8008fa2 <sulp>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	ec51 0b18 	vmov	r0, r1, d8
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	2200      	movs	r2, #0
 8009908:	2300      	movs	r3, #0
 800990a:	4680      	mov	r8, r0
 800990c:	4689      	mov	r9, r1
 800990e:	f7f7 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8009912:	2800      	cmp	r0, #0
 8009914:	d0c0      	beq.n	8009898 <_strtod_l+0x8b8>
 8009916:	e618      	b.n	800954a <_strtod_l+0x56a>
 8009918:	fffffc02 	.word	0xfffffc02
 800991c:	7ff00000 	.word	0x7ff00000
 8009920:	39500000 	.word	0x39500000
 8009924:	000fffff 	.word	0x000fffff
 8009928:	7fefffff 	.word	0x7fefffff
 800992c:	0800e100 	.word	0x0800e100
 8009930:	4659      	mov	r1, fp
 8009932:	4628      	mov	r0, r5
 8009934:	f003 f89a 	bl	800ca6c <__ratio>
 8009938:	ec57 6b10 	vmov	r6, r7, d0
 800993c:	ee10 0a10 	vmov	r0, s0
 8009940:	2200      	movs	r2, #0
 8009942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f8d2 	bl	8000af0 <__aeabi_dcmple>
 800994c:	2800      	cmp	r0, #0
 800994e:	d071      	beq.n	8009a34 <_strtod_l+0xa54>
 8009950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d17c      	bne.n	8009a50 <_strtod_l+0xa70>
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	d15a      	bne.n	8009a12 <_strtod_l+0xa32>
 800995c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009960:	2b00      	cmp	r3, #0
 8009962:	d15d      	bne.n	8009a20 <_strtod_l+0xa40>
 8009964:	4b90      	ldr	r3, [pc, #576]	; (8009ba8 <_strtod_l+0xbc8>)
 8009966:	2200      	movs	r2, #0
 8009968:	4630      	mov	r0, r6
 800996a:	4639      	mov	r1, r7
 800996c:	f7f7 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8009970:	2800      	cmp	r0, #0
 8009972:	d15c      	bne.n	8009a2e <_strtod_l+0xa4e>
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	4b8c      	ldr	r3, [pc, #560]	; (8009bac <_strtod_l+0xbcc>)
 800997a:	2200      	movs	r2, #0
 800997c:	f7f6 fe3c 	bl	80005f8 <__aeabi_dmul>
 8009980:	4606      	mov	r6, r0
 8009982:	460f      	mov	r7, r1
 8009984:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009988:	9606      	str	r6, [sp, #24]
 800998a:	9307      	str	r3, [sp, #28]
 800998c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009990:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009994:	4b86      	ldr	r3, [pc, #536]	; (8009bb0 <_strtod_l+0xbd0>)
 8009996:	ea0a 0303 	and.w	r3, sl, r3
 800999a:	930d      	str	r3, [sp, #52]	; 0x34
 800999c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800999e:	4b85      	ldr	r3, [pc, #532]	; (8009bb4 <_strtod_l+0xbd4>)
 80099a0:	429a      	cmp	r2, r3
 80099a2:	f040 8090 	bne.w	8009ac6 <_strtod_l+0xae6>
 80099a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80099aa:	ec49 8b10 	vmov	d0, r8, r9
 80099ae:	f002 ff93 	bl	800c8d8 <__ulp>
 80099b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099b6:	ec51 0b10 	vmov	r0, r1, d0
 80099ba:	f7f6 fe1d 	bl	80005f8 <__aeabi_dmul>
 80099be:	4642      	mov	r2, r8
 80099c0:	464b      	mov	r3, r9
 80099c2:	f7f6 fc63 	bl	800028c <__adddf3>
 80099c6:	460b      	mov	r3, r1
 80099c8:	4979      	ldr	r1, [pc, #484]	; (8009bb0 <_strtod_l+0xbd0>)
 80099ca:	4a7b      	ldr	r2, [pc, #492]	; (8009bb8 <_strtod_l+0xbd8>)
 80099cc:	4019      	ands	r1, r3
 80099ce:	4291      	cmp	r1, r2
 80099d0:	4680      	mov	r8, r0
 80099d2:	d944      	bls.n	8009a5e <_strtod_l+0xa7e>
 80099d4:	ee18 2a90 	vmov	r2, s17
 80099d8:	4b78      	ldr	r3, [pc, #480]	; (8009bbc <_strtod_l+0xbdc>)
 80099da:	429a      	cmp	r2, r3
 80099dc:	d104      	bne.n	80099e8 <_strtod_l+0xa08>
 80099de:	ee18 3a10 	vmov	r3, s16
 80099e2:	3301      	adds	r3, #1
 80099e4:	f43f ad40 	beq.w	8009468 <_strtod_l+0x488>
 80099e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009bbc <_strtod_l+0xbdc>
 80099ec:	f04f 38ff 	mov.w	r8, #4294967295
 80099f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099f2:	4620      	mov	r0, r4
 80099f4:	f002 fc44 	bl	800c280 <_Bfree>
 80099f8:	9905      	ldr	r1, [sp, #20]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f002 fc40 	bl	800c280 <_Bfree>
 8009a00:	4659      	mov	r1, fp
 8009a02:	4620      	mov	r0, r4
 8009a04:	f002 fc3c 	bl	800c280 <_Bfree>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f002 fc38 	bl	800c280 <_Bfree>
 8009a10:	e609      	b.n	8009626 <_strtod_l+0x646>
 8009a12:	f1b8 0f01 	cmp.w	r8, #1
 8009a16:	d103      	bne.n	8009a20 <_strtod_l+0xa40>
 8009a18:	f1b9 0f00 	cmp.w	r9, #0
 8009a1c:	f43f ad95 	beq.w	800954a <_strtod_l+0x56a>
 8009a20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009b78 <_strtod_l+0xb98>
 8009a24:	4f60      	ldr	r7, [pc, #384]	; (8009ba8 <_strtod_l+0xbc8>)
 8009a26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a2a:	2600      	movs	r6, #0
 8009a2c:	e7ae      	b.n	800998c <_strtod_l+0x9ac>
 8009a2e:	4f5f      	ldr	r7, [pc, #380]	; (8009bac <_strtod_l+0xbcc>)
 8009a30:	2600      	movs	r6, #0
 8009a32:	e7a7      	b.n	8009984 <_strtod_l+0x9a4>
 8009a34:	4b5d      	ldr	r3, [pc, #372]	; (8009bac <_strtod_l+0xbcc>)
 8009a36:	4630      	mov	r0, r6
 8009a38:	4639      	mov	r1, r7
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f7f6 fddc 	bl	80005f8 <__aeabi_dmul>
 8009a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d09c      	beq.n	8009984 <_strtod_l+0x9a4>
 8009a4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a4e:	e79d      	b.n	800998c <_strtod_l+0x9ac>
 8009a50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009b80 <_strtod_l+0xba0>
 8009a54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a58:	ec57 6b17 	vmov	r6, r7, d7
 8009a5c:	e796      	b.n	800998c <_strtod_l+0x9ac>
 8009a5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009a62:	9b04      	ldr	r3, [sp, #16]
 8009a64:	46ca      	mov	sl, r9
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1c2      	bne.n	80099f0 <_strtod_l+0xa10>
 8009a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a70:	0d1b      	lsrs	r3, r3, #20
 8009a72:	051b      	lsls	r3, r3, #20
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d1bb      	bne.n	80099f0 <_strtod_l+0xa10>
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f7 f91c 	bl	8000cb8 <__aeabi_d2lz>
 8009a80:	f7f6 fd8c 	bl	800059c <__aeabi_l2d>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	f7f6 fbfc 	bl	8000288 <__aeabi_dsub>
 8009a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a96:	ea43 0308 	orr.w	r3, r3, r8
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	d054      	beq.n	8009b4c <_strtod_l+0xb6c>
 8009aa2:	a339      	add	r3, pc, #228	; (adr r3, 8009b88 <_strtod_l+0xba8>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f7f7 f818 	bl	8000adc <__aeabi_dcmplt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	f47f ace5 	bne.w	800947c <_strtod_l+0x49c>
 8009ab2:	a337      	add	r3, pc, #220	; (adr r3, 8009b90 <_strtod_l+0xbb0>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f82c 	bl	8000b18 <__aeabi_dcmpgt>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d095      	beq.n	80099f0 <_strtod_l+0xa10>
 8009ac4:	e4da      	b.n	800947c <_strtod_l+0x49c>
 8009ac6:	9b04      	ldr	r3, [sp, #16]
 8009ac8:	b333      	cbz	r3, 8009b18 <_strtod_l+0xb38>
 8009aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009acc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ad0:	d822      	bhi.n	8009b18 <_strtod_l+0xb38>
 8009ad2:	a331      	add	r3, pc, #196	; (adr r3, 8009b98 <_strtod_l+0xbb8>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f7 f808 	bl	8000af0 <__aeabi_dcmple>
 8009ae0:	b1a0      	cbz	r0, 8009b0c <_strtod_l+0xb2c>
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	f7f7 f85f 	bl	8000ba8 <__aeabi_d2uiz>
 8009aea:	2801      	cmp	r0, #1
 8009aec:	bf38      	it	cc
 8009aee:	2001      	movcc	r0, #1
 8009af0:	f7f6 fd08 	bl	8000504 <__aeabi_ui2d>
 8009af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af6:	4606      	mov	r6, r0
 8009af8:	460f      	mov	r7, r1
 8009afa:	bb23      	cbnz	r3, 8009b46 <_strtod_l+0xb66>
 8009afc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b00:	9010      	str	r0, [sp, #64]	; 0x40
 8009b02:	9311      	str	r3, [sp, #68]	; 0x44
 8009b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b1c:	eeb0 0a48 	vmov.f32	s0, s16
 8009b20:	eef0 0a68 	vmov.f32	s1, s17
 8009b24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009b28:	f002 fed6 	bl	800c8d8 <__ulp>
 8009b2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b30:	ec53 2b10 	vmov	r2, r3, d0
 8009b34:	f7f6 fd60 	bl	80005f8 <__aeabi_dmul>
 8009b38:	ec53 2b18 	vmov	r2, r3, d8
 8009b3c:	f7f6 fba6 	bl	800028c <__adddf3>
 8009b40:	4680      	mov	r8, r0
 8009b42:	4689      	mov	r9, r1
 8009b44:	e78d      	b.n	8009a62 <_strtod_l+0xa82>
 8009b46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009b4a:	e7db      	b.n	8009b04 <_strtod_l+0xb24>
 8009b4c:	a314      	add	r3, pc, #80	; (adr r3, 8009ba0 <_strtod_l+0xbc0>)
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f7f6 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8009b56:	e7b3      	b.n	8009ac0 <_strtod_l+0xae0>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	f7ff ba7c 	b.w	800905e <_strtod_l+0x7e>
 8009b66:	2a65      	cmp	r2, #101	; 0x65
 8009b68:	f43f ab75 	beq.w	8009256 <_strtod_l+0x276>
 8009b6c:	2a45      	cmp	r2, #69	; 0x45
 8009b6e:	f43f ab72 	beq.w	8009256 <_strtod_l+0x276>
 8009b72:	2301      	movs	r3, #1
 8009b74:	f7ff bbaa 	b.w	80092cc <_strtod_l+0x2ec>
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	bff00000 	.word	0xbff00000
 8009b80:	00000000 	.word	0x00000000
 8009b84:	3ff00000 	.word	0x3ff00000
 8009b88:	94a03595 	.word	0x94a03595
 8009b8c:	3fdfffff 	.word	0x3fdfffff
 8009b90:	35afe535 	.word	0x35afe535
 8009b94:	3fe00000 	.word	0x3fe00000
 8009b98:	ffc00000 	.word	0xffc00000
 8009b9c:	41dfffff 	.word	0x41dfffff
 8009ba0:	94a03595 	.word	0x94a03595
 8009ba4:	3fcfffff 	.word	0x3fcfffff
 8009ba8:	3ff00000 	.word	0x3ff00000
 8009bac:	3fe00000 	.word	0x3fe00000
 8009bb0:	7ff00000 	.word	0x7ff00000
 8009bb4:	7fe00000 	.word	0x7fe00000
 8009bb8:	7c9fffff 	.word	0x7c9fffff
 8009bbc:	7fefffff 	.word	0x7fefffff

08009bc0 <_strtod_r>:
 8009bc0:	4b01      	ldr	r3, [pc, #4]	; (8009bc8 <_strtod_r+0x8>)
 8009bc2:	f7ff ba0d 	b.w	8008fe0 <_strtod_l>
 8009bc6:	bf00      	nop
 8009bc8:	20000020 	.word	0x20000020

08009bcc <__cvt>:
 8009bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	ec55 4b10 	vmov	r4, r5, d0
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	460e      	mov	r6, r1
 8009bd8:	4619      	mov	r1, r3
 8009bda:	462b      	mov	r3, r5
 8009bdc:	bfbb      	ittet	lt
 8009bde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009be2:	461d      	movlt	r5, r3
 8009be4:	2300      	movge	r3, #0
 8009be6:	232d      	movlt	r3, #45	; 0x2d
 8009be8:	700b      	strb	r3, [r1, #0]
 8009bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	f023 0820 	bic.w	r8, r3, #32
 8009bf6:	bfbc      	itt	lt
 8009bf8:	4622      	movlt	r2, r4
 8009bfa:	4614      	movlt	r4, r2
 8009bfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c00:	d005      	beq.n	8009c0e <__cvt+0x42>
 8009c02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c06:	d100      	bne.n	8009c0a <__cvt+0x3e>
 8009c08:	3601      	adds	r6, #1
 8009c0a:	2102      	movs	r1, #2
 8009c0c:	e000      	b.n	8009c10 <__cvt+0x44>
 8009c0e:	2103      	movs	r1, #3
 8009c10:	ab03      	add	r3, sp, #12
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	ab02      	add	r3, sp, #8
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	ec45 4b10 	vmov	d0, r4, r5
 8009c1c:	4653      	mov	r3, sl
 8009c1e:	4632      	mov	r2, r6
 8009c20:	f001 f946 	bl	800aeb0 <_dtoa_r>
 8009c24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c28:	4607      	mov	r7, r0
 8009c2a:	d102      	bne.n	8009c32 <__cvt+0x66>
 8009c2c:	f019 0f01 	tst.w	r9, #1
 8009c30:	d022      	beq.n	8009c78 <__cvt+0xac>
 8009c32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c36:	eb07 0906 	add.w	r9, r7, r6
 8009c3a:	d110      	bne.n	8009c5e <__cvt+0x92>
 8009c3c:	783b      	ldrb	r3, [r7, #0]
 8009c3e:	2b30      	cmp	r3, #48	; 0x30
 8009c40:	d10a      	bne.n	8009c58 <__cvt+0x8c>
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c4e:	b918      	cbnz	r0, 8009c58 <__cvt+0x8c>
 8009c50:	f1c6 0601 	rsb	r6, r6, #1
 8009c54:	f8ca 6000 	str.w	r6, [sl]
 8009c58:	f8da 3000 	ldr.w	r3, [sl]
 8009c5c:	4499      	add	r9, r3
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	4620      	mov	r0, r4
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7f6 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c6a:	b108      	cbz	r0, 8009c70 <__cvt+0xa4>
 8009c6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c70:	2230      	movs	r2, #48	; 0x30
 8009c72:	9b03      	ldr	r3, [sp, #12]
 8009c74:	454b      	cmp	r3, r9
 8009c76:	d307      	bcc.n	8009c88 <__cvt+0xbc>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c7c:	1bdb      	subs	r3, r3, r7
 8009c7e:	4638      	mov	r0, r7
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	b004      	add	sp, #16
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	1c59      	adds	r1, r3, #1
 8009c8a:	9103      	str	r1, [sp, #12]
 8009c8c:	701a      	strb	r2, [r3, #0]
 8009c8e:	e7f0      	b.n	8009c72 <__cvt+0xa6>

08009c90 <__exponent>:
 8009c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c92:	4603      	mov	r3, r0
 8009c94:	2900      	cmp	r1, #0
 8009c96:	bfb8      	it	lt
 8009c98:	4249      	neglt	r1, r1
 8009c9a:	f803 2b02 	strb.w	r2, [r3], #2
 8009c9e:	bfb4      	ite	lt
 8009ca0:	222d      	movlt	r2, #45	; 0x2d
 8009ca2:	222b      	movge	r2, #43	; 0x2b
 8009ca4:	2909      	cmp	r1, #9
 8009ca6:	7042      	strb	r2, [r0, #1]
 8009ca8:	dd2a      	ble.n	8009d00 <__exponent+0x70>
 8009caa:	f10d 0207 	add.w	r2, sp, #7
 8009cae:	4617      	mov	r7, r2
 8009cb0:	260a      	movs	r6, #10
 8009cb2:	4694      	mov	ip, r2
 8009cb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8009cb8:	fb06 1415 	mls	r4, r6, r5, r1
 8009cbc:	3430      	adds	r4, #48	; 0x30
 8009cbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	2c63      	cmp	r4, #99	; 0x63
 8009cc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8009cca:	4629      	mov	r1, r5
 8009ccc:	dcf1      	bgt.n	8009cb2 <__exponent+0x22>
 8009cce:	3130      	adds	r1, #48	; 0x30
 8009cd0:	f1ac 0402 	sub.w	r4, ip, #2
 8009cd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009cd8:	1c41      	adds	r1, r0, #1
 8009cda:	4622      	mov	r2, r4
 8009cdc:	42ba      	cmp	r2, r7
 8009cde:	d30a      	bcc.n	8009cf6 <__exponent+0x66>
 8009ce0:	f10d 0209 	add.w	r2, sp, #9
 8009ce4:	eba2 020c 	sub.w	r2, r2, ip
 8009ce8:	42bc      	cmp	r4, r7
 8009cea:	bf88      	it	hi
 8009cec:	2200      	movhi	r2, #0
 8009cee:	4413      	add	r3, r2
 8009cf0:	1a18      	subs	r0, r3, r0
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009cfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009cfe:	e7ed      	b.n	8009cdc <__exponent+0x4c>
 8009d00:	2330      	movs	r3, #48	; 0x30
 8009d02:	3130      	adds	r1, #48	; 0x30
 8009d04:	7083      	strb	r3, [r0, #2]
 8009d06:	70c1      	strb	r1, [r0, #3]
 8009d08:	1d03      	adds	r3, r0, #4
 8009d0a:	e7f1      	b.n	8009cf0 <__exponent+0x60>

08009d0c <_printf_float>:
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	ed2d 8b02 	vpush	{d8}
 8009d14:	b08d      	sub	sp, #52	; 0x34
 8009d16:	460c      	mov	r4, r1
 8009d18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	461f      	mov	r7, r3
 8009d20:	4605      	mov	r5, r0
 8009d22:	f000 ff97 	bl	800ac54 <_localeconv_r>
 8009d26:	f8d0 a000 	ldr.w	sl, [r0]
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 faa0 	bl	8000270 <strlen>
 8009d30:	2300      	movs	r3, #0
 8009d32:	930a      	str	r3, [sp, #40]	; 0x28
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	9305      	str	r3, [sp, #20]
 8009d38:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d40:	3307      	adds	r3, #7
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	f103 0208 	add.w	r2, r3, #8
 8009d4a:	f8c8 2000 	str.w	r2, [r8]
 8009d4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d5c:	ee08 0a10 	vmov	s16, r0
 8009d60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d68:	4b9e      	ldr	r3, [pc, #632]	; (8009fe4 <_printf_float+0x2d8>)
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6e:	f7f6 fedd 	bl	8000b2c <__aeabi_dcmpun>
 8009d72:	bb88      	cbnz	r0, 8009dd8 <_printf_float+0xcc>
 8009d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d78:	4b9a      	ldr	r3, [pc, #616]	; (8009fe4 <_printf_float+0x2d8>)
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	f7f6 feb7 	bl	8000af0 <__aeabi_dcmple>
 8009d82:	bb48      	cbnz	r0, 8009dd8 <_printf_float+0xcc>
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fea6 	bl	8000adc <__aeabi_dcmplt>
 8009d90:	b110      	cbz	r0, 8009d98 <_printf_float+0x8c>
 8009d92:	232d      	movs	r3, #45	; 0x2d
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d98:	4a93      	ldr	r2, [pc, #588]	; (8009fe8 <_printf_float+0x2dc>)
 8009d9a:	4b94      	ldr	r3, [pc, #592]	; (8009fec <_printf_float+0x2e0>)
 8009d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009da0:	bf94      	ite	ls
 8009da2:	4690      	movls	r8, r2
 8009da4:	4698      	movhi	r8, r3
 8009da6:	2303      	movs	r3, #3
 8009da8:	6123      	str	r3, [r4, #16]
 8009daa:	9b05      	ldr	r3, [sp, #20]
 8009dac:	f023 0304 	bic.w	r3, r3, #4
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	f04f 0900 	mov.w	r9, #0
 8009db6:	9700      	str	r7, [sp, #0]
 8009db8:	4633      	mov	r3, r6
 8009dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 f9da 	bl	800a178 <_printf_common>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f040 8090 	bne.w	8009eea <_printf_float+0x1de>
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	b00d      	add	sp, #52	; 0x34
 8009dd0:	ecbd 8b02 	vpop	{d8}
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	4640      	mov	r0, r8
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fea4 	bl	8000b2c <__aeabi_dcmpun>
 8009de4:	b140      	cbz	r0, 8009df8 <_printf_float+0xec>
 8009de6:	464b      	mov	r3, r9
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	bfbc      	itt	lt
 8009dec:	232d      	movlt	r3, #45	; 0x2d
 8009dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009df2:	4a7f      	ldr	r2, [pc, #508]	; (8009ff0 <_printf_float+0x2e4>)
 8009df4:	4b7f      	ldr	r3, [pc, #508]	; (8009ff4 <_printf_float+0x2e8>)
 8009df6:	e7d1      	b.n	8009d9c <_printf_float+0x90>
 8009df8:	6863      	ldr	r3, [r4, #4]
 8009dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dfe:	9206      	str	r2, [sp, #24]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	d13f      	bne.n	8009e84 <_printf_float+0x178>
 8009e04:	2306      	movs	r3, #6
 8009e06:	6063      	str	r3, [r4, #4]
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	6861      	ldr	r1, [r4, #4]
 8009e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e10:	2300      	movs	r3, #0
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	ab0a      	add	r3, sp, #40	; 0x28
 8009e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e1a:	ab09      	add	r3, sp, #36	; 0x24
 8009e1c:	ec49 8b10 	vmov	d0, r8, r9
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	6022      	str	r2, [r4, #0]
 8009e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7ff fecf 	bl	8009bcc <__cvt>
 8009e2e:	9b06      	ldr	r3, [sp, #24]
 8009e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e32:	2b47      	cmp	r3, #71	; 0x47
 8009e34:	4680      	mov	r8, r0
 8009e36:	d108      	bne.n	8009e4a <_printf_float+0x13e>
 8009e38:	1cc8      	adds	r0, r1, #3
 8009e3a:	db02      	blt.n	8009e42 <_printf_float+0x136>
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	4299      	cmp	r1, r3
 8009e40:	dd41      	ble.n	8009ec6 <_printf_float+0x1ba>
 8009e42:	f1ab 0302 	sub.w	r3, fp, #2
 8009e46:	fa5f fb83 	uxtb.w	fp, r3
 8009e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e4e:	d820      	bhi.n	8009e92 <_printf_float+0x186>
 8009e50:	3901      	subs	r1, #1
 8009e52:	465a      	mov	r2, fp
 8009e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e58:	9109      	str	r1, [sp, #36]	; 0x24
 8009e5a:	f7ff ff19 	bl	8009c90 <__exponent>
 8009e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e60:	1813      	adds	r3, r2, r0
 8009e62:	2a01      	cmp	r2, #1
 8009e64:	4681      	mov	r9, r0
 8009e66:	6123      	str	r3, [r4, #16]
 8009e68:	dc02      	bgt.n	8009e70 <_printf_float+0x164>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	07d2      	lsls	r2, r2, #31
 8009e6e:	d501      	bpl.n	8009e74 <_printf_float+0x168>
 8009e70:	3301      	adds	r3, #1
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d09c      	beq.n	8009db6 <_printf_float+0xaa>
 8009e7c:	232d      	movs	r3, #45	; 0x2d
 8009e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e82:	e798      	b.n	8009db6 <_printf_float+0xaa>
 8009e84:	9a06      	ldr	r2, [sp, #24]
 8009e86:	2a47      	cmp	r2, #71	; 0x47
 8009e88:	d1be      	bne.n	8009e08 <_printf_float+0xfc>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1bc      	bne.n	8009e08 <_printf_float+0xfc>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e7b9      	b.n	8009e06 <_printf_float+0xfa>
 8009e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e96:	d118      	bne.n	8009eca <_printf_float+0x1be>
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	6863      	ldr	r3, [r4, #4]
 8009e9c:	dd0b      	ble.n	8009eb6 <_printf_float+0x1aa>
 8009e9e:	6121      	str	r1, [r4, #16]
 8009ea0:	b913      	cbnz	r3, 8009ea8 <_printf_float+0x19c>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	07d0      	lsls	r0, r2, #31
 8009ea6:	d502      	bpl.n	8009eae <_printf_float+0x1a2>
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	440b      	add	r3, r1
 8009eac:	6123      	str	r3, [r4, #16]
 8009eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8009eb0:	f04f 0900 	mov.w	r9, #0
 8009eb4:	e7de      	b.n	8009e74 <_printf_float+0x168>
 8009eb6:	b913      	cbnz	r3, 8009ebe <_printf_float+0x1b2>
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	07d2      	lsls	r2, r2, #31
 8009ebc:	d501      	bpl.n	8009ec2 <_printf_float+0x1b6>
 8009ebe:	3302      	adds	r3, #2
 8009ec0:	e7f4      	b.n	8009eac <_printf_float+0x1a0>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f2      	b.n	8009eac <_printf_float+0x1a0>
 8009ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	db05      	blt.n	8009edc <_printf_float+0x1d0>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	6121      	str	r1, [r4, #16]
 8009ed4:	07d8      	lsls	r0, r3, #31
 8009ed6:	d5ea      	bpl.n	8009eae <_printf_float+0x1a2>
 8009ed8:	1c4b      	adds	r3, r1, #1
 8009eda:	e7e7      	b.n	8009eac <_printf_float+0x1a0>
 8009edc:	2900      	cmp	r1, #0
 8009ede:	bfd4      	ite	le
 8009ee0:	f1c1 0202 	rsble	r2, r1, #2
 8009ee4:	2201      	movgt	r2, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	e7e0      	b.n	8009eac <_printf_float+0x1a0>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	055a      	lsls	r2, r3, #21
 8009eee:	d407      	bmi.n	8009f00 <_printf_float+0x1f4>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	d12c      	bne.n	8009f58 <_printf_float+0x24c>
 8009efe:	e764      	b.n	8009dca <_printf_float+0xbe>
 8009f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f04:	f240 80e0 	bls.w	800a0c8 <_printf_float+0x3bc>
 8009f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f7f6 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d034      	beq.n	8009f82 <_printf_float+0x276>
 8009f18:	4a37      	ldr	r2, [pc, #220]	; (8009ff8 <_printf_float+0x2ec>)
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4628      	mov	r0, r5
 8009f20:	47b8      	blx	r7
 8009f22:	3001      	adds	r0, #1
 8009f24:	f43f af51 	beq.w	8009dca <_printf_float+0xbe>
 8009f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	db02      	blt.n	8009f36 <_printf_float+0x22a>
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	07d8      	lsls	r0, r3, #31
 8009f34:	d510      	bpl.n	8009f58 <_printf_float+0x24c>
 8009f36:	ee18 3a10 	vmov	r3, s16
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	f43f af41 	beq.w	8009dca <_printf_float+0xbe>
 8009f48:	f04f 0800 	mov.w	r8, #0
 8009f4c:	f104 091a 	add.w	r9, r4, #26
 8009f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f52:	3b01      	subs	r3, #1
 8009f54:	4543      	cmp	r3, r8
 8009f56:	dc09      	bgt.n	8009f6c <_printf_float+0x260>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	079b      	lsls	r3, r3, #30
 8009f5c:	f100 8107 	bmi.w	800a16e <_printf_float+0x462>
 8009f60:	68e0      	ldr	r0, [r4, #12]
 8009f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f64:	4298      	cmp	r0, r3
 8009f66:	bfb8      	it	lt
 8009f68:	4618      	movlt	r0, r3
 8009f6a:	e730      	b.n	8009dce <_printf_float+0xc2>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	464a      	mov	r2, r9
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f af27 	beq.w	8009dca <_printf_float+0xbe>
 8009f7c:	f108 0801 	add.w	r8, r8, #1
 8009f80:	e7e6      	b.n	8009f50 <_printf_float+0x244>
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dc39      	bgt.n	8009ffc <_printf_float+0x2f0>
 8009f88:	4a1b      	ldr	r2, [pc, #108]	; (8009ff8 <_printf_float+0x2ec>)
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4628      	mov	r0, r5
 8009f90:	47b8      	blx	r7
 8009f92:	3001      	adds	r0, #1
 8009f94:	f43f af19 	beq.w	8009dca <_printf_float+0xbe>
 8009f98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	d102      	bne.n	8009fa6 <_printf_float+0x29a>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	07d9      	lsls	r1, r3, #31
 8009fa4:	d5d8      	bpl.n	8009f58 <_printf_float+0x24c>
 8009fa6:	ee18 3a10 	vmov	r3, s16
 8009faa:	4652      	mov	r2, sl
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af09 	beq.w	8009dca <_printf_float+0xbe>
 8009fb8:	f04f 0900 	mov.w	r9, #0
 8009fbc:	f104 0a1a 	add.w	sl, r4, #26
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	425b      	negs	r3, r3
 8009fc4:	454b      	cmp	r3, r9
 8009fc6:	dc01      	bgt.n	8009fcc <_printf_float+0x2c0>
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	e792      	b.n	8009ef2 <_printf_float+0x1e6>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f aef7 	beq.w	8009dca <_printf_float+0xbe>
 8009fdc:	f109 0901 	add.w	r9, r9, #1
 8009fe0:	e7ee      	b.n	8009fc0 <_printf_float+0x2b4>
 8009fe2:	bf00      	nop
 8009fe4:	7fefffff 	.word	0x7fefffff
 8009fe8:	0800e229 	.word	0x0800e229
 8009fec:	0800e22d 	.word	0x0800e22d
 8009ff0:	0800e231 	.word	0x0800e231
 8009ff4:	0800e235 	.word	0x0800e235
 8009ff8:	0800e4d3 	.word	0x0800e4d3
 8009ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a000:	429a      	cmp	r2, r3
 800a002:	bfa8      	it	ge
 800a004:	461a      	movge	r2, r3
 800a006:	2a00      	cmp	r2, #0
 800a008:	4691      	mov	r9, r2
 800a00a:	dc37      	bgt.n	800a07c <_printf_float+0x370>
 800a00c:	f04f 0b00 	mov.w	fp, #0
 800a010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a014:	f104 021a 	add.w	r2, r4, #26
 800a018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	eba3 0309 	sub.w	r3, r3, r9
 800a020:	455b      	cmp	r3, fp
 800a022:	dc33      	bgt.n	800a08c <_printf_float+0x380>
 800a024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	db3b      	blt.n	800a0a4 <_printf_float+0x398>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	07da      	lsls	r2, r3, #31
 800a030:	d438      	bmi.n	800a0a4 <_printf_float+0x398>
 800a032:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a036:	eba2 0903 	sub.w	r9, r2, r3
 800a03a:	9b05      	ldr	r3, [sp, #20]
 800a03c:	1ad2      	subs	r2, r2, r3
 800a03e:	4591      	cmp	r9, r2
 800a040:	bfa8      	it	ge
 800a042:	4691      	movge	r9, r2
 800a044:	f1b9 0f00 	cmp.w	r9, #0
 800a048:	dc35      	bgt.n	800a0b6 <_printf_float+0x3aa>
 800a04a:	f04f 0800 	mov.w	r8, #0
 800a04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a052:	f104 0a1a 	add.w	sl, r4, #26
 800a056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	eba3 0309 	sub.w	r3, r3, r9
 800a060:	4543      	cmp	r3, r8
 800a062:	f77f af79 	ble.w	8009f58 <_printf_float+0x24c>
 800a066:	2301      	movs	r3, #1
 800a068:	4652      	mov	r2, sl
 800a06a:	4631      	mov	r1, r6
 800a06c:	4628      	mov	r0, r5
 800a06e:	47b8      	blx	r7
 800a070:	3001      	adds	r0, #1
 800a072:	f43f aeaa 	beq.w	8009dca <_printf_float+0xbe>
 800a076:	f108 0801 	add.w	r8, r8, #1
 800a07a:	e7ec      	b.n	800a056 <_printf_float+0x34a>
 800a07c:	4613      	mov	r3, r2
 800a07e:	4631      	mov	r1, r6
 800a080:	4642      	mov	r2, r8
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	d1c0      	bne.n	800a00c <_printf_float+0x300>
 800a08a:	e69e      	b.n	8009dca <_printf_float+0xbe>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4631      	mov	r1, r6
 800a090:	4628      	mov	r0, r5
 800a092:	9205      	str	r2, [sp, #20]
 800a094:	47b8      	blx	r7
 800a096:	3001      	adds	r0, #1
 800a098:	f43f ae97 	beq.w	8009dca <_printf_float+0xbe>
 800a09c:	9a05      	ldr	r2, [sp, #20]
 800a09e:	f10b 0b01 	add.w	fp, fp, #1
 800a0a2:	e7b9      	b.n	800a018 <_printf_float+0x30c>
 800a0a4:	ee18 3a10 	vmov	r3, s16
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d1be      	bne.n	800a032 <_printf_float+0x326>
 800a0b4:	e689      	b.n	8009dca <_printf_float+0xbe>
 800a0b6:	9a05      	ldr	r2, [sp, #20]
 800a0b8:	464b      	mov	r3, r9
 800a0ba:	4442      	add	r2, r8
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d1c1      	bne.n	800a04a <_printf_float+0x33e>
 800a0c6:	e680      	b.n	8009dca <_printf_float+0xbe>
 800a0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ca:	2a01      	cmp	r2, #1
 800a0cc:	dc01      	bgt.n	800a0d2 <_printf_float+0x3c6>
 800a0ce:	07db      	lsls	r3, r3, #31
 800a0d0:	d53a      	bpl.n	800a148 <_printf_float+0x43c>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f ae74 	beq.w	8009dca <_printf_float+0xbe>
 800a0e2:	ee18 3a10 	vmov	r3, s16
 800a0e6:	4652      	mov	r2, sl
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f43f ae6b 	beq.w	8009dca <_printf_float+0xbe>
 800a0f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a100:	f7f6 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a104:	b9d8      	cbnz	r0, 800a13e <_printf_float+0x432>
 800a106:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a10a:	f108 0201 	add.w	r2, r8, #1
 800a10e:	4631      	mov	r1, r6
 800a110:	4628      	mov	r0, r5
 800a112:	47b8      	blx	r7
 800a114:	3001      	adds	r0, #1
 800a116:	d10e      	bne.n	800a136 <_printf_float+0x42a>
 800a118:	e657      	b.n	8009dca <_printf_float+0xbe>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4652      	mov	r2, sl
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	47b8      	blx	r7
 800a124:	3001      	adds	r0, #1
 800a126:	f43f ae50 	beq.w	8009dca <_printf_float+0xbe>
 800a12a:	f108 0801 	add.w	r8, r8, #1
 800a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a130:	3b01      	subs	r3, #1
 800a132:	4543      	cmp	r3, r8
 800a134:	dcf1      	bgt.n	800a11a <_printf_float+0x40e>
 800a136:	464b      	mov	r3, r9
 800a138:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a13c:	e6da      	b.n	8009ef4 <_printf_float+0x1e8>
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	f104 0a1a 	add.w	sl, r4, #26
 800a146:	e7f2      	b.n	800a12e <_printf_float+0x422>
 800a148:	2301      	movs	r3, #1
 800a14a:	4642      	mov	r2, r8
 800a14c:	e7df      	b.n	800a10e <_printf_float+0x402>
 800a14e:	2301      	movs	r3, #1
 800a150:	464a      	mov	r2, r9
 800a152:	4631      	mov	r1, r6
 800a154:	4628      	mov	r0, r5
 800a156:	47b8      	blx	r7
 800a158:	3001      	adds	r0, #1
 800a15a:	f43f ae36 	beq.w	8009dca <_printf_float+0xbe>
 800a15e:	f108 0801 	add.w	r8, r8, #1
 800a162:	68e3      	ldr	r3, [r4, #12]
 800a164:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a166:	1a5b      	subs	r3, r3, r1
 800a168:	4543      	cmp	r3, r8
 800a16a:	dcf0      	bgt.n	800a14e <_printf_float+0x442>
 800a16c:	e6f8      	b.n	8009f60 <_printf_float+0x254>
 800a16e:	f04f 0800 	mov.w	r8, #0
 800a172:	f104 0919 	add.w	r9, r4, #25
 800a176:	e7f4      	b.n	800a162 <_printf_float+0x456>

0800a178 <_printf_common>:
 800a178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a17c:	4616      	mov	r6, r2
 800a17e:	4699      	mov	r9, r3
 800a180:	688a      	ldr	r2, [r1, #8]
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a188:	4293      	cmp	r3, r2
 800a18a:	bfb8      	it	lt
 800a18c:	4613      	movlt	r3, r2
 800a18e:	6033      	str	r3, [r6, #0]
 800a190:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a194:	4607      	mov	r7, r0
 800a196:	460c      	mov	r4, r1
 800a198:	b10a      	cbz	r2, 800a19e <_printf_common+0x26>
 800a19a:	3301      	adds	r3, #1
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	0699      	lsls	r1, r3, #26
 800a1a2:	bf42      	ittt	mi
 800a1a4:	6833      	ldrmi	r3, [r6, #0]
 800a1a6:	3302      	addmi	r3, #2
 800a1a8:	6033      	strmi	r3, [r6, #0]
 800a1aa:	6825      	ldr	r5, [r4, #0]
 800a1ac:	f015 0506 	ands.w	r5, r5, #6
 800a1b0:	d106      	bne.n	800a1c0 <_printf_common+0x48>
 800a1b2:	f104 0a19 	add.w	sl, r4, #25
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	6832      	ldr	r2, [r6, #0]
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	dc26      	bgt.n	800a20e <_printf_common+0x96>
 800a1c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1c4:	1e13      	subs	r3, r2, #0
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	bf18      	it	ne
 800a1ca:	2301      	movne	r3, #1
 800a1cc:	0692      	lsls	r2, r2, #26
 800a1ce:	d42b      	bmi.n	800a228 <_printf_common+0xb0>
 800a1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	47c0      	blx	r8
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d01e      	beq.n	800a21c <_printf_common+0xa4>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	6922      	ldr	r2, [r4, #16]
 800a1e2:	f003 0306 	and.w	r3, r3, #6
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	bf02      	ittt	eq
 800a1ea:	68e5      	ldreq	r5, [r4, #12]
 800a1ec:	6833      	ldreq	r3, [r6, #0]
 800a1ee:	1aed      	subeq	r5, r5, r3
 800a1f0:	68a3      	ldr	r3, [r4, #8]
 800a1f2:	bf0c      	ite	eq
 800a1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1f8:	2500      	movne	r5, #0
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bfc4      	itt	gt
 800a1fe:	1a9b      	subgt	r3, r3, r2
 800a200:	18ed      	addgt	r5, r5, r3
 800a202:	2600      	movs	r6, #0
 800a204:	341a      	adds	r4, #26
 800a206:	42b5      	cmp	r5, r6
 800a208:	d11a      	bne.n	800a240 <_printf_common+0xc8>
 800a20a:	2000      	movs	r0, #0
 800a20c:	e008      	b.n	800a220 <_printf_common+0xa8>
 800a20e:	2301      	movs	r3, #1
 800a210:	4652      	mov	r2, sl
 800a212:	4649      	mov	r1, r9
 800a214:	4638      	mov	r0, r7
 800a216:	47c0      	blx	r8
 800a218:	3001      	adds	r0, #1
 800a21a:	d103      	bne.n	800a224 <_printf_common+0xac>
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	3501      	adds	r5, #1
 800a226:	e7c6      	b.n	800a1b6 <_printf_common+0x3e>
 800a228:	18e1      	adds	r1, r4, r3
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	2030      	movs	r0, #48	; 0x30
 800a22e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a232:	4422      	add	r2, r4
 800a234:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a23c:	3302      	adds	r3, #2
 800a23e:	e7c7      	b.n	800a1d0 <_printf_common+0x58>
 800a240:	2301      	movs	r3, #1
 800a242:	4622      	mov	r2, r4
 800a244:	4649      	mov	r1, r9
 800a246:	4638      	mov	r0, r7
 800a248:	47c0      	blx	r8
 800a24a:	3001      	adds	r0, #1
 800a24c:	d0e6      	beq.n	800a21c <_printf_common+0xa4>
 800a24e:	3601      	adds	r6, #1
 800a250:	e7d9      	b.n	800a206 <_printf_common+0x8e>
	...

0800a254 <_printf_i>:
 800a254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a258:	7e0f      	ldrb	r7, [r1, #24]
 800a25a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a25c:	2f78      	cmp	r7, #120	; 0x78
 800a25e:	4691      	mov	r9, r2
 800a260:	4680      	mov	r8, r0
 800a262:	460c      	mov	r4, r1
 800a264:	469a      	mov	sl, r3
 800a266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a26a:	d807      	bhi.n	800a27c <_printf_i+0x28>
 800a26c:	2f62      	cmp	r7, #98	; 0x62
 800a26e:	d80a      	bhi.n	800a286 <_printf_i+0x32>
 800a270:	2f00      	cmp	r7, #0
 800a272:	f000 80d4 	beq.w	800a41e <_printf_i+0x1ca>
 800a276:	2f58      	cmp	r7, #88	; 0x58
 800a278:	f000 80c0 	beq.w	800a3fc <_printf_i+0x1a8>
 800a27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a284:	e03a      	b.n	800a2fc <_printf_i+0xa8>
 800a286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a28a:	2b15      	cmp	r3, #21
 800a28c:	d8f6      	bhi.n	800a27c <_printf_i+0x28>
 800a28e:	a101      	add	r1, pc, #4	; (adr r1, 800a294 <_printf_i+0x40>)
 800a290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a294:	0800a2ed 	.word	0x0800a2ed
 800a298:	0800a301 	.word	0x0800a301
 800a29c:	0800a27d 	.word	0x0800a27d
 800a2a0:	0800a27d 	.word	0x0800a27d
 800a2a4:	0800a27d 	.word	0x0800a27d
 800a2a8:	0800a27d 	.word	0x0800a27d
 800a2ac:	0800a301 	.word	0x0800a301
 800a2b0:	0800a27d 	.word	0x0800a27d
 800a2b4:	0800a27d 	.word	0x0800a27d
 800a2b8:	0800a27d 	.word	0x0800a27d
 800a2bc:	0800a27d 	.word	0x0800a27d
 800a2c0:	0800a405 	.word	0x0800a405
 800a2c4:	0800a32d 	.word	0x0800a32d
 800a2c8:	0800a3bf 	.word	0x0800a3bf
 800a2cc:	0800a27d 	.word	0x0800a27d
 800a2d0:	0800a27d 	.word	0x0800a27d
 800a2d4:	0800a427 	.word	0x0800a427
 800a2d8:	0800a27d 	.word	0x0800a27d
 800a2dc:	0800a32d 	.word	0x0800a32d
 800a2e0:	0800a27d 	.word	0x0800a27d
 800a2e4:	0800a27d 	.word	0x0800a27d
 800a2e8:	0800a3c7 	.word	0x0800a3c7
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	1d1a      	adds	r2, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	602a      	str	r2, [r5, #0]
 800a2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e09f      	b.n	800a440 <_printf_i+0x1ec>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	682b      	ldr	r3, [r5, #0]
 800a304:	0607      	lsls	r7, r0, #24
 800a306:	f103 0104 	add.w	r1, r3, #4
 800a30a:	6029      	str	r1, [r5, #0]
 800a30c:	d501      	bpl.n	800a312 <_printf_i+0xbe>
 800a30e:	681e      	ldr	r6, [r3, #0]
 800a310:	e003      	b.n	800a31a <_printf_i+0xc6>
 800a312:	0646      	lsls	r6, r0, #25
 800a314:	d5fb      	bpl.n	800a30e <_printf_i+0xba>
 800a316:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	da03      	bge.n	800a326 <_printf_i+0xd2>
 800a31e:	232d      	movs	r3, #45	; 0x2d
 800a320:	4276      	negs	r6, r6
 800a322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a326:	485a      	ldr	r0, [pc, #360]	; (800a490 <_printf_i+0x23c>)
 800a328:	230a      	movs	r3, #10
 800a32a:	e012      	b.n	800a352 <_printf_i+0xfe>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	6820      	ldr	r0, [r4, #0]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	6029      	str	r1, [r5, #0]
 800a334:	0605      	lsls	r5, r0, #24
 800a336:	d501      	bpl.n	800a33c <_printf_i+0xe8>
 800a338:	681e      	ldr	r6, [r3, #0]
 800a33a:	e002      	b.n	800a342 <_printf_i+0xee>
 800a33c:	0641      	lsls	r1, r0, #25
 800a33e:	d5fb      	bpl.n	800a338 <_printf_i+0xe4>
 800a340:	881e      	ldrh	r6, [r3, #0]
 800a342:	4853      	ldr	r0, [pc, #332]	; (800a490 <_printf_i+0x23c>)
 800a344:	2f6f      	cmp	r7, #111	; 0x6f
 800a346:	bf0c      	ite	eq
 800a348:	2308      	moveq	r3, #8
 800a34a:	230a      	movne	r3, #10
 800a34c:	2100      	movs	r1, #0
 800a34e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a352:	6865      	ldr	r5, [r4, #4]
 800a354:	60a5      	str	r5, [r4, #8]
 800a356:	2d00      	cmp	r5, #0
 800a358:	bfa2      	ittt	ge
 800a35a:	6821      	ldrge	r1, [r4, #0]
 800a35c:	f021 0104 	bicge.w	r1, r1, #4
 800a360:	6021      	strge	r1, [r4, #0]
 800a362:	b90e      	cbnz	r6, 800a368 <_printf_i+0x114>
 800a364:	2d00      	cmp	r5, #0
 800a366:	d04b      	beq.n	800a400 <_printf_i+0x1ac>
 800a368:	4615      	mov	r5, r2
 800a36a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a36e:	fb03 6711 	mls	r7, r3, r1, r6
 800a372:	5dc7      	ldrb	r7, [r0, r7]
 800a374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a378:	4637      	mov	r7, r6
 800a37a:	42bb      	cmp	r3, r7
 800a37c:	460e      	mov	r6, r1
 800a37e:	d9f4      	bls.n	800a36a <_printf_i+0x116>
 800a380:	2b08      	cmp	r3, #8
 800a382:	d10b      	bne.n	800a39c <_printf_i+0x148>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	07de      	lsls	r6, r3, #31
 800a388:	d508      	bpl.n	800a39c <_printf_i+0x148>
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	6861      	ldr	r1, [r4, #4]
 800a38e:	4299      	cmp	r1, r3
 800a390:	bfde      	ittt	le
 800a392:	2330      	movle	r3, #48	; 0x30
 800a394:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a39c:	1b52      	subs	r2, r2, r5
 800a39e:	6122      	str	r2, [r4, #16]
 800a3a0:	f8cd a000 	str.w	sl, [sp]
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	aa03      	add	r2, sp, #12
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	f7ff fee4 	bl	800a178 <_printf_common>
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d14a      	bne.n	800a44a <_printf_i+0x1f6>
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	b004      	add	sp, #16
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f043 0320 	orr.w	r3, r3, #32
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	4833      	ldr	r0, [pc, #204]	; (800a494 <_printf_i+0x240>)
 800a3c8:	2778      	movs	r7, #120	; 0x78
 800a3ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	6829      	ldr	r1, [r5, #0]
 800a3d2:	061f      	lsls	r7, r3, #24
 800a3d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d8:	d402      	bmi.n	800a3e0 <_printf_i+0x18c>
 800a3da:	065f      	lsls	r7, r3, #25
 800a3dc:	bf48      	it	mi
 800a3de:	b2b6      	uxthmi	r6, r6
 800a3e0:	07df      	lsls	r7, r3, #31
 800a3e2:	bf48      	it	mi
 800a3e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e8:	6029      	str	r1, [r5, #0]
 800a3ea:	bf48      	it	mi
 800a3ec:	6023      	strmi	r3, [r4, #0]
 800a3ee:	b91e      	cbnz	r6, 800a3f8 <_printf_i+0x1a4>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	f023 0320 	bic.w	r3, r3, #32
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	e7a7      	b.n	800a34c <_printf_i+0xf8>
 800a3fc:	4824      	ldr	r0, [pc, #144]	; (800a490 <_printf_i+0x23c>)
 800a3fe:	e7e4      	b.n	800a3ca <_printf_i+0x176>
 800a400:	4615      	mov	r5, r2
 800a402:	e7bd      	b.n	800a380 <_printf_i+0x12c>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	6826      	ldr	r6, [r4, #0]
 800a408:	6961      	ldr	r1, [r4, #20]
 800a40a:	1d18      	adds	r0, r3, #4
 800a40c:	6028      	str	r0, [r5, #0]
 800a40e:	0635      	lsls	r5, r6, #24
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	d501      	bpl.n	800a418 <_printf_i+0x1c4>
 800a414:	6019      	str	r1, [r3, #0]
 800a416:	e002      	b.n	800a41e <_printf_i+0x1ca>
 800a418:	0670      	lsls	r0, r6, #25
 800a41a:	d5fb      	bpl.n	800a414 <_printf_i+0x1c0>
 800a41c:	8019      	strh	r1, [r3, #0]
 800a41e:	2300      	movs	r3, #0
 800a420:	6123      	str	r3, [r4, #16]
 800a422:	4615      	mov	r5, r2
 800a424:	e7bc      	b.n	800a3a0 <_printf_i+0x14c>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	602a      	str	r2, [r5, #0]
 800a42c:	681d      	ldr	r5, [r3, #0]
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	2100      	movs	r1, #0
 800a432:	4628      	mov	r0, r5
 800a434:	f7f5 fecc 	bl	80001d0 <memchr>
 800a438:	b108      	cbz	r0, 800a43e <_printf_i+0x1ea>
 800a43a:	1b40      	subs	r0, r0, r5
 800a43c:	6060      	str	r0, [r4, #4]
 800a43e:	6863      	ldr	r3, [r4, #4]
 800a440:	6123      	str	r3, [r4, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a448:	e7aa      	b.n	800a3a0 <_printf_i+0x14c>
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	462a      	mov	r2, r5
 800a44e:	4649      	mov	r1, r9
 800a450:	4640      	mov	r0, r8
 800a452:	47d0      	blx	sl
 800a454:	3001      	adds	r0, #1
 800a456:	d0ad      	beq.n	800a3b4 <_printf_i+0x160>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	079b      	lsls	r3, r3, #30
 800a45c:	d413      	bmi.n	800a486 <_printf_i+0x232>
 800a45e:	68e0      	ldr	r0, [r4, #12]
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	4298      	cmp	r0, r3
 800a464:	bfb8      	it	lt
 800a466:	4618      	movlt	r0, r3
 800a468:	e7a6      	b.n	800a3b8 <_printf_i+0x164>
 800a46a:	2301      	movs	r3, #1
 800a46c:	4632      	mov	r2, r6
 800a46e:	4649      	mov	r1, r9
 800a470:	4640      	mov	r0, r8
 800a472:	47d0      	blx	sl
 800a474:	3001      	adds	r0, #1
 800a476:	d09d      	beq.n	800a3b4 <_printf_i+0x160>
 800a478:	3501      	adds	r5, #1
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	9903      	ldr	r1, [sp, #12]
 800a47e:	1a5b      	subs	r3, r3, r1
 800a480:	42ab      	cmp	r3, r5
 800a482:	dcf2      	bgt.n	800a46a <_printf_i+0x216>
 800a484:	e7eb      	b.n	800a45e <_printf_i+0x20a>
 800a486:	2500      	movs	r5, #0
 800a488:	f104 0619 	add.w	r6, r4, #25
 800a48c:	e7f5      	b.n	800a47a <_printf_i+0x226>
 800a48e:	bf00      	nop
 800a490:	0800e239 	.word	0x0800e239
 800a494:	0800e24a 	.word	0x0800e24a

0800a498 <_scanf_float>:
 800a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	b087      	sub	sp, #28
 800a49e:	4617      	mov	r7, r2
 800a4a0:	9303      	str	r3, [sp, #12]
 800a4a2:	688b      	ldr	r3, [r1, #8]
 800a4a4:	1e5a      	subs	r2, r3, #1
 800a4a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4aa:	bf83      	ittte	hi
 800a4ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4b0:	195b      	addhi	r3, r3, r5
 800a4b2:	9302      	strhi	r3, [sp, #8]
 800a4b4:	2300      	movls	r3, #0
 800a4b6:	bf86      	itte	hi
 800a4b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4bc:	608b      	strhi	r3, [r1, #8]
 800a4be:	9302      	strls	r3, [sp, #8]
 800a4c0:	680b      	ldr	r3, [r1, #0]
 800a4c2:	468b      	mov	fp, r1
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a4ca:	f84b 3b1c 	str.w	r3, [fp], #28
 800a4ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	465e      	mov	r6, fp
 800a4d8:	46aa      	mov	sl, r5
 800a4da:	46a9      	mov	r9, r5
 800a4dc:	9501      	str	r5, [sp, #4]
 800a4de:	68a2      	ldr	r2, [r4, #8]
 800a4e0:	b152      	cbz	r2, 800a4f8 <_scanf_float+0x60>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b4e      	cmp	r3, #78	; 0x4e
 800a4e8:	d864      	bhi.n	800a5b4 <_scanf_float+0x11c>
 800a4ea:	2b40      	cmp	r3, #64	; 0x40
 800a4ec:	d83c      	bhi.n	800a568 <_scanf_float+0xd0>
 800a4ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a4f2:	b2c8      	uxtb	r0, r1
 800a4f4:	280e      	cmp	r0, #14
 800a4f6:	d93a      	bls.n	800a56e <_scanf_float+0xd6>
 800a4f8:	f1b9 0f00 	cmp.w	r9, #0
 800a4fc:	d003      	beq.n	800a506 <_scanf_float+0x6e>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a50a:	f1ba 0f01 	cmp.w	sl, #1
 800a50e:	f200 8113 	bhi.w	800a738 <_scanf_float+0x2a0>
 800a512:	455e      	cmp	r6, fp
 800a514:	f200 8105 	bhi.w	800a722 <_scanf_float+0x28a>
 800a518:	2501      	movs	r5, #1
 800a51a:	4628      	mov	r0, r5
 800a51c:	b007      	add	sp, #28
 800a51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a522:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a526:	2a0d      	cmp	r2, #13
 800a528:	d8e6      	bhi.n	800a4f8 <_scanf_float+0x60>
 800a52a:	a101      	add	r1, pc, #4	; (adr r1, 800a530 <_scanf_float+0x98>)
 800a52c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a530:	0800a66f 	.word	0x0800a66f
 800a534:	0800a4f9 	.word	0x0800a4f9
 800a538:	0800a4f9 	.word	0x0800a4f9
 800a53c:	0800a4f9 	.word	0x0800a4f9
 800a540:	0800a6cf 	.word	0x0800a6cf
 800a544:	0800a6a7 	.word	0x0800a6a7
 800a548:	0800a4f9 	.word	0x0800a4f9
 800a54c:	0800a4f9 	.word	0x0800a4f9
 800a550:	0800a67d 	.word	0x0800a67d
 800a554:	0800a4f9 	.word	0x0800a4f9
 800a558:	0800a4f9 	.word	0x0800a4f9
 800a55c:	0800a4f9 	.word	0x0800a4f9
 800a560:	0800a4f9 	.word	0x0800a4f9
 800a564:	0800a635 	.word	0x0800a635
 800a568:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a56c:	e7db      	b.n	800a526 <_scanf_float+0x8e>
 800a56e:	290e      	cmp	r1, #14
 800a570:	d8c2      	bhi.n	800a4f8 <_scanf_float+0x60>
 800a572:	a001      	add	r0, pc, #4	; (adr r0, 800a578 <_scanf_float+0xe0>)
 800a574:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a578:	0800a627 	.word	0x0800a627
 800a57c:	0800a4f9 	.word	0x0800a4f9
 800a580:	0800a627 	.word	0x0800a627
 800a584:	0800a6bb 	.word	0x0800a6bb
 800a588:	0800a4f9 	.word	0x0800a4f9
 800a58c:	0800a5d5 	.word	0x0800a5d5
 800a590:	0800a611 	.word	0x0800a611
 800a594:	0800a611 	.word	0x0800a611
 800a598:	0800a611 	.word	0x0800a611
 800a59c:	0800a611 	.word	0x0800a611
 800a5a0:	0800a611 	.word	0x0800a611
 800a5a4:	0800a611 	.word	0x0800a611
 800a5a8:	0800a611 	.word	0x0800a611
 800a5ac:	0800a611 	.word	0x0800a611
 800a5b0:	0800a611 	.word	0x0800a611
 800a5b4:	2b6e      	cmp	r3, #110	; 0x6e
 800a5b6:	d809      	bhi.n	800a5cc <_scanf_float+0x134>
 800a5b8:	2b60      	cmp	r3, #96	; 0x60
 800a5ba:	d8b2      	bhi.n	800a522 <_scanf_float+0x8a>
 800a5bc:	2b54      	cmp	r3, #84	; 0x54
 800a5be:	d077      	beq.n	800a6b0 <_scanf_float+0x218>
 800a5c0:	2b59      	cmp	r3, #89	; 0x59
 800a5c2:	d199      	bne.n	800a4f8 <_scanf_float+0x60>
 800a5c4:	2d07      	cmp	r5, #7
 800a5c6:	d197      	bne.n	800a4f8 <_scanf_float+0x60>
 800a5c8:	2508      	movs	r5, #8
 800a5ca:	e029      	b.n	800a620 <_scanf_float+0x188>
 800a5cc:	2b74      	cmp	r3, #116	; 0x74
 800a5ce:	d06f      	beq.n	800a6b0 <_scanf_float+0x218>
 800a5d0:	2b79      	cmp	r3, #121	; 0x79
 800a5d2:	e7f6      	b.n	800a5c2 <_scanf_float+0x12a>
 800a5d4:	6821      	ldr	r1, [r4, #0]
 800a5d6:	05c8      	lsls	r0, r1, #23
 800a5d8:	d51a      	bpl.n	800a610 <_scanf_float+0x178>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a5e0:	6021      	str	r1, [r4, #0]
 800a5e2:	f109 0901 	add.w	r9, r9, #1
 800a5e6:	b11b      	cbz	r3, 800a5f0 <_scanf_float+0x158>
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	3201      	adds	r2, #1
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	60a2      	str	r2, [r4, #8]
 800a5f0:	68a3      	ldr	r3, [r4, #8]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	60a3      	str	r3, [r4, #8]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	6123      	str	r3, [r4, #16]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	607b      	str	r3, [r7, #4]
 800a604:	f340 8084 	ble.w	800a710 <_scanf_float+0x278>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	3301      	adds	r3, #1
 800a60c:	603b      	str	r3, [r7, #0]
 800a60e:	e766      	b.n	800a4de <_scanf_float+0x46>
 800a610:	eb1a 0f05 	cmn.w	sl, r5
 800a614:	f47f af70 	bne.w	800a4f8 <_scanf_float+0x60>
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a61e:	6022      	str	r2, [r4, #0]
 800a620:	f806 3b01 	strb.w	r3, [r6], #1
 800a624:	e7e4      	b.n	800a5f0 <_scanf_float+0x158>
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	0610      	lsls	r0, r2, #24
 800a62a:	f57f af65 	bpl.w	800a4f8 <_scanf_float+0x60>
 800a62e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a632:	e7f4      	b.n	800a61e <_scanf_float+0x186>
 800a634:	f1ba 0f00 	cmp.w	sl, #0
 800a638:	d10e      	bne.n	800a658 <_scanf_float+0x1c0>
 800a63a:	f1b9 0f00 	cmp.w	r9, #0
 800a63e:	d10e      	bne.n	800a65e <_scanf_float+0x1c6>
 800a640:	6822      	ldr	r2, [r4, #0]
 800a642:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a646:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a64a:	d108      	bne.n	800a65e <_scanf_float+0x1c6>
 800a64c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	f04f 0a01 	mov.w	sl, #1
 800a656:	e7e3      	b.n	800a620 <_scanf_float+0x188>
 800a658:	f1ba 0f02 	cmp.w	sl, #2
 800a65c:	d055      	beq.n	800a70a <_scanf_float+0x272>
 800a65e:	2d01      	cmp	r5, #1
 800a660:	d002      	beq.n	800a668 <_scanf_float+0x1d0>
 800a662:	2d04      	cmp	r5, #4
 800a664:	f47f af48 	bne.w	800a4f8 <_scanf_float+0x60>
 800a668:	3501      	adds	r5, #1
 800a66a:	b2ed      	uxtb	r5, r5
 800a66c:	e7d8      	b.n	800a620 <_scanf_float+0x188>
 800a66e:	f1ba 0f01 	cmp.w	sl, #1
 800a672:	f47f af41 	bne.w	800a4f8 <_scanf_float+0x60>
 800a676:	f04f 0a02 	mov.w	sl, #2
 800a67a:	e7d1      	b.n	800a620 <_scanf_float+0x188>
 800a67c:	b97d      	cbnz	r5, 800a69e <_scanf_float+0x206>
 800a67e:	f1b9 0f00 	cmp.w	r9, #0
 800a682:	f47f af3c 	bne.w	800a4fe <_scanf_float+0x66>
 800a686:	6822      	ldr	r2, [r4, #0]
 800a688:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a68c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a690:	f47f af39 	bne.w	800a506 <_scanf_float+0x6e>
 800a694:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	2501      	movs	r5, #1
 800a69c:	e7c0      	b.n	800a620 <_scanf_float+0x188>
 800a69e:	2d03      	cmp	r5, #3
 800a6a0:	d0e2      	beq.n	800a668 <_scanf_float+0x1d0>
 800a6a2:	2d05      	cmp	r5, #5
 800a6a4:	e7de      	b.n	800a664 <_scanf_float+0x1cc>
 800a6a6:	2d02      	cmp	r5, #2
 800a6a8:	f47f af26 	bne.w	800a4f8 <_scanf_float+0x60>
 800a6ac:	2503      	movs	r5, #3
 800a6ae:	e7b7      	b.n	800a620 <_scanf_float+0x188>
 800a6b0:	2d06      	cmp	r5, #6
 800a6b2:	f47f af21 	bne.w	800a4f8 <_scanf_float+0x60>
 800a6b6:	2507      	movs	r5, #7
 800a6b8:	e7b2      	b.n	800a620 <_scanf_float+0x188>
 800a6ba:	6822      	ldr	r2, [r4, #0]
 800a6bc:	0591      	lsls	r1, r2, #22
 800a6be:	f57f af1b 	bpl.w	800a4f8 <_scanf_float+0x60>
 800a6c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6cc:	e7a8      	b.n	800a620 <_scanf_float+0x188>
 800a6ce:	6822      	ldr	r2, [r4, #0]
 800a6d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a6d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a6d8:	d006      	beq.n	800a6e8 <_scanf_float+0x250>
 800a6da:	0550      	lsls	r0, r2, #21
 800a6dc:	f57f af0c 	bpl.w	800a4f8 <_scanf_float+0x60>
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	f43f af0f 	beq.w	800a506 <_scanf_float+0x6e>
 800a6e8:	0591      	lsls	r1, r2, #22
 800a6ea:	bf58      	it	pl
 800a6ec:	9901      	ldrpl	r1, [sp, #4]
 800a6ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a6f2:	bf58      	it	pl
 800a6f4:	eba9 0101 	subpl.w	r1, r9, r1
 800a6f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a6fc:	bf58      	it	pl
 800a6fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a702:	6022      	str	r2, [r4, #0]
 800a704:	f04f 0900 	mov.w	r9, #0
 800a708:	e78a      	b.n	800a620 <_scanf_float+0x188>
 800a70a:	f04f 0a03 	mov.w	sl, #3
 800a70e:	e787      	b.n	800a620 <_scanf_float+0x188>
 800a710:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a714:	4639      	mov	r1, r7
 800a716:	4640      	mov	r0, r8
 800a718:	4798      	blx	r3
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f aedf 	beq.w	800a4de <_scanf_float+0x46>
 800a720:	e6ea      	b.n	800a4f8 <_scanf_float+0x60>
 800a722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a72a:	463a      	mov	r2, r7
 800a72c:	4640      	mov	r0, r8
 800a72e:	4798      	blx	r3
 800a730:	6923      	ldr	r3, [r4, #16]
 800a732:	3b01      	subs	r3, #1
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	e6ec      	b.n	800a512 <_scanf_float+0x7a>
 800a738:	1e6b      	subs	r3, r5, #1
 800a73a:	2b06      	cmp	r3, #6
 800a73c:	d825      	bhi.n	800a78a <_scanf_float+0x2f2>
 800a73e:	2d02      	cmp	r5, #2
 800a740:	d836      	bhi.n	800a7b0 <_scanf_float+0x318>
 800a742:	455e      	cmp	r6, fp
 800a744:	f67f aee8 	bls.w	800a518 <_scanf_float+0x80>
 800a748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a74c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a750:	463a      	mov	r2, r7
 800a752:	4640      	mov	r0, r8
 800a754:	4798      	blx	r3
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	3b01      	subs	r3, #1
 800a75a:	6123      	str	r3, [r4, #16]
 800a75c:	e7f1      	b.n	800a742 <_scanf_float+0x2aa>
 800a75e:	9802      	ldr	r0, [sp, #8]
 800a760:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a764:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a768:	9002      	str	r0, [sp, #8]
 800a76a:	463a      	mov	r2, r7
 800a76c:	4640      	mov	r0, r8
 800a76e:	4798      	blx	r3
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	3b01      	subs	r3, #1
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a77a:	fa5f fa8a 	uxtb.w	sl, sl
 800a77e:	f1ba 0f02 	cmp.w	sl, #2
 800a782:	d1ec      	bne.n	800a75e <_scanf_float+0x2c6>
 800a784:	3d03      	subs	r5, #3
 800a786:	b2ed      	uxtb	r5, r5
 800a788:	1b76      	subs	r6, r6, r5
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	05da      	lsls	r2, r3, #23
 800a78e:	d52f      	bpl.n	800a7f0 <_scanf_float+0x358>
 800a790:	055b      	lsls	r3, r3, #21
 800a792:	d510      	bpl.n	800a7b6 <_scanf_float+0x31e>
 800a794:	455e      	cmp	r6, fp
 800a796:	f67f aebf 	bls.w	800a518 <_scanf_float+0x80>
 800a79a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a79e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	4798      	blx	r3
 800a7a8:	6923      	ldr	r3, [r4, #16]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	e7f1      	b.n	800a794 <_scanf_float+0x2fc>
 800a7b0:	46aa      	mov	sl, r5
 800a7b2:	9602      	str	r6, [sp, #8]
 800a7b4:	e7df      	b.n	800a776 <_scanf_float+0x2de>
 800a7b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	2965      	cmp	r1, #101	; 0x65
 800a7be:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7c6:	6123      	str	r3, [r4, #16]
 800a7c8:	d00c      	beq.n	800a7e4 <_scanf_float+0x34c>
 800a7ca:	2945      	cmp	r1, #69	; 0x45
 800a7cc:	d00a      	beq.n	800a7e4 <_scanf_float+0x34c>
 800a7ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7d2:	463a      	mov	r2, r7
 800a7d4:	4640      	mov	r0, r8
 800a7d6:	4798      	blx	r3
 800a7d8:	6923      	ldr	r3, [r4, #16]
 800a7da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	1eb5      	subs	r5, r6, #2
 800a7e2:	6123      	str	r3, [r4, #16]
 800a7e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a7e8:	463a      	mov	r2, r7
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4798      	blx	r3
 800a7ee:	462e      	mov	r6, r5
 800a7f0:	6825      	ldr	r5, [r4, #0]
 800a7f2:	f015 0510 	ands.w	r5, r5, #16
 800a7f6:	d158      	bne.n	800a8aa <_scanf_float+0x412>
 800a7f8:	7035      	strb	r5, [r6, #0]
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a804:	d11c      	bne.n	800a840 <_scanf_float+0x3a8>
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	454b      	cmp	r3, r9
 800a80a:	eba3 0209 	sub.w	r2, r3, r9
 800a80e:	d124      	bne.n	800a85a <_scanf_float+0x3c2>
 800a810:	2200      	movs	r2, #0
 800a812:	4659      	mov	r1, fp
 800a814:	4640      	mov	r0, r8
 800a816:	f7ff f9d3 	bl	8009bc0 <_strtod_r>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	6821      	ldr	r1, [r4, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f011 0f02 	tst.w	r1, #2
 800a824:	ec57 6b10 	vmov	r6, r7, d0
 800a828:	f103 0204 	add.w	r2, r3, #4
 800a82c:	d020      	beq.n	800a870 <_scanf_float+0x3d8>
 800a82e:	9903      	ldr	r1, [sp, #12]
 800a830:	600a      	str	r2, [r1, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	e9c3 6700 	strd	r6, r7, [r3]
 800a838:	68e3      	ldr	r3, [r4, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60e3      	str	r3, [r4, #12]
 800a83e:	e66c      	b.n	800a51a <_scanf_float+0x82>
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0e4      	beq.n	800a810 <_scanf_float+0x378>
 800a846:	9905      	ldr	r1, [sp, #20]
 800a848:	230a      	movs	r3, #10
 800a84a:	462a      	mov	r2, r5
 800a84c:	3101      	adds	r1, #1
 800a84e:	4640      	mov	r0, r8
 800a850:	f002 fa0e 	bl	800cc70 <_strtol_r>
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	9e05      	ldr	r6, [sp, #20]
 800a858:	1ac2      	subs	r2, r0, r3
 800a85a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a85e:	429e      	cmp	r6, r3
 800a860:	bf28      	it	cs
 800a862:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a866:	4912      	ldr	r1, [pc, #72]	; (800a8b0 <_scanf_float+0x418>)
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f8e7 	bl	800aa3c <siprintf>
 800a86e:	e7cf      	b.n	800a810 <_scanf_float+0x378>
 800a870:	f011 0f04 	tst.w	r1, #4
 800a874:	9903      	ldr	r1, [sp, #12]
 800a876:	600a      	str	r2, [r1, #0]
 800a878:	d1db      	bne.n	800a832 <_scanf_float+0x39a>
 800a87a:	f8d3 8000 	ldr.w	r8, [r3]
 800a87e:	ee10 2a10 	vmov	r2, s0
 800a882:	ee10 0a10 	vmov	r0, s0
 800a886:	463b      	mov	r3, r7
 800a888:	4639      	mov	r1, r7
 800a88a:	f7f6 f94f 	bl	8000b2c <__aeabi_dcmpun>
 800a88e:	b128      	cbz	r0, 800a89c <_scanf_float+0x404>
 800a890:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <_scanf_float+0x41c>)
 800a892:	f000 fa7d 	bl	800ad90 <nanf>
 800a896:	ed88 0a00 	vstr	s0, [r8]
 800a89a:	e7cd      	b.n	800a838 <_scanf_float+0x3a0>
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f6 f9a2 	bl	8000be8 <__aeabi_d2f>
 800a8a4:	f8c8 0000 	str.w	r0, [r8]
 800a8a8:	e7c6      	b.n	800a838 <_scanf_float+0x3a0>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	e635      	b.n	800a51a <_scanf_float+0x82>
 800a8ae:	bf00      	nop
 800a8b0:	0800e25b 	.word	0x0800e25b
 800a8b4:	0800e513 	.word	0x0800e513

0800a8b8 <std>:
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	e9c0 3300 	strd	r3, r3, [r0]
 800a8c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c6:	6083      	str	r3, [r0, #8]
 800a8c8:	8181      	strh	r1, [r0, #12]
 800a8ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a8cc:	81c2      	strh	r2, [r0, #14]
 800a8ce:	6183      	str	r3, [r0, #24]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	2208      	movs	r2, #8
 800a8d4:	305c      	adds	r0, #92	; 0x5c
 800a8d6:	f000 f942 	bl	800ab5e <memset>
 800a8da:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <std+0x58>)
 800a8dc:	6263      	str	r3, [r4, #36]	; 0x24
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <std+0x5c>)
 800a8e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <std+0x60>)
 800a8e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <std+0x64>)
 800a8e8:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <std+0x68>)
 800a8ec:	6224      	str	r4, [r4, #32]
 800a8ee:	429c      	cmp	r4, r3
 800a8f0:	d006      	beq.n	800a900 <std+0x48>
 800a8f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8f6:	4294      	cmp	r4, r2
 800a8f8:	d002      	beq.n	800a900 <std+0x48>
 800a8fa:	33d0      	adds	r3, #208	; 0xd0
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d105      	bne.n	800a90c <std+0x54>
 800a900:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a908:	f000 ba28 	b.w	800ad5c <__retarget_lock_init_recursive>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	bf00      	nop
 800a910:	0800aad5 	.word	0x0800aad5
 800a914:	0800aafb 	.word	0x0800aafb
 800a918:	0800ab33 	.word	0x0800ab33
 800a91c:	0800ab57 	.word	0x0800ab57
 800a920:	20005924 	.word	0x20005924

0800a924 <stdio_exit_handler>:
 800a924:	4a02      	ldr	r2, [pc, #8]	; (800a930 <stdio_exit_handler+0xc>)
 800a926:	4903      	ldr	r1, [pc, #12]	; (800a934 <stdio_exit_handler+0x10>)
 800a928:	4803      	ldr	r0, [pc, #12]	; (800a938 <stdio_exit_handler+0x14>)
 800a92a:	f000 b869 	b.w	800aa00 <_fwalk_sglue>
 800a92e:	bf00      	nop
 800a930:	20000014 	.word	0x20000014
 800a934:	0800d68d 	.word	0x0800d68d
 800a938:	2000018c 	.word	0x2000018c

0800a93c <cleanup_stdio>:
 800a93c:	6841      	ldr	r1, [r0, #4]
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <cleanup_stdio+0x34>)
 800a940:	4299      	cmp	r1, r3
 800a942:	b510      	push	{r4, lr}
 800a944:	4604      	mov	r4, r0
 800a946:	d001      	beq.n	800a94c <cleanup_stdio+0x10>
 800a948:	f002 fea0 	bl	800d68c <_fflush_r>
 800a94c:	68a1      	ldr	r1, [r4, #8]
 800a94e:	4b09      	ldr	r3, [pc, #36]	; (800a974 <cleanup_stdio+0x38>)
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <cleanup_stdio+0x1e>
 800a954:	4620      	mov	r0, r4
 800a956:	f002 fe99 	bl	800d68c <_fflush_r>
 800a95a:	68e1      	ldr	r1, [r4, #12]
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <cleanup_stdio+0x3c>)
 800a95e:	4299      	cmp	r1, r3
 800a960:	d004      	beq.n	800a96c <cleanup_stdio+0x30>
 800a962:	4620      	mov	r0, r4
 800a964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a968:	f002 be90 	b.w	800d68c <_fflush_r>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	bf00      	nop
 800a970:	20005924 	.word	0x20005924
 800a974:	2000598c 	.word	0x2000598c
 800a978:	200059f4 	.word	0x200059f4

0800a97c <global_stdio_init.part.0>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <global_stdio_init.part.0+0x30>)
 800a980:	4c0b      	ldr	r4, [pc, #44]	; (800a9b0 <global_stdio_init.part.0+0x34>)
 800a982:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <global_stdio_init.part.0+0x38>)
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	4620      	mov	r0, r4
 800a988:	2200      	movs	r2, #0
 800a98a:	2104      	movs	r1, #4
 800a98c:	f7ff ff94 	bl	800a8b8 <std>
 800a990:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a994:	2201      	movs	r2, #1
 800a996:	2109      	movs	r1, #9
 800a998:	f7ff ff8e 	bl	800a8b8 <std>
 800a99c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a6:	2112      	movs	r1, #18
 800a9a8:	f7ff bf86 	b.w	800a8b8 <std>
 800a9ac:	20005a5c 	.word	0x20005a5c
 800a9b0:	20005924 	.word	0x20005924
 800a9b4:	0800a925 	.word	0x0800a925

0800a9b8 <__sfp_lock_acquire>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	; (800a9c0 <__sfp_lock_acquire+0x8>)
 800a9ba:	f000 b9d0 	b.w	800ad5e <__retarget_lock_acquire_recursive>
 800a9be:	bf00      	nop
 800a9c0:	20005a65 	.word	0x20005a65

0800a9c4 <__sfp_lock_release>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	; (800a9cc <__sfp_lock_release+0x8>)
 800a9c6:	f000 b9cb 	b.w	800ad60 <__retarget_lock_release_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	20005a65 	.word	0x20005a65

0800a9d0 <__sinit>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	f7ff fff0 	bl	800a9b8 <__sfp_lock_acquire>
 800a9d8:	6a23      	ldr	r3, [r4, #32]
 800a9da:	b11b      	cbz	r3, 800a9e4 <__sinit+0x14>
 800a9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e0:	f7ff bff0 	b.w	800a9c4 <__sfp_lock_release>
 800a9e4:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <__sinit+0x28>)
 800a9e6:	6223      	str	r3, [r4, #32]
 800a9e8:	4b04      	ldr	r3, [pc, #16]	; (800a9fc <__sinit+0x2c>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1f5      	bne.n	800a9dc <__sinit+0xc>
 800a9f0:	f7ff ffc4 	bl	800a97c <global_stdio_init.part.0>
 800a9f4:	e7f2      	b.n	800a9dc <__sinit+0xc>
 800a9f6:	bf00      	nop
 800a9f8:	0800a93d 	.word	0x0800a93d
 800a9fc:	20005a5c 	.word	0x20005a5c

0800aa00 <_fwalk_sglue>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	4607      	mov	r7, r0
 800aa06:	4688      	mov	r8, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	2600      	movs	r6, #0
 800aa0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa10:	f1b9 0901 	subs.w	r9, r9, #1
 800aa14:	d505      	bpl.n	800aa22 <_fwalk_sglue+0x22>
 800aa16:	6824      	ldr	r4, [r4, #0]
 800aa18:	2c00      	cmp	r4, #0
 800aa1a:	d1f7      	bne.n	800aa0c <_fwalk_sglue+0xc>
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa22:	89ab      	ldrh	r3, [r5, #12]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d907      	bls.n	800aa38 <_fwalk_sglue+0x38>
 800aa28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	d003      	beq.n	800aa38 <_fwalk_sglue+0x38>
 800aa30:	4629      	mov	r1, r5
 800aa32:	4638      	mov	r0, r7
 800aa34:	47c0      	blx	r8
 800aa36:	4306      	orrs	r6, r0
 800aa38:	3568      	adds	r5, #104	; 0x68
 800aa3a:	e7e9      	b.n	800aa10 <_fwalk_sglue+0x10>

0800aa3c <siprintf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	b500      	push	{lr}
 800aa40:	b09c      	sub	sp, #112	; 0x70
 800aa42:	ab1d      	add	r3, sp, #116	; 0x74
 800aa44:	9002      	str	r0, [sp, #8]
 800aa46:	9006      	str	r0, [sp, #24]
 800aa48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa4c:	4809      	ldr	r0, [pc, #36]	; (800aa74 <siprintf+0x38>)
 800aa4e:	9107      	str	r1, [sp, #28]
 800aa50:	9104      	str	r1, [sp, #16]
 800aa52:	4909      	ldr	r1, [pc, #36]	; (800aa78 <siprintf+0x3c>)
 800aa54:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa58:	9105      	str	r1, [sp, #20]
 800aa5a:	6800      	ldr	r0, [r0, #0]
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	a902      	add	r1, sp, #8
 800aa60:	f002 f970 	bl	800cd44 <_svfiprintf_r>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	2200      	movs	r2, #0
 800aa68:	701a      	strb	r2, [r3, #0]
 800aa6a:	b01c      	add	sp, #112	; 0x70
 800aa6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa70:	b003      	add	sp, #12
 800aa72:	4770      	bx	lr
 800aa74:	200001d8 	.word	0x200001d8
 800aa78:	ffff0208 	.word	0xffff0208

0800aa7c <siscanf>:
 800aa7c:	b40e      	push	{r1, r2, r3}
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	b09f      	sub	sp, #124	; 0x7c
 800aa82:	ac21      	add	r4, sp, #132	; 0x84
 800aa84:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aa88:	f854 2b04 	ldr.w	r2, [r4], #4
 800aa8c:	9201      	str	r2, [sp, #4]
 800aa8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aa92:	9004      	str	r0, [sp, #16]
 800aa94:	9008      	str	r0, [sp, #32]
 800aa96:	f7f5 fbeb 	bl	8000270 <strlen>
 800aa9a:	4b0c      	ldr	r3, [pc, #48]	; (800aacc <siscanf+0x50>)
 800aa9c:	9005      	str	r0, [sp, #20]
 800aa9e:	9009      	str	r0, [sp, #36]	; 0x24
 800aaa0:	930d      	str	r3, [sp, #52]	; 0x34
 800aaa2:	480b      	ldr	r0, [pc, #44]	; (800aad0 <siscanf+0x54>)
 800aaa4:	9a01      	ldr	r2, [sp, #4]
 800aaa6:	6800      	ldr	r0, [r0, #0]
 800aaa8:	9403      	str	r4, [sp, #12]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9311      	str	r3, [sp, #68]	; 0x44
 800aaae:	9316      	str	r3, [sp, #88]	; 0x58
 800aab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aab4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aab8:	a904      	add	r1, sp, #16
 800aaba:	4623      	mov	r3, r4
 800aabc:	f002 fa9a 	bl	800cff4 <__ssvfiscanf_r>
 800aac0:	b01f      	add	sp, #124	; 0x7c
 800aac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac6:	b003      	add	sp, #12
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	0800aaf7 	.word	0x0800aaf7
 800aad0:	200001d8 	.word	0x200001d8

0800aad4 <__sread>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	460c      	mov	r4, r1
 800aad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aadc:	f000 f8e0 	bl	800aca0 <_read_r>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	bfab      	itete	ge
 800aae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aae6:	89a3      	ldrhlt	r3, [r4, #12]
 800aae8:	181b      	addge	r3, r3, r0
 800aaea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaee:	bfac      	ite	ge
 800aaf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaf2:	81a3      	strhlt	r3, [r4, #12]
 800aaf4:	bd10      	pop	{r4, pc}

0800aaf6 <__seofread>:
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	4770      	bx	lr

0800aafa <__swrite>:
 800aafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aafe:	461f      	mov	r7, r3
 800ab00:	898b      	ldrh	r3, [r1, #12]
 800ab02:	05db      	lsls	r3, r3, #23
 800ab04:	4605      	mov	r5, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	4616      	mov	r6, r2
 800ab0a:	d505      	bpl.n	800ab18 <__swrite+0x1e>
 800ab0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab10:	2302      	movs	r3, #2
 800ab12:	2200      	movs	r2, #0
 800ab14:	f000 f8b2 	bl	800ac7c <_lseek_r>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	f000 b8d9 	b.w	800ace4 <_write_r>

0800ab32 <__sseek>:
 800ab32:	b510      	push	{r4, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3a:	f000 f89f 	bl	800ac7c <_lseek_r>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	bf15      	itete	ne
 800ab44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab4e:	81a3      	strheq	r3, [r4, #12]
 800ab50:	bf18      	it	ne
 800ab52:	81a3      	strhne	r3, [r4, #12]
 800ab54:	bd10      	pop	{r4, pc}

0800ab56 <__sclose>:
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 b87f 	b.w	800ac5c <_close_r>

0800ab5e <memset>:
 800ab5e:	4402      	add	r2, r0
 800ab60:	4603      	mov	r3, r0
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d100      	bne.n	800ab68 <memset+0xa>
 800ab66:	4770      	bx	lr
 800ab68:	f803 1b01 	strb.w	r1, [r3], #1
 800ab6c:	e7f9      	b.n	800ab62 <memset+0x4>

0800ab6e <strchr>:
 800ab6e:	b2c9      	uxtb	r1, r1
 800ab70:	4603      	mov	r3, r0
 800ab72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab76:	b11a      	cbz	r2, 800ab80 <strchr+0x12>
 800ab78:	428a      	cmp	r2, r1
 800ab7a:	d1f9      	bne.n	800ab70 <strchr+0x2>
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	4770      	bx	lr
 800ab80:	2900      	cmp	r1, #0
 800ab82:	bf18      	it	ne
 800ab84:	2300      	movne	r3, #0
 800ab86:	e7f9      	b.n	800ab7c <strchr+0xe>

0800ab88 <strncat>:
 800ab88:	b530      	push	{r4, r5, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	7825      	ldrb	r5, [r4, #0]
 800ab8e:	4623      	mov	r3, r4
 800ab90:	3401      	adds	r4, #1
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	d1fa      	bne.n	800ab8c <strncat+0x4>
 800ab96:	3a01      	subs	r2, #1
 800ab98:	d304      	bcc.n	800aba4 <strncat+0x1c>
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4b01 	strb.w	r4, [r3], #1
 800aba2:	b904      	cbnz	r4, 800aba6 <strncat+0x1e>
 800aba4:	bd30      	pop	{r4, r5, pc}
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	d1f5      	bne.n	800ab96 <strncat+0xe>
 800abaa:	701a      	strb	r2, [r3, #0]
 800abac:	e7f3      	b.n	800ab96 <strncat+0xe>

0800abae <strncmp>:
 800abae:	b510      	push	{r4, lr}
 800abb0:	b16a      	cbz	r2, 800abce <strncmp+0x20>
 800abb2:	3901      	subs	r1, #1
 800abb4:	1884      	adds	r4, r0, r2
 800abb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d103      	bne.n	800abca <strncmp+0x1c>
 800abc2:	42a0      	cmp	r0, r4
 800abc4:	d001      	beq.n	800abca <strncmp+0x1c>
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	d1f5      	bne.n	800abb6 <strncmp+0x8>
 800abca:	1ad0      	subs	r0, r2, r3
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	4610      	mov	r0, r2
 800abd0:	e7fc      	b.n	800abcc <strncmp+0x1e>

0800abd2 <__strtok_r>:
 800abd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd4:	b908      	cbnz	r0, 800abda <__strtok_r+0x8>
 800abd6:	6810      	ldr	r0, [r2, #0]
 800abd8:	b188      	cbz	r0, 800abfe <__strtok_r+0x2c>
 800abda:	4604      	mov	r4, r0
 800abdc:	4620      	mov	r0, r4
 800abde:	f814 5b01 	ldrb.w	r5, [r4], #1
 800abe2:	460f      	mov	r7, r1
 800abe4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800abe8:	b91e      	cbnz	r6, 800abf2 <__strtok_r+0x20>
 800abea:	b965      	cbnz	r5, 800ac06 <__strtok_r+0x34>
 800abec:	6015      	str	r5, [r2, #0]
 800abee:	4628      	mov	r0, r5
 800abf0:	e005      	b.n	800abfe <__strtok_r+0x2c>
 800abf2:	42b5      	cmp	r5, r6
 800abf4:	d1f6      	bne.n	800abe4 <__strtok_r+0x12>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f0      	bne.n	800abdc <__strtok_r+0xa>
 800abfa:	6014      	str	r4, [r2, #0]
 800abfc:	7003      	strb	r3, [r0, #0]
 800abfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac00:	461c      	mov	r4, r3
 800ac02:	e00c      	b.n	800ac1e <__strtok_r+0x4c>
 800ac04:	b915      	cbnz	r5, 800ac0c <__strtok_r+0x3a>
 800ac06:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ac10:	42ab      	cmp	r3, r5
 800ac12:	d1f7      	bne.n	800ac04 <__strtok_r+0x32>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0f3      	beq.n	800ac00 <__strtok_r+0x2e>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ac1e:	6014      	str	r4, [r2, #0]
 800ac20:	e7ed      	b.n	800abfe <__strtok_r+0x2c>

0800ac22 <strtok_r>:
 800ac22:	2301      	movs	r3, #1
 800ac24:	f7ff bfd5 	b.w	800abd2 <__strtok_r>

0800ac28 <strstr>:
 800ac28:	780a      	ldrb	r2, [r1, #0]
 800ac2a:	b570      	push	{r4, r5, r6, lr}
 800ac2c:	b96a      	cbnz	r2, 800ac4a <strstr+0x22>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d109      	bne.n	800ac48 <strstr+0x20>
 800ac34:	460c      	mov	r4, r1
 800ac36:	4605      	mov	r5, r0
 800ac38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f6      	beq.n	800ac2e <strstr+0x6>
 800ac40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ac44:	429e      	cmp	r6, r3
 800ac46:	d0f7      	beq.n	800ac38 <strstr+0x10>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	7803      	ldrb	r3, [r0, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ef      	bne.n	800ac30 <strstr+0x8>
 800ac50:	4618      	mov	r0, r3
 800ac52:	e7ec      	b.n	800ac2e <strstr+0x6>

0800ac54 <_localeconv_r>:
 800ac54:	4800      	ldr	r0, [pc, #0]	; (800ac58 <_localeconv_r+0x4>)
 800ac56:	4770      	bx	lr
 800ac58:	20000110 	.word	0x20000110

0800ac5c <_close_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d06      	ldr	r5, [pc, #24]	; (800ac78 <_close_r+0x1c>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	602b      	str	r3, [r5, #0]
 800ac68:	f7f8 fee5 	bl	8003a36 <_close>
 800ac6c:	1c43      	adds	r3, r0, #1
 800ac6e:	d102      	bne.n	800ac76 <_close_r+0x1a>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	b103      	cbz	r3, 800ac76 <_close_r+0x1a>
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	20005a60 	.word	0x20005a60

0800ac7c <_lseek_r>:
 800ac7c:	b538      	push	{r3, r4, r5, lr}
 800ac7e:	4d07      	ldr	r5, [pc, #28]	; (800ac9c <_lseek_r+0x20>)
 800ac80:	4604      	mov	r4, r0
 800ac82:	4608      	mov	r0, r1
 800ac84:	4611      	mov	r1, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	602a      	str	r2, [r5, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f7f8 fefa 	bl	8003a84 <_lseek>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_lseek_r+0x1e>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_lseek_r+0x1e>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	20005a60 	.word	0x20005a60

0800aca0 <_read_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d07      	ldr	r5, [pc, #28]	; (800acc0 <_read_r+0x20>)
 800aca4:	4604      	mov	r4, r0
 800aca6:	4608      	mov	r0, r1
 800aca8:	4611      	mov	r1, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	602a      	str	r2, [r5, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	f7f8 fe88 	bl	80039c4 <_read>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_read_r+0x1e>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	b103      	cbz	r3, 800acbe <_read_r+0x1e>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20005a60 	.word	0x20005a60

0800acc4 <_sbrk_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d06      	ldr	r5, [pc, #24]	; (800ace0 <_sbrk_r+0x1c>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7f8 fee6 	bl	8003aa0 <_sbrk>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_sbrk_r+0x1a>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_sbrk_r+0x1a>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20005a60 	.word	0x20005a60

0800ace4 <_write_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d07      	ldr	r5, [pc, #28]	; (800ad04 <_write_r+0x20>)
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	2200      	movs	r2, #0
 800acf0:	602a      	str	r2, [r5, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f7f8 fe83 	bl	80039fe <_write>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d102      	bne.n	800ad02 <_write_r+0x1e>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	b103      	cbz	r3, 800ad02 <_write_r+0x1e>
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	20005a60 	.word	0x20005a60

0800ad08 <__errno>:
 800ad08:	4b01      	ldr	r3, [pc, #4]	; (800ad10 <__errno+0x8>)
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	200001d8 	.word	0x200001d8

0800ad14 <__libc_init_array>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	4d0d      	ldr	r5, [pc, #52]	; (800ad4c <__libc_init_array+0x38>)
 800ad18:	4c0d      	ldr	r4, [pc, #52]	; (800ad50 <__libc_init_array+0x3c>)
 800ad1a:	1b64      	subs	r4, r4, r5
 800ad1c:	10a4      	asrs	r4, r4, #2
 800ad1e:	2600      	movs	r6, #0
 800ad20:	42a6      	cmp	r6, r4
 800ad22:	d109      	bne.n	800ad38 <__libc_init_array+0x24>
 800ad24:	4d0b      	ldr	r5, [pc, #44]	; (800ad54 <__libc_init_array+0x40>)
 800ad26:	4c0c      	ldr	r4, [pc, #48]	; (800ad58 <__libc_init_array+0x44>)
 800ad28:	f003 f8c8 	bl	800debc <_init>
 800ad2c:	1b64      	subs	r4, r4, r5
 800ad2e:	10a4      	asrs	r4, r4, #2
 800ad30:	2600      	movs	r6, #0
 800ad32:	42a6      	cmp	r6, r4
 800ad34:	d105      	bne.n	800ad42 <__libc_init_array+0x2e>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad3c:	4798      	blx	r3
 800ad3e:	3601      	adds	r6, #1
 800ad40:	e7ee      	b.n	800ad20 <__libc_init_array+0xc>
 800ad42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad46:	4798      	blx	r3
 800ad48:	3601      	adds	r6, #1
 800ad4a:	e7f2      	b.n	800ad32 <__libc_init_array+0x1e>
 800ad4c:	0800e51c 	.word	0x0800e51c
 800ad50:	0800e51c 	.word	0x0800e51c
 800ad54:	0800e51c 	.word	0x0800e51c
 800ad58:	0800e520 	.word	0x0800e520

0800ad5c <__retarget_lock_init_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <__retarget_lock_acquire_recursive>:
 800ad5e:	4770      	bx	lr

0800ad60 <__retarget_lock_release_recursive>:
 800ad60:	4770      	bx	lr

0800ad62 <memcpy>:
 800ad62:	440a      	add	r2, r1
 800ad64:	4291      	cmp	r1, r2
 800ad66:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad6a:	d100      	bne.n	800ad6e <memcpy+0xc>
 800ad6c:	4770      	bx	lr
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad78:	4291      	cmp	r1, r2
 800ad7a:	d1f9      	bne.n	800ad70 <memcpy+0xe>
 800ad7c:	bd10      	pop	{r4, pc}
	...

0800ad80 <nan>:
 800ad80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad88 <nan+0x8>
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	00000000 	.word	0x00000000
 800ad8c:	7ff80000 	.word	0x7ff80000

0800ad90 <nanf>:
 800ad90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad98 <nanf+0x8>
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	7fc00000 	.word	0x7fc00000

0800ad9c <quorem>:
 800ad9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	6903      	ldr	r3, [r0, #16]
 800ada2:	690c      	ldr	r4, [r1, #16]
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	4607      	mov	r7, r0
 800ada8:	db7e      	blt.n	800aea8 <quorem+0x10c>
 800adaa:	3c01      	subs	r4, #1
 800adac:	f101 0814 	add.w	r8, r1, #20
 800adb0:	f100 0514 	add.w	r5, r0, #20
 800adb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc2:	3301      	adds	r3, #1
 800adc4:	429a      	cmp	r2, r3
 800adc6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adce:	fbb2 f6f3 	udiv	r6, r2, r3
 800add2:	d331      	bcc.n	800ae38 <quorem+0x9c>
 800add4:	f04f 0e00 	mov.w	lr, #0
 800add8:	4640      	mov	r0, r8
 800adda:	46ac      	mov	ip, r5
 800addc:	46f2      	mov	sl, lr
 800adde:	f850 2b04 	ldr.w	r2, [r0], #4
 800ade2:	b293      	uxth	r3, r2
 800ade4:	fb06 e303 	mla	r3, r6, r3, lr
 800ade8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adec:	0c1a      	lsrs	r2, r3, #16
 800adee:	b29b      	uxth	r3, r3
 800adf0:	ebaa 0303 	sub.w	r3, sl, r3
 800adf4:	f8dc a000 	ldr.w	sl, [ip]
 800adf8:	fa13 f38a 	uxtah	r3, r3, sl
 800adfc:	fb06 220e 	mla	r2, r6, lr, r2
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	9b00      	ldr	r3, [sp, #0]
 800ae04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae12:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae16:	4581      	cmp	r9, r0
 800ae18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae1c:	f84c 3b04 	str.w	r3, [ip], #4
 800ae20:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae24:	d2db      	bcs.n	800adde <quorem+0x42>
 800ae26:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae2a:	b92b      	cbnz	r3, 800ae38 <quorem+0x9c>
 800ae2c:	9b01      	ldr	r3, [sp, #4]
 800ae2e:	3b04      	subs	r3, #4
 800ae30:	429d      	cmp	r5, r3
 800ae32:	461a      	mov	r2, r3
 800ae34:	d32c      	bcc.n	800ae90 <quorem+0xf4>
 800ae36:	613c      	str	r4, [r7, #16]
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f001 fca7 	bl	800c78c <__mcmp>
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	db22      	blt.n	800ae88 <quorem+0xec>
 800ae42:	3601      	adds	r6, #1
 800ae44:	4629      	mov	r1, r5
 800ae46:	2000      	movs	r0, #0
 800ae48:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae4c:	f8d1 c000 	ldr.w	ip, [r1]
 800ae50:	b293      	uxth	r3, r2
 800ae52:	1ac3      	subs	r3, r0, r3
 800ae54:	0c12      	lsrs	r2, r2, #16
 800ae56:	fa13 f38c 	uxtah	r3, r3, ip
 800ae5a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae68:	45c1      	cmp	r9, r8
 800ae6a:	f841 3b04 	str.w	r3, [r1], #4
 800ae6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae72:	d2e9      	bcs.n	800ae48 <quorem+0xac>
 800ae74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae7c:	b922      	cbnz	r2, 800ae88 <quorem+0xec>
 800ae7e:	3b04      	subs	r3, #4
 800ae80:	429d      	cmp	r5, r3
 800ae82:	461a      	mov	r2, r3
 800ae84:	d30a      	bcc.n	800ae9c <quorem+0x100>
 800ae86:	613c      	str	r4, [r7, #16]
 800ae88:	4630      	mov	r0, r6
 800ae8a:	b003      	add	sp, #12
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae90:	6812      	ldr	r2, [r2, #0]
 800ae92:	3b04      	subs	r3, #4
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	d1ce      	bne.n	800ae36 <quorem+0x9a>
 800ae98:	3c01      	subs	r4, #1
 800ae9a:	e7c9      	b.n	800ae30 <quorem+0x94>
 800ae9c:	6812      	ldr	r2, [r2, #0]
 800ae9e:	3b04      	subs	r3, #4
 800aea0:	2a00      	cmp	r2, #0
 800aea2:	d1f0      	bne.n	800ae86 <quorem+0xea>
 800aea4:	3c01      	subs	r4, #1
 800aea6:	e7eb      	b.n	800ae80 <quorem+0xe4>
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e7ee      	b.n	800ae8a <quorem+0xee>
 800aeac:	0000      	movs	r0, r0
	...

0800aeb0 <_dtoa_r>:
 800aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	ed2d 8b04 	vpush	{d8-d9}
 800aeb8:	69c5      	ldr	r5, [r0, #28]
 800aeba:	b093      	sub	sp, #76	; 0x4c
 800aebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aec0:	ec57 6b10 	vmov	r6, r7, d0
 800aec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aec8:	9107      	str	r1, [sp, #28]
 800aeca:	4604      	mov	r4, r0
 800aecc:	920a      	str	r2, [sp, #40]	; 0x28
 800aece:	930d      	str	r3, [sp, #52]	; 0x34
 800aed0:	b975      	cbnz	r5, 800aef0 <_dtoa_r+0x40>
 800aed2:	2010      	movs	r0, #16
 800aed4:	f7fd ff82 	bl	8008ddc <malloc>
 800aed8:	4602      	mov	r2, r0
 800aeda:	61e0      	str	r0, [r4, #28]
 800aedc:	b920      	cbnz	r0, 800aee8 <_dtoa_r+0x38>
 800aede:	4bae      	ldr	r3, [pc, #696]	; (800b198 <_dtoa_r+0x2e8>)
 800aee0:	21ef      	movs	r1, #239	; 0xef
 800aee2:	48ae      	ldr	r0, [pc, #696]	; (800b19c <_dtoa_r+0x2ec>)
 800aee4:	f002 fc88 	bl	800d7f8 <__assert_func>
 800aee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aeec:	6005      	str	r5, [r0, #0]
 800aeee:	60c5      	str	r5, [r0, #12]
 800aef0:	69e3      	ldr	r3, [r4, #28]
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	b151      	cbz	r1, 800af0c <_dtoa_r+0x5c>
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	604a      	str	r2, [r1, #4]
 800aefa:	2301      	movs	r3, #1
 800aefc:	4093      	lsls	r3, r2
 800aefe:	608b      	str	r3, [r1, #8]
 800af00:	4620      	mov	r0, r4
 800af02:	f001 f9bd 	bl	800c280 <_Bfree>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	1e3b      	subs	r3, r7, #0
 800af0e:	bfbb      	ittet	lt
 800af10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af14:	9303      	strlt	r3, [sp, #12]
 800af16:	2300      	movge	r3, #0
 800af18:	2201      	movlt	r2, #1
 800af1a:	bfac      	ite	ge
 800af1c:	f8c8 3000 	strge.w	r3, [r8]
 800af20:	f8c8 2000 	strlt.w	r2, [r8]
 800af24:	4b9e      	ldr	r3, [pc, #632]	; (800b1a0 <_dtoa_r+0x2f0>)
 800af26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800af2a:	ea33 0308 	bics.w	r3, r3, r8
 800af2e:	d11b      	bne.n	800af68 <_dtoa_r+0xb8>
 800af30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af32:	f242 730f 	movw	r3, #9999	; 0x270f
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800af3c:	4333      	orrs	r3, r6
 800af3e:	f000 8593 	beq.w	800ba68 <_dtoa_r+0xbb8>
 800af42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af44:	b963      	cbnz	r3, 800af60 <_dtoa_r+0xb0>
 800af46:	4b97      	ldr	r3, [pc, #604]	; (800b1a4 <_dtoa_r+0x2f4>)
 800af48:	e027      	b.n	800af9a <_dtoa_r+0xea>
 800af4a:	4b97      	ldr	r3, [pc, #604]	; (800b1a8 <_dtoa_r+0x2f8>)
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	3308      	adds	r3, #8
 800af50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	9800      	ldr	r0, [sp, #0]
 800af56:	b013      	add	sp, #76	; 0x4c
 800af58:	ecbd 8b04 	vpop	{d8-d9}
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	4b90      	ldr	r3, [pc, #576]	; (800b1a4 <_dtoa_r+0x2f4>)
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	3303      	adds	r3, #3
 800af66:	e7f3      	b.n	800af50 <_dtoa_r+0xa0>
 800af68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af6c:	2200      	movs	r2, #0
 800af6e:	ec51 0b17 	vmov	r0, r1, d7
 800af72:	eeb0 8a47 	vmov.f32	s16, s14
 800af76:	eef0 8a67 	vmov.f32	s17, s15
 800af7a:	2300      	movs	r3, #0
 800af7c:	f7f5 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af80:	4681      	mov	r9, r0
 800af82:	b160      	cbz	r0, 800af9e <_dtoa_r+0xee>
 800af84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af86:	2301      	movs	r3, #1
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 8568 	beq.w	800ba62 <_dtoa_r+0xbb2>
 800af92:	4b86      	ldr	r3, [pc, #536]	; (800b1ac <_dtoa_r+0x2fc>)
 800af94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	3b01      	subs	r3, #1
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	e7da      	b.n	800af54 <_dtoa_r+0xa4>
 800af9e:	aa10      	add	r2, sp, #64	; 0x40
 800afa0:	a911      	add	r1, sp, #68	; 0x44
 800afa2:	4620      	mov	r0, r4
 800afa4:	eeb0 0a48 	vmov.f32	s0, s16
 800afa8:	eef0 0a68 	vmov.f32	s1, s17
 800afac:	f001 fd04 	bl	800c9b8 <__d2b>
 800afb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800afb4:	4682      	mov	sl, r0
 800afb6:	2d00      	cmp	r5, #0
 800afb8:	d07f      	beq.n	800b0ba <_dtoa_r+0x20a>
 800afba:	ee18 3a90 	vmov	r3, s17
 800afbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800afc6:	ec51 0b18 	vmov	r0, r1, d8
 800afca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800afce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800afd6:	4619      	mov	r1, r3
 800afd8:	2200      	movs	r2, #0
 800afda:	4b75      	ldr	r3, [pc, #468]	; (800b1b0 <_dtoa_r+0x300>)
 800afdc:	f7f5 f954 	bl	8000288 <__aeabi_dsub>
 800afe0:	a367      	add	r3, pc, #412	; (adr r3, 800b180 <_dtoa_r+0x2d0>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 fb07 	bl	80005f8 <__aeabi_dmul>
 800afea:	a367      	add	r3, pc, #412	; (adr r3, 800b188 <_dtoa_r+0x2d8>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 f94c 	bl	800028c <__adddf3>
 800aff4:	4606      	mov	r6, r0
 800aff6:	4628      	mov	r0, r5
 800aff8:	460f      	mov	r7, r1
 800affa:	f7f5 fa93 	bl	8000524 <__aeabi_i2d>
 800affe:	a364      	add	r3, pc, #400	; (adr r3, 800b190 <_dtoa_r+0x2e0>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f7f5 faf8 	bl	80005f8 <__aeabi_dmul>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 f93c 	bl	800028c <__adddf3>
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	f7f5 fd9e 	bl	8000b58 <__aeabi_d2iz>
 800b01c:	2200      	movs	r2, #0
 800b01e:	4683      	mov	fp, r0
 800b020:	2300      	movs	r3, #0
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 fd59 	bl	8000adc <__aeabi_dcmplt>
 800b02a:	b148      	cbz	r0, 800b040 <_dtoa_r+0x190>
 800b02c:	4658      	mov	r0, fp
 800b02e:	f7f5 fa79 	bl	8000524 <__aeabi_i2d>
 800b032:	4632      	mov	r2, r6
 800b034:	463b      	mov	r3, r7
 800b036:	f7f5 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800b03a:	b908      	cbnz	r0, 800b040 <_dtoa_r+0x190>
 800b03c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b040:	f1bb 0f16 	cmp.w	fp, #22
 800b044:	d857      	bhi.n	800b0f6 <_dtoa_r+0x246>
 800b046:	4b5b      	ldr	r3, [pc, #364]	; (800b1b4 <_dtoa_r+0x304>)
 800b048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	ec51 0b18 	vmov	r0, r1, d8
 800b054:	f7f5 fd42 	bl	8000adc <__aeabi_dcmplt>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d04e      	beq.n	800b0fa <_dtoa_r+0x24a>
 800b05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b060:	2300      	movs	r3, #0
 800b062:	930c      	str	r3, [sp, #48]	; 0x30
 800b064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b066:	1b5b      	subs	r3, r3, r5
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	bf45      	ittet	mi
 800b06c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b070:	9305      	strmi	r3, [sp, #20]
 800b072:	2300      	movpl	r3, #0
 800b074:	2300      	movmi	r3, #0
 800b076:	9206      	str	r2, [sp, #24]
 800b078:	bf54      	ite	pl
 800b07a:	9305      	strpl	r3, [sp, #20]
 800b07c:	9306      	strmi	r3, [sp, #24]
 800b07e:	f1bb 0f00 	cmp.w	fp, #0
 800b082:	db3c      	blt.n	800b0fe <_dtoa_r+0x24e>
 800b084:	9b06      	ldr	r3, [sp, #24]
 800b086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b08a:	445b      	add	r3, fp
 800b08c:	9306      	str	r3, [sp, #24]
 800b08e:	2300      	movs	r3, #0
 800b090:	9308      	str	r3, [sp, #32]
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	2b09      	cmp	r3, #9
 800b096:	d868      	bhi.n	800b16a <_dtoa_r+0x2ba>
 800b098:	2b05      	cmp	r3, #5
 800b09a:	bfc4      	itt	gt
 800b09c:	3b04      	subgt	r3, #4
 800b09e:	9307      	strgt	r3, [sp, #28]
 800b0a0:	9b07      	ldr	r3, [sp, #28]
 800b0a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b0a6:	bfcc      	ite	gt
 800b0a8:	2500      	movgt	r5, #0
 800b0aa:	2501      	movle	r5, #1
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	f200 8085 	bhi.w	800b1bc <_dtoa_r+0x30c>
 800b0b2:	e8df f003 	tbb	[pc, r3]
 800b0b6:	3b2e      	.short	0x3b2e
 800b0b8:	5839      	.short	0x5839
 800b0ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0be:	441d      	add	r5, r3
 800b0c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	bfc1      	itttt	gt
 800b0c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b0d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b0d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b0d8:	bfd6      	itet	le
 800b0da:	f1c3 0320 	rsble	r3, r3, #32
 800b0de:	ea48 0003 	orrgt.w	r0, r8, r3
 800b0e2:	fa06 f003 	lslle.w	r0, r6, r3
 800b0e6:	f7f5 fa0d 	bl	8000504 <__aeabi_ui2d>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b0f0:	3d01      	subs	r5, #1
 800b0f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b0f4:	e76f      	b.n	800afd6 <_dtoa_r+0x126>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e7b3      	b.n	800b062 <_dtoa_r+0x1b2>
 800b0fa:	900c      	str	r0, [sp, #48]	; 0x30
 800b0fc:	e7b2      	b.n	800b064 <_dtoa_r+0x1b4>
 800b0fe:	9b05      	ldr	r3, [sp, #20]
 800b100:	eba3 030b 	sub.w	r3, r3, fp
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	f1cb 0300 	rsb	r3, fp, #0
 800b10a:	9308      	str	r3, [sp, #32]
 800b10c:	2300      	movs	r3, #0
 800b10e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b110:	e7bf      	b.n	800b092 <_dtoa_r+0x1e2>
 800b112:	2300      	movs	r3, #0
 800b114:	9309      	str	r3, [sp, #36]	; 0x24
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	2b00      	cmp	r3, #0
 800b11a:	dc52      	bgt.n	800b1c2 <_dtoa_r+0x312>
 800b11c:	2301      	movs	r3, #1
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	461a      	mov	r2, r3
 800b124:	920a      	str	r2, [sp, #40]	; 0x28
 800b126:	e00b      	b.n	800b140 <_dtoa_r+0x290>
 800b128:	2301      	movs	r3, #1
 800b12a:	e7f3      	b.n	800b114 <_dtoa_r+0x264>
 800b12c:	2300      	movs	r3, #0
 800b12e:	9309      	str	r3, [sp, #36]	; 0x24
 800b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b132:	445b      	add	r3, fp
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	3301      	adds	r3, #1
 800b138:	2b01      	cmp	r3, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	bfb8      	it	lt
 800b13e:	2301      	movlt	r3, #1
 800b140:	69e0      	ldr	r0, [r4, #28]
 800b142:	2100      	movs	r1, #0
 800b144:	2204      	movs	r2, #4
 800b146:	f102 0614 	add.w	r6, r2, #20
 800b14a:	429e      	cmp	r6, r3
 800b14c:	d93d      	bls.n	800b1ca <_dtoa_r+0x31a>
 800b14e:	6041      	str	r1, [r0, #4]
 800b150:	4620      	mov	r0, r4
 800b152:	f001 f855 	bl	800c200 <_Balloc>
 800b156:	9000      	str	r0, [sp, #0]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d139      	bne.n	800b1d0 <_dtoa_r+0x320>
 800b15c:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <_dtoa_r+0x308>)
 800b15e:	4602      	mov	r2, r0
 800b160:	f240 11af 	movw	r1, #431	; 0x1af
 800b164:	e6bd      	b.n	800aee2 <_dtoa_r+0x32>
 800b166:	2301      	movs	r3, #1
 800b168:	e7e1      	b.n	800b12e <_dtoa_r+0x27e>
 800b16a:	2501      	movs	r5, #1
 800b16c:	2300      	movs	r3, #0
 800b16e:	9307      	str	r3, [sp, #28]
 800b170:	9509      	str	r5, [sp, #36]	; 0x24
 800b172:	f04f 33ff 	mov.w	r3, #4294967295
 800b176:	9301      	str	r3, [sp, #4]
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	2200      	movs	r2, #0
 800b17c:	2312      	movs	r3, #18
 800b17e:	e7d1      	b.n	800b124 <_dtoa_r+0x274>
 800b180:	636f4361 	.word	0x636f4361
 800b184:	3fd287a7 	.word	0x3fd287a7
 800b188:	8b60c8b3 	.word	0x8b60c8b3
 800b18c:	3fc68a28 	.word	0x3fc68a28
 800b190:	509f79fb 	.word	0x509f79fb
 800b194:	3fd34413 	.word	0x3fd34413
 800b198:	0800e275 	.word	0x0800e275
 800b19c:	0800e28c 	.word	0x0800e28c
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	0800e271 	.word	0x0800e271
 800b1a8:	0800e268 	.word	0x0800e268
 800b1ac:	0800e4d4 	.word	0x0800e4d4
 800b1b0:	3ff80000 	.word	0x3ff80000
 800b1b4:	0800e3d8 	.word	0x0800e3d8
 800b1b8:	0800e2e4 	.word	0x0800e2e4
 800b1bc:	2301      	movs	r3, #1
 800b1be:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c0:	e7d7      	b.n	800b172 <_dtoa_r+0x2c2>
 800b1c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	e7ba      	b.n	800b140 <_dtoa_r+0x290>
 800b1ca:	3101      	adds	r1, #1
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	e7ba      	b.n	800b146 <_dtoa_r+0x296>
 800b1d0:	69e3      	ldr	r3, [r4, #28]
 800b1d2:	9a00      	ldr	r2, [sp, #0]
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	9b04      	ldr	r3, [sp, #16]
 800b1d8:	2b0e      	cmp	r3, #14
 800b1da:	f200 80a8 	bhi.w	800b32e <_dtoa_r+0x47e>
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	f000 80a5 	beq.w	800b32e <_dtoa_r+0x47e>
 800b1e4:	f1bb 0f00 	cmp.w	fp, #0
 800b1e8:	dd38      	ble.n	800b25c <_dtoa_r+0x3ac>
 800b1ea:	4bc0      	ldr	r3, [pc, #768]	; (800b4ec <_dtoa_r+0x63c>)
 800b1ec:	f00b 020f 	and.w	r2, fp, #15
 800b1f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b1fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b200:	d019      	beq.n	800b236 <_dtoa_r+0x386>
 800b202:	4bbb      	ldr	r3, [pc, #748]	; (800b4f0 <_dtoa_r+0x640>)
 800b204:	ec51 0b18 	vmov	r0, r1, d8
 800b208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b20c:	f7f5 fb1e 	bl	800084c <__aeabi_ddiv>
 800b210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b214:	f008 080f 	and.w	r8, r8, #15
 800b218:	2503      	movs	r5, #3
 800b21a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b4f0 <_dtoa_r+0x640>
 800b21e:	f1b8 0f00 	cmp.w	r8, #0
 800b222:	d10a      	bne.n	800b23a <_dtoa_r+0x38a>
 800b224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 fb0e 	bl	800084c <__aeabi_ddiv>
 800b230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b234:	e02b      	b.n	800b28e <_dtoa_r+0x3de>
 800b236:	2502      	movs	r5, #2
 800b238:	e7ef      	b.n	800b21a <_dtoa_r+0x36a>
 800b23a:	f018 0f01 	tst.w	r8, #1
 800b23e:	d008      	beq.n	800b252 <_dtoa_r+0x3a2>
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b248:	f7f5 f9d6 	bl	80005f8 <__aeabi_dmul>
 800b24c:	3501      	adds	r5, #1
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b256:	f109 0908 	add.w	r9, r9, #8
 800b25a:	e7e0      	b.n	800b21e <_dtoa_r+0x36e>
 800b25c:	f000 809f 	beq.w	800b39e <_dtoa_r+0x4ee>
 800b260:	f1cb 0600 	rsb	r6, fp, #0
 800b264:	4ba1      	ldr	r3, [pc, #644]	; (800b4ec <_dtoa_r+0x63c>)
 800b266:	4fa2      	ldr	r7, [pc, #648]	; (800b4f0 <_dtoa_r+0x640>)
 800b268:	f006 020f 	and.w	r2, r6, #15
 800b26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	ec51 0b18 	vmov	r0, r1, d8
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b280:	1136      	asrs	r6, r6, #4
 800b282:	2300      	movs	r3, #0
 800b284:	2502      	movs	r5, #2
 800b286:	2e00      	cmp	r6, #0
 800b288:	d17e      	bne.n	800b388 <_dtoa_r+0x4d8>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1d0      	bne.n	800b230 <_dtoa_r+0x380>
 800b28e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 8084 	beq.w	800b3a2 <_dtoa_r+0x4f2>
 800b29a:	4b96      	ldr	r3, [pc, #600]	; (800b4f4 <_dtoa_r+0x644>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f5 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d07b      	beq.n	800b3a2 <_dtoa_r+0x4f2>
 800b2aa:	9b04      	ldr	r3, [sp, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d078      	beq.n	800b3a2 <_dtoa_r+0x4f2>
 800b2b0:	9b01      	ldr	r3, [sp, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	dd39      	ble.n	800b32a <_dtoa_r+0x47a>
 800b2b6:	4b90      	ldr	r3, [pc, #576]	; (800b4f8 <_dtoa_r+0x648>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	4649      	mov	r1, r9
 800b2be:	f7f5 f99b 	bl	80005f8 <__aeabi_dmul>
 800b2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c6:	9e01      	ldr	r6, [sp, #4]
 800b2c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7f5 f926 	bl	8000524 <__aeabi_i2d>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	464b      	mov	r3, r9
 800b2dc:	f7f5 f98c 	bl	80005f8 <__aeabi_dmul>
 800b2e0:	4b86      	ldr	r3, [pc, #536]	; (800b4fc <_dtoa_r+0x64c>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f7f4 ffd2 	bl	800028c <__adddf3>
 800b2e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2f0:	9303      	str	r3, [sp, #12]
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d158      	bne.n	800b3a8 <_dtoa_r+0x4f8>
 800b2f6:	4b82      	ldr	r3, [pc, #520]	; (800b500 <_dtoa_r+0x650>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f4 ffc3 	bl	8000288 <__aeabi_dsub>
 800b302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b306:	4680      	mov	r8, r0
 800b308:	4689      	mov	r9, r1
 800b30a:	f7f5 fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	f040 8296 	bne.w	800b840 <_dtoa_r+0x990>
 800b314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b318:	4640      	mov	r0, r8
 800b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f040 8289 	bne.w	800b83c <_dtoa_r+0x98c>
 800b32a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b330:	2b00      	cmp	r3, #0
 800b332:	f2c0 814e 	blt.w	800b5d2 <_dtoa_r+0x722>
 800b336:	f1bb 0f0e 	cmp.w	fp, #14
 800b33a:	f300 814a 	bgt.w	800b5d2 <_dtoa_r+0x722>
 800b33e:	4b6b      	ldr	r3, [pc, #428]	; (800b4ec <_dtoa_r+0x63c>)
 800b340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b344:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f280 80dc 	bge.w	800b508 <_dtoa_r+0x658>
 800b350:	9b04      	ldr	r3, [sp, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f300 80d8 	bgt.w	800b508 <_dtoa_r+0x658>
 800b358:	f040 826f 	bne.w	800b83a <_dtoa_r+0x98a>
 800b35c:	4b68      	ldr	r3, [pc, #416]	; (800b500 <_dtoa_r+0x650>)
 800b35e:	2200      	movs	r2, #0
 800b360:	4640      	mov	r0, r8
 800b362:	4649      	mov	r1, r9
 800b364:	f7f5 f948 	bl	80005f8 <__aeabi_dmul>
 800b368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b36c:	f7f5 fbca 	bl	8000b04 <__aeabi_dcmpge>
 800b370:	9e04      	ldr	r6, [sp, #16]
 800b372:	4637      	mov	r7, r6
 800b374:	2800      	cmp	r0, #0
 800b376:	f040 8245 	bne.w	800b804 <_dtoa_r+0x954>
 800b37a:	9d00      	ldr	r5, [sp, #0]
 800b37c:	2331      	movs	r3, #49	; 0x31
 800b37e:	f805 3b01 	strb.w	r3, [r5], #1
 800b382:	f10b 0b01 	add.w	fp, fp, #1
 800b386:	e241      	b.n	800b80c <_dtoa_r+0x95c>
 800b388:	07f2      	lsls	r2, r6, #31
 800b38a:	d505      	bpl.n	800b398 <_dtoa_r+0x4e8>
 800b38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b390:	f7f5 f932 	bl	80005f8 <__aeabi_dmul>
 800b394:	3501      	adds	r5, #1
 800b396:	2301      	movs	r3, #1
 800b398:	1076      	asrs	r6, r6, #1
 800b39a:	3708      	adds	r7, #8
 800b39c:	e773      	b.n	800b286 <_dtoa_r+0x3d6>
 800b39e:	2502      	movs	r5, #2
 800b3a0:	e775      	b.n	800b28e <_dtoa_r+0x3de>
 800b3a2:	9e04      	ldr	r6, [sp, #16]
 800b3a4:	465f      	mov	r7, fp
 800b3a6:	e792      	b.n	800b2ce <_dtoa_r+0x41e>
 800b3a8:	9900      	ldr	r1, [sp, #0]
 800b3aa:	4b50      	ldr	r3, [pc, #320]	; (800b4ec <_dtoa_r+0x63c>)
 800b3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b0:	4431      	add	r1, r6
 800b3b2:	9102      	str	r1, [sp, #8]
 800b3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3b6:	eeb0 9a47 	vmov.f32	s18, s14
 800b3ba:	eef0 9a67 	vmov.f32	s19, s15
 800b3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d044      	beq.n	800b454 <_dtoa_r+0x5a4>
 800b3ca:	494e      	ldr	r1, [pc, #312]	; (800b504 <_dtoa_r+0x654>)
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7f5 fa3d 	bl	800084c <__aeabi_ddiv>
 800b3d2:	ec53 2b19 	vmov	r2, r3, d9
 800b3d6:	f7f4 ff57 	bl	8000288 <__aeabi_dsub>
 800b3da:	9d00      	ldr	r5, [sp, #0]
 800b3dc:	ec41 0b19 	vmov	d9, r0, r1
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	f7f5 fbb8 	bl	8000b58 <__aeabi_d2iz>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	f7f5 f89b 	bl	8000524 <__aeabi_i2d>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f4 ff47 	bl	8000288 <__aeabi_dsub>
 800b3fa:	3630      	adds	r6, #48	; 0x30
 800b3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b400:	ec53 2b19 	vmov	r2, r3, d9
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	f7f5 fb68 	bl	8000adc <__aeabi_dcmplt>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d164      	bne.n	800b4da <_dtoa_r+0x62a>
 800b410:	4642      	mov	r2, r8
 800b412:	464b      	mov	r3, r9
 800b414:	4937      	ldr	r1, [pc, #220]	; (800b4f4 <_dtoa_r+0x644>)
 800b416:	2000      	movs	r0, #0
 800b418:	f7f4 ff36 	bl	8000288 <__aeabi_dsub>
 800b41c:	ec53 2b19 	vmov	r2, r3, d9
 800b420:	f7f5 fb5c 	bl	8000adc <__aeabi_dcmplt>
 800b424:	2800      	cmp	r0, #0
 800b426:	f040 80b6 	bne.w	800b596 <_dtoa_r+0x6e6>
 800b42a:	9b02      	ldr	r3, [sp, #8]
 800b42c:	429d      	cmp	r5, r3
 800b42e:	f43f af7c 	beq.w	800b32a <_dtoa_r+0x47a>
 800b432:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <_dtoa_r+0x648>)
 800b434:	ec51 0b19 	vmov	r0, r1, d9
 800b438:	2200      	movs	r2, #0
 800b43a:	f7f5 f8dd 	bl	80005f8 <__aeabi_dmul>
 800b43e:	4b2e      	ldr	r3, [pc, #184]	; (800b4f8 <_dtoa_r+0x648>)
 800b440:	ec41 0b19 	vmov	d9, r0, r1
 800b444:	2200      	movs	r2, #0
 800b446:	4640      	mov	r0, r8
 800b448:	4649      	mov	r1, r9
 800b44a:	f7f5 f8d5 	bl	80005f8 <__aeabi_dmul>
 800b44e:	4680      	mov	r8, r0
 800b450:	4689      	mov	r9, r1
 800b452:	e7c5      	b.n	800b3e0 <_dtoa_r+0x530>
 800b454:	ec51 0b17 	vmov	r0, r1, d7
 800b458:	f7f5 f8ce 	bl	80005f8 <__aeabi_dmul>
 800b45c:	9b02      	ldr	r3, [sp, #8]
 800b45e:	9d00      	ldr	r5, [sp, #0]
 800b460:	930f      	str	r3, [sp, #60]	; 0x3c
 800b462:	ec41 0b19 	vmov	d9, r0, r1
 800b466:	4649      	mov	r1, r9
 800b468:	4640      	mov	r0, r8
 800b46a:	f7f5 fb75 	bl	8000b58 <__aeabi_d2iz>
 800b46e:	4606      	mov	r6, r0
 800b470:	f7f5 f858 	bl	8000524 <__aeabi_i2d>
 800b474:	3630      	adds	r6, #48	; 0x30
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f4 ff03 	bl	8000288 <__aeabi_dsub>
 800b482:	f805 6b01 	strb.w	r6, [r5], #1
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	429d      	cmp	r5, r3
 800b48a:	4680      	mov	r8, r0
 800b48c:	4689      	mov	r9, r1
 800b48e:	f04f 0200 	mov.w	r2, #0
 800b492:	d124      	bne.n	800b4de <_dtoa_r+0x62e>
 800b494:	4b1b      	ldr	r3, [pc, #108]	; (800b504 <_dtoa_r+0x654>)
 800b496:	ec51 0b19 	vmov	r0, r1, d9
 800b49a:	f7f4 fef7 	bl	800028c <__adddf3>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f5 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d173      	bne.n	800b596 <_dtoa_r+0x6e6>
 800b4ae:	ec53 2b19 	vmov	r2, r3, d9
 800b4b2:	4914      	ldr	r1, [pc, #80]	; (800b504 <_dtoa_r+0x654>)
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4640      	mov	r0, r8
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	f7f5 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f43f af2f 	beq.w	800b32a <_dtoa_r+0x47a>
 800b4cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4ce:	1e6b      	subs	r3, r5, #1
 800b4d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4d6:	2b30      	cmp	r3, #48	; 0x30
 800b4d8:	d0f8      	beq.n	800b4cc <_dtoa_r+0x61c>
 800b4da:	46bb      	mov	fp, r7
 800b4dc:	e04a      	b.n	800b574 <_dtoa_r+0x6c4>
 800b4de:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <_dtoa_r+0x648>)
 800b4e0:	f7f5 f88a 	bl	80005f8 <__aeabi_dmul>
 800b4e4:	4680      	mov	r8, r0
 800b4e6:	4689      	mov	r9, r1
 800b4e8:	e7bd      	b.n	800b466 <_dtoa_r+0x5b6>
 800b4ea:	bf00      	nop
 800b4ec:	0800e3d8 	.word	0x0800e3d8
 800b4f0:	0800e3b0 	.word	0x0800e3b0
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	40240000 	.word	0x40240000
 800b4fc:	401c0000 	.word	0x401c0000
 800b500:	40140000 	.word	0x40140000
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b50c:	9d00      	ldr	r5, [sp, #0]
 800b50e:	4642      	mov	r2, r8
 800b510:	464b      	mov	r3, r9
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f5 f999 	bl	800084c <__aeabi_ddiv>
 800b51a:	f7f5 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800b51e:	9001      	str	r0, [sp, #4]
 800b520:	f7f5 f800 	bl	8000524 <__aeabi_i2d>
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f4 fea8 	bl	8000288 <__aeabi_dsub>
 800b538:	9e01      	ldr	r6, [sp, #4]
 800b53a:	9f04      	ldr	r7, [sp, #16]
 800b53c:	3630      	adds	r6, #48	; 0x30
 800b53e:	f805 6b01 	strb.w	r6, [r5], #1
 800b542:	9e00      	ldr	r6, [sp, #0]
 800b544:	1bae      	subs	r6, r5, r6
 800b546:	42b7      	cmp	r7, r6
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	d134      	bne.n	800b5b8 <_dtoa_r+0x708>
 800b54e:	f7f4 fe9d 	bl	800028c <__adddf3>
 800b552:	4642      	mov	r2, r8
 800b554:	464b      	mov	r3, r9
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	f7f5 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800b55e:	b9c8      	cbnz	r0, 800b594 <_dtoa_r+0x6e4>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f7f5 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b56c:	b110      	cbz	r0, 800b574 <_dtoa_r+0x6c4>
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	07db      	lsls	r3, r3, #31
 800b572:	d40f      	bmi.n	800b594 <_dtoa_r+0x6e4>
 800b574:	4651      	mov	r1, sl
 800b576:	4620      	mov	r0, r4
 800b578:	f000 fe82 	bl	800c280 <_Bfree>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b580:	702b      	strb	r3, [r5, #0]
 800b582:	f10b 0301 	add.w	r3, fp, #1
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f43f ace2 	beq.w	800af54 <_dtoa_r+0xa4>
 800b590:	601d      	str	r5, [r3, #0]
 800b592:	e4df      	b.n	800af54 <_dtoa_r+0xa4>
 800b594:	465f      	mov	r7, fp
 800b596:	462b      	mov	r3, r5
 800b598:	461d      	mov	r5, r3
 800b59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b59e:	2a39      	cmp	r2, #57	; 0x39
 800b5a0:	d106      	bne.n	800b5b0 <_dtoa_r+0x700>
 800b5a2:	9a00      	ldr	r2, [sp, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d1f7      	bne.n	800b598 <_dtoa_r+0x6e8>
 800b5a8:	9900      	ldr	r1, [sp, #0]
 800b5aa:	2230      	movs	r2, #48	; 0x30
 800b5ac:	3701      	adds	r7, #1
 800b5ae:	700a      	strb	r2, [r1, #0]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	3201      	adds	r2, #1
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	e790      	b.n	800b4da <_dtoa_r+0x62a>
 800b5b8:	4ba3      	ldr	r3, [pc, #652]	; (800b848 <_dtoa_r+0x998>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f7f5 f81c 	bl	80005f8 <__aeabi_dmul>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	f7f5 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d09e      	beq.n	800b50e <_dtoa_r+0x65e>
 800b5d0:	e7d0      	b.n	800b574 <_dtoa_r+0x6c4>
 800b5d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	f000 80ca 	beq.w	800b76e <_dtoa_r+0x8be>
 800b5da:	9a07      	ldr	r2, [sp, #28]
 800b5dc:	2a01      	cmp	r2, #1
 800b5de:	f300 80ad 	bgt.w	800b73c <_dtoa_r+0x88c>
 800b5e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e4:	2a00      	cmp	r2, #0
 800b5e6:	f000 80a5 	beq.w	800b734 <_dtoa_r+0x884>
 800b5ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5ee:	9e08      	ldr	r6, [sp, #32]
 800b5f0:	9d05      	ldr	r5, [sp, #20]
 800b5f2:	9a05      	ldr	r2, [sp, #20]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	9205      	str	r2, [sp, #20]
 800b5f8:	9a06      	ldr	r2, [sp, #24]
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	441a      	add	r2, r3
 800b5fe:	4620      	mov	r0, r4
 800b600:	9206      	str	r2, [sp, #24]
 800b602:	f000 ff3d 	bl	800c480 <__i2b>
 800b606:	4607      	mov	r7, r0
 800b608:	b165      	cbz	r5, 800b624 <_dtoa_r+0x774>
 800b60a:	9b06      	ldr	r3, [sp, #24]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <_dtoa_r+0x774>
 800b610:	42ab      	cmp	r3, r5
 800b612:	9a05      	ldr	r2, [sp, #20]
 800b614:	bfa8      	it	ge
 800b616:	462b      	movge	r3, r5
 800b618:	1ad2      	subs	r2, r2, r3
 800b61a:	9205      	str	r2, [sp, #20]
 800b61c:	9a06      	ldr	r2, [sp, #24]
 800b61e:	1aed      	subs	r5, r5, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	9306      	str	r3, [sp, #24]
 800b624:	9b08      	ldr	r3, [sp, #32]
 800b626:	b1f3      	cbz	r3, 800b666 <_dtoa_r+0x7b6>
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80a3 	beq.w	800b776 <_dtoa_r+0x8c6>
 800b630:	2e00      	cmp	r6, #0
 800b632:	dd10      	ble.n	800b656 <_dtoa_r+0x7a6>
 800b634:	4639      	mov	r1, r7
 800b636:	4632      	mov	r2, r6
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 ffe1 	bl	800c600 <__pow5mult>
 800b63e:	4652      	mov	r2, sl
 800b640:	4601      	mov	r1, r0
 800b642:	4607      	mov	r7, r0
 800b644:	4620      	mov	r0, r4
 800b646:	f000 ff31 	bl	800c4ac <__multiply>
 800b64a:	4651      	mov	r1, sl
 800b64c:	4680      	mov	r8, r0
 800b64e:	4620      	mov	r0, r4
 800b650:	f000 fe16 	bl	800c280 <_Bfree>
 800b654:	46c2      	mov	sl, r8
 800b656:	9b08      	ldr	r3, [sp, #32]
 800b658:	1b9a      	subs	r2, r3, r6
 800b65a:	d004      	beq.n	800b666 <_dtoa_r+0x7b6>
 800b65c:	4651      	mov	r1, sl
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 ffce 	bl	800c600 <__pow5mult>
 800b664:	4682      	mov	sl, r0
 800b666:	2101      	movs	r1, #1
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 ff09 	bl	800c480 <__i2b>
 800b66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b670:	2b00      	cmp	r3, #0
 800b672:	4606      	mov	r6, r0
 800b674:	f340 8081 	ble.w	800b77a <_dtoa_r+0x8ca>
 800b678:	461a      	mov	r2, r3
 800b67a:	4601      	mov	r1, r0
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 ffbf 	bl	800c600 <__pow5mult>
 800b682:	9b07      	ldr	r3, [sp, #28]
 800b684:	2b01      	cmp	r3, #1
 800b686:	4606      	mov	r6, r0
 800b688:	dd7a      	ble.n	800b780 <_dtoa_r+0x8d0>
 800b68a:	f04f 0800 	mov.w	r8, #0
 800b68e:	6933      	ldr	r3, [r6, #16]
 800b690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b694:	6918      	ldr	r0, [r3, #16]
 800b696:	f000 fea5 	bl	800c3e4 <__hi0bits>
 800b69a:	f1c0 0020 	rsb	r0, r0, #32
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	4418      	add	r0, r3
 800b6a2:	f010 001f 	ands.w	r0, r0, #31
 800b6a6:	f000 8094 	beq.w	800b7d2 <_dtoa_r+0x922>
 800b6aa:	f1c0 0320 	rsb	r3, r0, #32
 800b6ae:	2b04      	cmp	r3, #4
 800b6b0:	f340 8085 	ble.w	800b7be <_dtoa_r+0x90e>
 800b6b4:	9b05      	ldr	r3, [sp, #20]
 800b6b6:	f1c0 001c 	rsb	r0, r0, #28
 800b6ba:	4403      	add	r3, r0
 800b6bc:	9305      	str	r3, [sp, #20]
 800b6be:	9b06      	ldr	r3, [sp, #24]
 800b6c0:	4403      	add	r3, r0
 800b6c2:	4405      	add	r5, r0
 800b6c4:	9306      	str	r3, [sp, #24]
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dd05      	ble.n	800b6d8 <_dtoa_r+0x828>
 800b6cc:	4651      	mov	r1, sl
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f000 ffef 	bl	800c6b4 <__lshift>
 800b6d6:	4682      	mov	sl, r0
 800b6d8:	9b06      	ldr	r3, [sp, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dd05      	ble.n	800b6ea <_dtoa_r+0x83a>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 ffe6 	bl	800c6b4 <__lshift>
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d072      	beq.n	800b7d6 <_dtoa_r+0x926>
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f001 f84a 	bl	800c78c <__mcmp>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	da6c      	bge.n	800b7d6 <_dtoa_r+0x926>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4651      	mov	r1, sl
 800b700:	220a      	movs	r2, #10
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fdde 	bl	800c2c4 <__multadd>
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b70e:	4682      	mov	sl, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 81b0 	beq.w	800ba76 <_dtoa_r+0xbc6>
 800b716:	2300      	movs	r3, #0
 800b718:	4639      	mov	r1, r7
 800b71a:	220a      	movs	r2, #10
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fdd1 	bl	800c2c4 <__multadd>
 800b722:	9b01      	ldr	r3, [sp, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	4607      	mov	r7, r0
 800b728:	f300 8096 	bgt.w	800b858 <_dtoa_r+0x9a8>
 800b72c:	9b07      	ldr	r3, [sp, #28]
 800b72e:	2b02      	cmp	r3, #2
 800b730:	dc59      	bgt.n	800b7e6 <_dtoa_r+0x936>
 800b732:	e091      	b.n	800b858 <_dtoa_r+0x9a8>
 800b734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b73a:	e758      	b.n	800b5ee <_dtoa_r+0x73e>
 800b73c:	9b04      	ldr	r3, [sp, #16]
 800b73e:	1e5e      	subs	r6, r3, #1
 800b740:	9b08      	ldr	r3, [sp, #32]
 800b742:	42b3      	cmp	r3, r6
 800b744:	bfbf      	itttt	lt
 800b746:	9b08      	ldrlt	r3, [sp, #32]
 800b748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b74a:	9608      	strlt	r6, [sp, #32]
 800b74c:	1af3      	sublt	r3, r6, r3
 800b74e:	bfb4      	ite	lt
 800b750:	18d2      	addlt	r2, r2, r3
 800b752:	1b9e      	subge	r6, r3, r6
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	bfbc      	itt	lt
 800b758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b75a:	2600      	movlt	r6, #0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	bfb7      	itett	lt
 800b760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b768:	1a9d      	sublt	r5, r3, r2
 800b76a:	2300      	movlt	r3, #0
 800b76c:	e741      	b.n	800b5f2 <_dtoa_r+0x742>
 800b76e:	9e08      	ldr	r6, [sp, #32]
 800b770:	9d05      	ldr	r5, [sp, #20]
 800b772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b774:	e748      	b.n	800b608 <_dtoa_r+0x758>
 800b776:	9a08      	ldr	r2, [sp, #32]
 800b778:	e770      	b.n	800b65c <_dtoa_r+0x7ac>
 800b77a:	9b07      	ldr	r3, [sp, #28]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	dc19      	bgt.n	800b7b4 <_dtoa_r+0x904>
 800b780:	9b02      	ldr	r3, [sp, #8]
 800b782:	b9bb      	cbnz	r3, 800b7b4 <_dtoa_r+0x904>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b78a:	b99b      	cbnz	r3, 800b7b4 <_dtoa_r+0x904>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b792:	0d1b      	lsrs	r3, r3, #20
 800b794:	051b      	lsls	r3, r3, #20
 800b796:	b183      	cbz	r3, 800b7ba <_dtoa_r+0x90a>
 800b798:	9b05      	ldr	r3, [sp, #20]
 800b79a:	3301      	adds	r3, #1
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	9306      	str	r3, [sp, #24]
 800b7a4:	f04f 0801 	mov.w	r8, #1
 800b7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	f47f af6f 	bne.w	800b68e <_dtoa_r+0x7de>
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	e774      	b.n	800b69e <_dtoa_r+0x7ee>
 800b7b4:	f04f 0800 	mov.w	r8, #0
 800b7b8:	e7f6      	b.n	800b7a8 <_dtoa_r+0x8f8>
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	e7f4      	b.n	800b7a8 <_dtoa_r+0x8f8>
 800b7be:	d082      	beq.n	800b6c6 <_dtoa_r+0x816>
 800b7c0:	9a05      	ldr	r2, [sp, #20]
 800b7c2:	331c      	adds	r3, #28
 800b7c4:	441a      	add	r2, r3
 800b7c6:	9205      	str	r2, [sp, #20]
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	441a      	add	r2, r3
 800b7cc:	441d      	add	r5, r3
 800b7ce:	9206      	str	r2, [sp, #24]
 800b7d0:	e779      	b.n	800b6c6 <_dtoa_r+0x816>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	e7f4      	b.n	800b7c0 <_dtoa_r+0x910>
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	dc37      	bgt.n	800b84c <_dtoa_r+0x99c>
 800b7dc:	9b07      	ldr	r3, [sp, #28]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	dd34      	ble.n	800b84c <_dtoa_r+0x99c>
 800b7e2:	9b04      	ldr	r3, [sp, #16]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	b963      	cbnz	r3, 800b804 <_dtoa_r+0x954>
 800b7ea:	4631      	mov	r1, r6
 800b7ec:	2205      	movs	r2, #5
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fd68 	bl	800c2c4 <__multadd>
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	f000 ffc7 	bl	800c78c <__mcmp>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	f73f adbb 	bgt.w	800b37a <_dtoa_r+0x4ca>
 800b804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b806:	9d00      	ldr	r5, [sp, #0]
 800b808:	ea6f 0b03 	mvn.w	fp, r3
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	4631      	mov	r1, r6
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fd34 	bl	800c280 <_Bfree>
 800b818:	2f00      	cmp	r7, #0
 800b81a:	f43f aeab 	beq.w	800b574 <_dtoa_r+0x6c4>
 800b81e:	f1b8 0f00 	cmp.w	r8, #0
 800b822:	d005      	beq.n	800b830 <_dtoa_r+0x980>
 800b824:	45b8      	cmp	r8, r7
 800b826:	d003      	beq.n	800b830 <_dtoa_r+0x980>
 800b828:	4641      	mov	r1, r8
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 fd28 	bl	800c280 <_Bfree>
 800b830:	4639      	mov	r1, r7
 800b832:	4620      	mov	r0, r4
 800b834:	f000 fd24 	bl	800c280 <_Bfree>
 800b838:	e69c      	b.n	800b574 <_dtoa_r+0x6c4>
 800b83a:	2600      	movs	r6, #0
 800b83c:	4637      	mov	r7, r6
 800b83e:	e7e1      	b.n	800b804 <_dtoa_r+0x954>
 800b840:	46bb      	mov	fp, r7
 800b842:	4637      	mov	r7, r6
 800b844:	e599      	b.n	800b37a <_dtoa_r+0x4ca>
 800b846:	bf00      	nop
 800b848:	40240000 	.word	0x40240000
 800b84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 80c8 	beq.w	800b9e4 <_dtoa_r+0xb34>
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	2d00      	cmp	r5, #0
 800b85a:	dd05      	ble.n	800b868 <_dtoa_r+0x9b8>
 800b85c:	4639      	mov	r1, r7
 800b85e:	462a      	mov	r2, r5
 800b860:	4620      	mov	r0, r4
 800b862:	f000 ff27 	bl	800c6b4 <__lshift>
 800b866:	4607      	mov	r7, r0
 800b868:	f1b8 0f00 	cmp.w	r8, #0
 800b86c:	d05b      	beq.n	800b926 <_dtoa_r+0xa76>
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fcc5 	bl	800c200 <_Balloc>
 800b876:	4605      	mov	r5, r0
 800b878:	b928      	cbnz	r0, 800b886 <_dtoa_r+0x9d6>
 800b87a:	4b83      	ldr	r3, [pc, #524]	; (800ba88 <_dtoa_r+0xbd8>)
 800b87c:	4602      	mov	r2, r0
 800b87e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b882:	f7ff bb2e 	b.w	800aee2 <_dtoa_r+0x32>
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	3202      	adds	r2, #2
 800b88a:	0092      	lsls	r2, r2, #2
 800b88c:	f107 010c 	add.w	r1, r7, #12
 800b890:	300c      	adds	r0, #12
 800b892:	f7ff fa66 	bl	800ad62 <memcpy>
 800b896:	2201      	movs	r2, #1
 800b898:	4629      	mov	r1, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 ff0a 	bl	800c6b4 <__lshift>
 800b8a0:	9b00      	ldr	r3, [sp, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	9304      	str	r3, [sp, #16]
 800b8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	9308      	str	r3, [sp, #32]
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	46b8      	mov	r8, r7
 800b8b6:	9306      	str	r3, [sp, #24]
 800b8b8:	4607      	mov	r7, r0
 800b8ba:	9b04      	ldr	r3, [sp, #16]
 800b8bc:	4631      	mov	r1, r6
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	4650      	mov	r0, sl
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	f7ff fa6a 	bl	800ad9c <quorem>
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	9002      	str	r0, [sp, #8]
 800b8cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	f000 ff5b 	bl	800c78c <__mcmp>
 800b8d6:	463a      	mov	r2, r7
 800b8d8:	9005      	str	r0, [sp, #20]
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 ff71 	bl	800c7c4 <__mdiff>
 800b8e2:	68c2      	ldr	r2, [r0, #12]
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	bb02      	cbnz	r2, 800b92a <_dtoa_r+0xa7a>
 800b8e8:	4601      	mov	r1, r0
 800b8ea:	4650      	mov	r0, sl
 800b8ec:	f000 ff4e 	bl	800c78c <__mcmp>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f8:	f000 fcc2 	bl	800c280 <_Bfree>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b900:	9d04      	ldr	r5, [sp, #16]
 800b902:	ea43 0102 	orr.w	r1, r3, r2
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	4319      	orrs	r1, r3
 800b90a:	d110      	bne.n	800b92e <_dtoa_r+0xa7e>
 800b90c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b910:	d029      	beq.n	800b966 <_dtoa_r+0xab6>
 800b912:	9b05      	ldr	r3, [sp, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	dd02      	ble.n	800b91e <_dtoa_r+0xa6e>
 800b918:	9b02      	ldr	r3, [sp, #8]
 800b91a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	f883 9000 	strb.w	r9, [r3]
 800b924:	e774      	b.n	800b810 <_dtoa_r+0x960>
 800b926:	4638      	mov	r0, r7
 800b928:	e7ba      	b.n	800b8a0 <_dtoa_r+0x9f0>
 800b92a:	2201      	movs	r2, #1
 800b92c:	e7e1      	b.n	800b8f2 <_dtoa_r+0xa42>
 800b92e:	9b05      	ldr	r3, [sp, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	db04      	blt.n	800b93e <_dtoa_r+0xa8e>
 800b934:	9907      	ldr	r1, [sp, #28]
 800b936:	430b      	orrs	r3, r1
 800b938:	9906      	ldr	r1, [sp, #24]
 800b93a:	430b      	orrs	r3, r1
 800b93c:	d120      	bne.n	800b980 <_dtoa_r+0xad0>
 800b93e:	2a00      	cmp	r2, #0
 800b940:	dded      	ble.n	800b91e <_dtoa_r+0xa6e>
 800b942:	4651      	mov	r1, sl
 800b944:	2201      	movs	r2, #1
 800b946:	4620      	mov	r0, r4
 800b948:	f000 feb4 	bl	800c6b4 <__lshift>
 800b94c:	4631      	mov	r1, r6
 800b94e:	4682      	mov	sl, r0
 800b950:	f000 ff1c 	bl	800c78c <__mcmp>
 800b954:	2800      	cmp	r0, #0
 800b956:	dc03      	bgt.n	800b960 <_dtoa_r+0xab0>
 800b958:	d1e1      	bne.n	800b91e <_dtoa_r+0xa6e>
 800b95a:	f019 0f01 	tst.w	r9, #1
 800b95e:	d0de      	beq.n	800b91e <_dtoa_r+0xa6e>
 800b960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b964:	d1d8      	bne.n	800b918 <_dtoa_r+0xa68>
 800b966:	9a01      	ldr	r2, [sp, #4]
 800b968:	2339      	movs	r3, #57	; 0x39
 800b96a:	7013      	strb	r3, [r2, #0]
 800b96c:	462b      	mov	r3, r5
 800b96e:	461d      	mov	r5, r3
 800b970:	3b01      	subs	r3, #1
 800b972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b976:	2a39      	cmp	r2, #57	; 0x39
 800b978:	d06c      	beq.n	800ba54 <_dtoa_r+0xba4>
 800b97a:	3201      	adds	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
 800b97e:	e747      	b.n	800b810 <_dtoa_r+0x960>
 800b980:	2a00      	cmp	r2, #0
 800b982:	dd07      	ble.n	800b994 <_dtoa_r+0xae4>
 800b984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b988:	d0ed      	beq.n	800b966 <_dtoa_r+0xab6>
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	f109 0301 	add.w	r3, r9, #1
 800b990:	7013      	strb	r3, [r2, #0]
 800b992:	e73d      	b.n	800b810 <_dtoa_r+0x960>
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	9a08      	ldr	r2, [sp, #32]
 800b998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d043      	beq.n	800ba28 <_dtoa_r+0xb78>
 800b9a0:	4651      	mov	r1, sl
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 fc8c 	bl	800c2c4 <__multadd>
 800b9ac:	45b8      	cmp	r8, r7
 800b9ae:	4682      	mov	sl, r0
 800b9b0:	f04f 0300 	mov.w	r3, #0
 800b9b4:	f04f 020a 	mov.w	r2, #10
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	d107      	bne.n	800b9ce <_dtoa_r+0xb1e>
 800b9be:	f000 fc81 	bl	800c2c4 <__multadd>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	4607      	mov	r7, r0
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9304      	str	r3, [sp, #16]
 800b9cc:	e775      	b.n	800b8ba <_dtoa_r+0xa0a>
 800b9ce:	f000 fc79 	bl	800c2c4 <__multadd>
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	220a      	movs	r2, #10
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fc72 	bl	800c2c4 <__multadd>
 800b9e0:	4607      	mov	r7, r0
 800b9e2:	e7f0      	b.n	800b9c6 <_dtoa_r+0xb16>
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	9301      	str	r3, [sp, #4]
 800b9e8:	9d00      	ldr	r5, [sp, #0]
 800b9ea:	4631      	mov	r1, r6
 800b9ec:	4650      	mov	r0, sl
 800b9ee:	f7ff f9d5 	bl	800ad9c <quorem>
 800b9f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b9f6:	9b00      	ldr	r3, [sp, #0]
 800b9f8:	f805 9b01 	strb.w	r9, [r5], #1
 800b9fc:	1aea      	subs	r2, r5, r3
 800b9fe:	9b01      	ldr	r3, [sp, #4]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	dd07      	ble.n	800ba14 <_dtoa_r+0xb64>
 800ba04:	4651      	mov	r1, sl
 800ba06:	2300      	movs	r3, #0
 800ba08:	220a      	movs	r2, #10
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 fc5a 	bl	800c2c4 <__multadd>
 800ba10:	4682      	mov	sl, r0
 800ba12:	e7ea      	b.n	800b9ea <_dtoa_r+0xb3a>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bfc8      	it	gt
 800ba1a:	461d      	movgt	r5, r3
 800ba1c:	9b00      	ldr	r3, [sp, #0]
 800ba1e:	bfd8      	it	le
 800ba20:	2501      	movle	r5, #1
 800ba22:	441d      	add	r5, r3
 800ba24:	f04f 0800 	mov.w	r8, #0
 800ba28:	4651      	mov	r1, sl
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fe41 	bl	800c6b4 <__lshift>
 800ba32:	4631      	mov	r1, r6
 800ba34:	4682      	mov	sl, r0
 800ba36:	f000 fea9 	bl	800c78c <__mcmp>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	dc96      	bgt.n	800b96c <_dtoa_r+0xabc>
 800ba3e:	d102      	bne.n	800ba46 <_dtoa_r+0xb96>
 800ba40:	f019 0f01 	tst.w	r9, #1
 800ba44:	d192      	bne.n	800b96c <_dtoa_r+0xabc>
 800ba46:	462b      	mov	r3, r5
 800ba48:	461d      	mov	r5, r3
 800ba4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4e:	2a30      	cmp	r2, #48	; 0x30
 800ba50:	d0fa      	beq.n	800ba48 <_dtoa_r+0xb98>
 800ba52:	e6dd      	b.n	800b810 <_dtoa_r+0x960>
 800ba54:	9a00      	ldr	r2, [sp, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d189      	bne.n	800b96e <_dtoa_r+0xabe>
 800ba5a:	f10b 0b01 	add.w	fp, fp, #1
 800ba5e:	2331      	movs	r3, #49	; 0x31
 800ba60:	e796      	b.n	800b990 <_dtoa_r+0xae0>
 800ba62:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <_dtoa_r+0xbdc>)
 800ba64:	f7ff ba99 	b.w	800af9a <_dtoa_r+0xea>
 800ba68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f47f aa6d 	bne.w	800af4a <_dtoa_r+0x9a>
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <_dtoa_r+0xbe0>)
 800ba72:	f7ff ba92 	b.w	800af9a <_dtoa_r+0xea>
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dcb5      	bgt.n	800b9e8 <_dtoa_r+0xb38>
 800ba7c:	9b07      	ldr	r3, [sp, #28]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	f73f aeb1 	bgt.w	800b7e6 <_dtoa_r+0x936>
 800ba84:	e7b0      	b.n	800b9e8 <_dtoa_r+0xb38>
 800ba86:	bf00      	nop
 800ba88:	0800e2e4 	.word	0x0800e2e4
 800ba8c:	0800e4d3 	.word	0x0800e4d3
 800ba90:	0800e268 	.word	0x0800e268

0800ba94 <_free_r>:
 800ba94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba96:	2900      	cmp	r1, #0
 800ba98:	d044      	beq.n	800bb24 <_free_r+0x90>
 800ba9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9e:	9001      	str	r0, [sp, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f1a1 0404 	sub.w	r4, r1, #4
 800baa6:	bfb8      	it	lt
 800baa8:	18e4      	addlt	r4, r4, r3
 800baaa:	f7fd fa3f 	bl	8008f2c <__malloc_lock>
 800baae:	4a1e      	ldr	r2, [pc, #120]	; (800bb28 <_free_r+0x94>)
 800bab0:	9801      	ldr	r0, [sp, #4]
 800bab2:	6813      	ldr	r3, [r2, #0]
 800bab4:	b933      	cbnz	r3, 800bac4 <_free_r+0x30>
 800bab6:	6063      	str	r3, [r4, #4]
 800bab8:	6014      	str	r4, [r2, #0]
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac0:	f7fd ba3a 	b.w	8008f38 <__malloc_unlock>
 800bac4:	42a3      	cmp	r3, r4
 800bac6:	d908      	bls.n	800bada <_free_r+0x46>
 800bac8:	6825      	ldr	r5, [r4, #0]
 800baca:	1961      	adds	r1, r4, r5
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf01      	itttt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	1949      	addeq	r1, r1, r5
 800bad6:	6021      	streq	r1, [r4, #0]
 800bad8:	e7ed      	b.n	800bab6 <_free_r+0x22>
 800bada:	461a      	mov	r2, r3
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	b10b      	cbz	r3, 800bae4 <_free_r+0x50>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d9fa      	bls.n	800bada <_free_r+0x46>
 800bae4:	6811      	ldr	r1, [r2, #0]
 800bae6:	1855      	adds	r5, r2, r1
 800bae8:	42a5      	cmp	r5, r4
 800baea:	d10b      	bne.n	800bb04 <_free_r+0x70>
 800baec:	6824      	ldr	r4, [r4, #0]
 800baee:	4421      	add	r1, r4
 800baf0:	1854      	adds	r4, r2, r1
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	6011      	str	r1, [r2, #0]
 800baf6:	d1e0      	bne.n	800baba <_free_r+0x26>
 800baf8:	681c      	ldr	r4, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	6053      	str	r3, [r2, #4]
 800bafe:	440c      	add	r4, r1
 800bb00:	6014      	str	r4, [r2, #0]
 800bb02:	e7da      	b.n	800baba <_free_r+0x26>
 800bb04:	d902      	bls.n	800bb0c <_free_r+0x78>
 800bb06:	230c      	movs	r3, #12
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	e7d6      	b.n	800baba <_free_r+0x26>
 800bb0c:	6825      	ldr	r5, [r4, #0]
 800bb0e:	1961      	adds	r1, r4, r5
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf04      	itt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	bf04      	itt	eq
 800bb1c:	1949      	addeq	r1, r1, r5
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	6054      	str	r4, [r2, #4]
 800bb22:	e7ca      	b.n	800baba <_free_r+0x26>
 800bb24:	b003      	add	sp, #12
 800bb26:	bd30      	pop	{r4, r5, pc}
 800bb28:	2000591c 	.word	0x2000591c

0800bb2c <rshift>:
 800bb2c:	6903      	ldr	r3, [r0, #16]
 800bb2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb3a:	f100 0414 	add.w	r4, r0, #20
 800bb3e:	dd45      	ble.n	800bbcc <rshift+0xa0>
 800bb40:	f011 011f 	ands.w	r1, r1, #31
 800bb44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb4c:	d10c      	bne.n	800bb68 <rshift+0x3c>
 800bb4e:	f100 0710 	add.w	r7, r0, #16
 800bb52:	4629      	mov	r1, r5
 800bb54:	42b1      	cmp	r1, r6
 800bb56:	d334      	bcc.n	800bbc2 <rshift+0x96>
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	1eea      	subs	r2, r5, #3
 800bb5e:	4296      	cmp	r6, r2
 800bb60:	bf38      	it	cc
 800bb62:	2300      	movcc	r3, #0
 800bb64:	4423      	add	r3, r4
 800bb66:	e015      	b.n	800bb94 <rshift+0x68>
 800bb68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb6c:	f1c1 0820 	rsb	r8, r1, #32
 800bb70:	40cf      	lsrs	r7, r1
 800bb72:	f105 0e04 	add.w	lr, r5, #4
 800bb76:	46a1      	mov	r9, r4
 800bb78:	4576      	cmp	r6, lr
 800bb7a:	46f4      	mov	ip, lr
 800bb7c:	d815      	bhi.n	800bbaa <rshift+0x7e>
 800bb7e:	1a9a      	subs	r2, r3, r2
 800bb80:	0092      	lsls	r2, r2, #2
 800bb82:	3a04      	subs	r2, #4
 800bb84:	3501      	adds	r5, #1
 800bb86:	42ae      	cmp	r6, r5
 800bb88:	bf38      	it	cc
 800bb8a:	2200      	movcc	r2, #0
 800bb8c:	18a3      	adds	r3, r4, r2
 800bb8e:	50a7      	str	r7, [r4, r2]
 800bb90:	b107      	cbz	r7, 800bb94 <rshift+0x68>
 800bb92:	3304      	adds	r3, #4
 800bb94:	1b1a      	subs	r2, r3, r4
 800bb96:	42a3      	cmp	r3, r4
 800bb98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb9c:	bf08      	it	eq
 800bb9e:	2300      	moveq	r3, #0
 800bba0:	6102      	str	r2, [r0, #16]
 800bba2:	bf08      	it	eq
 800bba4:	6143      	streq	r3, [r0, #20]
 800bba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbaa:	f8dc c000 	ldr.w	ip, [ip]
 800bbae:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbb2:	ea4c 0707 	orr.w	r7, ip, r7
 800bbb6:	f849 7b04 	str.w	r7, [r9], #4
 800bbba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbbe:	40cf      	lsrs	r7, r1
 800bbc0:	e7da      	b.n	800bb78 <rshift+0x4c>
 800bbc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bbc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800bbca:	e7c3      	b.n	800bb54 <rshift+0x28>
 800bbcc:	4623      	mov	r3, r4
 800bbce:	e7e1      	b.n	800bb94 <rshift+0x68>

0800bbd0 <__hexdig_fun>:
 800bbd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bbd4:	2b09      	cmp	r3, #9
 800bbd6:	d802      	bhi.n	800bbde <__hexdig_fun+0xe>
 800bbd8:	3820      	subs	r0, #32
 800bbda:	b2c0      	uxtb	r0, r0
 800bbdc:	4770      	bx	lr
 800bbde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbe2:	2b05      	cmp	r3, #5
 800bbe4:	d801      	bhi.n	800bbea <__hexdig_fun+0x1a>
 800bbe6:	3847      	subs	r0, #71	; 0x47
 800bbe8:	e7f7      	b.n	800bbda <__hexdig_fun+0xa>
 800bbea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bbee:	2b05      	cmp	r3, #5
 800bbf0:	d801      	bhi.n	800bbf6 <__hexdig_fun+0x26>
 800bbf2:	3827      	subs	r0, #39	; 0x27
 800bbf4:	e7f1      	b.n	800bbda <__hexdig_fun+0xa>
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	4770      	bx	lr
	...

0800bbfc <__gethex>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	4617      	mov	r7, r2
 800bc02:	680a      	ldr	r2, [r1, #0]
 800bc04:	b085      	sub	sp, #20
 800bc06:	f102 0b02 	add.w	fp, r2, #2
 800bc0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc12:	4681      	mov	r9, r0
 800bc14:	468a      	mov	sl, r1
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	32fe      	adds	r2, #254	; 0xfe
 800bc1a:	eb02 030b 	add.w	r3, r2, fp
 800bc1e:	46d8      	mov	r8, fp
 800bc20:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	2830      	cmp	r0, #48	; 0x30
 800bc28:	d0f7      	beq.n	800bc1a <__gethex+0x1e>
 800bc2a:	f7ff ffd1 	bl	800bbd0 <__hexdig_fun>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d138      	bne.n	800bca6 <__gethex+0xaa>
 800bc34:	49a7      	ldr	r1, [pc, #668]	; (800bed4 <__gethex+0x2d8>)
 800bc36:	2201      	movs	r2, #1
 800bc38:	4640      	mov	r0, r8
 800bc3a:	f7fe ffb8 	bl	800abae <strncmp>
 800bc3e:	4606      	mov	r6, r0
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d169      	bne.n	800bd18 <__gethex+0x11c>
 800bc44:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bc48:	465d      	mov	r5, fp
 800bc4a:	f7ff ffc1 	bl	800bbd0 <__hexdig_fun>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d064      	beq.n	800bd1c <__gethex+0x120>
 800bc52:	465a      	mov	r2, fp
 800bc54:	7810      	ldrb	r0, [r2, #0]
 800bc56:	2830      	cmp	r0, #48	; 0x30
 800bc58:	4690      	mov	r8, r2
 800bc5a:	f102 0201 	add.w	r2, r2, #1
 800bc5e:	d0f9      	beq.n	800bc54 <__gethex+0x58>
 800bc60:	f7ff ffb6 	bl	800bbd0 <__hexdig_fun>
 800bc64:	2301      	movs	r3, #1
 800bc66:	fab0 f480 	clz	r4, r0
 800bc6a:	0964      	lsrs	r4, r4, #5
 800bc6c:	465e      	mov	r6, fp
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	4642      	mov	r2, r8
 800bc72:	4615      	mov	r5, r2
 800bc74:	3201      	adds	r2, #1
 800bc76:	7828      	ldrb	r0, [r5, #0]
 800bc78:	f7ff ffaa 	bl	800bbd0 <__hexdig_fun>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d1f8      	bne.n	800bc72 <__gethex+0x76>
 800bc80:	4994      	ldr	r1, [pc, #592]	; (800bed4 <__gethex+0x2d8>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	4628      	mov	r0, r5
 800bc86:	f7fe ff92 	bl	800abae <strncmp>
 800bc8a:	b978      	cbnz	r0, 800bcac <__gethex+0xb0>
 800bc8c:	b946      	cbnz	r6, 800bca0 <__gethex+0xa4>
 800bc8e:	1c6e      	adds	r6, r5, #1
 800bc90:	4632      	mov	r2, r6
 800bc92:	4615      	mov	r5, r2
 800bc94:	3201      	adds	r2, #1
 800bc96:	7828      	ldrb	r0, [r5, #0]
 800bc98:	f7ff ff9a 	bl	800bbd0 <__hexdig_fun>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1f8      	bne.n	800bc92 <__gethex+0x96>
 800bca0:	1b73      	subs	r3, r6, r5
 800bca2:	009e      	lsls	r6, r3, #2
 800bca4:	e004      	b.n	800bcb0 <__gethex+0xb4>
 800bca6:	2400      	movs	r4, #0
 800bca8:	4626      	mov	r6, r4
 800bcaa:	e7e1      	b.n	800bc70 <__gethex+0x74>
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	d1f7      	bne.n	800bca0 <__gethex+0xa4>
 800bcb0:	782b      	ldrb	r3, [r5, #0]
 800bcb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bcb6:	2b50      	cmp	r3, #80	; 0x50
 800bcb8:	d13d      	bne.n	800bd36 <__gethex+0x13a>
 800bcba:	786b      	ldrb	r3, [r5, #1]
 800bcbc:	2b2b      	cmp	r3, #43	; 0x2b
 800bcbe:	d02f      	beq.n	800bd20 <__gethex+0x124>
 800bcc0:	2b2d      	cmp	r3, #45	; 0x2d
 800bcc2:	d031      	beq.n	800bd28 <__gethex+0x12c>
 800bcc4:	1c69      	adds	r1, r5, #1
 800bcc6:	f04f 0b00 	mov.w	fp, #0
 800bcca:	7808      	ldrb	r0, [r1, #0]
 800bccc:	f7ff ff80 	bl	800bbd0 <__hexdig_fun>
 800bcd0:	1e42      	subs	r2, r0, #1
 800bcd2:	b2d2      	uxtb	r2, r2
 800bcd4:	2a18      	cmp	r2, #24
 800bcd6:	d82e      	bhi.n	800bd36 <__gethex+0x13a>
 800bcd8:	f1a0 0210 	sub.w	r2, r0, #16
 800bcdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bce0:	f7ff ff76 	bl	800bbd0 <__hexdig_fun>
 800bce4:	f100 3cff 	add.w	ip, r0, #4294967295
 800bce8:	fa5f fc8c 	uxtb.w	ip, ip
 800bcec:	f1bc 0f18 	cmp.w	ip, #24
 800bcf0:	d91d      	bls.n	800bd2e <__gethex+0x132>
 800bcf2:	f1bb 0f00 	cmp.w	fp, #0
 800bcf6:	d000      	beq.n	800bcfa <__gethex+0xfe>
 800bcf8:	4252      	negs	r2, r2
 800bcfa:	4416      	add	r6, r2
 800bcfc:	f8ca 1000 	str.w	r1, [sl]
 800bd00:	b1dc      	cbz	r4, 800bd3a <__gethex+0x13e>
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf14      	ite	ne
 800bd08:	f04f 0800 	movne.w	r8, #0
 800bd0c:	f04f 0806 	moveq.w	r8, #6
 800bd10:	4640      	mov	r0, r8
 800bd12:	b005      	add	sp, #20
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	4645      	mov	r5, r8
 800bd1a:	4626      	mov	r6, r4
 800bd1c:	2401      	movs	r4, #1
 800bd1e:	e7c7      	b.n	800bcb0 <__gethex+0xb4>
 800bd20:	f04f 0b00 	mov.w	fp, #0
 800bd24:	1ca9      	adds	r1, r5, #2
 800bd26:	e7d0      	b.n	800bcca <__gethex+0xce>
 800bd28:	f04f 0b01 	mov.w	fp, #1
 800bd2c:	e7fa      	b.n	800bd24 <__gethex+0x128>
 800bd2e:	230a      	movs	r3, #10
 800bd30:	fb03 0002 	mla	r0, r3, r2, r0
 800bd34:	e7d0      	b.n	800bcd8 <__gethex+0xdc>
 800bd36:	4629      	mov	r1, r5
 800bd38:	e7e0      	b.n	800bcfc <__gethex+0x100>
 800bd3a:	eba5 0308 	sub.w	r3, r5, r8
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4621      	mov	r1, r4
 800bd42:	2b07      	cmp	r3, #7
 800bd44:	dc0a      	bgt.n	800bd5c <__gethex+0x160>
 800bd46:	4648      	mov	r0, r9
 800bd48:	f000 fa5a 	bl	800c200 <_Balloc>
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	b940      	cbnz	r0, 800bd62 <__gethex+0x166>
 800bd50:	4b61      	ldr	r3, [pc, #388]	; (800bed8 <__gethex+0x2dc>)
 800bd52:	4602      	mov	r2, r0
 800bd54:	21e4      	movs	r1, #228	; 0xe4
 800bd56:	4861      	ldr	r0, [pc, #388]	; (800bedc <__gethex+0x2e0>)
 800bd58:	f001 fd4e 	bl	800d7f8 <__assert_func>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	105b      	asrs	r3, r3, #1
 800bd60:	e7ef      	b.n	800bd42 <__gethex+0x146>
 800bd62:	f100 0a14 	add.w	sl, r0, #20
 800bd66:	2300      	movs	r3, #0
 800bd68:	495a      	ldr	r1, [pc, #360]	; (800bed4 <__gethex+0x2d8>)
 800bd6a:	f8cd a004 	str.w	sl, [sp, #4]
 800bd6e:	469b      	mov	fp, r3
 800bd70:	45a8      	cmp	r8, r5
 800bd72:	d342      	bcc.n	800bdfa <__gethex+0x1fe>
 800bd74:	9801      	ldr	r0, [sp, #4]
 800bd76:	f840 bb04 	str.w	fp, [r0], #4
 800bd7a:	eba0 000a 	sub.w	r0, r0, sl
 800bd7e:	1080      	asrs	r0, r0, #2
 800bd80:	6120      	str	r0, [r4, #16]
 800bd82:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bd86:	4658      	mov	r0, fp
 800bd88:	f000 fb2c 	bl	800c3e4 <__hi0bits>
 800bd8c:	683d      	ldr	r5, [r7, #0]
 800bd8e:	eba8 0000 	sub.w	r0, r8, r0
 800bd92:	42a8      	cmp	r0, r5
 800bd94:	dd59      	ble.n	800be4a <__gethex+0x24e>
 800bd96:	eba0 0805 	sub.w	r8, r0, r5
 800bd9a:	4641      	mov	r1, r8
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 febb 	bl	800cb18 <__any_on>
 800bda2:	4683      	mov	fp, r0
 800bda4:	b1b8      	cbz	r0, 800bdd6 <__gethex+0x1da>
 800bda6:	f108 33ff 	add.w	r3, r8, #4294967295
 800bdaa:	1159      	asrs	r1, r3, #5
 800bdac:	f003 021f 	and.w	r2, r3, #31
 800bdb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bdb4:	f04f 0b01 	mov.w	fp, #1
 800bdb8:	fa0b f202 	lsl.w	r2, fp, r2
 800bdbc:	420a      	tst	r2, r1
 800bdbe:	d00a      	beq.n	800bdd6 <__gethex+0x1da>
 800bdc0:	455b      	cmp	r3, fp
 800bdc2:	dd06      	ble.n	800bdd2 <__gethex+0x1d6>
 800bdc4:	f1a8 0102 	sub.w	r1, r8, #2
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fea5 	bl	800cb18 <__any_on>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d138      	bne.n	800be44 <__gethex+0x248>
 800bdd2:	f04f 0b02 	mov.w	fp, #2
 800bdd6:	4641      	mov	r1, r8
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7ff fea7 	bl	800bb2c <rshift>
 800bdde:	4446      	add	r6, r8
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	42b3      	cmp	r3, r6
 800bde4:	da41      	bge.n	800be6a <__gethex+0x26e>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4648      	mov	r0, r9
 800bdea:	f000 fa49 	bl	800c280 <_Bfree>
 800bdee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bdf8:	e78a      	b.n	800bd10 <__gethex+0x114>
 800bdfa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bdfe:	2a2e      	cmp	r2, #46	; 0x2e
 800be00:	d014      	beq.n	800be2c <__gethex+0x230>
 800be02:	2b20      	cmp	r3, #32
 800be04:	d106      	bne.n	800be14 <__gethex+0x218>
 800be06:	9b01      	ldr	r3, [sp, #4]
 800be08:	f843 bb04 	str.w	fp, [r3], #4
 800be0c:	f04f 0b00 	mov.w	fp, #0
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	465b      	mov	r3, fp
 800be14:	7828      	ldrb	r0, [r5, #0]
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	f7ff feda 	bl	800bbd0 <__hexdig_fun>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	f000 000f 	and.w	r0, r0, #15
 800be22:	4098      	lsls	r0, r3
 800be24:	ea4b 0b00 	orr.w	fp, fp, r0
 800be28:	3304      	adds	r3, #4
 800be2a:	e7a1      	b.n	800bd70 <__gethex+0x174>
 800be2c:	45a8      	cmp	r8, r5
 800be2e:	d8e8      	bhi.n	800be02 <__gethex+0x206>
 800be30:	2201      	movs	r2, #1
 800be32:	4628      	mov	r0, r5
 800be34:	9303      	str	r3, [sp, #12]
 800be36:	f7fe feba 	bl	800abae <strncmp>
 800be3a:	4926      	ldr	r1, [pc, #152]	; (800bed4 <__gethex+0x2d8>)
 800be3c:	9b03      	ldr	r3, [sp, #12]
 800be3e:	2800      	cmp	r0, #0
 800be40:	d1df      	bne.n	800be02 <__gethex+0x206>
 800be42:	e795      	b.n	800bd70 <__gethex+0x174>
 800be44:	f04f 0b03 	mov.w	fp, #3
 800be48:	e7c5      	b.n	800bdd6 <__gethex+0x1da>
 800be4a:	da0b      	bge.n	800be64 <__gethex+0x268>
 800be4c:	eba5 0800 	sub.w	r8, r5, r0
 800be50:	4621      	mov	r1, r4
 800be52:	4642      	mov	r2, r8
 800be54:	4648      	mov	r0, r9
 800be56:	f000 fc2d 	bl	800c6b4 <__lshift>
 800be5a:	eba6 0608 	sub.w	r6, r6, r8
 800be5e:	4604      	mov	r4, r0
 800be60:	f100 0a14 	add.w	sl, r0, #20
 800be64:	f04f 0b00 	mov.w	fp, #0
 800be68:	e7ba      	b.n	800bde0 <__gethex+0x1e4>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	42b3      	cmp	r3, r6
 800be6e:	dd73      	ble.n	800bf58 <__gethex+0x35c>
 800be70:	1b9e      	subs	r6, r3, r6
 800be72:	42b5      	cmp	r5, r6
 800be74:	dc34      	bgt.n	800bee0 <__gethex+0x2e4>
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d023      	beq.n	800bec4 <__gethex+0x2c8>
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d025      	beq.n	800becc <__gethex+0x2d0>
 800be80:	2b01      	cmp	r3, #1
 800be82:	d115      	bne.n	800beb0 <__gethex+0x2b4>
 800be84:	42b5      	cmp	r5, r6
 800be86:	d113      	bne.n	800beb0 <__gethex+0x2b4>
 800be88:	2d01      	cmp	r5, #1
 800be8a:	d10b      	bne.n	800bea4 <__gethex+0x2a8>
 800be8c:	9a02      	ldr	r2, [sp, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6013      	str	r3, [r2, #0]
 800be92:	2301      	movs	r3, #1
 800be94:	6123      	str	r3, [r4, #16]
 800be96:	f8ca 3000 	str.w	r3, [sl]
 800be9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be9c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bea0:	601c      	str	r4, [r3, #0]
 800bea2:	e735      	b.n	800bd10 <__gethex+0x114>
 800bea4:	1e69      	subs	r1, r5, #1
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 fe36 	bl	800cb18 <__any_on>
 800beac:	2800      	cmp	r0, #0
 800beae:	d1ed      	bne.n	800be8c <__gethex+0x290>
 800beb0:	4621      	mov	r1, r4
 800beb2:	4648      	mov	r0, r9
 800beb4:	f000 f9e4 	bl	800c280 <_Bfree>
 800beb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beba:	2300      	movs	r3, #0
 800bebc:	6013      	str	r3, [r2, #0]
 800bebe:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bec2:	e725      	b.n	800bd10 <__gethex+0x114>
 800bec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f2      	bne.n	800beb0 <__gethex+0x2b4>
 800beca:	e7df      	b.n	800be8c <__gethex+0x290>
 800becc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1dc      	bne.n	800be8c <__gethex+0x290>
 800bed2:	e7ed      	b.n	800beb0 <__gethex+0x2b4>
 800bed4:	0800e0d0 	.word	0x0800e0d0
 800bed8:	0800e2e4 	.word	0x0800e2e4
 800bedc:	0800e2f5 	.word	0x0800e2f5
 800bee0:	f106 38ff 	add.w	r8, r6, #4294967295
 800bee4:	f1bb 0f00 	cmp.w	fp, #0
 800bee8:	d133      	bne.n	800bf52 <__gethex+0x356>
 800beea:	f1b8 0f00 	cmp.w	r8, #0
 800beee:	d004      	beq.n	800befa <__gethex+0x2fe>
 800bef0:	4641      	mov	r1, r8
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 fe10 	bl	800cb18 <__any_on>
 800bef8:	4683      	mov	fp, r0
 800befa:	ea4f 1268 	mov.w	r2, r8, asr #5
 800befe:	2301      	movs	r3, #1
 800bf00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf04:	f008 081f 	and.w	r8, r8, #31
 800bf08:	fa03 f308 	lsl.w	r3, r3, r8
 800bf0c:	4213      	tst	r3, r2
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4620      	mov	r0, r4
 800bf12:	bf18      	it	ne
 800bf14:	f04b 0b02 	orrne.w	fp, fp, #2
 800bf18:	1bad      	subs	r5, r5, r6
 800bf1a:	f7ff fe07 	bl	800bb2c <rshift>
 800bf1e:	687e      	ldr	r6, [r7, #4]
 800bf20:	f04f 0802 	mov.w	r8, #2
 800bf24:	f1bb 0f00 	cmp.w	fp, #0
 800bf28:	d04a      	beq.n	800bfc0 <__gethex+0x3c4>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d016      	beq.n	800bf5e <__gethex+0x362>
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	d018      	beq.n	800bf66 <__gethex+0x36a>
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d109      	bne.n	800bf4c <__gethex+0x350>
 800bf38:	f01b 0f02 	tst.w	fp, #2
 800bf3c:	d006      	beq.n	800bf4c <__gethex+0x350>
 800bf3e:	f8da 3000 	ldr.w	r3, [sl]
 800bf42:	ea4b 0b03 	orr.w	fp, fp, r3
 800bf46:	f01b 0f01 	tst.w	fp, #1
 800bf4a:	d10f      	bne.n	800bf6c <__gethex+0x370>
 800bf4c:	f048 0810 	orr.w	r8, r8, #16
 800bf50:	e036      	b.n	800bfc0 <__gethex+0x3c4>
 800bf52:	f04f 0b01 	mov.w	fp, #1
 800bf56:	e7d0      	b.n	800befa <__gethex+0x2fe>
 800bf58:	f04f 0801 	mov.w	r8, #1
 800bf5c:	e7e2      	b.n	800bf24 <__gethex+0x328>
 800bf5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf60:	f1c3 0301 	rsb	r3, r3, #1
 800bf64:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d0ef      	beq.n	800bf4c <__gethex+0x350>
 800bf6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf70:	f104 0214 	add.w	r2, r4, #20
 800bf74:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bf7e:	2300      	movs	r3, #0
 800bf80:	4694      	mov	ip, r2
 800bf82:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf86:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bf8a:	d01e      	beq.n	800bfca <__gethex+0x3ce>
 800bf8c:	3101      	adds	r1, #1
 800bf8e:	f8cc 1000 	str.w	r1, [ip]
 800bf92:	f1b8 0f02 	cmp.w	r8, #2
 800bf96:	f104 0214 	add.w	r2, r4, #20
 800bf9a:	d13d      	bne.n	800c018 <__gethex+0x41c>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	42ab      	cmp	r3, r5
 800bfa2:	d10b      	bne.n	800bfbc <__gethex+0x3c0>
 800bfa4:	1169      	asrs	r1, r5, #5
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f005 051f 	and.w	r5, r5, #31
 800bfac:	fa03 f505 	lsl.w	r5, r3, r5
 800bfb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfb4:	421d      	tst	r5, r3
 800bfb6:	bf18      	it	ne
 800bfb8:	f04f 0801 	movne.w	r8, #1
 800bfbc:	f048 0820 	orr.w	r8, r8, #32
 800bfc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfc2:	601c      	str	r4, [r3, #0]
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	601e      	str	r6, [r3, #0]
 800bfc8:	e6a2      	b.n	800bd10 <__gethex+0x114>
 800bfca:	4290      	cmp	r0, r2
 800bfcc:	f842 3c04 	str.w	r3, [r2, #-4]
 800bfd0:	d8d6      	bhi.n	800bf80 <__gethex+0x384>
 800bfd2:	68a2      	ldr	r2, [r4, #8]
 800bfd4:	4593      	cmp	fp, r2
 800bfd6:	db17      	blt.n	800c008 <__gethex+0x40c>
 800bfd8:	6861      	ldr	r1, [r4, #4]
 800bfda:	4648      	mov	r0, r9
 800bfdc:	3101      	adds	r1, #1
 800bfde:	f000 f90f 	bl	800c200 <_Balloc>
 800bfe2:	4682      	mov	sl, r0
 800bfe4:	b918      	cbnz	r0, 800bfee <__gethex+0x3f2>
 800bfe6:	4b1b      	ldr	r3, [pc, #108]	; (800c054 <__gethex+0x458>)
 800bfe8:	4602      	mov	r2, r0
 800bfea:	2184      	movs	r1, #132	; 0x84
 800bfec:	e6b3      	b.n	800bd56 <__gethex+0x15a>
 800bfee:	6922      	ldr	r2, [r4, #16]
 800bff0:	3202      	adds	r2, #2
 800bff2:	f104 010c 	add.w	r1, r4, #12
 800bff6:	0092      	lsls	r2, r2, #2
 800bff8:	300c      	adds	r0, #12
 800bffa:	f7fe feb2 	bl	800ad62 <memcpy>
 800bffe:	4621      	mov	r1, r4
 800c000:	4648      	mov	r0, r9
 800c002:	f000 f93d 	bl	800c280 <_Bfree>
 800c006:	4654      	mov	r4, sl
 800c008:	6922      	ldr	r2, [r4, #16]
 800c00a:	1c51      	adds	r1, r2, #1
 800c00c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c010:	6121      	str	r1, [r4, #16]
 800c012:	2101      	movs	r1, #1
 800c014:	6151      	str	r1, [r2, #20]
 800c016:	e7bc      	b.n	800bf92 <__gethex+0x396>
 800c018:	6921      	ldr	r1, [r4, #16]
 800c01a:	4559      	cmp	r1, fp
 800c01c:	dd0b      	ble.n	800c036 <__gethex+0x43a>
 800c01e:	2101      	movs	r1, #1
 800c020:	4620      	mov	r0, r4
 800c022:	f7ff fd83 	bl	800bb2c <rshift>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	3601      	adds	r6, #1
 800c02a:	42b3      	cmp	r3, r6
 800c02c:	f6ff aedb 	blt.w	800bde6 <__gethex+0x1ea>
 800c030:	f04f 0801 	mov.w	r8, #1
 800c034:	e7c2      	b.n	800bfbc <__gethex+0x3c0>
 800c036:	f015 051f 	ands.w	r5, r5, #31
 800c03a:	d0f9      	beq.n	800c030 <__gethex+0x434>
 800c03c:	9b01      	ldr	r3, [sp, #4]
 800c03e:	441a      	add	r2, r3
 800c040:	f1c5 0520 	rsb	r5, r5, #32
 800c044:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c048:	f000 f9cc 	bl	800c3e4 <__hi0bits>
 800c04c:	42a8      	cmp	r0, r5
 800c04e:	dbe6      	blt.n	800c01e <__gethex+0x422>
 800c050:	e7ee      	b.n	800c030 <__gethex+0x434>
 800c052:	bf00      	nop
 800c054:	0800e2e4 	.word	0x0800e2e4

0800c058 <L_shift>:
 800c058:	f1c2 0208 	rsb	r2, r2, #8
 800c05c:	0092      	lsls	r2, r2, #2
 800c05e:	b570      	push	{r4, r5, r6, lr}
 800c060:	f1c2 0620 	rsb	r6, r2, #32
 800c064:	6843      	ldr	r3, [r0, #4]
 800c066:	6804      	ldr	r4, [r0, #0]
 800c068:	fa03 f506 	lsl.w	r5, r3, r6
 800c06c:	432c      	orrs	r4, r5
 800c06e:	40d3      	lsrs	r3, r2
 800c070:	6004      	str	r4, [r0, #0]
 800c072:	f840 3f04 	str.w	r3, [r0, #4]!
 800c076:	4288      	cmp	r0, r1
 800c078:	d3f4      	bcc.n	800c064 <L_shift+0xc>
 800c07a:	bd70      	pop	{r4, r5, r6, pc}

0800c07c <__match>:
 800c07c:	b530      	push	{r4, r5, lr}
 800c07e:	6803      	ldr	r3, [r0, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	b914      	cbnz	r4, 800c08e <__match+0x12>
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	2001      	movs	r0, #1
 800c08c:	bd30      	pop	{r4, r5, pc}
 800c08e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c092:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c096:	2d19      	cmp	r5, #25
 800c098:	bf98      	it	ls
 800c09a:	3220      	addls	r2, #32
 800c09c:	42a2      	cmp	r2, r4
 800c09e:	d0f0      	beq.n	800c082 <__match+0x6>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7f3      	b.n	800c08c <__match+0x10>

0800c0a4 <__hexnan>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	680b      	ldr	r3, [r1, #0]
 800c0aa:	6801      	ldr	r1, [r0, #0]
 800c0ac:	115e      	asrs	r6, r3, #5
 800c0ae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0b2:	f013 031f 	ands.w	r3, r3, #31
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	bf18      	it	ne
 800c0ba:	3604      	addne	r6, #4
 800c0bc:	2500      	movs	r5, #0
 800c0be:	1f37      	subs	r7, r6, #4
 800c0c0:	4682      	mov	sl, r0
 800c0c2:	4690      	mov	r8, r2
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0ca:	46b9      	mov	r9, r7
 800c0cc:	463c      	mov	r4, r7
 800c0ce:	9502      	str	r5, [sp, #8]
 800c0d0:	46ab      	mov	fp, r5
 800c0d2:	784a      	ldrb	r2, [r1, #1]
 800c0d4:	1c4b      	adds	r3, r1, #1
 800c0d6:	9303      	str	r3, [sp, #12]
 800c0d8:	b342      	cbz	r2, 800c12c <__hexnan+0x88>
 800c0da:	4610      	mov	r0, r2
 800c0dc:	9105      	str	r1, [sp, #20]
 800c0de:	9204      	str	r2, [sp, #16]
 800c0e0:	f7ff fd76 	bl	800bbd0 <__hexdig_fun>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d14f      	bne.n	800c188 <__hexnan+0xe4>
 800c0e8:	9a04      	ldr	r2, [sp, #16]
 800c0ea:	9905      	ldr	r1, [sp, #20]
 800c0ec:	2a20      	cmp	r2, #32
 800c0ee:	d818      	bhi.n	800c122 <__hexnan+0x7e>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	459b      	cmp	fp, r3
 800c0f4:	dd13      	ble.n	800c11e <__hexnan+0x7a>
 800c0f6:	454c      	cmp	r4, r9
 800c0f8:	d206      	bcs.n	800c108 <__hexnan+0x64>
 800c0fa:	2d07      	cmp	r5, #7
 800c0fc:	dc04      	bgt.n	800c108 <__hexnan+0x64>
 800c0fe:	462a      	mov	r2, r5
 800c100:	4649      	mov	r1, r9
 800c102:	4620      	mov	r0, r4
 800c104:	f7ff ffa8 	bl	800c058 <L_shift>
 800c108:	4544      	cmp	r4, r8
 800c10a:	d950      	bls.n	800c1ae <__hexnan+0x10a>
 800c10c:	2300      	movs	r3, #0
 800c10e:	f1a4 0904 	sub.w	r9, r4, #4
 800c112:	f844 3c04 	str.w	r3, [r4, #-4]
 800c116:	f8cd b008 	str.w	fp, [sp, #8]
 800c11a:	464c      	mov	r4, r9
 800c11c:	461d      	mov	r5, r3
 800c11e:	9903      	ldr	r1, [sp, #12]
 800c120:	e7d7      	b.n	800c0d2 <__hexnan+0x2e>
 800c122:	2a29      	cmp	r2, #41	; 0x29
 800c124:	d155      	bne.n	800c1d2 <__hexnan+0x12e>
 800c126:	3102      	adds	r1, #2
 800c128:	f8ca 1000 	str.w	r1, [sl]
 800c12c:	f1bb 0f00 	cmp.w	fp, #0
 800c130:	d04f      	beq.n	800c1d2 <__hexnan+0x12e>
 800c132:	454c      	cmp	r4, r9
 800c134:	d206      	bcs.n	800c144 <__hexnan+0xa0>
 800c136:	2d07      	cmp	r5, #7
 800c138:	dc04      	bgt.n	800c144 <__hexnan+0xa0>
 800c13a:	462a      	mov	r2, r5
 800c13c:	4649      	mov	r1, r9
 800c13e:	4620      	mov	r0, r4
 800c140:	f7ff ff8a 	bl	800c058 <L_shift>
 800c144:	4544      	cmp	r4, r8
 800c146:	d934      	bls.n	800c1b2 <__hexnan+0x10e>
 800c148:	f1a8 0204 	sub.w	r2, r8, #4
 800c14c:	4623      	mov	r3, r4
 800c14e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c152:	f842 1f04 	str.w	r1, [r2, #4]!
 800c156:	429f      	cmp	r7, r3
 800c158:	d2f9      	bcs.n	800c14e <__hexnan+0xaa>
 800c15a:	1b3b      	subs	r3, r7, r4
 800c15c:	f023 0303 	bic.w	r3, r3, #3
 800c160:	3304      	adds	r3, #4
 800c162:	3e03      	subs	r6, #3
 800c164:	3401      	adds	r4, #1
 800c166:	42a6      	cmp	r6, r4
 800c168:	bf38      	it	cc
 800c16a:	2304      	movcc	r3, #4
 800c16c:	4443      	add	r3, r8
 800c16e:	2200      	movs	r2, #0
 800c170:	f843 2b04 	str.w	r2, [r3], #4
 800c174:	429f      	cmp	r7, r3
 800c176:	d2fb      	bcs.n	800c170 <__hexnan+0xcc>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	b91b      	cbnz	r3, 800c184 <__hexnan+0xe0>
 800c17c:	4547      	cmp	r7, r8
 800c17e:	d126      	bne.n	800c1ce <__hexnan+0x12a>
 800c180:	2301      	movs	r3, #1
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	2005      	movs	r0, #5
 800c186:	e025      	b.n	800c1d4 <__hexnan+0x130>
 800c188:	3501      	adds	r5, #1
 800c18a:	2d08      	cmp	r5, #8
 800c18c:	f10b 0b01 	add.w	fp, fp, #1
 800c190:	dd06      	ble.n	800c1a0 <__hexnan+0xfc>
 800c192:	4544      	cmp	r4, r8
 800c194:	d9c3      	bls.n	800c11e <__hexnan+0x7a>
 800c196:	2300      	movs	r3, #0
 800c198:	f844 3c04 	str.w	r3, [r4, #-4]
 800c19c:	2501      	movs	r5, #1
 800c19e:	3c04      	subs	r4, #4
 800c1a0:	6822      	ldr	r2, [r4, #0]
 800c1a2:	f000 000f 	and.w	r0, r0, #15
 800c1a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1aa:	6020      	str	r0, [r4, #0]
 800c1ac:	e7b7      	b.n	800c11e <__hexnan+0x7a>
 800c1ae:	2508      	movs	r5, #8
 800c1b0:	e7b5      	b.n	800c11e <__hexnan+0x7a>
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d0df      	beq.n	800c178 <__hexnan+0xd4>
 800c1b8:	f1c3 0320 	rsb	r3, r3, #32
 800c1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c0:	40da      	lsrs	r2, r3
 800c1c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1c6:	4013      	ands	r3, r2
 800c1c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1cc:	e7d4      	b.n	800c178 <__hexnan+0xd4>
 800c1ce:	3f04      	subs	r7, #4
 800c1d0:	e7d2      	b.n	800c178 <__hexnan+0xd4>
 800c1d2:	2004      	movs	r0, #4
 800c1d4:	b007      	add	sp, #28
 800c1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1da <__ascii_mbtowc>:
 800c1da:	b082      	sub	sp, #8
 800c1dc:	b901      	cbnz	r1, 800c1e0 <__ascii_mbtowc+0x6>
 800c1de:	a901      	add	r1, sp, #4
 800c1e0:	b142      	cbz	r2, 800c1f4 <__ascii_mbtowc+0x1a>
 800c1e2:	b14b      	cbz	r3, 800c1f8 <__ascii_mbtowc+0x1e>
 800c1e4:	7813      	ldrb	r3, [r2, #0]
 800c1e6:	600b      	str	r3, [r1, #0]
 800c1e8:	7812      	ldrb	r2, [r2, #0]
 800c1ea:	1e10      	subs	r0, r2, #0
 800c1ec:	bf18      	it	ne
 800c1ee:	2001      	movne	r0, #1
 800c1f0:	b002      	add	sp, #8
 800c1f2:	4770      	bx	lr
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	e7fb      	b.n	800c1f0 <__ascii_mbtowc+0x16>
 800c1f8:	f06f 0001 	mvn.w	r0, #1
 800c1fc:	e7f8      	b.n	800c1f0 <__ascii_mbtowc+0x16>
	...

0800c200 <_Balloc>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	69c6      	ldr	r6, [r0, #28]
 800c204:	4604      	mov	r4, r0
 800c206:	460d      	mov	r5, r1
 800c208:	b976      	cbnz	r6, 800c228 <_Balloc+0x28>
 800c20a:	2010      	movs	r0, #16
 800c20c:	f7fc fde6 	bl	8008ddc <malloc>
 800c210:	4602      	mov	r2, r0
 800c212:	61e0      	str	r0, [r4, #28]
 800c214:	b920      	cbnz	r0, 800c220 <_Balloc+0x20>
 800c216:	4b18      	ldr	r3, [pc, #96]	; (800c278 <_Balloc+0x78>)
 800c218:	4818      	ldr	r0, [pc, #96]	; (800c27c <_Balloc+0x7c>)
 800c21a:	216b      	movs	r1, #107	; 0x6b
 800c21c:	f001 faec 	bl	800d7f8 <__assert_func>
 800c220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c224:	6006      	str	r6, [r0, #0]
 800c226:	60c6      	str	r6, [r0, #12]
 800c228:	69e6      	ldr	r6, [r4, #28]
 800c22a:	68f3      	ldr	r3, [r6, #12]
 800c22c:	b183      	cbz	r3, 800c250 <_Balloc+0x50>
 800c22e:	69e3      	ldr	r3, [r4, #28]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c236:	b9b8      	cbnz	r0, 800c268 <_Balloc+0x68>
 800c238:	2101      	movs	r1, #1
 800c23a:	fa01 f605 	lsl.w	r6, r1, r5
 800c23e:	1d72      	adds	r2, r6, #5
 800c240:	0092      	lsls	r2, r2, #2
 800c242:	4620      	mov	r0, r4
 800c244:	f001 faf6 	bl	800d834 <_calloc_r>
 800c248:	b160      	cbz	r0, 800c264 <_Balloc+0x64>
 800c24a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c24e:	e00e      	b.n	800c26e <_Balloc+0x6e>
 800c250:	2221      	movs	r2, #33	; 0x21
 800c252:	2104      	movs	r1, #4
 800c254:	4620      	mov	r0, r4
 800c256:	f001 faed 	bl	800d834 <_calloc_r>
 800c25a:	69e3      	ldr	r3, [r4, #28]
 800c25c:	60f0      	str	r0, [r6, #12]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e4      	bne.n	800c22e <_Balloc+0x2e>
 800c264:	2000      	movs	r0, #0
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	6802      	ldr	r2, [r0, #0]
 800c26a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c26e:	2300      	movs	r3, #0
 800c270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c274:	e7f7      	b.n	800c266 <_Balloc+0x66>
 800c276:	bf00      	nop
 800c278:	0800e275 	.word	0x0800e275
 800c27c:	0800e355 	.word	0x0800e355

0800c280 <_Bfree>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	69c6      	ldr	r6, [r0, #28]
 800c284:	4605      	mov	r5, r0
 800c286:	460c      	mov	r4, r1
 800c288:	b976      	cbnz	r6, 800c2a8 <_Bfree+0x28>
 800c28a:	2010      	movs	r0, #16
 800c28c:	f7fc fda6 	bl	8008ddc <malloc>
 800c290:	4602      	mov	r2, r0
 800c292:	61e8      	str	r0, [r5, #28]
 800c294:	b920      	cbnz	r0, 800c2a0 <_Bfree+0x20>
 800c296:	4b09      	ldr	r3, [pc, #36]	; (800c2bc <_Bfree+0x3c>)
 800c298:	4809      	ldr	r0, [pc, #36]	; (800c2c0 <_Bfree+0x40>)
 800c29a:	218f      	movs	r1, #143	; 0x8f
 800c29c:	f001 faac 	bl	800d7f8 <__assert_func>
 800c2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a4:	6006      	str	r6, [r0, #0]
 800c2a6:	60c6      	str	r6, [r0, #12]
 800c2a8:	b13c      	cbz	r4, 800c2ba <_Bfree+0x3a>
 800c2aa:	69eb      	ldr	r3, [r5, #28]
 800c2ac:	6862      	ldr	r2, [r4, #4]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2b4:	6021      	str	r1, [r4, #0]
 800c2b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	0800e275 	.word	0x0800e275
 800c2c0:	0800e355 	.word	0x0800e355

0800c2c4 <__multadd>:
 800c2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	690d      	ldr	r5, [r1, #16]
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	461e      	mov	r6, r3
 800c2d0:	f101 0c14 	add.w	ip, r1, #20
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c2da:	b299      	uxth	r1, r3
 800c2dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c2e0:	0c1e      	lsrs	r6, r3, #16
 800c2e2:	0c0b      	lsrs	r3, r1, #16
 800c2e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c2e8:	b289      	uxth	r1, r1
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2f0:	4285      	cmp	r5, r0
 800c2f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c2f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2fa:	dcec      	bgt.n	800c2d6 <__multadd+0x12>
 800c2fc:	b30e      	cbz	r6, 800c342 <__multadd+0x7e>
 800c2fe:	68a3      	ldr	r3, [r4, #8]
 800c300:	42ab      	cmp	r3, r5
 800c302:	dc19      	bgt.n	800c338 <__multadd+0x74>
 800c304:	6861      	ldr	r1, [r4, #4]
 800c306:	4638      	mov	r0, r7
 800c308:	3101      	adds	r1, #1
 800c30a:	f7ff ff79 	bl	800c200 <_Balloc>
 800c30e:	4680      	mov	r8, r0
 800c310:	b928      	cbnz	r0, 800c31e <__multadd+0x5a>
 800c312:	4602      	mov	r2, r0
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <__multadd+0x84>)
 800c316:	480d      	ldr	r0, [pc, #52]	; (800c34c <__multadd+0x88>)
 800c318:	21ba      	movs	r1, #186	; 0xba
 800c31a:	f001 fa6d 	bl	800d7f8 <__assert_func>
 800c31e:	6922      	ldr	r2, [r4, #16]
 800c320:	3202      	adds	r2, #2
 800c322:	f104 010c 	add.w	r1, r4, #12
 800c326:	0092      	lsls	r2, r2, #2
 800c328:	300c      	adds	r0, #12
 800c32a:	f7fe fd1a 	bl	800ad62 <memcpy>
 800c32e:	4621      	mov	r1, r4
 800c330:	4638      	mov	r0, r7
 800c332:	f7ff ffa5 	bl	800c280 <_Bfree>
 800c336:	4644      	mov	r4, r8
 800c338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c33c:	3501      	adds	r5, #1
 800c33e:	615e      	str	r6, [r3, #20]
 800c340:	6125      	str	r5, [r4, #16]
 800c342:	4620      	mov	r0, r4
 800c344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c348:	0800e2e4 	.word	0x0800e2e4
 800c34c:	0800e355 	.word	0x0800e355

0800c350 <__s2b>:
 800c350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c354:	460c      	mov	r4, r1
 800c356:	4615      	mov	r5, r2
 800c358:	461f      	mov	r7, r3
 800c35a:	2209      	movs	r2, #9
 800c35c:	3308      	adds	r3, #8
 800c35e:	4606      	mov	r6, r0
 800c360:	fb93 f3f2 	sdiv	r3, r3, r2
 800c364:	2100      	movs	r1, #0
 800c366:	2201      	movs	r2, #1
 800c368:	429a      	cmp	r2, r3
 800c36a:	db09      	blt.n	800c380 <__s2b+0x30>
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff ff47 	bl	800c200 <_Balloc>
 800c372:	b940      	cbnz	r0, 800c386 <__s2b+0x36>
 800c374:	4602      	mov	r2, r0
 800c376:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <__s2b+0x8c>)
 800c378:	4819      	ldr	r0, [pc, #100]	; (800c3e0 <__s2b+0x90>)
 800c37a:	21d3      	movs	r1, #211	; 0xd3
 800c37c:	f001 fa3c 	bl	800d7f8 <__assert_func>
 800c380:	0052      	lsls	r2, r2, #1
 800c382:	3101      	adds	r1, #1
 800c384:	e7f0      	b.n	800c368 <__s2b+0x18>
 800c386:	9b08      	ldr	r3, [sp, #32]
 800c388:	6143      	str	r3, [r0, #20]
 800c38a:	2d09      	cmp	r5, #9
 800c38c:	f04f 0301 	mov.w	r3, #1
 800c390:	6103      	str	r3, [r0, #16]
 800c392:	dd16      	ble.n	800c3c2 <__s2b+0x72>
 800c394:	f104 0909 	add.w	r9, r4, #9
 800c398:	46c8      	mov	r8, r9
 800c39a:	442c      	add	r4, r5
 800c39c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	3b30      	subs	r3, #48	; 0x30
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff ff8c 	bl	800c2c4 <__multadd>
 800c3ac:	45a0      	cmp	r8, r4
 800c3ae:	d1f5      	bne.n	800c39c <__s2b+0x4c>
 800c3b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c3b4:	444c      	add	r4, r9
 800c3b6:	1b2d      	subs	r5, r5, r4
 800c3b8:	1963      	adds	r3, r4, r5
 800c3ba:	42bb      	cmp	r3, r7
 800c3bc:	db04      	blt.n	800c3c8 <__s2b+0x78>
 800c3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c2:	340a      	adds	r4, #10
 800c3c4:	2509      	movs	r5, #9
 800c3c6:	e7f6      	b.n	800c3b6 <__s2b+0x66>
 800c3c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3cc:	4601      	mov	r1, r0
 800c3ce:	3b30      	subs	r3, #48	; 0x30
 800c3d0:	220a      	movs	r2, #10
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f7ff ff76 	bl	800c2c4 <__multadd>
 800c3d8:	e7ee      	b.n	800c3b8 <__s2b+0x68>
 800c3da:	bf00      	nop
 800c3dc:	0800e2e4 	.word	0x0800e2e4
 800c3e0:	0800e355 	.word	0x0800e355

0800c3e4 <__hi0bits>:
 800c3e4:	0c03      	lsrs	r3, r0, #16
 800c3e6:	041b      	lsls	r3, r3, #16
 800c3e8:	b9d3      	cbnz	r3, 800c420 <__hi0bits+0x3c>
 800c3ea:	0400      	lsls	r0, r0, #16
 800c3ec:	2310      	movs	r3, #16
 800c3ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3f2:	bf04      	itt	eq
 800c3f4:	0200      	lsleq	r0, r0, #8
 800c3f6:	3308      	addeq	r3, #8
 800c3f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3fc:	bf04      	itt	eq
 800c3fe:	0100      	lsleq	r0, r0, #4
 800c400:	3304      	addeq	r3, #4
 800c402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c406:	bf04      	itt	eq
 800c408:	0080      	lsleq	r0, r0, #2
 800c40a:	3302      	addeq	r3, #2
 800c40c:	2800      	cmp	r0, #0
 800c40e:	db05      	blt.n	800c41c <__hi0bits+0x38>
 800c410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c414:	f103 0301 	add.w	r3, r3, #1
 800c418:	bf08      	it	eq
 800c41a:	2320      	moveq	r3, #32
 800c41c:	4618      	mov	r0, r3
 800c41e:	4770      	bx	lr
 800c420:	2300      	movs	r3, #0
 800c422:	e7e4      	b.n	800c3ee <__hi0bits+0xa>

0800c424 <__lo0bits>:
 800c424:	6803      	ldr	r3, [r0, #0]
 800c426:	f013 0207 	ands.w	r2, r3, #7
 800c42a:	d00c      	beq.n	800c446 <__lo0bits+0x22>
 800c42c:	07d9      	lsls	r1, r3, #31
 800c42e:	d422      	bmi.n	800c476 <__lo0bits+0x52>
 800c430:	079a      	lsls	r2, r3, #30
 800c432:	bf49      	itett	mi
 800c434:	085b      	lsrmi	r3, r3, #1
 800c436:	089b      	lsrpl	r3, r3, #2
 800c438:	6003      	strmi	r3, [r0, #0]
 800c43a:	2201      	movmi	r2, #1
 800c43c:	bf5c      	itt	pl
 800c43e:	6003      	strpl	r3, [r0, #0]
 800c440:	2202      	movpl	r2, #2
 800c442:	4610      	mov	r0, r2
 800c444:	4770      	bx	lr
 800c446:	b299      	uxth	r1, r3
 800c448:	b909      	cbnz	r1, 800c44e <__lo0bits+0x2a>
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	2210      	movs	r2, #16
 800c44e:	b2d9      	uxtb	r1, r3
 800c450:	b909      	cbnz	r1, 800c456 <__lo0bits+0x32>
 800c452:	3208      	adds	r2, #8
 800c454:	0a1b      	lsrs	r3, r3, #8
 800c456:	0719      	lsls	r1, r3, #28
 800c458:	bf04      	itt	eq
 800c45a:	091b      	lsreq	r3, r3, #4
 800c45c:	3204      	addeq	r2, #4
 800c45e:	0799      	lsls	r1, r3, #30
 800c460:	bf04      	itt	eq
 800c462:	089b      	lsreq	r3, r3, #2
 800c464:	3202      	addeq	r2, #2
 800c466:	07d9      	lsls	r1, r3, #31
 800c468:	d403      	bmi.n	800c472 <__lo0bits+0x4e>
 800c46a:	085b      	lsrs	r3, r3, #1
 800c46c:	f102 0201 	add.w	r2, r2, #1
 800c470:	d003      	beq.n	800c47a <__lo0bits+0x56>
 800c472:	6003      	str	r3, [r0, #0]
 800c474:	e7e5      	b.n	800c442 <__lo0bits+0x1e>
 800c476:	2200      	movs	r2, #0
 800c478:	e7e3      	b.n	800c442 <__lo0bits+0x1e>
 800c47a:	2220      	movs	r2, #32
 800c47c:	e7e1      	b.n	800c442 <__lo0bits+0x1e>
	...

0800c480 <__i2b>:
 800c480:	b510      	push	{r4, lr}
 800c482:	460c      	mov	r4, r1
 800c484:	2101      	movs	r1, #1
 800c486:	f7ff febb 	bl	800c200 <_Balloc>
 800c48a:	4602      	mov	r2, r0
 800c48c:	b928      	cbnz	r0, 800c49a <__i2b+0x1a>
 800c48e:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <__i2b+0x24>)
 800c490:	4805      	ldr	r0, [pc, #20]	; (800c4a8 <__i2b+0x28>)
 800c492:	f240 1145 	movw	r1, #325	; 0x145
 800c496:	f001 f9af 	bl	800d7f8 <__assert_func>
 800c49a:	2301      	movs	r3, #1
 800c49c:	6144      	str	r4, [r0, #20]
 800c49e:	6103      	str	r3, [r0, #16]
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800e2e4 	.word	0x0800e2e4
 800c4a8:	0800e355 	.word	0x0800e355

0800c4ac <__multiply>:
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	4691      	mov	r9, r2
 800c4b2:	690a      	ldr	r2, [r1, #16]
 800c4b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	bfb8      	it	lt
 800c4bc:	460b      	movlt	r3, r1
 800c4be:	460c      	mov	r4, r1
 800c4c0:	bfbc      	itt	lt
 800c4c2:	464c      	movlt	r4, r9
 800c4c4:	4699      	movlt	r9, r3
 800c4c6:	6927      	ldr	r7, [r4, #16]
 800c4c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4cc:	68a3      	ldr	r3, [r4, #8]
 800c4ce:	6861      	ldr	r1, [r4, #4]
 800c4d0:	eb07 060a 	add.w	r6, r7, sl
 800c4d4:	42b3      	cmp	r3, r6
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	bfb8      	it	lt
 800c4da:	3101      	addlt	r1, #1
 800c4dc:	f7ff fe90 	bl	800c200 <_Balloc>
 800c4e0:	b930      	cbnz	r0, 800c4f0 <__multiply+0x44>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b44      	ldr	r3, [pc, #272]	; (800c5f8 <__multiply+0x14c>)
 800c4e6:	4845      	ldr	r0, [pc, #276]	; (800c5fc <__multiply+0x150>)
 800c4e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c4ec:	f001 f984 	bl	800d7f8 <__assert_func>
 800c4f0:	f100 0514 	add.w	r5, r0, #20
 800c4f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4f8:	462b      	mov	r3, r5
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4543      	cmp	r3, r8
 800c4fe:	d321      	bcc.n	800c544 <__multiply+0x98>
 800c500:	f104 0314 	add.w	r3, r4, #20
 800c504:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c508:	f109 0314 	add.w	r3, r9, #20
 800c50c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c510:	9202      	str	r2, [sp, #8]
 800c512:	1b3a      	subs	r2, r7, r4
 800c514:	3a15      	subs	r2, #21
 800c516:	f022 0203 	bic.w	r2, r2, #3
 800c51a:	3204      	adds	r2, #4
 800c51c:	f104 0115 	add.w	r1, r4, #21
 800c520:	428f      	cmp	r7, r1
 800c522:	bf38      	it	cc
 800c524:	2204      	movcc	r2, #4
 800c526:	9201      	str	r2, [sp, #4]
 800c528:	9a02      	ldr	r2, [sp, #8]
 800c52a:	9303      	str	r3, [sp, #12]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d80c      	bhi.n	800c54a <__multiply+0x9e>
 800c530:	2e00      	cmp	r6, #0
 800c532:	dd03      	ble.n	800c53c <__multiply+0x90>
 800c534:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d05b      	beq.n	800c5f4 <__multiply+0x148>
 800c53c:	6106      	str	r6, [r0, #16]
 800c53e:	b005      	add	sp, #20
 800c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c544:	f843 2b04 	str.w	r2, [r3], #4
 800c548:	e7d8      	b.n	800c4fc <__multiply+0x50>
 800c54a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c54e:	f1ba 0f00 	cmp.w	sl, #0
 800c552:	d024      	beq.n	800c59e <__multiply+0xf2>
 800c554:	f104 0e14 	add.w	lr, r4, #20
 800c558:	46a9      	mov	r9, r5
 800c55a:	f04f 0c00 	mov.w	ip, #0
 800c55e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c562:	f8d9 1000 	ldr.w	r1, [r9]
 800c566:	fa1f fb82 	uxth.w	fp, r2
 800c56a:	b289      	uxth	r1, r1
 800c56c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c570:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c574:	f8d9 2000 	ldr.w	r2, [r9]
 800c578:	4461      	add	r1, ip
 800c57a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c586:	b289      	uxth	r1, r1
 800c588:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c58c:	4577      	cmp	r7, lr
 800c58e:	f849 1b04 	str.w	r1, [r9], #4
 800c592:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c596:	d8e2      	bhi.n	800c55e <__multiply+0xb2>
 800c598:	9a01      	ldr	r2, [sp, #4]
 800c59a:	f845 c002 	str.w	ip, [r5, r2]
 800c59e:	9a03      	ldr	r2, [sp, #12]
 800c5a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	f1b9 0f00 	cmp.w	r9, #0
 800c5aa:	d021      	beq.n	800c5f0 <__multiply+0x144>
 800c5ac:	6829      	ldr	r1, [r5, #0]
 800c5ae:	f104 0c14 	add.w	ip, r4, #20
 800c5b2:	46ae      	mov	lr, r5
 800c5b4:	f04f 0a00 	mov.w	sl, #0
 800c5b8:	f8bc b000 	ldrh.w	fp, [ip]
 800c5bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5c0:	fb09 220b 	mla	r2, r9, fp, r2
 800c5c4:	4452      	add	r2, sl
 800c5c6:	b289      	uxth	r1, r1
 800c5c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5cc:	f84e 1b04 	str.w	r1, [lr], #4
 800c5d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c5dc:	fb09 110a 	mla	r1, r9, sl, r1
 800c5e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c5e4:	4567      	cmp	r7, ip
 800c5e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5ea:	d8e5      	bhi.n	800c5b8 <__multiply+0x10c>
 800c5ec:	9a01      	ldr	r2, [sp, #4]
 800c5ee:	50a9      	str	r1, [r5, r2]
 800c5f0:	3504      	adds	r5, #4
 800c5f2:	e799      	b.n	800c528 <__multiply+0x7c>
 800c5f4:	3e01      	subs	r6, #1
 800c5f6:	e79b      	b.n	800c530 <__multiply+0x84>
 800c5f8:	0800e2e4 	.word	0x0800e2e4
 800c5fc:	0800e355 	.word	0x0800e355

0800c600 <__pow5mult>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	4615      	mov	r5, r2
 800c606:	f012 0203 	ands.w	r2, r2, #3
 800c60a:	4606      	mov	r6, r0
 800c60c:	460f      	mov	r7, r1
 800c60e:	d007      	beq.n	800c620 <__pow5mult+0x20>
 800c610:	4c25      	ldr	r4, [pc, #148]	; (800c6a8 <__pow5mult+0xa8>)
 800c612:	3a01      	subs	r2, #1
 800c614:	2300      	movs	r3, #0
 800c616:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c61a:	f7ff fe53 	bl	800c2c4 <__multadd>
 800c61e:	4607      	mov	r7, r0
 800c620:	10ad      	asrs	r5, r5, #2
 800c622:	d03d      	beq.n	800c6a0 <__pow5mult+0xa0>
 800c624:	69f4      	ldr	r4, [r6, #28]
 800c626:	b97c      	cbnz	r4, 800c648 <__pow5mult+0x48>
 800c628:	2010      	movs	r0, #16
 800c62a:	f7fc fbd7 	bl	8008ddc <malloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	61f0      	str	r0, [r6, #28]
 800c632:	b928      	cbnz	r0, 800c640 <__pow5mult+0x40>
 800c634:	4b1d      	ldr	r3, [pc, #116]	; (800c6ac <__pow5mult+0xac>)
 800c636:	481e      	ldr	r0, [pc, #120]	; (800c6b0 <__pow5mult+0xb0>)
 800c638:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c63c:	f001 f8dc 	bl	800d7f8 <__assert_func>
 800c640:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c644:	6004      	str	r4, [r0, #0]
 800c646:	60c4      	str	r4, [r0, #12]
 800c648:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c64c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c650:	b94c      	cbnz	r4, 800c666 <__pow5mult+0x66>
 800c652:	f240 2171 	movw	r1, #625	; 0x271
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff12 	bl	800c480 <__i2b>
 800c65c:	2300      	movs	r3, #0
 800c65e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c662:	4604      	mov	r4, r0
 800c664:	6003      	str	r3, [r0, #0]
 800c666:	f04f 0900 	mov.w	r9, #0
 800c66a:	07eb      	lsls	r3, r5, #31
 800c66c:	d50a      	bpl.n	800c684 <__pow5mult+0x84>
 800c66e:	4639      	mov	r1, r7
 800c670:	4622      	mov	r2, r4
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff ff1a 	bl	800c4ac <__multiply>
 800c678:	4639      	mov	r1, r7
 800c67a:	4680      	mov	r8, r0
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7ff fdff 	bl	800c280 <_Bfree>
 800c682:	4647      	mov	r7, r8
 800c684:	106d      	asrs	r5, r5, #1
 800c686:	d00b      	beq.n	800c6a0 <__pow5mult+0xa0>
 800c688:	6820      	ldr	r0, [r4, #0]
 800c68a:	b938      	cbnz	r0, 800c69c <__pow5mult+0x9c>
 800c68c:	4622      	mov	r2, r4
 800c68e:	4621      	mov	r1, r4
 800c690:	4630      	mov	r0, r6
 800c692:	f7ff ff0b 	bl	800c4ac <__multiply>
 800c696:	6020      	str	r0, [r4, #0]
 800c698:	f8c0 9000 	str.w	r9, [r0]
 800c69c:	4604      	mov	r4, r0
 800c69e:	e7e4      	b.n	800c66a <__pow5mult+0x6a>
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6a6:	bf00      	nop
 800c6a8:	0800e4a0 	.word	0x0800e4a0
 800c6ac:	0800e275 	.word	0x0800e275
 800c6b0:	0800e355 	.word	0x0800e355

0800c6b4 <__lshift>:
 800c6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	6849      	ldr	r1, [r1, #4]
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6c2:	68a3      	ldr	r3, [r4, #8]
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	4691      	mov	r9, r2
 800c6c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6cc:	f108 0601 	add.w	r6, r8, #1
 800c6d0:	42b3      	cmp	r3, r6
 800c6d2:	db0b      	blt.n	800c6ec <__lshift+0x38>
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff fd93 	bl	800c200 <_Balloc>
 800c6da:	4605      	mov	r5, r0
 800c6dc:	b948      	cbnz	r0, 800c6f2 <__lshift+0x3e>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	4b28      	ldr	r3, [pc, #160]	; (800c784 <__lshift+0xd0>)
 800c6e2:	4829      	ldr	r0, [pc, #164]	; (800c788 <__lshift+0xd4>)
 800c6e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c6e8:	f001 f886 	bl	800d7f8 <__assert_func>
 800c6ec:	3101      	adds	r1, #1
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	e7ee      	b.n	800c6d0 <__lshift+0x1c>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f100 0114 	add.w	r1, r0, #20
 800c6f8:	f100 0210 	add.w	r2, r0, #16
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	4553      	cmp	r3, sl
 800c700:	db33      	blt.n	800c76a <__lshift+0xb6>
 800c702:	6920      	ldr	r0, [r4, #16]
 800c704:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c708:	f104 0314 	add.w	r3, r4, #20
 800c70c:	f019 091f 	ands.w	r9, r9, #31
 800c710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c714:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c718:	d02b      	beq.n	800c772 <__lshift+0xbe>
 800c71a:	f1c9 0e20 	rsb	lr, r9, #32
 800c71e:	468a      	mov	sl, r1
 800c720:	2200      	movs	r2, #0
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	fa00 f009 	lsl.w	r0, r0, r9
 800c728:	4310      	orrs	r0, r2
 800c72a:	f84a 0b04 	str.w	r0, [sl], #4
 800c72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c732:	459c      	cmp	ip, r3
 800c734:	fa22 f20e 	lsr.w	r2, r2, lr
 800c738:	d8f3      	bhi.n	800c722 <__lshift+0x6e>
 800c73a:	ebac 0304 	sub.w	r3, ip, r4
 800c73e:	3b15      	subs	r3, #21
 800c740:	f023 0303 	bic.w	r3, r3, #3
 800c744:	3304      	adds	r3, #4
 800c746:	f104 0015 	add.w	r0, r4, #21
 800c74a:	4584      	cmp	ip, r0
 800c74c:	bf38      	it	cc
 800c74e:	2304      	movcc	r3, #4
 800c750:	50ca      	str	r2, [r1, r3]
 800c752:	b10a      	cbz	r2, 800c758 <__lshift+0xa4>
 800c754:	f108 0602 	add.w	r6, r8, #2
 800c758:	3e01      	subs	r6, #1
 800c75a:	4638      	mov	r0, r7
 800c75c:	612e      	str	r6, [r5, #16]
 800c75e:	4621      	mov	r1, r4
 800c760:	f7ff fd8e 	bl	800c280 <_Bfree>
 800c764:	4628      	mov	r0, r5
 800c766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c76e:	3301      	adds	r3, #1
 800c770:	e7c5      	b.n	800c6fe <__lshift+0x4a>
 800c772:	3904      	subs	r1, #4
 800c774:	f853 2b04 	ldr.w	r2, [r3], #4
 800c778:	f841 2f04 	str.w	r2, [r1, #4]!
 800c77c:	459c      	cmp	ip, r3
 800c77e:	d8f9      	bhi.n	800c774 <__lshift+0xc0>
 800c780:	e7ea      	b.n	800c758 <__lshift+0xa4>
 800c782:	bf00      	nop
 800c784:	0800e2e4 	.word	0x0800e2e4
 800c788:	0800e355 	.word	0x0800e355

0800c78c <__mcmp>:
 800c78c:	b530      	push	{r4, r5, lr}
 800c78e:	6902      	ldr	r2, [r0, #16]
 800c790:	690c      	ldr	r4, [r1, #16]
 800c792:	1b12      	subs	r2, r2, r4
 800c794:	d10e      	bne.n	800c7b4 <__mcmp+0x28>
 800c796:	f100 0314 	add.w	r3, r0, #20
 800c79a:	3114      	adds	r1, #20
 800c79c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7ac:	42a5      	cmp	r5, r4
 800c7ae:	d003      	beq.n	800c7b8 <__mcmp+0x2c>
 800c7b0:	d305      	bcc.n	800c7be <__mcmp+0x32>
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	bd30      	pop	{r4, r5, pc}
 800c7b8:	4283      	cmp	r3, r0
 800c7ba:	d3f3      	bcc.n	800c7a4 <__mcmp+0x18>
 800c7bc:	e7fa      	b.n	800c7b4 <__mcmp+0x28>
 800c7be:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c2:	e7f7      	b.n	800c7b4 <__mcmp+0x28>

0800c7c4 <__mdiff>:
 800c7c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4690      	mov	r8, r2
 800c7d2:	f7ff ffdb 	bl	800c78c <__mcmp>
 800c7d6:	1e05      	subs	r5, r0, #0
 800c7d8:	d110      	bne.n	800c7fc <__mdiff+0x38>
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff fd0f 	bl	800c200 <_Balloc>
 800c7e2:	b930      	cbnz	r0, 800c7f2 <__mdiff+0x2e>
 800c7e4:	4b3a      	ldr	r3, [pc, #232]	; (800c8d0 <__mdiff+0x10c>)
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	f240 2137 	movw	r1, #567	; 0x237
 800c7ec:	4839      	ldr	r0, [pc, #228]	; (800c8d4 <__mdiff+0x110>)
 800c7ee:	f001 f803 	bl	800d7f8 <__assert_func>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	bfa4      	itt	ge
 800c7fe:	4643      	movge	r3, r8
 800c800:	46a0      	movge	r8, r4
 800c802:	4630      	mov	r0, r6
 800c804:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c808:	bfa6      	itte	ge
 800c80a:	461c      	movge	r4, r3
 800c80c:	2500      	movge	r5, #0
 800c80e:	2501      	movlt	r5, #1
 800c810:	f7ff fcf6 	bl	800c200 <_Balloc>
 800c814:	b920      	cbnz	r0, 800c820 <__mdiff+0x5c>
 800c816:	4b2e      	ldr	r3, [pc, #184]	; (800c8d0 <__mdiff+0x10c>)
 800c818:	4602      	mov	r2, r0
 800c81a:	f240 2145 	movw	r1, #581	; 0x245
 800c81e:	e7e5      	b.n	800c7ec <__mdiff+0x28>
 800c820:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c824:	6926      	ldr	r6, [r4, #16]
 800c826:	60c5      	str	r5, [r0, #12]
 800c828:	f104 0914 	add.w	r9, r4, #20
 800c82c:	f108 0514 	add.w	r5, r8, #20
 800c830:	f100 0e14 	add.w	lr, r0, #20
 800c834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c83c:	f108 0210 	add.w	r2, r8, #16
 800c840:	46f2      	mov	sl, lr
 800c842:	2100      	movs	r1, #0
 800c844:	f859 3b04 	ldr.w	r3, [r9], #4
 800c848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c84c:	fa11 f88b 	uxtah	r8, r1, fp
 800c850:	b299      	uxth	r1, r3
 800c852:	0c1b      	lsrs	r3, r3, #16
 800c854:	eba8 0801 	sub.w	r8, r8, r1
 800c858:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c85c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c860:	fa1f f888 	uxth.w	r8, r8
 800c864:	1419      	asrs	r1, r3, #16
 800c866:	454e      	cmp	r6, r9
 800c868:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c86c:	f84a 3b04 	str.w	r3, [sl], #4
 800c870:	d8e8      	bhi.n	800c844 <__mdiff+0x80>
 800c872:	1b33      	subs	r3, r6, r4
 800c874:	3b15      	subs	r3, #21
 800c876:	f023 0303 	bic.w	r3, r3, #3
 800c87a:	3304      	adds	r3, #4
 800c87c:	3415      	adds	r4, #21
 800c87e:	42a6      	cmp	r6, r4
 800c880:	bf38      	it	cc
 800c882:	2304      	movcc	r3, #4
 800c884:	441d      	add	r5, r3
 800c886:	4473      	add	r3, lr
 800c888:	469e      	mov	lr, r3
 800c88a:	462e      	mov	r6, r5
 800c88c:	4566      	cmp	r6, ip
 800c88e:	d30e      	bcc.n	800c8ae <__mdiff+0xea>
 800c890:	f10c 0203 	add.w	r2, ip, #3
 800c894:	1b52      	subs	r2, r2, r5
 800c896:	f022 0203 	bic.w	r2, r2, #3
 800c89a:	3d03      	subs	r5, #3
 800c89c:	45ac      	cmp	ip, r5
 800c89e:	bf38      	it	cc
 800c8a0:	2200      	movcc	r2, #0
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8a8:	b17a      	cbz	r2, 800c8ca <__mdiff+0x106>
 800c8aa:	6107      	str	r7, [r0, #16]
 800c8ac:	e7a4      	b.n	800c7f8 <__mdiff+0x34>
 800c8ae:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8b2:	fa11 f288 	uxtah	r2, r1, r8
 800c8b6:	1414      	asrs	r4, r2, #16
 800c8b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8bc:	b292      	uxth	r2, r2
 800c8be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8c2:	f84e 2b04 	str.w	r2, [lr], #4
 800c8c6:	1421      	asrs	r1, r4, #16
 800c8c8:	e7e0      	b.n	800c88c <__mdiff+0xc8>
 800c8ca:	3f01      	subs	r7, #1
 800c8cc:	e7ea      	b.n	800c8a4 <__mdiff+0xe0>
 800c8ce:	bf00      	nop
 800c8d0:	0800e2e4 	.word	0x0800e2e4
 800c8d4:	0800e355 	.word	0x0800e355

0800c8d8 <__ulp>:
 800c8d8:	b082      	sub	sp, #8
 800c8da:	ed8d 0b00 	vstr	d0, [sp]
 800c8de:	9a01      	ldr	r2, [sp, #4]
 800c8e0:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <__ulp+0x48>)
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	dc08      	bgt.n	800c8fe <__ulp+0x26>
 800c8ec:	425b      	negs	r3, r3
 800c8ee:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c8f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8f6:	da04      	bge.n	800c902 <__ulp+0x2a>
 800c8f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c8fc:	4113      	asrs	r3, r2
 800c8fe:	2200      	movs	r2, #0
 800c900:	e008      	b.n	800c914 <__ulp+0x3c>
 800c902:	f1a2 0314 	sub.w	r3, r2, #20
 800c906:	2b1e      	cmp	r3, #30
 800c908:	bfda      	itte	le
 800c90a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c90e:	40da      	lsrle	r2, r3
 800c910:	2201      	movgt	r2, #1
 800c912:	2300      	movs	r3, #0
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	ec41 0b10 	vmov	d0, r0, r1
 800c91c:	b002      	add	sp, #8
 800c91e:	4770      	bx	lr
 800c920:	7ff00000 	.word	0x7ff00000

0800c924 <__b2d>:
 800c924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c928:	6906      	ldr	r6, [r0, #16]
 800c92a:	f100 0814 	add.w	r8, r0, #20
 800c92e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c932:	1f37      	subs	r7, r6, #4
 800c934:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c938:	4610      	mov	r0, r2
 800c93a:	f7ff fd53 	bl	800c3e4 <__hi0bits>
 800c93e:	f1c0 0320 	rsb	r3, r0, #32
 800c942:	280a      	cmp	r0, #10
 800c944:	600b      	str	r3, [r1, #0]
 800c946:	491b      	ldr	r1, [pc, #108]	; (800c9b4 <__b2d+0x90>)
 800c948:	dc15      	bgt.n	800c976 <__b2d+0x52>
 800c94a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c94e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c952:	45b8      	cmp	r8, r7
 800c954:	ea43 0501 	orr.w	r5, r3, r1
 800c958:	bf34      	ite	cc
 800c95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c95e:	2300      	movcs	r3, #0
 800c960:	3015      	adds	r0, #21
 800c962:	fa02 f000 	lsl.w	r0, r2, r0
 800c966:	fa23 f30c 	lsr.w	r3, r3, ip
 800c96a:	4303      	orrs	r3, r0
 800c96c:	461c      	mov	r4, r3
 800c96e:	ec45 4b10 	vmov	d0, r4, r5
 800c972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c976:	45b8      	cmp	r8, r7
 800c978:	bf3a      	itte	cc
 800c97a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c97e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c982:	2300      	movcs	r3, #0
 800c984:	380b      	subs	r0, #11
 800c986:	d012      	beq.n	800c9ae <__b2d+0x8a>
 800c988:	f1c0 0120 	rsb	r1, r0, #32
 800c98c:	fa23 f401 	lsr.w	r4, r3, r1
 800c990:	4082      	lsls	r2, r0
 800c992:	4322      	orrs	r2, r4
 800c994:	4547      	cmp	r7, r8
 800c996:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c99a:	bf8c      	ite	hi
 800c99c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9a0:	2200      	movls	r2, #0
 800c9a2:	4083      	lsls	r3, r0
 800c9a4:	40ca      	lsrs	r2, r1
 800c9a6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	e7de      	b.n	800c96c <__b2d+0x48>
 800c9ae:	ea42 0501 	orr.w	r5, r2, r1
 800c9b2:	e7db      	b.n	800c96c <__b2d+0x48>
 800c9b4:	3ff00000 	.word	0x3ff00000

0800c9b8 <__d2b>:
 800c9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9bc:	460f      	mov	r7, r1
 800c9be:	2101      	movs	r1, #1
 800c9c0:	ec59 8b10 	vmov	r8, r9, d0
 800c9c4:	4616      	mov	r6, r2
 800c9c6:	f7ff fc1b 	bl	800c200 <_Balloc>
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	b930      	cbnz	r0, 800c9dc <__d2b+0x24>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	4b24      	ldr	r3, [pc, #144]	; (800ca64 <__d2b+0xac>)
 800c9d2:	4825      	ldr	r0, [pc, #148]	; (800ca68 <__d2b+0xb0>)
 800c9d4:	f240 310f 	movw	r1, #783	; 0x30f
 800c9d8:	f000 ff0e 	bl	800d7f8 <__assert_func>
 800c9dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e4:	bb2d      	cbnz	r5, 800ca32 <__d2b+0x7a>
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	f1b8 0300 	subs.w	r3, r8, #0
 800c9ec:	d026      	beq.n	800ca3c <__d2b+0x84>
 800c9ee:	4668      	mov	r0, sp
 800c9f0:	9300      	str	r3, [sp, #0]
 800c9f2:	f7ff fd17 	bl	800c424 <__lo0bits>
 800c9f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9fa:	b1e8      	cbz	r0, 800ca38 <__d2b+0x80>
 800c9fc:	f1c0 0320 	rsb	r3, r0, #32
 800ca00:	fa02 f303 	lsl.w	r3, r2, r3
 800ca04:	430b      	orrs	r3, r1
 800ca06:	40c2      	lsrs	r2, r0
 800ca08:	6163      	str	r3, [r4, #20]
 800ca0a:	9201      	str	r2, [sp, #4]
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	61a3      	str	r3, [r4, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	bf14      	ite	ne
 800ca14:	2202      	movne	r2, #2
 800ca16:	2201      	moveq	r2, #1
 800ca18:	6122      	str	r2, [r4, #16]
 800ca1a:	b1bd      	cbz	r5, 800ca4c <__d2b+0x94>
 800ca1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca20:	4405      	add	r5, r0
 800ca22:	603d      	str	r5, [r7, #0]
 800ca24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca28:	6030      	str	r0, [r6, #0]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	b003      	add	sp, #12
 800ca2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca36:	e7d6      	b.n	800c9e6 <__d2b+0x2e>
 800ca38:	6161      	str	r1, [r4, #20]
 800ca3a:	e7e7      	b.n	800ca0c <__d2b+0x54>
 800ca3c:	a801      	add	r0, sp, #4
 800ca3e:	f7ff fcf1 	bl	800c424 <__lo0bits>
 800ca42:	9b01      	ldr	r3, [sp, #4]
 800ca44:	6163      	str	r3, [r4, #20]
 800ca46:	3020      	adds	r0, #32
 800ca48:	2201      	movs	r2, #1
 800ca4a:	e7e5      	b.n	800ca18 <__d2b+0x60>
 800ca4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca54:	6038      	str	r0, [r7, #0]
 800ca56:	6918      	ldr	r0, [r3, #16]
 800ca58:	f7ff fcc4 	bl	800c3e4 <__hi0bits>
 800ca5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca60:	e7e2      	b.n	800ca28 <__d2b+0x70>
 800ca62:	bf00      	nop
 800ca64:	0800e2e4 	.word	0x0800e2e4
 800ca68:	0800e355 	.word	0x0800e355

0800ca6c <__ratio>:
 800ca6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca70:	4688      	mov	r8, r1
 800ca72:	4669      	mov	r1, sp
 800ca74:	4681      	mov	r9, r0
 800ca76:	f7ff ff55 	bl	800c924 <__b2d>
 800ca7a:	a901      	add	r1, sp, #4
 800ca7c:	4640      	mov	r0, r8
 800ca7e:	ec55 4b10 	vmov	r4, r5, d0
 800ca82:	f7ff ff4f 	bl	800c924 <__b2d>
 800ca86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca8e:	eba3 0c02 	sub.w	ip, r3, r2
 800ca92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ca96:	1a9b      	subs	r3, r3, r2
 800ca98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ca9c:	ec51 0b10 	vmov	r0, r1, d0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bfd6      	itet	le
 800caa4:	460a      	movle	r2, r1
 800caa6:	462a      	movgt	r2, r5
 800caa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800caac:	468b      	mov	fp, r1
 800caae:	462f      	mov	r7, r5
 800cab0:	bfd4      	ite	le
 800cab2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cab6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800caba:	4620      	mov	r0, r4
 800cabc:	ee10 2a10 	vmov	r2, s0
 800cac0:	465b      	mov	r3, fp
 800cac2:	4639      	mov	r1, r7
 800cac4:	f7f3 fec2 	bl	800084c <__aeabi_ddiv>
 800cac8:	ec41 0b10 	vmov	d0, r0, r1
 800cacc:	b003      	add	sp, #12
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cad2 <__copybits>:
 800cad2:	3901      	subs	r1, #1
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	1149      	asrs	r1, r1, #5
 800cad8:	6914      	ldr	r4, [r2, #16]
 800cada:	3101      	adds	r1, #1
 800cadc:	f102 0314 	add.w	r3, r2, #20
 800cae0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cae4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cae8:	1f05      	subs	r5, r0, #4
 800caea:	42a3      	cmp	r3, r4
 800caec:	d30c      	bcc.n	800cb08 <__copybits+0x36>
 800caee:	1aa3      	subs	r3, r4, r2
 800caf0:	3b11      	subs	r3, #17
 800caf2:	f023 0303 	bic.w	r3, r3, #3
 800caf6:	3211      	adds	r2, #17
 800caf8:	42a2      	cmp	r2, r4
 800cafa:	bf88      	it	hi
 800cafc:	2300      	movhi	r3, #0
 800cafe:	4418      	add	r0, r3
 800cb00:	2300      	movs	r3, #0
 800cb02:	4288      	cmp	r0, r1
 800cb04:	d305      	bcc.n	800cb12 <__copybits+0x40>
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb10:	e7eb      	b.n	800caea <__copybits+0x18>
 800cb12:	f840 3b04 	str.w	r3, [r0], #4
 800cb16:	e7f4      	b.n	800cb02 <__copybits+0x30>

0800cb18 <__any_on>:
 800cb18:	f100 0214 	add.w	r2, r0, #20
 800cb1c:	6900      	ldr	r0, [r0, #16]
 800cb1e:	114b      	asrs	r3, r1, #5
 800cb20:	4298      	cmp	r0, r3
 800cb22:	b510      	push	{r4, lr}
 800cb24:	db11      	blt.n	800cb4a <__any_on+0x32>
 800cb26:	dd0a      	ble.n	800cb3e <__any_on+0x26>
 800cb28:	f011 011f 	ands.w	r1, r1, #31
 800cb2c:	d007      	beq.n	800cb3e <__any_on+0x26>
 800cb2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb32:	fa24 f001 	lsr.w	r0, r4, r1
 800cb36:	fa00 f101 	lsl.w	r1, r0, r1
 800cb3a:	428c      	cmp	r4, r1
 800cb3c:	d10b      	bne.n	800cb56 <__any_on+0x3e>
 800cb3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d803      	bhi.n	800cb4e <__any_on+0x36>
 800cb46:	2000      	movs	r0, #0
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	e7f7      	b.n	800cb3e <__any_on+0x26>
 800cb4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb52:	2900      	cmp	r1, #0
 800cb54:	d0f5      	beq.n	800cb42 <__any_on+0x2a>
 800cb56:	2001      	movs	r0, #1
 800cb58:	e7f6      	b.n	800cb48 <__any_on+0x30>

0800cb5a <_malloc_usable_size_r>:
 800cb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb5e:	1f18      	subs	r0, r3, #4
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfbc      	itt	lt
 800cb64:	580b      	ldrlt	r3, [r1, r0]
 800cb66:	18c0      	addlt	r0, r0, r3
 800cb68:	4770      	bx	lr
	...

0800cb6c <_strtol_l.constprop.0>:
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb72:	d001      	beq.n	800cb78 <_strtol_l.constprop.0+0xc>
 800cb74:	2b24      	cmp	r3, #36	; 0x24
 800cb76:	d906      	bls.n	800cb86 <_strtol_l.constprop.0+0x1a>
 800cb78:	f7fe f8c6 	bl	800ad08 <__errno>
 800cb7c:	2316      	movs	r3, #22
 800cb7e:	6003      	str	r3, [r0, #0]
 800cb80:	2000      	movs	r0, #0
 800cb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc6c <_strtol_l.constprop.0+0x100>
 800cb8a:	460d      	mov	r5, r1
 800cb8c:	462e      	mov	r6, r5
 800cb8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cb96:	f017 0708 	ands.w	r7, r7, #8
 800cb9a:	d1f7      	bne.n	800cb8c <_strtol_l.constprop.0+0x20>
 800cb9c:	2c2d      	cmp	r4, #45	; 0x2d
 800cb9e:	d132      	bne.n	800cc06 <_strtol_l.constprop.0+0x9a>
 800cba0:	782c      	ldrb	r4, [r5, #0]
 800cba2:	2701      	movs	r7, #1
 800cba4:	1cb5      	adds	r5, r6, #2
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d05b      	beq.n	800cc62 <_strtol_l.constprop.0+0xf6>
 800cbaa:	2b10      	cmp	r3, #16
 800cbac:	d109      	bne.n	800cbc2 <_strtol_l.constprop.0+0x56>
 800cbae:	2c30      	cmp	r4, #48	; 0x30
 800cbb0:	d107      	bne.n	800cbc2 <_strtol_l.constprop.0+0x56>
 800cbb2:	782c      	ldrb	r4, [r5, #0]
 800cbb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cbb8:	2c58      	cmp	r4, #88	; 0x58
 800cbba:	d14d      	bne.n	800cc58 <_strtol_l.constprop.0+0xec>
 800cbbc:	786c      	ldrb	r4, [r5, #1]
 800cbbe:	2310      	movs	r3, #16
 800cbc0:	3502      	adds	r5, #2
 800cbc2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cbc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbca:	f04f 0e00 	mov.w	lr, #0
 800cbce:	fbb8 f9f3 	udiv	r9, r8, r3
 800cbd2:	4676      	mov	r6, lr
 800cbd4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cbd8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cbdc:	f1bc 0f09 	cmp.w	ip, #9
 800cbe0:	d816      	bhi.n	800cc10 <_strtol_l.constprop.0+0xa4>
 800cbe2:	4664      	mov	r4, ip
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	dd24      	ble.n	800cc32 <_strtol_l.constprop.0+0xc6>
 800cbe8:	f1be 3fff 	cmp.w	lr, #4294967295
 800cbec:	d008      	beq.n	800cc00 <_strtol_l.constprop.0+0x94>
 800cbee:	45b1      	cmp	r9, r6
 800cbf0:	d31c      	bcc.n	800cc2c <_strtol_l.constprop.0+0xc0>
 800cbf2:	d101      	bne.n	800cbf8 <_strtol_l.constprop.0+0x8c>
 800cbf4:	45a2      	cmp	sl, r4
 800cbf6:	db19      	blt.n	800cc2c <_strtol_l.constprop.0+0xc0>
 800cbf8:	fb06 4603 	mla	r6, r6, r3, r4
 800cbfc:	f04f 0e01 	mov.w	lr, #1
 800cc00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc04:	e7e8      	b.n	800cbd8 <_strtol_l.constprop.0+0x6c>
 800cc06:	2c2b      	cmp	r4, #43	; 0x2b
 800cc08:	bf04      	itt	eq
 800cc0a:	782c      	ldrbeq	r4, [r5, #0]
 800cc0c:	1cb5      	addeq	r5, r6, #2
 800cc0e:	e7ca      	b.n	800cba6 <_strtol_l.constprop.0+0x3a>
 800cc10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cc14:	f1bc 0f19 	cmp.w	ip, #25
 800cc18:	d801      	bhi.n	800cc1e <_strtol_l.constprop.0+0xb2>
 800cc1a:	3c37      	subs	r4, #55	; 0x37
 800cc1c:	e7e2      	b.n	800cbe4 <_strtol_l.constprop.0+0x78>
 800cc1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cc22:	f1bc 0f19 	cmp.w	ip, #25
 800cc26:	d804      	bhi.n	800cc32 <_strtol_l.constprop.0+0xc6>
 800cc28:	3c57      	subs	r4, #87	; 0x57
 800cc2a:	e7db      	b.n	800cbe4 <_strtol_l.constprop.0+0x78>
 800cc2c:	f04f 3eff 	mov.w	lr, #4294967295
 800cc30:	e7e6      	b.n	800cc00 <_strtol_l.constprop.0+0x94>
 800cc32:	f1be 3fff 	cmp.w	lr, #4294967295
 800cc36:	d105      	bne.n	800cc44 <_strtol_l.constprop.0+0xd8>
 800cc38:	2322      	movs	r3, #34	; 0x22
 800cc3a:	6003      	str	r3, [r0, #0]
 800cc3c:	4646      	mov	r6, r8
 800cc3e:	b942      	cbnz	r2, 800cc52 <_strtol_l.constprop.0+0xe6>
 800cc40:	4630      	mov	r0, r6
 800cc42:	e79e      	b.n	800cb82 <_strtol_l.constprop.0+0x16>
 800cc44:	b107      	cbz	r7, 800cc48 <_strtol_l.constprop.0+0xdc>
 800cc46:	4276      	negs	r6, r6
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	d0f9      	beq.n	800cc40 <_strtol_l.constprop.0+0xd4>
 800cc4c:	f1be 0f00 	cmp.w	lr, #0
 800cc50:	d000      	beq.n	800cc54 <_strtol_l.constprop.0+0xe8>
 800cc52:	1e69      	subs	r1, r5, #1
 800cc54:	6011      	str	r1, [r2, #0]
 800cc56:	e7f3      	b.n	800cc40 <_strtol_l.constprop.0+0xd4>
 800cc58:	2430      	movs	r4, #48	; 0x30
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1b1      	bne.n	800cbc2 <_strtol_l.constprop.0+0x56>
 800cc5e:	2308      	movs	r3, #8
 800cc60:	e7af      	b.n	800cbc2 <_strtol_l.constprop.0+0x56>
 800cc62:	2c30      	cmp	r4, #48	; 0x30
 800cc64:	d0a5      	beq.n	800cbb2 <_strtol_l.constprop.0+0x46>
 800cc66:	230a      	movs	r3, #10
 800cc68:	e7ab      	b.n	800cbc2 <_strtol_l.constprop.0+0x56>
 800cc6a:	bf00      	nop
 800cc6c:	0800e129 	.word	0x0800e129

0800cc70 <_strtol_r>:
 800cc70:	f7ff bf7c 	b.w	800cb6c <_strtol_l.constprop.0>

0800cc74 <__ascii_wctomb>:
 800cc74:	b149      	cbz	r1, 800cc8a <__ascii_wctomb+0x16>
 800cc76:	2aff      	cmp	r2, #255	; 0xff
 800cc78:	bf85      	ittet	hi
 800cc7a:	238a      	movhi	r3, #138	; 0x8a
 800cc7c:	6003      	strhi	r3, [r0, #0]
 800cc7e:	700a      	strbls	r2, [r1, #0]
 800cc80:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc84:	bf98      	it	ls
 800cc86:	2001      	movls	r0, #1
 800cc88:	4770      	bx	lr
 800cc8a:	4608      	mov	r0, r1
 800cc8c:	4770      	bx	lr

0800cc8e <__ssputs_r>:
 800cc8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc92:	688e      	ldr	r6, [r1, #8]
 800cc94:	461f      	mov	r7, r3
 800cc96:	42be      	cmp	r6, r7
 800cc98:	680b      	ldr	r3, [r1, #0]
 800cc9a:	4682      	mov	sl, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	4690      	mov	r8, r2
 800cca0:	d82c      	bhi.n	800ccfc <__ssputs_r+0x6e>
 800cca2:	898a      	ldrh	r2, [r1, #12]
 800cca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cca8:	d026      	beq.n	800ccf8 <__ssputs_r+0x6a>
 800ccaa:	6965      	ldr	r5, [r4, #20]
 800ccac:	6909      	ldr	r1, [r1, #16]
 800ccae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccb2:	eba3 0901 	sub.w	r9, r3, r1
 800ccb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccba:	1c7b      	adds	r3, r7, #1
 800ccbc:	444b      	add	r3, r9
 800ccbe:	106d      	asrs	r5, r5, #1
 800ccc0:	429d      	cmp	r5, r3
 800ccc2:	bf38      	it	cc
 800ccc4:	461d      	movcc	r5, r3
 800ccc6:	0553      	lsls	r3, r2, #21
 800ccc8:	d527      	bpl.n	800cd1a <__ssputs_r+0x8c>
 800ccca:	4629      	mov	r1, r5
 800cccc:	f7fc f8ae 	bl	8008e2c <_malloc_r>
 800ccd0:	4606      	mov	r6, r0
 800ccd2:	b360      	cbz	r0, 800cd2e <__ssputs_r+0xa0>
 800ccd4:	6921      	ldr	r1, [r4, #16]
 800ccd6:	464a      	mov	r2, r9
 800ccd8:	f7fe f843 	bl	800ad62 <memcpy>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce6:	81a3      	strh	r3, [r4, #12]
 800cce8:	6126      	str	r6, [r4, #16]
 800ccea:	6165      	str	r5, [r4, #20]
 800ccec:	444e      	add	r6, r9
 800ccee:	eba5 0509 	sub.w	r5, r5, r9
 800ccf2:	6026      	str	r6, [r4, #0]
 800ccf4:	60a5      	str	r5, [r4, #8]
 800ccf6:	463e      	mov	r6, r7
 800ccf8:	42be      	cmp	r6, r7
 800ccfa:	d900      	bls.n	800ccfe <__ssputs_r+0x70>
 800ccfc:	463e      	mov	r6, r7
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	4632      	mov	r2, r6
 800cd02:	4641      	mov	r1, r8
 800cd04:	f000 fd5d 	bl	800d7c2 <memmove>
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	1b9b      	subs	r3, r3, r6
 800cd0c:	60a3      	str	r3, [r4, #8]
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	4433      	add	r3, r6
 800cd12:	6023      	str	r3, [r4, #0]
 800cd14:	2000      	movs	r0, #0
 800cd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd1a:	462a      	mov	r2, r5
 800cd1c:	f7fc f912 	bl	8008f44 <_realloc_r>
 800cd20:	4606      	mov	r6, r0
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d1e0      	bne.n	800cce8 <__ssputs_r+0x5a>
 800cd26:	6921      	ldr	r1, [r4, #16]
 800cd28:	4650      	mov	r0, sl
 800cd2a:	f7fe feb3 	bl	800ba94 <_free_r>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	f8ca 3000 	str.w	r3, [sl]
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	e7e9      	b.n	800cd16 <__ssputs_r+0x88>
	...

0800cd44 <_svfiprintf_r>:
 800cd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd48:	4698      	mov	r8, r3
 800cd4a:	898b      	ldrh	r3, [r1, #12]
 800cd4c:	061b      	lsls	r3, r3, #24
 800cd4e:	b09d      	sub	sp, #116	; 0x74
 800cd50:	4607      	mov	r7, r0
 800cd52:	460d      	mov	r5, r1
 800cd54:	4614      	mov	r4, r2
 800cd56:	d50e      	bpl.n	800cd76 <_svfiprintf_r+0x32>
 800cd58:	690b      	ldr	r3, [r1, #16]
 800cd5a:	b963      	cbnz	r3, 800cd76 <_svfiprintf_r+0x32>
 800cd5c:	2140      	movs	r1, #64	; 0x40
 800cd5e:	f7fc f865 	bl	8008e2c <_malloc_r>
 800cd62:	6028      	str	r0, [r5, #0]
 800cd64:	6128      	str	r0, [r5, #16]
 800cd66:	b920      	cbnz	r0, 800cd72 <_svfiprintf_r+0x2e>
 800cd68:	230c      	movs	r3, #12
 800cd6a:	603b      	str	r3, [r7, #0]
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd70:	e0d0      	b.n	800cf14 <_svfiprintf_r+0x1d0>
 800cd72:	2340      	movs	r3, #64	; 0x40
 800cd74:	616b      	str	r3, [r5, #20]
 800cd76:	2300      	movs	r3, #0
 800cd78:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7a:	2320      	movs	r3, #32
 800cd7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd80:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd84:	2330      	movs	r3, #48	; 0x30
 800cd86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf2c <_svfiprintf_r+0x1e8>
 800cd8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd8e:	f04f 0901 	mov.w	r9, #1
 800cd92:	4623      	mov	r3, r4
 800cd94:	469a      	mov	sl, r3
 800cd96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd9a:	b10a      	cbz	r2, 800cda0 <_svfiprintf_r+0x5c>
 800cd9c:	2a25      	cmp	r2, #37	; 0x25
 800cd9e:	d1f9      	bne.n	800cd94 <_svfiprintf_r+0x50>
 800cda0:	ebba 0b04 	subs.w	fp, sl, r4
 800cda4:	d00b      	beq.n	800cdbe <_svfiprintf_r+0x7a>
 800cda6:	465b      	mov	r3, fp
 800cda8:	4622      	mov	r2, r4
 800cdaa:	4629      	mov	r1, r5
 800cdac:	4638      	mov	r0, r7
 800cdae:	f7ff ff6e 	bl	800cc8e <__ssputs_r>
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	f000 80a9 	beq.w	800cf0a <_svfiprintf_r+0x1c6>
 800cdb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdba:	445a      	add	r2, fp
 800cdbc:	9209      	str	r2, [sp, #36]	; 0x24
 800cdbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 80a1 	beq.w	800cf0a <_svfiprintf_r+0x1c6>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	f04f 32ff 	mov.w	r2, #4294967295
 800cdce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdd2:	f10a 0a01 	add.w	sl, sl, #1
 800cdd6:	9304      	str	r3, [sp, #16]
 800cdd8:	9307      	str	r3, [sp, #28]
 800cdda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdde:	931a      	str	r3, [sp, #104]	; 0x68
 800cde0:	4654      	mov	r4, sl
 800cde2:	2205      	movs	r2, #5
 800cde4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cde8:	4850      	ldr	r0, [pc, #320]	; (800cf2c <_svfiprintf_r+0x1e8>)
 800cdea:	f7f3 f9f1 	bl	80001d0 <memchr>
 800cdee:	9a04      	ldr	r2, [sp, #16]
 800cdf0:	b9d8      	cbnz	r0, 800ce2a <_svfiprintf_r+0xe6>
 800cdf2:	06d0      	lsls	r0, r2, #27
 800cdf4:	bf44      	itt	mi
 800cdf6:	2320      	movmi	r3, #32
 800cdf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdfc:	0711      	lsls	r1, r2, #28
 800cdfe:	bf44      	itt	mi
 800ce00:	232b      	movmi	r3, #43	; 0x2b
 800ce02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce06:	f89a 3000 	ldrb.w	r3, [sl]
 800ce0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce0c:	d015      	beq.n	800ce3a <_svfiprintf_r+0xf6>
 800ce0e:	9a07      	ldr	r2, [sp, #28]
 800ce10:	4654      	mov	r4, sl
 800ce12:	2000      	movs	r0, #0
 800ce14:	f04f 0c0a 	mov.w	ip, #10
 800ce18:	4621      	mov	r1, r4
 800ce1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce1e:	3b30      	subs	r3, #48	; 0x30
 800ce20:	2b09      	cmp	r3, #9
 800ce22:	d94d      	bls.n	800cec0 <_svfiprintf_r+0x17c>
 800ce24:	b1b0      	cbz	r0, 800ce54 <_svfiprintf_r+0x110>
 800ce26:	9207      	str	r2, [sp, #28]
 800ce28:	e014      	b.n	800ce54 <_svfiprintf_r+0x110>
 800ce2a:	eba0 0308 	sub.w	r3, r0, r8
 800ce2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce32:	4313      	orrs	r3, r2
 800ce34:	9304      	str	r3, [sp, #16]
 800ce36:	46a2      	mov	sl, r4
 800ce38:	e7d2      	b.n	800cde0 <_svfiprintf_r+0x9c>
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	1d19      	adds	r1, r3, #4
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	9103      	str	r1, [sp, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	bfbb      	ittet	lt
 800ce46:	425b      	neglt	r3, r3
 800ce48:	f042 0202 	orrlt.w	r2, r2, #2
 800ce4c:	9307      	strge	r3, [sp, #28]
 800ce4e:	9307      	strlt	r3, [sp, #28]
 800ce50:	bfb8      	it	lt
 800ce52:	9204      	strlt	r2, [sp, #16]
 800ce54:	7823      	ldrb	r3, [r4, #0]
 800ce56:	2b2e      	cmp	r3, #46	; 0x2e
 800ce58:	d10c      	bne.n	800ce74 <_svfiprintf_r+0x130>
 800ce5a:	7863      	ldrb	r3, [r4, #1]
 800ce5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5e:	d134      	bne.n	800ceca <_svfiprintf_r+0x186>
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	1d1a      	adds	r2, r3, #4
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	9203      	str	r2, [sp, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bfb8      	it	lt
 800ce6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce70:	3402      	adds	r4, #2
 800ce72:	9305      	str	r3, [sp, #20]
 800ce74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cf3c <_svfiprintf_r+0x1f8>
 800ce78:	7821      	ldrb	r1, [r4, #0]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	4650      	mov	r0, sl
 800ce7e:	f7f3 f9a7 	bl	80001d0 <memchr>
 800ce82:	b138      	cbz	r0, 800ce94 <_svfiprintf_r+0x150>
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	eba0 000a 	sub.w	r0, r0, sl
 800ce8a:	2240      	movs	r2, #64	; 0x40
 800ce8c:	4082      	lsls	r2, r0
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	3401      	adds	r4, #1
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce98:	4825      	ldr	r0, [pc, #148]	; (800cf30 <_svfiprintf_r+0x1ec>)
 800ce9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce9e:	2206      	movs	r2, #6
 800cea0:	f7f3 f996 	bl	80001d0 <memchr>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d038      	beq.n	800cf1a <_svfiprintf_r+0x1d6>
 800cea8:	4b22      	ldr	r3, [pc, #136]	; (800cf34 <_svfiprintf_r+0x1f0>)
 800ceaa:	bb1b      	cbnz	r3, 800cef4 <_svfiprintf_r+0x1b0>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	3307      	adds	r3, #7
 800ceb0:	f023 0307 	bic.w	r3, r3, #7
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	9303      	str	r3, [sp, #12]
 800ceb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceba:	4433      	add	r3, r6
 800cebc:	9309      	str	r3, [sp, #36]	; 0x24
 800cebe:	e768      	b.n	800cd92 <_svfiprintf_r+0x4e>
 800cec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cec4:	460c      	mov	r4, r1
 800cec6:	2001      	movs	r0, #1
 800cec8:	e7a6      	b.n	800ce18 <_svfiprintf_r+0xd4>
 800ceca:	2300      	movs	r3, #0
 800cecc:	3401      	adds	r4, #1
 800cece:	9305      	str	r3, [sp, #20]
 800ced0:	4619      	mov	r1, r3
 800ced2:	f04f 0c0a 	mov.w	ip, #10
 800ced6:	4620      	mov	r0, r4
 800ced8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cedc:	3a30      	subs	r2, #48	; 0x30
 800cede:	2a09      	cmp	r2, #9
 800cee0:	d903      	bls.n	800ceea <_svfiprintf_r+0x1a6>
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d0c6      	beq.n	800ce74 <_svfiprintf_r+0x130>
 800cee6:	9105      	str	r1, [sp, #20]
 800cee8:	e7c4      	b.n	800ce74 <_svfiprintf_r+0x130>
 800ceea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceee:	4604      	mov	r4, r0
 800cef0:	2301      	movs	r3, #1
 800cef2:	e7f0      	b.n	800ced6 <_svfiprintf_r+0x192>
 800cef4:	ab03      	add	r3, sp, #12
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	462a      	mov	r2, r5
 800cefa:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <_svfiprintf_r+0x1f4>)
 800cefc:	a904      	add	r1, sp, #16
 800cefe:	4638      	mov	r0, r7
 800cf00:	f7fc ff04 	bl	8009d0c <_printf_float>
 800cf04:	1c42      	adds	r2, r0, #1
 800cf06:	4606      	mov	r6, r0
 800cf08:	d1d6      	bne.n	800ceb8 <_svfiprintf_r+0x174>
 800cf0a:	89ab      	ldrh	r3, [r5, #12]
 800cf0c:	065b      	lsls	r3, r3, #25
 800cf0e:	f53f af2d 	bmi.w	800cd6c <_svfiprintf_r+0x28>
 800cf12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf14:	b01d      	add	sp, #116	; 0x74
 800cf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1a:	ab03      	add	r3, sp, #12
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	462a      	mov	r2, r5
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <_svfiprintf_r+0x1f4>)
 800cf22:	a904      	add	r1, sp, #16
 800cf24:	4638      	mov	r0, r7
 800cf26:	f7fd f995 	bl	800a254 <_printf_i>
 800cf2a:	e7eb      	b.n	800cf04 <_svfiprintf_r+0x1c0>
 800cf2c:	0800e4ac 	.word	0x0800e4ac
 800cf30:	0800e4b6 	.word	0x0800e4b6
 800cf34:	08009d0d 	.word	0x08009d0d
 800cf38:	0800cc8f 	.word	0x0800cc8f
 800cf3c:	0800e4b2 	.word	0x0800e4b2

0800cf40 <_sungetc_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	1c4b      	adds	r3, r1, #1
 800cf44:	4614      	mov	r4, r2
 800cf46:	d103      	bne.n	800cf50 <_sungetc_r+0x10>
 800cf48:	f04f 35ff 	mov.w	r5, #4294967295
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	8993      	ldrh	r3, [r2, #12]
 800cf52:	f023 0320 	bic.w	r3, r3, #32
 800cf56:	8193      	strh	r3, [r2, #12]
 800cf58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf5a:	6852      	ldr	r2, [r2, #4]
 800cf5c:	b2cd      	uxtb	r5, r1
 800cf5e:	b18b      	cbz	r3, 800cf84 <_sungetc_r+0x44>
 800cf60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf62:	4293      	cmp	r3, r2
 800cf64:	dd08      	ble.n	800cf78 <_sungetc_r+0x38>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	1e5a      	subs	r2, r3, #1
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cf70:	6863      	ldr	r3, [r4, #4]
 800cf72:	3301      	adds	r3, #1
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	e7e9      	b.n	800cf4c <_sungetc_r+0xc>
 800cf78:	4621      	mov	r1, r4
 800cf7a:	f000 fbe8 	bl	800d74e <__submore>
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d0f1      	beq.n	800cf66 <_sungetc_r+0x26>
 800cf82:	e7e1      	b.n	800cf48 <_sungetc_r+0x8>
 800cf84:	6921      	ldr	r1, [r4, #16]
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	b151      	cbz	r1, 800cfa0 <_sungetc_r+0x60>
 800cf8a:	4299      	cmp	r1, r3
 800cf8c:	d208      	bcs.n	800cfa0 <_sungetc_r+0x60>
 800cf8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cf92:	42a9      	cmp	r1, r5
 800cf94:	d104      	bne.n	800cfa0 <_sungetc_r+0x60>
 800cf96:	3b01      	subs	r3, #1
 800cf98:	3201      	adds	r2, #1
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	6062      	str	r2, [r4, #4]
 800cf9e:	e7d5      	b.n	800cf4c <_sungetc_r+0xc>
 800cfa0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cfa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa8:	6363      	str	r3, [r4, #52]	; 0x34
 800cfaa:	2303      	movs	r3, #3
 800cfac:	63a3      	str	r3, [r4, #56]	; 0x38
 800cfae:	4623      	mov	r3, r4
 800cfb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e7dc      	b.n	800cf74 <_sungetc_r+0x34>

0800cfba <__ssrefill_r>:
 800cfba:	b510      	push	{r4, lr}
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cfc0:	b169      	cbz	r1, 800cfde <__ssrefill_r+0x24>
 800cfc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfc6:	4299      	cmp	r1, r3
 800cfc8:	d001      	beq.n	800cfce <__ssrefill_r+0x14>
 800cfca:	f7fe fd63 	bl	800ba94 <_free_r>
 800cfce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfd0:	6063      	str	r3, [r4, #4]
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	6360      	str	r0, [r4, #52]	; 0x34
 800cfd6:	b113      	cbz	r3, 800cfde <__ssrefill_r+0x24>
 800cfd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	bd10      	pop	{r4, pc}
 800cfde:	6923      	ldr	r3, [r4, #16]
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	6063      	str	r3, [r4, #4]
 800cfe6:	89a3      	ldrh	r3, [r4, #12]
 800cfe8:	f043 0320 	orr.w	r3, r3, #32
 800cfec:	81a3      	strh	r3, [r4, #12]
 800cfee:	f04f 30ff 	mov.w	r0, #4294967295
 800cff2:	e7f3      	b.n	800cfdc <__ssrefill_r+0x22>

0800cff4 <__ssvfiscanf_r>:
 800cff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff8:	460c      	mov	r4, r1
 800cffa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cffe:	2100      	movs	r1, #0
 800d000:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d004:	49a6      	ldr	r1, [pc, #664]	; (800d2a0 <__ssvfiscanf_r+0x2ac>)
 800d006:	91a0      	str	r1, [sp, #640]	; 0x280
 800d008:	f10d 0804 	add.w	r8, sp, #4
 800d00c:	49a5      	ldr	r1, [pc, #660]	; (800d2a4 <__ssvfiscanf_r+0x2b0>)
 800d00e:	4fa6      	ldr	r7, [pc, #664]	; (800d2a8 <__ssvfiscanf_r+0x2b4>)
 800d010:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d2ac <__ssvfiscanf_r+0x2b8>
 800d014:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d018:	4606      	mov	r6, r0
 800d01a:	91a1      	str	r1, [sp, #644]	; 0x284
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	7813      	ldrb	r3, [r2, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	f000 815a 	beq.w	800d2da <__ssvfiscanf_r+0x2e6>
 800d026:	5cf9      	ldrb	r1, [r7, r3]
 800d028:	f011 0108 	ands.w	r1, r1, #8
 800d02c:	f102 0501 	add.w	r5, r2, #1
 800d030:	d019      	beq.n	800d066 <__ssvfiscanf_r+0x72>
 800d032:	6863      	ldr	r3, [r4, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	dd0f      	ble.n	800d058 <__ssvfiscanf_r+0x64>
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	781a      	ldrb	r2, [r3, #0]
 800d03c:	5cba      	ldrb	r2, [r7, r2]
 800d03e:	0712      	lsls	r2, r2, #28
 800d040:	d401      	bmi.n	800d046 <__ssvfiscanf_r+0x52>
 800d042:	462a      	mov	r2, r5
 800d044:	e7eb      	b.n	800d01e <__ssvfiscanf_r+0x2a>
 800d046:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d048:	3201      	adds	r2, #1
 800d04a:	9245      	str	r2, [sp, #276]	; 0x114
 800d04c:	6862      	ldr	r2, [r4, #4]
 800d04e:	3301      	adds	r3, #1
 800d050:	3a01      	subs	r2, #1
 800d052:	6062      	str	r2, [r4, #4]
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	e7ec      	b.n	800d032 <__ssvfiscanf_r+0x3e>
 800d058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d05a:	4621      	mov	r1, r4
 800d05c:	4630      	mov	r0, r6
 800d05e:	4798      	blx	r3
 800d060:	2800      	cmp	r0, #0
 800d062:	d0e9      	beq.n	800d038 <__ssvfiscanf_r+0x44>
 800d064:	e7ed      	b.n	800d042 <__ssvfiscanf_r+0x4e>
 800d066:	2b25      	cmp	r3, #37	; 0x25
 800d068:	d012      	beq.n	800d090 <__ssvfiscanf_r+0x9c>
 800d06a:	469a      	mov	sl, r3
 800d06c:	6863      	ldr	r3, [r4, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f340 8091 	ble.w	800d196 <__ssvfiscanf_r+0x1a2>
 800d074:	6822      	ldr	r2, [r4, #0]
 800d076:	7813      	ldrb	r3, [r2, #0]
 800d078:	4553      	cmp	r3, sl
 800d07a:	f040 812e 	bne.w	800d2da <__ssvfiscanf_r+0x2e6>
 800d07e:	6863      	ldr	r3, [r4, #4]
 800d080:	3b01      	subs	r3, #1
 800d082:	6063      	str	r3, [r4, #4]
 800d084:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d086:	3201      	adds	r2, #1
 800d088:	3301      	adds	r3, #1
 800d08a:	6022      	str	r2, [r4, #0]
 800d08c:	9345      	str	r3, [sp, #276]	; 0x114
 800d08e:	e7d8      	b.n	800d042 <__ssvfiscanf_r+0x4e>
 800d090:	9141      	str	r1, [sp, #260]	; 0x104
 800d092:	9143      	str	r1, [sp, #268]	; 0x10c
 800d094:	7853      	ldrb	r3, [r2, #1]
 800d096:	2b2a      	cmp	r3, #42	; 0x2a
 800d098:	bf02      	ittt	eq
 800d09a:	2310      	moveq	r3, #16
 800d09c:	1c95      	addeq	r5, r2, #2
 800d09e:	9341      	streq	r3, [sp, #260]	; 0x104
 800d0a0:	220a      	movs	r2, #10
 800d0a2:	46aa      	mov	sl, r5
 800d0a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d0a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d0ac:	2b09      	cmp	r3, #9
 800d0ae:	d91c      	bls.n	800d0ea <__ssvfiscanf_r+0xf6>
 800d0b0:	487e      	ldr	r0, [pc, #504]	; (800d2ac <__ssvfiscanf_r+0x2b8>)
 800d0b2:	2203      	movs	r2, #3
 800d0b4:	f7f3 f88c 	bl	80001d0 <memchr>
 800d0b8:	b138      	cbz	r0, 800d0ca <__ssvfiscanf_r+0xd6>
 800d0ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0bc:	eba0 0009 	sub.w	r0, r0, r9
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	4083      	lsls	r3, r0
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	9341      	str	r3, [sp, #260]	; 0x104
 800d0c8:	4655      	mov	r5, sl
 800d0ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0ce:	2b78      	cmp	r3, #120	; 0x78
 800d0d0:	d806      	bhi.n	800d0e0 <__ssvfiscanf_r+0xec>
 800d0d2:	2b57      	cmp	r3, #87	; 0x57
 800d0d4:	d810      	bhi.n	800d0f8 <__ssvfiscanf_r+0x104>
 800d0d6:	2b25      	cmp	r3, #37	; 0x25
 800d0d8:	d0c7      	beq.n	800d06a <__ssvfiscanf_r+0x76>
 800d0da:	d857      	bhi.n	800d18c <__ssvfiscanf_r+0x198>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d065      	beq.n	800d1ac <__ssvfiscanf_r+0x1b8>
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	9347      	str	r3, [sp, #284]	; 0x11c
 800d0e4:	230a      	movs	r3, #10
 800d0e6:	9342      	str	r3, [sp, #264]	; 0x108
 800d0e8:	e076      	b.n	800d1d8 <__ssvfiscanf_r+0x1e4>
 800d0ea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d0ec:	fb02 1103 	mla	r1, r2, r3, r1
 800d0f0:	3930      	subs	r1, #48	; 0x30
 800d0f2:	9143      	str	r1, [sp, #268]	; 0x10c
 800d0f4:	4655      	mov	r5, sl
 800d0f6:	e7d4      	b.n	800d0a2 <__ssvfiscanf_r+0xae>
 800d0f8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d0fc:	2a20      	cmp	r2, #32
 800d0fe:	d8ef      	bhi.n	800d0e0 <__ssvfiscanf_r+0xec>
 800d100:	a101      	add	r1, pc, #4	; (adr r1, 800d108 <__ssvfiscanf_r+0x114>)
 800d102:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d106:	bf00      	nop
 800d108:	0800d1bb 	.word	0x0800d1bb
 800d10c:	0800d0e1 	.word	0x0800d0e1
 800d110:	0800d0e1 	.word	0x0800d0e1
 800d114:	0800d219 	.word	0x0800d219
 800d118:	0800d0e1 	.word	0x0800d0e1
 800d11c:	0800d0e1 	.word	0x0800d0e1
 800d120:	0800d0e1 	.word	0x0800d0e1
 800d124:	0800d0e1 	.word	0x0800d0e1
 800d128:	0800d0e1 	.word	0x0800d0e1
 800d12c:	0800d0e1 	.word	0x0800d0e1
 800d130:	0800d0e1 	.word	0x0800d0e1
 800d134:	0800d22f 	.word	0x0800d22f
 800d138:	0800d215 	.word	0x0800d215
 800d13c:	0800d193 	.word	0x0800d193
 800d140:	0800d193 	.word	0x0800d193
 800d144:	0800d193 	.word	0x0800d193
 800d148:	0800d0e1 	.word	0x0800d0e1
 800d14c:	0800d1d1 	.word	0x0800d1d1
 800d150:	0800d0e1 	.word	0x0800d0e1
 800d154:	0800d0e1 	.word	0x0800d0e1
 800d158:	0800d0e1 	.word	0x0800d0e1
 800d15c:	0800d0e1 	.word	0x0800d0e1
 800d160:	0800d23f 	.word	0x0800d23f
 800d164:	0800d20d 	.word	0x0800d20d
 800d168:	0800d1b3 	.word	0x0800d1b3
 800d16c:	0800d0e1 	.word	0x0800d0e1
 800d170:	0800d0e1 	.word	0x0800d0e1
 800d174:	0800d23b 	.word	0x0800d23b
 800d178:	0800d0e1 	.word	0x0800d0e1
 800d17c:	0800d215 	.word	0x0800d215
 800d180:	0800d0e1 	.word	0x0800d0e1
 800d184:	0800d0e1 	.word	0x0800d0e1
 800d188:	0800d1bb 	.word	0x0800d1bb
 800d18c:	3b45      	subs	r3, #69	; 0x45
 800d18e:	2b02      	cmp	r3, #2
 800d190:	d8a6      	bhi.n	800d0e0 <__ssvfiscanf_r+0xec>
 800d192:	2305      	movs	r3, #5
 800d194:	e01f      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d198:	4621      	mov	r1, r4
 800d19a:	4630      	mov	r0, r6
 800d19c:	4798      	blx	r3
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	f43f af68 	beq.w	800d074 <__ssvfiscanf_r+0x80>
 800d1a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f040 808d 	bne.w	800d2c6 <__ssvfiscanf_r+0x2d2>
 800d1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b0:	e08f      	b.n	800d2d2 <__ssvfiscanf_r+0x2de>
 800d1b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d1b4:	f042 0220 	orr.w	r2, r2, #32
 800d1b8:	9241      	str	r2, [sp, #260]	; 0x104
 800d1ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d1bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1c0:	9241      	str	r2, [sp, #260]	; 0x104
 800d1c2:	2210      	movs	r2, #16
 800d1c4:	2b6f      	cmp	r3, #111	; 0x6f
 800d1c6:	9242      	str	r2, [sp, #264]	; 0x108
 800d1c8:	bf34      	ite	cc
 800d1ca:	2303      	movcc	r3, #3
 800d1cc:	2304      	movcs	r3, #4
 800d1ce:	e002      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9342      	str	r3, [sp, #264]	; 0x108
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	dd3d      	ble.n	800d25a <__ssvfiscanf_r+0x266>
 800d1de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d1e0:	0659      	lsls	r1, r3, #25
 800d1e2:	d404      	bmi.n	800d1ee <__ssvfiscanf_r+0x1fa>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	5cba      	ldrb	r2, [r7, r2]
 800d1ea:	0712      	lsls	r2, r2, #28
 800d1ec:	d43c      	bmi.n	800d268 <__ssvfiscanf_r+0x274>
 800d1ee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d1f0:	2b02      	cmp	r3, #2
 800d1f2:	dc4b      	bgt.n	800d28c <__ssvfiscanf_r+0x298>
 800d1f4:	466b      	mov	r3, sp
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	a941      	add	r1, sp, #260	; 0x104
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f000 f872 	bl	800d2e4 <_scanf_chars>
 800d200:	2801      	cmp	r0, #1
 800d202:	d06a      	beq.n	800d2da <__ssvfiscanf_r+0x2e6>
 800d204:	2802      	cmp	r0, #2
 800d206:	f47f af1c 	bne.w	800d042 <__ssvfiscanf_r+0x4e>
 800d20a:	e7cb      	b.n	800d1a4 <__ssvfiscanf_r+0x1b0>
 800d20c:	2308      	movs	r3, #8
 800d20e:	9342      	str	r3, [sp, #264]	; 0x108
 800d210:	2304      	movs	r3, #4
 800d212:	e7e0      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d214:	220a      	movs	r2, #10
 800d216:	e7d5      	b.n	800d1c4 <__ssvfiscanf_r+0x1d0>
 800d218:	4629      	mov	r1, r5
 800d21a:	4640      	mov	r0, r8
 800d21c:	f000 fa5e 	bl	800d6dc <__sccl>
 800d220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d226:	9341      	str	r3, [sp, #260]	; 0x104
 800d228:	4605      	mov	r5, r0
 800d22a:	2301      	movs	r3, #1
 800d22c:	e7d3      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d22e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d234:	9341      	str	r3, [sp, #260]	; 0x104
 800d236:	2300      	movs	r3, #0
 800d238:	e7cd      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d23a:	2302      	movs	r3, #2
 800d23c:	e7cb      	b.n	800d1d6 <__ssvfiscanf_r+0x1e2>
 800d23e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d240:	06c3      	lsls	r3, r0, #27
 800d242:	f53f aefe 	bmi.w	800d042 <__ssvfiscanf_r+0x4e>
 800d246:	9b00      	ldr	r3, [sp, #0]
 800d248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d24a:	1d19      	adds	r1, r3, #4
 800d24c:	9100      	str	r1, [sp, #0]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	07c0      	lsls	r0, r0, #31
 800d252:	bf4c      	ite	mi
 800d254:	801a      	strhmi	r2, [r3, #0]
 800d256:	601a      	strpl	r2, [r3, #0]
 800d258:	e6f3      	b.n	800d042 <__ssvfiscanf_r+0x4e>
 800d25a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d25c:	4621      	mov	r1, r4
 800d25e:	4630      	mov	r0, r6
 800d260:	4798      	blx	r3
 800d262:	2800      	cmp	r0, #0
 800d264:	d0bb      	beq.n	800d1de <__ssvfiscanf_r+0x1ea>
 800d266:	e79d      	b.n	800d1a4 <__ssvfiscanf_r+0x1b0>
 800d268:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d26a:	3201      	adds	r2, #1
 800d26c:	9245      	str	r2, [sp, #276]	; 0x114
 800d26e:	6862      	ldr	r2, [r4, #4]
 800d270:	3a01      	subs	r2, #1
 800d272:	2a00      	cmp	r2, #0
 800d274:	6062      	str	r2, [r4, #4]
 800d276:	dd02      	ble.n	800d27e <__ssvfiscanf_r+0x28a>
 800d278:	3301      	adds	r3, #1
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	e7b2      	b.n	800d1e4 <__ssvfiscanf_r+0x1f0>
 800d27e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d280:	4621      	mov	r1, r4
 800d282:	4630      	mov	r0, r6
 800d284:	4798      	blx	r3
 800d286:	2800      	cmp	r0, #0
 800d288:	d0ac      	beq.n	800d1e4 <__ssvfiscanf_r+0x1f0>
 800d28a:	e78b      	b.n	800d1a4 <__ssvfiscanf_r+0x1b0>
 800d28c:	2b04      	cmp	r3, #4
 800d28e:	dc0f      	bgt.n	800d2b0 <__ssvfiscanf_r+0x2bc>
 800d290:	466b      	mov	r3, sp
 800d292:	4622      	mov	r2, r4
 800d294:	a941      	add	r1, sp, #260	; 0x104
 800d296:	4630      	mov	r0, r6
 800d298:	f000 f87e 	bl	800d398 <_scanf_i>
 800d29c:	e7b0      	b.n	800d200 <__ssvfiscanf_r+0x20c>
 800d29e:	bf00      	nop
 800d2a0:	0800cf41 	.word	0x0800cf41
 800d2a4:	0800cfbb 	.word	0x0800cfbb
 800d2a8:	0800e129 	.word	0x0800e129
 800d2ac:	0800e4b2 	.word	0x0800e4b2
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	; (800d2e0 <__ssvfiscanf_r+0x2ec>)
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f43f aec5 	beq.w	800d042 <__ssvfiscanf_r+0x4e>
 800d2b8:	466b      	mov	r3, sp
 800d2ba:	4622      	mov	r2, r4
 800d2bc:	a941      	add	r1, sp, #260	; 0x104
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fd f8ea 	bl	800a498 <_scanf_float>
 800d2c4:	e79c      	b.n	800d200 <__ssvfiscanf_r+0x20c>
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d2cc:	bf18      	it	ne
 800d2ce:	f04f 30ff 	movne.w	r0, #4294967295
 800d2d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2da:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d2dc:	e7f9      	b.n	800d2d2 <__ssvfiscanf_r+0x2de>
 800d2de:	bf00      	nop
 800d2e0:	0800a499 	.word	0x0800a499

0800d2e4 <_scanf_chars>:
 800d2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2e8:	4615      	mov	r5, r2
 800d2ea:	688a      	ldr	r2, [r1, #8]
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	b932      	cbnz	r2, 800d300 <_scanf_chars+0x1c>
 800d2f2:	698a      	ldr	r2, [r1, #24]
 800d2f4:	2a00      	cmp	r2, #0
 800d2f6:	bf0c      	ite	eq
 800d2f8:	2201      	moveq	r2, #1
 800d2fa:	f04f 32ff 	movne.w	r2, #4294967295
 800d2fe:	608a      	str	r2, [r1, #8]
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d394 <_scanf_chars+0xb0>
 800d306:	06d1      	lsls	r1, r2, #27
 800d308:	bf5f      	itttt	pl
 800d30a:	681a      	ldrpl	r2, [r3, #0]
 800d30c:	1d11      	addpl	r1, r2, #4
 800d30e:	6019      	strpl	r1, [r3, #0]
 800d310:	6816      	ldrpl	r6, [r2, #0]
 800d312:	2700      	movs	r7, #0
 800d314:	69a0      	ldr	r0, [r4, #24]
 800d316:	b188      	cbz	r0, 800d33c <_scanf_chars+0x58>
 800d318:	2801      	cmp	r0, #1
 800d31a:	d107      	bne.n	800d32c <_scanf_chars+0x48>
 800d31c:	682a      	ldr	r2, [r5, #0]
 800d31e:	7811      	ldrb	r1, [r2, #0]
 800d320:	6962      	ldr	r2, [r4, #20]
 800d322:	5c52      	ldrb	r2, [r2, r1]
 800d324:	b952      	cbnz	r2, 800d33c <_scanf_chars+0x58>
 800d326:	2f00      	cmp	r7, #0
 800d328:	d031      	beq.n	800d38e <_scanf_chars+0xaa>
 800d32a:	e022      	b.n	800d372 <_scanf_chars+0x8e>
 800d32c:	2802      	cmp	r0, #2
 800d32e:	d120      	bne.n	800d372 <_scanf_chars+0x8e>
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d338:	071b      	lsls	r3, r3, #28
 800d33a:	d41a      	bmi.n	800d372 <_scanf_chars+0x8e>
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	06da      	lsls	r2, r3, #27
 800d340:	bf5e      	ittt	pl
 800d342:	682b      	ldrpl	r3, [r5, #0]
 800d344:	781b      	ldrbpl	r3, [r3, #0]
 800d346:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d34a:	682a      	ldr	r2, [r5, #0]
 800d34c:	686b      	ldr	r3, [r5, #4]
 800d34e:	3201      	adds	r2, #1
 800d350:	602a      	str	r2, [r5, #0]
 800d352:	68a2      	ldr	r2, [r4, #8]
 800d354:	3b01      	subs	r3, #1
 800d356:	3a01      	subs	r2, #1
 800d358:	606b      	str	r3, [r5, #4]
 800d35a:	3701      	adds	r7, #1
 800d35c:	60a2      	str	r2, [r4, #8]
 800d35e:	b142      	cbz	r2, 800d372 <_scanf_chars+0x8e>
 800d360:	2b00      	cmp	r3, #0
 800d362:	dcd7      	bgt.n	800d314 <_scanf_chars+0x30>
 800d364:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d368:	4629      	mov	r1, r5
 800d36a:	4640      	mov	r0, r8
 800d36c:	4798      	blx	r3
 800d36e:	2800      	cmp	r0, #0
 800d370:	d0d0      	beq.n	800d314 <_scanf_chars+0x30>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	f013 0310 	ands.w	r3, r3, #16
 800d378:	d105      	bne.n	800d386 <_scanf_chars+0xa2>
 800d37a:	68e2      	ldr	r2, [r4, #12]
 800d37c:	3201      	adds	r2, #1
 800d37e:	60e2      	str	r2, [r4, #12]
 800d380:	69a2      	ldr	r2, [r4, #24]
 800d382:	b102      	cbz	r2, 800d386 <_scanf_chars+0xa2>
 800d384:	7033      	strb	r3, [r6, #0]
 800d386:	6923      	ldr	r3, [r4, #16]
 800d388:	443b      	add	r3, r7
 800d38a:	6123      	str	r3, [r4, #16]
 800d38c:	2000      	movs	r0, #0
 800d38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d392:	bf00      	nop
 800d394:	0800e129 	.word	0x0800e129

0800d398 <_scanf_i>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	4698      	mov	r8, r3
 800d39e:	4b74      	ldr	r3, [pc, #464]	; (800d570 <_scanf_i+0x1d8>)
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	4682      	mov	sl, r0
 800d3a4:	4616      	mov	r6, r2
 800d3a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	ab03      	add	r3, sp, #12
 800d3ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3b2:	4b70      	ldr	r3, [pc, #448]	; (800d574 <_scanf_i+0x1dc>)
 800d3b4:	69a1      	ldr	r1, [r4, #24]
 800d3b6:	4a70      	ldr	r2, [pc, #448]	; (800d578 <_scanf_i+0x1e0>)
 800d3b8:	2903      	cmp	r1, #3
 800d3ba:	bf18      	it	ne
 800d3bc:	461a      	movne	r2, r3
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	1e5a      	subs	r2, r3, #1
 800d3c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d3c8:	bf88      	it	hi
 800d3ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d3ce:	4627      	mov	r7, r4
 800d3d0:	bf82      	ittt	hi
 800d3d2:	eb03 0905 	addhi.w	r9, r3, r5
 800d3d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d3da:	60a3      	strhi	r3, [r4, #8]
 800d3dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d3e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d3e4:	bf98      	it	ls
 800d3e6:	f04f 0900 	movls.w	r9, #0
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	463d      	mov	r5, r7
 800d3ee:	f04f 0b00 	mov.w	fp, #0
 800d3f2:	6831      	ldr	r1, [r6, #0]
 800d3f4:	ab03      	add	r3, sp, #12
 800d3f6:	7809      	ldrb	r1, [r1, #0]
 800d3f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	f7f2 fee7 	bl	80001d0 <memchr>
 800d402:	b328      	cbz	r0, 800d450 <_scanf_i+0xb8>
 800d404:	f1bb 0f01 	cmp.w	fp, #1
 800d408:	d159      	bne.n	800d4be <_scanf_i+0x126>
 800d40a:	6862      	ldr	r2, [r4, #4]
 800d40c:	b92a      	cbnz	r2, 800d41a <_scanf_i+0x82>
 800d40e:	6822      	ldr	r2, [r4, #0]
 800d410:	2308      	movs	r3, #8
 800d412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d416:	6063      	str	r3, [r4, #4]
 800d418:	6022      	str	r2, [r4, #0]
 800d41a:	6822      	ldr	r2, [r4, #0]
 800d41c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d420:	6022      	str	r2, [r4, #0]
 800d422:	68a2      	ldr	r2, [r4, #8]
 800d424:	1e51      	subs	r1, r2, #1
 800d426:	60a1      	str	r1, [r4, #8]
 800d428:	b192      	cbz	r2, 800d450 <_scanf_i+0xb8>
 800d42a:	6832      	ldr	r2, [r6, #0]
 800d42c:	1c51      	adds	r1, r2, #1
 800d42e:	6031      	str	r1, [r6, #0]
 800d430:	7812      	ldrb	r2, [r2, #0]
 800d432:	f805 2b01 	strb.w	r2, [r5], #1
 800d436:	6872      	ldr	r2, [r6, #4]
 800d438:	3a01      	subs	r2, #1
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	6072      	str	r2, [r6, #4]
 800d43e:	dc07      	bgt.n	800d450 <_scanf_i+0xb8>
 800d440:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d444:	4631      	mov	r1, r6
 800d446:	4650      	mov	r0, sl
 800d448:	4790      	blx	r2
 800d44a:	2800      	cmp	r0, #0
 800d44c:	f040 8085 	bne.w	800d55a <_scanf_i+0x1c2>
 800d450:	f10b 0b01 	add.w	fp, fp, #1
 800d454:	f1bb 0f03 	cmp.w	fp, #3
 800d458:	d1cb      	bne.n	800d3f2 <_scanf_i+0x5a>
 800d45a:	6863      	ldr	r3, [r4, #4]
 800d45c:	b90b      	cbnz	r3, 800d462 <_scanf_i+0xca>
 800d45e:	230a      	movs	r3, #10
 800d460:	6063      	str	r3, [r4, #4]
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	4945      	ldr	r1, [pc, #276]	; (800d57c <_scanf_i+0x1e4>)
 800d466:	6960      	ldr	r0, [r4, #20]
 800d468:	1ac9      	subs	r1, r1, r3
 800d46a:	f000 f937 	bl	800d6dc <__sccl>
 800d46e:	f04f 0b00 	mov.w	fp, #0
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	6822      	ldr	r2, [r4, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d03d      	beq.n	800d4f6 <_scanf_i+0x15e>
 800d47a:	6831      	ldr	r1, [r6, #0]
 800d47c:	6960      	ldr	r0, [r4, #20]
 800d47e:	f891 c000 	ldrb.w	ip, [r1]
 800d482:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d486:	2800      	cmp	r0, #0
 800d488:	d035      	beq.n	800d4f6 <_scanf_i+0x15e>
 800d48a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d48e:	d124      	bne.n	800d4da <_scanf_i+0x142>
 800d490:	0510      	lsls	r0, r2, #20
 800d492:	d522      	bpl.n	800d4da <_scanf_i+0x142>
 800d494:	f10b 0b01 	add.w	fp, fp, #1
 800d498:	f1b9 0f00 	cmp.w	r9, #0
 800d49c:	d003      	beq.n	800d4a6 <_scanf_i+0x10e>
 800d49e:	3301      	adds	r3, #1
 800d4a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	6873      	ldr	r3, [r6, #4]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	6073      	str	r3, [r6, #4]
 800d4ae:	dd1b      	ble.n	800d4e8 <_scanf_i+0x150>
 800d4b0:	6833      	ldr	r3, [r6, #0]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	6033      	str	r3, [r6, #0]
 800d4b6:	68a3      	ldr	r3, [r4, #8]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	60a3      	str	r3, [r4, #8]
 800d4bc:	e7d9      	b.n	800d472 <_scanf_i+0xda>
 800d4be:	f1bb 0f02 	cmp.w	fp, #2
 800d4c2:	d1ae      	bne.n	800d422 <_scanf_i+0x8a>
 800d4c4:	6822      	ldr	r2, [r4, #0]
 800d4c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d4ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d4ce:	d1bf      	bne.n	800d450 <_scanf_i+0xb8>
 800d4d0:	2310      	movs	r3, #16
 800d4d2:	6063      	str	r3, [r4, #4]
 800d4d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4d8:	e7a2      	b.n	800d420 <_scanf_i+0x88>
 800d4da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d4de:	6022      	str	r2, [r4, #0]
 800d4e0:	780b      	ldrb	r3, [r1, #0]
 800d4e2:	f805 3b01 	strb.w	r3, [r5], #1
 800d4e6:	e7de      	b.n	800d4a6 <_scanf_i+0x10e>
 800d4e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4650      	mov	r0, sl
 800d4f0:	4798      	blx	r3
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	d0df      	beq.n	800d4b6 <_scanf_i+0x11e>
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	05d9      	lsls	r1, r3, #23
 800d4fa:	d50d      	bpl.n	800d518 <_scanf_i+0x180>
 800d4fc:	42bd      	cmp	r5, r7
 800d4fe:	d909      	bls.n	800d514 <_scanf_i+0x17c>
 800d500:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d508:	4632      	mov	r2, r6
 800d50a:	4650      	mov	r0, sl
 800d50c:	4798      	blx	r3
 800d50e:	f105 39ff 	add.w	r9, r5, #4294967295
 800d512:	464d      	mov	r5, r9
 800d514:	42bd      	cmp	r5, r7
 800d516:	d028      	beq.n	800d56a <_scanf_i+0x1d2>
 800d518:	6822      	ldr	r2, [r4, #0]
 800d51a:	f012 0210 	ands.w	r2, r2, #16
 800d51e:	d113      	bne.n	800d548 <_scanf_i+0x1b0>
 800d520:	702a      	strb	r2, [r5, #0]
 800d522:	6863      	ldr	r3, [r4, #4]
 800d524:	9e01      	ldr	r6, [sp, #4]
 800d526:	4639      	mov	r1, r7
 800d528:	4650      	mov	r0, sl
 800d52a:	47b0      	blx	r6
 800d52c:	f8d8 3000 	ldr.w	r3, [r8]
 800d530:	6821      	ldr	r1, [r4, #0]
 800d532:	1d1a      	adds	r2, r3, #4
 800d534:	f8c8 2000 	str.w	r2, [r8]
 800d538:	f011 0f20 	tst.w	r1, #32
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	d00f      	beq.n	800d560 <_scanf_i+0x1c8>
 800d540:	6018      	str	r0, [r3, #0]
 800d542:	68e3      	ldr	r3, [r4, #12]
 800d544:	3301      	adds	r3, #1
 800d546:	60e3      	str	r3, [r4, #12]
 800d548:	6923      	ldr	r3, [r4, #16]
 800d54a:	1bed      	subs	r5, r5, r7
 800d54c:	445d      	add	r5, fp
 800d54e:	442b      	add	r3, r5
 800d550:	6123      	str	r3, [r4, #16]
 800d552:	2000      	movs	r0, #0
 800d554:	b007      	add	sp, #28
 800d556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55a:	f04f 0b00 	mov.w	fp, #0
 800d55e:	e7ca      	b.n	800d4f6 <_scanf_i+0x15e>
 800d560:	07ca      	lsls	r2, r1, #31
 800d562:	bf4c      	ite	mi
 800d564:	8018      	strhmi	r0, [r3, #0]
 800d566:	6018      	strpl	r0, [r3, #0]
 800d568:	e7eb      	b.n	800d542 <_scanf_i+0x1aa>
 800d56a:	2001      	movs	r0, #1
 800d56c:	e7f2      	b.n	800d554 <_scanf_i+0x1bc>
 800d56e:	bf00      	nop
 800d570:	0800e0a4 	.word	0x0800e0a4
 800d574:	0800d945 	.word	0x0800d945
 800d578:	0800cc71 	.word	0x0800cc71
 800d57c:	0800e4cd 	.word	0x0800e4cd

0800d580 <__sflush_r>:
 800d580:	898a      	ldrh	r2, [r1, #12]
 800d582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d586:	4605      	mov	r5, r0
 800d588:	0710      	lsls	r0, r2, #28
 800d58a:	460c      	mov	r4, r1
 800d58c:	d458      	bmi.n	800d640 <__sflush_r+0xc0>
 800d58e:	684b      	ldr	r3, [r1, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	dc05      	bgt.n	800d5a0 <__sflush_r+0x20>
 800d594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d596:	2b00      	cmp	r3, #0
 800d598:	dc02      	bgt.n	800d5a0 <__sflush_r+0x20>
 800d59a:	2000      	movs	r0, #0
 800d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5a2:	2e00      	cmp	r6, #0
 800d5a4:	d0f9      	beq.n	800d59a <__sflush_r+0x1a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5ac:	682f      	ldr	r7, [r5, #0]
 800d5ae:	6a21      	ldr	r1, [r4, #32]
 800d5b0:	602b      	str	r3, [r5, #0]
 800d5b2:	d032      	beq.n	800d61a <__sflush_r+0x9a>
 800d5b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	075a      	lsls	r2, r3, #29
 800d5ba:	d505      	bpl.n	800d5c8 <__sflush_r+0x48>
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	1ac0      	subs	r0, r0, r3
 800d5c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5c2:	b10b      	cbz	r3, 800d5c8 <__sflush_r+0x48>
 800d5c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c6:	1ac0      	subs	r0, r0, r3
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ce:	6a21      	ldr	r1, [r4, #32]
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	47b0      	blx	r6
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	d106      	bne.n	800d5e8 <__sflush_r+0x68>
 800d5da:	6829      	ldr	r1, [r5, #0]
 800d5dc:	291d      	cmp	r1, #29
 800d5de:	d82b      	bhi.n	800d638 <__sflush_r+0xb8>
 800d5e0:	4a29      	ldr	r2, [pc, #164]	; (800d688 <__sflush_r+0x108>)
 800d5e2:	410a      	asrs	r2, r1
 800d5e4:	07d6      	lsls	r6, r2, #31
 800d5e6:	d427      	bmi.n	800d638 <__sflush_r+0xb8>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	6062      	str	r2, [r4, #4]
 800d5ec:	04d9      	lsls	r1, r3, #19
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	6022      	str	r2, [r4, #0]
 800d5f2:	d504      	bpl.n	800d5fe <__sflush_r+0x7e>
 800d5f4:	1c42      	adds	r2, r0, #1
 800d5f6:	d101      	bne.n	800d5fc <__sflush_r+0x7c>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b903      	cbnz	r3, 800d5fe <__sflush_r+0x7e>
 800d5fc:	6560      	str	r0, [r4, #84]	; 0x54
 800d5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d600:	602f      	str	r7, [r5, #0]
 800d602:	2900      	cmp	r1, #0
 800d604:	d0c9      	beq.n	800d59a <__sflush_r+0x1a>
 800d606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d60a:	4299      	cmp	r1, r3
 800d60c:	d002      	beq.n	800d614 <__sflush_r+0x94>
 800d60e:	4628      	mov	r0, r5
 800d610:	f7fe fa40 	bl	800ba94 <_free_r>
 800d614:	2000      	movs	r0, #0
 800d616:	6360      	str	r0, [r4, #52]	; 0x34
 800d618:	e7c0      	b.n	800d59c <__sflush_r+0x1c>
 800d61a:	2301      	movs	r3, #1
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b0      	blx	r6
 800d620:	1c41      	adds	r1, r0, #1
 800d622:	d1c8      	bne.n	800d5b6 <__sflush_r+0x36>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0c5      	beq.n	800d5b6 <__sflush_r+0x36>
 800d62a:	2b1d      	cmp	r3, #29
 800d62c:	d001      	beq.n	800d632 <__sflush_r+0xb2>
 800d62e:	2b16      	cmp	r3, #22
 800d630:	d101      	bne.n	800d636 <__sflush_r+0xb6>
 800d632:	602f      	str	r7, [r5, #0]
 800d634:	e7b1      	b.n	800d59a <__sflush_r+0x1a>
 800d636:	89a3      	ldrh	r3, [r4, #12]
 800d638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	e7ad      	b.n	800d59c <__sflush_r+0x1c>
 800d640:	690f      	ldr	r7, [r1, #16]
 800d642:	2f00      	cmp	r7, #0
 800d644:	d0a9      	beq.n	800d59a <__sflush_r+0x1a>
 800d646:	0793      	lsls	r3, r2, #30
 800d648:	680e      	ldr	r6, [r1, #0]
 800d64a:	bf08      	it	eq
 800d64c:	694b      	ldreq	r3, [r1, #20]
 800d64e:	600f      	str	r7, [r1, #0]
 800d650:	bf18      	it	ne
 800d652:	2300      	movne	r3, #0
 800d654:	eba6 0807 	sub.w	r8, r6, r7
 800d658:	608b      	str	r3, [r1, #8]
 800d65a:	f1b8 0f00 	cmp.w	r8, #0
 800d65e:	dd9c      	ble.n	800d59a <__sflush_r+0x1a>
 800d660:	6a21      	ldr	r1, [r4, #32]
 800d662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d664:	4643      	mov	r3, r8
 800d666:	463a      	mov	r2, r7
 800d668:	4628      	mov	r0, r5
 800d66a:	47b0      	blx	r6
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dc06      	bgt.n	800d67e <__sflush_r+0xfe>
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d676:	81a3      	strh	r3, [r4, #12]
 800d678:	f04f 30ff 	mov.w	r0, #4294967295
 800d67c:	e78e      	b.n	800d59c <__sflush_r+0x1c>
 800d67e:	4407      	add	r7, r0
 800d680:	eba8 0800 	sub.w	r8, r8, r0
 800d684:	e7e9      	b.n	800d65a <__sflush_r+0xda>
 800d686:	bf00      	nop
 800d688:	dfbffffe 	.word	0xdfbffffe

0800d68c <_fflush_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	690b      	ldr	r3, [r1, #16]
 800d690:	4605      	mov	r5, r0
 800d692:	460c      	mov	r4, r1
 800d694:	b913      	cbnz	r3, 800d69c <_fflush_r+0x10>
 800d696:	2500      	movs	r5, #0
 800d698:	4628      	mov	r0, r5
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	b118      	cbz	r0, 800d6a6 <_fflush_r+0x1a>
 800d69e:	6a03      	ldr	r3, [r0, #32]
 800d6a0:	b90b      	cbnz	r3, 800d6a6 <_fflush_r+0x1a>
 800d6a2:	f7fd f995 	bl	800a9d0 <__sinit>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0f3      	beq.n	800d696 <_fflush_r+0xa>
 800d6ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b0:	07d0      	lsls	r0, r2, #31
 800d6b2:	d404      	bmi.n	800d6be <_fflush_r+0x32>
 800d6b4:	0599      	lsls	r1, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_fflush_r+0x32>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ba:	f7fd fb50 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f7ff ff5d 	bl	800d580 <__sflush_r>
 800d6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c8:	07da      	lsls	r2, r3, #31
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	d4e4      	bmi.n	800d698 <_fflush_r+0xc>
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	059b      	lsls	r3, r3, #22
 800d6d2:	d4e1      	bmi.n	800d698 <_fflush_r+0xc>
 800d6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6d6:	f7fd fb43 	bl	800ad60 <__retarget_lock_release_recursive>
 800d6da:	e7dd      	b.n	800d698 <_fflush_r+0xc>

0800d6dc <__sccl>:
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	780b      	ldrb	r3, [r1, #0]
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	2b5e      	cmp	r3, #94	; 0x5e
 800d6e4:	bf0b      	itete	eq
 800d6e6:	784b      	ldrbeq	r3, [r1, #1]
 800d6e8:	1c4a      	addne	r2, r1, #1
 800d6ea:	1c8a      	addeq	r2, r1, #2
 800d6ec:	2100      	movne	r1, #0
 800d6ee:	bf08      	it	eq
 800d6f0:	2101      	moveq	r1, #1
 800d6f2:	3801      	subs	r0, #1
 800d6f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d6f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d6fc:	42a8      	cmp	r0, r5
 800d6fe:	d1fb      	bne.n	800d6f8 <__sccl+0x1c>
 800d700:	b90b      	cbnz	r3, 800d706 <__sccl+0x2a>
 800d702:	1e50      	subs	r0, r2, #1
 800d704:	bd70      	pop	{r4, r5, r6, pc}
 800d706:	f081 0101 	eor.w	r1, r1, #1
 800d70a:	54e1      	strb	r1, [r4, r3]
 800d70c:	4610      	mov	r0, r2
 800d70e:	4602      	mov	r2, r0
 800d710:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d714:	2d2d      	cmp	r5, #45	; 0x2d
 800d716:	d005      	beq.n	800d724 <__sccl+0x48>
 800d718:	2d5d      	cmp	r5, #93	; 0x5d
 800d71a:	d016      	beq.n	800d74a <__sccl+0x6e>
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	d0f1      	beq.n	800d704 <__sccl+0x28>
 800d720:	462b      	mov	r3, r5
 800d722:	e7f2      	b.n	800d70a <__sccl+0x2e>
 800d724:	7846      	ldrb	r6, [r0, #1]
 800d726:	2e5d      	cmp	r6, #93	; 0x5d
 800d728:	d0fa      	beq.n	800d720 <__sccl+0x44>
 800d72a:	42b3      	cmp	r3, r6
 800d72c:	dcf8      	bgt.n	800d720 <__sccl+0x44>
 800d72e:	3002      	adds	r0, #2
 800d730:	461a      	mov	r2, r3
 800d732:	3201      	adds	r2, #1
 800d734:	4296      	cmp	r6, r2
 800d736:	54a1      	strb	r1, [r4, r2]
 800d738:	dcfb      	bgt.n	800d732 <__sccl+0x56>
 800d73a:	1af2      	subs	r2, r6, r3
 800d73c:	3a01      	subs	r2, #1
 800d73e:	1c5d      	adds	r5, r3, #1
 800d740:	42b3      	cmp	r3, r6
 800d742:	bfa8      	it	ge
 800d744:	2200      	movge	r2, #0
 800d746:	18ab      	adds	r3, r5, r2
 800d748:	e7e1      	b.n	800d70e <__sccl+0x32>
 800d74a:	4610      	mov	r0, r2
 800d74c:	e7da      	b.n	800d704 <__sccl+0x28>

0800d74e <__submore>:
 800d74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d752:	460c      	mov	r4, r1
 800d754:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d75a:	4299      	cmp	r1, r3
 800d75c:	d11d      	bne.n	800d79a <__submore+0x4c>
 800d75e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d762:	f7fb fb63 	bl	8008e2c <_malloc_r>
 800d766:	b918      	cbnz	r0, 800d770 <__submore+0x22>
 800d768:	f04f 30ff 	mov.w	r0, #4294967295
 800d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d774:	63a3      	str	r3, [r4, #56]	; 0x38
 800d776:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d77a:	6360      	str	r0, [r4, #52]	; 0x34
 800d77c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d780:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d784:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d788:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d78c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d790:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d794:	6020      	str	r0, [r4, #0]
 800d796:	2000      	movs	r0, #0
 800d798:	e7e8      	b.n	800d76c <__submore+0x1e>
 800d79a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d79c:	0077      	lsls	r7, r6, #1
 800d79e:	463a      	mov	r2, r7
 800d7a0:	f7fb fbd0 	bl	8008f44 <_realloc_r>
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d0de      	beq.n	800d768 <__submore+0x1a>
 800d7aa:	eb00 0806 	add.w	r8, r0, r6
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	4632      	mov	r2, r6
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7fd fad5 	bl	800ad62 <memcpy>
 800d7b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d7bc:	f8c4 8000 	str.w	r8, [r4]
 800d7c0:	e7e9      	b.n	800d796 <__submore+0x48>

0800d7c2 <memmove>:
 800d7c2:	4288      	cmp	r0, r1
 800d7c4:	b510      	push	{r4, lr}
 800d7c6:	eb01 0402 	add.w	r4, r1, r2
 800d7ca:	d902      	bls.n	800d7d2 <memmove+0x10>
 800d7cc:	4284      	cmp	r4, r0
 800d7ce:	4623      	mov	r3, r4
 800d7d0:	d807      	bhi.n	800d7e2 <memmove+0x20>
 800d7d2:	1e43      	subs	r3, r0, #1
 800d7d4:	42a1      	cmp	r1, r4
 800d7d6:	d008      	beq.n	800d7ea <memmove+0x28>
 800d7d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7e0:	e7f8      	b.n	800d7d4 <memmove+0x12>
 800d7e2:	4402      	add	r2, r0
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	428a      	cmp	r2, r1
 800d7e8:	d100      	bne.n	800d7ec <memmove+0x2a>
 800d7ea:	bd10      	pop	{r4, pc}
 800d7ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7f4:	e7f7      	b.n	800d7e6 <memmove+0x24>
	...

0800d7f8 <__assert_func>:
 800d7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7fa:	4614      	mov	r4, r2
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	4b09      	ldr	r3, [pc, #36]	; (800d824 <__assert_func+0x2c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4605      	mov	r5, r0
 800d804:	68d8      	ldr	r0, [r3, #12]
 800d806:	b14c      	cbz	r4, 800d81c <__assert_func+0x24>
 800d808:	4b07      	ldr	r3, [pc, #28]	; (800d828 <__assert_func+0x30>)
 800d80a:	9100      	str	r1, [sp, #0]
 800d80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d810:	4906      	ldr	r1, [pc, #24]	; (800d82c <__assert_func+0x34>)
 800d812:	462b      	mov	r3, r5
 800d814:	f000 f898 	bl	800d948 <fiprintf>
 800d818:	f000 f8a8 	bl	800d96c <abort>
 800d81c:	4b04      	ldr	r3, [pc, #16]	; (800d830 <__assert_func+0x38>)
 800d81e:	461c      	mov	r4, r3
 800d820:	e7f3      	b.n	800d80a <__assert_func+0x12>
 800d822:	bf00      	nop
 800d824:	200001d8 	.word	0x200001d8
 800d828:	0800e4d8 	.word	0x0800e4d8
 800d82c:	0800e4e5 	.word	0x0800e4e5
 800d830:	0800e513 	.word	0x0800e513

0800d834 <_calloc_r>:
 800d834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d836:	fba1 2402 	umull	r2, r4, r1, r2
 800d83a:	b94c      	cbnz	r4, 800d850 <_calloc_r+0x1c>
 800d83c:	4611      	mov	r1, r2
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	f7fb faf4 	bl	8008e2c <_malloc_r>
 800d844:	9a01      	ldr	r2, [sp, #4]
 800d846:	4605      	mov	r5, r0
 800d848:	b930      	cbnz	r0, 800d858 <_calloc_r+0x24>
 800d84a:	4628      	mov	r0, r5
 800d84c:	b003      	add	sp, #12
 800d84e:	bd30      	pop	{r4, r5, pc}
 800d850:	220c      	movs	r2, #12
 800d852:	6002      	str	r2, [r0, #0]
 800d854:	2500      	movs	r5, #0
 800d856:	e7f8      	b.n	800d84a <_calloc_r+0x16>
 800d858:	4621      	mov	r1, r4
 800d85a:	f7fd f980 	bl	800ab5e <memset>
 800d85e:	e7f4      	b.n	800d84a <_calloc_r+0x16>

0800d860 <_strtoul_l.constprop.0>:
 800d860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d864:	4f36      	ldr	r7, [pc, #216]	; (800d940 <_strtoul_l.constprop.0+0xe0>)
 800d866:	4686      	mov	lr, r0
 800d868:	460d      	mov	r5, r1
 800d86a:	4628      	mov	r0, r5
 800d86c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d870:	5d3e      	ldrb	r6, [r7, r4]
 800d872:	f016 0608 	ands.w	r6, r6, #8
 800d876:	d1f8      	bne.n	800d86a <_strtoul_l.constprop.0+0xa>
 800d878:	2c2d      	cmp	r4, #45	; 0x2d
 800d87a:	d130      	bne.n	800d8de <_strtoul_l.constprop.0+0x7e>
 800d87c:	782c      	ldrb	r4, [r5, #0]
 800d87e:	2601      	movs	r6, #1
 800d880:	1c85      	adds	r5, r0, #2
 800d882:	2b00      	cmp	r3, #0
 800d884:	d057      	beq.n	800d936 <_strtoul_l.constprop.0+0xd6>
 800d886:	2b10      	cmp	r3, #16
 800d888:	d109      	bne.n	800d89e <_strtoul_l.constprop.0+0x3e>
 800d88a:	2c30      	cmp	r4, #48	; 0x30
 800d88c:	d107      	bne.n	800d89e <_strtoul_l.constprop.0+0x3e>
 800d88e:	7828      	ldrb	r0, [r5, #0]
 800d890:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d894:	2858      	cmp	r0, #88	; 0x58
 800d896:	d149      	bne.n	800d92c <_strtoul_l.constprop.0+0xcc>
 800d898:	786c      	ldrb	r4, [r5, #1]
 800d89a:	2310      	movs	r3, #16
 800d89c:	3502      	adds	r5, #2
 800d89e:	f04f 38ff 	mov.w	r8, #4294967295
 800d8a2:	2700      	movs	r7, #0
 800d8a4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d8a8:	fb03 f908 	mul.w	r9, r3, r8
 800d8ac:	ea6f 0909 	mvn.w	r9, r9
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d8b6:	f1bc 0f09 	cmp.w	ip, #9
 800d8ba:	d815      	bhi.n	800d8e8 <_strtoul_l.constprop.0+0x88>
 800d8bc:	4664      	mov	r4, ip
 800d8be:	42a3      	cmp	r3, r4
 800d8c0:	dd23      	ble.n	800d90a <_strtoul_l.constprop.0+0xaa>
 800d8c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d8c6:	d007      	beq.n	800d8d8 <_strtoul_l.constprop.0+0x78>
 800d8c8:	4580      	cmp	r8, r0
 800d8ca:	d31b      	bcc.n	800d904 <_strtoul_l.constprop.0+0xa4>
 800d8cc:	d101      	bne.n	800d8d2 <_strtoul_l.constprop.0+0x72>
 800d8ce:	45a1      	cmp	r9, r4
 800d8d0:	db18      	blt.n	800d904 <_strtoul_l.constprop.0+0xa4>
 800d8d2:	fb00 4003 	mla	r0, r0, r3, r4
 800d8d6:	2701      	movs	r7, #1
 800d8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8dc:	e7e9      	b.n	800d8b2 <_strtoul_l.constprop.0+0x52>
 800d8de:	2c2b      	cmp	r4, #43	; 0x2b
 800d8e0:	bf04      	itt	eq
 800d8e2:	782c      	ldrbeq	r4, [r5, #0]
 800d8e4:	1c85      	addeq	r5, r0, #2
 800d8e6:	e7cc      	b.n	800d882 <_strtoul_l.constprop.0+0x22>
 800d8e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d8ec:	f1bc 0f19 	cmp.w	ip, #25
 800d8f0:	d801      	bhi.n	800d8f6 <_strtoul_l.constprop.0+0x96>
 800d8f2:	3c37      	subs	r4, #55	; 0x37
 800d8f4:	e7e3      	b.n	800d8be <_strtoul_l.constprop.0+0x5e>
 800d8f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d8fa:	f1bc 0f19 	cmp.w	ip, #25
 800d8fe:	d804      	bhi.n	800d90a <_strtoul_l.constprop.0+0xaa>
 800d900:	3c57      	subs	r4, #87	; 0x57
 800d902:	e7dc      	b.n	800d8be <_strtoul_l.constprop.0+0x5e>
 800d904:	f04f 37ff 	mov.w	r7, #4294967295
 800d908:	e7e6      	b.n	800d8d8 <_strtoul_l.constprop.0+0x78>
 800d90a:	1c7b      	adds	r3, r7, #1
 800d90c:	d106      	bne.n	800d91c <_strtoul_l.constprop.0+0xbc>
 800d90e:	2322      	movs	r3, #34	; 0x22
 800d910:	f8ce 3000 	str.w	r3, [lr]
 800d914:	4638      	mov	r0, r7
 800d916:	b932      	cbnz	r2, 800d926 <_strtoul_l.constprop.0+0xc6>
 800d918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d91c:	b106      	cbz	r6, 800d920 <_strtoul_l.constprop.0+0xc0>
 800d91e:	4240      	negs	r0, r0
 800d920:	2a00      	cmp	r2, #0
 800d922:	d0f9      	beq.n	800d918 <_strtoul_l.constprop.0+0xb8>
 800d924:	b107      	cbz	r7, 800d928 <_strtoul_l.constprop.0+0xc8>
 800d926:	1e69      	subs	r1, r5, #1
 800d928:	6011      	str	r1, [r2, #0]
 800d92a:	e7f5      	b.n	800d918 <_strtoul_l.constprop.0+0xb8>
 800d92c:	2430      	movs	r4, #48	; 0x30
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1b5      	bne.n	800d89e <_strtoul_l.constprop.0+0x3e>
 800d932:	2308      	movs	r3, #8
 800d934:	e7b3      	b.n	800d89e <_strtoul_l.constprop.0+0x3e>
 800d936:	2c30      	cmp	r4, #48	; 0x30
 800d938:	d0a9      	beq.n	800d88e <_strtoul_l.constprop.0+0x2e>
 800d93a:	230a      	movs	r3, #10
 800d93c:	e7af      	b.n	800d89e <_strtoul_l.constprop.0+0x3e>
 800d93e:	bf00      	nop
 800d940:	0800e129 	.word	0x0800e129

0800d944 <_strtoul_r>:
 800d944:	f7ff bf8c 	b.w	800d860 <_strtoul_l.constprop.0>

0800d948 <fiprintf>:
 800d948:	b40e      	push	{r1, r2, r3}
 800d94a:	b503      	push	{r0, r1, lr}
 800d94c:	4601      	mov	r1, r0
 800d94e:	ab03      	add	r3, sp, #12
 800d950:	4805      	ldr	r0, [pc, #20]	; (800d968 <fiprintf+0x20>)
 800d952:	f853 2b04 	ldr.w	r2, [r3], #4
 800d956:	6800      	ldr	r0, [r0, #0]
 800d958:	9301      	str	r3, [sp, #4]
 800d95a:	f000 f837 	bl	800d9cc <_vfiprintf_r>
 800d95e:	b002      	add	sp, #8
 800d960:	f85d eb04 	ldr.w	lr, [sp], #4
 800d964:	b003      	add	sp, #12
 800d966:	4770      	bx	lr
 800d968:	200001d8 	.word	0x200001d8

0800d96c <abort>:
 800d96c:	b508      	push	{r3, lr}
 800d96e:	2006      	movs	r0, #6
 800d970:	f000 fa04 	bl	800dd7c <raise>
 800d974:	2001      	movs	r0, #1
 800d976:	f7f6 f81b 	bl	80039b0 <_exit>

0800d97a <__sfputc_r>:
 800d97a:	6893      	ldr	r3, [r2, #8]
 800d97c:	3b01      	subs	r3, #1
 800d97e:	2b00      	cmp	r3, #0
 800d980:	b410      	push	{r4}
 800d982:	6093      	str	r3, [r2, #8]
 800d984:	da08      	bge.n	800d998 <__sfputc_r+0x1e>
 800d986:	6994      	ldr	r4, [r2, #24]
 800d988:	42a3      	cmp	r3, r4
 800d98a:	db01      	blt.n	800d990 <__sfputc_r+0x16>
 800d98c:	290a      	cmp	r1, #10
 800d98e:	d103      	bne.n	800d998 <__sfputc_r+0x1e>
 800d990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d994:	f000 b934 	b.w	800dc00 <__swbuf_r>
 800d998:	6813      	ldr	r3, [r2, #0]
 800d99a:	1c58      	adds	r0, r3, #1
 800d99c:	6010      	str	r0, [r2, #0]
 800d99e:	7019      	strb	r1, [r3, #0]
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <__sfputs_r>:
 800d9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460f      	mov	r7, r1
 800d9ae:	4614      	mov	r4, r2
 800d9b0:	18d5      	adds	r5, r2, r3
 800d9b2:	42ac      	cmp	r4, r5
 800d9b4:	d101      	bne.n	800d9ba <__sfputs_r+0x12>
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	e007      	b.n	800d9ca <__sfputs_r+0x22>
 800d9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9be:	463a      	mov	r2, r7
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f7ff ffda 	bl	800d97a <__sfputc_r>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	d1f3      	bne.n	800d9b2 <__sfputs_r+0xa>
 800d9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d9cc <_vfiprintf_r>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	b09d      	sub	sp, #116	; 0x74
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	4698      	mov	r8, r3
 800d9d8:	4606      	mov	r6, r0
 800d9da:	b118      	cbz	r0, 800d9e4 <_vfiprintf_r+0x18>
 800d9dc:	6a03      	ldr	r3, [r0, #32]
 800d9de:	b90b      	cbnz	r3, 800d9e4 <_vfiprintf_r+0x18>
 800d9e0:	f7fc fff6 	bl	800a9d0 <__sinit>
 800d9e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e6:	07d9      	lsls	r1, r3, #31
 800d9e8:	d405      	bmi.n	800d9f6 <_vfiprintf_r+0x2a>
 800d9ea:	89ab      	ldrh	r3, [r5, #12]
 800d9ec:	059a      	lsls	r2, r3, #22
 800d9ee:	d402      	bmi.n	800d9f6 <_vfiprintf_r+0x2a>
 800d9f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9f2:	f7fd f9b4 	bl	800ad5e <__retarget_lock_acquire_recursive>
 800d9f6:	89ab      	ldrh	r3, [r5, #12]
 800d9f8:	071b      	lsls	r3, r3, #28
 800d9fa:	d501      	bpl.n	800da00 <_vfiprintf_r+0x34>
 800d9fc:	692b      	ldr	r3, [r5, #16]
 800d9fe:	b99b      	cbnz	r3, 800da28 <_vfiprintf_r+0x5c>
 800da00:	4629      	mov	r1, r5
 800da02:	4630      	mov	r0, r6
 800da04:	f000 f93a 	bl	800dc7c <__swsetup_r>
 800da08:	b170      	cbz	r0, 800da28 <_vfiprintf_r+0x5c>
 800da0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da0c:	07dc      	lsls	r4, r3, #31
 800da0e:	d504      	bpl.n	800da1a <_vfiprintf_r+0x4e>
 800da10:	f04f 30ff 	mov.w	r0, #4294967295
 800da14:	b01d      	add	sp, #116	; 0x74
 800da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1a:	89ab      	ldrh	r3, [r5, #12]
 800da1c:	0598      	lsls	r0, r3, #22
 800da1e:	d4f7      	bmi.n	800da10 <_vfiprintf_r+0x44>
 800da20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da22:	f7fd f99d 	bl	800ad60 <__retarget_lock_release_recursive>
 800da26:	e7f3      	b.n	800da10 <_vfiprintf_r+0x44>
 800da28:	2300      	movs	r3, #0
 800da2a:	9309      	str	r3, [sp, #36]	; 0x24
 800da2c:	2320      	movs	r3, #32
 800da2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da32:	f8cd 800c 	str.w	r8, [sp, #12]
 800da36:	2330      	movs	r3, #48	; 0x30
 800da38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dbec <_vfiprintf_r+0x220>
 800da3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da40:	f04f 0901 	mov.w	r9, #1
 800da44:	4623      	mov	r3, r4
 800da46:	469a      	mov	sl, r3
 800da48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da4c:	b10a      	cbz	r2, 800da52 <_vfiprintf_r+0x86>
 800da4e:	2a25      	cmp	r2, #37	; 0x25
 800da50:	d1f9      	bne.n	800da46 <_vfiprintf_r+0x7a>
 800da52:	ebba 0b04 	subs.w	fp, sl, r4
 800da56:	d00b      	beq.n	800da70 <_vfiprintf_r+0xa4>
 800da58:	465b      	mov	r3, fp
 800da5a:	4622      	mov	r2, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff ffa2 	bl	800d9a8 <__sfputs_r>
 800da64:	3001      	adds	r0, #1
 800da66:	f000 80a9 	beq.w	800dbbc <_vfiprintf_r+0x1f0>
 800da6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da6c:	445a      	add	r2, fp
 800da6e:	9209      	str	r2, [sp, #36]	; 0x24
 800da70:	f89a 3000 	ldrb.w	r3, [sl]
 800da74:	2b00      	cmp	r3, #0
 800da76:	f000 80a1 	beq.w	800dbbc <_vfiprintf_r+0x1f0>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f04f 32ff 	mov.w	r2, #4294967295
 800da80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da84:	f10a 0a01 	add.w	sl, sl, #1
 800da88:	9304      	str	r3, [sp, #16]
 800da8a:	9307      	str	r3, [sp, #28]
 800da8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da90:	931a      	str	r3, [sp, #104]	; 0x68
 800da92:	4654      	mov	r4, sl
 800da94:	2205      	movs	r2, #5
 800da96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da9a:	4854      	ldr	r0, [pc, #336]	; (800dbec <_vfiprintf_r+0x220>)
 800da9c:	f7f2 fb98 	bl	80001d0 <memchr>
 800daa0:	9a04      	ldr	r2, [sp, #16]
 800daa2:	b9d8      	cbnz	r0, 800dadc <_vfiprintf_r+0x110>
 800daa4:	06d1      	lsls	r1, r2, #27
 800daa6:	bf44      	itt	mi
 800daa8:	2320      	movmi	r3, #32
 800daaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daae:	0713      	lsls	r3, r2, #28
 800dab0:	bf44      	itt	mi
 800dab2:	232b      	movmi	r3, #43	; 0x2b
 800dab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab8:	f89a 3000 	ldrb.w	r3, [sl]
 800dabc:	2b2a      	cmp	r3, #42	; 0x2a
 800dabe:	d015      	beq.n	800daec <_vfiprintf_r+0x120>
 800dac0:	9a07      	ldr	r2, [sp, #28]
 800dac2:	4654      	mov	r4, sl
 800dac4:	2000      	movs	r0, #0
 800dac6:	f04f 0c0a 	mov.w	ip, #10
 800daca:	4621      	mov	r1, r4
 800dacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dad0:	3b30      	subs	r3, #48	; 0x30
 800dad2:	2b09      	cmp	r3, #9
 800dad4:	d94d      	bls.n	800db72 <_vfiprintf_r+0x1a6>
 800dad6:	b1b0      	cbz	r0, 800db06 <_vfiprintf_r+0x13a>
 800dad8:	9207      	str	r2, [sp, #28]
 800dada:	e014      	b.n	800db06 <_vfiprintf_r+0x13a>
 800dadc:	eba0 0308 	sub.w	r3, r0, r8
 800dae0:	fa09 f303 	lsl.w	r3, r9, r3
 800dae4:	4313      	orrs	r3, r2
 800dae6:	9304      	str	r3, [sp, #16]
 800dae8:	46a2      	mov	sl, r4
 800daea:	e7d2      	b.n	800da92 <_vfiprintf_r+0xc6>
 800daec:	9b03      	ldr	r3, [sp, #12]
 800daee:	1d19      	adds	r1, r3, #4
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	9103      	str	r1, [sp, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	bfbb      	ittet	lt
 800daf8:	425b      	neglt	r3, r3
 800dafa:	f042 0202 	orrlt.w	r2, r2, #2
 800dafe:	9307      	strge	r3, [sp, #28]
 800db00:	9307      	strlt	r3, [sp, #28]
 800db02:	bfb8      	it	lt
 800db04:	9204      	strlt	r2, [sp, #16]
 800db06:	7823      	ldrb	r3, [r4, #0]
 800db08:	2b2e      	cmp	r3, #46	; 0x2e
 800db0a:	d10c      	bne.n	800db26 <_vfiprintf_r+0x15a>
 800db0c:	7863      	ldrb	r3, [r4, #1]
 800db0e:	2b2a      	cmp	r3, #42	; 0x2a
 800db10:	d134      	bne.n	800db7c <_vfiprintf_r+0x1b0>
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	1d1a      	adds	r2, r3, #4
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	9203      	str	r2, [sp, #12]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	bfb8      	it	lt
 800db1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800db22:	3402      	adds	r4, #2
 800db24:	9305      	str	r3, [sp, #20]
 800db26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dbfc <_vfiprintf_r+0x230>
 800db2a:	7821      	ldrb	r1, [r4, #0]
 800db2c:	2203      	movs	r2, #3
 800db2e:	4650      	mov	r0, sl
 800db30:	f7f2 fb4e 	bl	80001d0 <memchr>
 800db34:	b138      	cbz	r0, 800db46 <_vfiprintf_r+0x17a>
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	eba0 000a 	sub.w	r0, r0, sl
 800db3c:	2240      	movs	r2, #64	; 0x40
 800db3e:	4082      	lsls	r2, r0
 800db40:	4313      	orrs	r3, r2
 800db42:	3401      	adds	r4, #1
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4a:	4829      	ldr	r0, [pc, #164]	; (800dbf0 <_vfiprintf_r+0x224>)
 800db4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db50:	2206      	movs	r2, #6
 800db52:	f7f2 fb3d 	bl	80001d0 <memchr>
 800db56:	2800      	cmp	r0, #0
 800db58:	d03f      	beq.n	800dbda <_vfiprintf_r+0x20e>
 800db5a:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <_vfiprintf_r+0x228>)
 800db5c:	bb1b      	cbnz	r3, 800dba6 <_vfiprintf_r+0x1da>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	3307      	adds	r3, #7
 800db62:	f023 0307 	bic.w	r3, r3, #7
 800db66:	3308      	adds	r3, #8
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6c:	443b      	add	r3, r7
 800db6e:	9309      	str	r3, [sp, #36]	; 0x24
 800db70:	e768      	b.n	800da44 <_vfiprintf_r+0x78>
 800db72:	fb0c 3202 	mla	r2, ip, r2, r3
 800db76:	460c      	mov	r4, r1
 800db78:	2001      	movs	r0, #1
 800db7a:	e7a6      	b.n	800daca <_vfiprintf_r+0xfe>
 800db7c:	2300      	movs	r3, #0
 800db7e:	3401      	adds	r4, #1
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	4619      	mov	r1, r3
 800db84:	f04f 0c0a 	mov.w	ip, #10
 800db88:	4620      	mov	r0, r4
 800db8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db8e:	3a30      	subs	r2, #48	; 0x30
 800db90:	2a09      	cmp	r2, #9
 800db92:	d903      	bls.n	800db9c <_vfiprintf_r+0x1d0>
 800db94:	2b00      	cmp	r3, #0
 800db96:	d0c6      	beq.n	800db26 <_vfiprintf_r+0x15a>
 800db98:	9105      	str	r1, [sp, #20]
 800db9a:	e7c4      	b.n	800db26 <_vfiprintf_r+0x15a>
 800db9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dba0:	4604      	mov	r4, r0
 800dba2:	2301      	movs	r3, #1
 800dba4:	e7f0      	b.n	800db88 <_vfiprintf_r+0x1bc>
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	462a      	mov	r2, r5
 800dbac:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <_vfiprintf_r+0x22c>)
 800dbae:	a904      	add	r1, sp, #16
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f7fc f8ab 	bl	8009d0c <_printf_float>
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	1c78      	adds	r0, r7, #1
 800dbba:	d1d6      	bne.n	800db6a <_vfiprintf_r+0x19e>
 800dbbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbbe:	07d9      	lsls	r1, r3, #31
 800dbc0:	d405      	bmi.n	800dbce <_vfiprintf_r+0x202>
 800dbc2:	89ab      	ldrh	r3, [r5, #12]
 800dbc4:	059a      	lsls	r2, r3, #22
 800dbc6:	d402      	bmi.n	800dbce <_vfiprintf_r+0x202>
 800dbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbca:	f7fd f8c9 	bl	800ad60 <__retarget_lock_release_recursive>
 800dbce:	89ab      	ldrh	r3, [r5, #12]
 800dbd0:	065b      	lsls	r3, r3, #25
 800dbd2:	f53f af1d 	bmi.w	800da10 <_vfiprintf_r+0x44>
 800dbd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd8:	e71c      	b.n	800da14 <_vfiprintf_r+0x48>
 800dbda:	ab03      	add	r3, sp, #12
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	462a      	mov	r2, r5
 800dbe0:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <_vfiprintf_r+0x22c>)
 800dbe2:	a904      	add	r1, sp, #16
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f7fc fb35 	bl	800a254 <_printf_i>
 800dbea:	e7e4      	b.n	800dbb6 <_vfiprintf_r+0x1ea>
 800dbec:	0800e4ac 	.word	0x0800e4ac
 800dbf0:	0800e4b6 	.word	0x0800e4b6
 800dbf4:	08009d0d 	.word	0x08009d0d
 800dbf8:	0800d9a9 	.word	0x0800d9a9
 800dbfc:	0800e4b2 	.word	0x0800e4b2

0800dc00 <__swbuf_r>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	460e      	mov	r6, r1
 800dc04:	4614      	mov	r4, r2
 800dc06:	4605      	mov	r5, r0
 800dc08:	b118      	cbz	r0, 800dc12 <__swbuf_r+0x12>
 800dc0a:	6a03      	ldr	r3, [r0, #32]
 800dc0c:	b90b      	cbnz	r3, 800dc12 <__swbuf_r+0x12>
 800dc0e:	f7fc fedf 	bl	800a9d0 <__sinit>
 800dc12:	69a3      	ldr	r3, [r4, #24]
 800dc14:	60a3      	str	r3, [r4, #8]
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	071a      	lsls	r2, r3, #28
 800dc1a:	d525      	bpl.n	800dc68 <__swbuf_r+0x68>
 800dc1c:	6923      	ldr	r3, [r4, #16]
 800dc1e:	b31b      	cbz	r3, 800dc68 <__swbuf_r+0x68>
 800dc20:	6823      	ldr	r3, [r4, #0]
 800dc22:	6922      	ldr	r2, [r4, #16]
 800dc24:	1a98      	subs	r0, r3, r2
 800dc26:	6963      	ldr	r3, [r4, #20]
 800dc28:	b2f6      	uxtb	r6, r6
 800dc2a:	4283      	cmp	r3, r0
 800dc2c:	4637      	mov	r7, r6
 800dc2e:	dc04      	bgt.n	800dc3a <__swbuf_r+0x3a>
 800dc30:	4621      	mov	r1, r4
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7ff fd2a 	bl	800d68c <_fflush_r>
 800dc38:	b9e0      	cbnz	r0, 800dc74 <__swbuf_r+0x74>
 800dc3a:	68a3      	ldr	r3, [r4, #8]
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	60a3      	str	r3, [r4, #8]
 800dc40:	6823      	ldr	r3, [r4, #0]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	6022      	str	r2, [r4, #0]
 800dc46:	701e      	strb	r6, [r3, #0]
 800dc48:	6962      	ldr	r2, [r4, #20]
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d004      	beq.n	800dc5a <__swbuf_r+0x5a>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	07db      	lsls	r3, r3, #31
 800dc54:	d506      	bpl.n	800dc64 <__swbuf_r+0x64>
 800dc56:	2e0a      	cmp	r6, #10
 800dc58:	d104      	bne.n	800dc64 <__swbuf_r+0x64>
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	f7ff fd15 	bl	800d68c <_fflush_r>
 800dc62:	b938      	cbnz	r0, 800dc74 <__swbuf_r+0x74>
 800dc64:	4638      	mov	r0, r7
 800dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	f000 f806 	bl	800dc7c <__swsetup_r>
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d0d5      	beq.n	800dc20 <__swbuf_r+0x20>
 800dc74:	f04f 37ff 	mov.w	r7, #4294967295
 800dc78:	e7f4      	b.n	800dc64 <__swbuf_r+0x64>
	...

0800dc7c <__swsetup_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4b2a      	ldr	r3, [pc, #168]	; (800dd28 <__swsetup_r+0xac>)
 800dc80:	4605      	mov	r5, r0
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	460c      	mov	r4, r1
 800dc86:	b118      	cbz	r0, 800dc90 <__swsetup_r+0x14>
 800dc88:	6a03      	ldr	r3, [r0, #32]
 800dc8a:	b90b      	cbnz	r3, 800dc90 <__swsetup_r+0x14>
 800dc8c:	f7fc fea0 	bl	800a9d0 <__sinit>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc96:	0718      	lsls	r0, r3, #28
 800dc98:	d422      	bmi.n	800dce0 <__swsetup_r+0x64>
 800dc9a:	06d9      	lsls	r1, r3, #27
 800dc9c:	d407      	bmi.n	800dcae <__swsetup_r+0x32>
 800dc9e:	2309      	movs	r3, #9
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	e034      	b.n	800dd18 <__swsetup_r+0x9c>
 800dcae:	0758      	lsls	r0, r3, #29
 800dcb0:	d512      	bpl.n	800dcd8 <__swsetup_r+0x5c>
 800dcb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb4:	b141      	cbz	r1, 800dcc8 <__swsetup_r+0x4c>
 800dcb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcba:	4299      	cmp	r1, r3
 800dcbc:	d002      	beq.n	800dcc4 <__swsetup_r+0x48>
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f7fd fee8 	bl	800ba94 <_free_r>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6363      	str	r3, [r4, #52]	; 0x34
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcce:	81a3      	strh	r3, [r4, #12]
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	6063      	str	r3, [r4, #4]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f043 0308 	orr.w	r3, r3, #8
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	b94b      	cbnz	r3, 800dcf8 <__swsetup_r+0x7c>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcee:	d003      	beq.n	800dcf8 <__swsetup_r+0x7c>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f000 f884 	bl	800de00 <__smakebuf_r>
 800dcf8:	89a0      	ldrh	r0, [r4, #12]
 800dcfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcfe:	f010 0301 	ands.w	r3, r0, #1
 800dd02:	d00a      	beq.n	800dd1a <__swsetup_r+0x9e>
 800dd04:	2300      	movs	r3, #0
 800dd06:	60a3      	str	r3, [r4, #8]
 800dd08:	6963      	ldr	r3, [r4, #20]
 800dd0a:	425b      	negs	r3, r3
 800dd0c:	61a3      	str	r3, [r4, #24]
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	b943      	cbnz	r3, 800dd24 <__swsetup_r+0xa8>
 800dd12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd16:	d1c4      	bne.n	800dca2 <__swsetup_r+0x26>
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	0781      	lsls	r1, r0, #30
 800dd1c:	bf58      	it	pl
 800dd1e:	6963      	ldrpl	r3, [r4, #20]
 800dd20:	60a3      	str	r3, [r4, #8]
 800dd22:	e7f4      	b.n	800dd0e <__swsetup_r+0x92>
 800dd24:	2000      	movs	r0, #0
 800dd26:	e7f7      	b.n	800dd18 <__swsetup_r+0x9c>
 800dd28:	200001d8 	.word	0x200001d8

0800dd2c <_raise_r>:
 800dd2c:	291f      	cmp	r1, #31
 800dd2e:	b538      	push	{r3, r4, r5, lr}
 800dd30:	4604      	mov	r4, r0
 800dd32:	460d      	mov	r5, r1
 800dd34:	d904      	bls.n	800dd40 <_raise_r+0x14>
 800dd36:	2316      	movs	r3, #22
 800dd38:	6003      	str	r3, [r0, #0]
 800dd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
 800dd40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dd42:	b112      	cbz	r2, 800dd4a <_raise_r+0x1e>
 800dd44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd48:	b94b      	cbnz	r3, 800dd5e <_raise_r+0x32>
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 f830 	bl	800ddb0 <_getpid_r>
 800dd50:	462a      	mov	r2, r5
 800dd52:	4601      	mov	r1, r0
 800dd54:	4620      	mov	r0, r4
 800dd56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd5a:	f000 b817 	b.w	800dd8c <_kill_r>
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d00a      	beq.n	800dd78 <_raise_r+0x4c>
 800dd62:	1c59      	adds	r1, r3, #1
 800dd64:	d103      	bne.n	800dd6e <_raise_r+0x42>
 800dd66:	2316      	movs	r3, #22
 800dd68:	6003      	str	r3, [r0, #0]
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	e7e7      	b.n	800dd3e <_raise_r+0x12>
 800dd6e:	2400      	movs	r4, #0
 800dd70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dd74:	4628      	mov	r0, r5
 800dd76:	4798      	blx	r3
 800dd78:	2000      	movs	r0, #0
 800dd7a:	e7e0      	b.n	800dd3e <_raise_r+0x12>

0800dd7c <raise>:
 800dd7c:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <raise+0xc>)
 800dd7e:	4601      	mov	r1, r0
 800dd80:	6818      	ldr	r0, [r3, #0]
 800dd82:	f7ff bfd3 	b.w	800dd2c <_raise_r>
 800dd86:	bf00      	nop
 800dd88:	200001d8 	.word	0x200001d8

0800dd8c <_kill_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_kill_r+0x20>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f7f5 fdf9 	bl	8003990 <_kill>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d102      	bne.n	800dda8 <_kill_r+0x1c>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b103      	cbz	r3, 800dda8 <_kill_r+0x1c>
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	20005a60 	.word	0x20005a60

0800ddb0 <_getpid_r>:
 800ddb0:	f7f5 bde6 	b.w	8003980 <_getpid>

0800ddb4 <__swhatbuf_r>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	b096      	sub	sp, #88	; 0x58
 800ddc0:	4615      	mov	r5, r2
 800ddc2:	461e      	mov	r6, r3
 800ddc4:	da0d      	bge.n	800dde2 <__swhatbuf_r+0x2e>
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ddcc:	f04f 0100 	mov.w	r1, #0
 800ddd0:	bf0c      	ite	eq
 800ddd2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ddd6:	2340      	movne	r3, #64	; 0x40
 800ddd8:	2000      	movs	r0, #0
 800ddda:	6031      	str	r1, [r6, #0]
 800dddc:	602b      	str	r3, [r5, #0]
 800ddde:	b016      	add	sp, #88	; 0x58
 800dde0:	bd70      	pop	{r4, r5, r6, pc}
 800dde2:	466a      	mov	r2, sp
 800dde4:	f000 f848 	bl	800de78 <_fstat_r>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	dbec      	blt.n	800ddc6 <__swhatbuf_r+0x12>
 800ddec:	9901      	ldr	r1, [sp, #4]
 800ddee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ddf2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ddf6:	4259      	negs	r1, r3
 800ddf8:	4159      	adcs	r1, r3
 800ddfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddfe:	e7eb      	b.n	800ddd8 <__swhatbuf_r+0x24>

0800de00 <__smakebuf_r>:
 800de00:	898b      	ldrh	r3, [r1, #12]
 800de02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de04:	079d      	lsls	r5, r3, #30
 800de06:	4606      	mov	r6, r0
 800de08:	460c      	mov	r4, r1
 800de0a:	d507      	bpl.n	800de1c <__smakebuf_r+0x1c>
 800de0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	6123      	str	r3, [r4, #16]
 800de14:	2301      	movs	r3, #1
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	b002      	add	sp, #8
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	ab01      	add	r3, sp, #4
 800de1e:	466a      	mov	r2, sp
 800de20:	f7ff ffc8 	bl	800ddb4 <__swhatbuf_r>
 800de24:	9900      	ldr	r1, [sp, #0]
 800de26:	4605      	mov	r5, r0
 800de28:	4630      	mov	r0, r6
 800de2a:	f7fa ffff 	bl	8008e2c <_malloc_r>
 800de2e:	b948      	cbnz	r0, 800de44 <__smakebuf_r+0x44>
 800de30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de34:	059a      	lsls	r2, r3, #22
 800de36:	d4ef      	bmi.n	800de18 <__smakebuf_r+0x18>
 800de38:	f023 0303 	bic.w	r3, r3, #3
 800de3c:	f043 0302 	orr.w	r3, r3, #2
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	e7e3      	b.n	800de0c <__smakebuf_r+0xc>
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	6020      	str	r0, [r4, #0]
 800de48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	9b00      	ldr	r3, [sp, #0]
 800de50:	6163      	str	r3, [r4, #20]
 800de52:	9b01      	ldr	r3, [sp, #4]
 800de54:	6120      	str	r0, [r4, #16]
 800de56:	b15b      	cbz	r3, 800de70 <__smakebuf_r+0x70>
 800de58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de5c:	4630      	mov	r0, r6
 800de5e:	f000 f81d 	bl	800de9c <_isatty_r>
 800de62:	b128      	cbz	r0, 800de70 <__smakebuf_r+0x70>
 800de64:	89a3      	ldrh	r3, [r4, #12]
 800de66:	f023 0303 	bic.w	r3, r3, #3
 800de6a:	f043 0301 	orr.w	r3, r3, #1
 800de6e:	81a3      	strh	r3, [r4, #12]
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	431d      	orrs	r5, r3
 800de74:	81a5      	strh	r5, [r4, #12]
 800de76:	e7cf      	b.n	800de18 <__smakebuf_r+0x18>

0800de78 <_fstat_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d07      	ldr	r5, [pc, #28]	; (800de98 <_fstat_r+0x20>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	4611      	mov	r1, r2
 800de84:	602b      	str	r3, [r5, #0]
 800de86:	f7f5 fde2 	bl	8003a4e <_fstat>
 800de8a:	1c43      	adds	r3, r0, #1
 800de8c:	d102      	bne.n	800de94 <_fstat_r+0x1c>
 800de8e:	682b      	ldr	r3, [r5, #0]
 800de90:	b103      	cbz	r3, 800de94 <_fstat_r+0x1c>
 800de92:	6023      	str	r3, [r4, #0]
 800de94:	bd38      	pop	{r3, r4, r5, pc}
 800de96:	bf00      	nop
 800de98:	20005a60 	.word	0x20005a60

0800de9c <_isatty_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	4d06      	ldr	r5, [pc, #24]	; (800deb8 <_isatty_r+0x1c>)
 800dea0:	2300      	movs	r3, #0
 800dea2:	4604      	mov	r4, r0
 800dea4:	4608      	mov	r0, r1
 800dea6:	602b      	str	r3, [r5, #0]
 800dea8:	f7f5 fde1 	bl	8003a6e <_isatty>
 800deac:	1c43      	adds	r3, r0, #1
 800deae:	d102      	bne.n	800deb6 <_isatty_r+0x1a>
 800deb0:	682b      	ldr	r3, [r5, #0]
 800deb2:	b103      	cbz	r3, 800deb6 <_isatty_r+0x1a>
 800deb4:	6023      	str	r3, [r4, #0]
 800deb6:	bd38      	pop	{r3, r4, r5, pc}
 800deb8:	20005a60 	.word	0x20005a60

0800debc <_init>:
 800debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800debe:	bf00      	nop
 800dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dec2:	bc08      	pop	{r3}
 800dec4:	469e      	mov	lr, r3
 800dec6:	4770      	bx	lr

0800dec8 <_fini>:
 800dec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deca:	bf00      	nop
 800decc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dece:	bc08      	pop	{r3}
 800ded0:	469e      	mov	lr, r3
 800ded2:	4770      	bx	lr
