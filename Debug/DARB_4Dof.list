
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d834  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800d9c8  0800d9c8  0001d9c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfb4  0800dfb4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfb4  0800dfb4  0001dfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfbc  0800dfbc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfbc  0800dfbc  0001dfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfc0  0800dfc0  0001dfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800dfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000057c0  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200059a0  200059a0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015151  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032e6  00000000  00000000  000353a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001370  00000000  00000000  00038688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f10  00000000  00000000  000399f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023786  00000000  00000000  0003a908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016bc0  00000000  00000000  0005e08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d708c  00000000  00000000  00074c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000068c0  00000000  00000000  0014bcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0015259c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9ac 	.word	0x0800d9ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d9ac 	.word	0x0800d9ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6178      	str	r0, [r7, #20]
 8000ff8:	6139      	str	r1, [r7, #16]
 8000ffa:	60fa      	str	r2, [r7, #12]
 8000ffc:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 800100c:	6979      	ldr	r1, [r7, #20]
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	0000      	movs	r0, r0
 8001024:	0000      	movs	r0, r0
	...

08001028 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001048:	441a      	add	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa5e 	bl	8000524 <__aeabi_i2d>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800106e:	f7ff fbed 	bl	800084c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4614      	mov	r4, r2
 8001078:	461d      	mov	r5, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff fbdd 	bl	800084c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <SpeedReadNonReset+0x118>)
 80010a0:	f7ff faaa 	bl	80005f8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001130 <SpeedReadNonReset+0x108>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4614      	mov	r4, r2
 80010c4:	461d      	mov	r5, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff f8d5 	bl	800028c <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010f0:	a311      	add	r3, pc, #68	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	ced91687 	.word	0xced91687
 8001134:	3feb53f7 	.word	0x3feb53f7
 8001138:	532617c2 	.word	0x532617c2
 800113c:	3fb2a305 	.word	0x3fb2a305
 8001140:	404e0000 	.word	0x404e0000

08001144 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <CountRead+0x52>
	{
		return enc->count_X4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ca 	bl	8000524 <__aeabi_i2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e033      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e1b      	ldrb	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <CountRead+0x64>
 80011a6:	3303      	adds	r3, #3
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9b5 	bl	8000524 <__aeabi_i2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e01e      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d116      	bne.n	80011f6 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011f4:	e003      	b.n	80011fe <CountRead+0xba>
	}else {
		return 0;
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
	}
}
 80011fe:	ec43 2b17 	vmov	d7, r2, r3
 8001202:	eeb0 0a47 	vmov.f32	s0, s14
 8001206:	eef0 0a67 	vmov.f32	s1, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	}
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfb8      	it	lt
 8001258:	425b      	neglt	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da4d      	bge.n	800130e <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <Drive+0x48>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e018      	b.n	80012b8 <Drive+0x7a>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d105      	bne.n	800129a <Drive+0x5c>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
 8001298:	e00e      	b.n	80012b8 <Drive+0x7a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d105      	bne.n	80012ae <Drive+0x70>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ac:	e004      	b.n	80012b8 <Drive+0x7a>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <Drive+0x90>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	89da      	ldrh	r2, [r3, #14]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80012cc:	e0b7      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d107      	bne.n	80012e6 <Drive+0xa8>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	89d9      	ldrh	r1, [r3, #14]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	6393      	str	r3, [r2, #56]	; 0x38
 80012e4:	e0ab      	b.n	800143e <Drive+0x200>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d107      	bne.n	80012fe <Drive+0xc0>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	89d9      	ldrh	r1, [r3, #14]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	460b      	mov	r3, r1
 80012fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012fc:	e09f      	b.n	800143e <Drive+0x200>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	89d9      	ldrh	r1, [r3, #14]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800130c:	e097      	b.n	800143e <Drive+0x200>
	else if(Input>0){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd4d      	ble.n	80013b0 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <Drive+0xec>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	89da      	ldrh	r2, [r3, #14]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
 8001328:	e01e      	b.n	8001368 <Drive+0x12a>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d107      	bne.n	8001342 <Drive+0x104>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	89d9      	ldrh	r1, [r3, #14]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	6393      	str	r3, [r2, #56]	; 0x38
 8001340:	e012      	b.n	8001368 <Drive+0x12a>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d107      	bne.n	800135a <Drive+0x11c>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	89d9      	ldrh	r1, [r3, #14]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001358:	e006      	b.n	8001368 <Drive+0x12a>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	89d9      	ldrh	r1, [r3, #14]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	460b      	mov	r3, r1
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <Drive+0x13e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
}
 800137a:	e060      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d105      	bne.n	8001390 <Drive+0x152>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	6393      	str	r3, [r2, #56]	; 0x38
 800138e:	e056      	b.n	800143e <Drive+0x200>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d105      	bne.n	80013a4 <Drive+0x166>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013a2:	e04c      	b.n	800143e <Drive+0x200>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ae:	e046      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <Drive+0x186>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
 80013c2:	e018      	b.n	80013f6 <Drive+0x1b8>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d105      	bne.n	80013d8 <Drive+0x19a>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	6393      	str	r3, [r2, #56]	; 0x38
 80013d6:	e00e      	b.n	80013f6 <Drive+0x1b8>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d105      	bne.n	80013ec <Drive+0x1ae>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ea:	e004      	b.n	80013f6 <Drive+0x1b8>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <Drive+0x1cc>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001408:	e019      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d105      	bne.n	800141e <Drive+0x1e0>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800141c:	e00f      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d105      	bne.n	8001432 <Drive+0x1f4>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001430:	e005      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800143c:	e7ff      	b.n	800143e <Drive+0x200>
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	ed87 0a02 	vstr	s0, [r7, #8]
 8001456:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a02 	vldr	s15, [r3, #8]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 6a07 	vldr	s13, [r3, #28]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	ed93 7a08 	vldr	s14, [r3, #32]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd06      	ble.n	80014e6 <Pid_Cal+0x9c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	e002      	b.n	80014ec <Pid_Cal+0xa2>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d506      	bpl.n	800151c <Pid_Cal+0xd2>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	e002      	b.n	8001522 <Pid_Cal+0xd8>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edd3 6a02 	vldr	s13, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a03 	vldr	s15, [r3, #12]
 800153a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	ed93 7a04 	vldr	s14, [r3, #16]
 8001548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800155c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ed93 7a06 	vldr	s14, [r3, #24]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd02      	ble.n	80015d8 <Pid_Cal+0x18e>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	e001      	b.n	80015dc <Pid_Cal+0x192>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d502      	bpl.n	80015fc <Pid_Cal+0x1b2>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	e001      	b.n	8001600 <Pid_Cal+0x1b6>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <vApplicationGetIdleTaskMemory+0x2c>)
 8001620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <vApplicationGetIdleTaskMemory+0x30>)
 8001626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200001fc 	.word	0x200001fc
 8001640:	20000250 	.word	0x20000250

08001644 <p>:

float T1, T2, T3, T4;
float Tf=3000;

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	ed87 0a05 	vstr	s0, [r7, #20]
 800164e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001652:	ed87 1a03 	vstr	s2, [r7, #12]
 8001656:	edc7 1a02 	vstr	s3, [r7, #8]
 800165a:	ed87 2a01 	vstr	s4, [r7, #4]
 800165e:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	edd7 7a00 	vldr	s15, [r7]
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001676:	edd7 6a04 	vldr	s13, [r7, #16]
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001682:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001686:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001692:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001696:	edd7 7a02 	vldr	s15, [r7, #8]
 800169a:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800169e:	ed97 6a03 	vldr	s12, [r7, #12]
 80016a2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016aa:	edd7 5a01 	vldr	s11, [r7, #4]
 80016ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80016b2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80016ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d6:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80016da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80016f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80016f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fa:	ee76 5a27 	vadd.f32	s11, s12, s15
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001706:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800170a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800170e:	edd7 7a00 	vldr	s15, [r7]
 8001712:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001716:	edd7 7a00 	vldr	s15, [r7]
 800171a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <UartIdle_Init>:
uint8_t flag_uart_rx = 0;
uint16_t uartLogRxSize;
char dataAngle[128];
uint8_t count = 0;
void UartIdle_Init()
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <UartIdle_Init+0x24>)
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <UartIdle_Init+0x28>)
 8001740:	f004 fd8e 	bl	8006260 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <UartIdle_Init+0x2c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <UartIdle_Init+0x2c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0208 	bic.w	r2, r2, #8
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000a9c 	.word	0x20000a9c
 800175c:	20000648 	.word	0x20000648
 8001760:	20000690 	.word	0x20000690

08001764 <UART_Handle>:

void UART_Handle(char* data, Setpoint_* Setpoint)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af04      	add	r7, sp, #16
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    static char uartDataBuffer[1024] = "";
    static size_t dataBufferIndex = 0;

    if (flag_uart_rx == 1 && strstr(data, "\n"))
 800176e:	4b93      	ldr	r3, [pc, #588]	; (80019bc <UART_Handle+0x258>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 811d 	bne.w	80019b2 <UART_Handle+0x24e>
 8001778:	210a      	movs	r1, #10
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f008 ff6f 	bl	800a65e <strchr>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8115 	beq.w	80019b2 <UART_Handle+0x24e>
    {
        if (strstr(data, "theta1"))
 8001788:	498d      	ldr	r1, [pc, #564]	; (80019c0 <UART_Handle+0x25c>)
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f008 ffc4 	bl	800a718 <strstr>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <UART_Handle+0x60>
        {
            if (sscanf(data, "theta1:%f,theta2:%f,theta3:%f,theta4:%f\n",
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	1d18      	adds	r0, r3, #4
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3308      	adds	r3, #8
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	320c      	adds	r2, #12
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	4603      	mov	r3, r0
 80017aa:	460a      	mov	r2, r1
 80017ac:	4985      	ldr	r1, [pc, #532]	; (80019c4 <UART_Handle+0x260>)
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f008 fedc 	bl	800a56c <siscanf>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	f040 80f1 	bne.w	800199e <UART_Handle+0x23a>
                       &Setpoint->setpoint1, &Setpoint->setpoint2,
                       &Setpoint->setpoint3, &Setpoint->setpoint4) == 4)
            {
                FlagStart.starKinematics = 1;
 80017bc:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <UART_Handle+0x264>)
 80017be:	2201      	movs	r2, #1
 80017c0:	709a      	strb	r2, [r3, #2]
 80017c2:	e0ec      	b.n	800199e <UART_Handle+0x23a>
            }
        }
        else if (strstr(data, "NhaT1"))
 80017c4:	4981      	ldr	r1, [pc, #516]	; (80019cc <UART_Handle+0x268>)
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f008 ffa6 	bl	800a718 <strstr>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d019      	beq.n	8001806 <UART_Handle+0xa2>
        {
            if (sscanf(data, "NhaT1:%f,NhaT2:%f,NhaT3:%f,NhaT4:%f\n",
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3338      	adds	r3, #56	; 0x38
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	323c      	adds	r2, #60	; 0x3c
 80017e6:	9201      	str	r2, [sp, #4]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	4978      	ldr	r1, [pc, #480]	; (80019d0 <UART_Handle+0x26c>)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f008 febb 	bl	800a56c <siscanf>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	f040 80d0 	bne.w	800199e <UART_Handle+0x23a>
                       &Setpoint->theta1_Nha, &Setpoint->theta2_Nha,
                       &Setpoint->theta3_Nha, &Setpoint->theta4_Nha) == 4)
            {
                FlagStart.SetPoint_Nha = 1;
 80017fe:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <UART_Handle+0x264>)
 8001800:	2201      	movs	r2, #1
 8001802:	70da      	strb	r2, [r3, #3]
 8001804:	e0cb      	b.n	800199e <UART_Handle+0x23a>
            }
        }
        else if (strstr(data, "Point"))
 8001806:	4973      	ldr	r1, [pc, #460]	; (80019d4 <UART_Handle+0x270>)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f008 ff85 	bl	800a718 <strstr>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8087 	beq.w	8001924 <UART_Handle+0x1c0>
        {
        	if (dataBufferIndex + strlen(data) < sizeof(uartDataBuffer) - 1) {
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe fd2a 	bl	8000270 <strlen>
 800181c:	4602      	mov	r2, r0
 800181e:	4b6e      	ldr	r3, [pc, #440]	; (80019d8 <UART_Handle+0x274>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001828:	4293      	cmp	r3, r2
 800182a:	f200 80b8 	bhi.w	800199e <UART_Handle+0x23a>
				strncat(uartDataBuffer, data, sizeof(uartDataBuffer) - dataBufferIndex - 1);
 800182e:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <UART_Handle+0x274>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8001836:	3303      	adds	r3, #3
 8001838:	461a      	mov	r2, r3
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4867      	ldr	r0, [pc, #412]	; (80019dc <UART_Handle+0x278>)
 800183e:	f008 ff1b 	bl	800a678 <strncat>
				dataBufferIndex += strlen(data);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fd14 	bl	8000270 <strlen>
 8001848:	4602      	mov	r2, r0
 800184a:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <UART_Handle+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <UART_Handle+0x274>)
 8001852:	6013      	str	r3, [r2, #0]

				if (strchr(uartDataBuffer, '\n') != NULL) {
 8001854:	210a      	movs	r1, #10
 8001856:	4861      	ldr	r0, [pc, #388]	; (80019dc <UART_Handle+0x278>)
 8001858:	f008 ff01 	bl	800a65e <strchr>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 809d 	beq.w	800199e <UART_Handle+0x23a>
					char* savePtr;
					char* token = strtok_r(uartDataBuffer, ";", &savePtr);
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	461a      	mov	r2, r3
 800186a:	495d      	ldr	r1, [pc, #372]	; (80019e0 <UART_Handle+0x27c>)
 800186c:	485b      	ldr	r0, [pc, #364]	; (80019dc <UART_Handle+0x278>)
 800186e:	f008 ff50 	bl	800a712 <strtok_r>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24

					while (token != NULL) {
 8001874:	e049      	b.n	800190a <UART_Handle+0x1a6>
						int pointId;
						float theta1, theta2, theta3, theta4;


						if (sscanf(token, "Point:%d, HutT1:%f, HutT2:%f, HutT3:%f, HutT4:%f", &pointId, &theta1, &theta2, &theta3, &theta4) == 5) {
 8001876:	f107 0118 	add.w	r1, r7, #24
 800187a:	f107 021c 	add.w	r2, r7, #28
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	460b      	mov	r3, r1
 8001892:	4954      	ldr	r1, [pc, #336]	; (80019e4 <UART_Handle+0x280>)
 8001894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001896:	f008 fe69 	bl	800a56c <siscanf>
 800189a:	4603      	mov	r3, r0
 800189c:	2b05      	cmp	r3, #5
 800189e:	d126      	bne.n	80018ee <UART_Handle+0x18a>
							Setpoint->points[pointId].theta1 = theta1;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	3304      	adds	r3, #4
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	440b      	add	r3, r1
 80018ac:	3304      	adds	r3, #4
 80018ae:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta2 = theta2;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	6839      	ldr	r1, [r7, #0]
 80018b6:	3304      	adds	r3, #4
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	440b      	add	r3, r1
 80018bc:	3308      	adds	r3, #8
 80018be:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta3 = theta3;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	6839      	ldr	r1, [r7, #0]
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	440b      	add	r3, r1
 80018ca:	334c      	adds	r3, #76	; 0x4c
 80018cc:	601a      	str	r2, [r3, #0]
							Setpoint->points[pointId].theta4 = theta4;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	440b      	add	r3, r1
 80018d8:	3350      	adds	r3, #80	; 0x50
 80018da:	601a      	str	r2, [r3, #0]
							FlagStart.SetPoint_Hut = 1;
 80018dc:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <UART_Handle+0x264>)
 80018de:	2201      	movs	r2, #1
 80018e0:	711a      	strb	r2, [r3, #4]
							Setpoint->countPoint++;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
 80018ec:	e005      	b.n	80018fa <UART_Handle+0x196>
						}
						else{
							FlagStart.startQD = 1;
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <UART_Handle+0x264>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	715a      	strb	r2, [r3, #5]
							count = 0;
 80018f4:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <UART_Handle+0x284>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
						}
						token = strtok_r(NULL, ";", &savePtr);
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	461a      	mov	r2, r3
 8001900:	4937      	ldr	r1, [pc, #220]	; (80019e0 <UART_Handle+0x27c>)
 8001902:	2000      	movs	r0, #0
 8001904:	f008 ff05 	bl	800a712 <strtok_r>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24
					while (token != NULL) {
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1b2      	bne.n	8001876 <UART_Handle+0x112>
					}

					memset(uartDataBuffer, 0, sizeof(uartDataBuffer));
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	2100      	movs	r1, #0
 8001916:	4831      	ldr	r0, [pc, #196]	; (80019dc <UART_Handle+0x278>)
 8001918:	f008 fe99 	bl	800a64e <memset>
					dataBufferIndex = 0;
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <UART_Handle+0x274>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e03c      	b.n	800199e <UART_Handle+0x23a>
				}
			}
        }
        else if (strstr(data, "home"))
 8001924:	4931      	ldr	r1, [pc, #196]	; (80019ec <UART_Handle+0x288>)
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f008 fef6 	bl	800a718 <strstr>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d135      	bne.n	800199e <UART_Handle+0x23a>
        {
            // Handle "home" command here
        }
        else if (strstr(data, "Reset"))
 8001932:	492f      	ldr	r1, [pc, #188]	; (80019f0 <UART_Handle+0x28c>)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f008 feef 	bl	800a718 <strstr>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <UART_Handle+0x1e2>
        {
            HAL_NVIC_SystemReset();
 8001940:	f002 f965 	bl	8003c0e <HAL_NVIC_SystemReset>
 8001944:	e02b      	b.n	800199e <UART_Handle+0x23a>
        }
        else if (strstr(data, "hut"))
 8001946:	492b      	ldr	r1, [pc, #172]	; (80019f4 <UART_Handle+0x290>)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f008 fee5 	bl	800a718 <strstr>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d124      	bne.n	800199e <UART_Handle+0x23a>
        {
            // Handle "hut" command here
        }
        else if (strstr(data, "nha"))
 8001954:	4928      	ldr	r1, [pc, #160]	; (80019f8 <UART_Handle+0x294>)
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f008 fede 	bl	800a718 <strstr>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11d      	bne.n	800199e <UART_Handle+0x23a>
        {
            // Handle "nha" command here
        }
        else if (strstr(data, "start"))
 8001962:	4926      	ldr	r1, [pc, #152]	; (80019fc <UART_Handle+0x298>)
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f008 fed7 	bl	800a718 <strstr>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <UART_Handle+0x214>
        {
            FlagStart.startProgram = 1;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <UART_Handle+0x264>)
 8001972:	2201      	movs	r2, #1
 8001974:	705a      	strb	r2, [r3, #1]
 8001976:	e012      	b.n	800199e <UART_Handle+0x23a>
        }
        else if (strstr(data, "disconnected"))
 8001978:	4921      	ldr	r1, [pc, #132]	; (8001a00 <UART_Handle+0x29c>)
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f008 fecc 	bl	800a718 <strstr>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <UART_Handle+0x23a>
        {
            FlagStart.startProgram = 0;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <UART_Handle+0x264>)
 8001988:	2200      	movs	r2, #0
 800198a:	705a      	strb	r2, [r3, #1]
            FlagStart.SetPoint_Hut = 0;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <UART_Handle+0x264>)
 800198e:	2200      	movs	r2, #0
 8001990:	711a      	strb	r2, [r3, #4]
            FlagStart.SetPoint_Nha = 0;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <UART_Handle+0x264>)
 8001994:	2200      	movs	r2, #0
 8001996:	70da      	strb	r2, [r3, #3]
            FlagStart.starKinematics = 0;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <UART_Handle+0x264>)
 800199a:	2200      	movs	r2, #0
 800199c:	709a      	strb	r2, [r3, #2]
        }
        flag_uart_rx = 0;
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <UART_Handle+0x258>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
        memset(data, 0, uartLogRxSize);
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <UART_Handle+0x2a0>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f008 fe4e 	bl	800a64e <memset>
    }
}
 80019b2:	bf00      	nop
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000129c 	.word	0x2000129c
 80019c0:	0800d9c8 	.word	0x0800d9c8
 80019c4:	0800d9d0 	.word	0x0800d9d0
 80019c8:	20000700 	.word	0x20000700
 80019cc:	0800d9fc 	.word	0x0800d9fc
 80019d0:	0800da04 	.word	0x0800da04
 80019d4:	0800da2c 	.word	0x0800da2c
 80019d8:	200016a8 	.word	0x200016a8
 80019dc:	200016ac 	.word	0x200016ac
 80019e0:	0800da34 	.word	0x0800da34
 80019e4:	0800da38 	.word	0x0800da38
 80019e8:	200012a0 	.word	0x200012a0
 80019ec:	0800da6c 	.word	0x0800da6c
 80019f0:	0800da74 	.word	0x0800da74
 80019f4:	0800da7c 	.word	0x0800da7c
 80019f8:	0800da80 	.word	0x0800da80
 80019fc:	0800da84 	.word	0x0800da84
 8001a00:	0800da8c 	.word	0x0800da8c
 8001a04:	2000129e 	.word	0x2000129e

08001a08 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_UARTEx_RxEventCallback+0x40>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10f      	bne.n	8001a3e <HAL_UARTEx_RxEventCallback+0x36>
  {
    uartLogRxSize = Size;
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_UARTEx_RxEventCallback+0x44>)
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_UARTEx_RxEventCallback+0x48>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
	UART_Handle(uartLogBuffer, &Setpoint);
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a2e:	f7ff fe99 	bl	8001764 <UART_Handle>

    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <HAL_UARTEx_RxEventCallback+0x50>)
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f004 fc11 	bl	8006260 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	2000129e 	.word	0x2000129e
 8001a50:	2000129c 	.word	0x2000129c
 8001a54:	20000728 	.word	0x20000728
 8001a58:	20000a9c 	.word	0x20000a9c

08001a5c <PID_LINK1_Init>:
EncoderRead ENC_LINK1;
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
void PID_LINK1_Init()
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <PID_LINK1_Init+0x8c>)
 8001a64:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a68:	4a20      	ldr	r2, [pc, #128]	; (8001aec <PID_LINK1_Init+0x90>)
 8001a6a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a7e:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <PID_LINK1_Init+0x94>)
 8001a80:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <PID_LINK1_Init+0x98>)
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a92:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <PID_LINK1_Init+0x9c>)
 8001a94:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <PID_LINK1_Init+0x88>)
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <PID_LINK1_Init+0xa0>)
 8001a9a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001a9e:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <PID_LINK1_Init+0xa8>)
 8001aa0:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001abc:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <PID_LINK1_Init+0x94>)
 8001abe:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <PID_LINK1_Init+0x98>)
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001ad0:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <PID_LINK1_Init+0x9c>)
 8001ad2:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <PID_LINK1_Init+0xa4>)
 8001ad6:	4a09      	ldr	r2, [pc, #36]	; (8001afc <PID_LINK1_Init+0xa0>)
 8001ad8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20001308 	.word	0x20001308
 8001ae8:	42480000 	.word	0x42480000
 8001aec:	437a0000 	.word	0x437a0000
 8001af0:	3c23d70a 	.word	0x3c23d70a
 8001af4:	fffffc18 	.word	0xfffffc18
 8001af8:	447a0000 	.word	0x447a0000
 8001afc:	c47a0000 	.word	0xc47a0000
 8001b00:	20001358 	.word	0x20001358
 8001b04:	41200000 	.word	0x41200000

08001b08 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	ed2d 8b02 	vpush	{d8}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 8001b12:	4814      	ldr	r0, [pc, #80]	; (8001b64 <PID_LINK1_Speed+0x5c>)
 8001b14:	f7ff fa88 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <PID_LINK1_Speed+0x60>)
 8001b1a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <PID_LINK1_Speed+0x5c>)
 8001b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f85e 	bl	8000be8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	ee00 3a90 	vmov	s1, r3
 8001b32:	eeb0 0a48 	vmov.f32	s0, s16
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <PID_LINK1_Speed+0x64>)
 8001b38:	f7ff fc87 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <PID_LINK1_Speed+0x64>)
 8001b3e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b46:	230c      	movs	r3, #12
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	ee17 2a90 	vmov	r2, s15
 8001b50:	4907      	ldr	r1, [pc, #28]	; (8001b70 <PID_LINK1_Speed+0x68>)
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <PID_LINK1_Speed+0x6c>)
 8001b54:	f7ff fb73 	bl	800123e <Drive>
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	ecbd 8b02 	vpop	{d8}
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200012a8 	.word	0x200012a8
 8001b68:	20001358 	.word	0x20001358
 8001b6c:	20001308 	.word	0x20001308
 8001b70:	200005b8 	.word	0x200005b8
 8001b74:	200012f0 	.word	0x200012f0

08001b78 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, Angle.AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <PID_LINK1_Pos+0x40>)
 8001b82:	ed93 8a00 	vldr	s16, [r3]
 8001b86:	2102      	movs	r1, #2
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <PID_LINK1_Pos+0x44>)
 8001b8a:	f7ff fadb 	bl	8001144 <CountRead>
 8001b8e:	ec53 2b10 	vmov	r2, r3, d0
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f827 	bl	8000be8 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	ee00 3a90 	vmov	s1, r3
 8001ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <PID_LINK1_Pos+0x48>)
 8001ba6:	f7ff fc50 	bl	800144a <Pid_Cal>
	PID_LINK1_Speed();
 8001baa:	f7ff ffad 	bl	8001b08 <PID_LINK1_Speed>
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	ecbd 8b02 	vpop	{d8}
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000718 	.word	0x20000718
 8001bbc:	200012a8 	.word	0x200012a8
 8001bc0:	20001358 	.word	0x20001358

08001bc4 <PID_LINK2_Init>:
EncoderRead ENC_LINK2;
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
void PID_LINK2_Init()
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bca:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <PID_LINK2_Init+0x8c>)
 8001bcc:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <PID_LINK2_Init+0x90>)
 8001bd2:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <PID_LINK2_Init+0x94>)
 8001be8:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <PID_LINK2_Init+0x98>)
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <PID_LINK2_Init+0x9c>)
 8001bfc:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <PID_LINK2_Init+0x88>)
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <PID_LINK2_Init+0xa0>)
 8001c02:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <PID_LINK2_Init+0xa8>)
 8001c08:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <PID_LINK2_Init+0x94>)
 8001c26:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <PID_LINK2_Init+0x98>)
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <PID_LINK2_Init+0x9c>)
 8001c3a:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <PID_LINK2_Init+0xa4>)
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <PID_LINK2_Init+0xa0>)
 8001c40:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	20001408 	.word	0x20001408
 8001c50:	42480000 	.word	0x42480000
 8001c54:	437a0000 	.word	0x437a0000
 8001c58:	3c23d70a 	.word	0x3c23d70a
 8001c5c:	fffffc18 	.word	0xfffffc18
 8001c60:	447a0000 	.word	0x447a0000
 8001c64:	c47a0000 	.word	0xc47a0000
 8001c68:	20001458 	.word	0x20001458
 8001c6c:	41200000 	.word	0x41200000

08001c70 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	ed2d 8b02 	vpush	{d8}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <PID_LINK2_Speed+0x5c>)
 8001c7c:	f7ff f9d4 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <PID_LINK2_Speed+0x60>)
 8001c82:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <PID_LINK2_Speed+0x5c>)
 8001c88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe ffaa 	bl	8000be8 <__aeabi_d2f>
 8001c94:	4603      	mov	r3, r0
 8001c96:	ee00 3a90 	vmov	s1, r3
 8001c9a:	eeb0 0a48 	vmov.f32	s0, s16
 8001c9e:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <PID_LINK2_Speed+0x64>)
 8001ca0:	f7ff fbd3 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <PID_LINK2_Speed+0x64>)
 8001ca6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cae:	230c      	movs	r3, #12
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	ee17 2a90 	vmov	r2, s15
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <PID_LINK2_Speed+0x68>)
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <PID_LINK2_Speed+0x6c>)
 8001cbc:	f7ff fabf 	bl	800123e <Drive>
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	ecbd 8b02 	vpop	{d8}
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200013a8 	.word	0x200013a8
 8001cd0:	20001458 	.word	0x20001458
 8001cd4:	20001408 	.word	0x20001408
 8001cd8:	20000528 	.word	0x20000528
 8001cdc:	200013f0 	.word	0x200013f0

08001ce0 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	ed2d 8b02 	vpush	{d8}
 8001ce6:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, Angle.AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <PID_LINK2_Pos+0x48>)
 8001cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d2c <PID_LINK2_Pos+0x4c>
 8001cf2:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <PID_LINK2_Pos+0x50>)
 8001cfa:	f7ff fa23 	bl	8001144 <CountRead>
 8001cfe:	ec53 2b10 	vmov	r2, r3, d0
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff6f 	bl	8000be8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ee00 3a90 	vmov	s1, r3
 8001d10:	eeb0 0a48 	vmov.f32	s0, s16
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <PID_LINK2_Pos+0x54>)
 8001d16:	f7ff fb98 	bl	800144a <Pid_Cal>
	PID_LINK2_Speed();
 8001d1a:	f7ff ffa9 	bl	8001c70 <PID_LINK2_Speed>
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	ecbd 8b02 	vpop	{d8}
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000718 	.word	0x20000718
 8001d2c:	433b0000 	.word	0x433b0000
 8001d30:	200013a8 	.word	0x200013a8
 8001d34:	20001458 	.word	0x20001458

08001d38 <PID_LINK3_Init>:
EncoderRead ENC_LINK3;
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
void PID_LINK3_Init()
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <PID_LINK3_Init+0x8c>)
 8001d40:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 300;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <PID_LINK3_Init+0x90>)
 8001d46:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <PID_LINK3_Init+0x94>)
 8001d5c:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <PID_LINK3_Init+0x98>)
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d6e:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <PID_LINK3_Init+0x9c>)
 8001d70:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <PID_LINK3_Init+0x88>)
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <PID_LINK3_Init+0xa0>)
 8001d76:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <PID_LINK3_Init+0xa8>)
 8001d7c:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d98:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <PID_LINK3_Init+0x94>)
 8001d9a:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <PID_LINK3_Init+0x98>)
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <PID_LINK3_Init+0x9c>)
 8001dae:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <PID_LINK3_Init+0xa4>)
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <PID_LINK3_Init+0xa0>)
 8001db4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	20001508 	.word	0x20001508
 8001dc4:	42480000 	.word	0x42480000
 8001dc8:	43960000 	.word	0x43960000
 8001dcc:	3c23d70a 	.word	0x3c23d70a
 8001dd0:	fffffc18 	.word	0xfffffc18
 8001dd4:	447a0000 	.word	0x447a0000
 8001dd8:	c47a0000 	.word	0xc47a0000
 8001ddc:	20001558 	.word	0x20001558
 8001de0:	41200000 	.word	0x41200000

08001de4 <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	ed2d 8b02 	vpush	{d8}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001dee:	4814      	ldr	r0, [pc, #80]	; (8001e40 <PID_LINK3_Speed+0x5c>)
 8001df0:	f7ff f91a 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <PID_LINK3_Speed+0x60>)
 8001df6:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <PID_LINK3_Speed+0x5c>)
 8001dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fef0 	bl	8000be8 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	ee00 3a90 	vmov	s1, r3
 8001e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <PID_LINK3_Speed+0x64>)
 8001e14:	f7ff fb19 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <PID_LINK3_Speed+0x64>)
 8001e1a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e22:	2304      	movs	r3, #4
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	ee17 2a90 	vmov	r2, s15
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <PID_LINK3_Speed+0x68>)
 8001e2e:	4808      	ldr	r0, [pc, #32]	; (8001e50 <PID_LINK3_Speed+0x6c>)
 8001e30:	f7ff fa05 	bl	800123e <Drive>
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	ecbd 8b02 	vpop	{d8}
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200014a8 	.word	0x200014a8
 8001e44:	20001558 	.word	0x20001558
 8001e48:	20001508 	.word	0x20001508
 8001e4c:	20000528 	.word	0x20000528
 8001e50:	200014f0 	.word	0x200014f0

08001e54 <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	ed2d 8b02 	vpush	{d8}
 8001e5a:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, Angle.AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <PID_LINK3_Pos+0x48>)
 8001e5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e62:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001ea0 <PID_LINK3_Pos+0x4c>
 8001e66:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <PID_LINK3_Pos+0x50>)
 8001e6e:	f7ff f969 	bl	8001144 <CountRead>
 8001e72:	ec53 2b10 	vmov	r2, r3, d0
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe feb5 	bl	8000be8 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	ee00 3a90 	vmov	s1, r3
 8001e84:	eeb0 0a48 	vmov.f32	s0, s16
 8001e88:	4807      	ldr	r0, [pc, #28]	; (8001ea8 <PID_LINK3_Pos+0x54>)
 8001e8a:	f7ff fade 	bl	800144a <Pid_Cal>
	PID_LINK3_Speed();
 8001e8e:	f7ff ffa9 	bl	8001de4 <PID_LINK3_Speed>
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	ecbd 8b02 	vpop	{d8}
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000718 	.word	0x20000718
 8001ea0:	43070000 	.word	0x43070000
 8001ea4:	200014a8 	.word	0x200014a8
 8001ea8:	20001558 	.word	0x20001558

08001eac <PID_LINK4_Init>:
EncoderRead ENC_LINK4;
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
void PID_LINK4_Init()
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <PID_LINK4_Init+0x8c>)
 8001eb4:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 250;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001eb8:	4a20      	ldr	r2, [pc, #128]	; (8001f3c <PID_LINK4_Init+0x90>)
 8001eba:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <PID_LINK4_Init+0x94>)
 8001ed0:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <PID_LINK4_Init+0x98>)
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <PID_LINK4_Init+0x9c>)
 8001ee4:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <PID_LINK4_Init+0x88>)
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <PID_LINK4_Init+0xa0>)
 8001eea:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001eee:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <PID_LINK4_Init+0xa8>)
 8001ef0:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <PID_LINK4_Init+0x94>)
 8001f0e:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f16:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <PID_LINK4_Init+0x98>)
 8001f1c:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f20:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <PID_LINK4_Init+0x9c>)
 8001f22:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <PID_LINK4_Init+0xa4>)
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <PID_LINK4_Init+0xa0>)
 8001f28:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	20001608 	.word	0x20001608
 8001f38:	42480000 	.word	0x42480000
 8001f3c:	437a0000 	.word	0x437a0000
 8001f40:	3c23d70a 	.word	0x3c23d70a
 8001f44:	fffffc18 	.word	0xfffffc18
 8001f48:	447a0000 	.word	0x447a0000
 8001f4c:	c47a0000 	.word	0xc47a0000
 8001f50:	20001658 	.word	0x20001658
 8001f54:	41200000 	.word	0x41200000

08001f58 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	ed2d 8b02 	vpush	{d8}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <PID_LINK4_Speed+0x5c>)
 8001f64:	f7ff f860 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <PID_LINK4_Speed+0x60>)
 8001f6a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <PID_LINK4_Speed+0x5c>)
 8001f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe36 	bl	8000be8 <__aeabi_d2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	ee00 3a90 	vmov	s1, r3
 8001f82:	eeb0 0a48 	vmov.f32	s0, s16
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <PID_LINK4_Speed+0x64>)
 8001f88:	f7ff fa5f 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <PID_LINK4_Speed+0x64>)
 8001f8e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	2304      	movs	r3, #4
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	ee17 2a90 	vmov	r2, s15
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <PID_LINK4_Speed+0x68>)
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <PID_LINK4_Speed+0x6c>)
 8001fa4:	f7ff f94b 	bl	800123e <Drive>
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	ecbd 8b02 	vpop	{d8}
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200015a8 	.word	0x200015a8
 8001fb8:	20001658 	.word	0x20001658
 8001fbc:	20001608 	.word	0x20001608
 8001fc0:	20000600 	.word	0x20000600
 8001fc4:	200015f0 	.word	0x200015f0

08001fc8 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	ed2d 8b02 	vpush	{d8}
 8001fce:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, Angle.AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <PID_LINK4_Pos+0x48>)
 8001fd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fd6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002014 <PID_LINK4_Pos+0x4c>
 8001fda:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001fde:	2102      	movs	r1, #2
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <PID_LINK4_Pos+0x50>)
 8001fe2:	f7ff f8af 	bl	8001144 <CountRead>
 8001fe6:	ec53 2b10 	vmov	r2, r3, d0
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fdfb 	bl	8000be8 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	ee00 3a90 	vmov	s1, r3
 8001ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <PID_LINK4_Pos+0x54>)
 8001ffe:	f7ff fa24 	bl	800144a <Pid_Cal>
	PID_LINK4_Speed();
 8002002:	f7ff ffa9 	bl	8001f58 <PID_LINK4_Speed>
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	ecbd 8b02 	vpop	{d8}
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000718 	.word	0x20000718
 8002014:	42b40000 	.word	0x42b40000
 8002018:	200015a8 	.word	0x200015a8
 800201c:	20001658 	.word	0x20001658

08002020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b09c      	sub	sp, #112	; 0x70
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002026:	f001 fcb7 	bl	8003998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800202a:	f000 f8e7 	bl	80021fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800202e:	f000 fc45 	bl	80028bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002032:	f000 fc23 	bl	800287c <MX_DMA_Init>
  MX_TIM1_Init();
 8002036:	f000 f949 	bl	80022cc <MX_TIM1_Init>
  MX_TIM4_Init();
 800203a:	f000 fa47 	bl	80024cc <MX_TIM4_Init>
  MX_TIM2_Init();
 800203e:	f000 f99d 	bl	800237c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002042:	f000 f9ef 	bl	8002424 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002046:	f000 fabb 	bl	80025c0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800204a:	f000 fb0d 	bl	8002668 <MX_TIM8_Init>
  MX_TIM9_Init();
 800204e:	f000 fb9b 	bl	8002788 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8002052:	f000 fbe9 	bl	8002828 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002056:	2100      	movs	r1, #0
 8002058:	4855      	ldr	r0, [pc, #340]	; (80021b0 <main+0x190>)
 800205a:	f003 f977 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800205e:	2104      	movs	r1, #4
 8002060:	4853      	ldr	r0, [pc, #332]	; (80021b0 <main+0x190>)
 8002062:	f003 f973 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002066:	2108      	movs	r1, #8
 8002068:	4851      	ldr	r0, [pc, #324]	; (80021b0 <main+0x190>)
 800206a:	f003 f96f 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800206e:	210c      	movs	r1, #12
 8002070:	484f      	ldr	r0, [pc, #316]	; (80021b0 <main+0x190>)
 8002072:	f003 f96b 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8002076:	2100      	movs	r1, #0
 8002078:	484e      	ldr	r0, [pc, #312]	; (80021b4 <main+0x194>)
 800207a:	f003 f967 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800207e:	2104      	movs	r1, #4
 8002080:	484c      	ldr	r0, [pc, #304]	; (80021b4 <main+0x194>)
 8002082:	f003 f963 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002086:	2108      	movs	r1, #8
 8002088:	484b      	ldr	r0, [pc, #300]	; (80021b8 <main+0x198>)
 800208a:	f003 f95f 	bl	800534c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800208e:	210c      	movs	r1, #12
 8002090:	4849      	ldr	r0, [pc, #292]	; (80021b8 <main+0x198>)
 8002092:	f003 f95b 	bl	800534c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002096:	213c      	movs	r1, #60	; 0x3c
 8002098:	4848      	ldr	r0, [pc, #288]	; (80021bc <main+0x19c>)
 800209a:	f003 fac5 	bl	8005628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800209e:	213c      	movs	r1, #60	; 0x3c
 80020a0:	4847      	ldr	r0, [pc, #284]	; (80021c0 <main+0x1a0>)
 80020a2:	f003 fac1 	bl	8005628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80020a6:	213c      	movs	r1, #60	; 0x3c
 80020a8:	4846      	ldr	r0, [pc, #280]	; (80021c4 <main+0x1a4>)
 80020aa:	f003 fabd 	bl	8005628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80020ae:	213c      	movs	r1, #60	; 0x3c
 80020b0:	4845      	ldr	r0, [pc, #276]	; (80021c8 <main+0x1a8>)
 80020b2:	f003 fab9 	bl	8005628 <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 80020b6:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 80021a8 <main+0x188>
 80020ba:	f641 3226 	movw	r2, #6950	; 0x1b26
 80020be:	493f      	ldr	r1, [pc, #252]	; (80021bc <main+0x19c>)
 80020c0:	4842      	ldr	r0, [pc, #264]	; (80021cc <main+0x1ac>)
 80020c2:	f7fe ff95 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 80020c6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 80021a8 <main+0x188>
 80020ca:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80020ce:	493c      	ldr	r1, [pc, #240]	; (80021c0 <main+0x1a0>)
 80020d0:	483f      	ldr	r0, [pc, #252]	; (80021d0 <main+0x1b0>)
 80020d2:	f7fe ff8d 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 7050, 0.01);
 80020d6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80021a8 <main+0x188>
 80020da:	f641 328a 	movw	r2, #7050	; 0x1b8a
 80020de:	4939      	ldr	r1, [pc, #228]	; (80021c4 <main+0x1a4>)
 80020e0:	483c      	ldr	r0, [pc, #240]	; (80021d4 <main+0x1b4>)
 80020e2:	f7fe ff85 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 80020e6:	ed9f 0b30 	vldr	d0, [pc, #192]	; 80021a8 <main+0x188>
 80020ea:	f640 4294 	movw	r2, #3220	; 0xc94
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <main+0x1a8>)
 80020f0:	4839      	ldr	r0, [pc, #228]	; (80021d8 <main+0x1b8>)
 80020f2:	f7fe ff7d 	bl	8000ff0 <EncoderSetting>

  PID_LINK1_Init();
 80020f6:	f7ff fcb1 	bl	8001a5c <PID_LINK1_Init>
  PID_LINK2_Init();
 80020fa:	f7ff fd63 	bl	8001bc4 <PID_LINK2_Init>
  PID_LINK3_Init();
 80020fe:	f7ff fe1b 	bl	8001d38 <PID_LINK3_Init>
  PID_LINK4_Init();
 8002102:	f7ff fed3 	bl	8001eac <PID_LINK4_Init>

  UartIdle_Init();
 8002106:	f7ff fb15 	bl	8001734 <UartIdle_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskLogic */
  osThreadDef(TaskLogic, StartTaskLogic, osPriorityNormal, 0, 128);
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <main+0x1bc>)
 800210c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002110:	461d      	mov	r5, r3
 8002112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002116:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800211a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLogicHandle = osThreadCreate(osThread(TaskLogic), NULL);
 800211e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f005 f9a4 	bl	8007472 <osThreadCreate>
 800212a:	4603      	mov	r3, r0
 800212c:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <main+0x1c0>)
 800212e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <main+0x1c4>)
 8002132:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002136:	461d      	mov	r5, r3
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 8002144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f005 f991 	bl	8007472 <osThreadCreate>
 8002150:	4603      	mov	r3, r0
 8002152:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <main+0x1c8>)
 8002154:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <main+0x1cc>)
 8002158:	f107 041c 	add.w	r4, r7, #28
 800215c:	461d      	mov	r5, r3
 800215e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002162:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002166:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f005 f97e 	bl	8007472 <osThreadCreate>
 8002176:	4603      	mov	r3, r0
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <main+0x1d0>)
 800217a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTrajectory */
  osThreadDef(TaskTrajectory, StartTaskTrajectory, osPriorityBelowNormal, 0, 128);
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <main+0x1d4>)
 800217e:	463c      	mov	r4, r7
 8002180:	461d      	mov	r5, r3
 8002182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800218a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTrajectoryHandle = osThreadCreate(osThread(TaskTrajectory), NULL);
 800218e:	463b      	mov	r3, r7
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f005 f96d 	bl	8007472 <osThreadCreate>
 8002198:	4603      	mov	r3, r0
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <main+0x1d8>)
 800219c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800219e:	f005 f961 	bl	8007464 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <main+0x182>
 80021a4:	f3af 8000 	nop.w
 80021a8:	47ae147b 	.word	0x47ae147b
 80021ac:	3f847ae1 	.word	0x3f847ae1
 80021b0:	20000528 	.word	0x20000528
 80021b4:	20000600 	.word	0x20000600
 80021b8:	200005b8 	.word	0x200005b8
 80021bc:	20000450 	.word	0x20000450
 80021c0:	20000498 	.word	0x20000498
 80021c4:	200004e0 	.word	0x200004e0
 80021c8:	20000570 	.word	0x20000570
 80021cc:	200012a8 	.word	0x200012a8
 80021d0:	200013a8 	.word	0x200013a8
 80021d4:	200014a8 	.word	0x200014a8
 80021d8:	200015a8 	.word	0x200015a8
 80021dc:	0800daa8 	.word	0x0800daa8
 80021e0:	200006f0 	.word	0x200006f0
 80021e4:	0800dad0 	.word	0x0800dad0
 80021e8:	200006f4 	.word	0x200006f4
 80021ec:	0800daf8 	.word	0x0800daf8
 80021f0:	200006f8 	.word	0x200006f8
 80021f4:	0800db24 	.word	0x0800db24
 80021f8:	200006fc 	.word	0x200006fc

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b094      	sub	sp, #80	; 0x50
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	2230      	movs	r2, #48	; 0x30
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f008 fa1f 	bl	800a64e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <SystemClock_Config+0xc8>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <SystemClock_Config+0xc8>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <SystemClock_Config+0xc8>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <SystemClock_Config+0xcc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <SystemClock_Config+0xcc>)
 8002246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <SystemClock_Config+0xcc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800225c:	2301      	movs	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002260:	2310      	movs	r3, #16
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002264:	2302      	movs	r3, #2
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002268:	2300      	movs	r3, #0
 800226a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800226c:	2308      	movs	r3, #8
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002270:	2348      	movs	r3, #72	; 0x48
 8002272:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002274:	2302      	movs	r3, #2
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002278:	2304      	movs	r3, #4
 800227a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	4618      	mov	r0, r3
 8002282:	f002 fa7f 	bl	8004784 <HAL_RCC_OscConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800228c:	f000 ff06 	bl	800309c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002290:	230f      	movs	r3, #15
 8002292:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002294:	2302      	movs	r3, #2
 8002296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800229c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	2102      	movs	r1, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fce1 	bl	8004c74 <HAL_RCC_ClockConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022b8:	f000 fef0 	bl	800309c <Error_Handler>
  }
}
 80022bc:	bf00      	nop
 80022be:	3750      	adds	r7, #80	; 0x50
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000

080022cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f008 f9b7 	bl	800a64e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_TIM1_Init+0xa8>)
 80022ea:	4a23      	ldr	r2, [pc, #140]	; (8002378 <MX_TIM1_Init+0xac>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_TIM1_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_TIM1_Init+0xa8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_TIM1_Init+0xa8>)
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_TIM1_Init+0xa8>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_TIM1_Init+0xa8>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_TIM1_Init+0xa8>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002314:	2303      	movs	r3, #3
 8002316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800231c:	2301      	movs	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_TIM1_Init+0xa8>)
 8002340:	f003 f8cc 	bl	80054dc <HAL_TIM_Encoder_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800234a:	f000 fea7 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_TIM1_Init+0xa8>)
 800235c:	f003 fe4e 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002366:	f000 fe99 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000450 	.word	0x20000450
 8002378:	40010000 	.word	0x40010000

0800237c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f008 f95f 	bl	800a64e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <MX_TIM2_Init+0xa4>)
 800239a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023ae:	f04f 32ff 	mov.w	r2, #4294967295
 80023b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023c8:	2301      	movs	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023d8:	2301      	movs	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4619      	mov	r1, r3
 80023ea:	480d      	ldr	r0, [pc, #52]	; (8002420 <MX_TIM2_Init+0xa4>)
 80023ec:	f003 f876 	bl	80054dc <HAL_TIM_Encoder_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023f6:	f000 fe51 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4806      	ldr	r0, [pc, #24]	; (8002420 <MX_TIM2_Init+0xa4>)
 8002408:	f003 fdf8 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002412:	f000 fe43 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000498 	.word	0x20000498

08002424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f008 f90b 	bl	800a64e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_TIM3_Init+0xa0>)
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <MX_TIM3_Init+0xa4>)
 8002444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002446:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <MX_TIM3_Init+0xa0>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_TIM3_Init+0xa0>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <MX_TIM3_Init+0xa0>)
 8002454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002458:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_TIM3_Init+0xa0>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_TIM3_Init+0xa0>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002466:	2303      	movs	r3, #3
 8002468:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800246e:	2301      	movs	r3, #1
 8002470:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <MX_TIM3_Init+0xa0>)
 8002492:	f003 f823 	bl	80054dc <HAL_TIM_Encoder_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800249c:	f000 fdfe 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_TIM3_Init+0xa0>)
 80024ae:	f003 fda5 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80024b8:	f000 fdf0 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	3730      	adds	r7, #48	; 0x30
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200004e0 	.word	0x200004e0
 80024c8:	40000400 	.word	0x40000400

080024cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d2:	f107 0320 	add.w	r3, r7, #32
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	615a      	str	r2, [r3, #20]
 80024ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <MX_TIM4_Init+0xec>)
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <MX_TIM4_Init+0xf0>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 80024f4:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <MX_TIM4_Init+0xec>)
 80024f6:	2206      	movs	r2, #6
 80024f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <MX_TIM4_Init+0xec>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002506:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <MX_TIM4_Init+0xec>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002514:	4828      	ldr	r0, [pc, #160]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002516:	f002 fec9 	bl	80052ac <HAL_TIM_PWM_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002520:	f000 fdbc 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	4619      	mov	r1, r3
 8002532:	4821      	ldr	r0, [pc, #132]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002534:	f003 fd62 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800253e:	f000 fdad 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002542:	2360      	movs	r3, #96	; 0x60
 8002544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	4619      	mov	r1, r3
 8002558:	4817      	ldr	r0, [pc, #92]	; (80025b8 <MX_TIM4_Init+0xec>)
 800255a:	f003 f9e3 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002564:	f000 fd9a 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2204      	movs	r2, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4812      	ldr	r0, [pc, #72]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002570:	f003 f9d8 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800257a:	f000 fd8f 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2208      	movs	r2, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM4_Init+0xec>)
 8002586:	f003 f9cd 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002590:	f000 fd84 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	220c      	movs	r2, #12
 8002598:	4619      	mov	r1, r3
 800259a:	4807      	ldr	r0, [pc, #28]	; (80025b8 <MX_TIM4_Init+0xec>)
 800259c:	f003 f9c2 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80025a6:	f000 fd79 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025aa:	4803      	ldr	r0, [pc, #12]	; (80025b8 <MX_TIM4_Init+0xec>)
 80025ac:	f000 ff18 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000528 	.word	0x20000528
 80025bc:	40000800 	.word	0x40000800

080025c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	2224      	movs	r2, #36	; 0x24
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f008 f83d 	bl	800a64e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <MX_TIM5_Init+0xa4>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <MX_TIM5_Init+0xa0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002602:	2303      	movs	r3, #3
 8002604:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800260a:	2301      	movs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800261a:	2301      	movs	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002626:	f107 030c 	add.w	r3, r7, #12
 800262a:	4619      	mov	r1, r3
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_TIM5_Init+0xa0>)
 800262e:	f002 ff55 	bl	80054dc <HAL_TIM_Encoder_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002638:	f000 fd30 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4805      	ldr	r0, [pc, #20]	; (8002660 <MX_TIM5_Init+0xa0>)
 800264a:	f003 fcd7 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002654:	f000 fd22 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20000570 	.word	0x20000570
 8002664:	40000c00 	.word	0x40000c00

08002668 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b092      	sub	sp, #72	; 0x48
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	615a      	str	r2, [r3, #20]
 800268a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2220      	movs	r2, #32
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f007 ffdb 	bl	800a64e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <MX_TIM8_Init+0x118>)
 800269a:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <MX_TIM8_Init+0x11c>)
 800269c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <MX_TIM8_Init+0x118>)
 80026a0:	2206      	movs	r2, #6
 80026a2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <MX_TIM8_Init+0x118>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <MX_TIM8_Init+0x118>)
 80026ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026b0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <MX_TIM8_Init+0x118>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <MX_TIM8_Init+0x118>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <MX_TIM8_Init+0x118>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026c4:	482e      	ldr	r0, [pc, #184]	; (8002780 <MX_TIM8_Init+0x118>)
 80026c6:	f002 fdf1 	bl	80052ac <HAL_TIM_PWM_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80026d0:	f000 fce4 	bl	800309c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026e0:	4619      	mov	r1, r3
 80026e2:	4827      	ldr	r0, [pc, #156]	; (8002780 <MX_TIM8_Init+0x118>)
 80026e4:	f003 fc8a 	bl	8005ffc <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80026ee:	f000 fcd5 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f2:	2360      	movs	r3, #96	; 0x60
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	2208      	movs	r2, #8
 8002714:	4619      	mov	r1, r3
 8002716:	481a      	ldr	r0, [pc, #104]	; (8002780 <MX_TIM8_Init+0x118>)
 8002718:	f003 f904 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002722:	f000 fcbb 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272a:	220c      	movs	r2, #12
 800272c:	4619      	mov	r1, r3
 800272e:	4814      	ldr	r0, [pc, #80]	; (8002780 <MX_TIM8_Init+0x118>)
 8002730:	f003 f8f8 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800273a:	f000 fcaf 	bl	800309c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002756:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4807      	ldr	r0, [pc, #28]	; (8002780 <MX_TIM8_Init+0x118>)
 8002762:	f003 fcc7 	bl	80060f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800276c:	f000 fc96 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002770:	4803      	ldr	r0, [pc, #12]	; (8002780 <MX_TIM8_Init+0x118>)
 8002772:	f000 fe35 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002776:	bf00      	nop
 8002778:	3748      	adds	r7, #72	; 0x48
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200005b8 	.word	0x200005b8
 8002784:	40010400 	.word	0x40010400

08002788 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	; (8002820 <MX_TIM9_Init+0x98>)
 80027a2:	4a20      	ldr	r2, [pc, #128]	; (8002824 <MX_TIM9_Init+0x9c>)
 80027a4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <MX_TIM9_Init+0x98>)
 80027a8:	2206      	movs	r2, #6
 80027aa:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <MX_TIM9_Init+0x98>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MX_TIM9_Init+0x98>)
 80027b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027b8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <MX_TIM9_Init+0x98>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <MX_TIM9_Init+0x98>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80027c6:	4816      	ldr	r0, [pc, #88]	; (8002820 <MX_TIM9_Init+0x98>)
 80027c8:	f002 fd70 	bl	80052ac <HAL_TIM_PWM_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80027d2:	f000 fc63 	bl	800309c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d6:	2360      	movs	r3, #96	; 0x60
 80027d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	480c      	ldr	r0, [pc, #48]	; (8002820 <MX_TIM9_Init+0x98>)
 80027ee:	f003 f899 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80027f8:	f000 fc50 	bl	800309c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	2204      	movs	r2, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <MX_TIM9_Init+0x98>)
 8002804:	f003 f88e 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800280e:	f000 fc45 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002812:	4803      	ldr	r0, [pc, #12]	; (8002820 <MX_TIM9_Init+0x98>)
 8002814:	f000 fde4 	bl	80033e0 <HAL_TIM_MspPostInit>

}
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000600 	.word	0x20000600
 8002824:	40014000 	.word	0x40014000

08002828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <MX_USART1_UART_Init+0x50>)
 8002830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 8002834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 800284e:	220c      	movs	r2, #12
 8002850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800285e:	4805      	ldr	r0, [pc, #20]	; (8002874 <MX_USART1_UART_Init+0x4c>)
 8002860:	f003 fcae 	bl	80061c0 <HAL_UART_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800286a:	f000 fc17 	bl	800309c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000648 	.word	0x20000648
 8002878:	40011000 	.word	0x40011000

0800287c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_DMA_Init+0x3c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <MX_DMA_Init+0x3c>)
 800288c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_DMA_Init+0x3c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2105      	movs	r1, #5
 80028a2:	203a      	movs	r0, #58	; 0x3a
 80028a4:	f001 f989 	bl	8003bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028a8:	203a      	movs	r0, #58	; 0x3a
 80028aa:	f001 f9a2 	bl	8003bf2 <HAL_NVIC_EnableIRQ>

}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <MX_GPIO_Init+0xc0>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a28      	ldr	r2, [pc, #160]	; (800297c <MX_GPIO_Init+0xc0>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <MX_GPIO_Init+0xc0>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <MX_GPIO_Init+0xc0>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a21      	ldr	r2, [pc, #132]	; (800297c <MX_GPIO_Init+0xc0>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <MX_GPIO_Init+0xc0>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_GPIO_Init+0xc0>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <MX_GPIO_Init+0xc0>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_GPIO_Init+0xc0>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_GPIO_Init+0xc0>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <MX_GPIO_Init+0xc0>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_GPIO_Init+0xc0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 8002942:	2330      	movs	r3, #48	; 0x30
 8002944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800294a:	2301      	movs	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	480a      	ldr	r0, [pc, #40]	; (8002980 <MX_GPIO_Init+0xc4>)
 8002956:	f001 fd61 	bl	800441c <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 800295a:	23c0      	movs	r3, #192	; 0xc0
 800295c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_GPIO_Init+0xc8>)
 800296e:	f001 fd55 	bl	800441c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020800 	.word	0x40020800

08002988 <StartTaskLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLogic */
void StartTaskLogic(void const * argument)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  if(FlagStart.startQD == 1){
 8002990:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <StartTaskLogic+0xb0>)
 8002992:	795b      	ldrb	r3, [r3, #5]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d14a      	bne.n	8002a2e <StartTaskLogic+0xa6>
		  if(count < Setpoint.countPoint){
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <StartTaskLogic+0xb4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <StartTaskLogic+0xb8>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	429a      	cmp	r2, r3
 80029a4:	da43      	bge.n	8002a2e <StartTaskLogic+0xa6>
			  Setpoint.setpoint1 = Setpoint.points[count].theta1;
 80029a6:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <StartTaskLogic+0xb4>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <StartTaskLogic+0xb8>)
 80029ac:	3304      	adds	r3, #4
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <StartTaskLogic+0xb8>)
 80029b8:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.points[count].theta2;
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <StartTaskLogic+0xb4>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <StartTaskLogic+0xb8>)
 80029c0:	3304      	adds	r3, #4
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	3308      	adds	r3, #8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <StartTaskLogic+0xb8>)
 80029cc:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.points[count].theta3;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <StartTaskLogic+0xb4>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <StartTaskLogic+0xb8>)
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	4413      	add	r3, r2
 80029d8:	334c      	adds	r3, #76	; 0x4c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <StartTaskLogic+0xb8>)
 80029de:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.points[count].theta4;
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <StartTaskLogic+0xb4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <StartTaskLogic+0xb8>)
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	3350      	adds	r3, #80	; 0x50
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <StartTaskLogic+0xb8>)
 80029f0:	60d3      	str	r3, [r2, #12]

			  osDelay(3000);
 80029f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80029f6:	f004 fd88 	bl	800750a <osDelay>

			  Setpoint.setpoint1 = Setpoint.theta1_Nha;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <StartTaskLogic+0xb8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a10      	ldr	r2, [pc, #64]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a00:	6013      	str	r3, [r2, #0]
			  Setpoint.setpoint2 = Setpoint.theta2_Nha;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a08:	6053      	str	r3, [r2, #4]
			  Setpoint.setpoint3 = Setpoint.theta3_Nha;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a10:	6093      	str	r3, [r2, #8]
			  Setpoint.setpoint4 = Setpoint.theta4_Nha;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <StartTaskLogic+0xb8>)
 8002a18:	60d3      	str	r3, [r2, #12]

			  osDelay(3000);
 8002a1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a1e:	f004 fd74 	bl	800750a <osDelay>

			  count++;
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <StartTaskLogic+0xb4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <StartTaskLogic+0xb4>)
 8002a2c:	701a      	strb	r2, [r3, #0]
		  }
	  }

    osDelay(10);
 8002a2e:	200a      	movs	r0, #10
 8002a30:	f004 fd6b 	bl	800750a <osDelay>
	  if(FlagStart.startQD == 1){
 8002a34:	e7ac      	b.n	8002990 <StartTaskLogic+0x8>
 8002a36:	bf00      	nop
 8002a38:	20000700 	.word	0x20000700
 8002a3c:	200012a0 	.word	0x200012a0
 8002a40:	20000728 	.word	0x20000728

08002a44 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  for(;;)
  {
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002a4c:	2140      	movs	r1, #64	; 0x40
 8002a4e:	48a6      	ldr	r0, [pc, #664]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002a50:	f001 fe80 	bl	8004754 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b25a      	sxtb	r2, r3
 8002a58:	4ba4      	ldr	r3, [pc, #656]	; (8002cec <StartTaskSetHome+0x2a8>)
 8002a5a:	701a      	strb	r2, [r3, #0]
	sensor.sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	48a2      	ldr	r0, [pc, #648]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002a60:	f001 fe78 	bl	8004754 <HAL_GPIO_ReadPin>
 8002a64:	4603      	mov	r3, r0
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	4ba0      	ldr	r3, [pc, #640]	; (8002cec <StartTaskSetHome+0x2a8>)
 8002a6a:	705a      	strb	r2, [r3, #1]
	sensor.sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	48a0      	ldr	r0, [pc, #640]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002a70:	f001 fe70 	bl	8004754 <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	b25a      	sxtb	r2, r3
 8002a78:	4b9c      	ldr	r3, [pc, #624]	; (8002cec <StartTaskSetHome+0x2a8>)
 8002a7a:	709a      	strb	r2, [r3, #2]
	sensor.sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	489c      	ldr	r0, [pc, #624]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002a80:	f001 fe68 	bl	8004754 <HAL_GPIO_ReadPin>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b25a      	sxtb	r2, r3
 8002a88:	4b98      	ldr	r3, [pc, #608]	; (8002cec <StartTaskSetHome+0x2a8>)
 8002a8a:	70da      	strb	r2, [r3, #3]
	if(FlagStart.startSetHome == 1){
 8002a8c:	4b99      	ldr	r3, [pc, #612]	; (8002cf4 <StartTaskSetHome+0x2b0>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d111      	bne.n	8002ab8 <StartTaskSetHome+0x74>
		sethomeJ.sethomeJ1 = 0;
 8002a94:	4b98      	ldr	r3, [pc, #608]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
		sethomeJ.sethomeJ2 = 0;
 8002a9a:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	705a      	strb	r2, [r3, #1]
		sethomeJ.sethomeJ3 = 0;
 8002aa0:	4b95      	ldr	r3, [pc, #596]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	709a      	strb	r2, [r3, #2]
		sethomeJ.sethomeJ4 = 0;
 8002aa6:	4b94      	ldr	r3, [pc, #592]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	70da      	strb	r2, [r3, #3]
		FlagStart.startProgram = 0;
 8002aac:	4b91      	ldr	r3, [pc, #580]	; (8002cf4 <StartTaskSetHome+0x2b0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	705a      	strb	r2, [r3, #1]
		FlagStart.startSetHome = 0;
 8002ab2:	4b90      	ldr	r3, [pc, #576]	; (8002cf4 <StartTaskSetHome+0x2b0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
	}
	if(FlagStart.startProgram == 0){
 8002ab8:	4b8e      	ldr	r3, [pc, #568]	; (8002cf4 <StartTaskSetHome+0x2b0>)
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 810f 	bne.w	8002ce0 <StartTaskSetHome+0x29c>
		if(sethomeJ.sethomeJ1 == 0){
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d16b      	bne.n	8002ba2 <StartTaskSetHome+0x15e>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	4886      	ldr	r0, [pc, #536]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002ace:	f001 fe41 	bl	8004754 <HAL_GPIO_ReadPin>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d11c      	bne.n	8002b12 <StartTaskSetHome+0xce>
				osDelay(1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f004 fd16 	bl	800750a <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	4881      	ldr	r0, [pc, #516]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002ae2:	f001 fe37 	bl	8004754 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d15a      	bne.n	8002ba2 <StartTaskSetHome+0x15e>
					ResetCount(&ENC_LINK1, 1);
 8002aec:	2101      	movs	r1, #1
 8002aee:	4883      	ldr	r0, [pc, #524]	; (8002cfc <StartTaskSetHome+0x2b8>)
 8002af0:	f7fe fb8e 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ1 = 0;
 8002af4:	4b82      	ldr	r3, [pc, #520]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]
					sethomeJ.sethomeJ1 = 1;
 8002afa:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
					Angle.AngleLink1 = 0;
 8002b00:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <StartTaskSetHome+0x2c0>)
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = 0;
 8002b08:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <StartTaskSetHome+0x2c4>)
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
 8002b10:	e047      	b.n	8002ba2 <StartTaskSetHome+0x15e>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
 8002b12:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b14:	f64f 6270 	movw	r2, #65136	; 0xfe70
 8002b18:	801a      	strh	r2, [r3, #0]
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ.SpeedSetHomeJ1 > 0){
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4877      	ldr	r0, [pc, #476]	; (8002cfc <StartTaskSetHome+0x2b8>)
 8002b1e:	f7fe fb11 	bl	8001144 <CountRead>
 8002b22:	ec51 0b10 	vmov	r0, r1, d0
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <StartTaskSetHome+0x2c8>)
 8002b2c:	f7fd fff4 	bl	8000b18 <__aeabi_dcmpgt>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00e      	beq.n	8002b54 <StartTaskSetHome+0x110>
 8002b36:	4b72      	ldr	r3, [pc, #456]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	dd09      	ble.n	8002b54 <StartTaskSetHome+0x110>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	425b      	negs	r3, r3
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	b21a      	sxth	r2, r3
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	e01b      	b.n	8002b8c <StartTaskSetHome+0x148>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ.SpeedSetHomeJ1 < 0) {
 8002b54:	2102      	movs	r1, #2
 8002b56:	4869      	ldr	r0, [pc, #420]	; (8002cfc <StartTaskSetHome+0x2b8>)
 8002b58:	f7fe faf4 	bl	8001144 <CountRead>
 8002b5c:	ec51 0b10 	vmov	r0, r1, d0
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <StartTaskSetHome+0x2cc>)
 8002b66:	f7fd ffb9 	bl	8000adc <__aeabi_dcmplt>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <StartTaskSetHome+0x148>
 8002b70:	4b63      	ldr	r3, [pc, #396]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	da08      	bge.n	8002b8c <StartTaskSetHome+0x148>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002b7a:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	425b      	negs	r3, r3
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b21a      	sxth	r2, r3
 8002b88:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b8a:	801a      	strh	r2, [r3, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ.SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b92:	461a      	mov	r2, r3
 8002b94:	230c      	movs	r3, #12
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2308      	movs	r3, #8
 8002b9a:	495e      	ldr	r1, [pc, #376]	; (8002d14 <StartTaskSetHome+0x2d0>)
 8002b9c:	485e      	ldr	r0, [pc, #376]	; (8002d18 <StartTaskSetHome+0x2d4>)
 8002b9e:	f7fe fb4e 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ2 == 0){
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002ba4:	785b      	ldrb	r3, [r3, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d130      	bne.n	8002c0c <StartTaskSetHome+0x1c8>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	484e      	ldr	r0, [pc, #312]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002bae:	f001 fdd1 	bl	8004754 <HAL_GPIO_ReadPin>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d11a      	bne.n	8002bee <StartTaskSetHome+0x1aa>
				osDelay(1);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f004 fca6 	bl	800750a <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	4849      	ldr	r0, [pc, #292]	; (8002ce8 <StartTaskSetHome+0x2a4>)
 8002bc2:	f001 fdc7 	bl	8004754 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d11f      	bne.n	8002c0c <StartTaskSetHome+0x1c8>
					ResetCount(&ENC_LINK2, 1);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4853      	ldr	r0, [pc, #332]	; (8002d1c <StartTaskSetHome+0x2d8>)
 8002bd0:	f7fe fb1e 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ2 = 0;
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	805a      	strh	r2, [r3, #2]
					sethomeJ.sethomeJ2 = 1;
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	705a      	strb	r2, [r3, #1]
					Angle.AngleLink2 = 187;
 8002be0:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <StartTaskSetHome+0x2c0>)
 8002be2:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <StartTaskSetHome+0x2dc>)
 8002be4:	605a      	str	r2, [r3, #4]
					Setpoint.p0_2 = 187;
 8002be6:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <StartTaskSetHome+0x2c4>)
 8002be8:	4a4d      	ldr	r2, [pc, #308]	; (8002d20 <StartTaskSetHome+0x2dc>)
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
 8002bec:	e00e      	b.n	8002c0c <StartTaskSetHome+0x1c8>

				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
 8002bee:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002bf0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002bf4:	805a      	strh	r2, [r3, #2]
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ.SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002bf6:	4b42      	ldr	r3, [pc, #264]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002bf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	230c      	movs	r3, #12
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2308      	movs	r3, #8
 8002c04:	4947      	ldr	r1, [pc, #284]	; (8002d24 <StartTaskSetHome+0x2e0>)
 8002c06:	4848      	ldr	r0, [pc, #288]	; (8002d28 <StartTaskSetHome+0x2e4>)
 8002c08:	f7fe fb19 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ3 == 0){
 8002c0c:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d130      	bne.n	8002c76 <StartTaskSetHome+0x232>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002c14:	2110      	movs	r1, #16
 8002c16:	4836      	ldr	r0, [pc, #216]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002c18:	f001 fd9c 	bl	8004754 <HAL_GPIO_ReadPin>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11a      	bne.n	8002c58 <StartTaskSetHome+0x214>
				osDelay(1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f004 fc71 	bl	800750a <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002c28:	2110      	movs	r1, #16
 8002c2a:	4831      	ldr	r0, [pc, #196]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002c2c:	f001 fd92 	bl	8004754 <HAL_GPIO_ReadPin>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11f      	bne.n	8002c76 <StartTaskSetHome+0x232>
					ResetCount(&ENC_LINK3, 1);
 8002c36:	2101      	movs	r1, #1
 8002c38:	483c      	ldr	r0, [pc, #240]	; (8002d2c <StartTaskSetHome+0x2e8>)
 8002c3a:	f7fe fae9 	bl	8001210 <ResetCount>
					sethomeJ.sethomeJ3 = 1;
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	709a      	strb	r2, [r3, #2]
					SpeedSetHomeJ.SpeedSetHomeJ3 = 0;
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	809a      	strh	r2, [r3, #4]
					Angle.AngleLink3 = -135;
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	; (8002d04 <StartTaskSetHome+0x2c0>)
 8002c4c:	4a38      	ldr	r2, [pc, #224]	; (8002d30 <StartTaskSetHome+0x2ec>)
 8002c4e:	609a      	str	r2, [r3, #8]
					Setpoint.p0_3 = -135;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <StartTaskSetHome+0x2c4>)
 8002c52:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <StartTaskSetHome+0x2ec>)
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
 8002c56:	e00e      	b.n	8002c76 <StartTaskSetHome+0x232>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002c5a:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8002c5e:	809a      	strh	r2, [r3, #4]
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ.SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002c60:	4b27      	ldr	r3, [pc, #156]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002c62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	2304      	movs	r3, #4
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	492d      	ldr	r1, [pc, #180]	; (8002d24 <StartTaskSetHome+0x2e0>)
 8002c70:	4830      	ldr	r0, [pc, #192]	; (8002d34 <StartTaskSetHome+0x2f0>)
 8002c72:	f7fe fae4 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ4 == 0){
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002c78:	78db      	ldrb	r3, [r3, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d130      	bne.n	8002ce0 <StartTaskSetHome+0x29c>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002c7e:	2120      	movs	r1, #32
 8002c80:	481b      	ldr	r0, [pc, #108]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002c82:	f001 fd67 	bl	8004754 <HAL_GPIO_ReadPin>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11a      	bne.n	8002cc2 <StartTaskSetHome+0x27e>
				osDelay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f004 fc3c 	bl	800750a <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002c92:	2120      	movs	r1, #32
 8002c94:	4816      	ldr	r0, [pc, #88]	; (8002cf0 <StartTaskSetHome+0x2ac>)
 8002c96:	f001 fd5d 	bl	8004754 <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11f      	bne.n	8002ce0 <StartTaskSetHome+0x29c>
					ResetCount(&ENC_LINK4, 1);
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4825      	ldr	r0, [pc, #148]	; (8002d38 <StartTaskSetHome+0x2f4>)
 8002ca4:	f7fe fab4 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ4 = 0;
 8002ca8:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	80da      	strh	r2, [r3, #6]
					sethomeJ.sethomeJ4 = 1;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <StartTaskSetHome+0x2b4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	70da      	strb	r2, [r3, #3]
					Angle.AngleLink4 = 90;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <StartTaskSetHome+0x2c0>)
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <StartTaskSetHome+0x2f8>)
 8002cb8:	60da      	str	r2, [r3, #12]
					Setpoint.p0_4 = 90;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <StartTaskSetHome+0x2c4>)
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <StartTaskSetHome+0x2f8>)
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc0:	e00e      	b.n	8002ce0 <StartTaskSetHome+0x29c>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002cc4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc8:	80da      	strh	r2, [r3, #6]
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ.SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <StartTaskSetHome+0x2bc>)
 8002ccc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4919      	ldr	r1, [pc, #100]	; (8002d40 <StartTaskSetHome+0x2fc>)
 8002cda:	481a      	ldr	r0, [pc, #104]	; (8002d44 <StartTaskSetHome+0x300>)
 8002cdc:	f7fe faaf 	bl	800123e <Drive>
		}
//		if(sethomeJ.sethomeJ1 == 1 && sethomeJ.sethomeJ2 == 1 && sethomeJ.sethomeJ3 == 1 && sethomeJ.sethomeJ4 == 1){
//			FlagStart.startProgram = 1;
//		}
	}
    osDelay(10);
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f004 fc12 	bl	800750a <osDelay>
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002ce6:	e6b1      	b.n	8002a4c <StartTaskSetHome+0x8>
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	20000714 	.word	0x20000714
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	20000700 	.word	0x20000700
 8002cf8:	20000710 	.word	0x20000710
 8002cfc:	200012a8 	.word	0x200012a8
 8002d00:	20000708 	.word	0x20000708
 8002d04:	20000718 	.word	0x20000718
 8002d08:	20000728 	.word	0x20000728
 8002d0c:	40568000 	.word	0x40568000
 8002d10:	c0568000 	.word	0xc0568000
 8002d14:	200005b8 	.word	0x200005b8
 8002d18:	200012f0 	.word	0x200012f0
 8002d1c:	200013a8 	.word	0x200013a8
 8002d20:	433b0000 	.word	0x433b0000
 8002d24:	20000528 	.word	0x20000528
 8002d28:	200013f0 	.word	0x200013f0
 8002d2c:	200014a8 	.word	0x200014a8
 8002d30:	c3070000 	.word	0xc3070000
 8002d34:	200014f0 	.word	0x200014f0
 8002d38:	200015a8 	.word	0x200015a8
 8002d3c:	42b40000 	.word	0x42b40000
 8002d40:	20000600 	.word	0x20000600
 8002d44:	200015f0 	.word	0x200015f0

08002d48 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <StartTaskPID+0x40>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <StartTaskPID+0x14>
 8002d58:	f7fe ff0e 	bl	8001b78 <PID_LINK1_Pos>
	  if(sethomeJ.sethomeJ2 == 1)	PID_LINK2_Pos();
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <StartTaskPID+0x40>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <StartTaskPID+0x20>
 8002d64:	f7fe ffbc 	bl	8001ce0 <PID_LINK2_Pos>
	  if(sethomeJ.sethomeJ3 == 1)	PID_LINK3_Pos();
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <StartTaskPID+0x40>)
 8002d6a:	789b      	ldrb	r3, [r3, #2]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <StartTaskPID+0x2c>
 8002d70:	f7ff f870 	bl	8001e54 <PID_LINK3_Pos>
	  if(sethomeJ.sethomeJ4 == 1)	PID_LINK4_Pos();
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <StartTaskPID+0x40>)
 8002d76:	78db      	ldrb	r3, [r3, #3]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <StartTaskPID+0x38>
 8002d7c:	f7ff f924 	bl	8001fc8 <PID_LINK4_Pos>

	  osDelay(10);
 8002d80:	200a      	movs	r0, #10
 8002d82:	f004 fbc2 	bl	800750a <osDelay>
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002d86:	e7e3      	b.n	8002d50 <StartTaskPID+0x8>
 8002d88:	20000710 	.word	0x20000710

08002d8c <StartTaskTrajectory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTrajectory */
void StartTaskTrajectory(void const * argument)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTrajectory */
  /* Infinite loop */
  static uint8_t mode = 0;
  for(;;)
  {
	if(FlagStart.startProgram == 1){
 8002d94:	4bae      	ldr	r3, [pc, #696]	; (8003050 <StartTaskTrajectory+0x2c4>)
 8002d96:	785b      	ldrb	r3, [r3, #1]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	f040 8154 	bne.w	8003046 <StartTaskTrajectory+0x2ba>
		switch(mode){
 8002d9e:	4bad      	ldr	r3, [pc, #692]	; (8003054 <StartTaskTrajectory+0x2c8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	f200 814e 	bhi.w	8003044 <StartTaskTrajectory+0x2b8>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <StartTaskTrajectory+0x24>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002e35 	.word	0x08002e35
 8002db8:	08002ea5 	.word	0x08002ea5
 8002dbc:	08002f15 	.word	0x08002f15
 8002dc0:	08002f85 	.word	0x08002f85
			case 0:
				if(T1 < Tf){
 8002dc4:	4ba4      	ldr	r3, [pc, #656]	; (8003058 <StartTaskTrajectory+0x2cc>)
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	4ba4      	ldr	r3, [pc, #656]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d528      	bpl.n	8002e2c <StartTaskTrajectory+0xa0>
					T1 += 5;
 8002dda:	4b9f      	ldr	r3, [pc, #636]	; (8003058 <StartTaskTrajectory+0x2cc>)
 8002ddc:	edd3 7a00 	vldr	s15, [r3]
 8002de0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002de4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de8:	4b9b      	ldr	r3, [pc, #620]	; (8003058 <StartTaskTrajectory+0x2cc>)
 8002dea:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink1 = p(Setpoint.p0_1, Setpoint.setpoint1, Tf, 0, 0, T1);
 8002dee:	4b9c      	ldr	r3, [pc, #624]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002df0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002df4:	4b9a      	ldr	r3, [pc, #616]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002df6:	ed93 7a00 	vldr	s14, [r3]
 8002dfa:	4b98      	ldr	r3, [pc, #608]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002dfc:	edd3 6a00 	vldr	s13, [r3]
 8002e00:	4b95      	ldr	r3, [pc, #596]	; (8003058 <StartTaskTrajectory+0x2cc>)
 8002e02:	ed93 6a00 	vldr	s12, [r3]
 8002e06:	eef0 2a46 	vmov.f32	s5, s12
 8002e0a:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002e0e:	eddf 1a95 	vldr	s3, [pc, #596]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002e12:	eeb0 1a66 	vmov.f32	s2, s13
 8002e16:	eef0 0a47 	vmov.f32	s1, s14
 8002e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1e:	f7fe fc11 	bl	8001644 <p>
 8002e22:	eef0 7a40 	vmov.f32	s15, s0
 8002e26:	4b90      	ldr	r3, [pc, #576]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002e28:	edc3 7a00 	vstr	s15, [r3]
				}
				mode = 1;
 8002e2c:	4b89      	ldr	r3, [pc, #548]	; (8003054 <StartTaskTrajectory+0x2c8>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
				break;
 8002e32:	e108      	b.n	8003046 <StartTaskTrajectory+0x2ba>
			case 1:
				if(T2 < Tf){
 8002e34:	4b8d      	ldr	r3, [pc, #564]	; (800306c <StartTaskTrajectory+0x2e0>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d528      	bpl.n	8002e9c <StartTaskTrajectory+0x110>
					T2 += 5;
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <StartTaskTrajectory+0x2e0>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <StartTaskTrajectory+0x2e0>)
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink2 = p(Setpoint.p0_2, Setpoint.setpoint2, Tf, 0, 0, T2);
 8002e5e:	4b80      	ldr	r3, [pc, #512]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002e60:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002e66:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e6a:	4b7c      	ldr	r3, [pc, #496]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002e6c:	edd3 6a00 	vldr	s13, [r3]
 8002e70:	4b7e      	ldr	r3, [pc, #504]	; (800306c <StartTaskTrajectory+0x2e0>)
 8002e72:	ed93 6a00 	vldr	s12, [r3]
 8002e76:	eef0 2a46 	vmov.f32	s5, s12
 8002e7a:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002e7e:	eddf 1a79 	vldr	s3, [pc, #484]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002e82:	eeb0 1a66 	vmov.f32	s2, s13
 8002e86:	eef0 0a47 	vmov.f32	s1, s14
 8002e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8e:	f7fe fbd9 	bl	8001644 <p>
 8002e92:	eef0 7a40 	vmov.f32	s15, s0
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002e98:	edc3 7a01 	vstr	s15, [r3, #4]
				}
				mode = 2;
 8002e9c:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <StartTaskTrajectory+0x2c8>)
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
				break;
 8002ea2:	e0d0      	b.n	8003046 <StartTaskTrajectory+0x2ba>

			case 2:
				if(T3 < Tf){
 8002ea4:	4b72      	ldr	r3, [pc, #456]	; (8003070 <StartTaskTrajectory+0x2e4>)
 8002ea6:	ed93 7a00 	vldr	s14, [r3]
 8002eaa:	4b6c      	ldr	r3, [pc, #432]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	d528      	bpl.n	8002f0c <StartTaskTrajectory+0x180>
					T3 += 5;
 8002eba:	4b6d      	ldr	r3, [pc, #436]	; (8003070 <StartTaskTrajectory+0x2e4>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ec8:	4b69      	ldr	r3, [pc, #420]	; (8003070 <StartTaskTrajectory+0x2e4>)
 8002eca:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink3 = p(Setpoint.p0_3, Setpoint.setpoint3, Tf, 0, 0, T3);
 8002ece:	4b64      	ldr	r3, [pc, #400]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002ed0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002ed6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002eda:	4b60      	ldr	r3, [pc, #384]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002edc:	edd3 6a00 	vldr	s13, [r3]
 8002ee0:	4b63      	ldr	r3, [pc, #396]	; (8003070 <StartTaskTrajectory+0x2e4>)
 8002ee2:	ed93 6a00 	vldr	s12, [r3]
 8002ee6:	eef0 2a46 	vmov.f32	s5, s12
 8002eea:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002eee:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002ef2:	eeb0 1a66 	vmov.f32	s2, s13
 8002ef6:	eef0 0a47 	vmov.f32	s1, s14
 8002efa:	eeb0 0a67 	vmov.f32	s0, s15
 8002efe:	f7fe fba1 	bl	8001644 <p>
 8002f02:	eef0 7a40 	vmov.f32	s15, s0
 8002f06:	4b58      	ldr	r3, [pc, #352]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002f08:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				mode = 3;
 8002f0c:	4b51      	ldr	r3, [pc, #324]	; (8003054 <StartTaskTrajectory+0x2c8>)
 8002f0e:	2203      	movs	r2, #3
 8002f10:	701a      	strb	r2, [r3, #0]
				break;
 8002f12:	e098      	b.n	8003046 <StartTaskTrajectory+0x2ba>
			case 3:
				if(T4 < Tf){
 8002f14:	4b57      	ldr	r3, [pc, #348]	; (8003074 <StartTaskTrajectory+0x2e8>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	d528      	bpl.n	8002f7c <StartTaskTrajectory+0x1f0>
					T4 += 5;
 8002f2a:	4b52      	ldr	r3, [pc, #328]	; (8003074 <StartTaskTrajectory+0x2e8>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f38:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <StartTaskTrajectory+0x2e8>)
 8002f3a:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink4 = p(Setpoint.p0_4, Setpoint.setpoint4, Tf, 0, 0, T4);
 8002f3e:	4b48      	ldr	r3, [pc, #288]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002f40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f44:	4b46      	ldr	r3, [pc, #280]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002f46:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f4a:	4b44      	ldr	r3, [pc, #272]	; (800305c <StartTaskTrajectory+0x2d0>)
 8002f4c:	edd3 6a00 	vldr	s13, [r3]
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <StartTaskTrajectory+0x2e8>)
 8002f52:	ed93 6a00 	vldr	s12, [r3]
 8002f56:	eef0 2a46 	vmov.f32	s5, s12
 8002f5a:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002f5e:	eddf 1a41 	vldr	s3, [pc, #260]	; 8003064 <StartTaskTrajectory+0x2d8>
 8002f62:	eeb0 1a66 	vmov.f32	s2, s13
 8002f66:	eef0 0a47 	vmov.f32	s1, s14
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	f7fe fb69 	bl	8001644 <p>
 8002f72:	eef0 7a40 	vmov.f32	s15, s0
 8002f76:	4b3c      	ldr	r3, [pc, #240]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002f78:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				mode = 4;
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <StartTaskTrajectory+0x2c8>)
 8002f7e:	2204      	movs	r2, #4
 8002f80:	701a      	strb	r2, [r3, #0]
				break;
 8002f82:	e060      	b.n	8003046 <StartTaskTrajectory+0x2ba>
			case 4:

				  if (Setpoint.setpoint1 != Setpoint.preSetpoint1)
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	4b35      	ldr	r3, [pc, #212]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002f8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f90:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	d00b      	beq.n	8002fb2 <StartTaskTrajectory+0x226>
				  {
					T1 = 0;
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <StartTaskTrajectory+0x2cc>)
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = Angle.AngleLink1;
 8002fa2:	4b31      	ldr	r3, [pc, #196]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fa8:	6213      	str	r3, [r2, #32]
					Setpoint.preSetpoint1 = Setpoint.setpoint1;
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fb0:	6113      	str	r3, [r2, #16]
				  }
				  if (Setpoint.setpoint2 != Setpoint.preSetpoint2)
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fbe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	d00b      	beq.n	8002fe0 <StartTaskTrajectory+0x254>
				  {
					T2 = 0;
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <StartTaskTrajectory+0x2e0>)
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
					Setpoint.p0_2 = Angle.AngleLink2;
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fd6:	6253      	str	r3, [r2, #36]	; 0x24
					Setpoint.preSetpoint2 = Setpoint.setpoint2;
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fde:	6153      	str	r3, [r2, #20]
				  }
				  if (Setpoint.setpoint3 != Setpoint.preSetpoint3)
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fe2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8002fe8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fec:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d00b      	beq.n	800300e <StartTaskTrajectory+0x282>
				  {
					T3 = 0;
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <StartTaskTrajectory+0x2e4>)
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
					Setpoint.p0_3 = Angle.AngleLink3;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <StartTaskTrajectory+0x2dc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003004:	6293      	str	r3, [r2, #40]	; 0x28
					Setpoint.preSetpoint3 = Setpoint.setpoint3;
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a15      	ldr	r2, [pc, #84]	; (8003060 <StartTaskTrajectory+0x2d4>)
 800300c:	6193      	str	r3, [r2, #24]
				  }
				  if (Setpoint.setpoint4 != Setpoint.preSetpoint4)
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003010:	ed93 7a03 	vldr	s14, [r3, #12]
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003016:	edd3 7a07 	vldr	s15, [r3, #28]
 800301a:	eeb4 7a67 	vcmp.f32	s14, s15
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d00b      	beq.n	800303c <StartTaskTrajectory+0x2b0>
				  {
					T4 = 0;
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <StartTaskTrajectory+0x2e8>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
					Setpoint.p0_4 = Angle.AngleLink4;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <StartTaskTrajectory+0x2dc>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003032:	62d3      	str	r3, [r2, #44]	; 0x2c
					Setpoint.preSetpoint4 = Setpoint.setpoint4;
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <StartTaskTrajectory+0x2d4>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <StartTaskTrajectory+0x2d4>)
 800303a:	61d3      	str	r3, [r2, #28]
				  }
				  mode = 0;
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <StartTaskTrajectory+0x2c8>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]

				  break;
 8003042:	e000      	b.n	8003046 <StartTaskTrajectory+0x2ba>
			default:
			  break;
 8003044:	bf00      	nop
		}

	}
    osDelay(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f004 fa5f 	bl	800750a <osDelay>
	if(FlagStart.startProgram == 1){
 800304c:	e6a2      	b.n	8002d94 <StartTaskTrajectory+0x8>
 800304e:	bf00      	nop
 8003050:	20000700 	.word	0x20000700
 8003054:	20001aac 	.word	0x20001aac
 8003058:	20000a8c 	.word	0x20000a8c
 800305c:	20000000 	.word	0x20000000
 8003060:	20000728 	.word	0x20000728
 8003064:	00000000 	.word	0x00000000
 8003068:	20000718 	.word	0x20000718
 800306c:	20000a90 	.word	0x20000a90
 8003070:	20000a94 	.word	0x20000a94
 8003074:	20000a98 	.word	0x20000a98

08003078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800308a:	f000 fca7 	bl	80039dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40002000 	.word	0x40002000

0800309c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i
}
 80030a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030a4:	e7fe      	b.n	80030a4 <Error_Handler+0x8>
	...

080030a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_MspInit+0x54>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_MspInit+0x54>)
 80030b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_MspInit+0x54>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_MspInit+0x54>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_MspInit+0x54>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_MspInit+0x54>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	603b      	str	r3, [r7, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	210f      	movs	r1, #15
 80030ea:	f06f 0001 	mvn.w	r0, #1
 80030ee:	f000 fd64 	bl	8003bba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800

08003100 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b090      	sub	sp, #64	; 0x40
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a78      	ldr	r2, [pc, #480]	; (8003300 <HAL_TIM_Encoder_MspInit+0x200>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d135      	bne.n	800318e <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	4b77      	ldr	r3, [pc, #476]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a76      	ldr	r2, [pc, #472]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b74      	ldr	r3, [pc, #464]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 800315a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800316c:	2301      	movs	r3, #1
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003174:	4619      	mov	r1, r3
 8003176:	4864      	ldr	r0, [pc, #400]	; (8003308 <HAL_TIM_Encoder_MspInit+0x208>)
 8003178:	f001 f950 	bl	800441c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2105      	movs	r1, #5
 8003180:	2018      	movs	r0, #24
 8003182:	f000 fd1a 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003186:	2018      	movs	r0, #24
 8003188:	f000 fd33 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800318c:	e0b3      	b.n	80032f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d14b      	bne.n	8003230 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6413      	str	r3, [r2, #64]	; 0x40
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	4b52      	ldr	r3, [pc, #328]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6313      	str	r3, [r2, #48]	; 0x30
 80031c4:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d0:	2300      	movs	r3, #0
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	4b4b      	ldr	r3, [pc, #300]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	6313      	str	r3, [r2, #48]	; 0x30
 80031e0:	4b48      	ldr	r3, [pc, #288]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 80031ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031fe:	2301      	movs	r3, #1
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8003202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003206:	4619      	mov	r1, r3
 8003208:	483f      	ldr	r0, [pc, #252]	; (8003308 <HAL_TIM_Encoder_MspInit+0x208>)
 800320a:	f001 f907 	bl	800441c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 800320e:	2308      	movs	r3, #8
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321a:	2300      	movs	r3, #0
 800321c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800321e:	2301      	movs	r3, #1
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003226:	4619      	mov	r1, r3
 8003228:	4838      	ldr	r0, [pc, #224]	; (800330c <HAL_TIM_Encoder_MspInit+0x20c>)
 800322a:	f001 f8f7 	bl	800441c <HAL_GPIO_Init>
}
 800322e:	e062      	b.n	80032f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a36      	ldr	r2, [pc, #216]	; (8003310 <HAL_TIM_Encoder_MspInit+0x210>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d12c      	bne.n	8003294 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a29      	ldr	r2, [pc, #164]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8003272:	23c0      	movs	r3, #192	; 0xc0
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003282:	2302      	movs	r3, #2
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328a:	4619      	mov	r1, r3
 800328c:	481e      	ldr	r0, [pc, #120]	; (8003308 <HAL_TIM_Encoder_MspInit+0x208>)
 800328e:	f001 f8c5 	bl	800441c <HAL_GPIO_Init>
}
 8003292:	e030      	b.n	80032f6 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_TIM_Encoder_MspInit+0x214>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d12b      	bne.n	80032f6 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a17      	ldr	r2, [pc, #92]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032a8:	f043 0308 	orr.w	r3, r3, #8
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_TIM_Encoder_MspInit+0x204>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 80032d6:	2303      	movs	r3, #3
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032e6:	2302      	movs	r3, #2
 80032e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <HAL_TIM_Encoder_MspInit+0x208>)
 80032f2:	f001 f893 	bl	800441c <HAL_GPIO_Init>
}
 80032f6:	bf00      	nop
 80032f8:	3740      	adds	r7, #64	; 0x40
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40010000 	.word	0x40010000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40000400 	.word	0x40000400
 8003314:	40000c00 	.word	0x40000c00

08003318 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <HAL_TIM_PWM_MspInit+0xb8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 8003334:	f043 0304 	orr.w	r3, r3, #4
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003346:	e03e      	b.n	80033c6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_TIM_PWM_MspInit+0xc0>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d11e      	bne.n	8003390 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2105      	movs	r1, #5
 8003372:	202b      	movs	r0, #43	; 0x2b
 8003374:	f000 fc21 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003378:	202b      	movs	r0, #43	; 0x2b
 800337a:	f000 fc3a 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 800337e:	2200      	movs	r2, #0
 8003380:	210f      	movs	r1, #15
 8003382:	202d      	movs	r0, #45	; 0x2d
 8003384:	f000 fc19 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003388:	202d      	movs	r0, #45	; 0x2d
 800338a:	f000 fc32 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 800338e:	e01a      	b.n	80033c6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM9)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_TIM_PWM_MspInit+0xc4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d115      	bne.n	80033c6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <HAL_TIM_PWM_MspInit+0xbc>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2105      	movs	r1, #5
 80033ba:	2018      	movs	r0, #24
 80033bc:	f000 fbfd 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033c0:	2018      	movs	r0, #24
 80033c2:	f000 fc16 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000

080033e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e8:	f107 0314 	add.w	r3, r7, #20
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a37      	ldr	r2, [pc, #220]	; (80034dc <HAL_TIM_MspPostInit+0xfc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d11f      	bne.n	8003442 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 800341e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003424:	2302      	movs	r3, #2
 8003426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003430:	2302      	movs	r3, #2
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4619      	mov	r1, r3
 800343a:	482a      	ldr	r0, [pc, #168]	; (80034e4 <HAL_TIM_MspPostInit+0x104>)
 800343c:	f000 ffee 	bl	800441c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003440:	e047      	b.n	80034d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_TIM_MspPostInit+0x108>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d11f      	bne.n	800348c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 8003468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800347a:	2303      	movs	r3, #3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 0314 	add.w	r3, r7, #20
 8003482:	4619      	mov	r1, r3
 8003484:	4819      	ldr	r0, [pc, #100]	; (80034ec <HAL_TIM_MspPostInit+0x10c>)
 8003486:	f000 ffc9 	bl	800441c <HAL_GPIO_Init>
}
 800348a:	e022      	b.n	80034d2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_TIM_MspPostInit+0x110>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11d      	bne.n	80034d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_TIM_MspPostInit+0x100>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 80034b2:	230c      	movs	r3, #12
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80034c2:	2303      	movs	r3, #3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4809      	ldr	r0, [pc, #36]	; (80034f4 <HAL_TIM_MspPostInit+0x114>)
 80034ce:	f000 ffa5 	bl	800441c <HAL_GPIO_Init>
}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40010400 	.word	0x40010400
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <HAL_UART_MspInit+0xf0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d162      	bne.n	80035e0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <HAL_UART_MspInit+0xf4>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a32      	ldr	r2, [pc, #200]	; (80035ec <HAL_UART_MspInit+0xf4>)
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_UART_MspInit+0xf4>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_UART_MspInit+0xf4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <HAL_UART_MspInit+0xf4>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_UART_MspInit+0xf4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003552:	23c0      	movs	r3, #192	; 0xc0
 8003554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355e:	2303      	movs	r3, #3
 8003560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003562:	2307      	movs	r3, #7
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4820      	ldr	r0, [pc, #128]	; (80035f0 <HAL_UART_MspInit+0xf8>)
 800356e:	f000 ff55 	bl	800441c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <HAL_UART_MspInit+0x100>)
 8003576:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 800357a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800357e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 800358e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003592:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 8003596:	2200      	movs	r2, #0
 8003598:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800359a:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035ac:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035b4:	480f      	ldr	r0, [pc, #60]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035b6:	f000 fb2f 	bl	8003c18 <HAL_DMA_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80035c0:	f7ff fd6c 	bl	800309c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_UART_MspInit+0xfc>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2105      	movs	r1, #5
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	f000 faf0 	bl	8003bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035da:	2025      	movs	r0, #37	; 0x25
 80035dc:	f000 fb09 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035e0:	bf00      	nop
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40011000 	.word	0x40011000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020400 	.word	0x40020400
 80035f4:	20000690 	.word	0x20000690
 80035f8:	40026440 	.word	0x40026440

080035fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08e      	sub	sp, #56	; 0x38
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_InitTick+0xe4>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <HAL_InitTick+0xe4>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6413      	str	r3, [r2, #64]	; 0x40
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_InitTick+0xe4>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003628:	f107 0210 	add.w	r2, r7, #16
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fd3e 	bl	80050b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003642:	f001 fd0f 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8003646:	6378      	str	r0, [r7, #52]	; 0x34
 8003648:	e004      	b.n	8003654 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800364a:	f001 fd0b 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 800364e:	4603      	mov	r3, r0
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	4a23      	ldr	r2, [pc, #140]	; (80036e4 <HAL_InitTick+0xe8>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0c9b      	lsrs	r3, r3, #18
 800365e:	3b01      	subs	r3, #1
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003662:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_InitTick+0xec>)
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_InitTick+0xf0>)
 8003666:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003668:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_InitTick+0xec>)
 800366a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800366e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_InitTick+0xec>)
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_InitTick+0xec>)
 8003678:	2200      	movs	r2, #0
 800367a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367c:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_InitTick+0xec>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_InitTick+0xec>)
 8003684:	2200      	movs	r2, #0
 8003686:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003688:	4817      	ldr	r0, [pc, #92]	; (80036e8 <HAL_InitTick+0xec>)
 800368a:	f001 fd45 	bl	8005118 <HAL_TIM_Base_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003694:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11b      	bne.n	80036d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800369c:	4812      	ldr	r0, [pc, #72]	; (80036e8 <HAL_InitTick+0xec>)
 800369e:	f001 fd95 	bl	80051cc <HAL_TIM_Base_Start_IT>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80036a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d111      	bne.n	80036d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80036b0:	202d      	movs	r0, #45	; 0x2d
 80036b2:	f000 fa9e 	bl	8003bf2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d808      	bhi.n	80036ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	202d      	movs	r0, #45	; 0x2d
 80036c2:	f000 fa7a 	bl	8003bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_InitTick+0xf4>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e002      	b.n	80036d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3738      	adds	r7, #56	; 0x38
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	20001ab0 	.word	0x20001ab0
 80036ec:	40002000 	.word	0x40002000
 80036f0:	20000008 	.word	0x20000008

080036f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f8:	e7fe      	b.n	80036f8 <NMI_Handler+0x4>

080036fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fe:	e7fe      	b.n	80036fe <HardFault_Handler+0x4>

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	e7fe      	b.n	8003704 <MemManage_Handler+0x4>

08003706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370a:	e7fe      	b.n	800370a <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <UsageFault_Handler+0x4>

08003712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003724:	4803      	ldr	r0, [pc, #12]	; (8003734 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003726:	f002 f80d 	bl	8005744 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800372a:	4803      	ldr	r0, [pc, #12]	; (8003738 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800372c:	f002 f80a 	bl	8005744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000450 	.word	0x20000450
 8003738:	20000600 	.word	0x20000600

0800373c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003740:	4802      	ldr	r0, [pc, #8]	; (800374c <USART1_IRQHandler+0x10>)
 8003742:	f002 fdeb 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000648 	.word	0x20000648

08003750 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003754:	4802      	ldr	r0, [pc, #8]	; (8003760 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003756:	f001 fff5 	bl	8005744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	200005b8 	.word	0x200005b8

08003764 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003768:	4803      	ldr	r0, [pc, #12]	; (8003778 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800376a:	f001 ffeb 	bl	8005744 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800376e:	4803      	ldr	r0, [pc, #12]	; (800377c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003770:	f001 ffe8 	bl	8005744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003774:	bf00      	nop
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200005b8 	.word	0x200005b8
 800377c:	20001ab0 	.word	0x20001ab0

08003780 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <DMA2_Stream2_IRQHandler+0x10>)
 8003786:	f000 fbdf 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000690 	.word	0x20000690

08003794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return 1;
 8003798:	2301      	movs	r3, #1
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_kill>:

int _kill(int pid, int sig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ae:	f007 f823 	bl	800a7f8 <__errno>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2216      	movs	r2, #22
 80037b6:	601a      	str	r2, [r3, #0]
  return -1;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_exit>:

void _exit (int status)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ffe7 	bl	80037a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037d6:	e7fe      	b.n	80037d6 <_exit+0x12>

080037d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e00a      	b.n	8003800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037ea:	f3af 8000 	nop.w
 80037ee:	4601      	mov	r1, r0
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	60ba      	str	r2, [r7, #8]
 80037f6:	b2ca      	uxtb	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	3301      	adds	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	dbf0      	blt.n	80037ea <_read+0x12>
  }

  return len;
 8003808:	687b      	ldr	r3, [r7, #4]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e009      	b.n	8003838 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	60ba      	str	r2, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3301      	adds	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	dbf1      	blt.n	8003824 <_write+0x12>
  }
  return len;
 8003840:	687b      	ldr	r3, [r7, #4]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <_close>:

int _close(int file)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003872:	605a      	str	r2, [r3, #4]
  return 0;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <_isatty>:

int _isatty(int file)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <_sbrk+0x5c>)
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <_sbrk+0x60>)
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <_sbrk+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <_sbrk+0x64>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <_sbrk+0x68>)
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e4:	f006 ff88 	bl	800a7f8 <__errno>
 80038e8:	4603      	mov	r3, r0
 80038ea:	220c      	movs	r2, #12
 80038ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	e009      	b.n	8003908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <_sbrk+0x64>)
 8003904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20020000 	.word	0x20020000
 8003914:	00000400 	.word	0x00000400
 8003918:	20001af8 	.word	0x20001af8
 800391c:	200059a0 	.word	0x200059a0

08003920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <SystemInit+0x20>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392a:	4a05      	ldr	r2, [pc, #20]	; (8003940 <SystemInit+0x20>)
 800392c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800397c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003948:	f7ff ffea 	bl	8003920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800394c:	480c      	ldr	r0, [pc, #48]	; (8003980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800394e:	490d      	ldr	r1, [pc, #52]	; (8003984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003954:	e002      	b.n	800395c <LoopCopyDataInit>

08003956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395a:	3304      	adds	r3, #4

0800395c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800395c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800395e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003960:	d3f9      	bcc.n	8003956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003964:	4c0a      	ldr	r4, [pc, #40]	; (8003990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003968:	e001      	b.n	800396e <LoopFillZerobss>

0800396a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800396c:	3204      	adds	r2, #4

0800396e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800396e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003970:	d3fb      	bcc.n	800396a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003972:	f006 ff47 	bl	800a804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003976:	f7fe fb53 	bl	8002020 <main>
  bx  lr    
 800397a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800397c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003984:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003988:	0800dfc4 	.word	0x0800dfc4
  ldr r2, =_sbss
 800398c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003990:	200059a0 	.word	0x200059a0

08003994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003994:	e7fe      	b.n	8003994 <ADC_IRQHandler>
	...

08003998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_Init+0x40>)
 80039a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_Init+0x40>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_Init+0x40>)
 80039ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b4:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_Init+0x40>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_Init+0x40>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c0:	2003      	movs	r0, #3
 80039c2:	f000 f8ef 	bl	8003ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039c6:	200f      	movs	r0, #15
 80039c8:	f7ff fe18 	bl	80035fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039cc:	f7ff fb6c 	bl	80030a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023c00 	.word	0x40023c00

080039dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_IncTick+0x20>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_IncTick+0x24>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_IncTick+0x24>)
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000000c 	.word	0x2000000c
 8003a00:	20001afc 	.word	0x20001afc

08003a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return uwTick;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_GetTick+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20001afc 	.word	0x20001afc

08003a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a38:	4013      	ands	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4e:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <__NVIC_SetPriorityGrouping+0x44>)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	60d3      	str	r3, [r2, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <__NVIC_GetPriorityGrouping+0x18>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	0a1b      	lsrs	r3, r3, #8
 8003a6e:	f003 0307 	and.w	r3, r3, #7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	db0b      	blt.n	8003aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <__NVIC_EnableIRQ+0x38>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000e100 	.word	0xe000e100

08003abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	db0a      	blt.n	8003ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <__NVIC_SetPriority+0x4c>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae4:	e00a      	b.n	8003afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4908      	ldr	r1, [pc, #32]	; (8003b0c <__NVIC_SetPriority+0x50>)
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3b04      	subs	r3, #4
 8003af4:	0112      	lsls	r2, r2, #4
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	440b      	add	r3, r1
 8003afa:	761a      	strb	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000e100 	.word	0xe000e100
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	; 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f1c3 0307 	rsb	r3, r3, #7
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	bf28      	it	cs
 8003b2e:	2304      	movcs	r3, #4
 8003b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d902      	bls.n	8003b40 <NVIC_EncodePriority+0x30>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b03      	subs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <NVIC_EncodePriority+0x32>
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	401a      	ands	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b58:	f04f 31ff 	mov.w	r1, #4294967295
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	43d9      	mvns	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b68:	4313      	orrs	r3, r2
         );
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003b7c:	f3bf 8f4f 	dsb	sy
}
 8003b80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <__NVIC_SystemReset+0x24>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003b8a:	4904      	ldr	r1, [pc, #16]	; (8003b9c <__NVIC_SystemReset+0x24>)
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <__NVIC_SystemReset+0x28>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b92:	f3bf 8f4f 	dsb	sy
}
 8003b96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <__NVIC_SystemReset+0x20>
 8003b9c:	e000ed00 	.word	0xe000ed00
 8003ba0:	05fa0004 	.word	0x05fa0004

08003ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ff35 	bl	8003a1c <__NVIC_SetPriorityGrouping>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bcc:	f7ff ff4a 	bl	8003a64 <__NVIC_GetPriorityGrouping>
 8003bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	6978      	ldr	r0, [r7, #20]
 8003bd8:	f7ff ff9a 	bl	8003b10 <NVIC_EncodePriority>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff69 	bl	8003abc <__NVIC_SetPriority>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff3d 	bl	8003a80 <__NVIC_EnableIRQ>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003c12:	f7ff ffb1 	bl	8003b78 <__NVIC_SystemReset>
	...

08003c18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff feee 	bl	8003a04 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e099      	b.n	8003d68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c54:	e00f      	b.n	8003c76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c56:	f7ff fed5 	bl	8003a04 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d908      	bls.n	8003c76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e078      	b.n	8003d68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e8      	bne.n	8003c56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4b38      	ldr	r3, [pc, #224]	; (8003d70 <HAL_DMA_Init+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d117      	bne.n	8003d3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb01 	bl	8004324 <DMA_CheckFifoParam>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d36:	2301      	movs	r3, #1
 8003d38:	e016      	b.n	8003d68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fab8 	bl	80042b8 <DMA_CalcBaseAndBitshift>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	f010803f 	.word	0xf010803f

08003d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_DMA_Start_IT+0x26>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e040      	b.n	8003e1c <HAL_DMA_Start_IT+0xa8>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d12f      	bne.n	8003e0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fa4a 	bl	800425c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0216 	orr.w	r2, r2, #22
 8003de2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e32:	f7ff fde7 	bl	8003a04 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d008      	beq.n	8003e56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e052      	b.n	8003efc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0216 	bic.w	r2, r2, #22
 8003e64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_DMA_Abort+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0208 	bic.w	r2, r2, #8
 8003e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea6:	e013      	b.n	8003ed0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea8:	f7ff fdac 	bl	8003a04 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e015      	b.n	8003efc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e4      	bne.n	8003ea8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	223f      	movs	r2, #63	; 0x3f
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00c      	b.n	8003f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2205      	movs	r2, #5
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f54:	4b8e      	ldr	r3, [pc, #568]	; (8004190 <HAL_DMA_IRQHandler+0x248>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a8e      	ldr	r2, [pc, #568]	; (8004194 <HAL_DMA_IRQHandler+0x24c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a9b      	lsrs	r3, r3, #10
 8003f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2208      	movs	r2, #8
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb8:	2201      	movs	r2, #1
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2204      	movs	r2, #4
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	2204      	movs	r2, #4
 800400e:	409a      	lsls	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	2210      	movs	r2, #16
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d043      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03c      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	2210      	movs	r2, #16
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d024      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e01f      	b.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01b      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e016      	b.n	80040b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0208 	bic.w	r2, r2, #8
 80040a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	2220      	movs	r2, #32
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 808f 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8087 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2220      	movs	r2, #32
 80040e0:	409a      	lsls	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d136      	bne.n	8004160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0216 	bic.w	r2, r2, #22
 8004100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_DMA_IRQHandler+0x1da>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0208 	bic.w	r2, r2, #8
 8004130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	223f      	movs	r2, #63	; 0x3f
 8004138:	409a      	lsls	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d07e      	beq.n	8004254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
        }
        return;
 800415e:	e079      	b.n	8004254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
 800418c:	e02c      	b.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
 800418e:	bf00      	nop
 8004190:	20000004 	.word	0x20000004
 8004194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d023      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e01e      	b.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10f      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0210 	bic.w	r2, r2, #16
 80041c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d032      	beq.n	8004256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d022      	beq.n	8004242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2205      	movs	r2, #5
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d307      	bcc.n	8004230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f2      	bne.n	8004214 <HAL_DMA_IRQHandler+0x2cc>
 800422e:	e000      	b.n	8004232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
 8004252:	e000      	b.n	8004256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004254:	bf00      	nop
    }
  }
}
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d108      	bne.n	800429c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800429a:	e007      	b.n	80042ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3b10      	subs	r3, #16
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <DMA_CalcBaseAndBitshift+0x64>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042d2:	4a13      	ldr	r2, [pc, #76]	; (8004320 <DMA_CalcBaseAndBitshift+0x68>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d909      	bls.n	80042fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58
 80042f8:	e007      	b.n	800430a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	aaaaaaab 	.word	0xaaaaaaab
 8004320:	0800db6c 	.word	0x0800db6c

08004324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11f      	bne.n	800437e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d856      	bhi.n	80043f2 <DMA_CheckFifoParam+0xce>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <DMA_CheckFifoParam+0x28>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436f 	.word	0x0800436f
 8004354:	0800435d 	.word	0x0800435d
 8004358:	080043f3 	.word	0x080043f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d046      	beq.n	80043f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e043      	b.n	80043f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004376:	d140      	bne.n	80043fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800437c:	e03d      	b.n	80043fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004386:	d121      	bne.n	80043cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d837      	bhi.n	80043fe <DMA_CheckFifoParam+0xda>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <DMA_CheckFifoParam+0x70>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043ab 	.word	0x080043ab
 800439c:	080043a5 	.word	0x080043a5
 80043a0:	080043bd 	.word	0x080043bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e030      	b.n	800440c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d025      	beq.n	8004402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ba:	e022      	b.n	8004402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043c4:	d11f      	bne.n	8004406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043ca:	e01c      	b.n	8004406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d903      	bls.n	80043da <DMA_CheckFifoParam+0xb6>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d003      	beq.n	80043e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043d8:	e018      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
      break;
 80043de:	e015      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      break;
 80043f0:	e00b      	b.n	800440a <DMA_CheckFifoParam+0xe6>
      break;
 80043f2:	bf00      	nop
 80043f4:	e00a      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e008      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e006      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 80043fe:	bf00      	nop
 8004400:	e004      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;   
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <DMA_CheckFifoParam+0xe8>
      break;
 800440a:	bf00      	nop
    }
  } 
  
  return status; 
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e16b      	b.n	8004710 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004438:	2201      	movs	r2, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	429a      	cmp	r2, r3
 8004452:	f040 815a 	bne.w	800470a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d005      	beq.n	800446e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800446a:	2b02      	cmp	r3, #2
 800446c:	d130      	bne.n	80044d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044a4:	2201      	movs	r2, #1
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 0201 	and.w	r2, r3, #1
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d017      	beq.n	800450c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d123      	bne.n	8004560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	08da      	lsrs	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3208      	adds	r2, #8
 8004520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	4013      	ands	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0203 	and.w	r2, r3, #3
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80b4 	beq.w	800470a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b60      	ldr	r3, [pc, #384]	; (8004728 <HAL_GPIO_Init+0x30c>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	4a5f      	ldr	r2, [pc, #380]	; (8004728 <HAL_GPIO_Init+0x30c>)
 80045ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b0:	6453      	str	r3, [r2, #68]	; 0x44
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_GPIO_Init+0x30c>)
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_GPIO_Init+0x310>)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	089b      	lsrs	r3, r3, #2
 80045c4:	3302      	adds	r3, #2
 80045c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	220f      	movs	r2, #15
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_GPIO_Init+0x314>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02b      	beq.n	8004642 <HAL_GPIO_Init+0x226>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a51      	ldr	r2, [pc, #324]	; (8004734 <HAL_GPIO_Init+0x318>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d025      	beq.n	800463e <HAL_GPIO_Init+0x222>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a50      	ldr	r2, [pc, #320]	; (8004738 <HAL_GPIO_Init+0x31c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01f      	beq.n	800463a <HAL_GPIO_Init+0x21e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a4f      	ldr	r2, [pc, #316]	; (800473c <HAL_GPIO_Init+0x320>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d019      	beq.n	8004636 <HAL_GPIO_Init+0x21a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4e      	ldr	r2, [pc, #312]	; (8004740 <HAL_GPIO_Init+0x324>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_GPIO_Init+0x216>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a4d      	ldr	r2, [pc, #308]	; (8004744 <HAL_GPIO_Init+0x328>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00d      	beq.n	800462e <HAL_GPIO_Init+0x212>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_GPIO_Init+0x32c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <HAL_GPIO_Init+0x20e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_GPIO_Init+0x330>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_GPIO_Init+0x20a>
 8004622:	2307      	movs	r3, #7
 8004624:	e00e      	b.n	8004644 <HAL_GPIO_Init+0x228>
 8004626:	2308      	movs	r3, #8
 8004628:	e00c      	b.n	8004644 <HAL_GPIO_Init+0x228>
 800462a:	2306      	movs	r3, #6
 800462c:	e00a      	b.n	8004644 <HAL_GPIO_Init+0x228>
 800462e:	2305      	movs	r3, #5
 8004630:	e008      	b.n	8004644 <HAL_GPIO_Init+0x228>
 8004632:	2304      	movs	r3, #4
 8004634:	e006      	b.n	8004644 <HAL_GPIO_Init+0x228>
 8004636:	2303      	movs	r3, #3
 8004638:	e004      	b.n	8004644 <HAL_GPIO_Init+0x228>
 800463a:	2302      	movs	r3, #2
 800463c:	e002      	b.n	8004644 <HAL_GPIO_Init+0x228>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <HAL_GPIO_Init+0x228>
 8004642:	2300      	movs	r3, #0
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	f002 0203 	and.w	r2, r2, #3
 800464a:	0092      	lsls	r2, r2, #2
 800464c:	4093      	lsls	r3, r2
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004654:	4935      	ldr	r1, [pc, #212]	; (800472c <HAL_GPIO_Init+0x310>)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	3302      	adds	r3, #2
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004662:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_GPIO_Init+0x334>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004686:	4a32      	ldr	r2, [pc, #200]	; (8004750 <HAL_GPIO_Init+0x334>)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_GPIO_Init+0x334>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <HAL_GPIO_Init+0x334>)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046b6:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_GPIO_Init+0x334>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	43db      	mvns	r3, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <HAL_GPIO_Init+0x334>)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_GPIO_Init+0x334>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <HAL_GPIO_Init+0x334>)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	f67f ae90 	bls.w	8004438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3724      	adds	r7, #36	; 0x24
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800
 800472c:	40013800 	.word	0x40013800
 8004730:	40020000 	.word	0x40020000
 8004734:	40020400 	.word	0x40020400
 8004738:	40020800 	.word	0x40020800
 800473c:	40020c00 	.word	0x40020c00
 8004740:	40021000 	.word	0x40021000
 8004744:	40021400 	.word	0x40021400
 8004748:	40021800 	.word	0x40021800
 800474c:	40021c00 	.word	0x40021c00
 8004750:	40013c00 	.word	0x40013c00

08004754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e001      	b.n	8004776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e267      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d075      	beq.n	800488e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047a2:	4b88      	ldr	r3, [pc, #544]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d00c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b85      	ldr	r3, [pc, #532]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d112      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4b82      	ldr	r3, [pc, #520]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c8:	4b7e      	ldr	r3, [pc, #504]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d05b      	beq.n	800488c <HAL_RCC_OscConfig+0x108>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d157      	bne.n	800488c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e242      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x74>
 80047ea:	4b76      	ldr	r3, [pc, #472]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a75      	ldr	r2, [pc, #468]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e01d      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x98>
 8004802:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a6f      	ldr	r2, [pc, #444]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	4b6d      	ldr	r3, [pc, #436]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6c      	ldr	r2, [pc, #432]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xb0>
 800481c:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a68      	ldr	r2, [pc, #416]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a65      	ldr	r2, [pc, #404]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483c:	f7ff f8e2 	bl	8003a04 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004844:	f7ff f8de 	bl	8003a04 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b64      	cmp	r3, #100	; 0x64
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e207      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0xc0>
 8004862:	e014      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7ff f8ce 	bl	8003a04 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486c:	f7ff f8ca 	bl	8003a04 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e1f3      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487e:	4b51      	ldr	r3, [pc, #324]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0xe8>
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d063      	beq.n	8004962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800489a:	4b4a      	ldr	r3, [pc, #296]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d11c      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b44      	ldr	r3, [pc, #272]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d116      	bne.n	80048ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e1c7      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4937      	ldr	r1, [pc, #220]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	e03a      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f4:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_OscConfig+0x244>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7ff f883 	bl	8003a04 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004902:	f7ff f87f 	bl	8003a04 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e1a8      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004914:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4925      	ldr	r1, [pc, #148]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004930:	4313      	orrs	r3, r2
 8004932:	600b      	str	r3, [r1, #0]
 8004934:	e015      	b.n	8004962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_OscConfig+0x244>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7ff f862 	bl	8003a04 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004944:	f7ff f85e 	bl	8003a04 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e187      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d036      	beq.n	80049dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004976:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_RCC_OscConfig+0x248>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7ff f842 	bl	8003a04 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004984:	f7ff f83e 	bl	8003a04 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e167      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_OscConfig+0x240>)
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x200>
 80049a2:	e01b      	b.n	80049dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_OscConfig+0x248>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7ff f82b 	bl	8003a04 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b0:	e00e      	b.n	80049d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b2:	f7ff f827 	bl	8003a04 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d907      	bls.n	80049d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e150      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	42470000 	.word	0x42470000
 80049cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d0:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 80049d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1ea      	bne.n	80049b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8097 	beq.w	8004b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ee:	4b81      	ldr	r3, [pc, #516]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	4b7d      	ldr	r3, [pc, #500]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a7c      	ldr	r2, [pc, #496]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b7a      	ldr	r3, [pc, #488]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b77      	ldr	r3, [pc, #476]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a73      	ldr	r2, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fe ffe7 	bl	8003a04 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fe ffe3 	bl	8003a04 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e10c      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <HAL_RCC_OscConfig+0x474>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2ea>
 8004a60:	4b64      	ldr	r3, [pc, #400]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a63      	ldr	r2, [pc, #396]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e01c      	b.n	8004aa8 <HAL_RCC_OscConfig+0x324>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x30c>
 8004a76:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	4b5c      	ldr	r3, [pc, #368]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5b      	ldr	r2, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0x324>
 8004a90:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9c:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a54      	ldr	r2, [pc, #336]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 0304 	bic.w	r3, r3, #4
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d015      	beq.n	8004adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab0:	f7fe ffa8 	bl	8003a04 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fe ffa4 	bl	8003a04 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e0cb      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	4b49      	ldr	r3, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x334>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004adc:	f7fe ff92 	bl	8003a04 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe ff8e 	bl	8003a04 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0b5      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afa:	4b3e      	ldr	r3, [pc, #248]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ee      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0c:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80a1 	beq.w	8004c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b22:	4b34      	ldr	r3, [pc, #208]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d05c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d141      	bne.n	8004bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fe ff62 	bl	8003a04 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe ff5e 	bl	8003a04 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e087      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	019b      	lsls	r3, r3, #6
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	491b      	ldr	r1, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fe ff37 	bl	8003a04 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fe ff33 	bl	8003a04 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e05c      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bac:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x416>
 8004bb8:	e054      	b.n	8004c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x478>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc0:	f7fe ff20 	bl	8003a04 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fe ff1c 	bl	8003a04 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e045      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x444>
 8004be6:	e03d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e038      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_OscConfig+0x4ec>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d028      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d121      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d11a      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d111      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800

08004c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0cc      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d90c      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0b8      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d020      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc8:	4b59      	ldr	r3, [pc, #356]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4a58      	ldr	r2, [pc, #352]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce0:	4b53      	ldr	r3, [pc, #332]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a52      	ldr	r2, [pc, #328]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	494d      	ldr	r1, [pc, #308]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d044      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d107      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d119      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e07f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d003      	beq.n	8004d32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d32:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e06f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d42:	4b3b      	ldr	r3, [pc, #236]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e067      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d52:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4934      	ldr	r1, [pc, #208]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d64:	f7fe fe4e 	bl	8003a04 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6c:	f7fe fe4a 	bl	8003a04 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04f      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 020c 	and.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1eb      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d20c      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e032      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4916      	ldr	r1, [pc, #88]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	490e      	ldr	r1, [pc, #56]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dfa:	f000 f821 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	490a      	ldr	r1, [pc, #40]	; (8004e34 <HAL_RCC_ClockConfig+0x1c0>)
 8004e0c:	5ccb      	ldrb	r3, [r1, r3]
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fbee 	bl	80035fc <HAL_InitTick>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023c00 	.word	0x40023c00
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0800db54 	.word	0x0800db54
 8004e38:	20000004 	.word	0x20000004
 8004e3c:	20000008 	.word	0x20000008

08004e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b094      	sub	sp, #80	; 0x50
 8004e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e58:	4b79      	ldr	r3, [pc, #484]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d00d      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x40>
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	f200 80e1 	bhi.w	800502c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x34>
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d003      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e72:	e0db      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e74:	4b73      	ldr	r3, [pc, #460]	; (8005044 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e78:	e0db      	b.n	8005032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e7a:	4b73      	ldr	r3, [pc, #460]	; (8005048 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e7e:	e0d8      	b.n	8005032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e80:	4b6f      	ldr	r3, [pc, #444]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e8a:	4b6d      	ldr	r3, [pc, #436]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d063      	beq.n	8004f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e96:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8004eaa:	2300      	movs	r3, #0
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
 8004eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	f04f 0000 	mov.w	r0, #0
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	0159      	lsls	r1, r3, #5
 8004ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec4:	0150      	lsls	r0, r2, #5
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4621      	mov	r1, r4
 8004ecc:	1a51      	subs	r1, r2, r1
 8004ece:	6139      	str	r1, [r7, #16]
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	018b      	lsls	r3, r1, #6
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eee:	4651      	mov	r1, sl
 8004ef0:	018a      	lsls	r2, r1, #6
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ef8:	4659      	mov	r1, fp
 8004efa:	eb63 0901 	sbc.w	r9, r3, r1
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f12:	4690      	mov	r8, r2
 8004f14:	4699      	mov	r9, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	eb18 0303 	adds.w	r3, r8, r3
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	462b      	mov	r3, r5
 8004f20:	eb49 0303 	adc.w	r3, r9, r3
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f32:	4629      	mov	r1, r5
 8004f34:	024b      	lsls	r3, r1, #9
 8004f36:	4621      	mov	r1, r4
 8004f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	024a      	lsls	r2, r1, #9
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f46:	2200      	movs	r2, #0
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f50:	f7fb fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5c:	e058      	b.n	8005010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5e:	4b38      	ldr	r3, [pc, #224]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	2200      	movs	r2, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	4611      	mov	r1, r2
 8004f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	2300      	movs	r3, #0
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f04f 0000 	mov.w	r0, #0
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	0159      	lsls	r1, r3, #5
 8004f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f8a:	0150      	lsls	r0, r2, #5
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4641      	mov	r1, r8
 8004f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f96:	4649      	mov	r1, r9
 8004f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	00eb      	lsls	r3, r5, #3
 8004fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc6:	00e2      	lsls	r2, r4, #3
 8004fc8:	4614      	mov	r4, r2
 8004fca:	461d      	mov	r5, r3
 8004fcc:	4643      	mov	r3, r8
 8004fce:	18e3      	adds	r3, r4, r3
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	eb45 0303 	adc.w	r3, r5, r3
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	028b      	lsls	r3, r1, #10
 8004fea:	4621      	mov	r1, r4
 8004fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	028a      	lsls	r2, r1, #10
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	61fa      	str	r2, [r7, #28]
 8005000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005004:	f7fb fe40 	bl	8000c88 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4613      	mov	r3, r2
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_GetSysClockFreq+0x200>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	0c1b      	lsrs	r3, r3, #16
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	3301      	adds	r3, #1
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800502a:	e002      	b.n	8005032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetSysClockFreq+0x204>)
 800502e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005034:	4618      	mov	r0, r3
 8005036:	3750      	adds	r7, #80	; 0x50
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	00f42400 	.word	0x00f42400
 8005048:	007a1200 	.word	0x007a1200

0800504c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005050:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_RCC_GetHCLKFreq+0x14>)
 8005052:	681b      	ldr	r3, [r3, #0]
}
 8005054:	4618      	mov	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000004 	.word	0x20000004

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005068:	f7ff fff0 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0a9b      	lsrs	r3, r3, #10
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4903      	ldr	r1, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	0800db64 	.word	0x0800db64

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005090:	f7ff ffdc 	bl	800504c <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0b5b      	lsrs	r3, r3, #13
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800db64 	.word	0x0800db64

080050b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	220f      	movs	r2, #15
 80050c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0203 	and.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCC_GetClockConfig+0x60>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0207 	and.w	r2, r3, #7
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40023800 	.word	0x40023800
 8005114:	40023c00 	.word	0x40023c00

08005118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e041      	b.n	80051ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f839 	bl	80051b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f000 fcce 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d001      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e04e      	b.n	8005282 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a23      	ldr	r2, [pc, #140]	; (8005290 <HAL_TIM_Base_Start_IT+0xc4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d01d      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_TIM_Base_Start_IT+0xc8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_TIM_Base_Start_IT+0xcc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_TIM_Base_Start_IT+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_TIM_Base_Start_IT+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a18      	ldr	r2, [pc, #96]	; (80052a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d111      	bne.n	8005270 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b06      	cmp	r3, #6
 800525c:	d010      	beq.n	8005280 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	e007      	b.n	8005280 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40010000 	.word	0x40010000
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e041      	b.n	8005342 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fe f820 	bl	8003318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3304      	adds	r3, #4
 80052e8:	4619      	mov	r1, r3
 80052ea:	4610      	mov	r0, r2
 80052ec:	f000 fc04 	bl	8005af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d109      	bne.n	8005370 <HAL_TIM_PWM_Start+0x24>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e022      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d109      	bne.n	800538a <HAL_TIM_PWM_Start+0x3e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e015      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d109      	bne.n	80053a4 <HAL_TIM_PWM_Start+0x58>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e008      	b.n	80053b6 <HAL_TIM_PWM_Start+0x6a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07c      	b.n	80054b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0x82>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053cc:	e013      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Start+0x92>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053dc:	e00b      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0xa2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ec:	e003      	b.n	80053f6 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fdd6 	bl	8005fb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a2d      	ldr	r2, [pc, #180]	; (80054c0 <HAL_TIM_PWM_Start+0x174>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_PWM_Start+0xcc>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2c      	ldr	r2, [pc, #176]	; (80054c4 <HAL_TIM_PWM_Start+0x178>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d101      	bne.n	800541c <HAL_TIM_PWM_Start+0xd0>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <HAL_TIM_PWM_Start+0xd2>
 800541c:	2300      	movs	r3, #0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a22      	ldr	r2, [pc, #136]	; (80054c0 <HAL_TIM_PWM_Start+0x174>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d01d      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <HAL_TIM_PWM_Start+0x17c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <HAL_TIM_PWM_Start+0x180>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <HAL_TIM_PWM_Start+0x184>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <HAL_TIM_PWM_Start+0x178>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <HAL_TIM_PWM_Start+0x188>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIM_PWM_Start+0x136>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <HAL_TIM_PWM_Start+0x18c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d111      	bne.n	80054a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b06      	cmp	r3, #6
 8005492:	d010      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a4:	e007      	b.n	80054b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40010400 	.word	0x40010400
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40000c00 	.word	0x40000c00
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40001800 	.word	0x40001800

080054dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e097      	b.n	8005620 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fd fdfb 	bl	8003100 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005520:	f023 0307 	bic.w	r3, r3, #7
 8005524:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fae1 	bl	8005af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	f023 0303 	bic.w	r3, r3, #3
 8005562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4313      	orrs	r3, r2
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800557c:	f023 030c 	bic.w	r3, r3, #12
 8005580:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005588:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800558c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	4313      	orrs	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	011a      	lsls	r2, r3, #4
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	031b      	lsls	r3, r3, #12
 80055ac:	4313      	orrs	r3, r2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	4313      	orrs	r3, r2
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005638:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005640:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005648:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005650:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d110      	bne.n	800567a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800565e:	7b7b      	ldrb	r3, [r7, #13]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d001      	beq.n	8005668 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e069      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005678:	e031      	b.n	80056de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b04      	cmp	r3, #4
 800567e:	d110      	bne.n	80056a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d102      	bne.n	800568c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005686:	7b3b      	ldrb	r3, [r7, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e055      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a0:	e01d      	b.n	80056de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d108      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	7b7b      	ldrb	r3, [r7, #13]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b4:	7b3b      	ldrb	r3, [r7, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03e      	b.n	800573c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_TIM_Encoder_Start+0xc4>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d008      	beq.n	80056fc <HAL_TIM_Encoder_Start+0xd4>
 80056ea:	e00f      	b.n	800570c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2201      	movs	r2, #1
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fc5b 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 80056fa:	e016      	b.n	800572a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	2104      	movs	r1, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fc53 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 800570a:	e00e      	b.n	800572a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2201      	movs	r2, #1
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fc4b 	bl	8005fb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	2104      	movs	r1, #4
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fc44 	bl	8005fb0 <TIM_CCxChannelCmd>
      break;
 8005728:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d020      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d01b      	beq.n	80057a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0202 	mvn.w	r2, #2
 8005778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f994 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 8005794:	e005      	b.n	80057a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f986 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f997 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d020      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0204 	mvn.w	r2, #4
 80057c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f96e 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f960 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f971 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0208 	mvn.w	r2, #8
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2204      	movs	r2, #4
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f948 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f93a 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f94b 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0310 	and.w	r3, r3, #16
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0210 	mvn.w	r2, #16
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2208      	movs	r2, #8
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f922 	bl	8005abc <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f914 	bl	8005aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f925 	bl	8005ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0201 	mvn.w	r2, #1
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fd fbe4 	bl	8003078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fc6c 	bl	80061ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8f6 	bl	8005ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0220 	mvn.w	r2, #32
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fc3e 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800593e:	2302      	movs	r3, #2
 8005940:	e0ae      	b.n	8005aa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	f200 809f 	bhi.w	8005a90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800598d 	.word	0x0800598d
 800595c:	08005a91 	.word	0x08005a91
 8005960:	08005a91 	.word	0x08005a91
 8005964:	08005a91 	.word	0x08005a91
 8005968:	080059cd 	.word	0x080059cd
 800596c:	08005a91 	.word	0x08005a91
 8005970:	08005a91 	.word	0x08005a91
 8005974:	08005a91 	.word	0x08005a91
 8005978:	08005a0f 	.word	0x08005a0f
 800597c:	08005a91 	.word	0x08005a91
 8005980:	08005a91 	.word	0x08005a91
 8005984:	08005a91 	.word	0x08005a91
 8005988:	08005a4f 	.word	0x08005a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f95c 	bl	8005c50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0208 	orr.w	r2, r2, #8
 80059a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	619a      	str	r2, [r3, #24]
      break;
 80059ca:	e064      	b.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f9ac 	bl	8005d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6999      	ldr	r1, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	021a      	lsls	r2, r3, #8
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	619a      	str	r2, [r3, #24]
      break;
 8005a0c:	e043      	b.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fa01 	bl	8005e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0208 	orr.w	r2, r2, #8
 8005a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0204 	bic.w	r2, r2, #4
 8005a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	61da      	str	r2, [r3, #28]
      break;
 8005a4c:	e023      	b.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fa55 	bl	8005f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69d9      	ldr	r1, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	021a      	lsls	r2, r3, #8
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	61da      	str	r2, [r3, #28]
      break;
 8005a8e:	e002      	b.n	8005a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
      break;
 8005a94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a46      	ldr	r2, [pc, #280]	; (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b16:	d00f      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a43      	ldr	r2, [pc, #268]	; (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00b      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a42      	ldr	r2, [pc, #264]	; (8005c2c <TIM_Base_SetConfig+0x134>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d007      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a41      	ldr	r2, [pc, #260]	; (8005c30 <TIM_Base_SetConfig+0x138>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d003      	beq.n	8005b38 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a40      	ldr	r2, [pc, #256]	; (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d108      	bne.n	8005b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a35      	ldr	r2, [pc, #212]	; (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d02b      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b58:	d027      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <TIM_Base_SetConfig+0x130>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d023      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a31      	ldr	r2, [pc, #196]	; (8005c2c <TIM_Base_SetConfig+0x134>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a30      	ldr	r2, [pc, #192]	; (8005c30 <TIM_Base_SetConfig+0x138>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01b      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d017      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2e      	ldr	r2, [pc, #184]	; (8005c38 <TIM_Base_SetConfig+0x140>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <TIM_Base_SetConfig+0x144>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00f      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <TIM_Base_SetConfig+0x148>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <TIM_Base_SetConfig+0x14c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <TIM_Base_SetConfig+0x150>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <TIM_Base_SetConfig+0x154>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a10      	ldr	r2, [pc, #64]	; (8005c24 <TIM_Base_SetConfig+0x12c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <TIM_Base_SetConfig+0x13c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d103      	bne.n	8005bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d105      	bne.n	8005c16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f023 0201 	bic.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]
  }
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40000c00 	.word	0x40000c00
 8005c34:	40010400 	.word	0x40010400
 8005c38:	40014000 	.word	0x40014000
 8005c3c:	40014400 	.word	0x40014400
 8005c40:	40014800 	.word	0x40014800
 8005c44:	40001800 	.word	0x40001800
 8005c48:	40001c00 	.word	0x40001c00
 8005c4c:	40002000 	.word	0x40002000

08005c50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f023 0201 	bic.w	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0302 	bic.w	r3, r3, #2
 8005c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <TIM_OC1_SetConfig+0xd8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC1_SetConfig+0x64>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <TIM_OC1_SetConfig+0xdc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10c      	bne.n	8005cce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0308 	bic.w	r3, r3, #8
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <TIM_OC1_SetConfig+0xd8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC1_SetConfig+0x8e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC1_SetConfig+0xdc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f023 0210 	bic.w	r2, r3, #16
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0320 	bic.w	r3, r3, #32
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a22      	ldr	r2, [pc, #136]	; (8005e14 <TIM_OC2_SetConfig+0xe4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC2_SetConfig+0x68>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <TIM_OC2_SetConfig+0xe8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d10d      	bne.n	8005db4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <TIM_OC2_SetConfig+0xe4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC2_SetConfig+0x94>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <TIM_OC2_SetConfig+0xe8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d113      	bne.n	8005dec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40010400 	.word	0x40010400

08005e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a21      	ldr	r2, [pc, #132]	; (8005efc <TIM_OC3_SetConfig+0xe0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC3_SetConfig+0x66>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a20      	ldr	r2, [pc, #128]	; (8005f00 <TIM_OC3_SetConfig+0xe4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d10d      	bne.n	8005e9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a16      	ldr	r2, [pc, #88]	; (8005efc <TIM_OC3_SetConfig+0xe0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x92>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <TIM_OC3_SetConfig+0xe4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d113      	bne.n	8005ed6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400

08005f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	031b      	lsls	r3, r3, #12
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <TIM_OC4_SetConfig+0xa4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC4_SetConfig+0x68>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a11      	ldr	r2, [pc, #68]	; (8005fac <TIM_OC4_SetConfig+0xa8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d109      	bne.n	8005f80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40010000 	.word	0x40010000
 8005fac:	40010400 	.word	0x40010400

08005fb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1a      	ldr	r2, [r3, #32]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a1a      	ldr	r2, [r3, #32]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e05a      	b.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a21      	ldr	r2, [pc, #132]	; (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006060:	d01d      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1d      	ldr	r2, [pc, #116]	; (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1b      	ldr	r2, [pc, #108]	; (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a18      	ldr	r2, [pc, #96]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40001800 	.word	0x40001800

080060f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800610c:	2302      	movs	r3, #2
 800610e:	e03d      	b.n	800618c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e042      	b.n	8006258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fd f986 	bl	80034f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	; 0x24
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fea1 	bl	8006f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08c      	sub	sp, #48	; 0x30
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b20      	cmp	r3, #32
 8006278:	d14a      	bne.n	8006310 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e043      	b.n	8006312 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	461a      	mov	r2, r3
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fbf5 	bl	8006a8c <UART_Start_Receive_DMA>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80062a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d12c      	bne.n	800630a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d125      	bne.n	8006304 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b8:	2300      	movs	r3, #0
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	617b      	str	r3, [r7, #20]
   return(result);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 0310 	orr.w	r3, r3, #16
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ee:	627a      	str	r2, [r7, #36]	; 0x24
 80062f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6a39      	ldr	r1, [r7, #32]
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006302:	e002      	b.n	800630a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800630a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800630e:	e000      	b.n	8006312 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006310:	2302      	movs	r3, #2
  }
}
 8006312:	4618      	mov	r0, r3
 8006314:	3730      	adds	r7, #48	; 0x30
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0ba      	sub	sp, #232	; 0xe8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006342:	2300      	movs	r3, #0
 8006344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800634e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800635a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10f      	bne.n	8006382 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <HAL_UART_IRQHandler+0x66>
 800636e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006372:	f003 0320 	and.w	r3, r3, #32
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fd27 	bl	8006dce <UART_Receive_IT>
      return;
 8006380:	e25b      	b.n	800683a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80de 	beq.w	8006548 <HAL_UART_IRQHandler+0x22c>
 800638c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800639c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80d1 	beq.w	8006548 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_UART_IRQHandler+0xae>
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c2:	f043 0201 	orr.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_UART_IRQHandler+0xd2>
 80063d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	f043 0202 	orr.w	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_UART_IRQHandler+0xf6>
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	f043 0204 	orr.w	r2, r3, #4
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d011      	beq.n	8006442 <HAL_UART_IRQHandler+0x126>
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800642a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d005      	beq.n	8006442 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f043 0208 	orr.w	r2, r3, #8
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 81f2 	beq.w	8006830 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800644c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_UART_IRQHandler+0x14e>
 8006458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fcb2 	bl	8006dce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	bf0c      	ite	eq
 8006478:	2301      	moveq	r3, #1
 800647a:	2300      	movne	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <HAL_UART_IRQHandler+0x17a>
 800648e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04f      	beq.n	8006536 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fbba 	bl	8006c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d141      	bne.n	800652e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3314      	adds	r3, #20
 80064b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3314      	adds	r3, #20
 80064d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1d9      	bne.n	80064aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	4a7e      	ldr	r2, [pc, #504]	; (80066fc <HAL_UART_IRQHandler+0x3e0>)
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	4618      	mov	r0, r3
 800650c:	f7fd fcfa 	bl	8003f04 <HAL_DMA_Abort_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00e      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f9a8 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00a      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9a4 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e006      	b.n	8006544 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9a0 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006542:	e175      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	bf00      	nop
    return;
 8006546:	e173      	b.n	8006830 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 814f 	bne.w	80067f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8148 	beq.w	80067f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8141 	beq.w	80067f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b40      	cmp	r3, #64	; 0x40
 8006590:	f040 80b6 	bne.w	8006700 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8145 	beq.w	8006834 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	429a      	cmp	r2, r3
 80065b4:	f080 813e 	bcs.w	8006834 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ca:	f000 8088 	beq.w	80066de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1d9      	bne.n	80065ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800662a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3314      	adds	r3, #20
 800663a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800663e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e1      	bne.n	800661a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800666c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3314      	adds	r3, #20
 8006676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800667a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800667c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ae:	f023 0310 	bic.w	r3, r3, #16
 80066b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80066c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066c8:	e841 2300 	strex	r3, r2, [r1]
 80066cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1e3      	bne.n	800669c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fd fba3 	bl	8003e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fb f987 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066fa:	e09b      	b.n	8006834 <HAL_UART_IRQHandler+0x518>
 80066fc:	08006cd7 	.word	0x08006cd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006708:	b29b      	uxth	r3, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 808e 	beq.w	8006838 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800671c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 8089 	beq.w	8006838 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800673c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800674a:	647a      	str	r2, [r7, #68]	; 0x44
 800674c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	623b      	str	r3, [r7, #32]
   return(result);
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006782:	633a      	str	r2, [r7, #48]	; 0x30
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e3      	bne.n	800675e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0310 	bic.w	r3, r3, #16
 80067ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e3      	bne.n	80067a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fb f90d 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ee:	e023      	b.n	8006838 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <HAL_UART_IRQHandler+0x4f4>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa78 	bl	8006cfe <UART_Transmit_IT>
    return;
 800680e:	e014      	b.n	800683a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <HAL_UART_IRQHandler+0x51e>
 800681c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fab8 	bl	8006d9e <UART_EndTransmit_IT>
    return;
 800682e:	e004      	b.n	800683a <HAL_UART_IRQHandler+0x51e>
    return;
 8006830:	bf00      	nop
 8006832:	e002      	b.n	800683a <HAL_UART_IRQHandler+0x51e>
      return;
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_UART_IRQHandler+0x51e>
      return;
 8006838:	bf00      	nop
  }
}
 800683a:	37e8      	adds	r7, #232	; 0xe8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b09c      	sub	sp, #112	; 0x70
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d172      	bne.n	8006992 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80068ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ae:	2200      	movs	r2, #0
 80068b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	330c      	adds	r3, #12
 80068d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80068d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e5      	bne.n	80068b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3314      	adds	r3, #20
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	f023 0301 	bic.w	r3, r3, #1
 80068fc:	667b      	str	r3, [r7, #100]	; 0x64
 80068fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3314      	adds	r3, #20
 8006904:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006906:	647a      	str	r2, [r7, #68]	; 0x44
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800690c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e5      	bne.n	80068e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3314      	adds	r3, #20
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	623b      	str	r3, [r7, #32]
   return(result);
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006930:	663b      	str	r3, [r7, #96]	; 0x60
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800693a:	633a      	str	r2, [r7, #48]	; 0x30
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	2220      	movs	r2, #32
 8006952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	2b01      	cmp	r3, #1
 800695c:	d119      	bne.n	8006992 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	330c      	adds	r3, #12
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	2200      	movs	r2, #0
 8006996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	2b01      	cmp	r3, #1
 800699e:	d106      	bne.n	80069ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069a4:	4619      	mov	r1, r3
 80069a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069a8:	f7fb f82e 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069ac:	e002      	b.n	80069b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80069ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069b0:	f7ff ff50 	bl	8006854 <HAL_UART_RxCpltCallback>
}
 80069b4:	bf00      	nop
 80069b6:	3770      	adds	r7, #112	; 0x70
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d108      	bne.n	80069ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29b      	uxth	r3, r3
 80069e0:	4619      	mov	r1, r3
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7fb f810 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069e8:	e002      	b.n	80069f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f7ff ff3c 	bl	8006868 <HAL_UART_RxHalfCpltCallback>
}
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b21      	cmp	r3, #33	; 0x21
 8006a2a:	d108      	bne.n	8006a3e <UART_DMAError+0x46>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a38:	68b8      	ldr	r0, [r7, #8]
 8006a3a:	f000 f8c1 	bl	8006bc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2301      	moveq	r3, #1
 8006a4e:	2300      	movne	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b22      	cmp	r3, #34	; 0x22
 8006a5e:	d108      	bne.n	8006a72 <UART_DMAError+0x7a>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f000 f8cf 	bl	8006c10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f043 0210 	orr.w	r2, r3, #16
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a7e:	68b8      	ldr	r0, [r7, #8]
 8006a80:	f7ff fefc 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b098      	sub	sp, #96	; 0x60
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2222      	movs	r2, #34	; 0x22
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab8:	4a3e      	ldr	r2, [pc, #248]	; (8006bb4 <UART_Start_Receive_DMA+0x128>)
 8006aba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac0:	4a3d      	ldr	r2, [pc, #244]	; (8006bb8 <UART_Start_Receive_DMA+0x12c>)
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac8:	4a3c      	ldr	r2, [pc, #240]	; (8006bbc <UART_Start_Receive_DMA+0x130>)
 8006aca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	f7fd f942 	bl	8003d74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d019      	beq.n	8006b42 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3314      	adds	r3, #20
 8006b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	657b      	str	r3, [r7, #84]	; 0x54
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	3314      	adds	r3, #20
 8006b60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b62:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e5      	bne.n	8006b42 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3314      	adds	r3, #20
 8006b94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b96:	627a      	str	r2, [r7, #36]	; 0x24
 8006b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6a39      	ldr	r1, [r7, #32]
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3760      	adds	r7, #96	; 0x60
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08006891 	.word	0x08006891
 8006bb8:	080069bd 	.word	0x080069bd
 8006bbc:	080069f9 	.word	0x080069f9

08006bc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b089      	sub	sp, #36	; 0x24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bde:	61fb      	str	r3, [r7, #28]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	61ba      	str	r2, [r7, #24]
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006c04:	bf00      	nop
 8006c06:	3724      	adds	r7, #36	; 0x24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b095      	sub	sp, #84	; 0x54
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c38:	643a      	str	r2, [r7, #64]	; 0x40
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3314      	adds	r3, #20
 8006c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3314      	adds	r3, #20
 8006c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e5      	bne.n	8006c4c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d119      	bne.n	8006cbc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	e853 3f00 	ldrex	r3, [r3]
 8006c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f023 0310 	bic.w	r3, r3, #16
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ca8:	61ba      	str	r2, [r7, #24]
 8006caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6979      	ldr	r1, [r7, #20]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	e841 2300 	strex	r3, r2, [r1]
 8006cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e5      	bne.n	8006c88 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cca:	bf00      	nop
 8006ccc:	3754      	adds	r7, #84	; 0x54
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f7ff fdc3 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf6:	bf00      	nop
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b21      	cmp	r3, #33	; 0x21
 8006d10:	d13e      	bne.n	8006d90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1a:	d114      	bne.n	8006d46 <UART_Transmit_IT+0x48>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d110      	bne.n	8006d46 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	1c9a      	adds	r2, r3, #2
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]
 8006d44:	e008      	b.n	8006d58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6211      	str	r1, [r2, #32]
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4619      	mov	r1, r3
 8006d66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10f      	bne.n	8006d8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e000      	b.n	8006d92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d90:	2302      	movs	r3, #2
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff fd3e 	bl	8006840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08c      	sub	sp, #48	; 0x30
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b22      	cmp	r3, #34	; 0x22
 8006de0:	f040 80ae 	bne.w	8006f40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dec:	d117      	bne.n	8006e1e <UART_Receive_IT+0x50>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d113      	bne.n	8006e1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	1c9a      	adds	r2, r3, #2
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e1c:	e026      	b.n	8006e6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e30:	d007      	beq.n	8006e42 <UART_Receive_IT+0x74>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <UART_Receive_IT+0x82>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e008      	b.n	8006e62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d15d      	bne.n	8006f3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0220 	bic.w	r2, r2, #32
 8006e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0201 	bic.w	r2, r2, #1
 8006eae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d135      	bne.n	8006f32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	613b      	str	r3, [r7, #16]
   return(result);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	623a      	str	r2, [r7, #32]
 8006eee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d10a      	bne.n	8006f24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa fd6c 	bl	8001a08 <HAL_UARTEx_RxEventCallback>
 8006f30:	e002      	b.n	8006f38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fc8e 	bl	8006854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e002      	b.n	8006f42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	e000      	b.n	8006f42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f40:	2302      	movs	r3, #2
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3730      	adds	r7, #48	; 0x30
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f50:	b0c0      	sub	sp, #256	; 0x100
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f68:	68d9      	ldr	r1, [r3, #12]
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	ea40 0301 	orr.w	r3, r0, r1
 8006f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fa4:	f021 010c 	bic.w	r1, r1, #12
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	6999      	ldr	r1, [r3, #24]
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	ea40 0301 	orr.w	r3, r0, r1
 8006fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b8f      	ldr	r3, [pc, #572]	; (8007218 <UART_SetConfig+0x2cc>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d005      	beq.n	8006fec <UART_SetConfig+0xa0>
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b8d      	ldr	r3, [pc, #564]	; (800721c <UART_SetConfig+0x2d0>)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d104      	bne.n	8006ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fec:	f7fe f84e 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8006ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ff4:	e003      	b.n	8006ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7fe f835 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007008:	f040 810c 	bne.w	8007224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007016:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800701a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	1891      	adds	r1, r2, r2
 8007024:	65b9      	str	r1, [r7, #88]	; 0x58
 8007026:	415b      	adcs	r3, r3
 8007028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800702a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800702e:	4621      	mov	r1, r4
 8007030:	eb12 0801 	adds.w	r8, r2, r1
 8007034:	4629      	mov	r1, r5
 8007036:	eb43 0901 	adc.w	r9, r3, r1
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800704a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800704e:	4690      	mov	r8, r2
 8007050:	4699      	mov	r9, r3
 8007052:	4623      	mov	r3, r4
 8007054:	eb18 0303 	adds.w	r3, r8, r3
 8007058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800705c:	462b      	mov	r3, r5
 800705e:	eb49 0303 	adc.w	r3, r9, r3
 8007062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007072:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800707a:	460b      	mov	r3, r1
 800707c:	18db      	adds	r3, r3, r3
 800707e:	653b      	str	r3, [r7, #80]	; 0x50
 8007080:	4613      	mov	r3, r2
 8007082:	eb42 0303 	adc.w	r3, r2, r3
 8007086:	657b      	str	r3, [r7, #84]	; 0x54
 8007088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800708c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007090:	f7f9 fdfa 	bl	8000c88 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b61      	ldr	r3, [pc, #388]	; (8007220 <UART_SetConfig+0x2d4>)
 800709a:	fba3 2302 	umull	r2, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	011c      	lsls	r4, r3, #4
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80070b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80070bc:	415b      	adcs	r3, r3
 80070be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070c4:	4641      	mov	r1, r8
 80070c6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ca:	4649      	mov	r1, r9
 80070cc:	eb43 0b01 	adc.w	fp, r3, r1
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e4:	4692      	mov	sl, r2
 80070e6:	469b      	mov	fp, r3
 80070e8:	4643      	mov	r3, r8
 80070ea:	eb1a 0303 	adds.w	r3, sl, r3
 80070ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070f2:	464b      	mov	r3, r9
 80070f4:	eb4b 0303 	adc.w	r3, fp, r3
 80070f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007108:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800710c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007110:	460b      	mov	r3, r1
 8007112:	18db      	adds	r3, r3, r3
 8007114:	643b      	str	r3, [r7, #64]	; 0x40
 8007116:	4613      	mov	r3, r2
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	647b      	str	r3, [r7, #68]	; 0x44
 800711e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007126:	f7f9 fdaf 	bl	8000c88 <__aeabi_uldivmod>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4611      	mov	r1, r2
 8007130:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <UART_SetConfig+0x2d4>)
 8007132:	fba3 2301 	umull	r2, r3, r3, r1
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	2264      	movs	r2, #100	; 0x64
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	1acb      	subs	r3, r1, r3
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007146:	4b36      	ldr	r3, [pc, #216]	; (8007220 <UART_SetConfig+0x2d4>)
 8007148:	fba3 2302 	umull	r2, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007154:	441c      	add	r4, r3
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715a:	2200      	movs	r2, #0
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007160:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	1891      	adds	r1, r2, r2
 800716e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007170:	415b      	adcs	r3, r3
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007178:	4641      	mov	r1, r8
 800717a:	1851      	adds	r1, r2, r1
 800717c:	6339      	str	r1, [r7, #48]	; 0x30
 800717e:	4649      	mov	r1, r9
 8007180:	414b      	adcs	r3, r1
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007190:	4659      	mov	r1, fp
 8007192:	00cb      	lsls	r3, r1, #3
 8007194:	4651      	mov	r1, sl
 8007196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800719a:	4651      	mov	r1, sl
 800719c:	00ca      	lsls	r2, r1, #3
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	4642      	mov	r2, r8
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071ac:	464b      	mov	r3, r9
 80071ae:	460a      	mov	r2, r1
 80071b0:	eb42 0303 	adc.w	r3, r2, r3
 80071b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071cc:	460b      	mov	r3, r1
 80071ce:	18db      	adds	r3, r3, r3
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d2:	4613      	mov	r3, r2
 80071d4:	eb42 0303 	adc.w	r3, r2, r3
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071e2:	f7f9 fd51 	bl	8000c88 <__aeabi_uldivmod>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4b0d      	ldr	r3, [pc, #52]	; (8007220 <UART_SetConfig+0x2d4>)
 80071ec:	fba3 1302 	umull	r1, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	2164      	movs	r1, #100	; 0x64
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	3332      	adds	r3, #50	; 0x32
 80071fe:	4a08      	ldr	r2, [pc, #32]	; (8007220 <UART_SetConfig+0x2d4>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f003 0207 	and.w	r2, r3, #7
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4422      	add	r2, r4
 8007212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007214:	e106      	b.n	8007424 <UART_SetConfig+0x4d8>
 8007216:	bf00      	nop
 8007218:	40011000 	.word	0x40011000
 800721c:	40011400 	.word	0x40011400
 8007220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800722e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	1891      	adds	r1, r2, r2
 800723c:	6239      	str	r1, [r7, #32]
 800723e:	415b      	adcs	r3, r3
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
 8007242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007246:	4641      	mov	r1, r8
 8007248:	1854      	adds	r4, r2, r1
 800724a:	4649      	mov	r1, r9
 800724c:	eb43 0501 	adc.w	r5, r3, r1
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	00eb      	lsls	r3, r5, #3
 800725a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800725e:	00e2      	lsls	r2, r4, #3
 8007260:	4614      	mov	r4, r2
 8007262:	461d      	mov	r5, r3
 8007264:	4643      	mov	r3, r8
 8007266:	18e3      	adds	r3, r4, r3
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800726c:	464b      	mov	r3, r9
 800726e:	eb45 0303 	adc.w	r3, r5, r3
 8007272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007292:	4629      	mov	r1, r5
 8007294:	008b      	lsls	r3, r1, #2
 8007296:	4621      	mov	r1, r4
 8007298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729c:	4621      	mov	r1, r4
 800729e:	008a      	lsls	r2, r1, #2
 80072a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80072a4:	f7f9 fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b60      	ldr	r3, [pc, #384]	; (8007430 <UART_SetConfig+0x4e4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	61b9      	str	r1, [r7, #24]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d8:	4641      	mov	r1, r8
 80072da:	1851      	adds	r1, r2, r1
 80072dc:	6139      	str	r1, [r7, #16]
 80072de:	4649      	mov	r1, r9
 80072e0:	414b      	adcs	r3, r1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f0:	4659      	mov	r1, fp
 80072f2:	00cb      	lsls	r3, r1, #3
 80072f4:	4651      	mov	r1, sl
 80072f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072fa:	4651      	mov	r1, sl
 80072fc:	00ca      	lsls	r2, r1, #3
 80072fe:	4610      	mov	r0, r2
 8007300:	4619      	mov	r1, r3
 8007302:	4603      	mov	r3, r0
 8007304:	4642      	mov	r2, r8
 8007306:	189b      	adds	r3, r3, r2
 8007308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800730c:	464b      	mov	r3, r9
 800730e:	460a      	mov	r2, r1
 8007310:	eb42 0303 	adc.w	r3, r2, r3
 8007314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	67bb      	str	r3, [r7, #120]	; 0x78
 8007322:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007330:	4649      	mov	r1, r9
 8007332:	008b      	lsls	r3, r1, #2
 8007334:	4641      	mov	r1, r8
 8007336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733a:	4641      	mov	r1, r8
 800733c:	008a      	lsls	r2, r1, #2
 800733e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007342:	f7f9 fca1 	bl	8000c88 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4611      	mov	r1, r2
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2301 	umull	r2, r3, r3, r1
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	2264      	movs	r2, #100	; 0x64
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	1acb      	subs	r3, r1, r3
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	3332      	adds	r3, #50	; 0x32
 8007360:	4a33      	ldr	r2, [pc, #204]	; (8007430 <UART_SetConfig+0x4e4>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800736c:	441c      	add	r4, r3
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	673b      	str	r3, [r7, #112]	; 0x70
 8007376:	677a      	str	r2, [r7, #116]	; 0x74
 8007378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	415b      	adcs	r3, r3
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80073be:	464b      	mov	r3, r9
 80073c0:	460a      	mov	r2, r1
 80073c2:	eb42 0303 	adc.w	r3, r2, r3
 80073c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	663b      	str	r3, [r7, #96]	; 0x60
 80073d2:	667a      	str	r2, [r7, #100]	; 0x64
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073e0:	4649      	mov	r1, r9
 80073e2:	008b      	lsls	r3, r1, #2
 80073e4:	4641      	mov	r1, r8
 80073e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ea:	4641      	mov	r1, r8
 80073ec:	008a      	lsls	r2, r1, #2
 80073ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073f2:	f7f9 fc49 	bl	8000c88 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <UART_SetConfig+0x4e4>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	; 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	3332      	adds	r3, #50	; 0x32
 800740e:	4a08      	ldr	r2, [pc, #32]	; (8007430 <UART_SetConfig+0x4e4>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4422      	add	r2, r4
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800742a:	46bd      	mov	sp, r7
 800742c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007430:	51eb851f 	.word	0x51eb851f

08007434 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007446:	2b84      	cmp	r3, #132	; 0x84
 8007448:	d005      	beq.n	8007456 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800744a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	3303      	adds	r3, #3
 8007454:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007456:	68fb      	ldr	r3, [r7, #12]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007468:	f000 fade 	bl	8007a28 <vTaskStartScheduler>
  
  return osOK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	bd80      	pop	{r7, pc}

08007472 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007472:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007474:	b089      	sub	sp, #36	; 0x24
 8007476:	af04      	add	r7, sp, #16
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d020      	beq.n	80074c6 <osThreadCreate+0x54>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01c      	beq.n	80074c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685c      	ldr	r4, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691e      	ldr	r6, [r3, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff ffc8 	bl	8007434 <makeFreeRtosPriority>
 80074a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074ae:	9202      	str	r2, [sp, #8]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	9100      	str	r1, [sp, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4632      	mov	r2, r6
 80074b8:	4629      	mov	r1, r5
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f8ed 	bl	800769a <xTaskCreateStatic>
 80074c0:	4603      	mov	r3, r0
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e01c      	b.n	8007500 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685c      	ldr	r4, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff ffaa 	bl	8007434 <makeFreeRtosPriority>
 80074e0:	4602      	mov	r2, r0
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	9200      	str	r2, [sp, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	4632      	mov	r2, r6
 80074ee:	4629      	mov	r1, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 f92f 	bl	8007754 <xTaskCreate>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e000      	b.n	8007502 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800750a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <osDelay+0x16>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	e000      	b.n	8007522 <osDelay+0x18>
 8007520:	2301      	movs	r3, #1
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fa4c 	bl	80079c0 <vTaskDelay>
  
  return osOK;
 8007528:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f103 0208 	add.w	r2, r3, #8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f103 0208 	add.w	r2, r3, #8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f103 0208 	add.w	r2, r3, #8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d103      	bne.n	80075f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	e00c      	b.n	800760e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3308      	adds	r3, #8
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	e002      	b.n	8007602 <vListInsert+0x2e>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d2f6      	bcs.n	80075fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	601a      	str	r2, [r3, #0]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6892      	ldr	r2, [r2, #8]
 800765c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	1e5a      	subs	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800769a:	b580      	push	{r7, lr}
 800769c:	b08e      	sub	sp, #56	; 0x38
 800769e:	af04      	add	r7, sp, #16
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xTaskCreateStatic+0x46>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61fb      	str	r3, [r7, #28]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076e0:	2354      	movs	r3, #84	; 0x54
 80076e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b54      	cmp	r3, #84	; 0x54
 80076e8:	d00a      	beq.n	8007700 <xTaskCreateStatic+0x66>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61bb      	str	r3, [r7, #24]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007700:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01e      	beq.n	8007746 <xTaskCreateStatic+0xac>
 8007708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01b      	beq.n	8007746 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007716:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007720:	2300      	movs	r3, #0
 8007722:	9303      	str	r3, [sp, #12]
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	9302      	str	r3, [sp, #8]
 8007728:	f107 0314 	add.w	r3, r7, #20
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f850 	bl	80077de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800773e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007740:	f000 f8d4 	bl	80078ec <prvAddNewTaskToReadyList>
 8007744:	e001      	b.n	800774a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800774a:	697b      	ldr	r3, [r7, #20]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	3728      	adds	r7, #40	; 0x28
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af04      	add	r7, sp, #16
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fec5 	bl	80084f8 <pvPortMalloc>
 800776e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00e      	beq.n	8007794 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007776:	2054      	movs	r0, #84	; 0x54
 8007778:	f000 febe 	bl	80084f8 <pvPortMalloc>
 800777c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	631a      	str	r2, [r3, #48]	; 0x30
 800778a:	e005      	b.n	8007798 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800778c:	6978      	ldr	r0, [r7, #20]
 800778e:	f000 ff7f 	bl	8008690 <vPortFree>
 8007792:	e001      	b.n	8007798 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	2300      	movs	r3, #0
 80077aa:	9303      	str	r3, [sp, #12]
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	9301      	str	r3, [sp, #4]
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f80e 	bl	80077de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077c2:	69f8      	ldr	r0, [r7, #28]
 80077c4:	f000 f892 	bl	80078ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077c8:	2301      	movs	r3, #1
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	e002      	b.n	80077d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077d4:	69bb      	ldr	r3, [r7, #24]
	}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b088      	sub	sp, #32
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	3b01      	subs	r3, #1
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f023 0307 	bic.w	r3, r3, #7
 8007804:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00a      	beq.n	8007826 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	617b      	str	r3, [r7, #20]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01f      	beq.n	800786c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
 8007830:	e012      	b.n	8007858 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	7819      	ldrb	r1, [r3, #0]
 800783a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	3334      	adds	r3, #52	; 0x34
 8007842:	460a      	mov	r2, r1
 8007844:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d006      	beq.n	8007860 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	3301      	adds	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2b0f      	cmp	r3, #15
 800785c:	d9e9      	bls.n	8007832 <prvInitialiseNewTask+0x54>
 800785e:	e000      	b.n	8007862 <prvInitialiseNewTask+0x84>
			{
				break;
 8007860:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800786a:	e003      	b.n	8007874 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007876:	2b06      	cmp	r3, #6
 8007878:	d901      	bls.n	800787e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800787a:	2306      	movs	r3, #6
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	2200      	movs	r2, #0
 800788e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fe6c 	bl	8007572 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	3318      	adds	r3, #24
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fe67 	bl	8007572 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	f1c3 0207 	rsb	r2, r3, #7
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	2200      	movs	r2, #0
 80078be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	69b8      	ldr	r0, [r7, #24]
 80078ce:	f000 fc05 	bl	80080dc <pxPortInitialiseStack>
 80078d2:	4602      	mov	r2, r0
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e4:	bf00      	nop
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078f4:	f000 fd1e 	bl	8008334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078f8:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <prvAddNewTaskToReadyList+0xb8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <prvAddNewTaskToReadyList+0xb8>)
 8007900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007902:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <prvAddNewTaskToReadyList+0xbc>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800790a:	4a27      	ldr	r2, [pc, #156]	; (80079a8 <prvAddNewTaskToReadyList+0xbc>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007910:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <prvAddNewTaskToReadyList+0xb8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d110      	bne.n	800793a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007918:	f000 fabc 	bl	8007e94 <prvInitialiseTaskLists>
 800791c:	e00d      	b.n	800793a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800791e:	4b23      	ldr	r3, [pc, #140]	; (80079ac <prvAddNewTaskToReadyList+0xc0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <prvAddNewTaskToReadyList+0xbc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d802      	bhi.n	800793a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007934:	4a1c      	ldr	r2, [pc, #112]	; (80079a8 <prvAddNewTaskToReadyList+0xbc>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800793a:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <prvAddNewTaskToReadyList+0xc4>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <prvAddNewTaskToReadyList+0xc4>)
 8007942:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	2201      	movs	r2, #1
 800794a:	409a      	lsls	r2, r3
 800794c:	4b19      	ldr	r3, [pc, #100]	; (80079b4 <prvAddNewTaskToReadyList+0xc8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4313      	orrs	r3, r2
 8007952:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <prvAddNewTaskToReadyList+0xc8>)
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <prvAddNewTaskToReadyList+0xcc>)
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3304      	adds	r3, #4
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7ff fe0d 	bl	800758c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007972:	f000 fd0f 	bl	8008394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <prvAddNewTaskToReadyList+0xc0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800797e:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <prvAddNewTaskToReadyList+0xbc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d207      	bcs.n	800799c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <prvAddNewTaskToReadyList+0xd0>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20001c00 	.word	0x20001c00
 80079a8:	20001b00 	.word	0x20001b00
 80079ac:	20001c0c 	.word	0x20001c0c
 80079b0:	20001c1c 	.word	0x20001c1c
 80079b4:	20001c08 	.word	0x20001c08
 80079b8:	20001b04 	.word	0x20001b04
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d017      	beq.n	8007a02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079d2:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <vTaskDelay+0x60>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <vTaskDelay+0x30>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60bb      	str	r3, [r7, #8]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079f0:	f000 f87a 	bl	8007ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079f4:	2100      	movs	r1, #0
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb0a 	bl	8008010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079fc:	f000 f882 	bl	8007b04 <xTaskResumeAll>
 8007a00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d107      	bne.n	8007a18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a08:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <vTaskDelay+0x64>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a18:	bf00      	nop
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20001c28 	.word	0x20001c28
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a36:	463a      	mov	r2, r7
 8007a38:	1d39      	adds	r1, r7, #4
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7f9 fde6 	bl	8001610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	9202      	str	r2, [sp, #8]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	2300      	movs	r3, #0
 8007a54:	460a      	mov	r2, r1
 8007a56:	491e      	ldr	r1, [pc, #120]	; (8007ad0 <vTaskStartScheduler+0xa8>)
 8007a58:	481e      	ldr	r0, [pc, #120]	; (8007ad4 <vTaskStartScheduler+0xac>)
 8007a5a:	f7ff fe1e 	bl	800769a <xTaskCreateStatic>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4a1d      	ldr	r2, [pc, #116]	; (8007ad8 <vTaskStartScheduler+0xb0>)
 8007a62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a64:	4b1c      	ldr	r3, [pc, #112]	; (8007ad8 <vTaskStartScheduler+0xb0>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e001      	b.n	8007a76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d116      	bne.n	8007aaa <vTaskStartScheduler+0x82>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	613b      	str	r3, [r7, #16]
}
 8007a8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a90:	4b12      	ldr	r3, [pc, #72]	; (8007adc <vTaskStartScheduler+0xb4>)
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <vTaskStartScheduler+0xb8>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <vTaskStartScheduler+0xbc>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007aa4:	f000 fba4 	bl	80081f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007aa8:	e00e      	b.n	8007ac8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d10a      	bne.n	8007ac8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	60fb      	str	r3, [r7, #12]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <vTaskStartScheduler+0x9e>
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	0800db40 	.word	0x0800db40
 8007ad4:	08007e65 	.word	0x08007e65
 8007ad8:	20001c24 	.word	0x20001c24
 8007adc:	20001c20 	.word	0x20001c20
 8007ae0:	20001c0c 	.word	0x20001c0c
 8007ae4:	20001c04 	.word	0x20001c04

08007ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007af6:	bf00      	nop
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20001c28 	.word	0x20001c28

08007b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b30:	f000 fc00 	bl	8008334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b34:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	4a37      	ldr	r2, [pc, #220]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d161      	bne.n	8007c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b46:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <xTaskResumeAll+0x118>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d05d      	beq.n	8007c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b4e:	e02e      	b.n	8007bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff fd72 	bl	8007646 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fd6d 	bl	8007646 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2201      	movs	r2, #1
 8007b72:	409a      	lsls	r2, r3
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <xTaskResumeAll+0x124>)
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7ff fcf9 	bl	800758c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <xTaskResumeAll+0x128>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bae:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1cc      	bne.n	8007b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bbc:	f000 fa08 	bl	8007fd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bcc:	f000 f836 	bl	8007c3c <xTaskIncrementTick>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f1      	bne.n	8007bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007be8:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <xTaskResumeAll+0x134>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c0a:	f000 fbc3 	bl	8008394 <vPortExitCritical>

	return xAlreadyYielded;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20001c28 	.word	0x20001c28
 8007c1c:	20001c00 	.word	0x20001c00
 8007c20:	20001bc0 	.word	0x20001bc0
 8007c24:	20001c08 	.word	0x20001c08
 8007c28:	20001b04 	.word	0x20001b04
 8007c2c:	20001b00 	.word	0x20001b00
 8007c30:	20001c14 	.word	0x20001c14
 8007c34:	20001c10 	.word	0x20001c10
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c46:	4b4e      	ldr	r3, [pc, #312]	; (8007d80 <xTaskIncrementTick+0x144>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 808e 	bne.w	8007d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c50:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <xTaskIncrementTick+0x148>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c58:	4a4a      	ldr	r2, [pc, #296]	; (8007d84 <xTaskIncrementTick+0x148>)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d120      	bne.n	8007ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c64:	4b48      	ldr	r3, [pc, #288]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	603b      	str	r3, [r7, #0]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <xTaskIncrementTick+0x46>
 8007c84:	4b40      	ldr	r3, [pc, #256]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <xTaskIncrementTick+0x150>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a3e      	ldr	r2, [pc, #248]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4a3e      	ldr	r2, [pc, #248]	; (8007d8c <xTaskIncrementTick+0x150>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <xTaskIncrementTick+0x154>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4a3c      	ldr	r2, [pc, #240]	; (8007d90 <xTaskIncrementTick+0x154>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	f000 f995 	bl	8007fd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d348      	bcc.n	8007d42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb0:	4b35      	ldr	r3, [pc, #212]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cba:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	601a      	str	r2, [r3, #0]
					break;
 8007cc2:	e03e      	b.n	8007d42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d203      	bcs.n	8007ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ce2:	e02e      	b.n	8007d42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fcac 	bl	8007646 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fca3 	bl	8007646 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	2201      	movs	r2, #1
 8007d06:	409a      	lsls	r2, r3
 8007d08:	4b23      	ldr	r3, [pc, #140]	; (8007d98 <xTaskIncrementTick+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <xTaskIncrementTick+0x15c>)
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <xTaskIncrementTick+0x160>)
 8007d20:	441a      	add	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7ff fc2f 	bl	800758c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <xTaskIncrementTick+0x164>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d3b9      	bcc.n	8007cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d40:	e7b6      	b.n	8007cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <xTaskIncrementTick+0x164>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4914      	ldr	r1, [pc, #80]	; (8007d9c <xTaskIncrementTick+0x160>)
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d901      	bls.n	8007d5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <xTaskIncrementTick+0x168>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e004      	b.n	8007d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <xTaskIncrementTick+0x16c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <xTaskIncrementTick+0x16c>)
 8007d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d76:	697b      	ldr	r3, [r7, #20]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20001c28 	.word	0x20001c28
 8007d84:	20001c04 	.word	0x20001c04
 8007d88:	20001bb8 	.word	0x20001bb8
 8007d8c:	20001bbc 	.word	0x20001bbc
 8007d90:	20001c18 	.word	0x20001c18
 8007d94:	20001c20 	.word	0x20001c20
 8007d98:	20001c08 	.word	0x20001c08
 8007d9c:	20001b04 	.word	0x20001b04
 8007da0:	20001b00 	.word	0x20001b00
 8007da4:	20001c14 	.word	0x20001c14
 8007da8:	20001c10 	.word	0x20001c10

08007dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007db2:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <vTaskSwitchContext+0xa4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dba:	4b26      	ldr	r3, [pc, #152]	; (8007e54 <vTaskSwitchContext+0xa8>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc0:	e03f      	b.n	8007e42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007dc2:	4b24      	ldr	r3, [pc, #144]	; (8007e54 <vTaskSwitchContext+0xa8>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	fab3 f383 	clz	r3, r3
 8007dd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	f1c3 031f 	rsb	r3, r3, #31
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	491f      	ldr	r1, [pc, #124]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	607b      	str	r3, [r7, #4]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <vTaskSwitchContext+0x5a>
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4a12      	ldr	r2, [pc, #72]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007e14:	4413      	add	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d104      	bne.n	8007e38 <vTaskSwitchContext+0x8c>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a08      	ldr	r2, [pc, #32]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007e40:	6013      	str	r3, [r2, #0]
}
 8007e42:	bf00      	nop
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20001c28 	.word	0x20001c28
 8007e54:	20001c14 	.word	0x20001c14
 8007e58:	20001c08 	.word	0x20001c08
 8007e5c:	20001b04 	.word	0x20001b04
 8007e60:	20001b00 	.word	0x20001b00

08007e64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e6c:	f000 f852 	bl	8007f14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <prvIdleTask+0x28>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d9f9      	bls.n	8007e6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <prvIdleTask+0x2c>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e88:	e7f0      	b.n	8007e6c <prvIdleTask+0x8>
 8007e8a:	bf00      	nop
 8007e8c:	20001b04 	.word	0x20001b04
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
 8007e9e:	e00c      	b.n	8007eba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4a12      	ldr	r2, [pc, #72]	; (8007ef4 <prvInitialiseTaskLists+0x60>)
 8007eac:	4413      	add	r3, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7ff fb3f 	bl	8007532 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b06      	cmp	r3, #6
 8007ebe:	d9ef      	bls.n	8007ea0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ec0:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <prvInitialiseTaskLists+0x64>)
 8007ec2:	f7ff fb36 	bl	8007532 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ec6:	480d      	ldr	r0, [pc, #52]	; (8007efc <prvInitialiseTaskLists+0x68>)
 8007ec8:	f7ff fb33 	bl	8007532 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ecc:	480c      	ldr	r0, [pc, #48]	; (8007f00 <prvInitialiseTaskLists+0x6c>)
 8007ece:	f7ff fb30 	bl	8007532 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ed2:	480c      	ldr	r0, [pc, #48]	; (8007f04 <prvInitialiseTaskLists+0x70>)
 8007ed4:	f7ff fb2d 	bl	8007532 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ed8:	480b      	ldr	r0, [pc, #44]	; (8007f08 <prvInitialiseTaskLists+0x74>)
 8007eda:	f7ff fb2a 	bl	8007532 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ede:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <prvInitialiseTaskLists+0x78>)
 8007ee0:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <prvInitialiseTaskLists+0x64>)
 8007ee2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <prvInitialiseTaskLists+0x7c>)
 8007ee6:	4a05      	ldr	r2, [pc, #20]	; (8007efc <prvInitialiseTaskLists+0x68>)
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20001b04 	.word	0x20001b04
 8007ef8:	20001b90 	.word	0x20001b90
 8007efc:	20001ba4 	.word	0x20001ba4
 8007f00:	20001bc0 	.word	0x20001bc0
 8007f04:	20001bd4 	.word	0x20001bd4
 8007f08:	20001bec 	.word	0x20001bec
 8007f0c:	20001bb8 	.word	0x20001bb8
 8007f10:	20001bbc 	.word	0x20001bbc

08007f14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f1a:	e019      	b.n	8007f50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f1c:	f000 fa0a 	bl	8008334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f20:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <prvCheckTasksWaitingTermination+0x50>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fb8a 	bl	8007646 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <prvCheckTasksWaitingTermination+0x54>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3b01      	subs	r3, #1
 8007f38:	4a0b      	ldr	r2, [pc, #44]	; (8007f68 <prvCheckTasksWaitingTermination+0x54>)
 8007f3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f46:	f000 fa25 	bl	8008394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f810 	bl	8007f70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <prvCheckTasksWaitingTermination+0x58>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e1      	bne.n	8007f1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20001bd4 	.word	0x20001bd4
 8007f68:	20001c00 	.word	0x20001c00
 8007f6c:	20001be8 	.word	0x20001be8

08007f70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d108      	bne.n	8007f94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fb82 	bl	8008690 <vPortFree>
				vPortFree( pxTCB );
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fb7f 	bl	8008690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f92:	e018      	b.n	8007fc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fb76 	bl	8008690 <vPortFree>
	}
 8007fa4:	e00f      	b.n	8007fc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d00a      	beq.n	8007fc6 <prvDeleteTCB+0x56>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	60fb      	str	r3, [r7, #12]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <prvDeleteTCB+0x54>
	}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvResetNextTaskUnblockTime+0x38>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d104      	bne.n	8007fea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <prvResetNextTaskUnblockTime+0x3c>)
 8007fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fe8:	e008      	b.n	8007ffc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <prvResetNextTaskUnblockTime+0x38>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4a04      	ldr	r2, [pc, #16]	; (800800c <prvResetNextTaskUnblockTime+0x3c>)
 8007ffa:	6013      	str	r3, [r2, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20001bb8 	.word	0x20001bb8
 800800c:	20001c20 	.word	0x20001c20

08008010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800801a:	4b29      	ldr	r3, [pc, #164]	; (80080c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008020:	4b28      	ldr	r3, [pc, #160]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3304      	adds	r3, #4
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fb0d 	bl	8007646 <uxListRemove>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10b      	bne.n	800804a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008032:	4b24      	ldr	r3, [pc, #144]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	2201      	movs	r2, #1
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	43da      	mvns	r2, r3
 8008040:	4b21      	ldr	r3, [pc, #132]	; (80080c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4013      	ands	r3, r2
 8008046:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008048:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d10a      	bne.n	8008068 <prvAddCurrentTaskToDelayedList+0x58>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3304      	adds	r3, #4
 800805e:	4619      	mov	r1, r3
 8008060:	481a      	ldr	r0, [pc, #104]	; (80080cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008062:	f7ff fa93 	bl	800758c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008066:	e026      	b.n	80080b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008070:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d209      	bcs.n	8008094 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3304      	adds	r3, #4
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7ff faa1 	bl	80075d4 <vListInsert>
}
 8008092:	e010      	b.n	80080b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008094:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3304      	adds	r3, #4
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7ff fa97 	bl	80075d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080a6:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d202      	bcs.n	80080b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080b0:	4a09      	ldr	r2, [pc, #36]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6013      	str	r3, [r2, #0]
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20001c04 	.word	0x20001c04
 80080c4:	20001b00 	.word	0x20001b00
 80080c8:	20001c08 	.word	0x20001c08
 80080cc:	20001bec 	.word	0x20001bec
 80080d0:	20001bbc 	.word	0x20001bbc
 80080d4:	20001bb8 	.word	0x20001bb8
 80080d8:	20001c20 	.word	0x20001c20

080080dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3b04      	subs	r3, #4
 80080ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3b04      	subs	r3, #4
 80080fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f023 0201 	bic.w	r2, r3, #1
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3b04      	subs	r3, #4
 800810a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800810c:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <pxPortInitialiseStack+0x64>)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3b14      	subs	r3, #20
 8008116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b04      	subs	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f06f 0202 	mvn.w	r2, #2
 800812a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3b20      	subs	r3, #32
 8008130:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	08008145 	.word	0x08008145

08008144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <prvTaskExitError+0x54>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d00a      	beq.n	800816e <prvTaskExitError+0x2a>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <prvTaskExitError+0x28>
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	60bb      	str	r3, [r7, #8]
}
 8008180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008182:	bf00      	nop
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0fc      	beq.n	8008184 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr
 8008198:	20000010 	.word	0x20000010
 800819c:	00000000 	.word	0x00000000

080081a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <pxCurrentTCBConst2>)
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	6808      	ldr	r0, [r1, #0]
 80081a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	f380 8809 	msr	PSP, r0
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f04f 0000 	mov.w	r0, #0
 80081b6:	f380 8811 	msr	BASEPRI, r0
 80081ba:	4770      	bx	lr
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst2>:
 80081c0:	20001b00 	.word	0x20001b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081c8:	4808      	ldr	r0, [pc, #32]	; (80081ec <prvPortStartFirstTask+0x24>)
 80081ca:	6800      	ldr	r0, [r0, #0]
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f380 8808 	msr	MSP, r0
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8814 	msr	CONTROL, r0
 80081da:	b662      	cpsie	i
 80081dc:	b661      	cpsie	f
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	df00      	svc	0
 80081e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081ea:	bf00      	nop
 80081ec:	e000ed08 	.word	0xe000ed08

080081f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80081f6:	4b46      	ldr	r3, [pc, #280]	; (8008310 <xPortStartScheduler+0x120>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a46      	ldr	r2, [pc, #280]	; (8008314 <xPortStartScheduler+0x124>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d10a      	bne.n	8008216 <xPortStartScheduler+0x26>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	613b      	str	r3, [r7, #16]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008216:	4b3e      	ldr	r3, [pc, #248]	; (8008310 <xPortStartScheduler+0x120>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a3f      	ldr	r2, [pc, #252]	; (8008318 <xPortStartScheduler+0x128>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10a      	bne.n	8008236 <xPortStartScheduler+0x46>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <xPortStartScheduler+0x12c>)
 8008238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	22ff      	movs	r2, #255	; 0xff
 8008246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008258:	b2da      	uxtb	r2, r3
 800825a:	4b31      	ldr	r3, [pc, #196]	; (8008320 <xPortStartScheduler+0x130>)
 800825c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800825e:	4b31      	ldr	r3, [pc, #196]	; (8008324 <xPortStartScheduler+0x134>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008264:	e009      	b.n	800827a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008266:	4b2f      	ldr	r3, [pc, #188]	; (8008324 <xPortStartScheduler+0x134>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3b01      	subs	r3, #1
 800826c:	4a2d      	ldr	r2, [pc, #180]	; (8008324 <xPortStartScheduler+0x134>)
 800826e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d0ef      	beq.n	8008266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008286:	4b27      	ldr	r3, [pc, #156]	; (8008324 <xPortStartScheduler+0x134>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1c3 0307 	rsb	r3, r3, #7
 800828e:	2b04      	cmp	r3, #4
 8008290:	d00a      	beq.n	80082a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60bb      	str	r3, [r7, #8]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082a8:	4b1e      	ldr	r3, [pc, #120]	; (8008324 <xPortStartScheduler+0x134>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <xPortStartScheduler+0x134>)
 80082b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <xPortStartScheduler+0x134>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ba:	4a1a      	ldr	r2, [pc, #104]	; (8008324 <xPortStartScheduler+0x134>)
 80082bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082c6:	4b18      	ldr	r3, [pc, #96]	; (8008328 <xPortStartScheduler+0x138>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <xPortStartScheduler+0x138>)
 80082cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082d2:	4b15      	ldr	r3, [pc, #84]	; (8008328 <xPortStartScheduler+0x138>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a14      	ldr	r2, [pc, #80]	; (8008328 <xPortStartScheduler+0x138>)
 80082d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082de:	f000 f8dd 	bl	800849c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <xPortStartScheduler+0x13c>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082e8:	f000 f8fc 	bl	80084e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082ec:	4b10      	ldr	r3, [pc, #64]	; (8008330 <xPortStartScheduler+0x140>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0f      	ldr	r2, [pc, #60]	; (8008330 <xPortStartScheduler+0x140>)
 80082f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80082f8:	f7ff ff66 	bl	80081c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80082fc:	f7ff fd56 	bl	8007dac <vTaskSwitchContext>
	prvTaskExitError();
 8008300:	f7ff ff20 	bl	8008144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	e000ed00 	.word	0xe000ed00
 8008314:	410fc271 	.word	0x410fc271
 8008318:	410fc270 	.word	0x410fc270
 800831c:	e000e400 	.word	0xe000e400
 8008320:	20001c2c 	.word	0x20001c2c
 8008324:	20001c30 	.word	0x20001c30
 8008328:	e000ed20 	.word	0xe000ed20
 800832c:	20000010 	.word	0x20000010
 8008330:	e000ef34 	.word	0xe000ef34

08008334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	607b      	str	r3, [r7, #4]
}
 800834c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800834e:	4b0f      	ldr	r3, [pc, #60]	; (800838c <vPortEnterCritical+0x58>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a0d      	ldr	r2, [pc, #52]	; (800838c <vPortEnterCritical+0x58>)
 8008356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <vPortEnterCritical+0x58>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d10f      	bne.n	8008380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008360:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <vPortEnterCritical+0x5c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <vPortEnterCritical+0x4c>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	603b      	str	r3, [r7, #0]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <vPortEnterCritical+0x4a>
	}
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	20000010 	.word	0x20000010
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <vPortExitCritical+0x50>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10a      	bne.n	80083b8 <vPortExitCritical+0x24>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	607b      	str	r3, [r7, #4]
}
 80083b4:	bf00      	nop
 80083b6:	e7fe      	b.n	80083b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083b8:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <vPortExitCritical+0x50>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3b01      	subs	r3, #1
 80083be:	4a09      	ldr	r2, [pc, #36]	; (80083e4 <vPortExitCritical+0x50>)
 80083c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083c2:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <vPortExitCritical+0x50>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <vPortExitCritical+0x42>
 80083ca:	2300      	movs	r3, #0
 80083cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	20000010 	.word	0x20000010
	...

080083f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80083f0:	f3ef 8009 	mrs	r0, PSP
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	4b15      	ldr	r3, [pc, #84]	; (8008450 <pxCurrentTCBConst>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	f01e 0f10 	tst.w	lr, #16
 8008400:	bf08      	it	eq
 8008402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	6010      	str	r0, [r2, #0]
 800840c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008414:	f380 8811 	msr	BASEPRI, r0
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f7ff fcc4 	bl	8007dac <vTaskSwitchContext>
 8008424:	f04f 0000 	mov.w	r0, #0
 8008428:	f380 8811 	msr	BASEPRI, r0
 800842c:	bc09      	pop	{r0, r3}
 800842e:	6819      	ldr	r1, [r3, #0]
 8008430:	6808      	ldr	r0, [r1, #0]
 8008432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008436:	f01e 0f10 	tst.w	lr, #16
 800843a:	bf08      	it	eq
 800843c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008440:	f380 8809 	msr	PSP, r0
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	f3af 8000 	nop.w

08008450 <pxCurrentTCBConst>:
 8008450:	20001b00 	.word	0x20001b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop

08008458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	607b      	str	r3, [r7, #4]
}
 8008470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008472:	f7ff fbe3 	bl	8007c3c <xTaskIncrementTick>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <SysTick_Handler+0x40>)
 800847e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f383 8811 	msr	BASEPRI, r3
}
 800848e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	e000ed04 	.word	0xe000ed04

0800849c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084a0:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <vPortSetupTimerInterrupt+0x34>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <vPortSetupTimerInterrupt+0x38>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <vPortSetupTimerInterrupt+0x3c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <vPortSetupTimerInterrupt+0x40>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	099b      	lsrs	r3, r3, #6
 80084b8:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <vPortSetupTimerInterrupt+0x44>)
 80084ba:	3b01      	subs	r3, #1
 80084bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084be:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <vPortSetupTimerInterrupt+0x34>)
 80084c0:	2207      	movs	r2, #7
 80084c2:	601a      	str	r2, [r3, #0]
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	e000e010 	.word	0xe000e010
 80084d4:	e000e018 	.word	0xe000e018
 80084d8:	20000004 	.word	0x20000004
 80084dc:	10624dd3 	.word	0x10624dd3
 80084e0:	e000e014 	.word	0xe000e014

080084e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80084f4 <vPortEnableVFP+0x10>
 80084e8:	6801      	ldr	r1, [r0, #0]
 80084ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084ee:	6001      	str	r1, [r0, #0]
 80084f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80084f2:	bf00      	nop
 80084f4:	e000ed88 	.word	0xe000ed88

080084f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008504:	f7ff faf0 	bl	8007ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008508:	4b5b      	ldr	r3, [pc, #364]	; (8008678 <pvPortMalloc+0x180>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008510:	f000 f920 	bl	8008754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008514:	4b59      	ldr	r3, [pc, #356]	; (800867c <pvPortMalloc+0x184>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	f040 8093 	bne.w	8008648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01d      	beq.n	8008564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008528:	2208      	movs	r2, #8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	2b00      	cmp	r3, #0
 8008538:	d014      	beq.n	8008564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f023 0307 	bic.w	r3, r3, #7
 8008540:	3308      	adds	r3, #8
 8008542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <pvPortMalloc+0x6c>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	617b      	str	r3, [r7, #20]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d06e      	beq.n	8008648 <pvPortMalloc+0x150>
 800856a:	4b45      	ldr	r3, [pc, #276]	; (8008680 <pvPortMalloc+0x188>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d869      	bhi.n	8008648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008574:	4b43      	ldr	r3, [pc, #268]	; (8008684 <pvPortMalloc+0x18c>)
 8008576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008578:	4b42      	ldr	r3, [pc, #264]	; (8008684 <pvPortMalloc+0x18c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800857e:	e004      	b.n	800858a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <pvPortMalloc+0xa4>
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d1f1      	bne.n	8008580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800859c:	4b36      	ldr	r3, [pc, #216]	; (8008678 <pvPortMalloc+0x180>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d050      	beq.n	8008648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2208      	movs	r2, #8
 80085ac:	4413      	add	r3, r2
 80085ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	2308      	movs	r3, #8
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d91f      	bls.n	8008608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00a      	beq.n	80085f0 <pvPortMalloc+0xf8>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	613b      	str	r3, [r7, #16]
}
 80085ec:	bf00      	nop
 80085ee:	e7fe      	b.n	80085ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	1ad2      	subs	r2, r2, r3
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008602:	69b8      	ldr	r0, [r7, #24]
 8008604:	f000 f908 	bl	8008818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008608:	4b1d      	ldr	r3, [pc, #116]	; (8008680 <pvPortMalloc+0x188>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <pvPortMalloc+0x188>)
 8008614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008616:	4b1a      	ldr	r3, [pc, #104]	; (8008680 <pvPortMalloc+0x188>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <pvPortMalloc+0x190>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d203      	bcs.n	800862a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008622:	4b17      	ldr	r3, [pc, #92]	; (8008680 <pvPortMalloc+0x188>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <pvPortMalloc+0x190>)
 8008628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	4b13      	ldr	r3, [pc, #76]	; (800867c <pvPortMalloc+0x184>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	431a      	orrs	r2, r3
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <pvPortMalloc+0x194>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	4a11      	ldr	r2, [pc, #68]	; (800868c <pvPortMalloc+0x194>)
 8008646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008648:	f7ff fa5c 	bl	8007b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <pvPortMalloc+0x174>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	60fb      	str	r3, [r7, #12]
}
 8008668:	bf00      	nop
 800866a:	e7fe      	b.n	800866a <pvPortMalloc+0x172>
	return pvReturn;
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000583c 	.word	0x2000583c
 800867c:	20005850 	.word	0x20005850
 8008680:	20005840 	.word	0x20005840
 8008684:	20005834 	.word	0x20005834
 8008688:	20005844 	.word	0x20005844
 800868c:	20005848 	.word	0x20005848

08008690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d04d      	beq.n	800873e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086a2:	2308      	movs	r3, #8
 80086a4:	425b      	negs	r3, r3
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	4b24      	ldr	r3, [pc, #144]	; (8008748 <vPortFree+0xb8>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <vPortFree+0x44>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <vPortFree+0x62>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60bb      	str	r3, [r7, #8]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <vPortFree+0xb8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4013      	ands	r3, r2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01e      	beq.n	800873e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11a      	bne.n	800873e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <vPortFree+0xb8>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	43db      	mvns	r3, r3
 8008712:	401a      	ands	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008718:	f7ff f9e6 	bl	8007ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	4b0a      	ldr	r3, [pc, #40]	; (800874c <vPortFree+0xbc>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4413      	add	r3, r2
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <vPortFree+0xbc>)
 8008728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800872a:	6938      	ldr	r0, [r7, #16]
 800872c:	f000 f874 	bl	8008818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <vPortFree+0xc0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a06      	ldr	r2, [pc, #24]	; (8008750 <vPortFree+0xc0>)
 8008738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800873a:	f7ff f9e3 	bl	8007b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20005850 	.word	0x20005850
 800874c:	20005840 	.word	0x20005840
 8008750:	2000584c 	.word	0x2000584c

08008754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800875a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800875e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008760:	4b27      	ldr	r3, [pc, #156]	; (8008800 <prvHeapInit+0xac>)
 8008762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3307      	adds	r3, #7
 8008772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0307 	bic.w	r3, r3, #7
 800877a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	4a1f      	ldr	r2, [pc, #124]	; (8008800 <prvHeapInit+0xac>)
 8008784:	4413      	add	r3, r2
 8008786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800878c:	4a1d      	ldr	r2, [pc, #116]	; (8008804 <prvHeapInit+0xb0>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008792:	4b1c      	ldr	r3, [pc, #112]	; (8008804 <prvHeapInit+0xb0>)
 8008794:	2200      	movs	r2, #0
 8008796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	4413      	add	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087a0:	2208      	movs	r2, #8
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0307 	bic.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a15      	ldr	r2, [pc, #84]	; (8008808 <prvHeapInit+0xb4>)
 80087b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087b6:	4b14      	ldr	r3, [pc, #80]	; (8008808 <prvHeapInit+0xb4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <prvHeapInit+0xb4>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <prvHeapInit+0xb4>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a0a      	ldr	r2, [pc, #40]	; (800880c <prvHeapInit+0xb8>)
 80087e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	4a09      	ldr	r2, [pc, #36]	; (8008810 <prvHeapInit+0xbc>)
 80087ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <prvHeapInit+0xc0>)
 80087ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087f2:	601a      	str	r2, [r3, #0]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	20001c34 	.word	0x20001c34
 8008804:	20005834 	.word	0x20005834
 8008808:	2000583c 	.word	0x2000583c
 800880c:	20005844 	.word	0x20005844
 8008810:	20005840 	.word	0x20005840
 8008814:	20005850 	.word	0x20005850

08008818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <prvInsertBlockIntoFreeList+0xac>)
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <prvInsertBlockIntoFreeList+0x14>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	429a      	cmp	r2, r3
 8008834:	d8f7      	bhi.n	8008826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	441a      	add	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d118      	bne.n	80088a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d00d      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	441a      	add	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e008      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e003      	b.n	80088a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d002      	beq.n	80088b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20005834 	.word	0x20005834
 80088c8:	2000583c 	.word	0x2000583c

080088cc <malloc>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	; (80088d8 <malloc+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b823 	b.w	800891c <_malloc_r>
 80088d6:	bf00      	nop
 80088d8:	200001d8 	.word	0x200001d8

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0e      	ldr	r6, [pc, #56]	; (8008918 <sbrk_aligned+0x3c>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f001 ff64 	bl	800a7b4 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f001 ff5f 	bl	800a7b4 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d00a      	beq.n	8008910 <sbrk_aligned+0x34>
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d007      	beq.n	8008914 <sbrk_aligned+0x38>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f001 ff54 	bl	800a7b4 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d101      	bne.n	8008914 <sbrk_aligned+0x38>
 8008910:	f04f 34ff 	mov.w	r4, #4294967295
 8008914:	4620      	mov	r0, r4
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	20005858 	.word	0x20005858

0800891c <_malloc_r>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	1ccd      	adds	r5, r1, #3
 8008922:	f025 0503 	bic.w	r5, r5, #3
 8008926:	3508      	adds	r5, #8
 8008928:	2d0c      	cmp	r5, #12
 800892a:	bf38      	it	cc
 800892c:	250c      	movcc	r5, #12
 800892e:	2d00      	cmp	r5, #0
 8008930:	4607      	mov	r7, r0
 8008932:	db01      	blt.n	8008938 <_malloc_r+0x1c>
 8008934:	42a9      	cmp	r1, r5
 8008936:	d905      	bls.n	8008944 <_malloc_r+0x28>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	2600      	movs	r6, #0
 800893e:	4630      	mov	r0, r6
 8008940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a18 <_malloc_r+0xfc>
 8008948:	f000 f868 	bl	8008a1c <__malloc_lock>
 800894c:	f8d8 3000 	ldr.w	r3, [r8]
 8008950:	461c      	mov	r4, r3
 8008952:	bb5c      	cbnz	r4, 80089ac <_malloc_r+0x90>
 8008954:	4629      	mov	r1, r5
 8008956:	4638      	mov	r0, r7
 8008958:	f7ff ffc0 	bl	80088dc <sbrk_aligned>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	4604      	mov	r4, r0
 8008960:	d155      	bne.n	8008a0e <_malloc_r+0xf2>
 8008962:	f8d8 4000 	ldr.w	r4, [r8]
 8008966:	4626      	mov	r6, r4
 8008968:	2e00      	cmp	r6, #0
 800896a:	d145      	bne.n	80089f8 <_malloc_r+0xdc>
 800896c:	2c00      	cmp	r4, #0
 800896e:	d048      	beq.n	8008a02 <_malloc_r+0xe6>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	4631      	mov	r1, r6
 8008974:	4638      	mov	r0, r7
 8008976:	eb04 0903 	add.w	r9, r4, r3
 800897a:	f001 ff1b 	bl	800a7b4 <_sbrk_r>
 800897e:	4581      	cmp	r9, r0
 8008980:	d13f      	bne.n	8008a02 <_malloc_r+0xe6>
 8008982:	6821      	ldr	r1, [r4, #0]
 8008984:	1a6d      	subs	r5, r5, r1
 8008986:	4629      	mov	r1, r5
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ffa7 	bl	80088dc <sbrk_aligned>
 800898e:	3001      	adds	r0, #1
 8008990:	d037      	beq.n	8008a02 <_malloc_r+0xe6>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	442b      	add	r3, r5
 8008996:	6023      	str	r3, [r4, #0]
 8008998:	f8d8 3000 	ldr.w	r3, [r8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d038      	beq.n	8008a12 <_malloc_r+0xf6>
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	42a2      	cmp	r2, r4
 80089a4:	d12b      	bne.n	80089fe <_malloc_r+0xe2>
 80089a6:	2200      	movs	r2, #0
 80089a8:	605a      	str	r2, [r3, #4]
 80089aa:	e00f      	b.n	80089cc <_malloc_r+0xb0>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	1b52      	subs	r2, r2, r5
 80089b0:	d41f      	bmi.n	80089f2 <_malloc_r+0xd6>
 80089b2:	2a0b      	cmp	r2, #11
 80089b4:	d917      	bls.n	80089e6 <_malloc_r+0xca>
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	6059      	strne	r1, [r3, #4]
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	bf08      	it	eq
 80089c4:	f8c8 1000 	streq.w	r1, [r8]
 80089c8:	5162      	str	r2, [r4, r5]
 80089ca:	604b      	str	r3, [r1, #4]
 80089cc:	4638      	mov	r0, r7
 80089ce:	f104 060b 	add.w	r6, r4, #11
 80089d2:	f000 f829 	bl	8008a28 <__malloc_unlock>
 80089d6:	f026 0607 	bic.w	r6, r6, #7
 80089da:	1d23      	adds	r3, r4, #4
 80089dc:	1af2      	subs	r2, r6, r3
 80089de:	d0ae      	beq.n	800893e <_malloc_r+0x22>
 80089e0:	1b9b      	subs	r3, r3, r6
 80089e2:	50a3      	str	r3, [r4, r2]
 80089e4:	e7ab      	b.n	800893e <_malloc_r+0x22>
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	6862      	ldr	r2, [r4, #4]
 80089ea:	d1dd      	bne.n	80089a8 <_malloc_r+0x8c>
 80089ec:	f8c8 2000 	str.w	r2, [r8]
 80089f0:	e7ec      	b.n	80089cc <_malloc_r+0xb0>
 80089f2:	4623      	mov	r3, r4
 80089f4:	6864      	ldr	r4, [r4, #4]
 80089f6:	e7ac      	b.n	8008952 <_malloc_r+0x36>
 80089f8:	4634      	mov	r4, r6
 80089fa:	6876      	ldr	r6, [r6, #4]
 80089fc:	e7b4      	b.n	8008968 <_malloc_r+0x4c>
 80089fe:	4613      	mov	r3, r2
 8008a00:	e7cc      	b.n	800899c <_malloc_r+0x80>
 8008a02:	230c      	movs	r3, #12
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	4638      	mov	r0, r7
 8008a08:	f000 f80e 	bl	8008a28 <__malloc_unlock>
 8008a0c:	e797      	b.n	800893e <_malloc_r+0x22>
 8008a0e:	6025      	str	r5, [r4, #0]
 8008a10:	e7dc      	b.n	80089cc <_malloc_r+0xb0>
 8008a12:	605b      	str	r3, [r3, #4]
 8008a14:	deff      	udf	#255	; 0xff
 8008a16:	bf00      	nop
 8008a18:	20005854 	.word	0x20005854

08008a1c <__malloc_lock>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	; (8008a24 <__malloc_lock+0x8>)
 8008a1e:	f001 bf16 	b.w	800a84e <__retarget_lock_acquire_recursive>
 8008a22:	bf00      	nop
 8008a24:	2000599c 	.word	0x2000599c

08008a28 <__malloc_unlock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__malloc_unlock+0x8>)
 8008a2a:	f001 bf11 	b.w	800a850 <__retarget_lock_release_recursive>
 8008a2e:	bf00      	nop
 8008a30:	2000599c 	.word	0x2000599c

08008a34 <_realloc_r>:
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	4680      	mov	r8, r0
 8008a3a:	4614      	mov	r4, r2
 8008a3c:	460e      	mov	r6, r1
 8008a3e:	b921      	cbnz	r1, 8008a4a <_realloc_r+0x16>
 8008a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4611      	mov	r1, r2
 8008a46:	f7ff bf69 	b.w	800891c <_malloc_r>
 8008a4a:	b92a      	cbnz	r2, 8008a58 <_realloc_r+0x24>
 8008a4c:	f002 fd9a 	bl	800b584 <_free_r>
 8008a50:	4625      	mov	r5, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a58:	f003 fdf7 	bl	800c64a <_malloc_usable_size_r>
 8008a5c:	4284      	cmp	r4, r0
 8008a5e:	4607      	mov	r7, r0
 8008a60:	d802      	bhi.n	8008a68 <_realloc_r+0x34>
 8008a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a66:	d812      	bhi.n	8008a8e <_realloc_r+0x5a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff ff56 	bl	800891c <_malloc_r>
 8008a70:	4605      	mov	r5, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0ed      	beq.n	8008a52 <_realloc_r+0x1e>
 8008a76:	42bc      	cmp	r4, r7
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	bf28      	it	cs
 8008a7e:	463a      	movcs	r2, r7
 8008a80:	f001 fee7 	bl	800a852 <memcpy>
 8008a84:	4631      	mov	r1, r6
 8008a86:	4640      	mov	r0, r8
 8008a88:	f002 fd7c 	bl	800b584 <_free_r>
 8008a8c:	e7e1      	b.n	8008a52 <_realloc_r+0x1e>
 8008a8e:	4635      	mov	r5, r6
 8008a90:	e7df      	b.n	8008a52 <_realloc_r+0x1e>

08008a92 <sulp>:
 8008a92:	b570      	push	{r4, r5, r6, lr}
 8008a94:	4604      	mov	r4, r0
 8008a96:	460d      	mov	r5, r1
 8008a98:	ec45 4b10 	vmov	d0, r4, r5
 8008a9c:	4616      	mov	r6, r2
 8008a9e:	f003 fc93 	bl	800c3c8 <__ulp>
 8008aa2:	ec51 0b10 	vmov	r0, r1, d0
 8008aa6:	b17e      	cbz	r6, 8008ac8 <sulp+0x36>
 8008aa8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008aac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	dd09      	ble.n	8008ac8 <sulp+0x36>
 8008ab4:	051b      	lsls	r3, r3, #20
 8008ab6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008aba:	2400      	movs	r4, #0
 8008abc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	f7f7 fd98 	bl	80005f8 <__aeabi_dmul>
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	0000      	movs	r0, r0
 8008acc:	0000      	movs	r0, r0
	...

08008ad0 <_strtod_l>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	ed2d 8b02 	vpush	{d8}
 8008ad8:	b09b      	sub	sp, #108	; 0x6c
 8008ada:	4604      	mov	r4, r0
 8008adc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ade:	2200      	movs	r2, #0
 8008ae0:	9216      	str	r2, [sp, #88]	; 0x58
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	f04f 0900 	mov.w	r9, #0
 8008aec:	460a      	mov	r2, r1
 8008aee:	9215      	str	r2, [sp, #84]	; 0x54
 8008af0:	7811      	ldrb	r1, [r2, #0]
 8008af2:	292b      	cmp	r1, #43	; 0x2b
 8008af4:	d04c      	beq.n	8008b90 <_strtod_l+0xc0>
 8008af6:	d83a      	bhi.n	8008b6e <_strtod_l+0x9e>
 8008af8:	290d      	cmp	r1, #13
 8008afa:	d834      	bhi.n	8008b66 <_strtod_l+0x96>
 8008afc:	2908      	cmp	r1, #8
 8008afe:	d834      	bhi.n	8008b6a <_strtod_l+0x9a>
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d03d      	beq.n	8008b80 <_strtod_l+0xb0>
 8008b04:	2200      	movs	r2, #0
 8008b06:	920a      	str	r2, [sp, #40]	; 0x28
 8008b08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008b0a:	7832      	ldrb	r2, [r6, #0]
 8008b0c:	2a30      	cmp	r2, #48	; 0x30
 8008b0e:	f040 80b4 	bne.w	8008c7a <_strtod_l+0x1aa>
 8008b12:	7872      	ldrb	r2, [r6, #1]
 8008b14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008b18:	2a58      	cmp	r2, #88	; 0x58
 8008b1a:	d170      	bne.n	8008bfe <_strtod_l+0x12e>
 8008b1c:	9302      	str	r3, [sp, #8]
 8008b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	ab16      	add	r3, sp, #88	; 0x58
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4a8e      	ldr	r2, [pc, #568]	; (8008d60 <_strtod_l+0x290>)
 8008b28:	ab17      	add	r3, sp, #92	; 0x5c
 8008b2a:	a915      	add	r1, sp, #84	; 0x54
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f002 fddd 	bl	800b6ec <__gethex>
 8008b32:	f010 070f 	ands.w	r7, r0, #15
 8008b36:	4605      	mov	r5, r0
 8008b38:	d005      	beq.n	8008b46 <_strtod_l+0x76>
 8008b3a:	2f06      	cmp	r7, #6
 8008b3c:	d12a      	bne.n	8008b94 <_strtod_l+0xc4>
 8008b3e:	3601      	adds	r6, #1
 8008b40:	2300      	movs	r3, #0
 8008b42:	9615      	str	r6, [sp, #84]	; 0x54
 8008b44:	930a      	str	r3, [sp, #40]	; 0x28
 8008b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 857f 	bne.w	800964c <_strtod_l+0xb7c>
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	b1db      	cbz	r3, 8008b8a <_strtod_l+0xba>
 8008b52:	4642      	mov	r2, r8
 8008b54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b58:	ec43 2b10 	vmov	d0, r2, r3
 8008b5c:	b01b      	add	sp, #108	; 0x6c
 8008b5e:	ecbd 8b02 	vpop	{d8}
 8008b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b66:	2920      	cmp	r1, #32
 8008b68:	d1cc      	bne.n	8008b04 <_strtod_l+0x34>
 8008b6a:	3201      	adds	r2, #1
 8008b6c:	e7bf      	b.n	8008aee <_strtod_l+0x1e>
 8008b6e:	292d      	cmp	r1, #45	; 0x2d
 8008b70:	d1c8      	bne.n	8008b04 <_strtod_l+0x34>
 8008b72:	2101      	movs	r1, #1
 8008b74:	910a      	str	r1, [sp, #40]	; 0x28
 8008b76:	1c51      	adds	r1, r2, #1
 8008b78:	9115      	str	r1, [sp, #84]	; 0x54
 8008b7a:	7852      	ldrb	r2, [r2, #1]
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d1c3      	bne.n	8008b08 <_strtod_l+0x38>
 8008b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b82:	9515      	str	r5, [sp, #84]	; 0x54
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 855f 	bne.w	8009648 <_strtod_l+0xb78>
 8008b8a:	4642      	mov	r2, r8
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	e7e3      	b.n	8008b58 <_strtod_l+0x88>
 8008b90:	2100      	movs	r1, #0
 8008b92:	e7ef      	b.n	8008b74 <_strtod_l+0xa4>
 8008b94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b96:	b13a      	cbz	r2, 8008ba8 <_strtod_l+0xd8>
 8008b98:	2135      	movs	r1, #53	; 0x35
 8008b9a:	a818      	add	r0, sp, #96	; 0x60
 8008b9c:	f003 fd11 	bl	800c5c2 <__copybits>
 8008ba0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f003 f8e4 	bl	800bd70 <_Bfree>
 8008ba8:	3f01      	subs	r7, #1
 8008baa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008bac:	2f04      	cmp	r7, #4
 8008bae:	d806      	bhi.n	8008bbe <_strtod_l+0xee>
 8008bb0:	e8df f007 	tbb	[pc, r7]
 8008bb4:	201d0314 	.word	0x201d0314
 8008bb8:	14          	.byte	0x14
 8008bb9:	00          	.byte	0x00
 8008bba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008bbe:	05e9      	lsls	r1, r5, #23
 8008bc0:	bf48      	it	mi
 8008bc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008bc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bca:	0d1b      	lsrs	r3, r3, #20
 8008bcc:	051b      	lsls	r3, r3, #20
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1b9      	bne.n	8008b46 <_strtod_l+0x76>
 8008bd2:	f001 fe11 	bl	800a7f8 <__errno>
 8008bd6:	2322      	movs	r3, #34	; 0x22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7b4      	b.n	8008b46 <_strtod_l+0x76>
 8008bdc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008be0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008be4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008be8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008bec:	e7e7      	b.n	8008bbe <_strtod_l+0xee>
 8008bee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008d68 <_strtod_l+0x298>
 8008bf2:	e7e4      	b.n	8008bbe <_strtod_l+0xee>
 8008bf4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008bf8:	f04f 38ff 	mov.w	r8, #4294967295
 8008bfc:	e7df      	b.n	8008bbe <_strtod_l+0xee>
 8008bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	9215      	str	r2, [sp, #84]	; 0x54
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b30      	cmp	r3, #48	; 0x30
 8008c08:	d0f9      	beq.n	8008bfe <_strtod_l+0x12e>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d09b      	beq.n	8008b46 <_strtod_l+0x76>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f04f 0a00 	mov.w	sl, #0
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c1e:	46d3      	mov	fp, sl
 8008c20:	220a      	movs	r2, #10
 8008c22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008c24:	7806      	ldrb	r6, [r0, #0]
 8008c26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c2a:	b2d9      	uxtb	r1, r3
 8008c2c:	2909      	cmp	r1, #9
 8008c2e:	d926      	bls.n	8008c7e <_strtod_l+0x1ae>
 8008c30:	494c      	ldr	r1, [pc, #304]	; (8008d64 <_strtod_l+0x294>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	f001 fd33 	bl	800a69e <strncmp>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d030      	beq.n	8008c9e <_strtod_l+0x1ce>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	4632      	mov	r2, r6
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	465e      	mov	r6, fp
 8008c44:	4603      	mov	r3, r0
 8008c46:	2a65      	cmp	r2, #101	; 0x65
 8008c48:	d001      	beq.n	8008c4e <_strtod_l+0x17e>
 8008c4a:	2a45      	cmp	r2, #69	; 0x45
 8008c4c:	d113      	bne.n	8008c76 <_strtod_l+0x1a6>
 8008c4e:	b91e      	cbnz	r6, 8008c58 <_strtod_l+0x188>
 8008c50:	9a04      	ldr	r2, [sp, #16]
 8008c52:	4302      	orrs	r2, r0
 8008c54:	d094      	beq.n	8008b80 <_strtod_l+0xb0>
 8008c56:	2600      	movs	r6, #0
 8008c58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008c5a:	1c6a      	adds	r2, r5, #1
 8008c5c:	9215      	str	r2, [sp, #84]	; 0x54
 8008c5e:	786a      	ldrb	r2, [r5, #1]
 8008c60:	2a2b      	cmp	r2, #43	; 0x2b
 8008c62:	d074      	beq.n	8008d4e <_strtod_l+0x27e>
 8008c64:	2a2d      	cmp	r2, #45	; 0x2d
 8008c66:	d078      	beq.n	8008d5a <_strtod_l+0x28a>
 8008c68:	f04f 0c00 	mov.w	ip, #0
 8008c6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008c70:	2909      	cmp	r1, #9
 8008c72:	d97f      	bls.n	8008d74 <_strtod_l+0x2a4>
 8008c74:	9515      	str	r5, [sp, #84]	; 0x54
 8008c76:	2700      	movs	r7, #0
 8008c78:	e09e      	b.n	8008db8 <_strtod_l+0x2e8>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e7c8      	b.n	8008c10 <_strtod_l+0x140>
 8008c7e:	f1bb 0f08 	cmp.w	fp, #8
 8008c82:	bfd8      	it	le
 8008c84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c86:	f100 0001 	add.w	r0, r0, #1
 8008c8a:	bfda      	itte	le
 8008c8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c90:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008c96:	f10b 0b01 	add.w	fp, fp, #1
 8008c9a:	9015      	str	r0, [sp, #84]	; 0x54
 8008c9c:	e7c1      	b.n	8008c22 <_strtod_l+0x152>
 8008c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ca4:	785a      	ldrb	r2, [r3, #1]
 8008ca6:	f1bb 0f00 	cmp.w	fp, #0
 8008caa:	d037      	beq.n	8008d1c <_strtod_l+0x24c>
 8008cac:	9005      	str	r0, [sp, #20]
 8008cae:	465e      	mov	r6, fp
 8008cb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	d912      	bls.n	8008cde <_strtod_l+0x20e>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e7c4      	b.n	8008c46 <_strtod_l+0x176>
 8008cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	9215      	str	r2, [sp, #84]	; 0x54
 8008cc2:	785a      	ldrb	r2, [r3, #1]
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	2a30      	cmp	r2, #48	; 0x30
 8008cc8:	d0f8      	beq.n	8008cbc <_strtod_l+0x1ec>
 8008cca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cce:	2b08      	cmp	r3, #8
 8008cd0:	f200 84c1 	bhi.w	8009656 <_strtod_l+0xb86>
 8008cd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cd6:	9005      	str	r0, [sp, #20]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cdc:	4606      	mov	r6, r0
 8008cde:	3a30      	subs	r2, #48	; 0x30
 8008ce0:	f100 0301 	add.w	r3, r0, #1
 8008ce4:	d014      	beq.n	8008d10 <_strtod_l+0x240>
 8008ce6:	9905      	ldr	r1, [sp, #20]
 8008ce8:	4419      	add	r1, r3
 8008cea:	9105      	str	r1, [sp, #20]
 8008cec:	4633      	mov	r3, r6
 8008cee:	eb00 0c06 	add.w	ip, r0, r6
 8008cf2:	210a      	movs	r1, #10
 8008cf4:	4563      	cmp	r3, ip
 8008cf6:	d113      	bne.n	8008d20 <_strtod_l+0x250>
 8008cf8:	1833      	adds	r3, r6, r0
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	f106 0601 	add.w	r6, r6, #1
 8008d00:	4406      	add	r6, r0
 8008d02:	dc1a      	bgt.n	8008d3a <_strtod_l+0x26a>
 8008d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d06:	230a      	movs	r3, #10
 8008d08:	fb03 2301 	mla	r3, r3, r1, r2
 8008d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d0e:	2300      	movs	r3, #0
 8008d10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d12:	1c51      	adds	r1, r2, #1
 8008d14:	9115      	str	r1, [sp, #84]	; 0x54
 8008d16:	7852      	ldrb	r2, [r2, #1]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	e7c9      	b.n	8008cb0 <_strtod_l+0x1e0>
 8008d1c:	4658      	mov	r0, fp
 8008d1e:	e7d2      	b.n	8008cc6 <_strtod_l+0x1f6>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	f103 0301 	add.w	r3, r3, #1
 8008d26:	dc03      	bgt.n	8008d30 <_strtod_l+0x260>
 8008d28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008d2a:	434f      	muls	r7, r1
 8008d2c:	9709      	str	r7, [sp, #36]	; 0x24
 8008d2e:	e7e1      	b.n	8008cf4 <_strtod_l+0x224>
 8008d30:	2b10      	cmp	r3, #16
 8008d32:	bfd8      	it	le
 8008d34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008d38:	e7dc      	b.n	8008cf4 <_strtod_l+0x224>
 8008d3a:	2e10      	cmp	r6, #16
 8008d3c:	bfdc      	itt	le
 8008d3e:	230a      	movle	r3, #10
 8008d40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008d44:	e7e3      	b.n	8008d0e <_strtod_l+0x23e>
 8008d46:	2300      	movs	r3, #0
 8008d48:	9305      	str	r3, [sp, #20]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e780      	b.n	8008c50 <_strtod_l+0x180>
 8008d4e:	f04f 0c00 	mov.w	ip, #0
 8008d52:	1caa      	adds	r2, r5, #2
 8008d54:	9215      	str	r2, [sp, #84]	; 0x54
 8008d56:	78aa      	ldrb	r2, [r5, #2]
 8008d58:	e788      	b.n	8008c6c <_strtod_l+0x19c>
 8008d5a:	f04f 0c01 	mov.w	ip, #1
 8008d5e:	e7f8      	b.n	8008d52 <_strtod_l+0x282>
 8008d60:	0800db78 	.word	0x0800db78
 8008d64:	0800db74 	.word	0x0800db74
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d6e:	1c51      	adds	r1, r2, #1
 8008d70:	9115      	str	r1, [sp, #84]	; 0x54
 8008d72:	7852      	ldrb	r2, [r2, #1]
 8008d74:	2a30      	cmp	r2, #48	; 0x30
 8008d76:	d0f9      	beq.n	8008d6c <_strtod_l+0x29c>
 8008d78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008d7c:	2908      	cmp	r1, #8
 8008d7e:	f63f af7a 	bhi.w	8008c76 <_strtod_l+0x1a6>
 8008d82:	3a30      	subs	r2, #48	; 0x30
 8008d84:	9208      	str	r2, [sp, #32]
 8008d86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d88:	920c      	str	r2, [sp, #48]	; 0x30
 8008d8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008d8c:	1c57      	adds	r7, r2, #1
 8008d8e:	9715      	str	r7, [sp, #84]	; 0x54
 8008d90:	7852      	ldrb	r2, [r2, #1]
 8008d92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008d96:	f1be 0f09 	cmp.w	lr, #9
 8008d9a:	d938      	bls.n	8008e0e <_strtod_l+0x33e>
 8008d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d9e:	1a7f      	subs	r7, r7, r1
 8008da0:	2f08      	cmp	r7, #8
 8008da2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008da6:	dc03      	bgt.n	8008db0 <_strtod_l+0x2e0>
 8008da8:	9908      	ldr	r1, [sp, #32]
 8008daa:	428f      	cmp	r7, r1
 8008dac:	bfa8      	it	ge
 8008dae:	460f      	movge	r7, r1
 8008db0:	f1bc 0f00 	cmp.w	ip, #0
 8008db4:	d000      	beq.n	8008db8 <_strtod_l+0x2e8>
 8008db6:	427f      	negs	r7, r7
 8008db8:	2e00      	cmp	r6, #0
 8008dba:	d14f      	bne.n	8008e5c <_strtod_l+0x38c>
 8008dbc:	9904      	ldr	r1, [sp, #16]
 8008dbe:	4301      	orrs	r1, r0
 8008dc0:	f47f aec1 	bne.w	8008b46 <_strtod_l+0x76>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f47f aedb 	bne.w	8008b80 <_strtod_l+0xb0>
 8008dca:	2a69      	cmp	r2, #105	; 0x69
 8008dcc:	d029      	beq.n	8008e22 <_strtod_l+0x352>
 8008dce:	dc26      	bgt.n	8008e1e <_strtod_l+0x34e>
 8008dd0:	2a49      	cmp	r2, #73	; 0x49
 8008dd2:	d026      	beq.n	8008e22 <_strtod_l+0x352>
 8008dd4:	2a4e      	cmp	r2, #78	; 0x4e
 8008dd6:	f47f aed3 	bne.w	8008b80 <_strtod_l+0xb0>
 8008dda:	499b      	ldr	r1, [pc, #620]	; (8009048 <_strtod_l+0x578>)
 8008ddc:	a815      	add	r0, sp, #84	; 0x54
 8008dde:	f002 fec5 	bl	800bb6c <__match>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f43f aecc 	beq.w	8008b80 <_strtod_l+0xb0>
 8008de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b28      	cmp	r3, #40	; 0x28
 8008dee:	d12f      	bne.n	8008e50 <_strtod_l+0x380>
 8008df0:	4996      	ldr	r1, [pc, #600]	; (800904c <_strtod_l+0x57c>)
 8008df2:	aa18      	add	r2, sp, #96	; 0x60
 8008df4:	a815      	add	r0, sp, #84	; 0x54
 8008df6:	f002 fecd 	bl	800bb94 <__hexnan>
 8008dfa:	2805      	cmp	r0, #5
 8008dfc:	d128      	bne.n	8008e50 <_strtod_l+0x380>
 8008dfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008e08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008e0c:	e69b      	b.n	8008b46 <_strtod_l+0x76>
 8008e0e:	9f08      	ldr	r7, [sp, #32]
 8008e10:	210a      	movs	r1, #10
 8008e12:	fb01 2107 	mla	r1, r1, r7, r2
 8008e16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008e1a:	9208      	str	r2, [sp, #32]
 8008e1c:	e7b5      	b.n	8008d8a <_strtod_l+0x2ba>
 8008e1e:	2a6e      	cmp	r2, #110	; 0x6e
 8008e20:	e7d9      	b.n	8008dd6 <_strtod_l+0x306>
 8008e22:	498b      	ldr	r1, [pc, #556]	; (8009050 <_strtod_l+0x580>)
 8008e24:	a815      	add	r0, sp, #84	; 0x54
 8008e26:	f002 fea1 	bl	800bb6c <__match>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	f43f aea8 	beq.w	8008b80 <_strtod_l+0xb0>
 8008e30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e32:	4988      	ldr	r1, [pc, #544]	; (8009054 <_strtod_l+0x584>)
 8008e34:	3b01      	subs	r3, #1
 8008e36:	a815      	add	r0, sp, #84	; 0x54
 8008e38:	9315      	str	r3, [sp, #84]	; 0x54
 8008e3a:	f002 fe97 	bl	800bb6c <__match>
 8008e3e:	b910      	cbnz	r0, 8008e46 <_strtod_l+0x376>
 8008e40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e42:	3301      	adds	r3, #1
 8008e44:	9315      	str	r3, [sp, #84]	; 0x54
 8008e46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009064 <_strtod_l+0x594>
 8008e4a:	f04f 0800 	mov.w	r8, #0
 8008e4e:	e67a      	b.n	8008b46 <_strtod_l+0x76>
 8008e50:	4881      	ldr	r0, [pc, #516]	; (8009058 <_strtod_l+0x588>)
 8008e52:	f001 fd0d 	bl	800a870 <nan>
 8008e56:	ec59 8b10 	vmov	r8, r9, d0
 8008e5a:	e674      	b.n	8008b46 <_strtod_l+0x76>
 8008e5c:	9b05      	ldr	r3, [sp, #20]
 8008e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e60:	1afb      	subs	r3, r7, r3
 8008e62:	f1bb 0f00 	cmp.w	fp, #0
 8008e66:	bf08      	it	eq
 8008e68:	46b3      	moveq	fp, r6
 8008e6a:	2e10      	cmp	r6, #16
 8008e6c:	9308      	str	r3, [sp, #32]
 8008e6e:	4635      	mov	r5, r6
 8008e70:	bfa8      	it	ge
 8008e72:	2510      	movge	r5, #16
 8008e74:	f7f7 fb46 	bl	8000504 <__aeabi_ui2d>
 8008e78:	2e09      	cmp	r6, #9
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	dd13      	ble.n	8008ea8 <_strtod_l+0x3d8>
 8008e80:	4b76      	ldr	r3, [pc, #472]	; (800905c <_strtod_l+0x58c>)
 8008e82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008e86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e8a:	f7f7 fbb5 	bl	80005f8 <__aeabi_dmul>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	4650      	mov	r0, sl
 8008e92:	4689      	mov	r9, r1
 8008e94:	f7f7 fb36 	bl	8000504 <__aeabi_ui2d>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	4640      	mov	r0, r8
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	f7f7 f9f4 	bl	800028c <__adddf3>
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	4689      	mov	r9, r1
 8008ea8:	2e0f      	cmp	r6, #15
 8008eaa:	dc38      	bgt.n	8008f1e <_strtod_l+0x44e>
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f43f ae49 	beq.w	8008b46 <_strtod_l+0x76>
 8008eb4:	dd24      	ble.n	8008f00 <_strtod_l+0x430>
 8008eb6:	2b16      	cmp	r3, #22
 8008eb8:	dc0b      	bgt.n	8008ed2 <_strtod_l+0x402>
 8008eba:	4968      	ldr	r1, [pc, #416]	; (800905c <_strtod_l+0x58c>)
 8008ebc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	4680      	mov	r8, r0
 8008ece:	4689      	mov	r9, r1
 8008ed0:	e639      	b.n	8008b46 <_strtod_l+0x76>
 8008ed2:	9a08      	ldr	r2, [sp, #32]
 8008ed4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	db20      	blt.n	8008f1e <_strtod_l+0x44e>
 8008edc:	4c5f      	ldr	r4, [pc, #380]	; (800905c <_strtod_l+0x58c>)
 8008ede:	f1c6 060f 	rsb	r6, r6, #15
 8008ee2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	464b      	mov	r3, r9
 8008eea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	1b9e      	subs	r6, r3, r6
 8008ef6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008efa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008efe:	e7e3      	b.n	8008ec8 <_strtod_l+0x3f8>
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	3316      	adds	r3, #22
 8008f04:	db0b      	blt.n	8008f1e <_strtod_l+0x44e>
 8008f06:	9b05      	ldr	r3, [sp, #20]
 8008f08:	1bdf      	subs	r7, r3, r7
 8008f0a:	4b54      	ldr	r3, [pc, #336]	; (800905c <_strtod_l+0x58c>)
 8008f0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 fc98 	bl	800084c <__aeabi_ddiv>
 8008f1c:	e7d6      	b.n	8008ecc <_strtod_l+0x3fc>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	1b75      	subs	r5, r6, r5
 8008f22:	441d      	add	r5, r3
 8008f24:	2d00      	cmp	r5, #0
 8008f26:	dd70      	ble.n	800900a <_strtod_l+0x53a>
 8008f28:	f015 030f 	ands.w	r3, r5, #15
 8008f2c:	d00a      	beq.n	8008f44 <_strtod_l+0x474>
 8008f2e:	494b      	ldr	r1, [pc, #300]	; (800905c <_strtod_l+0x58c>)
 8008f30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f3c:	f7f7 fb5c 	bl	80005f8 <__aeabi_dmul>
 8008f40:	4680      	mov	r8, r0
 8008f42:	4689      	mov	r9, r1
 8008f44:	f035 050f 	bics.w	r5, r5, #15
 8008f48:	d04d      	beq.n	8008fe6 <_strtod_l+0x516>
 8008f4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008f4e:	dd22      	ble.n	8008f96 <_strtod_l+0x4c6>
 8008f50:	2500      	movs	r5, #0
 8008f52:	46ab      	mov	fp, r5
 8008f54:	9509      	str	r5, [sp, #36]	; 0x24
 8008f56:	9505      	str	r5, [sp, #20]
 8008f58:	2322      	movs	r3, #34	; 0x22
 8008f5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009064 <_strtod_l+0x594>
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	f04f 0800 	mov.w	r8, #0
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f43f aded 	beq.w	8008b46 <_strtod_l+0x76>
 8008f6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f002 fefe 	bl	800bd70 <_Bfree>
 8008f74:	9905      	ldr	r1, [sp, #20]
 8008f76:	4620      	mov	r0, r4
 8008f78:	f002 fefa 	bl	800bd70 <_Bfree>
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f002 fef6 	bl	800bd70 <_Bfree>
 8008f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f86:	4620      	mov	r0, r4
 8008f88:	f002 fef2 	bl	800bd70 <_Bfree>
 8008f8c:	4629      	mov	r1, r5
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f002 feee 	bl	800bd70 <_Bfree>
 8008f94:	e5d7      	b.n	8008b46 <_strtod_l+0x76>
 8008f96:	4b32      	ldr	r3, [pc, #200]	; (8009060 <_strtod_l+0x590>)
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	112d      	asrs	r5, r5, #4
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	469a      	mov	sl, r3
 8008fa4:	2d01      	cmp	r5, #1
 8008fa6:	dc21      	bgt.n	8008fec <_strtod_l+0x51c>
 8008fa8:	b10b      	cbz	r3, 8008fae <_strtod_l+0x4de>
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	492c      	ldr	r1, [pc, #176]	; (8009060 <_strtod_l+0x590>)
 8008fb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008fb4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008fb8:	4642      	mov	r2, r8
 8008fba:	464b      	mov	r3, r9
 8008fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	4b27      	ldr	r3, [pc, #156]	; (8009064 <_strtod_l+0x594>)
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	400b      	ands	r3, r1
 8008fca:	4927      	ldr	r1, [pc, #156]	; (8009068 <_strtod_l+0x598>)
 8008fcc:	428b      	cmp	r3, r1
 8008fce:	4680      	mov	r8, r0
 8008fd0:	d8be      	bhi.n	8008f50 <_strtod_l+0x480>
 8008fd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008fd6:	428b      	cmp	r3, r1
 8008fd8:	bf86      	itte	hi
 8008fda:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800906c <_strtod_l+0x59c>
 8008fde:	f04f 38ff 	movhi.w	r8, #4294967295
 8008fe2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9304      	str	r3, [sp, #16]
 8008fea:	e07b      	b.n	80090e4 <_strtod_l+0x614>
 8008fec:	07ea      	lsls	r2, r5, #31
 8008fee:	d505      	bpl.n	8008ffc <_strtod_l+0x52c>
 8008ff0:	9b04      	ldr	r3, [sp, #16]
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	9a04      	ldr	r2, [sp, #16]
 8008ffe:	3208      	adds	r2, #8
 8009000:	f10a 0a01 	add.w	sl, sl, #1
 8009004:	106d      	asrs	r5, r5, #1
 8009006:	9204      	str	r2, [sp, #16]
 8009008:	e7cc      	b.n	8008fa4 <_strtod_l+0x4d4>
 800900a:	d0ec      	beq.n	8008fe6 <_strtod_l+0x516>
 800900c:	426d      	negs	r5, r5
 800900e:	f015 020f 	ands.w	r2, r5, #15
 8009012:	d00a      	beq.n	800902a <_strtod_l+0x55a>
 8009014:	4b11      	ldr	r3, [pc, #68]	; (800905c <_strtod_l+0x58c>)
 8009016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 fc13 	bl	800084c <__aeabi_ddiv>
 8009026:	4680      	mov	r8, r0
 8009028:	4689      	mov	r9, r1
 800902a:	112d      	asrs	r5, r5, #4
 800902c:	d0db      	beq.n	8008fe6 <_strtod_l+0x516>
 800902e:	2d1f      	cmp	r5, #31
 8009030:	dd1e      	ble.n	8009070 <_strtod_l+0x5a0>
 8009032:	2500      	movs	r5, #0
 8009034:	46ab      	mov	fp, r5
 8009036:	9509      	str	r5, [sp, #36]	; 0x24
 8009038:	9505      	str	r5, [sp, #20]
 800903a:	2322      	movs	r3, #34	; 0x22
 800903c:	f04f 0800 	mov.w	r8, #0
 8009040:	f04f 0900 	mov.w	r9, #0
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	e78d      	b.n	8008f64 <_strtod_l+0x494>
 8009048:	0800dcd6 	.word	0x0800dcd6
 800904c:	0800db8c 	.word	0x0800db8c
 8009050:	0800dcce 	.word	0x0800dcce
 8009054:	0800dd0b 	.word	0x0800dd0b
 8009058:	0800dfb3 	.word	0x0800dfb3
 800905c:	0800de78 	.word	0x0800de78
 8009060:	0800de50 	.word	0x0800de50
 8009064:	7ff00000 	.word	0x7ff00000
 8009068:	7ca00000 	.word	0x7ca00000
 800906c:	7fefffff 	.word	0x7fefffff
 8009070:	f015 0310 	ands.w	r3, r5, #16
 8009074:	bf18      	it	ne
 8009076:	236a      	movne	r3, #106	; 0x6a
 8009078:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800941c <_strtod_l+0x94c>
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	2300      	movs	r3, #0
 8009084:	07ea      	lsls	r2, r5, #31
 8009086:	d504      	bpl.n	8009092 <_strtod_l+0x5c2>
 8009088:	e9da 2300 	ldrd	r2, r3, [sl]
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	2301      	movs	r3, #1
 8009092:	106d      	asrs	r5, r5, #1
 8009094:	f10a 0a08 	add.w	sl, sl, #8
 8009098:	d1f4      	bne.n	8009084 <_strtod_l+0x5b4>
 800909a:	b10b      	cbz	r3, 80090a0 <_strtod_l+0x5d0>
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	9b04      	ldr	r3, [sp, #16]
 80090a2:	b1bb      	cbz	r3, 80090d4 <_strtod_l+0x604>
 80090a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80090a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	4649      	mov	r1, r9
 80090b0:	dd10      	ble.n	80090d4 <_strtod_l+0x604>
 80090b2:	2b1f      	cmp	r3, #31
 80090b4:	f340 811e 	ble.w	80092f4 <_strtod_l+0x824>
 80090b8:	2b34      	cmp	r3, #52	; 0x34
 80090ba:	bfde      	ittt	le
 80090bc:	f04f 33ff 	movle.w	r3, #4294967295
 80090c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80090c4:	4093      	lslle	r3, r2
 80090c6:	f04f 0800 	mov.w	r8, #0
 80090ca:	bfcc      	ite	gt
 80090cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80090d0:	ea03 0901 	andle.w	r9, r3, r1
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d1a6      	bne.n	8009032 <_strtod_l+0x562>
 80090e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ea:	4633      	mov	r3, r6
 80090ec:	465a      	mov	r2, fp
 80090ee:	4620      	mov	r0, r4
 80090f0:	f002 fea6 	bl	800be40 <__s2b>
 80090f4:	9009      	str	r0, [sp, #36]	; 0x24
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f af2a 	beq.w	8008f50 <_strtod_l+0x480>
 80090fc:	9a08      	ldr	r2, [sp, #32]
 80090fe:	9b05      	ldr	r3, [sp, #20]
 8009100:	2a00      	cmp	r2, #0
 8009102:	eba3 0307 	sub.w	r3, r3, r7
 8009106:	bfa8      	it	ge
 8009108:	2300      	movge	r3, #0
 800910a:	930c      	str	r3, [sp, #48]	; 0x30
 800910c:	2500      	movs	r5, #0
 800910e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009112:	9312      	str	r3, [sp, #72]	; 0x48
 8009114:	46ab      	mov	fp, r5
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	4620      	mov	r0, r4
 800911a:	6859      	ldr	r1, [r3, #4]
 800911c:	f002 fde8 	bl	800bcf0 <_Balloc>
 8009120:	9005      	str	r0, [sp, #20]
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f af18 	beq.w	8008f58 <_strtod_l+0x488>
 8009128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912a:	691a      	ldr	r2, [r3, #16]
 800912c:	3202      	adds	r2, #2
 800912e:	f103 010c 	add.w	r1, r3, #12
 8009132:	0092      	lsls	r2, r2, #2
 8009134:	300c      	adds	r0, #12
 8009136:	f001 fb8c 	bl	800a852 <memcpy>
 800913a:	ec49 8b10 	vmov	d0, r8, r9
 800913e:	aa18      	add	r2, sp, #96	; 0x60
 8009140:	a917      	add	r1, sp, #92	; 0x5c
 8009142:	4620      	mov	r0, r4
 8009144:	f003 f9b0 	bl	800c4a8 <__d2b>
 8009148:	ec49 8b18 	vmov	d8, r8, r9
 800914c:	9016      	str	r0, [sp, #88]	; 0x58
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f af02 	beq.w	8008f58 <_strtod_l+0x488>
 8009154:	2101      	movs	r1, #1
 8009156:	4620      	mov	r0, r4
 8009158:	f002 ff0a 	bl	800bf70 <__i2b>
 800915c:	4683      	mov	fp, r0
 800915e:	2800      	cmp	r0, #0
 8009160:	f43f aefa 	beq.w	8008f58 <_strtod_l+0x488>
 8009164:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009166:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009168:	2e00      	cmp	r6, #0
 800916a:	bfab      	itete	ge
 800916c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800916e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009170:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009172:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009176:	bfac      	ite	ge
 8009178:	eb06 0a03 	addge.w	sl, r6, r3
 800917c:	1b9f      	sublt	r7, r3, r6
 800917e:	9b04      	ldr	r3, [sp, #16]
 8009180:	1af6      	subs	r6, r6, r3
 8009182:	4416      	add	r6, r2
 8009184:	4ba0      	ldr	r3, [pc, #640]	; (8009408 <_strtod_l+0x938>)
 8009186:	3e01      	subs	r6, #1
 8009188:	429e      	cmp	r6, r3
 800918a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800918e:	f280 80c4 	bge.w	800931a <_strtod_l+0x84a>
 8009192:	1b9b      	subs	r3, r3, r6
 8009194:	2b1f      	cmp	r3, #31
 8009196:	eba2 0203 	sub.w	r2, r2, r3
 800919a:	f04f 0101 	mov.w	r1, #1
 800919e:	f300 80b0 	bgt.w	8009302 <_strtod_l+0x832>
 80091a2:	fa01 f303 	lsl.w	r3, r1, r3
 80091a6:	930e      	str	r3, [sp, #56]	; 0x38
 80091a8:	2300      	movs	r3, #0
 80091aa:	930d      	str	r3, [sp, #52]	; 0x34
 80091ac:	eb0a 0602 	add.w	r6, sl, r2
 80091b0:	9b04      	ldr	r3, [sp, #16]
 80091b2:	45b2      	cmp	sl, r6
 80091b4:	4417      	add	r7, r2
 80091b6:	441f      	add	r7, r3
 80091b8:	4653      	mov	r3, sl
 80091ba:	bfa8      	it	ge
 80091bc:	4633      	movge	r3, r6
 80091be:	42bb      	cmp	r3, r7
 80091c0:	bfa8      	it	ge
 80091c2:	463b      	movge	r3, r7
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	bfc2      	ittt	gt
 80091c8:	1af6      	subgt	r6, r6, r3
 80091ca:	1aff      	subgt	r7, r7, r3
 80091cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80091d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd17      	ble.n	8009206 <_strtod_l+0x736>
 80091d6:	4659      	mov	r1, fp
 80091d8:	461a      	mov	r2, r3
 80091da:	4620      	mov	r0, r4
 80091dc:	f002 ff88 	bl	800c0f0 <__pow5mult>
 80091e0:	4683      	mov	fp, r0
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f43f aeb8 	beq.w	8008f58 <_strtod_l+0x488>
 80091e8:	4601      	mov	r1, r0
 80091ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80091ec:	4620      	mov	r0, r4
 80091ee:	f002 fed5 	bl	800bf9c <__multiply>
 80091f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f43f aeaf 	beq.w	8008f58 <_strtod_l+0x488>
 80091fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80091fc:	4620      	mov	r0, r4
 80091fe:	f002 fdb7 	bl	800bd70 <_Bfree>
 8009202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009204:	9316      	str	r3, [sp, #88]	; 0x58
 8009206:	2e00      	cmp	r6, #0
 8009208:	f300 808c 	bgt.w	8009324 <_strtod_l+0x854>
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd08      	ble.n	8009224 <_strtod_l+0x754>
 8009212:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009214:	9905      	ldr	r1, [sp, #20]
 8009216:	4620      	mov	r0, r4
 8009218:	f002 ff6a 	bl	800c0f0 <__pow5mult>
 800921c:	9005      	str	r0, [sp, #20]
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f ae9a 	beq.w	8008f58 <_strtod_l+0x488>
 8009224:	2f00      	cmp	r7, #0
 8009226:	dd08      	ble.n	800923a <_strtod_l+0x76a>
 8009228:	9905      	ldr	r1, [sp, #20]
 800922a:	463a      	mov	r2, r7
 800922c:	4620      	mov	r0, r4
 800922e:	f002 ffb9 	bl	800c1a4 <__lshift>
 8009232:	9005      	str	r0, [sp, #20]
 8009234:	2800      	cmp	r0, #0
 8009236:	f43f ae8f 	beq.w	8008f58 <_strtod_l+0x488>
 800923a:	f1ba 0f00 	cmp.w	sl, #0
 800923e:	dd08      	ble.n	8009252 <_strtod_l+0x782>
 8009240:	4659      	mov	r1, fp
 8009242:	4652      	mov	r2, sl
 8009244:	4620      	mov	r0, r4
 8009246:	f002 ffad 	bl	800c1a4 <__lshift>
 800924a:	4683      	mov	fp, r0
 800924c:	2800      	cmp	r0, #0
 800924e:	f43f ae83 	beq.w	8008f58 <_strtod_l+0x488>
 8009252:	9a05      	ldr	r2, [sp, #20]
 8009254:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009256:	4620      	mov	r0, r4
 8009258:	f003 f82c 	bl	800c2b4 <__mdiff>
 800925c:	4605      	mov	r5, r0
 800925e:	2800      	cmp	r0, #0
 8009260:	f43f ae7a 	beq.w	8008f58 <_strtod_l+0x488>
 8009264:	68c3      	ldr	r3, [r0, #12]
 8009266:	930b      	str	r3, [sp, #44]	; 0x2c
 8009268:	2300      	movs	r3, #0
 800926a:	60c3      	str	r3, [r0, #12]
 800926c:	4659      	mov	r1, fp
 800926e:	f003 f805 	bl	800c27c <__mcmp>
 8009272:	2800      	cmp	r0, #0
 8009274:	da60      	bge.n	8009338 <_strtod_l+0x868>
 8009276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009278:	ea53 0308 	orrs.w	r3, r3, r8
 800927c:	f040 8084 	bne.w	8009388 <_strtod_l+0x8b8>
 8009280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009284:	2b00      	cmp	r3, #0
 8009286:	d17f      	bne.n	8009388 <_strtod_l+0x8b8>
 8009288:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	051b      	lsls	r3, r3, #20
 8009290:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009294:	d978      	bls.n	8009388 <_strtod_l+0x8b8>
 8009296:	696b      	ldr	r3, [r5, #20]
 8009298:	b913      	cbnz	r3, 80092a0 <_strtod_l+0x7d0>
 800929a:	692b      	ldr	r3, [r5, #16]
 800929c:	2b01      	cmp	r3, #1
 800929e:	dd73      	ble.n	8009388 <_strtod_l+0x8b8>
 80092a0:	4629      	mov	r1, r5
 80092a2:	2201      	movs	r2, #1
 80092a4:	4620      	mov	r0, r4
 80092a6:	f002 ff7d 	bl	800c1a4 <__lshift>
 80092aa:	4659      	mov	r1, fp
 80092ac:	4605      	mov	r5, r0
 80092ae:	f002 ffe5 	bl	800c27c <__mcmp>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dd68      	ble.n	8009388 <_strtod_l+0x8b8>
 80092b6:	9904      	ldr	r1, [sp, #16]
 80092b8:	4a54      	ldr	r2, [pc, #336]	; (800940c <_strtod_l+0x93c>)
 80092ba:	464b      	mov	r3, r9
 80092bc:	2900      	cmp	r1, #0
 80092be:	f000 8084 	beq.w	80093ca <_strtod_l+0x8fa>
 80092c2:	ea02 0109 	and.w	r1, r2, r9
 80092c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ca:	dc7e      	bgt.n	80093ca <_strtod_l+0x8fa>
 80092cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092d0:	f77f aeb3 	ble.w	800903a <_strtod_l+0x56a>
 80092d4:	4b4e      	ldr	r3, [pc, #312]	; (8009410 <_strtod_l+0x940>)
 80092d6:	4640      	mov	r0, r8
 80092d8:	4649      	mov	r1, r9
 80092da:	2200      	movs	r2, #0
 80092dc:	f7f7 f98c 	bl	80005f8 <__aeabi_dmul>
 80092e0:	4b4a      	ldr	r3, [pc, #296]	; (800940c <_strtod_l+0x93c>)
 80092e2:	400b      	ands	r3, r1
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f47f ae3f 	bne.w	8008f6c <_strtod_l+0x49c>
 80092ee:	2322      	movs	r3, #34	; 0x22
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	e63b      	b.n	8008f6c <_strtod_l+0x49c>
 80092f4:	f04f 32ff 	mov.w	r2, #4294967295
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	ea03 0808 	and.w	r8, r3, r8
 8009300:	e6e8      	b.n	80090d4 <_strtod_l+0x604>
 8009302:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009306:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800930a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800930e:	36e2      	adds	r6, #226	; 0xe2
 8009310:	fa01 f306 	lsl.w	r3, r1, r6
 8009314:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009318:	e748      	b.n	80091ac <_strtod_l+0x6dc>
 800931a:	2100      	movs	r1, #0
 800931c:	2301      	movs	r3, #1
 800931e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009322:	e743      	b.n	80091ac <_strtod_l+0x6dc>
 8009324:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009326:	4632      	mov	r2, r6
 8009328:	4620      	mov	r0, r4
 800932a:	f002 ff3b 	bl	800c1a4 <__lshift>
 800932e:	9016      	str	r0, [sp, #88]	; 0x58
 8009330:	2800      	cmp	r0, #0
 8009332:	f47f af6b 	bne.w	800920c <_strtod_l+0x73c>
 8009336:	e60f      	b.n	8008f58 <_strtod_l+0x488>
 8009338:	46ca      	mov	sl, r9
 800933a:	d171      	bne.n	8009420 <_strtod_l+0x950>
 800933c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800933e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009342:	b352      	cbz	r2, 800939a <_strtod_l+0x8ca>
 8009344:	4a33      	ldr	r2, [pc, #204]	; (8009414 <_strtod_l+0x944>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d12a      	bne.n	80093a0 <_strtod_l+0x8d0>
 800934a:	9b04      	ldr	r3, [sp, #16]
 800934c:	4641      	mov	r1, r8
 800934e:	b1fb      	cbz	r3, 8009390 <_strtod_l+0x8c0>
 8009350:	4b2e      	ldr	r3, [pc, #184]	; (800940c <_strtod_l+0x93c>)
 8009352:	ea09 0303 	and.w	r3, r9, r3
 8009356:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800935a:	f04f 32ff 	mov.w	r2, #4294967295
 800935e:	d81a      	bhi.n	8009396 <_strtod_l+0x8c6>
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009366:	fa02 f303 	lsl.w	r3, r2, r3
 800936a:	4299      	cmp	r1, r3
 800936c:	d118      	bne.n	80093a0 <_strtod_l+0x8d0>
 800936e:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <_strtod_l+0x948>)
 8009370:	459a      	cmp	sl, r3
 8009372:	d102      	bne.n	800937a <_strtod_l+0x8aa>
 8009374:	3101      	adds	r1, #1
 8009376:	f43f adef 	beq.w	8008f58 <_strtod_l+0x488>
 800937a:	4b24      	ldr	r3, [pc, #144]	; (800940c <_strtod_l+0x93c>)
 800937c:	ea0a 0303 	and.w	r3, sl, r3
 8009380:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009384:	f04f 0800 	mov.w	r8, #0
 8009388:	9b04      	ldr	r3, [sp, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1a2      	bne.n	80092d4 <_strtod_l+0x804>
 800938e:	e5ed      	b.n	8008f6c <_strtod_l+0x49c>
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	e7e9      	b.n	800936a <_strtod_l+0x89a>
 8009396:	4613      	mov	r3, r2
 8009398:	e7e7      	b.n	800936a <_strtod_l+0x89a>
 800939a:	ea53 0308 	orrs.w	r3, r3, r8
 800939e:	d08a      	beq.n	80092b6 <_strtod_l+0x7e6>
 80093a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a2:	b1e3      	cbz	r3, 80093de <_strtod_l+0x90e>
 80093a4:	ea13 0f0a 	tst.w	r3, sl
 80093a8:	d0ee      	beq.n	8009388 <_strtod_l+0x8b8>
 80093aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	4640      	mov	r0, r8
 80093b0:	4649      	mov	r1, r9
 80093b2:	b1c3      	cbz	r3, 80093e6 <_strtod_l+0x916>
 80093b4:	f7ff fb6d 	bl	8008a92 <sulp>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	ec51 0b18 	vmov	r0, r1, d8
 80093c0:	f7f6 ff64 	bl	800028c <__adddf3>
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	e7de      	b.n	8009388 <_strtod_l+0x8b8>
 80093ca:	4013      	ands	r3, r2
 80093cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80093d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80093d8:	f04f 38ff 	mov.w	r8, #4294967295
 80093dc:	e7d4      	b.n	8009388 <_strtod_l+0x8b8>
 80093de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e0:	ea13 0f08 	tst.w	r3, r8
 80093e4:	e7e0      	b.n	80093a8 <_strtod_l+0x8d8>
 80093e6:	f7ff fb54 	bl	8008a92 <sulp>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	ec51 0b18 	vmov	r0, r1, d8
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	2200      	movs	r2, #0
 80093f8:	2300      	movs	r3, #0
 80093fa:	4680      	mov	r8, r0
 80093fc:	4689      	mov	r9, r1
 80093fe:	f7f7 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009402:	2800      	cmp	r0, #0
 8009404:	d0c0      	beq.n	8009388 <_strtod_l+0x8b8>
 8009406:	e618      	b.n	800903a <_strtod_l+0x56a>
 8009408:	fffffc02 	.word	0xfffffc02
 800940c:	7ff00000 	.word	0x7ff00000
 8009410:	39500000 	.word	0x39500000
 8009414:	000fffff 	.word	0x000fffff
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	0800dba0 	.word	0x0800dba0
 8009420:	4659      	mov	r1, fp
 8009422:	4628      	mov	r0, r5
 8009424:	f003 f89a 	bl	800c55c <__ratio>
 8009428:	ec57 6b10 	vmov	r6, r7, d0
 800942c:	ee10 0a10 	vmov	r0, s0
 8009430:	2200      	movs	r2, #0
 8009432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fb5a 	bl	8000af0 <__aeabi_dcmple>
 800943c:	2800      	cmp	r0, #0
 800943e:	d071      	beq.n	8009524 <_strtod_l+0xa54>
 8009440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d17c      	bne.n	8009540 <_strtod_l+0xa70>
 8009446:	f1b8 0f00 	cmp.w	r8, #0
 800944a:	d15a      	bne.n	8009502 <_strtod_l+0xa32>
 800944c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009450:	2b00      	cmp	r3, #0
 8009452:	d15d      	bne.n	8009510 <_strtod_l+0xa40>
 8009454:	4b90      	ldr	r3, [pc, #576]	; (8009698 <_strtod_l+0xbc8>)
 8009456:	2200      	movs	r2, #0
 8009458:	4630      	mov	r0, r6
 800945a:	4639      	mov	r1, r7
 800945c:	f7f7 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8009460:	2800      	cmp	r0, #0
 8009462:	d15c      	bne.n	800951e <_strtod_l+0xa4e>
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	4b8c      	ldr	r3, [pc, #560]	; (800969c <_strtod_l+0xbcc>)
 800946a:	2200      	movs	r2, #0
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	4606      	mov	r6, r0
 8009472:	460f      	mov	r7, r1
 8009474:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009478:	9606      	str	r6, [sp, #24]
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009480:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009484:	4b86      	ldr	r3, [pc, #536]	; (80096a0 <_strtod_l+0xbd0>)
 8009486:	ea0a 0303 	and.w	r3, sl, r3
 800948a:	930d      	str	r3, [sp, #52]	; 0x34
 800948c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800948e:	4b85      	ldr	r3, [pc, #532]	; (80096a4 <_strtod_l+0xbd4>)
 8009490:	429a      	cmp	r2, r3
 8009492:	f040 8090 	bne.w	80095b6 <_strtod_l+0xae6>
 8009496:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800949a:	ec49 8b10 	vmov	d0, r8, r9
 800949e:	f002 ff93 	bl	800c3c8 <__ulp>
 80094a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094a6:	ec51 0b10 	vmov	r0, r1, d0
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	4642      	mov	r2, r8
 80094b0:	464b      	mov	r3, r9
 80094b2:	f7f6 feeb 	bl	800028c <__adddf3>
 80094b6:	460b      	mov	r3, r1
 80094b8:	4979      	ldr	r1, [pc, #484]	; (80096a0 <_strtod_l+0xbd0>)
 80094ba:	4a7b      	ldr	r2, [pc, #492]	; (80096a8 <_strtod_l+0xbd8>)
 80094bc:	4019      	ands	r1, r3
 80094be:	4291      	cmp	r1, r2
 80094c0:	4680      	mov	r8, r0
 80094c2:	d944      	bls.n	800954e <_strtod_l+0xa7e>
 80094c4:	ee18 2a90 	vmov	r2, s17
 80094c8:	4b78      	ldr	r3, [pc, #480]	; (80096ac <_strtod_l+0xbdc>)
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d104      	bne.n	80094d8 <_strtod_l+0xa08>
 80094ce:	ee18 3a10 	vmov	r3, s16
 80094d2:	3301      	adds	r3, #1
 80094d4:	f43f ad40 	beq.w	8008f58 <_strtod_l+0x488>
 80094d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80096ac <_strtod_l+0xbdc>
 80094dc:	f04f 38ff 	mov.w	r8, #4294967295
 80094e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094e2:	4620      	mov	r0, r4
 80094e4:	f002 fc44 	bl	800bd70 <_Bfree>
 80094e8:	9905      	ldr	r1, [sp, #20]
 80094ea:	4620      	mov	r0, r4
 80094ec:	f002 fc40 	bl	800bd70 <_Bfree>
 80094f0:	4659      	mov	r1, fp
 80094f2:	4620      	mov	r0, r4
 80094f4:	f002 fc3c 	bl	800bd70 <_Bfree>
 80094f8:	4629      	mov	r1, r5
 80094fa:	4620      	mov	r0, r4
 80094fc:	f002 fc38 	bl	800bd70 <_Bfree>
 8009500:	e609      	b.n	8009116 <_strtod_l+0x646>
 8009502:	f1b8 0f01 	cmp.w	r8, #1
 8009506:	d103      	bne.n	8009510 <_strtod_l+0xa40>
 8009508:	f1b9 0f00 	cmp.w	r9, #0
 800950c:	f43f ad95 	beq.w	800903a <_strtod_l+0x56a>
 8009510:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009668 <_strtod_l+0xb98>
 8009514:	4f60      	ldr	r7, [pc, #384]	; (8009698 <_strtod_l+0xbc8>)
 8009516:	ed8d 7b06 	vstr	d7, [sp, #24]
 800951a:	2600      	movs	r6, #0
 800951c:	e7ae      	b.n	800947c <_strtod_l+0x9ac>
 800951e:	4f5f      	ldr	r7, [pc, #380]	; (800969c <_strtod_l+0xbcc>)
 8009520:	2600      	movs	r6, #0
 8009522:	e7a7      	b.n	8009474 <_strtod_l+0x9a4>
 8009524:	4b5d      	ldr	r3, [pc, #372]	; (800969c <_strtod_l+0xbcc>)
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	2200      	movs	r2, #0
 800952c:	f7f7 f864 	bl	80005f8 <__aeabi_dmul>
 8009530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d09c      	beq.n	8009474 <_strtod_l+0x9a4>
 800953a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800953e:	e79d      	b.n	800947c <_strtod_l+0x9ac>
 8009540:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009670 <_strtod_l+0xba0>
 8009544:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009548:	ec57 6b17 	vmov	r6, r7, d7
 800954c:	e796      	b.n	800947c <_strtod_l+0x9ac>
 800954e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009552:	9b04      	ldr	r3, [sp, #16]
 8009554:	46ca      	mov	sl, r9
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1c2      	bne.n	80094e0 <_strtod_l+0xa10>
 800955a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800955e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009560:	0d1b      	lsrs	r3, r3, #20
 8009562:	051b      	lsls	r3, r3, #20
 8009564:	429a      	cmp	r2, r3
 8009566:	d1bb      	bne.n	80094e0 <_strtod_l+0xa10>
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fba4 	bl	8000cb8 <__aeabi_d2lz>
 8009570:	f7f7 f814 	bl	800059c <__aeabi_l2d>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f6 fe84 	bl	8000288 <__aeabi_dsub>
 8009580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009586:	ea43 0308 	orr.w	r3, r3, r8
 800958a:	4313      	orrs	r3, r2
 800958c:	4606      	mov	r6, r0
 800958e:	460f      	mov	r7, r1
 8009590:	d054      	beq.n	800963c <_strtod_l+0xb6c>
 8009592:	a339      	add	r3, pc, #228	; (adr r3, 8009678 <_strtod_l+0xba8>)
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	f7f7 faa0 	bl	8000adc <__aeabi_dcmplt>
 800959c:	2800      	cmp	r0, #0
 800959e:	f47f ace5 	bne.w	8008f6c <_strtod_l+0x49c>
 80095a2:	a337      	add	r3, pc, #220	; (adr r3, 8009680 <_strtod_l+0xbb0>)
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	4630      	mov	r0, r6
 80095aa:	4639      	mov	r1, r7
 80095ac:	f7f7 fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d095      	beq.n	80094e0 <_strtod_l+0xa10>
 80095b4:	e4da      	b.n	8008f6c <_strtod_l+0x49c>
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	b333      	cbz	r3, 8009608 <_strtod_l+0xb38>
 80095ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095c0:	d822      	bhi.n	8009608 <_strtod_l+0xb38>
 80095c2:	a331      	add	r3, pc, #196	; (adr r3, 8009688 <_strtod_l+0xbb8>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	4630      	mov	r0, r6
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7f7 fa90 	bl	8000af0 <__aeabi_dcmple>
 80095d0:	b1a0      	cbz	r0, 80095fc <_strtod_l+0xb2c>
 80095d2:	4639      	mov	r1, r7
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7f7 fae7 	bl	8000ba8 <__aeabi_d2uiz>
 80095da:	2801      	cmp	r0, #1
 80095dc:	bf38      	it	cc
 80095de:	2001      	movcc	r0, #1
 80095e0:	f7f6 ff90 	bl	8000504 <__aeabi_ui2d>
 80095e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	bb23      	cbnz	r3, 8009636 <_strtod_l+0xb66>
 80095ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095f0:	9010      	str	r0, [sp, #64]	; 0x40
 80095f2:	9311      	str	r3, [sp, #68]	; 0x44
 80095f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80095f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009600:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	930f      	str	r3, [sp, #60]	; 0x3c
 8009608:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800960c:	eeb0 0a48 	vmov.f32	s0, s16
 8009610:	eef0 0a68 	vmov.f32	s1, s17
 8009614:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009618:	f002 fed6 	bl	800c3c8 <__ulp>
 800961c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009620:	ec53 2b10 	vmov	r2, r3, d0
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	ec53 2b18 	vmov	r2, r3, d8
 800962c:	f7f6 fe2e 	bl	800028c <__adddf3>
 8009630:	4680      	mov	r8, r0
 8009632:	4689      	mov	r9, r1
 8009634:	e78d      	b.n	8009552 <_strtod_l+0xa82>
 8009636:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800963a:	e7db      	b.n	80095f4 <_strtod_l+0xb24>
 800963c:	a314      	add	r3, pc, #80	; (adr r3, 8009690 <_strtod_l+0xbc0>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	f7f7 fa4b 	bl	8000adc <__aeabi_dcmplt>
 8009646:	e7b3      	b.n	80095b0 <_strtod_l+0xae0>
 8009648:	2300      	movs	r3, #0
 800964a:	930a      	str	r3, [sp, #40]	; 0x28
 800964c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800964e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	f7ff ba7c 	b.w	8008b4e <_strtod_l+0x7e>
 8009656:	2a65      	cmp	r2, #101	; 0x65
 8009658:	f43f ab75 	beq.w	8008d46 <_strtod_l+0x276>
 800965c:	2a45      	cmp	r2, #69	; 0x45
 800965e:	f43f ab72 	beq.w	8008d46 <_strtod_l+0x276>
 8009662:	2301      	movs	r3, #1
 8009664:	f7ff bbaa 	b.w	8008dbc <_strtod_l+0x2ec>
 8009668:	00000000 	.word	0x00000000
 800966c:	bff00000 	.word	0xbff00000
 8009670:	00000000 	.word	0x00000000
 8009674:	3ff00000 	.word	0x3ff00000
 8009678:	94a03595 	.word	0x94a03595
 800967c:	3fdfffff 	.word	0x3fdfffff
 8009680:	35afe535 	.word	0x35afe535
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	ffc00000 	.word	0xffc00000
 800968c:	41dfffff 	.word	0x41dfffff
 8009690:	94a03595 	.word	0x94a03595
 8009694:	3fcfffff 	.word	0x3fcfffff
 8009698:	3ff00000 	.word	0x3ff00000
 800969c:	3fe00000 	.word	0x3fe00000
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	7fe00000 	.word	0x7fe00000
 80096a8:	7c9fffff 	.word	0x7c9fffff
 80096ac:	7fefffff 	.word	0x7fefffff

080096b0 <_strtod_r>:
 80096b0:	4b01      	ldr	r3, [pc, #4]	; (80096b8 <_strtod_r+0x8>)
 80096b2:	f7ff ba0d 	b.w	8008ad0 <_strtod_l>
 80096b6:	bf00      	nop
 80096b8:	20000020 	.word	0x20000020

080096bc <__cvt>:
 80096bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c0:	ec55 4b10 	vmov	r4, r5, d0
 80096c4:	2d00      	cmp	r5, #0
 80096c6:	460e      	mov	r6, r1
 80096c8:	4619      	mov	r1, r3
 80096ca:	462b      	mov	r3, r5
 80096cc:	bfbb      	ittet	lt
 80096ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096d2:	461d      	movlt	r5, r3
 80096d4:	2300      	movge	r3, #0
 80096d6:	232d      	movlt	r3, #45	; 0x2d
 80096d8:	700b      	strb	r3, [r1, #0]
 80096da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096e0:	4691      	mov	r9, r2
 80096e2:	f023 0820 	bic.w	r8, r3, #32
 80096e6:	bfbc      	itt	lt
 80096e8:	4622      	movlt	r2, r4
 80096ea:	4614      	movlt	r4, r2
 80096ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096f0:	d005      	beq.n	80096fe <__cvt+0x42>
 80096f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096f6:	d100      	bne.n	80096fa <__cvt+0x3e>
 80096f8:	3601      	adds	r6, #1
 80096fa:	2102      	movs	r1, #2
 80096fc:	e000      	b.n	8009700 <__cvt+0x44>
 80096fe:	2103      	movs	r1, #3
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	ab02      	add	r3, sp, #8
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	ec45 4b10 	vmov	d0, r4, r5
 800970c:	4653      	mov	r3, sl
 800970e:	4632      	mov	r2, r6
 8009710:	f001 f946 	bl	800a9a0 <_dtoa_r>
 8009714:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009718:	4607      	mov	r7, r0
 800971a:	d102      	bne.n	8009722 <__cvt+0x66>
 800971c:	f019 0f01 	tst.w	r9, #1
 8009720:	d022      	beq.n	8009768 <__cvt+0xac>
 8009722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009726:	eb07 0906 	add.w	r9, r7, r6
 800972a:	d110      	bne.n	800974e <__cvt+0x92>
 800972c:	783b      	ldrb	r3, [r7, #0]
 800972e:	2b30      	cmp	r3, #48	; 0x30
 8009730:	d10a      	bne.n	8009748 <__cvt+0x8c>
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	4620      	mov	r0, r4
 8009738:	4629      	mov	r1, r5
 800973a:	f7f7 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800973e:	b918      	cbnz	r0, 8009748 <__cvt+0x8c>
 8009740:	f1c6 0601 	rsb	r6, r6, #1
 8009744:	f8ca 6000 	str.w	r6, [sl]
 8009748:	f8da 3000 	ldr.w	r3, [sl]
 800974c:	4499      	add	r9, r3
 800974e:	2200      	movs	r2, #0
 8009750:	2300      	movs	r3, #0
 8009752:	4620      	mov	r0, r4
 8009754:	4629      	mov	r1, r5
 8009756:	f7f7 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800975a:	b108      	cbz	r0, 8009760 <__cvt+0xa4>
 800975c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009760:	2230      	movs	r2, #48	; 0x30
 8009762:	9b03      	ldr	r3, [sp, #12]
 8009764:	454b      	cmp	r3, r9
 8009766:	d307      	bcc.n	8009778 <__cvt+0xbc>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800976c:	1bdb      	subs	r3, r3, r7
 800976e:	4638      	mov	r0, r7
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	b004      	add	sp, #16
 8009774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009778:	1c59      	adds	r1, r3, #1
 800977a:	9103      	str	r1, [sp, #12]
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	e7f0      	b.n	8009762 <__cvt+0xa6>

08009780 <__exponent>:
 8009780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009782:	4603      	mov	r3, r0
 8009784:	2900      	cmp	r1, #0
 8009786:	bfb8      	it	lt
 8009788:	4249      	neglt	r1, r1
 800978a:	f803 2b02 	strb.w	r2, [r3], #2
 800978e:	bfb4      	ite	lt
 8009790:	222d      	movlt	r2, #45	; 0x2d
 8009792:	222b      	movge	r2, #43	; 0x2b
 8009794:	2909      	cmp	r1, #9
 8009796:	7042      	strb	r2, [r0, #1]
 8009798:	dd2a      	ble.n	80097f0 <__exponent+0x70>
 800979a:	f10d 0207 	add.w	r2, sp, #7
 800979e:	4617      	mov	r7, r2
 80097a0:	260a      	movs	r6, #10
 80097a2:	4694      	mov	ip, r2
 80097a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80097a8:	fb06 1415 	mls	r4, r6, r5, r1
 80097ac:	3430      	adds	r4, #48	; 0x30
 80097ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80097b2:	460c      	mov	r4, r1
 80097b4:	2c63      	cmp	r4, #99	; 0x63
 80097b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80097ba:	4629      	mov	r1, r5
 80097bc:	dcf1      	bgt.n	80097a2 <__exponent+0x22>
 80097be:	3130      	adds	r1, #48	; 0x30
 80097c0:	f1ac 0402 	sub.w	r4, ip, #2
 80097c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097c8:	1c41      	adds	r1, r0, #1
 80097ca:	4622      	mov	r2, r4
 80097cc:	42ba      	cmp	r2, r7
 80097ce:	d30a      	bcc.n	80097e6 <__exponent+0x66>
 80097d0:	f10d 0209 	add.w	r2, sp, #9
 80097d4:	eba2 020c 	sub.w	r2, r2, ip
 80097d8:	42bc      	cmp	r4, r7
 80097da:	bf88      	it	hi
 80097dc:	2200      	movhi	r2, #0
 80097de:	4413      	add	r3, r2
 80097e0:	1a18      	subs	r0, r3, r0
 80097e2:	b003      	add	sp, #12
 80097e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80097ee:	e7ed      	b.n	80097cc <__exponent+0x4c>
 80097f0:	2330      	movs	r3, #48	; 0x30
 80097f2:	3130      	adds	r1, #48	; 0x30
 80097f4:	7083      	strb	r3, [r0, #2]
 80097f6:	70c1      	strb	r1, [r0, #3]
 80097f8:	1d03      	adds	r3, r0, #4
 80097fa:	e7f1      	b.n	80097e0 <__exponent+0x60>

080097fc <_printf_float>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	ed2d 8b02 	vpush	{d8}
 8009804:	b08d      	sub	sp, #52	; 0x34
 8009806:	460c      	mov	r4, r1
 8009808:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800980c:	4616      	mov	r6, r2
 800980e:	461f      	mov	r7, r3
 8009810:	4605      	mov	r5, r0
 8009812:	f000 ff97 	bl	800a744 <_localeconv_r>
 8009816:	f8d0 a000 	ldr.w	sl, [r0]
 800981a:	4650      	mov	r0, sl
 800981c:	f7f6 fd28 	bl	8000270 <strlen>
 8009820:	2300      	movs	r3, #0
 8009822:	930a      	str	r3, [sp, #40]	; 0x28
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	f8d8 3000 	ldr.w	r3, [r8]
 800982c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009830:	3307      	adds	r3, #7
 8009832:	f023 0307 	bic.w	r3, r3, #7
 8009836:	f103 0208 	add.w	r2, r3, #8
 800983a:	f8c8 2000 	str.w	r2, [r8]
 800983e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009846:	9307      	str	r3, [sp, #28]
 8009848:	f8cd 8018 	str.w	r8, [sp, #24]
 800984c:	ee08 0a10 	vmov	s16, r0
 8009850:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009858:	4b9e      	ldr	r3, [pc, #632]	; (8009ad4 <_printf_float+0x2d8>)
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	f7f7 f965 	bl	8000b2c <__aeabi_dcmpun>
 8009862:	bb88      	cbnz	r0, 80098c8 <_printf_float+0xcc>
 8009864:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009868:	4b9a      	ldr	r3, [pc, #616]	; (8009ad4 <_printf_float+0x2d8>)
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	f7f7 f93f 	bl	8000af0 <__aeabi_dcmple>
 8009872:	bb48      	cbnz	r0, 80098c8 <_printf_float+0xcc>
 8009874:	2200      	movs	r2, #0
 8009876:	2300      	movs	r3, #0
 8009878:	4640      	mov	r0, r8
 800987a:	4649      	mov	r1, r9
 800987c:	f7f7 f92e 	bl	8000adc <__aeabi_dcmplt>
 8009880:	b110      	cbz	r0, 8009888 <_printf_float+0x8c>
 8009882:	232d      	movs	r3, #45	; 0x2d
 8009884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009888:	4a93      	ldr	r2, [pc, #588]	; (8009ad8 <_printf_float+0x2dc>)
 800988a:	4b94      	ldr	r3, [pc, #592]	; (8009adc <_printf_float+0x2e0>)
 800988c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009890:	bf94      	ite	ls
 8009892:	4690      	movls	r8, r2
 8009894:	4698      	movhi	r8, r3
 8009896:	2303      	movs	r3, #3
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	f023 0304 	bic.w	r3, r3, #4
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	f04f 0900 	mov.w	r9, #0
 80098a6:	9700      	str	r7, [sp, #0]
 80098a8:	4633      	mov	r3, r6
 80098aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80098ac:	4621      	mov	r1, r4
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f9da 	bl	8009c68 <_printf_common>
 80098b4:	3001      	adds	r0, #1
 80098b6:	f040 8090 	bne.w	80099da <_printf_float+0x1de>
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295
 80098be:	b00d      	add	sp, #52	; 0x34
 80098c0:	ecbd 8b02 	vpop	{d8}
 80098c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c8:	4642      	mov	r2, r8
 80098ca:	464b      	mov	r3, r9
 80098cc:	4640      	mov	r0, r8
 80098ce:	4649      	mov	r1, r9
 80098d0:	f7f7 f92c 	bl	8000b2c <__aeabi_dcmpun>
 80098d4:	b140      	cbz	r0, 80098e8 <_printf_float+0xec>
 80098d6:	464b      	mov	r3, r9
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbc      	itt	lt
 80098dc:	232d      	movlt	r3, #45	; 0x2d
 80098de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098e2:	4a7f      	ldr	r2, [pc, #508]	; (8009ae0 <_printf_float+0x2e4>)
 80098e4:	4b7f      	ldr	r3, [pc, #508]	; (8009ae4 <_printf_float+0x2e8>)
 80098e6:	e7d1      	b.n	800988c <_printf_float+0x90>
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098ee:	9206      	str	r2, [sp, #24]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	d13f      	bne.n	8009974 <_printf_float+0x178>
 80098f4:	2306      	movs	r3, #6
 80098f6:	6063      	str	r3, [r4, #4]
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	6861      	ldr	r1, [r4, #4]
 80098fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009900:	2300      	movs	r3, #0
 8009902:	9303      	str	r3, [sp, #12]
 8009904:	ab0a      	add	r3, sp, #40	; 0x28
 8009906:	e9cd b301 	strd	fp, r3, [sp, #4]
 800990a:	ab09      	add	r3, sp, #36	; 0x24
 800990c:	ec49 8b10 	vmov	d0, r8, r9
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	6022      	str	r2, [r4, #0]
 8009914:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009918:	4628      	mov	r0, r5
 800991a:	f7ff fecf 	bl	80096bc <__cvt>
 800991e:	9b06      	ldr	r3, [sp, #24]
 8009920:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009922:	2b47      	cmp	r3, #71	; 0x47
 8009924:	4680      	mov	r8, r0
 8009926:	d108      	bne.n	800993a <_printf_float+0x13e>
 8009928:	1cc8      	adds	r0, r1, #3
 800992a:	db02      	blt.n	8009932 <_printf_float+0x136>
 800992c:	6863      	ldr	r3, [r4, #4]
 800992e:	4299      	cmp	r1, r3
 8009930:	dd41      	ble.n	80099b6 <_printf_float+0x1ba>
 8009932:	f1ab 0302 	sub.w	r3, fp, #2
 8009936:	fa5f fb83 	uxtb.w	fp, r3
 800993a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800993e:	d820      	bhi.n	8009982 <_printf_float+0x186>
 8009940:	3901      	subs	r1, #1
 8009942:	465a      	mov	r2, fp
 8009944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009948:	9109      	str	r1, [sp, #36]	; 0x24
 800994a:	f7ff ff19 	bl	8009780 <__exponent>
 800994e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009950:	1813      	adds	r3, r2, r0
 8009952:	2a01      	cmp	r2, #1
 8009954:	4681      	mov	r9, r0
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	dc02      	bgt.n	8009960 <_printf_float+0x164>
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	07d2      	lsls	r2, r2, #31
 800995e:	d501      	bpl.n	8009964 <_printf_float+0x168>
 8009960:	3301      	adds	r3, #1
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009968:	2b00      	cmp	r3, #0
 800996a:	d09c      	beq.n	80098a6 <_printf_float+0xaa>
 800996c:	232d      	movs	r3, #45	; 0x2d
 800996e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009972:	e798      	b.n	80098a6 <_printf_float+0xaa>
 8009974:	9a06      	ldr	r2, [sp, #24]
 8009976:	2a47      	cmp	r2, #71	; 0x47
 8009978:	d1be      	bne.n	80098f8 <_printf_float+0xfc>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1bc      	bne.n	80098f8 <_printf_float+0xfc>
 800997e:	2301      	movs	r3, #1
 8009980:	e7b9      	b.n	80098f6 <_printf_float+0xfa>
 8009982:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009986:	d118      	bne.n	80099ba <_printf_float+0x1be>
 8009988:	2900      	cmp	r1, #0
 800998a:	6863      	ldr	r3, [r4, #4]
 800998c:	dd0b      	ble.n	80099a6 <_printf_float+0x1aa>
 800998e:	6121      	str	r1, [r4, #16]
 8009990:	b913      	cbnz	r3, 8009998 <_printf_float+0x19c>
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	07d0      	lsls	r0, r2, #31
 8009996:	d502      	bpl.n	800999e <_printf_float+0x1a2>
 8009998:	3301      	adds	r3, #1
 800999a:	440b      	add	r3, r1
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	65a1      	str	r1, [r4, #88]	; 0x58
 80099a0:	f04f 0900 	mov.w	r9, #0
 80099a4:	e7de      	b.n	8009964 <_printf_float+0x168>
 80099a6:	b913      	cbnz	r3, 80099ae <_printf_float+0x1b2>
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	07d2      	lsls	r2, r2, #31
 80099ac:	d501      	bpl.n	80099b2 <_printf_float+0x1b6>
 80099ae:	3302      	adds	r3, #2
 80099b0:	e7f4      	b.n	800999c <_printf_float+0x1a0>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e7f2      	b.n	800999c <_printf_float+0x1a0>
 80099b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099bc:	4299      	cmp	r1, r3
 80099be:	db05      	blt.n	80099cc <_printf_float+0x1d0>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	6121      	str	r1, [r4, #16]
 80099c4:	07d8      	lsls	r0, r3, #31
 80099c6:	d5ea      	bpl.n	800999e <_printf_float+0x1a2>
 80099c8:	1c4b      	adds	r3, r1, #1
 80099ca:	e7e7      	b.n	800999c <_printf_float+0x1a0>
 80099cc:	2900      	cmp	r1, #0
 80099ce:	bfd4      	ite	le
 80099d0:	f1c1 0202 	rsble	r2, r1, #2
 80099d4:	2201      	movgt	r2, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	e7e0      	b.n	800999c <_printf_float+0x1a0>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	055a      	lsls	r2, r3, #21
 80099de:	d407      	bmi.n	80099f0 <_printf_float+0x1f4>
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	4642      	mov	r2, r8
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	d12c      	bne.n	8009a48 <_printf_float+0x24c>
 80099ee:	e764      	b.n	80098ba <_printf_float+0xbe>
 80099f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099f4:	f240 80e0 	bls.w	8009bb8 <_printf_float+0x3bc>
 80099f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	f7f7 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d034      	beq.n	8009a72 <_printf_float+0x276>
 8009a08:	4a37      	ldr	r2, [pc, #220]	; (8009ae8 <_printf_float+0x2ec>)
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b8      	blx	r7
 8009a12:	3001      	adds	r0, #1
 8009a14:	f43f af51 	beq.w	80098ba <_printf_float+0xbe>
 8009a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	db02      	blt.n	8009a26 <_printf_float+0x22a>
 8009a20:	6823      	ldr	r3, [r4, #0]
 8009a22:	07d8      	lsls	r0, r3, #31
 8009a24:	d510      	bpl.n	8009a48 <_printf_float+0x24c>
 8009a26:	ee18 3a10 	vmov	r3, s16
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4628      	mov	r0, r5
 8009a30:	47b8      	blx	r7
 8009a32:	3001      	adds	r0, #1
 8009a34:	f43f af41 	beq.w	80098ba <_printf_float+0xbe>
 8009a38:	f04f 0800 	mov.w	r8, #0
 8009a3c:	f104 091a 	add.w	r9, r4, #26
 8009a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a42:	3b01      	subs	r3, #1
 8009a44:	4543      	cmp	r3, r8
 8009a46:	dc09      	bgt.n	8009a5c <_printf_float+0x260>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	079b      	lsls	r3, r3, #30
 8009a4c:	f100 8107 	bmi.w	8009c5e <_printf_float+0x462>
 8009a50:	68e0      	ldr	r0, [r4, #12]
 8009a52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a54:	4298      	cmp	r0, r3
 8009a56:	bfb8      	it	lt
 8009a58:	4618      	movlt	r0, r3
 8009a5a:	e730      	b.n	80098be <_printf_float+0xc2>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	464a      	mov	r2, r9
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af27 	beq.w	80098ba <_printf_float+0xbe>
 8009a6c:	f108 0801 	add.w	r8, r8, #1
 8009a70:	e7e6      	b.n	8009a40 <_printf_float+0x244>
 8009a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc39      	bgt.n	8009aec <_printf_float+0x2f0>
 8009a78:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <_printf_float+0x2ec>)
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	f43f af19 	beq.w	80098ba <_printf_float+0xbe>
 8009a88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	d102      	bne.n	8009a96 <_printf_float+0x29a>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	07d9      	lsls	r1, r3, #31
 8009a94:	d5d8      	bpl.n	8009a48 <_printf_float+0x24c>
 8009a96:	ee18 3a10 	vmov	r3, s16
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f af09 	beq.w	80098ba <_printf_float+0xbe>
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	f104 0a1a 	add.w	sl, r4, #26
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	425b      	negs	r3, r3
 8009ab4:	454b      	cmp	r3, r9
 8009ab6:	dc01      	bgt.n	8009abc <_printf_float+0x2c0>
 8009ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aba:	e792      	b.n	80099e2 <_printf_float+0x1e6>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f aef7 	beq.w	80098ba <_printf_float+0xbe>
 8009acc:	f109 0901 	add.w	r9, r9, #1
 8009ad0:	e7ee      	b.n	8009ab0 <_printf_float+0x2b4>
 8009ad2:	bf00      	nop
 8009ad4:	7fefffff 	.word	0x7fefffff
 8009ad8:	0800dcc9 	.word	0x0800dcc9
 8009adc:	0800dccd 	.word	0x0800dccd
 8009ae0:	0800dcd1 	.word	0x0800dcd1
 8009ae4:	0800dcd5 	.word	0x0800dcd5
 8009ae8:	0800df73 	.word	0x0800df73
 8009aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009af0:	429a      	cmp	r2, r3
 8009af2:	bfa8      	it	ge
 8009af4:	461a      	movge	r2, r3
 8009af6:	2a00      	cmp	r2, #0
 8009af8:	4691      	mov	r9, r2
 8009afa:	dc37      	bgt.n	8009b6c <_printf_float+0x370>
 8009afc:	f04f 0b00 	mov.w	fp, #0
 8009b00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b04:	f104 021a 	add.w	r2, r4, #26
 8009b08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	eba3 0309 	sub.w	r3, r3, r9
 8009b10:	455b      	cmp	r3, fp
 8009b12:	dc33      	bgt.n	8009b7c <_printf_float+0x380>
 8009b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	db3b      	blt.n	8009b94 <_printf_float+0x398>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07da      	lsls	r2, r3, #31
 8009b20:	d438      	bmi.n	8009b94 <_printf_float+0x398>
 8009b22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b26:	eba2 0903 	sub.w	r9, r2, r3
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	1ad2      	subs	r2, r2, r3
 8009b2e:	4591      	cmp	r9, r2
 8009b30:	bfa8      	it	ge
 8009b32:	4691      	movge	r9, r2
 8009b34:	f1b9 0f00 	cmp.w	r9, #0
 8009b38:	dc35      	bgt.n	8009ba6 <_printf_float+0x3aa>
 8009b3a:	f04f 0800 	mov.w	r8, #0
 8009b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b42:	f104 0a1a 	add.w	sl, r4, #26
 8009b46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b4a:	1a9b      	subs	r3, r3, r2
 8009b4c:	eba3 0309 	sub.w	r3, r3, r9
 8009b50:	4543      	cmp	r3, r8
 8009b52:	f77f af79 	ble.w	8009a48 <_printf_float+0x24c>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	f43f aeaa 	beq.w	80098ba <_printf_float+0xbe>
 8009b66:	f108 0801 	add.w	r8, r8, #1
 8009b6a:	e7ec      	b.n	8009b46 <_printf_float+0x34a>
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4642      	mov	r2, r8
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	d1c0      	bne.n	8009afc <_printf_float+0x300>
 8009b7a:	e69e      	b.n	80098ba <_printf_float+0xbe>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4628      	mov	r0, r5
 8009b82:	9205      	str	r2, [sp, #20]
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	f43f ae97 	beq.w	80098ba <_printf_float+0xbe>
 8009b8c:	9a05      	ldr	r2, [sp, #20]
 8009b8e:	f10b 0b01 	add.w	fp, fp, #1
 8009b92:	e7b9      	b.n	8009b08 <_printf_float+0x30c>
 8009b94:	ee18 3a10 	vmov	r3, s16
 8009b98:	4652      	mov	r2, sl
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1be      	bne.n	8009b22 <_printf_float+0x326>
 8009ba4:	e689      	b.n	80098ba <_printf_float+0xbe>
 8009ba6:	9a05      	ldr	r2, [sp, #20]
 8009ba8:	464b      	mov	r3, r9
 8009baa:	4442      	add	r2, r8
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d1c1      	bne.n	8009b3a <_printf_float+0x33e>
 8009bb6:	e680      	b.n	80098ba <_printf_float+0xbe>
 8009bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	dc01      	bgt.n	8009bc2 <_printf_float+0x3c6>
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d53a      	bpl.n	8009c38 <_printf_float+0x43c>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4642      	mov	r2, r8
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	4628      	mov	r0, r5
 8009bca:	47b8      	blx	r7
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f43f ae74 	beq.w	80098ba <_printf_float+0xbe>
 8009bd2:	ee18 3a10 	vmov	r3, s16
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f ae6b 	beq.w	80098ba <_printf_float+0xbe>
 8009be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009be8:	2200      	movs	r2, #0
 8009bea:	2300      	movs	r3, #0
 8009bec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009bf0:	f7f6 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bf4:	b9d8      	cbnz	r0, 8009c2e <_printf_float+0x432>
 8009bf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bfa:	f108 0201 	add.w	r2, r8, #1
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	d10e      	bne.n	8009c26 <_printf_float+0x42a>
 8009c08:	e657      	b.n	80098ba <_printf_float+0xbe>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	f43f ae50 	beq.w	80098ba <_printf_float+0xbe>
 8009c1a:	f108 0801 	add.w	r8, r8, #1
 8009c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c20:	3b01      	subs	r3, #1
 8009c22:	4543      	cmp	r3, r8
 8009c24:	dcf1      	bgt.n	8009c0a <_printf_float+0x40e>
 8009c26:	464b      	mov	r3, r9
 8009c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c2c:	e6da      	b.n	80099e4 <_printf_float+0x1e8>
 8009c2e:	f04f 0800 	mov.w	r8, #0
 8009c32:	f104 0a1a 	add.w	sl, r4, #26
 8009c36:	e7f2      	b.n	8009c1e <_printf_float+0x422>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4642      	mov	r2, r8
 8009c3c:	e7df      	b.n	8009bfe <_printf_float+0x402>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	464a      	mov	r2, r9
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f43f ae36 	beq.w	80098ba <_printf_float+0xbe>
 8009c4e:	f108 0801 	add.w	r8, r8, #1
 8009c52:	68e3      	ldr	r3, [r4, #12]
 8009c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c56:	1a5b      	subs	r3, r3, r1
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	dcf0      	bgt.n	8009c3e <_printf_float+0x442>
 8009c5c:	e6f8      	b.n	8009a50 <_printf_float+0x254>
 8009c5e:	f04f 0800 	mov.w	r8, #0
 8009c62:	f104 0919 	add.w	r9, r4, #25
 8009c66:	e7f4      	b.n	8009c52 <_printf_float+0x456>

08009c68 <_printf_common>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	4616      	mov	r6, r2
 8009c6e:	4699      	mov	r9, r3
 8009c70:	688a      	ldr	r2, [r1, #8]
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	bfb8      	it	lt
 8009c7c:	4613      	movlt	r3, r2
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c84:	4607      	mov	r7, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	b10a      	cbz	r2, 8009c8e <_printf_common+0x26>
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	6033      	str	r3, [r6, #0]
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	0699      	lsls	r1, r3, #26
 8009c92:	bf42      	ittt	mi
 8009c94:	6833      	ldrmi	r3, [r6, #0]
 8009c96:	3302      	addmi	r3, #2
 8009c98:	6033      	strmi	r3, [r6, #0]
 8009c9a:	6825      	ldr	r5, [r4, #0]
 8009c9c:	f015 0506 	ands.w	r5, r5, #6
 8009ca0:	d106      	bne.n	8009cb0 <_printf_common+0x48>
 8009ca2:	f104 0a19 	add.w	sl, r4, #25
 8009ca6:	68e3      	ldr	r3, [r4, #12]
 8009ca8:	6832      	ldr	r2, [r6, #0]
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	42ab      	cmp	r3, r5
 8009cae:	dc26      	bgt.n	8009cfe <_printf_common+0x96>
 8009cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009cb4:	1e13      	subs	r3, r2, #0
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	bf18      	it	ne
 8009cba:	2301      	movne	r3, #1
 8009cbc:	0692      	lsls	r2, r2, #26
 8009cbe:	d42b      	bmi.n	8009d18 <_printf_common+0xb0>
 8009cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	47c0      	blx	r8
 8009cca:	3001      	adds	r0, #1
 8009ccc:	d01e      	beq.n	8009d0c <_printf_common+0xa4>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	f003 0306 	and.w	r3, r3, #6
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	bf02      	ittt	eq
 8009cda:	68e5      	ldreq	r5, [r4, #12]
 8009cdc:	6833      	ldreq	r3, [r6, #0]
 8009cde:	1aed      	subeq	r5, r5, r3
 8009ce0:	68a3      	ldr	r3, [r4, #8]
 8009ce2:	bf0c      	ite	eq
 8009ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ce8:	2500      	movne	r5, #0
 8009cea:	4293      	cmp	r3, r2
 8009cec:	bfc4      	itt	gt
 8009cee:	1a9b      	subgt	r3, r3, r2
 8009cf0:	18ed      	addgt	r5, r5, r3
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	341a      	adds	r4, #26
 8009cf6:	42b5      	cmp	r5, r6
 8009cf8:	d11a      	bne.n	8009d30 <_printf_common+0xc8>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e008      	b.n	8009d10 <_printf_common+0xa8>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	4649      	mov	r1, r9
 8009d04:	4638      	mov	r0, r7
 8009d06:	47c0      	blx	r8
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d103      	bne.n	8009d14 <_printf_common+0xac>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d14:	3501      	adds	r5, #1
 8009d16:	e7c6      	b.n	8009ca6 <_printf_common+0x3e>
 8009d18:	18e1      	adds	r1, r4, r3
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	2030      	movs	r0, #48	; 0x30
 8009d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d22:	4422      	add	r2, r4
 8009d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	e7c7      	b.n	8009cc0 <_printf_common+0x58>
 8009d30:	2301      	movs	r3, #1
 8009d32:	4622      	mov	r2, r4
 8009d34:	4649      	mov	r1, r9
 8009d36:	4638      	mov	r0, r7
 8009d38:	47c0      	blx	r8
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d0e6      	beq.n	8009d0c <_printf_common+0xa4>
 8009d3e:	3601      	adds	r6, #1
 8009d40:	e7d9      	b.n	8009cf6 <_printf_common+0x8e>
	...

08009d44 <_printf_i>:
 8009d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d48:	7e0f      	ldrb	r7, [r1, #24]
 8009d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d4c:	2f78      	cmp	r7, #120	; 0x78
 8009d4e:	4691      	mov	r9, r2
 8009d50:	4680      	mov	r8, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	469a      	mov	sl, r3
 8009d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d5a:	d807      	bhi.n	8009d6c <_printf_i+0x28>
 8009d5c:	2f62      	cmp	r7, #98	; 0x62
 8009d5e:	d80a      	bhi.n	8009d76 <_printf_i+0x32>
 8009d60:	2f00      	cmp	r7, #0
 8009d62:	f000 80d4 	beq.w	8009f0e <_printf_i+0x1ca>
 8009d66:	2f58      	cmp	r7, #88	; 0x58
 8009d68:	f000 80c0 	beq.w	8009eec <_printf_i+0x1a8>
 8009d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d74:	e03a      	b.n	8009dec <_printf_i+0xa8>
 8009d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d7a:	2b15      	cmp	r3, #21
 8009d7c:	d8f6      	bhi.n	8009d6c <_printf_i+0x28>
 8009d7e:	a101      	add	r1, pc, #4	; (adr r1, 8009d84 <_printf_i+0x40>)
 8009d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d84:	08009ddd 	.word	0x08009ddd
 8009d88:	08009df1 	.word	0x08009df1
 8009d8c:	08009d6d 	.word	0x08009d6d
 8009d90:	08009d6d 	.word	0x08009d6d
 8009d94:	08009d6d 	.word	0x08009d6d
 8009d98:	08009d6d 	.word	0x08009d6d
 8009d9c:	08009df1 	.word	0x08009df1
 8009da0:	08009d6d 	.word	0x08009d6d
 8009da4:	08009d6d 	.word	0x08009d6d
 8009da8:	08009d6d 	.word	0x08009d6d
 8009dac:	08009d6d 	.word	0x08009d6d
 8009db0:	08009ef5 	.word	0x08009ef5
 8009db4:	08009e1d 	.word	0x08009e1d
 8009db8:	08009eaf 	.word	0x08009eaf
 8009dbc:	08009d6d 	.word	0x08009d6d
 8009dc0:	08009d6d 	.word	0x08009d6d
 8009dc4:	08009f17 	.word	0x08009f17
 8009dc8:	08009d6d 	.word	0x08009d6d
 8009dcc:	08009e1d 	.word	0x08009e1d
 8009dd0:	08009d6d 	.word	0x08009d6d
 8009dd4:	08009d6d 	.word	0x08009d6d
 8009dd8:	08009eb7 	.word	0x08009eb7
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	1d1a      	adds	r2, r3, #4
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	602a      	str	r2, [r5, #0]
 8009de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dec:	2301      	movs	r3, #1
 8009dee:	e09f      	b.n	8009f30 <_printf_i+0x1ec>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	0607      	lsls	r7, r0, #24
 8009df6:	f103 0104 	add.w	r1, r3, #4
 8009dfa:	6029      	str	r1, [r5, #0]
 8009dfc:	d501      	bpl.n	8009e02 <_printf_i+0xbe>
 8009dfe:	681e      	ldr	r6, [r3, #0]
 8009e00:	e003      	b.n	8009e0a <_printf_i+0xc6>
 8009e02:	0646      	lsls	r6, r0, #25
 8009e04:	d5fb      	bpl.n	8009dfe <_printf_i+0xba>
 8009e06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	da03      	bge.n	8009e16 <_printf_i+0xd2>
 8009e0e:	232d      	movs	r3, #45	; 0x2d
 8009e10:	4276      	negs	r6, r6
 8009e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e16:	485a      	ldr	r0, [pc, #360]	; (8009f80 <_printf_i+0x23c>)
 8009e18:	230a      	movs	r3, #10
 8009e1a:	e012      	b.n	8009e42 <_printf_i+0xfe>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	6820      	ldr	r0, [r4, #0]
 8009e20:	1d19      	adds	r1, r3, #4
 8009e22:	6029      	str	r1, [r5, #0]
 8009e24:	0605      	lsls	r5, r0, #24
 8009e26:	d501      	bpl.n	8009e2c <_printf_i+0xe8>
 8009e28:	681e      	ldr	r6, [r3, #0]
 8009e2a:	e002      	b.n	8009e32 <_printf_i+0xee>
 8009e2c:	0641      	lsls	r1, r0, #25
 8009e2e:	d5fb      	bpl.n	8009e28 <_printf_i+0xe4>
 8009e30:	881e      	ldrh	r6, [r3, #0]
 8009e32:	4853      	ldr	r0, [pc, #332]	; (8009f80 <_printf_i+0x23c>)
 8009e34:	2f6f      	cmp	r7, #111	; 0x6f
 8009e36:	bf0c      	ite	eq
 8009e38:	2308      	moveq	r3, #8
 8009e3a:	230a      	movne	r3, #10
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e42:	6865      	ldr	r5, [r4, #4]
 8009e44:	60a5      	str	r5, [r4, #8]
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	bfa2      	ittt	ge
 8009e4a:	6821      	ldrge	r1, [r4, #0]
 8009e4c:	f021 0104 	bicge.w	r1, r1, #4
 8009e50:	6021      	strge	r1, [r4, #0]
 8009e52:	b90e      	cbnz	r6, 8009e58 <_printf_i+0x114>
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d04b      	beq.n	8009ef0 <_printf_i+0x1ac>
 8009e58:	4615      	mov	r5, r2
 8009e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009e62:	5dc7      	ldrb	r7, [r0, r7]
 8009e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e68:	4637      	mov	r7, r6
 8009e6a:	42bb      	cmp	r3, r7
 8009e6c:	460e      	mov	r6, r1
 8009e6e:	d9f4      	bls.n	8009e5a <_printf_i+0x116>
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d10b      	bne.n	8009e8c <_printf_i+0x148>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	07de      	lsls	r6, r3, #31
 8009e78:	d508      	bpl.n	8009e8c <_printf_i+0x148>
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	6861      	ldr	r1, [r4, #4]
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	bfde      	ittt	le
 8009e82:	2330      	movle	r3, #48	; 0x30
 8009e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e8c:	1b52      	subs	r2, r2, r5
 8009e8e:	6122      	str	r2, [r4, #16]
 8009e90:	f8cd a000 	str.w	sl, [sp]
 8009e94:	464b      	mov	r3, r9
 8009e96:	aa03      	add	r2, sp, #12
 8009e98:	4621      	mov	r1, r4
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f7ff fee4 	bl	8009c68 <_printf_common>
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d14a      	bne.n	8009f3a <_printf_i+0x1f6>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	b004      	add	sp, #16
 8009eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	f043 0320 	orr.w	r3, r3, #32
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	4833      	ldr	r0, [pc, #204]	; (8009f84 <_printf_i+0x240>)
 8009eb8:	2778      	movs	r7, #120	; 0x78
 8009eba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	6829      	ldr	r1, [r5, #0]
 8009ec2:	061f      	lsls	r7, r3, #24
 8009ec4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ec8:	d402      	bmi.n	8009ed0 <_printf_i+0x18c>
 8009eca:	065f      	lsls	r7, r3, #25
 8009ecc:	bf48      	it	mi
 8009ece:	b2b6      	uxthmi	r6, r6
 8009ed0:	07df      	lsls	r7, r3, #31
 8009ed2:	bf48      	it	mi
 8009ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ed8:	6029      	str	r1, [r5, #0]
 8009eda:	bf48      	it	mi
 8009edc:	6023      	strmi	r3, [r4, #0]
 8009ede:	b91e      	cbnz	r6, 8009ee8 <_printf_i+0x1a4>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	f023 0320 	bic.w	r3, r3, #32
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	2310      	movs	r3, #16
 8009eea:	e7a7      	b.n	8009e3c <_printf_i+0xf8>
 8009eec:	4824      	ldr	r0, [pc, #144]	; (8009f80 <_printf_i+0x23c>)
 8009eee:	e7e4      	b.n	8009eba <_printf_i+0x176>
 8009ef0:	4615      	mov	r5, r2
 8009ef2:	e7bd      	b.n	8009e70 <_printf_i+0x12c>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	6826      	ldr	r6, [r4, #0]
 8009ef8:	6961      	ldr	r1, [r4, #20]
 8009efa:	1d18      	adds	r0, r3, #4
 8009efc:	6028      	str	r0, [r5, #0]
 8009efe:	0635      	lsls	r5, r6, #24
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	d501      	bpl.n	8009f08 <_printf_i+0x1c4>
 8009f04:	6019      	str	r1, [r3, #0]
 8009f06:	e002      	b.n	8009f0e <_printf_i+0x1ca>
 8009f08:	0670      	lsls	r0, r6, #25
 8009f0a:	d5fb      	bpl.n	8009f04 <_printf_i+0x1c0>
 8009f0c:	8019      	strh	r1, [r3, #0]
 8009f0e:	2300      	movs	r3, #0
 8009f10:	6123      	str	r3, [r4, #16]
 8009f12:	4615      	mov	r5, r2
 8009f14:	e7bc      	b.n	8009e90 <_printf_i+0x14c>
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	1d1a      	adds	r2, r3, #4
 8009f1a:	602a      	str	r2, [r5, #0]
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	6862      	ldr	r2, [r4, #4]
 8009f20:	2100      	movs	r1, #0
 8009f22:	4628      	mov	r0, r5
 8009f24:	f7f6 f954 	bl	80001d0 <memchr>
 8009f28:	b108      	cbz	r0, 8009f2e <_printf_i+0x1ea>
 8009f2a:	1b40      	subs	r0, r0, r5
 8009f2c:	6060      	str	r0, [r4, #4]
 8009f2e:	6863      	ldr	r3, [r4, #4]
 8009f30:	6123      	str	r3, [r4, #16]
 8009f32:	2300      	movs	r3, #0
 8009f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f38:	e7aa      	b.n	8009e90 <_printf_i+0x14c>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	47d0      	blx	sl
 8009f44:	3001      	adds	r0, #1
 8009f46:	d0ad      	beq.n	8009ea4 <_printf_i+0x160>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	079b      	lsls	r3, r3, #30
 8009f4c:	d413      	bmi.n	8009f76 <_printf_i+0x232>
 8009f4e:	68e0      	ldr	r0, [r4, #12]
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	4298      	cmp	r0, r3
 8009f54:	bfb8      	it	lt
 8009f56:	4618      	movlt	r0, r3
 8009f58:	e7a6      	b.n	8009ea8 <_printf_i+0x164>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4640      	mov	r0, r8
 8009f62:	47d0      	blx	sl
 8009f64:	3001      	adds	r0, #1
 8009f66:	d09d      	beq.n	8009ea4 <_printf_i+0x160>
 8009f68:	3501      	adds	r5, #1
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	9903      	ldr	r1, [sp, #12]
 8009f6e:	1a5b      	subs	r3, r3, r1
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dcf2      	bgt.n	8009f5a <_printf_i+0x216>
 8009f74:	e7eb      	b.n	8009f4e <_printf_i+0x20a>
 8009f76:	2500      	movs	r5, #0
 8009f78:	f104 0619 	add.w	r6, r4, #25
 8009f7c:	e7f5      	b.n	8009f6a <_printf_i+0x226>
 8009f7e:	bf00      	nop
 8009f80:	0800dcd9 	.word	0x0800dcd9
 8009f84:	0800dcea 	.word	0x0800dcea

08009f88 <_scanf_float>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b087      	sub	sp, #28
 8009f8e:	4617      	mov	r7, r2
 8009f90:	9303      	str	r3, [sp, #12]
 8009f92:	688b      	ldr	r3, [r1, #8]
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f9a:	bf83      	ittte	hi
 8009f9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009fa0:	195b      	addhi	r3, r3, r5
 8009fa2:	9302      	strhi	r3, [sp, #8]
 8009fa4:	2300      	movls	r3, #0
 8009fa6:	bf86      	itte	hi
 8009fa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fac:	608b      	strhi	r3, [r1, #8]
 8009fae:	9302      	strls	r3, [sp, #8]
 8009fb0:	680b      	ldr	r3, [r1, #0]
 8009fb2:	468b      	mov	fp, r1
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fba:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	465e      	mov	r6, fp
 8009fc8:	46aa      	mov	sl, r5
 8009fca:	46a9      	mov	r9, r5
 8009fcc:	9501      	str	r5, [sp, #4]
 8009fce:	68a2      	ldr	r2, [r4, #8]
 8009fd0:	b152      	cbz	r2, 8009fe8 <_scanf_float+0x60>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b4e      	cmp	r3, #78	; 0x4e
 8009fd8:	d864      	bhi.n	800a0a4 <_scanf_float+0x11c>
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	d83c      	bhi.n	800a058 <_scanf_float+0xd0>
 8009fde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009fe2:	b2c8      	uxtb	r0, r1
 8009fe4:	280e      	cmp	r0, #14
 8009fe6:	d93a      	bls.n	800a05e <_scanf_float+0xd6>
 8009fe8:	f1b9 0f00 	cmp.w	r9, #0
 8009fec:	d003      	beq.n	8009ff6 <_scanf_float+0x6e>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ffa:	f1ba 0f01 	cmp.w	sl, #1
 8009ffe:	f200 8113 	bhi.w	800a228 <_scanf_float+0x2a0>
 800a002:	455e      	cmp	r6, fp
 800a004:	f200 8105 	bhi.w	800a212 <_scanf_float+0x28a>
 800a008:	2501      	movs	r5, #1
 800a00a:	4628      	mov	r0, r5
 800a00c:	b007      	add	sp, #28
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a016:	2a0d      	cmp	r2, #13
 800a018:	d8e6      	bhi.n	8009fe8 <_scanf_float+0x60>
 800a01a:	a101      	add	r1, pc, #4	; (adr r1, 800a020 <_scanf_float+0x98>)
 800a01c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a020:	0800a15f 	.word	0x0800a15f
 800a024:	08009fe9 	.word	0x08009fe9
 800a028:	08009fe9 	.word	0x08009fe9
 800a02c:	08009fe9 	.word	0x08009fe9
 800a030:	0800a1bf 	.word	0x0800a1bf
 800a034:	0800a197 	.word	0x0800a197
 800a038:	08009fe9 	.word	0x08009fe9
 800a03c:	08009fe9 	.word	0x08009fe9
 800a040:	0800a16d 	.word	0x0800a16d
 800a044:	08009fe9 	.word	0x08009fe9
 800a048:	08009fe9 	.word	0x08009fe9
 800a04c:	08009fe9 	.word	0x08009fe9
 800a050:	08009fe9 	.word	0x08009fe9
 800a054:	0800a125 	.word	0x0800a125
 800a058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a05c:	e7db      	b.n	800a016 <_scanf_float+0x8e>
 800a05e:	290e      	cmp	r1, #14
 800a060:	d8c2      	bhi.n	8009fe8 <_scanf_float+0x60>
 800a062:	a001      	add	r0, pc, #4	; (adr r0, 800a068 <_scanf_float+0xe0>)
 800a064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a068:	0800a117 	.word	0x0800a117
 800a06c:	08009fe9 	.word	0x08009fe9
 800a070:	0800a117 	.word	0x0800a117
 800a074:	0800a1ab 	.word	0x0800a1ab
 800a078:	08009fe9 	.word	0x08009fe9
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a101 	.word	0x0800a101
 800a090:	0800a101 	.word	0x0800a101
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	2b6e      	cmp	r3, #110	; 0x6e
 800a0a6:	d809      	bhi.n	800a0bc <_scanf_float+0x134>
 800a0a8:	2b60      	cmp	r3, #96	; 0x60
 800a0aa:	d8b2      	bhi.n	800a012 <_scanf_float+0x8a>
 800a0ac:	2b54      	cmp	r3, #84	; 0x54
 800a0ae:	d077      	beq.n	800a1a0 <_scanf_float+0x218>
 800a0b0:	2b59      	cmp	r3, #89	; 0x59
 800a0b2:	d199      	bne.n	8009fe8 <_scanf_float+0x60>
 800a0b4:	2d07      	cmp	r5, #7
 800a0b6:	d197      	bne.n	8009fe8 <_scanf_float+0x60>
 800a0b8:	2508      	movs	r5, #8
 800a0ba:	e029      	b.n	800a110 <_scanf_float+0x188>
 800a0bc:	2b74      	cmp	r3, #116	; 0x74
 800a0be:	d06f      	beq.n	800a1a0 <_scanf_float+0x218>
 800a0c0:	2b79      	cmp	r3, #121	; 0x79
 800a0c2:	e7f6      	b.n	800a0b2 <_scanf_float+0x12a>
 800a0c4:	6821      	ldr	r1, [r4, #0]
 800a0c6:	05c8      	lsls	r0, r1, #23
 800a0c8:	d51a      	bpl.n	800a100 <_scanf_float+0x178>
 800a0ca:	9b02      	ldr	r3, [sp, #8]
 800a0cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0d0:	6021      	str	r1, [r4, #0]
 800a0d2:	f109 0901 	add.w	r9, r9, #1
 800a0d6:	b11b      	cbz	r3, 800a0e0 <_scanf_float+0x158>
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	3201      	adds	r2, #1
 800a0dc:	9302      	str	r3, [sp, #8]
 800a0de:	60a2      	str	r2, [r4, #8]
 800a0e0:	68a3      	ldr	r3, [r4, #8]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	6123      	str	r3, [r4, #16]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	f340 8084 	ble.w	800a200 <_scanf_float+0x278>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	603b      	str	r3, [r7, #0]
 800a0fe:	e766      	b.n	8009fce <_scanf_float+0x46>
 800a100:	eb1a 0f05 	cmn.w	sl, r5
 800a104:	f47f af70 	bne.w	8009fe8 <_scanf_float+0x60>
 800a108:	6822      	ldr	r2, [r4, #0]
 800a10a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a10e:	6022      	str	r2, [r4, #0]
 800a110:	f806 3b01 	strb.w	r3, [r6], #1
 800a114:	e7e4      	b.n	800a0e0 <_scanf_float+0x158>
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	0610      	lsls	r0, r2, #24
 800a11a:	f57f af65 	bpl.w	8009fe8 <_scanf_float+0x60>
 800a11e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a122:	e7f4      	b.n	800a10e <_scanf_float+0x186>
 800a124:	f1ba 0f00 	cmp.w	sl, #0
 800a128:	d10e      	bne.n	800a148 <_scanf_float+0x1c0>
 800a12a:	f1b9 0f00 	cmp.w	r9, #0
 800a12e:	d10e      	bne.n	800a14e <_scanf_float+0x1c6>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a136:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a13a:	d108      	bne.n	800a14e <_scanf_float+0x1c6>
 800a13c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a140:	6022      	str	r2, [r4, #0]
 800a142:	f04f 0a01 	mov.w	sl, #1
 800a146:	e7e3      	b.n	800a110 <_scanf_float+0x188>
 800a148:	f1ba 0f02 	cmp.w	sl, #2
 800a14c:	d055      	beq.n	800a1fa <_scanf_float+0x272>
 800a14e:	2d01      	cmp	r5, #1
 800a150:	d002      	beq.n	800a158 <_scanf_float+0x1d0>
 800a152:	2d04      	cmp	r5, #4
 800a154:	f47f af48 	bne.w	8009fe8 <_scanf_float+0x60>
 800a158:	3501      	adds	r5, #1
 800a15a:	b2ed      	uxtb	r5, r5
 800a15c:	e7d8      	b.n	800a110 <_scanf_float+0x188>
 800a15e:	f1ba 0f01 	cmp.w	sl, #1
 800a162:	f47f af41 	bne.w	8009fe8 <_scanf_float+0x60>
 800a166:	f04f 0a02 	mov.w	sl, #2
 800a16a:	e7d1      	b.n	800a110 <_scanf_float+0x188>
 800a16c:	b97d      	cbnz	r5, 800a18e <_scanf_float+0x206>
 800a16e:	f1b9 0f00 	cmp.w	r9, #0
 800a172:	f47f af3c 	bne.w	8009fee <_scanf_float+0x66>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a17c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a180:	f47f af39 	bne.w	8009ff6 <_scanf_float+0x6e>
 800a184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a188:	6022      	str	r2, [r4, #0]
 800a18a:	2501      	movs	r5, #1
 800a18c:	e7c0      	b.n	800a110 <_scanf_float+0x188>
 800a18e:	2d03      	cmp	r5, #3
 800a190:	d0e2      	beq.n	800a158 <_scanf_float+0x1d0>
 800a192:	2d05      	cmp	r5, #5
 800a194:	e7de      	b.n	800a154 <_scanf_float+0x1cc>
 800a196:	2d02      	cmp	r5, #2
 800a198:	f47f af26 	bne.w	8009fe8 <_scanf_float+0x60>
 800a19c:	2503      	movs	r5, #3
 800a19e:	e7b7      	b.n	800a110 <_scanf_float+0x188>
 800a1a0:	2d06      	cmp	r5, #6
 800a1a2:	f47f af21 	bne.w	8009fe8 <_scanf_float+0x60>
 800a1a6:	2507      	movs	r5, #7
 800a1a8:	e7b2      	b.n	800a110 <_scanf_float+0x188>
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	0591      	lsls	r1, r2, #22
 800a1ae:	f57f af1b 	bpl.w	8009fe8 <_scanf_float+0x60>
 800a1b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a1b6:	6022      	str	r2, [r4, #0]
 800a1b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1bc:	e7a8      	b.n	800a110 <_scanf_float+0x188>
 800a1be:	6822      	ldr	r2, [r4, #0]
 800a1c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1c8:	d006      	beq.n	800a1d8 <_scanf_float+0x250>
 800a1ca:	0550      	lsls	r0, r2, #21
 800a1cc:	f57f af0c 	bpl.w	8009fe8 <_scanf_float+0x60>
 800a1d0:	f1b9 0f00 	cmp.w	r9, #0
 800a1d4:	f43f af0f 	beq.w	8009ff6 <_scanf_float+0x6e>
 800a1d8:	0591      	lsls	r1, r2, #22
 800a1da:	bf58      	it	pl
 800a1dc:	9901      	ldrpl	r1, [sp, #4]
 800a1de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1e2:	bf58      	it	pl
 800a1e4:	eba9 0101 	subpl.w	r1, r9, r1
 800a1e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a1ec:	bf58      	it	pl
 800a1ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1f2:	6022      	str	r2, [r4, #0]
 800a1f4:	f04f 0900 	mov.w	r9, #0
 800a1f8:	e78a      	b.n	800a110 <_scanf_float+0x188>
 800a1fa:	f04f 0a03 	mov.w	sl, #3
 800a1fe:	e787      	b.n	800a110 <_scanf_float+0x188>
 800a200:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a204:	4639      	mov	r1, r7
 800a206:	4640      	mov	r0, r8
 800a208:	4798      	blx	r3
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f43f aedf 	beq.w	8009fce <_scanf_float+0x46>
 800a210:	e6ea      	b.n	8009fe8 <_scanf_float+0x60>
 800a212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a21a:	463a      	mov	r2, r7
 800a21c:	4640      	mov	r0, r8
 800a21e:	4798      	blx	r3
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	3b01      	subs	r3, #1
 800a224:	6123      	str	r3, [r4, #16]
 800a226:	e6ec      	b.n	800a002 <_scanf_float+0x7a>
 800a228:	1e6b      	subs	r3, r5, #1
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d825      	bhi.n	800a27a <_scanf_float+0x2f2>
 800a22e:	2d02      	cmp	r5, #2
 800a230:	d836      	bhi.n	800a2a0 <_scanf_float+0x318>
 800a232:	455e      	cmp	r6, fp
 800a234:	f67f aee8 	bls.w	800a008 <_scanf_float+0x80>
 800a238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a23c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a240:	463a      	mov	r2, r7
 800a242:	4640      	mov	r0, r8
 800a244:	4798      	blx	r3
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	3b01      	subs	r3, #1
 800a24a:	6123      	str	r3, [r4, #16]
 800a24c:	e7f1      	b.n	800a232 <_scanf_float+0x2aa>
 800a24e:	9802      	ldr	r0, [sp, #8]
 800a250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a254:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a258:	9002      	str	r0, [sp, #8]
 800a25a:	463a      	mov	r2, r7
 800a25c:	4640      	mov	r0, r8
 800a25e:	4798      	blx	r3
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	3b01      	subs	r3, #1
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a26a:	fa5f fa8a 	uxtb.w	sl, sl
 800a26e:	f1ba 0f02 	cmp.w	sl, #2
 800a272:	d1ec      	bne.n	800a24e <_scanf_float+0x2c6>
 800a274:	3d03      	subs	r5, #3
 800a276:	b2ed      	uxtb	r5, r5
 800a278:	1b76      	subs	r6, r6, r5
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	05da      	lsls	r2, r3, #23
 800a27e:	d52f      	bpl.n	800a2e0 <_scanf_float+0x358>
 800a280:	055b      	lsls	r3, r3, #21
 800a282:	d510      	bpl.n	800a2a6 <_scanf_float+0x31e>
 800a284:	455e      	cmp	r6, fp
 800a286:	f67f aebf 	bls.w	800a008 <_scanf_float+0x80>
 800a28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a28e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a292:	463a      	mov	r2, r7
 800a294:	4640      	mov	r0, r8
 800a296:	4798      	blx	r3
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	e7f1      	b.n	800a284 <_scanf_float+0x2fc>
 800a2a0:	46aa      	mov	sl, r5
 800a2a2:	9602      	str	r6, [sp, #8]
 800a2a4:	e7df      	b.n	800a266 <_scanf_float+0x2de>
 800a2a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	2965      	cmp	r1, #101	; 0x65
 800a2ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a2b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	d00c      	beq.n	800a2d4 <_scanf_float+0x34c>
 800a2ba:	2945      	cmp	r1, #69	; 0x45
 800a2bc:	d00a      	beq.n	800a2d4 <_scanf_float+0x34c>
 800a2be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2c2:	463a      	mov	r2, r7
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	4798      	blx	r3
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	1eb5      	subs	r5, r6, #2
 800a2d2:	6123      	str	r3, [r4, #16]
 800a2d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4798      	blx	r3
 800a2de:	462e      	mov	r6, r5
 800a2e0:	6825      	ldr	r5, [r4, #0]
 800a2e2:	f015 0510 	ands.w	r5, r5, #16
 800a2e6:	d158      	bne.n	800a39a <_scanf_float+0x412>
 800a2e8:	7035      	strb	r5, [r6, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f4:	d11c      	bne.n	800a330 <_scanf_float+0x3a8>
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	454b      	cmp	r3, r9
 800a2fa:	eba3 0209 	sub.w	r2, r3, r9
 800a2fe:	d124      	bne.n	800a34a <_scanf_float+0x3c2>
 800a300:	2200      	movs	r2, #0
 800a302:	4659      	mov	r1, fp
 800a304:	4640      	mov	r0, r8
 800a306:	f7ff f9d3 	bl	80096b0 <_strtod_r>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	6821      	ldr	r1, [r4, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f011 0f02 	tst.w	r1, #2
 800a314:	ec57 6b10 	vmov	r6, r7, d0
 800a318:	f103 0204 	add.w	r2, r3, #4
 800a31c:	d020      	beq.n	800a360 <_scanf_float+0x3d8>
 800a31e:	9903      	ldr	r1, [sp, #12]
 800a320:	600a      	str	r2, [r1, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	e9c3 6700 	strd	r6, r7, [r3]
 800a328:	68e3      	ldr	r3, [r4, #12]
 800a32a:	3301      	adds	r3, #1
 800a32c:	60e3      	str	r3, [r4, #12]
 800a32e:	e66c      	b.n	800a00a <_scanf_float+0x82>
 800a330:	9b04      	ldr	r3, [sp, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0e4      	beq.n	800a300 <_scanf_float+0x378>
 800a336:	9905      	ldr	r1, [sp, #20]
 800a338:	230a      	movs	r3, #10
 800a33a:	462a      	mov	r2, r5
 800a33c:	3101      	adds	r1, #1
 800a33e:	4640      	mov	r0, r8
 800a340:	f002 fa0e 	bl	800c760 <_strtol_r>
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	9e05      	ldr	r6, [sp, #20]
 800a348:	1ac2      	subs	r2, r0, r3
 800a34a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a34e:	429e      	cmp	r6, r3
 800a350:	bf28      	it	cs
 800a352:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a356:	4912      	ldr	r1, [pc, #72]	; (800a3a0 <_scanf_float+0x418>)
 800a358:	4630      	mov	r0, r6
 800a35a:	f000 f8e7 	bl	800a52c <siprintf>
 800a35e:	e7cf      	b.n	800a300 <_scanf_float+0x378>
 800a360:	f011 0f04 	tst.w	r1, #4
 800a364:	9903      	ldr	r1, [sp, #12]
 800a366:	600a      	str	r2, [r1, #0]
 800a368:	d1db      	bne.n	800a322 <_scanf_float+0x39a>
 800a36a:	f8d3 8000 	ldr.w	r8, [r3]
 800a36e:	ee10 2a10 	vmov	r2, s0
 800a372:	ee10 0a10 	vmov	r0, s0
 800a376:	463b      	mov	r3, r7
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f6 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800a37e:	b128      	cbz	r0, 800a38c <_scanf_float+0x404>
 800a380:	4808      	ldr	r0, [pc, #32]	; (800a3a4 <_scanf_float+0x41c>)
 800a382:	f000 fa7d 	bl	800a880 <nanf>
 800a386:	ed88 0a00 	vstr	s0, [r8]
 800a38a:	e7cd      	b.n	800a328 <_scanf_float+0x3a0>
 800a38c:	4630      	mov	r0, r6
 800a38e:	4639      	mov	r1, r7
 800a390:	f7f6 fc2a 	bl	8000be8 <__aeabi_d2f>
 800a394:	f8c8 0000 	str.w	r0, [r8]
 800a398:	e7c6      	b.n	800a328 <_scanf_float+0x3a0>
 800a39a:	2500      	movs	r5, #0
 800a39c:	e635      	b.n	800a00a <_scanf_float+0x82>
 800a39e:	bf00      	nop
 800a3a0:	0800dcfb 	.word	0x0800dcfb
 800a3a4:	0800dfb3 	.word	0x0800dfb3

0800a3a8 <std>:
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	b510      	push	{r4, lr}
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3b6:	6083      	str	r3, [r0, #8]
 800a3b8:	8181      	strh	r1, [r0, #12]
 800a3ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a3bc:	81c2      	strh	r2, [r0, #14]
 800a3be:	6183      	str	r3, [r0, #24]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	2208      	movs	r2, #8
 800a3c4:	305c      	adds	r0, #92	; 0x5c
 800a3c6:	f000 f942 	bl	800a64e <memset>
 800a3ca:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <std+0x58>)
 800a3cc:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ce:	4b0d      	ldr	r3, [pc, #52]	; (800a404 <std+0x5c>)
 800a3d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	; (800a408 <std+0x60>)
 800a3d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3d6:	4b0d      	ldr	r3, [pc, #52]	; (800a40c <std+0x64>)
 800a3d8:	6323      	str	r3, [r4, #48]	; 0x30
 800a3da:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <std+0x68>)
 800a3dc:	6224      	str	r4, [r4, #32]
 800a3de:	429c      	cmp	r4, r3
 800a3e0:	d006      	beq.n	800a3f0 <std+0x48>
 800a3e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3e6:	4294      	cmp	r4, r2
 800a3e8:	d002      	beq.n	800a3f0 <std+0x48>
 800a3ea:	33d0      	adds	r3, #208	; 0xd0
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	d105      	bne.n	800a3fc <std+0x54>
 800a3f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	f000 ba28 	b.w	800a84c <__retarget_lock_init_recursive>
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	0800a5c5 	.word	0x0800a5c5
 800a404:	0800a5eb 	.word	0x0800a5eb
 800a408:	0800a623 	.word	0x0800a623
 800a40c:	0800a647 	.word	0x0800a647
 800a410:	2000585c 	.word	0x2000585c

0800a414 <stdio_exit_handler>:
 800a414:	4a02      	ldr	r2, [pc, #8]	; (800a420 <stdio_exit_handler+0xc>)
 800a416:	4903      	ldr	r1, [pc, #12]	; (800a424 <stdio_exit_handler+0x10>)
 800a418:	4803      	ldr	r0, [pc, #12]	; (800a428 <stdio_exit_handler+0x14>)
 800a41a:	f000 b869 	b.w	800a4f0 <_fwalk_sglue>
 800a41e:	bf00      	nop
 800a420:	20000014 	.word	0x20000014
 800a424:	0800d17d 	.word	0x0800d17d
 800a428:	2000018c 	.word	0x2000018c

0800a42c <cleanup_stdio>:
 800a42c:	6841      	ldr	r1, [r0, #4]
 800a42e:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <cleanup_stdio+0x34>)
 800a430:	4299      	cmp	r1, r3
 800a432:	b510      	push	{r4, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	d001      	beq.n	800a43c <cleanup_stdio+0x10>
 800a438:	f002 fea0 	bl	800d17c <_fflush_r>
 800a43c:	68a1      	ldr	r1, [r4, #8]
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <cleanup_stdio+0x38>)
 800a440:	4299      	cmp	r1, r3
 800a442:	d002      	beq.n	800a44a <cleanup_stdio+0x1e>
 800a444:	4620      	mov	r0, r4
 800a446:	f002 fe99 	bl	800d17c <_fflush_r>
 800a44a:	68e1      	ldr	r1, [r4, #12]
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <cleanup_stdio+0x3c>)
 800a44e:	4299      	cmp	r1, r3
 800a450:	d004      	beq.n	800a45c <cleanup_stdio+0x30>
 800a452:	4620      	mov	r0, r4
 800a454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a458:	f002 be90 	b.w	800d17c <_fflush_r>
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	bf00      	nop
 800a460:	2000585c 	.word	0x2000585c
 800a464:	200058c4 	.word	0x200058c4
 800a468:	2000592c 	.word	0x2000592c

0800a46c <global_stdio_init.part.0>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <global_stdio_init.part.0+0x30>)
 800a470:	4c0b      	ldr	r4, [pc, #44]	; (800a4a0 <global_stdio_init.part.0+0x34>)
 800a472:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <global_stdio_init.part.0+0x38>)
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	4620      	mov	r0, r4
 800a478:	2200      	movs	r2, #0
 800a47a:	2104      	movs	r1, #4
 800a47c:	f7ff ff94 	bl	800a3a8 <std>
 800a480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a484:	2201      	movs	r2, #1
 800a486:	2109      	movs	r1, #9
 800a488:	f7ff ff8e 	bl	800a3a8 <std>
 800a48c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a490:	2202      	movs	r2, #2
 800a492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a496:	2112      	movs	r1, #18
 800a498:	f7ff bf86 	b.w	800a3a8 <std>
 800a49c:	20005994 	.word	0x20005994
 800a4a0:	2000585c 	.word	0x2000585c
 800a4a4:	0800a415 	.word	0x0800a415

0800a4a8 <__sfp_lock_acquire>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__sfp_lock_acquire+0x8>)
 800a4aa:	f000 b9d0 	b.w	800a84e <__retarget_lock_acquire_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	2000599d 	.word	0x2000599d

0800a4b4 <__sfp_lock_release>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__sfp_lock_release+0x8>)
 800a4b6:	f000 b9cb 	b.w	800a850 <__retarget_lock_release_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	2000599d 	.word	0x2000599d

0800a4c0 <__sinit>:
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	f7ff fff0 	bl	800a4a8 <__sfp_lock_acquire>
 800a4c8:	6a23      	ldr	r3, [r4, #32]
 800a4ca:	b11b      	cbz	r3, 800a4d4 <__sinit+0x14>
 800a4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d0:	f7ff bff0 	b.w	800a4b4 <__sfp_lock_release>
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <__sinit+0x28>)
 800a4d6:	6223      	str	r3, [r4, #32]
 800a4d8:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <__sinit+0x2c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1f5      	bne.n	800a4cc <__sinit+0xc>
 800a4e0:	f7ff ffc4 	bl	800a46c <global_stdio_init.part.0>
 800a4e4:	e7f2      	b.n	800a4cc <__sinit+0xc>
 800a4e6:	bf00      	nop
 800a4e8:	0800a42d 	.word	0x0800a42d
 800a4ec:	20005994 	.word	0x20005994

0800a4f0 <_fwalk_sglue>:
 800a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	4688      	mov	r8, r1
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a500:	f1b9 0901 	subs.w	r9, r9, #1
 800a504:	d505      	bpl.n	800a512 <_fwalk_sglue+0x22>
 800a506:	6824      	ldr	r4, [r4, #0]
 800a508:	2c00      	cmp	r4, #0
 800a50a:	d1f7      	bne.n	800a4fc <_fwalk_sglue+0xc>
 800a50c:	4630      	mov	r0, r6
 800a50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a512:	89ab      	ldrh	r3, [r5, #12]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d907      	bls.n	800a528 <_fwalk_sglue+0x38>
 800a518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a51c:	3301      	adds	r3, #1
 800a51e:	d003      	beq.n	800a528 <_fwalk_sglue+0x38>
 800a520:	4629      	mov	r1, r5
 800a522:	4638      	mov	r0, r7
 800a524:	47c0      	blx	r8
 800a526:	4306      	orrs	r6, r0
 800a528:	3568      	adds	r5, #104	; 0x68
 800a52a:	e7e9      	b.n	800a500 <_fwalk_sglue+0x10>

0800a52c <siprintf>:
 800a52c:	b40e      	push	{r1, r2, r3}
 800a52e:	b500      	push	{lr}
 800a530:	b09c      	sub	sp, #112	; 0x70
 800a532:	ab1d      	add	r3, sp, #116	; 0x74
 800a534:	9002      	str	r0, [sp, #8]
 800a536:	9006      	str	r0, [sp, #24]
 800a538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a53c:	4809      	ldr	r0, [pc, #36]	; (800a564 <siprintf+0x38>)
 800a53e:	9107      	str	r1, [sp, #28]
 800a540:	9104      	str	r1, [sp, #16]
 800a542:	4909      	ldr	r1, [pc, #36]	; (800a568 <siprintf+0x3c>)
 800a544:	f853 2b04 	ldr.w	r2, [r3], #4
 800a548:	9105      	str	r1, [sp, #20]
 800a54a:	6800      	ldr	r0, [r0, #0]
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	a902      	add	r1, sp, #8
 800a550:	f002 f970 	bl	800c834 <_svfiprintf_r>
 800a554:	9b02      	ldr	r3, [sp, #8]
 800a556:	2200      	movs	r2, #0
 800a558:	701a      	strb	r2, [r3, #0]
 800a55a:	b01c      	add	sp, #112	; 0x70
 800a55c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a560:	b003      	add	sp, #12
 800a562:	4770      	bx	lr
 800a564:	200001d8 	.word	0x200001d8
 800a568:	ffff0208 	.word	0xffff0208

0800a56c <siscanf>:
 800a56c:	b40e      	push	{r1, r2, r3}
 800a56e:	b510      	push	{r4, lr}
 800a570:	b09f      	sub	sp, #124	; 0x7c
 800a572:	ac21      	add	r4, sp, #132	; 0x84
 800a574:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a578:	f854 2b04 	ldr.w	r2, [r4], #4
 800a57c:	9201      	str	r2, [sp, #4]
 800a57e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a582:	9004      	str	r0, [sp, #16]
 800a584:	9008      	str	r0, [sp, #32]
 800a586:	f7f5 fe73 	bl	8000270 <strlen>
 800a58a:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <siscanf+0x50>)
 800a58c:	9005      	str	r0, [sp, #20]
 800a58e:	9009      	str	r0, [sp, #36]	; 0x24
 800a590:	930d      	str	r3, [sp, #52]	; 0x34
 800a592:	480b      	ldr	r0, [pc, #44]	; (800a5c0 <siscanf+0x54>)
 800a594:	9a01      	ldr	r2, [sp, #4]
 800a596:	6800      	ldr	r0, [r0, #0]
 800a598:	9403      	str	r4, [sp, #12]
 800a59a:	2300      	movs	r3, #0
 800a59c:	9311      	str	r3, [sp, #68]	; 0x44
 800a59e:	9316      	str	r3, [sp, #88]	; 0x58
 800a5a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a5a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a5a8:	a904      	add	r1, sp, #16
 800a5aa:	4623      	mov	r3, r4
 800a5ac:	f002 fa9a 	bl	800cae4 <__ssvfiscanf_r>
 800a5b0:	b01f      	add	sp, #124	; 0x7c
 800a5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b6:	b003      	add	sp, #12
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	0800a5e7 	.word	0x0800a5e7
 800a5c0:	200001d8 	.word	0x200001d8

0800a5c4 <__sread>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	f000 f8e0 	bl	800a790 <_read_r>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	bfab      	itete	ge
 800a5d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d8:	181b      	addge	r3, r3, r0
 800a5da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5de:	bfac      	ite	ge
 800a5e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5e2:	81a3      	strhlt	r3, [r4, #12]
 800a5e4:	bd10      	pop	{r4, pc}

0800a5e6 <__seofread>:
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	4770      	bx	lr

0800a5ea <__swrite>:
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	461f      	mov	r7, r3
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	05db      	lsls	r3, r3, #23
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	d505      	bpl.n	800a608 <__swrite+0x1e>
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	2302      	movs	r3, #2
 800a602:	2200      	movs	r2, #0
 800a604:	f000 f8b2 	bl	800a76c <_lseek_r>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	4628      	mov	r0, r5
 800a61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	f000 b8d9 	b.w	800a7d4 <_write_r>

0800a622 <__sseek>:
 800a622:	b510      	push	{r4, lr}
 800a624:	460c      	mov	r4, r1
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 f89f 	bl	800a76c <_lseek_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	bf15      	itete	ne
 800a634:	6560      	strne	r0, [r4, #84]	; 0x54
 800a636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a63e:	81a3      	strheq	r3, [r4, #12]
 800a640:	bf18      	it	ne
 800a642:	81a3      	strhne	r3, [r4, #12]
 800a644:	bd10      	pop	{r4, pc}

0800a646 <__sclose>:
 800a646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64a:	f000 b87f 	b.w	800a74c <_close_r>

0800a64e <memset>:
 800a64e:	4402      	add	r2, r0
 800a650:	4603      	mov	r3, r0
 800a652:	4293      	cmp	r3, r2
 800a654:	d100      	bne.n	800a658 <memset+0xa>
 800a656:	4770      	bx	lr
 800a658:	f803 1b01 	strb.w	r1, [r3], #1
 800a65c:	e7f9      	b.n	800a652 <memset+0x4>

0800a65e <strchr>:
 800a65e:	b2c9      	uxtb	r1, r1
 800a660:	4603      	mov	r3, r0
 800a662:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a666:	b11a      	cbz	r2, 800a670 <strchr+0x12>
 800a668:	428a      	cmp	r2, r1
 800a66a:	d1f9      	bne.n	800a660 <strchr+0x2>
 800a66c:	4618      	mov	r0, r3
 800a66e:	4770      	bx	lr
 800a670:	2900      	cmp	r1, #0
 800a672:	bf18      	it	ne
 800a674:	2300      	movne	r3, #0
 800a676:	e7f9      	b.n	800a66c <strchr+0xe>

0800a678 <strncat>:
 800a678:	b530      	push	{r4, r5, lr}
 800a67a:	4604      	mov	r4, r0
 800a67c:	7825      	ldrb	r5, [r4, #0]
 800a67e:	4623      	mov	r3, r4
 800a680:	3401      	adds	r4, #1
 800a682:	2d00      	cmp	r5, #0
 800a684:	d1fa      	bne.n	800a67c <strncat+0x4>
 800a686:	3a01      	subs	r2, #1
 800a688:	d304      	bcc.n	800a694 <strncat+0x1c>
 800a68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a68e:	f803 4b01 	strb.w	r4, [r3], #1
 800a692:	b904      	cbnz	r4, 800a696 <strncat+0x1e>
 800a694:	bd30      	pop	{r4, r5, pc}
 800a696:	2a00      	cmp	r2, #0
 800a698:	d1f5      	bne.n	800a686 <strncat+0xe>
 800a69a:	701a      	strb	r2, [r3, #0]
 800a69c:	e7f3      	b.n	800a686 <strncat+0xe>

0800a69e <strncmp>:
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	b16a      	cbz	r2, 800a6be <strncmp+0x20>
 800a6a2:	3901      	subs	r1, #1
 800a6a4:	1884      	adds	r4, r0, r2
 800a6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d103      	bne.n	800a6ba <strncmp+0x1c>
 800a6b2:	42a0      	cmp	r0, r4
 800a6b4:	d001      	beq.n	800a6ba <strncmp+0x1c>
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1f5      	bne.n	800a6a6 <strncmp+0x8>
 800a6ba:	1ad0      	subs	r0, r2, r3
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	4610      	mov	r0, r2
 800a6c0:	e7fc      	b.n	800a6bc <strncmp+0x1e>

0800a6c2 <__strtok_r>:
 800a6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c4:	b908      	cbnz	r0, 800a6ca <__strtok_r+0x8>
 800a6c6:	6810      	ldr	r0, [r2, #0]
 800a6c8:	b188      	cbz	r0, 800a6ee <__strtok_r+0x2c>
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6d2:	460f      	mov	r7, r1
 800a6d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6d8:	b91e      	cbnz	r6, 800a6e2 <__strtok_r+0x20>
 800a6da:	b965      	cbnz	r5, 800a6f6 <__strtok_r+0x34>
 800a6dc:	6015      	str	r5, [r2, #0]
 800a6de:	4628      	mov	r0, r5
 800a6e0:	e005      	b.n	800a6ee <__strtok_r+0x2c>
 800a6e2:	42b5      	cmp	r5, r6
 800a6e4:	d1f6      	bne.n	800a6d4 <__strtok_r+0x12>
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f0      	bne.n	800a6cc <__strtok_r+0xa>
 800a6ea:	6014      	str	r4, [r2, #0]
 800a6ec:	7003      	strb	r3, [r0, #0]
 800a6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f0:	461c      	mov	r4, r3
 800a6f2:	e00c      	b.n	800a70e <__strtok_r+0x4c>
 800a6f4:	b915      	cbnz	r5, 800a6fc <__strtok_r+0x3a>
 800a6f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6fa:	460e      	mov	r6, r1
 800a6fc:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a700:	42ab      	cmp	r3, r5
 800a702:	d1f7      	bne.n	800a6f4 <__strtok_r+0x32>
 800a704:	2b00      	cmp	r3, #0
 800a706:	d0f3      	beq.n	800a6f0 <__strtok_r+0x2e>
 800a708:	2300      	movs	r3, #0
 800a70a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a70e:	6014      	str	r4, [r2, #0]
 800a710:	e7ed      	b.n	800a6ee <__strtok_r+0x2c>

0800a712 <strtok_r>:
 800a712:	2301      	movs	r3, #1
 800a714:	f7ff bfd5 	b.w	800a6c2 <__strtok_r>

0800a718 <strstr>:
 800a718:	780a      	ldrb	r2, [r1, #0]
 800a71a:	b570      	push	{r4, r5, r6, lr}
 800a71c:	b96a      	cbnz	r2, 800a73a <strstr+0x22>
 800a71e:	bd70      	pop	{r4, r5, r6, pc}
 800a720:	429a      	cmp	r2, r3
 800a722:	d109      	bne.n	800a738 <strstr+0x20>
 800a724:	460c      	mov	r4, r1
 800a726:	4605      	mov	r5, r0
 800a728:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0f6      	beq.n	800a71e <strstr+0x6>
 800a730:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a734:	429e      	cmp	r6, r3
 800a736:	d0f7      	beq.n	800a728 <strstr+0x10>
 800a738:	3001      	adds	r0, #1
 800a73a:	7803      	ldrb	r3, [r0, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1ef      	bne.n	800a720 <strstr+0x8>
 800a740:	4618      	mov	r0, r3
 800a742:	e7ec      	b.n	800a71e <strstr+0x6>

0800a744 <_localeconv_r>:
 800a744:	4800      	ldr	r0, [pc, #0]	; (800a748 <_localeconv_r+0x4>)
 800a746:	4770      	bx	lr
 800a748:	20000110 	.word	0x20000110

0800a74c <_close_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_close_r+0x1c>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	f7f9 f877 	bl	800384a <_close>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_close_r+0x1a>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_close_r+0x1a>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20005998 	.word	0x20005998

0800a76c <_lseek_r>:
 800a76c:	b538      	push	{r3, r4, r5, lr}
 800a76e:	4d07      	ldr	r5, [pc, #28]	; (800a78c <_lseek_r+0x20>)
 800a770:	4604      	mov	r4, r0
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	2200      	movs	r2, #0
 800a778:	602a      	str	r2, [r5, #0]
 800a77a:	461a      	mov	r2, r3
 800a77c:	f7f9 f88c 	bl	8003898 <_lseek>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_lseek_r+0x1e>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_lseek_r+0x1e>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	20005998 	.word	0x20005998

0800a790 <_read_r>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	4d07      	ldr	r5, [pc, #28]	; (800a7b0 <_read_r+0x20>)
 800a794:	4604      	mov	r4, r0
 800a796:	4608      	mov	r0, r1
 800a798:	4611      	mov	r1, r2
 800a79a:	2200      	movs	r2, #0
 800a79c:	602a      	str	r2, [r5, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f7f9 f81a 	bl	80037d8 <_read>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_read_r+0x1e>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_read_r+0x1e>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20005998 	.word	0x20005998

0800a7b4 <_sbrk_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d06      	ldr	r5, [pc, #24]	; (800a7d0 <_sbrk_r+0x1c>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f9 f878 	bl	80038b4 <_sbrk>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_sbrk_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_sbrk_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	20005998 	.word	0x20005998

0800a7d4 <_write_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_write_r+0x20>)
 800a7d8:	4604      	mov	r4, r0
 800a7da:	4608      	mov	r0, r1
 800a7dc:	4611      	mov	r1, r2
 800a7de:	2200      	movs	r2, #0
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7f9 f815 	bl	8003812 <_write>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_write_r+0x1e>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_write_r+0x1e>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20005998 	.word	0x20005998

0800a7f8 <__errno>:
 800a7f8:	4b01      	ldr	r3, [pc, #4]	; (800a800 <__errno+0x8>)
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	200001d8 	.word	0x200001d8

0800a804 <__libc_init_array>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4d0d      	ldr	r5, [pc, #52]	; (800a83c <__libc_init_array+0x38>)
 800a808:	4c0d      	ldr	r4, [pc, #52]	; (800a840 <__libc_init_array+0x3c>)
 800a80a:	1b64      	subs	r4, r4, r5
 800a80c:	10a4      	asrs	r4, r4, #2
 800a80e:	2600      	movs	r6, #0
 800a810:	42a6      	cmp	r6, r4
 800a812:	d109      	bne.n	800a828 <__libc_init_array+0x24>
 800a814:	4d0b      	ldr	r5, [pc, #44]	; (800a844 <__libc_init_array+0x40>)
 800a816:	4c0c      	ldr	r4, [pc, #48]	; (800a848 <__libc_init_array+0x44>)
 800a818:	f003 f8c8 	bl	800d9ac <_init>
 800a81c:	1b64      	subs	r4, r4, r5
 800a81e:	10a4      	asrs	r4, r4, #2
 800a820:	2600      	movs	r6, #0
 800a822:	42a6      	cmp	r6, r4
 800a824:	d105      	bne.n	800a832 <__libc_init_array+0x2e>
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	f855 3b04 	ldr.w	r3, [r5], #4
 800a82c:	4798      	blx	r3
 800a82e:	3601      	adds	r6, #1
 800a830:	e7ee      	b.n	800a810 <__libc_init_array+0xc>
 800a832:	f855 3b04 	ldr.w	r3, [r5], #4
 800a836:	4798      	blx	r3
 800a838:	3601      	adds	r6, #1
 800a83a:	e7f2      	b.n	800a822 <__libc_init_array+0x1e>
 800a83c:	0800dfbc 	.word	0x0800dfbc
 800a840:	0800dfbc 	.word	0x0800dfbc
 800a844:	0800dfbc 	.word	0x0800dfbc
 800a848:	0800dfc0 	.word	0x0800dfc0

0800a84c <__retarget_lock_init_recursive>:
 800a84c:	4770      	bx	lr

0800a84e <__retarget_lock_acquire_recursive>:
 800a84e:	4770      	bx	lr

0800a850 <__retarget_lock_release_recursive>:
 800a850:	4770      	bx	lr

0800a852 <memcpy>:
 800a852:	440a      	add	r2, r1
 800a854:	4291      	cmp	r1, r2
 800a856:	f100 33ff 	add.w	r3, r0, #4294967295
 800a85a:	d100      	bne.n	800a85e <memcpy+0xc>
 800a85c:	4770      	bx	lr
 800a85e:	b510      	push	{r4, lr}
 800a860:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a864:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a868:	4291      	cmp	r1, r2
 800a86a:	d1f9      	bne.n	800a860 <memcpy+0xe>
 800a86c:	bd10      	pop	{r4, pc}
	...

0800a870 <nan>:
 800a870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a878 <nan+0x8>
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	00000000 	.word	0x00000000
 800a87c:	7ff80000 	.word	0x7ff80000

0800a880 <nanf>:
 800a880:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a888 <nanf+0x8>
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	7fc00000 	.word	0x7fc00000

0800a88c <quorem>:
 800a88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	6903      	ldr	r3, [r0, #16]
 800a892:	690c      	ldr	r4, [r1, #16]
 800a894:	42a3      	cmp	r3, r4
 800a896:	4607      	mov	r7, r0
 800a898:	db7e      	blt.n	800a998 <quorem+0x10c>
 800a89a:	3c01      	subs	r4, #1
 800a89c:	f101 0814 	add.w	r8, r1, #20
 800a8a0:	f100 0514 	add.w	r5, r0, #20
 800a8a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a8ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8be:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8c2:	d331      	bcc.n	800a928 <quorem+0x9c>
 800a8c4:	f04f 0e00 	mov.w	lr, #0
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	46ac      	mov	ip, r5
 800a8cc:	46f2      	mov	sl, lr
 800a8ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8d2:	b293      	uxth	r3, r2
 800a8d4:	fb06 e303 	mla	r3, r6, r3, lr
 800a8d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8dc:	0c1a      	lsrs	r2, r3, #16
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8e4:	f8dc a000 	ldr.w	sl, [ip]
 800a8e8:	fa13 f38a 	uxtah	r3, r3, sl
 800a8ec:	fb06 220e 	mla	r2, r6, lr, r2
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	9b00      	ldr	r3, [sp, #0]
 800a8f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8f8:	b292      	uxth	r2, r2
 800a8fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a902:	f8bd 3000 	ldrh.w	r3, [sp]
 800a906:	4581      	cmp	r9, r0
 800a908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a90c:	f84c 3b04 	str.w	r3, [ip], #4
 800a910:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a914:	d2db      	bcs.n	800a8ce <quorem+0x42>
 800a916:	f855 300b 	ldr.w	r3, [r5, fp]
 800a91a:	b92b      	cbnz	r3, 800a928 <quorem+0x9c>
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	3b04      	subs	r3, #4
 800a920:	429d      	cmp	r5, r3
 800a922:	461a      	mov	r2, r3
 800a924:	d32c      	bcc.n	800a980 <quorem+0xf4>
 800a926:	613c      	str	r4, [r7, #16]
 800a928:	4638      	mov	r0, r7
 800a92a:	f001 fca7 	bl	800c27c <__mcmp>
 800a92e:	2800      	cmp	r0, #0
 800a930:	db22      	blt.n	800a978 <quorem+0xec>
 800a932:	3601      	adds	r6, #1
 800a934:	4629      	mov	r1, r5
 800a936:	2000      	movs	r0, #0
 800a938:	f858 2b04 	ldr.w	r2, [r8], #4
 800a93c:	f8d1 c000 	ldr.w	ip, [r1]
 800a940:	b293      	uxth	r3, r2
 800a942:	1ac3      	subs	r3, r0, r3
 800a944:	0c12      	lsrs	r2, r2, #16
 800a946:	fa13 f38c 	uxtah	r3, r3, ip
 800a94a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a94e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a952:	b29b      	uxth	r3, r3
 800a954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a958:	45c1      	cmp	r9, r8
 800a95a:	f841 3b04 	str.w	r3, [r1], #4
 800a95e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a962:	d2e9      	bcs.n	800a938 <quorem+0xac>
 800a964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a96c:	b922      	cbnz	r2, 800a978 <quorem+0xec>
 800a96e:	3b04      	subs	r3, #4
 800a970:	429d      	cmp	r5, r3
 800a972:	461a      	mov	r2, r3
 800a974:	d30a      	bcc.n	800a98c <quorem+0x100>
 800a976:	613c      	str	r4, [r7, #16]
 800a978:	4630      	mov	r0, r6
 800a97a:	b003      	add	sp, #12
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	6812      	ldr	r2, [r2, #0]
 800a982:	3b04      	subs	r3, #4
 800a984:	2a00      	cmp	r2, #0
 800a986:	d1ce      	bne.n	800a926 <quorem+0x9a>
 800a988:	3c01      	subs	r4, #1
 800a98a:	e7c9      	b.n	800a920 <quorem+0x94>
 800a98c:	6812      	ldr	r2, [r2, #0]
 800a98e:	3b04      	subs	r3, #4
 800a990:	2a00      	cmp	r2, #0
 800a992:	d1f0      	bne.n	800a976 <quorem+0xea>
 800a994:	3c01      	subs	r4, #1
 800a996:	e7eb      	b.n	800a970 <quorem+0xe4>
 800a998:	2000      	movs	r0, #0
 800a99a:	e7ee      	b.n	800a97a <quorem+0xee>
 800a99c:	0000      	movs	r0, r0
	...

0800a9a0 <_dtoa_r>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	ed2d 8b04 	vpush	{d8-d9}
 800a9a8:	69c5      	ldr	r5, [r0, #28]
 800a9aa:	b093      	sub	sp, #76	; 0x4c
 800a9ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9b0:	ec57 6b10 	vmov	r6, r7, d0
 800a9b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a9b8:	9107      	str	r1, [sp, #28]
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	920a      	str	r2, [sp, #40]	; 0x28
 800a9be:	930d      	str	r3, [sp, #52]	; 0x34
 800a9c0:	b975      	cbnz	r5, 800a9e0 <_dtoa_r+0x40>
 800a9c2:	2010      	movs	r0, #16
 800a9c4:	f7fd ff82 	bl	80088cc <malloc>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	61e0      	str	r0, [r4, #28]
 800a9cc:	b920      	cbnz	r0, 800a9d8 <_dtoa_r+0x38>
 800a9ce:	4bae      	ldr	r3, [pc, #696]	; (800ac88 <_dtoa_r+0x2e8>)
 800a9d0:	21ef      	movs	r1, #239	; 0xef
 800a9d2:	48ae      	ldr	r0, [pc, #696]	; (800ac8c <_dtoa_r+0x2ec>)
 800a9d4:	f002 fc88 	bl	800d2e8 <__assert_func>
 800a9d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9dc:	6005      	str	r5, [r0, #0]
 800a9de:	60c5      	str	r5, [r0, #12]
 800a9e0:	69e3      	ldr	r3, [r4, #28]
 800a9e2:	6819      	ldr	r1, [r3, #0]
 800a9e4:	b151      	cbz	r1, 800a9fc <_dtoa_r+0x5c>
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	604a      	str	r2, [r1, #4]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	4093      	lsls	r3, r2
 800a9ee:	608b      	str	r3, [r1, #8]
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 f9bd 	bl	800bd70 <_Bfree>
 800a9f6:	69e3      	ldr	r3, [r4, #28]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	1e3b      	subs	r3, r7, #0
 800a9fe:	bfbb      	ittet	lt
 800aa00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa04:	9303      	strlt	r3, [sp, #12]
 800aa06:	2300      	movge	r3, #0
 800aa08:	2201      	movlt	r2, #1
 800aa0a:	bfac      	ite	ge
 800aa0c:	f8c8 3000 	strge.w	r3, [r8]
 800aa10:	f8c8 2000 	strlt.w	r2, [r8]
 800aa14:	4b9e      	ldr	r3, [pc, #632]	; (800ac90 <_dtoa_r+0x2f0>)
 800aa16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aa1a:	ea33 0308 	bics.w	r3, r3, r8
 800aa1e:	d11b      	bne.n	800aa58 <_dtoa_r+0xb8>
 800aa20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa22:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aa2c:	4333      	orrs	r3, r6
 800aa2e:	f000 8593 	beq.w	800b558 <_dtoa_r+0xbb8>
 800aa32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa34:	b963      	cbnz	r3, 800aa50 <_dtoa_r+0xb0>
 800aa36:	4b97      	ldr	r3, [pc, #604]	; (800ac94 <_dtoa_r+0x2f4>)
 800aa38:	e027      	b.n	800aa8a <_dtoa_r+0xea>
 800aa3a:	4b97      	ldr	r3, [pc, #604]	; (800ac98 <_dtoa_r+0x2f8>)
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	3308      	adds	r3, #8
 800aa40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	9800      	ldr	r0, [sp, #0]
 800aa46:	b013      	add	sp, #76	; 0x4c
 800aa48:	ecbd 8b04 	vpop	{d8-d9}
 800aa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa50:	4b90      	ldr	r3, [pc, #576]	; (800ac94 <_dtoa_r+0x2f4>)
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	3303      	adds	r3, #3
 800aa56:	e7f3      	b.n	800aa40 <_dtoa_r+0xa0>
 800aa58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	ec51 0b17 	vmov	r0, r1, d7
 800aa62:	eeb0 8a47 	vmov.f32	s16, s14
 800aa66:	eef0 8a67 	vmov.f32	s17, s15
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f7f6 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa70:	4681      	mov	r9, r0
 800aa72:	b160      	cbz	r0, 800aa8e <_dtoa_r+0xee>
 800aa74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa76:	2301      	movs	r3, #1
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8568 	beq.w	800b552 <_dtoa_r+0xbb2>
 800aa82:	4b86      	ldr	r3, [pc, #536]	; (800ac9c <_dtoa_r+0x2fc>)
 800aa84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	e7da      	b.n	800aa44 <_dtoa_r+0xa4>
 800aa8e:	aa10      	add	r2, sp, #64	; 0x40
 800aa90:	a911      	add	r1, sp, #68	; 0x44
 800aa92:	4620      	mov	r0, r4
 800aa94:	eeb0 0a48 	vmov.f32	s0, s16
 800aa98:	eef0 0a68 	vmov.f32	s1, s17
 800aa9c:	f001 fd04 	bl	800c4a8 <__d2b>
 800aaa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	d07f      	beq.n	800abaa <_dtoa_r+0x20a>
 800aaaa:	ee18 3a90 	vmov	r3, s17
 800aaae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aab6:	ec51 0b18 	vmov	r0, r1, d8
 800aaba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aac6:	4619      	mov	r1, r3
 800aac8:	2200      	movs	r2, #0
 800aaca:	4b75      	ldr	r3, [pc, #468]	; (800aca0 <_dtoa_r+0x300>)
 800aacc:	f7f5 fbdc 	bl	8000288 <__aeabi_dsub>
 800aad0:	a367      	add	r3, pc, #412	; (adr r3, 800ac70 <_dtoa_r+0x2d0>)
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fd8f 	bl	80005f8 <__aeabi_dmul>
 800aada:	a367      	add	r3, pc, #412	; (adr r3, 800ac78 <_dtoa_r+0x2d8>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fbd4 	bl	800028c <__adddf3>
 800aae4:	4606      	mov	r6, r0
 800aae6:	4628      	mov	r0, r5
 800aae8:	460f      	mov	r7, r1
 800aaea:	f7f5 fd1b 	bl	8000524 <__aeabi_i2d>
 800aaee:	a364      	add	r3, pc, #400	; (adr r3, 800ac80 <_dtoa_r+0x2e0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7f5 fd80 	bl	80005f8 <__aeabi_dmul>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fbc4 	bl	800028c <__adddf3>
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	f7f6 f826 	bl	8000b58 <__aeabi_d2iz>
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	4683      	mov	fp, r0
 800ab10:	2300      	movs	r3, #0
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 ffe1 	bl	8000adc <__aeabi_dcmplt>
 800ab1a:	b148      	cbz	r0, 800ab30 <_dtoa_r+0x190>
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f7f5 fd01 	bl	8000524 <__aeabi_i2d>
 800ab22:	4632      	mov	r2, r6
 800ab24:	463b      	mov	r3, r7
 800ab26:	f7f5 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab2a:	b908      	cbnz	r0, 800ab30 <_dtoa_r+0x190>
 800ab2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab30:	f1bb 0f16 	cmp.w	fp, #22
 800ab34:	d857      	bhi.n	800abe6 <_dtoa_r+0x246>
 800ab36:	4b5b      	ldr	r3, [pc, #364]	; (800aca4 <_dtoa_r+0x304>)
 800ab38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	ec51 0b18 	vmov	r0, r1, d8
 800ab44:	f7f5 ffca 	bl	8000adc <__aeabi_dcmplt>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d04e      	beq.n	800abea <_dtoa_r+0x24a>
 800ab4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab50:	2300      	movs	r3, #0
 800ab52:	930c      	str	r3, [sp, #48]	; 0x30
 800ab54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab56:	1b5b      	subs	r3, r3, r5
 800ab58:	1e5a      	subs	r2, r3, #1
 800ab5a:	bf45      	ittet	mi
 800ab5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab60:	9305      	strmi	r3, [sp, #20]
 800ab62:	2300      	movpl	r3, #0
 800ab64:	2300      	movmi	r3, #0
 800ab66:	9206      	str	r2, [sp, #24]
 800ab68:	bf54      	ite	pl
 800ab6a:	9305      	strpl	r3, [sp, #20]
 800ab6c:	9306      	strmi	r3, [sp, #24]
 800ab6e:	f1bb 0f00 	cmp.w	fp, #0
 800ab72:	db3c      	blt.n	800abee <_dtoa_r+0x24e>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ab7a:	445b      	add	r3, fp
 800ab7c:	9306      	str	r3, [sp, #24]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9308      	str	r3, [sp, #32]
 800ab82:	9b07      	ldr	r3, [sp, #28]
 800ab84:	2b09      	cmp	r3, #9
 800ab86:	d868      	bhi.n	800ac5a <_dtoa_r+0x2ba>
 800ab88:	2b05      	cmp	r3, #5
 800ab8a:	bfc4      	itt	gt
 800ab8c:	3b04      	subgt	r3, #4
 800ab8e:	9307      	strgt	r3, [sp, #28]
 800ab90:	9b07      	ldr	r3, [sp, #28]
 800ab92:	f1a3 0302 	sub.w	r3, r3, #2
 800ab96:	bfcc      	ite	gt
 800ab98:	2500      	movgt	r5, #0
 800ab9a:	2501      	movle	r5, #1
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	f200 8085 	bhi.w	800acac <_dtoa_r+0x30c>
 800aba2:	e8df f003 	tbb	[pc, r3]
 800aba6:	3b2e      	.short	0x3b2e
 800aba8:	5839      	.short	0x5839
 800abaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800abae:	441d      	add	r5, r3
 800abb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	bfc1      	itttt	gt
 800abb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800abbc:	fa08 f803 	lslgt.w	r8, r8, r3
 800abc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800abc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800abc8:	bfd6      	itet	le
 800abca:	f1c3 0320 	rsble	r3, r3, #32
 800abce:	ea48 0003 	orrgt.w	r0, r8, r3
 800abd2:	fa06 f003 	lslle.w	r0, r6, r3
 800abd6:	f7f5 fc95 	bl	8000504 <__aeabi_ui2d>
 800abda:	2201      	movs	r2, #1
 800abdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800abe0:	3d01      	subs	r5, #1
 800abe2:	920e      	str	r2, [sp, #56]	; 0x38
 800abe4:	e76f      	b.n	800aac6 <_dtoa_r+0x126>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e7b3      	b.n	800ab52 <_dtoa_r+0x1b2>
 800abea:	900c      	str	r0, [sp, #48]	; 0x30
 800abec:	e7b2      	b.n	800ab54 <_dtoa_r+0x1b4>
 800abee:	9b05      	ldr	r3, [sp, #20]
 800abf0:	eba3 030b 	sub.w	r3, r3, fp
 800abf4:	9305      	str	r3, [sp, #20]
 800abf6:	f1cb 0300 	rsb	r3, fp, #0
 800abfa:	9308      	str	r3, [sp, #32]
 800abfc:	2300      	movs	r3, #0
 800abfe:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac00:	e7bf      	b.n	800ab82 <_dtoa_r+0x1e2>
 800ac02:	2300      	movs	r3, #0
 800ac04:	9309      	str	r3, [sp, #36]	; 0x24
 800ac06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dc52      	bgt.n	800acb2 <_dtoa_r+0x312>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	461a      	mov	r2, r3
 800ac14:	920a      	str	r2, [sp, #40]	; 0x28
 800ac16:	e00b      	b.n	800ac30 <_dtoa_r+0x290>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e7f3      	b.n	800ac04 <_dtoa_r+0x264>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac22:	445b      	add	r3, fp
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	3301      	adds	r3, #1
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	9304      	str	r3, [sp, #16]
 800ac2c:	bfb8      	it	lt
 800ac2e:	2301      	movlt	r3, #1
 800ac30:	69e0      	ldr	r0, [r4, #28]
 800ac32:	2100      	movs	r1, #0
 800ac34:	2204      	movs	r2, #4
 800ac36:	f102 0614 	add.w	r6, r2, #20
 800ac3a:	429e      	cmp	r6, r3
 800ac3c:	d93d      	bls.n	800acba <_dtoa_r+0x31a>
 800ac3e:	6041      	str	r1, [r0, #4]
 800ac40:	4620      	mov	r0, r4
 800ac42:	f001 f855 	bl	800bcf0 <_Balloc>
 800ac46:	9000      	str	r0, [sp, #0]
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d139      	bne.n	800acc0 <_dtoa_r+0x320>
 800ac4c:	4b16      	ldr	r3, [pc, #88]	; (800aca8 <_dtoa_r+0x308>)
 800ac4e:	4602      	mov	r2, r0
 800ac50:	f240 11af 	movw	r1, #431	; 0x1af
 800ac54:	e6bd      	b.n	800a9d2 <_dtoa_r+0x32>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e7e1      	b.n	800ac1e <_dtoa_r+0x27e>
 800ac5a:	2501      	movs	r5, #1
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9307      	str	r3, [sp, #28]
 800ac60:	9509      	str	r5, [sp, #36]	; 0x24
 800ac62:	f04f 33ff 	mov.w	r3, #4294967295
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2312      	movs	r3, #18
 800ac6e:	e7d1      	b.n	800ac14 <_dtoa_r+0x274>
 800ac70:	636f4361 	.word	0x636f4361
 800ac74:	3fd287a7 	.word	0x3fd287a7
 800ac78:	8b60c8b3 	.word	0x8b60c8b3
 800ac7c:	3fc68a28 	.word	0x3fc68a28
 800ac80:	509f79fb 	.word	0x509f79fb
 800ac84:	3fd34413 	.word	0x3fd34413
 800ac88:	0800dd15 	.word	0x0800dd15
 800ac8c:	0800dd2c 	.word	0x0800dd2c
 800ac90:	7ff00000 	.word	0x7ff00000
 800ac94:	0800dd11 	.word	0x0800dd11
 800ac98:	0800dd08 	.word	0x0800dd08
 800ac9c:	0800df74 	.word	0x0800df74
 800aca0:	3ff80000 	.word	0x3ff80000
 800aca4:	0800de78 	.word	0x0800de78
 800aca8:	0800dd84 	.word	0x0800dd84
 800acac:	2301      	movs	r3, #1
 800acae:	9309      	str	r3, [sp, #36]	; 0x24
 800acb0:	e7d7      	b.n	800ac62 <_dtoa_r+0x2c2>
 800acb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	9304      	str	r3, [sp, #16]
 800acb8:	e7ba      	b.n	800ac30 <_dtoa_r+0x290>
 800acba:	3101      	adds	r1, #1
 800acbc:	0052      	lsls	r2, r2, #1
 800acbe:	e7ba      	b.n	800ac36 <_dtoa_r+0x296>
 800acc0:	69e3      	ldr	r3, [r4, #28]
 800acc2:	9a00      	ldr	r2, [sp, #0]
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	2b0e      	cmp	r3, #14
 800acca:	f200 80a8 	bhi.w	800ae1e <_dtoa_r+0x47e>
 800acce:	2d00      	cmp	r5, #0
 800acd0:	f000 80a5 	beq.w	800ae1e <_dtoa_r+0x47e>
 800acd4:	f1bb 0f00 	cmp.w	fp, #0
 800acd8:	dd38      	ble.n	800ad4c <_dtoa_r+0x3ac>
 800acda:	4bc0      	ldr	r3, [pc, #768]	; (800afdc <_dtoa_r+0x63c>)
 800acdc:	f00b 020f 	and.w	r2, fp, #15
 800ace0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ace8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800acec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800acf0:	d019      	beq.n	800ad26 <_dtoa_r+0x386>
 800acf2:	4bbb      	ldr	r3, [pc, #748]	; (800afe0 <_dtoa_r+0x640>)
 800acf4:	ec51 0b18 	vmov	r0, r1, d8
 800acf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acfc:	f7f5 fda6 	bl	800084c <__aeabi_ddiv>
 800ad00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad04:	f008 080f 	and.w	r8, r8, #15
 800ad08:	2503      	movs	r5, #3
 800ad0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800afe0 <_dtoa_r+0x640>
 800ad0e:	f1b8 0f00 	cmp.w	r8, #0
 800ad12:	d10a      	bne.n	800ad2a <_dtoa_r+0x38a>
 800ad14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad18:	4632      	mov	r2, r6
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	f7f5 fd96 	bl	800084c <__aeabi_ddiv>
 800ad20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad24:	e02b      	b.n	800ad7e <_dtoa_r+0x3de>
 800ad26:	2502      	movs	r5, #2
 800ad28:	e7ef      	b.n	800ad0a <_dtoa_r+0x36a>
 800ad2a:	f018 0f01 	tst.w	r8, #1
 800ad2e:	d008      	beq.n	800ad42 <_dtoa_r+0x3a2>
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad38:	f7f5 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ad3c:	3501      	adds	r5, #1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad46:	f109 0908 	add.w	r9, r9, #8
 800ad4a:	e7e0      	b.n	800ad0e <_dtoa_r+0x36e>
 800ad4c:	f000 809f 	beq.w	800ae8e <_dtoa_r+0x4ee>
 800ad50:	f1cb 0600 	rsb	r6, fp, #0
 800ad54:	4ba1      	ldr	r3, [pc, #644]	; (800afdc <_dtoa_r+0x63c>)
 800ad56:	4fa2      	ldr	r7, [pc, #648]	; (800afe0 <_dtoa_r+0x640>)
 800ad58:	f006 020f 	and.w	r2, r6, #15
 800ad5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	ec51 0b18 	vmov	r0, r1, d8
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad70:	1136      	asrs	r6, r6, #4
 800ad72:	2300      	movs	r3, #0
 800ad74:	2502      	movs	r5, #2
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	d17e      	bne.n	800ae78 <_dtoa_r+0x4d8>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1d0      	bne.n	800ad20 <_dtoa_r+0x380>
 800ad7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 8084 	beq.w	800ae92 <_dtoa_r+0x4f2>
 800ad8a:	4b96      	ldr	r3, [pc, #600]	; (800afe4 <_dtoa_r+0x644>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4640      	mov	r0, r8
 800ad90:	4649      	mov	r1, r9
 800ad92:	f7f5 fea3 	bl	8000adc <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d07b      	beq.n	800ae92 <_dtoa_r+0x4f2>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d078      	beq.n	800ae92 <_dtoa_r+0x4f2>
 800ada0:	9b01      	ldr	r3, [sp, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd39      	ble.n	800ae1a <_dtoa_r+0x47a>
 800ada6:	4b90      	ldr	r3, [pc, #576]	; (800afe8 <_dtoa_r+0x648>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fc23 	bl	80005f8 <__aeabi_dmul>
 800adb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adb6:	9e01      	ldr	r6, [sp, #4]
 800adb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800adbc:	3501      	adds	r5, #1
 800adbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adc2:	4628      	mov	r0, r5
 800adc4:	f7f5 fbae 	bl	8000524 <__aeabi_i2d>
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	f7f5 fc14 	bl	80005f8 <__aeabi_dmul>
 800add0:	4b86      	ldr	r3, [pc, #536]	; (800afec <_dtoa_r+0x64c>)
 800add2:	2200      	movs	r2, #0
 800add4:	f7f5 fa5a 	bl	800028c <__adddf3>
 800add8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800addc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ade0:	9303      	str	r3, [sp, #12]
 800ade2:	2e00      	cmp	r6, #0
 800ade4:	d158      	bne.n	800ae98 <_dtoa_r+0x4f8>
 800ade6:	4b82      	ldr	r3, [pc, #520]	; (800aff0 <_dtoa_r+0x650>)
 800ade8:	2200      	movs	r2, #0
 800adea:	4640      	mov	r0, r8
 800adec:	4649      	mov	r1, r9
 800adee:	f7f5 fa4b 	bl	8000288 <__aeabi_dsub>
 800adf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adf6:	4680      	mov	r8, r0
 800adf8:	4689      	mov	r9, r1
 800adfa:	f7f5 fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f040 8296 	bne.w	800b330 <_dtoa_r+0x990>
 800ae04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ae08:	4640      	mov	r0, r8
 800ae0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f7f5 fe64 	bl	8000adc <__aeabi_dcmplt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f040 8289 	bne.w	800b32c <_dtoa_r+0x98c>
 800ae1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f2c0 814e 	blt.w	800b0c2 <_dtoa_r+0x722>
 800ae26:	f1bb 0f0e 	cmp.w	fp, #14
 800ae2a:	f300 814a 	bgt.w	800b0c2 <_dtoa_r+0x722>
 800ae2e:	4b6b      	ldr	r3, [pc, #428]	; (800afdc <_dtoa_r+0x63c>)
 800ae30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f280 80dc 	bge.w	800aff8 <_dtoa_r+0x658>
 800ae40:	9b04      	ldr	r3, [sp, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f300 80d8 	bgt.w	800aff8 <_dtoa_r+0x658>
 800ae48:	f040 826f 	bne.w	800b32a <_dtoa_r+0x98a>
 800ae4c:	4b68      	ldr	r3, [pc, #416]	; (800aff0 <_dtoa_r+0x650>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4640      	mov	r0, r8
 800ae52:	4649      	mov	r1, r9
 800ae54:	f7f5 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ae58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae5c:	f7f5 fe52 	bl	8000b04 <__aeabi_dcmpge>
 800ae60:	9e04      	ldr	r6, [sp, #16]
 800ae62:	4637      	mov	r7, r6
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f040 8245 	bne.w	800b2f4 <_dtoa_r+0x954>
 800ae6a:	9d00      	ldr	r5, [sp, #0]
 800ae6c:	2331      	movs	r3, #49	; 0x31
 800ae6e:	f805 3b01 	strb.w	r3, [r5], #1
 800ae72:	f10b 0b01 	add.w	fp, fp, #1
 800ae76:	e241      	b.n	800b2fc <_dtoa_r+0x95c>
 800ae78:	07f2      	lsls	r2, r6, #31
 800ae7a:	d505      	bpl.n	800ae88 <_dtoa_r+0x4e8>
 800ae7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae80:	f7f5 fbba 	bl	80005f8 <__aeabi_dmul>
 800ae84:	3501      	adds	r5, #1
 800ae86:	2301      	movs	r3, #1
 800ae88:	1076      	asrs	r6, r6, #1
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	e773      	b.n	800ad76 <_dtoa_r+0x3d6>
 800ae8e:	2502      	movs	r5, #2
 800ae90:	e775      	b.n	800ad7e <_dtoa_r+0x3de>
 800ae92:	9e04      	ldr	r6, [sp, #16]
 800ae94:	465f      	mov	r7, fp
 800ae96:	e792      	b.n	800adbe <_dtoa_r+0x41e>
 800ae98:	9900      	ldr	r1, [sp, #0]
 800ae9a:	4b50      	ldr	r3, [pc, #320]	; (800afdc <_dtoa_r+0x63c>)
 800ae9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aea0:	4431      	add	r1, r6
 800aea2:	9102      	str	r1, [sp, #8]
 800aea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aea6:	eeb0 9a47 	vmov.f32	s18, s14
 800aeaa:	eef0 9a67 	vmov.f32	s19, s15
 800aeae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aeb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	d044      	beq.n	800af44 <_dtoa_r+0x5a4>
 800aeba:	494e      	ldr	r1, [pc, #312]	; (800aff4 <_dtoa_r+0x654>)
 800aebc:	2000      	movs	r0, #0
 800aebe:	f7f5 fcc5 	bl	800084c <__aeabi_ddiv>
 800aec2:	ec53 2b19 	vmov	r2, r3, d9
 800aec6:	f7f5 f9df 	bl	8000288 <__aeabi_dsub>
 800aeca:	9d00      	ldr	r5, [sp, #0]
 800aecc:	ec41 0b19 	vmov	d9, r0, r1
 800aed0:	4649      	mov	r1, r9
 800aed2:	4640      	mov	r0, r8
 800aed4:	f7f5 fe40 	bl	8000b58 <__aeabi_d2iz>
 800aed8:	4606      	mov	r6, r0
 800aeda:	f7f5 fb23 	bl	8000524 <__aeabi_i2d>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	4640      	mov	r0, r8
 800aee4:	4649      	mov	r1, r9
 800aee6:	f7f5 f9cf 	bl	8000288 <__aeabi_dsub>
 800aeea:	3630      	adds	r6, #48	; 0x30
 800aeec:	f805 6b01 	strb.w	r6, [r5], #1
 800aef0:	ec53 2b19 	vmov	r2, r3, d9
 800aef4:	4680      	mov	r8, r0
 800aef6:	4689      	mov	r9, r1
 800aef8:	f7f5 fdf0 	bl	8000adc <__aeabi_dcmplt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d164      	bne.n	800afca <_dtoa_r+0x62a>
 800af00:	4642      	mov	r2, r8
 800af02:	464b      	mov	r3, r9
 800af04:	4937      	ldr	r1, [pc, #220]	; (800afe4 <_dtoa_r+0x644>)
 800af06:	2000      	movs	r0, #0
 800af08:	f7f5 f9be 	bl	8000288 <__aeabi_dsub>
 800af0c:	ec53 2b19 	vmov	r2, r3, d9
 800af10:	f7f5 fde4 	bl	8000adc <__aeabi_dcmplt>
 800af14:	2800      	cmp	r0, #0
 800af16:	f040 80b6 	bne.w	800b086 <_dtoa_r+0x6e6>
 800af1a:	9b02      	ldr	r3, [sp, #8]
 800af1c:	429d      	cmp	r5, r3
 800af1e:	f43f af7c 	beq.w	800ae1a <_dtoa_r+0x47a>
 800af22:	4b31      	ldr	r3, [pc, #196]	; (800afe8 <_dtoa_r+0x648>)
 800af24:	ec51 0b19 	vmov	r0, r1, d9
 800af28:	2200      	movs	r2, #0
 800af2a:	f7f5 fb65 	bl	80005f8 <__aeabi_dmul>
 800af2e:	4b2e      	ldr	r3, [pc, #184]	; (800afe8 <_dtoa_r+0x648>)
 800af30:	ec41 0b19 	vmov	d9, r0, r1
 800af34:	2200      	movs	r2, #0
 800af36:	4640      	mov	r0, r8
 800af38:	4649      	mov	r1, r9
 800af3a:	f7f5 fb5d 	bl	80005f8 <__aeabi_dmul>
 800af3e:	4680      	mov	r8, r0
 800af40:	4689      	mov	r9, r1
 800af42:	e7c5      	b.n	800aed0 <_dtoa_r+0x530>
 800af44:	ec51 0b17 	vmov	r0, r1, d7
 800af48:	f7f5 fb56 	bl	80005f8 <__aeabi_dmul>
 800af4c:	9b02      	ldr	r3, [sp, #8]
 800af4e:	9d00      	ldr	r5, [sp, #0]
 800af50:	930f      	str	r3, [sp, #60]	; 0x3c
 800af52:	ec41 0b19 	vmov	d9, r0, r1
 800af56:	4649      	mov	r1, r9
 800af58:	4640      	mov	r0, r8
 800af5a:	f7f5 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800af5e:	4606      	mov	r6, r0
 800af60:	f7f5 fae0 	bl	8000524 <__aeabi_i2d>
 800af64:	3630      	adds	r6, #48	; 0x30
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4640      	mov	r0, r8
 800af6c:	4649      	mov	r1, r9
 800af6e:	f7f5 f98b 	bl	8000288 <__aeabi_dsub>
 800af72:	f805 6b01 	strb.w	r6, [r5], #1
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	429d      	cmp	r5, r3
 800af7a:	4680      	mov	r8, r0
 800af7c:	4689      	mov	r9, r1
 800af7e:	f04f 0200 	mov.w	r2, #0
 800af82:	d124      	bne.n	800afce <_dtoa_r+0x62e>
 800af84:	4b1b      	ldr	r3, [pc, #108]	; (800aff4 <_dtoa_r+0x654>)
 800af86:	ec51 0b19 	vmov	r0, r1, d9
 800af8a:	f7f5 f97f 	bl	800028c <__adddf3>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4640      	mov	r0, r8
 800af94:	4649      	mov	r1, r9
 800af96:	f7f5 fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	d173      	bne.n	800b086 <_dtoa_r+0x6e6>
 800af9e:	ec53 2b19 	vmov	r2, r3, d9
 800afa2:	4914      	ldr	r1, [pc, #80]	; (800aff4 <_dtoa_r+0x654>)
 800afa4:	2000      	movs	r0, #0
 800afa6:	f7f5 f96f 	bl	8000288 <__aeabi_dsub>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4640      	mov	r0, r8
 800afb0:	4649      	mov	r1, r9
 800afb2:	f7f5 fd93 	bl	8000adc <__aeabi_dcmplt>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f43f af2f 	beq.w	800ae1a <_dtoa_r+0x47a>
 800afbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800afbe:	1e6b      	subs	r3, r5, #1
 800afc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800afc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afc6:	2b30      	cmp	r3, #48	; 0x30
 800afc8:	d0f8      	beq.n	800afbc <_dtoa_r+0x61c>
 800afca:	46bb      	mov	fp, r7
 800afcc:	e04a      	b.n	800b064 <_dtoa_r+0x6c4>
 800afce:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <_dtoa_r+0x648>)
 800afd0:	f7f5 fb12 	bl	80005f8 <__aeabi_dmul>
 800afd4:	4680      	mov	r8, r0
 800afd6:	4689      	mov	r9, r1
 800afd8:	e7bd      	b.n	800af56 <_dtoa_r+0x5b6>
 800afda:	bf00      	nop
 800afdc:	0800de78 	.word	0x0800de78
 800afe0:	0800de50 	.word	0x0800de50
 800afe4:	3ff00000 	.word	0x3ff00000
 800afe8:	40240000 	.word	0x40240000
 800afec:	401c0000 	.word	0x401c0000
 800aff0:	40140000 	.word	0x40140000
 800aff4:	3fe00000 	.word	0x3fe00000
 800aff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800affc:	9d00      	ldr	r5, [sp, #0]
 800affe:	4642      	mov	r2, r8
 800b000:	464b      	mov	r3, r9
 800b002:	4630      	mov	r0, r6
 800b004:	4639      	mov	r1, r7
 800b006:	f7f5 fc21 	bl	800084c <__aeabi_ddiv>
 800b00a:	f7f5 fda5 	bl	8000b58 <__aeabi_d2iz>
 800b00e:	9001      	str	r0, [sp, #4]
 800b010:	f7f5 fa88 	bl	8000524 <__aeabi_i2d>
 800b014:	4642      	mov	r2, r8
 800b016:	464b      	mov	r3, r9
 800b018:	f7f5 faee 	bl	80005f8 <__aeabi_dmul>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4630      	mov	r0, r6
 800b022:	4639      	mov	r1, r7
 800b024:	f7f5 f930 	bl	8000288 <__aeabi_dsub>
 800b028:	9e01      	ldr	r6, [sp, #4]
 800b02a:	9f04      	ldr	r7, [sp, #16]
 800b02c:	3630      	adds	r6, #48	; 0x30
 800b02e:	f805 6b01 	strb.w	r6, [r5], #1
 800b032:	9e00      	ldr	r6, [sp, #0]
 800b034:	1bae      	subs	r6, r5, r6
 800b036:	42b7      	cmp	r7, r6
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	d134      	bne.n	800b0a8 <_dtoa_r+0x708>
 800b03e:	f7f5 f925 	bl	800028c <__adddf3>
 800b042:	4642      	mov	r2, r8
 800b044:	464b      	mov	r3, r9
 800b046:	4606      	mov	r6, r0
 800b048:	460f      	mov	r7, r1
 800b04a:	f7f5 fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800b04e:	b9c8      	cbnz	r0, 800b084 <_dtoa_r+0x6e4>
 800b050:	4642      	mov	r2, r8
 800b052:	464b      	mov	r3, r9
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05c:	b110      	cbz	r0, 800b064 <_dtoa_r+0x6c4>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	07db      	lsls	r3, r3, #31
 800b062:	d40f      	bmi.n	800b084 <_dtoa_r+0x6e4>
 800b064:	4651      	mov	r1, sl
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fe82 	bl	800bd70 <_Bfree>
 800b06c:	2300      	movs	r3, #0
 800b06e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b070:	702b      	strb	r3, [r5, #0]
 800b072:	f10b 0301 	add.w	r3, fp, #1
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f43f ace2 	beq.w	800aa44 <_dtoa_r+0xa4>
 800b080:	601d      	str	r5, [r3, #0]
 800b082:	e4df      	b.n	800aa44 <_dtoa_r+0xa4>
 800b084:	465f      	mov	r7, fp
 800b086:	462b      	mov	r3, r5
 800b088:	461d      	mov	r5, r3
 800b08a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b08e:	2a39      	cmp	r2, #57	; 0x39
 800b090:	d106      	bne.n	800b0a0 <_dtoa_r+0x700>
 800b092:	9a00      	ldr	r2, [sp, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d1f7      	bne.n	800b088 <_dtoa_r+0x6e8>
 800b098:	9900      	ldr	r1, [sp, #0]
 800b09a:	2230      	movs	r2, #48	; 0x30
 800b09c:	3701      	adds	r7, #1
 800b09e:	700a      	strb	r2, [r1, #0]
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	3201      	adds	r2, #1
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	e790      	b.n	800afca <_dtoa_r+0x62a>
 800b0a8:	4ba3      	ldr	r3, [pc, #652]	; (800b338 <_dtoa_r+0x998>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f7f5 faa4 	bl	80005f8 <__aeabi_dmul>
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460f      	mov	r7, r1
 800b0b8:	f7f5 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d09e      	beq.n	800affe <_dtoa_r+0x65e>
 800b0c0:	e7d0      	b.n	800b064 <_dtoa_r+0x6c4>
 800b0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	f000 80ca 	beq.w	800b25e <_dtoa_r+0x8be>
 800b0ca:	9a07      	ldr	r2, [sp, #28]
 800b0cc:	2a01      	cmp	r2, #1
 800b0ce:	f300 80ad 	bgt.w	800b22c <_dtoa_r+0x88c>
 800b0d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	f000 80a5 	beq.w	800b224 <_dtoa_r+0x884>
 800b0da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0de:	9e08      	ldr	r6, [sp, #32]
 800b0e0:	9d05      	ldr	r5, [sp, #20]
 800b0e2:	9a05      	ldr	r2, [sp, #20]
 800b0e4:	441a      	add	r2, r3
 800b0e6:	9205      	str	r2, [sp, #20]
 800b0e8:	9a06      	ldr	r2, [sp, #24]
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	441a      	add	r2, r3
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	9206      	str	r2, [sp, #24]
 800b0f2:	f000 ff3d 	bl	800bf70 <__i2b>
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	b165      	cbz	r5, 800b114 <_dtoa_r+0x774>
 800b0fa:	9b06      	ldr	r3, [sp, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	dd09      	ble.n	800b114 <_dtoa_r+0x774>
 800b100:	42ab      	cmp	r3, r5
 800b102:	9a05      	ldr	r2, [sp, #20]
 800b104:	bfa8      	it	ge
 800b106:	462b      	movge	r3, r5
 800b108:	1ad2      	subs	r2, r2, r3
 800b10a:	9205      	str	r2, [sp, #20]
 800b10c:	9a06      	ldr	r2, [sp, #24]
 800b10e:	1aed      	subs	r5, r5, r3
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	9b08      	ldr	r3, [sp, #32]
 800b116:	b1f3      	cbz	r3, 800b156 <_dtoa_r+0x7b6>
 800b118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 80a3 	beq.w	800b266 <_dtoa_r+0x8c6>
 800b120:	2e00      	cmp	r6, #0
 800b122:	dd10      	ble.n	800b146 <_dtoa_r+0x7a6>
 800b124:	4639      	mov	r1, r7
 800b126:	4632      	mov	r2, r6
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 ffe1 	bl	800c0f0 <__pow5mult>
 800b12e:	4652      	mov	r2, sl
 800b130:	4601      	mov	r1, r0
 800b132:	4607      	mov	r7, r0
 800b134:	4620      	mov	r0, r4
 800b136:	f000 ff31 	bl	800bf9c <__multiply>
 800b13a:	4651      	mov	r1, sl
 800b13c:	4680      	mov	r8, r0
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fe16 	bl	800bd70 <_Bfree>
 800b144:	46c2      	mov	sl, r8
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	1b9a      	subs	r2, r3, r6
 800b14a:	d004      	beq.n	800b156 <_dtoa_r+0x7b6>
 800b14c:	4651      	mov	r1, sl
 800b14e:	4620      	mov	r0, r4
 800b150:	f000 ffce 	bl	800c0f0 <__pow5mult>
 800b154:	4682      	mov	sl, r0
 800b156:	2101      	movs	r1, #1
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 ff09 	bl	800bf70 <__i2b>
 800b15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	4606      	mov	r6, r0
 800b164:	f340 8081 	ble.w	800b26a <_dtoa_r+0x8ca>
 800b168:	461a      	mov	r2, r3
 800b16a:	4601      	mov	r1, r0
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 ffbf 	bl	800c0f0 <__pow5mult>
 800b172:	9b07      	ldr	r3, [sp, #28]
 800b174:	2b01      	cmp	r3, #1
 800b176:	4606      	mov	r6, r0
 800b178:	dd7a      	ble.n	800b270 <_dtoa_r+0x8d0>
 800b17a:	f04f 0800 	mov.w	r8, #0
 800b17e:	6933      	ldr	r3, [r6, #16]
 800b180:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b184:	6918      	ldr	r0, [r3, #16]
 800b186:	f000 fea5 	bl	800bed4 <__hi0bits>
 800b18a:	f1c0 0020 	rsb	r0, r0, #32
 800b18e:	9b06      	ldr	r3, [sp, #24]
 800b190:	4418      	add	r0, r3
 800b192:	f010 001f 	ands.w	r0, r0, #31
 800b196:	f000 8094 	beq.w	800b2c2 <_dtoa_r+0x922>
 800b19a:	f1c0 0320 	rsb	r3, r0, #32
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	f340 8085 	ble.w	800b2ae <_dtoa_r+0x90e>
 800b1a4:	9b05      	ldr	r3, [sp, #20]
 800b1a6:	f1c0 001c 	rsb	r0, r0, #28
 800b1aa:	4403      	add	r3, r0
 800b1ac:	9305      	str	r3, [sp, #20]
 800b1ae:	9b06      	ldr	r3, [sp, #24]
 800b1b0:	4403      	add	r3, r0
 800b1b2:	4405      	add	r5, r0
 800b1b4:	9306      	str	r3, [sp, #24]
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dd05      	ble.n	800b1c8 <_dtoa_r+0x828>
 800b1bc:	4651      	mov	r1, sl
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 ffef 	bl	800c1a4 <__lshift>
 800b1c6:	4682      	mov	sl, r0
 800b1c8:	9b06      	ldr	r3, [sp, #24]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dd05      	ble.n	800b1da <_dtoa_r+0x83a>
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 ffe6 	bl	800c1a4 <__lshift>
 800b1d8:	4606      	mov	r6, r0
 800b1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d072      	beq.n	800b2c6 <_dtoa_r+0x926>
 800b1e0:	4631      	mov	r1, r6
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f001 f84a 	bl	800c27c <__mcmp>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	da6c      	bge.n	800b2c6 <_dtoa_r+0x926>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4651      	mov	r1, sl
 800b1f0:	220a      	movs	r2, #10
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fdde 	bl	800bdb4 <__multadd>
 800b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1fe:	4682      	mov	sl, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	f000 81b0 	beq.w	800b566 <_dtoa_r+0xbc6>
 800b206:	2300      	movs	r3, #0
 800b208:	4639      	mov	r1, r7
 800b20a:	220a      	movs	r2, #10
 800b20c:	4620      	mov	r0, r4
 800b20e:	f000 fdd1 	bl	800bdb4 <__multadd>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	4607      	mov	r7, r0
 800b218:	f300 8096 	bgt.w	800b348 <_dtoa_r+0x9a8>
 800b21c:	9b07      	ldr	r3, [sp, #28]
 800b21e:	2b02      	cmp	r3, #2
 800b220:	dc59      	bgt.n	800b2d6 <_dtoa_r+0x936>
 800b222:	e091      	b.n	800b348 <_dtoa_r+0x9a8>
 800b224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b22a:	e758      	b.n	800b0de <_dtoa_r+0x73e>
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	1e5e      	subs	r6, r3, #1
 800b230:	9b08      	ldr	r3, [sp, #32]
 800b232:	42b3      	cmp	r3, r6
 800b234:	bfbf      	itttt	lt
 800b236:	9b08      	ldrlt	r3, [sp, #32]
 800b238:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b23a:	9608      	strlt	r6, [sp, #32]
 800b23c:	1af3      	sublt	r3, r6, r3
 800b23e:	bfb4      	ite	lt
 800b240:	18d2      	addlt	r2, r2, r3
 800b242:	1b9e      	subge	r6, r3, r6
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	bfbc      	itt	lt
 800b248:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b24a:	2600      	movlt	r6, #0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfb7      	itett	lt
 800b250:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b254:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b258:	1a9d      	sublt	r5, r3, r2
 800b25a:	2300      	movlt	r3, #0
 800b25c:	e741      	b.n	800b0e2 <_dtoa_r+0x742>
 800b25e:	9e08      	ldr	r6, [sp, #32]
 800b260:	9d05      	ldr	r5, [sp, #20]
 800b262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b264:	e748      	b.n	800b0f8 <_dtoa_r+0x758>
 800b266:	9a08      	ldr	r2, [sp, #32]
 800b268:	e770      	b.n	800b14c <_dtoa_r+0x7ac>
 800b26a:	9b07      	ldr	r3, [sp, #28]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	dc19      	bgt.n	800b2a4 <_dtoa_r+0x904>
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	b9bb      	cbnz	r3, 800b2a4 <_dtoa_r+0x904>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b27a:	b99b      	cbnz	r3, 800b2a4 <_dtoa_r+0x904>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b282:	0d1b      	lsrs	r3, r3, #20
 800b284:	051b      	lsls	r3, r3, #20
 800b286:	b183      	cbz	r3, 800b2aa <_dtoa_r+0x90a>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	3301      	adds	r3, #1
 800b28c:	9305      	str	r3, [sp, #20]
 800b28e:	9b06      	ldr	r3, [sp, #24]
 800b290:	3301      	adds	r3, #1
 800b292:	9306      	str	r3, [sp, #24]
 800b294:	f04f 0801 	mov.w	r8, #1
 800b298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f47f af6f 	bne.w	800b17e <_dtoa_r+0x7de>
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	e774      	b.n	800b18e <_dtoa_r+0x7ee>
 800b2a4:	f04f 0800 	mov.w	r8, #0
 800b2a8:	e7f6      	b.n	800b298 <_dtoa_r+0x8f8>
 800b2aa:	4698      	mov	r8, r3
 800b2ac:	e7f4      	b.n	800b298 <_dtoa_r+0x8f8>
 800b2ae:	d082      	beq.n	800b1b6 <_dtoa_r+0x816>
 800b2b0:	9a05      	ldr	r2, [sp, #20]
 800b2b2:	331c      	adds	r3, #28
 800b2b4:	441a      	add	r2, r3
 800b2b6:	9205      	str	r2, [sp, #20]
 800b2b8:	9a06      	ldr	r2, [sp, #24]
 800b2ba:	441a      	add	r2, r3
 800b2bc:	441d      	add	r5, r3
 800b2be:	9206      	str	r2, [sp, #24]
 800b2c0:	e779      	b.n	800b1b6 <_dtoa_r+0x816>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	e7f4      	b.n	800b2b0 <_dtoa_r+0x910>
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dc37      	bgt.n	800b33c <_dtoa_r+0x99c>
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	dd34      	ble.n	800b33c <_dtoa_r+0x99c>
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	b963      	cbnz	r3, 800b2f4 <_dtoa_r+0x954>
 800b2da:	4631      	mov	r1, r6
 800b2dc:	2205      	movs	r2, #5
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f000 fd68 	bl	800bdb4 <__multadd>
 800b2e4:	4601      	mov	r1, r0
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	4650      	mov	r0, sl
 800b2ea:	f000 ffc7 	bl	800c27c <__mcmp>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	f73f adbb 	bgt.w	800ae6a <_dtoa_r+0x4ca>
 800b2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f6:	9d00      	ldr	r5, [sp, #0]
 800b2f8:	ea6f 0b03 	mvn.w	fp, r3
 800b2fc:	f04f 0800 	mov.w	r8, #0
 800b300:	4631      	mov	r1, r6
 800b302:	4620      	mov	r0, r4
 800b304:	f000 fd34 	bl	800bd70 <_Bfree>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	f43f aeab 	beq.w	800b064 <_dtoa_r+0x6c4>
 800b30e:	f1b8 0f00 	cmp.w	r8, #0
 800b312:	d005      	beq.n	800b320 <_dtoa_r+0x980>
 800b314:	45b8      	cmp	r8, r7
 800b316:	d003      	beq.n	800b320 <_dtoa_r+0x980>
 800b318:	4641      	mov	r1, r8
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fd28 	bl	800bd70 <_Bfree>
 800b320:	4639      	mov	r1, r7
 800b322:	4620      	mov	r0, r4
 800b324:	f000 fd24 	bl	800bd70 <_Bfree>
 800b328:	e69c      	b.n	800b064 <_dtoa_r+0x6c4>
 800b32a:	2600      	movs	r6, #0
 800b32c:	4637      	mov	r7, r6
 800b32e:	e7e1      	b.n	800b2f4 <_dtoa_r+0x954>
 800b330:	46bb      	mov	fp, r7
 800b332:	4637      	mov	r7, r6
 800b334:	e599      	b.n	800ae6a <_dtoa_r+0x4ca>
 800b336:	bf00      	nop
 800b338:	40240000 	.word	0x40240000
 800b33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 80c8 	beq.w	800b4d4 <_dtoa_r+0xb34>
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	2d00      	cmp	r5, #0
 800b34a:	dd05      	ble.n	800b358 <_dtoa_r+0x9b8>
 800b34c:	4639      	mov	r1, r7
 800b34e:	462a      	mov	r2, r5
 800b350:	4620      	mov	r0, r4
 800b352:	f000 ff27 	bl	800c1a4 <__lshift>
 800b356:	4607      	mov	r7, r0
 800b358:	f1b8 0f00 	cmp.w	r8, #0
 800b35c:	d05b      	beq.n	800b416 <_dtoa_r+0xa76>
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	4620      	mov	r0, r4
 800b362:	f000 fcc5 	bl	800bcf0 <_Balloc>
 800b366:	4605      	mov	r5, r0
 800b368:	b928      	cbnz	r0, 800b376 <_dtoa_r+0x9d6>
 800b36a:	4b83      	ldr	r3, [pc, #524]	; (800b578 <_dtoa_r+0xbd8>)
 800b36c:	4602      	mov	r2, r0
 800b36e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b372:	f7ff bb2e 	b.w	800a9d2 <_dtoa_r+0x32>
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	3202      	adds	r2, #2
 800b37a:	0092      	lsls	r2, r2, #2
 800b37c:	f107 010c 	add.w	r1, r7, #12
 800b380:	300c      	adds	r0, #12
 800b382:	f7ff fa66 	bl	800a852 <memcpy>
 800b386:	2201      	movs	r2, #1
 800b388:	4629      	mov	r1, r5
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 ff0a 	bl	800c1a4 <__lshift>
 800b390:	9b00      	ldr	r3, [sp, #0]
 800b392:	3301      	adds	r3, #1
 800b394:	9304      	str	r3, [sp, #16]
 800b396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b39a:	4413      	add	r3, r2
 800b39c:	9308      	str	r3, [sp, #32]
 800b39e:	9b02      	ldr	r3, [sp, #8]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	46b8      	mov	r8, r7
 800b3a6:	9306      	str	r3, [sp, #24]
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	9b04      	ldr	r3, [sp, #16]
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	9301      	str	r3, [sp, #4]
 800b3b4:	f7ff fa6a 	bl	800a88c <quorem>
 800b3b8:	4641      	mov	r1, r8
 800b3ba:	9002      	str	r0, [sp, #8]
 800b3bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	f000 ff5b 	bl	800c27c <__mcmp>
 800b3c6:	463a      	mov	r2, r7
 800b3c8:	9005      	str	r0, [sp, #20]
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 ff71 	bl	800c2b4 <__mdiff>
 800b3d2:	68c2      	ldr	r2, [r0, #12]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	bb02      	cbnz	r2, 800b41a <_dtoa_r+0xa7a>
 800b3d8:	4601      	mov	r1, r0
 800b3da:	4650      	mov	r0, sl
 800b3dc:	f000 ff4e 	bl	800c27c <__mcmp>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	9209      	str	r2, [sp, #36]	; 0x24
 800b3e8:	f000 fcc2 	bl	800bd70 <_Bfree>
 800b3ec:	9b07      	ldr	r3, [sp, #28]
 800b3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f0:	9d04      	ldr	r5, [sp, #16]
 800b3f2:	ea43 0102 	orr.w	r1, r3, r2
 800b3f6:	9b06      	ldr	r3, [sp, #24]
 800b3f8:	4319      	orrs	r1, r3
 800b3fa:	d110      	bne.n	800b41e <_dtoa_r+0xa7e>
 800b3fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b400:	d029      	beq.n	800b456 <_dtoa_r+0xab6>
 800b402:	9b05      	ldr	r3, [sp, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd02      	ble.n	800b40e <_dtoa_r+0xa6e>
 800b408:	9b02      	ldr	r3, [sp, #8]
 800b40a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	f883 9000 	strb.w	r9, [r3]
 800b414:	e774      	b.n	800b300 <_dtoa_r+0x960>
 800b416:	4638      	mov	r0, r7
 800b418:	e7ba      	b.n	800b390 <_dtoa_r+0x9f0>
 800b41a:	2201      	movs	r2, #1
 800b41c:	e7e1      	b.n	800b3e2 <_dtoa_r+0xa42>
 800b41e:	9b05      	ldr	r3, [sp, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db04      	blt.n	800b42e <_dtoa_r+0xa8e>
 800b424:	9907      	ldr	r1, [sp, #28]
 800b426:	430b      	orrs	r3, r1
 800b428:	9906      	ldr	r1, [sp, #24]
 800b42a:	430b      	orrs	r3, r1
 800b42c:	d120      	bne.n	800b470 <_dtoa_r+0xad0>
 800b42e:	2a00      	cmp	r2, #0
 800b430:	dded      	ble.n	800b40e <_dtoa_r+0xa6e>
 800b432:	4651      	mov	r1, sl
 800b434:	2201      	movs	r2, #1
 800b436:	4620      	mov	r0, r4
 800b438:	f000 feb4 	bl	800c1a4 <__lshift>
 800b43c:	4631      	mov	r1, r6
 800b43e:	4682      	mov	sl, r0
 800b440:	f000 ff1c 	bl	800c27c <__mcmp>
 800b444:	2800      	cmp	r0, #0
 800b446:	dc03      	bgt.n	800b450 <_dtoa_r+0xab0>
 800b448:	d1e1      	bne.n	800b40e <_dtoa_r+0xa6e>
 800b44a:	f019 0f01 	tst.w	r9, #1
 800b44e:	d0de      	beq.n	800b40e <_dtoa_r+0xa6e>
 800b450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b454:	d1d8      	bne.n	800b408 <_dtoa_r+0xa68>
 800b456:	9a01      	ldr	r2, [sp, #4]
 800b458:	2339      	movs	r3, #57	; 0x39
 800b45a:	7013      	strb	r3, [r2, #0]
 800b45c:	462b      	mov	r3, r5
 800b45e:	461d      	mov	r5, r3
 800b460:	3b01      	subs	r3, #1
 800b462:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b466:	2a39      	cmp	r2, #57	; 0x39
 800b468:	d06c      	beq.n	800b544 <_dtoa_r+0xba4>
 800b46a:	3201      	adds	r2, #1
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e747      	b.n	800b300 <_dtoa_r+0x960>
 800b470:	2a00      	cmp	r2, #0
 800b472:	dd07      	ble.n	800b484 <_dtoa_r+0xae4>
 800b474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b478:	d0ed      	beq.n	800b456 <_dtoa_r+0xab6>
 800b47a:	9a01      	ldr	r2, [sp, #4]
 800b47c:	f109 0301 	add.w	r3, r9, #1
 800b480:	7013      	strb	r3, [r2, #0]
 800b482:	e73d      	b.n	800b300 <_dtoa_r+0x960>
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	9a08      	ldr	r2, [sp, #32]
 800b488:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d043      	beq.n	800b518 <_dtoa_r+0xb78>
 800b490:	4651      	mov	r1, sl
 800b492:	2300      	movs	r3, #0
 800b494:	220a      	movs	r2, #10
 800b496:	4620      	mov	r0, r4
 800b498:	f000 fc8c 	bl	800bdb4 <__multadd>
 800b49c:	45b8      	cmp	r8, r7
 800b49e:	4682      	mov	sl, r0
 800b4a0:	f04f 0300 	mov.w	r3, #0
 800b4a4:	f04f 020a 	mov.w	r2, #10
 800b4a8:	4641      	mov	r1, r8
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	d107      	bne.n	800b4be <_dtoa_r+0xb1e>
 800b4ae:	f000 fc81 	bl	800bdb4 <__multadd>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	e775      	b.n	800b3aa <_dtoa_r+0xa0a>
 800b4be:	f000 fc79 	bl	800bdb4 <__multadd>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	220a      	movs	r2, #10
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f000 fc72 	bl	800bdb4 <__multadd>
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	e7f0      	b.n	800b4b6 <_dtoa_r+0xb16>
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	9301      	str	r3, [sp, #4]
 800b4d8:	9d00      	ldr	r5, [sp, #0]
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f7ff f9d5 	bl	800a88c <quorem>
 800b4e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	f805 9b01 	strb.w	r9, [r5], #1
 800b4ec:	1aea      	subs	r2, r5, r3
 800b4ee:	9b01      	ldr	r3, [sp, #4]
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	dd07      	ble.n	800b504 <_dtoa_r+0xb64>
 800b4f4:	4651      	mov	r1, sl
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	220a      	movs	r2, #10
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 fc5a 	bl	800bdb4 <__multadd>
 800b500:	4682      	mov	sl, r0
 800b502:	e7ea      	b.n	800b4da <_dtoa_r+0xb3a>
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfc8      	it	gt
 800b50a:	461d      	movgt	r5, r3
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	bfd8      	it	le
 800b510:	2501      	movle	r5, #1
 800b512:	441d      	add	r5, r3
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	4651      	mov	r1, sl
 800b51a:	2201      	movs	r2, #1
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 fe41 	bl	800c1a4 <__lshift>
 800b522:	4631      	mov	r1, r6
 800b524:	4682      	mov	sl, r0
 800b526:	f000 fea9 	bl	800c27c <__mcmp>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	dc96      	bgt.n	800b45c <_dtoa_r+0xabc>
 800b52e:	d102      	bne.n	800b536 <_dtoa_r+0xb96>
 800b530:	f019 0f01 	tst.w	r9, #1
 800b534:	d192      	bne.n	800b45c <_dtoa_r+0xabc>
 800b536:	462b      	mov	r3, r5
 800b538:	461d      	mov	r5, r3
 800b53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b53e:	2a30      	cmp	r2, #48	; 0x30
 800b540:	d0fa      	beq.n	800b538 <_dtoa_r+0xb98>
 800b542:	e6dd      	b.n	800b300 <_dtoa_r+0x960>
 800b544:	9a00      	ldr	r2, [sp, #0]
 800b546:	429a      	cmp	r2, r3
 800b548:	d189      	bne.n	800b45e <_dtoa_r+0xabe>
 800b54a:	f10b 0b01 	add.w	fp, fp, #1
 800b54e:	2331      	movs	r3, #49	; 0x31
 800b550:	e796      	b.n	800b480 <_dtoa_r+0xae0>
 800b552:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <_dtoa_r+0xbdc>)
 800b554:	f7ff ba99 	b.w	800aa8a <_dtoa_r+0xea>
 800b558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f47f aa6d 	bne.w	800aa3a <_dtoa_r+0x9a>
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <_dtoa_r+0xbe0>)
 800b562:	f7ff ba92 	b.w	800aa8a <_dtoa_r+0xea>
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dcb5      	bgt.n	800b4d8 <_dtoa_r+0xb38>
 800b56c:	9b07      	ldr	r3, [sp, #28]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	f73f aeb1 	bgt.w	800b2d6 <_dtoa_r+0x936>
 800b574:	e7b0      	b.n	800b4d8 <_dtoa_r+0xb38>
 800b576:	bf00      	nop
 800b578:	0800dd84 	.word	0x0800dd84
 800b57c:	0800df73 	.word	0x0800df73
 800b580:	0800dd08 	.word	0x0800dd08

0800b584 <_free_r>:
 800b584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b586:	2900      	cmp	r1, #0
 800b588:	d044      	beq.n	800b614 <_free_r+0x90>
 800b58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b58e:	9001      	str	r0, [sp, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f1a1 0404 	sub.w	r4, r1, #4
 800b596:	bfb8      	it	lt
 800b598:	18e4      	addlt	r4, r4, r3
 800b59a:	f7fd fa3f 	bl	8008a1c <__malloc_lock>
 800b59e:	4a1e      	ldr	r2, [pc, #120]	; (800b618 <_free_r+0x94>)
 800b5a0:	9801      	ldr	r0, [sp, #4]
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	b933      	cbnz	r3, 800b5b4 <_free_r+0x30>
 800b5a6:	6063      	str	r3, [r4, #4]
 800b5a8:	6014      	str	r4, [r2, #0]
 800b5aa:	b003      	add	sp, #12
 800b5ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5b0:	f7fd ba3a 	b.w	8008a28 <__malloc_unlock>
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	d908      	bls.n	800b5ca <_free_r+0x46>
 800b5b8:	6825      	ldr	r5, [r4, #0]
 800b5ba:	1961      	adds	r1, r4, r5
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	bf01      	itttt	eq
 800b5c0:	6819      	ldreq	r1, [r3, #0]
 800b5c2:	685b      	ldreq	r3, [r3, #4]
 800b5c4:	1949      	addeq	r1, r1, r5
 800b5c6:	6021      	streq	r1, [r4, #0]
 800b5c8:	e7ed      	b.n	800b5a6 <_free_r+0x22>
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	b10b      	cbz	r3, 800b5d4 <_free_r+0x50>
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d9fa      	bls.n	800b5ca <_free_r+0x46>
 800b5d4:	6811      	ldr	r1, [r2, #0]
 800b5d6:	1855      	adds	r5, r2, r1
 800b5d8:	42a5      	cmp	r5, r4
 800b5da:	d10b      	bne.n	800b5f4 <_free_r+0x70>
 800b5dc:	6824      	ldr	r4, [r4, #0]
 800b5de:	4421      	add	r1, r4
 800b5e0:	1854      	adds	r4, r2, r1
 800b5e2:	42a3      	cmp	r3, r4
 800b5e4:	6011      	str	r1, [r2, #0]
 800b5e6:	d1e0      	bne.n	800b5aa <_free_r+0x26>
 800b5e8:	681c      	ldr	r4, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	6053      	str	r3, [r2, #4]
 800b5ee:	440c      	add	r4, r1
 800b5f0:	6014      	str	r4, [r2, #0]
 800b5f2:	e7da      	b.n	800b5aa <_free_r+0x26>
 800b5f4:	d902      	bls.n	800b5fc <_free_r+0x78>
 800b5f6:	230c      	movs	r3, #12
 800b5f8:	6003      	str	r3, [r0, #0]
 800b5fa:	e7d6      	b.n	800b5aa <_free_r+0x26>
 800b5fc:	6825      	ldr	r5, [r4, #0]
 800b5fe:	1961      	adds	r1, r4, r5
 800b600:	428b      	cmp	r3, r1
 800b602:	bf04      	itt	eq
 800b604:	6819      	ldreq	r1, [r3, #0]
 800b606:	685b      	ldreq	r3, [r3, #4]
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	bf04      	itt	eq
 800b60c:	1949      	addeq	r1, r1, r5
 800b60e:	6021      	streq	r1, [r4, #0]
 800b610:	6054      	str	r4, [r2, #4]
 800b612:	e7ca      	b.n	800b5aa <_free_r+0x26>
 800b614:	b003      	add	sp, #12
 800b616:	bd30      	pop	{r4, r5, pc}
 800b618:	20005854 	.word	0x20005854

0800b61c <rshift>:
 800b61c:	6903      	ldr	r3, [r0, #16]
 800b61e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b626:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b62a:	f100 0414 	add.w	r4, r0, #20
 800b62e:	dd45      	ble.n	800b6bc <rshift+0xa0>
 800b630:	f011 011f 	ands.w	r1, r1, #31
 800b634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b63c:	d10c      	bne.n	800b658 <rshift+0x3c>
 800b63e:	f100 0710 	add.w	r7, r0, #16
 800b642:	4629      	mov	r1, r5
 800b644:	42b1      	cmp	r1, r6
 800b646:	d334      	bcc.n	800b6b2 <rshift+0x96>
 800b648:	1a9b      	subs	r3, r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	1eea      	subs	r2, r5, #3
 800b64e:	4296      	cmp	r6, r2
 800b650:	bf38      	it	cc
 800b652:	2300      	movcc	r3, #0
 800b654:	4423      	add	r3, r4
 800b656:	e015      	b.n	800b684 <rshift+0x68>
 800b658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b65c:	f1c1 0820 	rsb	r8, r1, #32
 800b660:	40cf      	lsrs	r7, r1
 800b662:	f105 0e04 	add.w	lr, r5, #4
 800b666:	46a1      	mov	r9, r4
 800b668:	4576      	cmp	r6, lr
 800b66a:	46f4      	mov	ip, lr
 800b66c:	d815      	bhi.n	800b69a <rshift+0x7e>
 800b66e:	1a9a      	subs	r2, r3, r2
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	3a04      	subs	r2, #4
 800b674:	3501      	adds	r5, #1
 800b676:	42ae      	cmp	r6, r5
 800b678:	bf38      	it	cc
 800b67a:	2200      	movcc	r2, #0
 800b67c:	18a3      	adds	r3, r4, r2
 800b67e:	50a7      	str	r7, [r4, r2]
 800b680:	b107      	cbz	r7, 800b684 <rshift+0x68>
 800b682:	3304      	adds	r3, #4
 800b684:	1b1a      	subs	r2, r3, r4
 800b686:	42a3      	cmp	r3, r4
 800b688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b68c:	bf08      	it	eq
 800b68e:	2300      	moveq	r3, #0
 800b690:	6102      	str	r2, [r0, #16]
 800b692:	bf08      	it	eq
 800b694:	6143      	streq	r3, [r0, #20]
 800b696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69a:	f8dc c000 	ldr.w	ip, [ip]
 800b69e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b6a6:	f849 7b04 	str.w	r7, [r9], #4
 800b6aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6ae:	40cf      	lsrs	r7, r1
 800b6b0:	e7da      	b.n	800b668 <rshift+0x4c>
 800b6b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6ba:	e7c3      	b.n	800b644 <rshift+0x28>
 800b6bc:	4623      	mov	r3, r4
 800b6be:	e7e1      	b.n	800b684 <rshift+0x68>

0800b6c0 <__hexdig_fun>:
 800b6c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	d802      	bhi.n	800b6ce <__hexdig_fun+0xe>
 800b6c8:	3820      	subs	r0, #32
 800b6ca:	b2c0      	uxtb	r0, r0
 800b6cc:	4770      	bx	lr
 800b6ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6d2:	2b05      	cmp	r3, #5
 800b6d4:	d801      	bhi.n	800b6da <__hexdig_fun+0x1a>
 800b6d6:	3847      	subs	r0, #71	; 0x47
 800b6d8:	e7f7      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6de:	2b05      	cmp	r3, #5
 800b6e0:	d801      	bhi.n	800b6e6 <__hexdig_fun+0x26>
 800b6e2:	3827      	subs	r0, #39	; 0x27
 800b6e4:	e7f1      	b.n	800b6ca <__hexdig_fun+0xa>
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	4770      	bx	lr
	...

0800b6ec <__gethex>:
 800b6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4617      	mov	r7, r2
 800b6f2:	680a      	ldr	r2, [r1, #0]
 800b6f4:	b085      	sub	sp, #20
 800b6f6:	f102 0b02 	add.w	fp, r2, #2
 800b6fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b702:	4681      	mov	r9, r0
 800b704:	468a      	mov	sl, r1
 800b706:	9302      	str	r3, [sp, #8]
 800b708:	32fe      	adds	r2, #254	; 0xfe
 800b70a:	eb02 030b 	add.w	r3, r2, fp
 800b70e:	46d8      	mov	r8, fp
 800b710:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	2830      	cmp	r0, #48	; 0x30
 800b718:	d0f7      	beq.n	800b70a <__gethex+0x1e>
 800b71a:	f7ff ffd1 	bl	800b6c0 <__hexdig_fun>
 800b71e:	4604      	mov	r4, r0
 800b720:	2800      	cmp	r0, #0
 800b722:	d138      	bne.n	800b796 <__gethex+0xaa>
 800b724:	49a7      	ldr	r1, [pc, #668]	; (800b9c4 <__gethex+0x2d8>)
 800b726:	2201      	movs	r2, #1
 800b728:	4640      	mov	r0, r8
 800b72a:	f7fe ffb8 	bl	800a69e <strncmp>
 800b72e:	4606      	mov	r6, r0
 800b730:	2800      	cmp	r0, #0
 800b732:	d169      	bne.n	800b808 <__gethex+0x11c>
 800b734:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b738:	465d      	mov	r5, fp
 800b73a:	f7ff ffc1 	bl	800b6c0 <__hexdig_fun>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d064      	beq.n	800b80c <__gethex+0x120>
 800b742:	465a      	mov	r2, fp
 800b744:	7810      	ldrb	r0, [r2, #0]
 800b746:	2830      	cmp	r0, #48	; 0x30
 800b748:	4690      	mov	r8, r2
 800b74a:	f102 0201 	add.w	r2, r2, #1
 800b74e:	d0f9      	beq.n	800b744 <__gethex+0x58>
 800b750:	f7ff ffb6 	bl	800b6c0 <__hexdig_fun>
 800b754:	2301      	movs	r3, #1
 800b756:	fab0 f480 	clz	r4, r0
 800b75a:	0964      	lsrs	r4, r4, #5
 800b75c:	465e      	mov	r6, fp
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	4642      	mov	r2, r8
 800b762:	4615      	mov	r5, r2
 800b764:	3201      	adds	r2, #1
 800b766:	7828      	ldrb	r0, [r5, #0]
 800b768:	f7ff ffaa 	bl	800b6c0 <__hexdig_fun>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d1f8      	bne.n	800b762 <__gethex+0x76>
 800b770:	4994      	ldr	r1, [pc, #592]	; (800b9c4 <__gethex+0x2d8>)
 800b772:	2201      	movs	r2, #1
 800b774:	4628      	mov	r0, r5
 800b776:	f7fe ff92 	bl	800a69e <strncmp>
 800b77a:	b978      	cbnz	r0, 800b79c <__gethex+0xb0>
 800b77c:	b946      	cbnz	r6, 800b790 <__gethex+0xa4>
 800b77e:	1c6e      	adds	r6, r5, #1
 800b780:	4632      	mov	r2, r6
 800b782:	4615      	mov	r5, r2
 800b784:	3201      	adds	r2, #1
 800b786:	7828      	ldrb	r0, [r5, #0]
 800b788:	f7ff ff9a 	bl	800b6c0 <__hexdig_fun>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d1f8      	bne.n	800b782 <__gethex+0x96>
 800b790:	1b73      	subs	r3, r6, r5
 800b792:	009e      	lsls	r6, r3, #2
 800b794:	e004      	b.n	800b7a0 <__gethex+0xb4>
 800b796:	2400      	movs	r4, #0
 800b798:	4626      	mov	r6, r4
 800b79a:	e7e1      	b.n	800b760 <__gethex+0x74>
 800b79c:	2e00      	cmp	r6, #0
 800b79e:	d1f7      	bne.n	800b790 <__gethex+0xa4>
 800b7a0:	782b      	ldrb	r3, [r5, #0]
 800b7a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7a6:	2b50      	cmp	r3, #80	; 0x50
 800b7a8:	d13d      	bne.n	800b826 <__gethex+0x13a>
 800b7aa:	786b      	ldrb	r3, [r5, #1]
 800b7ac:	2b2b      	cmp	r3, #43	; 0x2b
 800b7ae:	d02f      	beq.n	800b810 <__gethex+0x124>
 800b7b0:	2b2d      	cmp	r3, #45	; 0x2d
 800b7b2:	d031      	beq.n	800b818 <__gethex+0x12c>
 800b7b4:	1c69      	adds	r1, r5, #1
 800b7b6:	f04f 0b00 	mov.w	fp, #0
 800b7ba:	7808      	ldrb	r0, [r1, #0]
 800b7bc:	f7ff ff80 	bl	800b6c0 <__hexdig_fun>
 800b7c0:	1e42      	subs	r2, r0, #1
 800b7c2:	b2d2      	uxtb	r2, r2
 800b7c4:	2a18      	cmp	r2, #24
 800b7c6:	d82e      	bhi.n	800b826 <__gethex+0x13a>
 800b7c8:	f1a0 0210 	sub.w	r2, r0, #16
 800b7cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7d0:	f7ff ff76 	bl	800b6c0 <__hexdig_fun>
 800b7d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7d8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7dc:	f1bc 0f18 	cmp.w	ip, #24
 800b7e0:	d91d      	bls.n	800b81e <__gethex+0x132>
 800b7e2:	f1bb 0f00 	cmp.w	fp, #0
 800b7e6:	d000      	beq.n	800b7ea <__gethex+0xfe>
 800b7e8:	4252      	negs	r2, r2
 800b7ea:	4416      	add	r6, r2
 800b7ec:	f8ca 1000 	str.w	r1, [sl]
 800b7f0:	b1dc      	cbz	r4, 800b82a <__gethex+0x13e>
 800b7f2:	9b01      	ldr	r3, [sp, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	bf14      	ite	ne
 800b7f8:	f04f 0800 	movne.w	r8, #0
 800b7fc:	f04f 0806 	moveq.w	r8, #6
 800b800:	4640      	mov	r0, r8
 800b802:	b005      	add	sp, #20
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	4645      	mov	r5, r8
 800b80a:	4626      	mov	r6, r4
 800b80c:	2401      	movs	r4, #1
 800b80e:	e7c7      	b.n	800b7a0 <__gethex+0xb4>
 800b810:	f04f 0b00 	mov.w	fp, #0
 800b814:	1ca9      	adds	r1, r5, #2
 800b816:	e7d0      	b.n	800b7ba <__gethex+0xce>
 800b818:	f04f 0b01 	mov.w	fp, #1
 800b81c:	e7fa      	b.n	800b814 <__gethex+0x128>
 800b81e:	230a      	movs	r3, #10
 800b820:	fb03 0002 	mla	r0, r3, r2, r0
 800b824:	e7d0      	b.n	800b7c8 <__gethex+0xdc>
 800b826:	4629      	mov	r1, r5
 800b828:	e7e0      	b.n	800b7ec <__gethex+0x100>
 800b82a:	eba5 0308 	sub.w	r3, r5, r8
 800b82e:	3b01      	subs	r3, #1
 800b830:	4621      	mov	r1, r4
 800b832:	2b07      	cmp	r3, #7
 800b834:	dc0a      	bgt.n	800b84c <__gethex+0x160>
 800b836:	4648      	mov	r0, r9
 800b838:	f000 fa5a 	bl	800bcf0 <_Balloc>
 800b83c:	4604      	mov	r4, r0
 800b83e:	b940      	cbnz	r0, 800b852 <__gethex+0x166>
 800b840:	4b61      	ldr	r3, [pc, #388]	; (800b9c8 <__gethex+0x2dc>)
 800b842:	4602      	mov	r2, r0
 800b844:	21e4      	movs	r1, #228	; 0xe4
 800b846:	4861      	ldr	r0, [pc, #388]	; (800b9cc <__gethex+0x2e0>)
 800b848:	f001 fd4e 	bl	800d2e8 <__assert_func>
 800b84c:	3101      	adds	r1, #1
 800b84e:	105b      	asrs	r3, r3, #1
 800b850:	e7ef      	b.n	800b832 <__gethex+0x146>
 800b852:	f100 0a14 	add.w	sl, r0, #20
 800b856:	2300      	movs	r3, #0
 800b858:	495a      	ldr	r1, [pc, #360]	; (800b9c4 <__gethex+0x2d8>)
 800b85a:	f8cd a004 	str.w	sl, [sp, #4]
 800b85e:	469b      	mov	fp, r3
 800b860:	45a8      	cmp	r8, r5
 800b862:	d342      	bcc.n	800b8ea <__gethex+0x1fe>
 800b864:	9801      	ldr	r0, [sp, #4]
 800b866:	f840 bb04 	str.w	fp, [r0], #4
 800b86a:	eba0 000a 	sub.w	r0, r0, sl
 800b86e:	1080      	asrs	r0, r0, #2
 800b870:	6120      	str	r0, [r4, #16]
 800b872:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b876:	4658      	mov	r0, fp
 800b878:	f000 fb2c 	bl	800bed4 <__hi0bits>
 800b87c:	683d      	ldr	r5, [r7, #0]
 800b87e:	eba8 0000 	sub.w	r0, r8, r0
 800b882:	42a8      	cmp	r0, r5
 800b884:	dd59      	ble.n	800b93a <__gethex+0x24e>
 800b886:	eba0 0805 	sub.w	r8, r0, r5
 800b88a:	4641      	mov	r1, r8
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 febb 	bl	800c608 <__any_on>
 800b892:	4683      	mov	fp, r0
 800b894:	b1b8      	cbz	r0, 800b8c6 <__gethex+0x1da>
 800b896:	f108 33ff 	add.w	r3, r8, #4294967295
 800b89a:	1159      	asrs	r1, r3, #5
 800b89c:	f003 021f 	and.w	r2, r3, #31
 800b8a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b8a4:	f04f 0b01 	mov.w	fp, #1
 800b8a8:	fa0b f202 	lsl.w	r2, fp, r2
 800b8ac:	420a      	tst	r2, r1
 800b8ae:	d00a      	beq.n	800b8c6 <__gethex+0x1da>
 800b8b0:	455b      	cmp	r3, fp
 800b8b2:	dd06      	ble.n	800b8c2 <__gethex+0x1d6>
 800b8b4:	f1a8 0102 	sub.w	r1, r8, #2
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f000 fea5 	bl	800c608 <__any_on>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d138      	bne.n	800b934 <__gethex+0x248>
 800b8c2:	f04f 0b02 	mov.w	fp, #2
 800b8c6:	4641      	mov	r1, r8
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f7ff fea7 	bl	800b61c <rshift>
 800b8ce:	4446      	add	r6, r8
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	42b3      	cmp	r3, r6
 800b8d4:	da41      	bge.n	800b95a <__gethex+0x26e>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4648      	mov	r0, r9
 800b8da:	f000 fa49 	bl	800bd70 <_Bfree>
 800b8de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b8e8:	e78a      	b.n	800b800 <__gethex+0x114>
 800b8ea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b8ee:	2a2e      	cmp	r2, #46	; 0x2e
 800b8f0:	d014      	beq.n	800b91c <__gethex+0x230>
 800b8f2:	2b20      	cmp	r3, #32
 800b8f4:	d106      	bne.n	800b904 <__gethex+0x218>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	f843 bb04 	str.w	fp, [r3], #4
 800b8fc:	f04f 0b00 	mov.w	fp, #0
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	465b      	mov	r3, fp
 800b904:	7828      	ldrb	r0, [r5, #0]
 800b906:	9303      	str	r3, [sp, #12]
 800b908:	f7ff feda 	bl	800b6c0 <__hexdig_fun>
 800b90c:	9b03      	ldr	r3, [sp, #12]
 800b90e:	f000 000f 	and.w	r0, r0, #15
 800b912:	4098      	lsls	r0, r3
 800b914:	ea4b 0b00 	orr.w	fp, fp, r0
 800b918:	3304      	adds	r3, #4
 800b91a:	e7a1      	b.n	800b860 <__gethex+0x174>
 800b91c:	45a8      	cmp	r8, r5
 800b91e:	d8e8      	bhi.n	800b8f2 <__gethex+0x206>
 800b920:	2201      	movs	r2, #1
 800b922:	4628      	mov	r0, r5
 800b924:	9303      	str	r3, [sp, #12]
 800b926:	f7fe feba 	bl	800a69e <strncmp>
 800b92a:	4926      	ldr	r1, [pc, #152]	; (800b9c4 <__gethex+0x2d8>)
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1df      	bne.n	800b8f2 <__gethex+0x206>
 800b932:	e795      	b.n	800b860 <__gethex+0x174>
 800b934:	f04f 0b03 	mov.w	fp, #3
 800b938:	e7c5      	b.n	800b8c6 <__gethex+0x1da>
 800b93a:	da0b      	bge.n	800b954 <__gethex+0x268>
 800b93c:	eba5 0800 	sub.w	r8, r5, r0
 800b940:	4621      	mov	r1, r4
 800b942:	4642      	mov	r2, r8
 800b944:	4648      	mov	r0, r9
 800b946:	f000 fc2d 	bl	800c1a4 <__lshift>
 800b94a:	eba6 0608 	sub.w	r6, r6, r8
 800b94e:	4604      	mov	r4, r0
 800b950:	f100 0a14 	add.w	sl, r0, #20
 800b954:	f04f 0b00 	mov.w	fp, #0
 800b958:	e7ba      	b.n	800b8d0 <__gethex+0x1e4>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	42b3      	cmp	r3, r6
 800b95e:	dd73      	ble.n	800ba48 <__gethex+0x35c>
 800b960:	1b9e      	subs	r6, r3, r6
 800b962:	42b5      	cmp	r5, r6
 800b964:	dc34      	bgt.n	800b9d0 <__gethex+0x2e4>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d023      	beq.n	800b9b4 <__gethex+0x2c8>
 800b96c:	2b03      	cmp	r3, #3
 800b96e:	d025      	beq.n	800b9bc <__gethex+0x2d0>
 800b970:	2b01      	cmp	r3, #1
 800b972:	d115      	bne.n	800b9a0 <__gethex+0x2b4>
 800b974:	42b5      	cmp	r5, r6
 800b976:	d113      	bne.n	800b9a0 <__gethex+0x2b4>
 800b978:	2d01      	cmp	r5, #1
 800b97a:	d10b      	bne.n	800b994 <__gethex+0x2a8>
 800b97c:	9a02      	ldr	r2, [sp, #8]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	2301      	movs	r3, #1
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	f8ca 3000 	str.w	r3, [sl]
 800b98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b98c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b990:	601c      	str	r4, [r3, #0]
 800b992:	e735      	b.n	800b800 <__gethex+0x114>
 800b994:	1e69      	subs	r1, r5, #1
 800b996:	4620      	mov	r0, r4
 800b998:	f000 fe36 	bl	800c608 <__any_on>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1ed      	bne.n	800b97c <__gethex+0x290>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	4648      	mov	r0, r9
 800b9a4:	f000 f9e4 	bl	800bd70 <_Bfree>
 800b9a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b9b2:	e725      	b.n	800b800 <__gethex+0x114>
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f2      	bne.n	800b9a0 <__gethex+0x2b4>
 800b9ba:	e7df      	b.n	800b97c <__gethex+0x290>
 800b9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1dc      	bne.n	800b97c <__gethex+0x290>
 800b9c2:	e7ed      	b.n	800b9a0 <__gethex+0x2b4>
 800b9c4:	0800db74 	.word	0x0800db74
 800b9c8:	0800dd84 	.word	0x0800dd84
 800b9cc:	0800dd95 	.word	0x0800dd95
 800b9d0:	f106 38ff 	add.w	r8, r6, #4294967295
 800b9d4:	f1bb 0f00 	cmp.w	fp, #0
 800b9d8:	d133      	bne.n	800ba42 <__gethex+0x356>
 800b9da:	f1b8 0f00 	cmp.w	r8, #0
 800b9de:	d004      	beq.n	800b9ea <__gethex+0x2fe>
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fe10 	bl	800c608 <__any_on>
 800b9e8:	4683      	mov	fp, r0
 800b9ea:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9f4:	f008 081f 	and.w	r8, r8, #31
 800b9f8:	fa03 f308 	lsl.w	r3, r3, r8
 800b9fc:	4213      	tst	r3, r2
 800b9fe:	4631      	mov	r1, r6
 800ba00:	4620      	mov	r0, r4
 800ba02:	bf18      	it	ne
 800ba04:	f04b 0b02 	orrne.w	fp, fp, #2
 800ba08:	1bad      	subs	r5, r5, r6
 800ba0a:	f7ff fe07 	bl	800b61c <rshift>
 800ba0e:	687e      	ldr	r6, [r7, #4]
 800ba10:	f04f 0802 	mov.w	r8, #2
 800ba14:	f1bb 0f00 	cmp.w	fp, #0
 800ba18:	d04a      	beq.n	800bab0 <__gethex+0x3c4>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d016      	beq.n	800ba4e <__gethex+0x362>
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d018      	beq.n	800ba56 <__gethex+0x36a>
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d109      	bne.n	800ba3c <__gethex+0x350>
 800ba28:	f01b 0f02 	tst.w	fp, #2
 800ba2c:	d006      	beq.n	800ba3c <__gethex+0x350>
 800ba2e:	f8da 3000 	ldr.w	r3, [sl]
 800ba32:	ea4b 0b03 	orr.w	fp, fp, r3
 800ba36:	f01b 0f01 	tst.w	fp, #1
 800ba3a:	d10f      	bne.n	800ba5c <__gethex+0x370>
 800ba3c:	f048 0810 	orr.w	r8, r8, #16
 800ba40:	e036      	b.n	800bab0 <__gethex+0x3c4>
 800ba42:	f04f 0b01 	mov.w	fp, #1
 800ba46:	e7d0      	b.n	800b9ea <__gethex+0x2fe>
 800ba48:	f04f 0801 	mov.w	r8, #1
 800ba4c:	e7e2      	b.n	800ba14 <__gethex+0x328>
 800ba4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba50:	f1c3 0301 	rsb	r3, r3, #1
 800ba54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0ef      	beq.n	800ba3c <__gethex+0x350>
 800ba5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba60:	f104 0214 	add.w	r2, r4, #20
 800ba64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ba68:	9301      	str	r3, [sp, #4]
 800ba6a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4694      	mov	ip, r2
 800ba72:	f852 1b04 	ldr.w	r1, [r2], #4
 800ba76:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ba7a:	d01e      	beq.n	800baba <__gethex+0x3ce>
 800ba7c:	3101      	adds	r1, #1
 800ba7e:	f8cc 1000 	str.w	r1, [ip]
 800ba82:	f1b8 0f02 	cmp.w	r8, #2
 800ba86:	f104 0214 	add.w	r2, r4, #20
 800ba8a:	d13d      	bne.n	800bb08 <__gethex+0x41c>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	42ab      	cmp	r3, r5
 800ba92:	d10b      	bne.n	800baac <__gethex+0x3c0>
 800ba94:	1169      	asrs	r1, r5, #5
 800ba96:	2301      	movs	r3, #1
 800ba98:	f005 051f 	and.w	r5, r5, #31
 800ba9c:	fa03 f505 	lsl.w	r5, r3, r5
 800baa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baa4:	421d      	tst	r5, r3
 800baa6:	bf18      	it	ne
 800baa8:	f04f 0801 	movne.w	r8, #1
 800baac:	f048 0820 	orr.w	r8, r8, #32
 800bab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab2:	601c      	str	r4, [r3, #0]
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	601e      	str	r6, [r3, #0]
 800bab8:	e6a2      	b.n	800b800 <__gethex+0x114>
 800baba:	4290      	cmp	r0, r2
 800babc:	f842 3c04 	str.w	r3, [r2, #-4]
 800bac0:	d8d6      	bhi.n	800ba70 <__gethex+0x384>
 800bac2:	68a2      	ldr	r2, [r4, #8]
 800bac4:	4593      	cmp	fp, r2
 800bac6:	db17      	blt.n	800baf8 <__gethex+0x40c>
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4648      	mov	r0, r9
 800bacc:	3101      	adds	r1, #1
 800bace:	f000 f90f 	bl	800bcf0 <_Balloc>
 800bad2:	4682      	mov	sl, r0
 800bad4:	b918      	cbnz	r0, 800bade <__gethex+0x3f2>
 800bad6:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <__gethex+0x458>)
 800bad8:	4602      	mov	r2, r0
 800bada:	2184      	movs	r1, #132	; 0x84
 800badc:	e6b3      	b.n	800b846 <__gethex+0x15a>
 800bade:	6922      	ldr	r2, [r4, #16]
 800bae0:	3202      	adds	r2, #2
 800bae2:	f104 010c 	add.w	r1, r4, #12
 800bae6:	0092      	lsls	r2, r2, #2
 800bae8:	300c      	adds	r0, #12
 800baea:	f7fe feb2 	bl	800a852 <memcpy>
 800baee:	4621      	mov	r1, r4
 800baf0:	4648      	mov	r0, r9
 800baf2:	f000 f93d 	bl	800bd70 <_Bfree>
 800baf6:	4654      	mov	r4, sl
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	1c51      	adds	r1, r2, #1
 800bafc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bb00:	6121      	str	r1, [r4, #16]
 800bb02:	2101      	movs	r1, #1
 800bb04:	6151      	str	r1, [r2, #20]
 800bb06:	e7bc      	b.n	800ba82 <__gethex+0x396>
 800bb08:	6921      	ldr	r1, [r4, #16]
 800bb0a:	4559      	cmp	r1, fp
 800bb0c:	dd0b      	ble.n	800bb26 <__gethex+0x43a>
 800bb0e:	2101      	movs	r1, #1
 800bb10:	4620      	mov	r0, r4
 800bb12:	f7ff fd83 	bl	800b61c <rshift>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	3601      	adds	r6, #1
 800bb1a:	42b3      	cmp	r3, r6
 800bb1c:	f6ff aedb 	blt.w	800b8d6 <__gethex+0x1ea>
 800bb20:	f04f 0801 	mov.w	r8, #1
 800bb24:	e7c2      	b.n	800baac <__gethex+0x3c0>
 800bb26:	f015 051f 	ands.w	r5, r5, #31
 800bb2a:	d0f9      	beq.n	800bb20 <__gethex+0x434>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	441a      	add	r2, r3
 800bb30:	f1c5 0520 	rsb	r5, r5, #32
 800bb34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bb38:	f000 f9cc 	bl	800bed4 <__hi0bits>
 800bb3c:	42a8      	cmp	r0, r5
 800bb3e:	dbe6      	blt.n	800bb0e <__gethex+0x422>
 800bb40:	e7ee      	b.n	800bb20 <__gethex+0x434>
 800bb42:	bf00      	nop
 800bb44:	0800dd84 	.word	0x0800dd84

0800bb48 <L_shift>:
 800bb48:	f1c2 0208 	rsb	r2, r2, #8
 800bb4c:	0092      	lsls	r2, r2, #2
 800bb4e:	b570      	push	{r4, r5, r6, lr}
 800bb50:	f1c2 0620 	rsb	r6, r2, #32
 800bb54:	6843      	ldr	r3, [r0, #4]
 800bb56:	6804      	ldr	r4, [r0, #0]
 800bb58:	fa03 f506 	lsl.w	r5, r3, r6
 800bb5c:	432c      	orrs	r4, r5
 800bb5e:	40d3      	lsrs	r3, r2
 800bb60:	6004      	str	r4, [r0, #0]
 800bb62:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb66:	4288      	cmp	r0, r1
 800bb68:	d3f4      	bcc.n	800bb54 <L_shift+0xc>
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}

0800bb6c <__match>:
 800bb6c:	b530      	push	{r4, r5, lr}
 800bb6e:	6803      	ldr	r3, [r0, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb76:	b914      	cbnz	r4, 800bb7e <__match+0x12>
 800bb78:	6003      	str	r3, [r0, #0]
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	bd30      	pop	{r4, r5, pc}
 800bb7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb86:	2d19      	cmp	r5, #25
 800bb88:	bf98      	it	ls
 800bb8a:	3220      	addls	r2, #32
 800bb8c:	42a2      	cmp	r2, r4
 800bb8e:	d0f0      	beq.n	800bb72 <__match+0x6>
 800bb90:	2000      	movs	r0, #0
 800bb92:	e7f3      	b.n	800bb7c <__match+0x10>

0800bb94 <__hexnan>:
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	680b      	ldr	r3, [r1, #0]
 800bb9a:	6801      	ldr	r1, [r0, #0]
 800bb9c:	115e      	asrs	r6, r3, #5
 800bb9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bba2:	f013 031f 	ands.w	r3, r3, #31
 800bba6:	b087      	sub	sp, #28
 800bba8:	bf18      	it	ne
 800bbaa:	3604      	addne	r6, #4
 800bbac:	2500      	movs	r5, #0
 800bbae:	1f37      	subs	r7, r6, #4
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	4690      	mov	r8, r2
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbba:	46b9      	mov	r9, r7
 800bbbc:	463c      	mov	r4, r7
 800bbbe:	9502      	str	r5, [sp, #8]
 800bbc0:	46ab      	mov	fp, r5
 800bbc2:	784a      	ldrb	r2, [r1, #1]
 800bbc4:	1c4b      	adds	r3, r1, #1
 800bbc6:	9303      	str	r3, [sp, #12]
 800bbc8:	b342      	cbz	r2, 800bc1c <__hexnan+0x88>
 800bbca:	4610      	mov	r0, r2
 800bbcc:	9105      	str	r1, [sp, #20]
 800bbce:	9204      	str	r2, [sp, #16]
 800bbd0:	f7ff fd76 	bl	800b6c0 <__hexdig_fun>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d14f      	bne.n	800bc78 <__hexnan+0xe4>
 800bbd8:	9a04      	ldr	r2, [sp, #16]
 800bbda:	9905      	ldr	r1, [sp, #20]
 800bbdc:	2a20      	cmp	r2, #32
 800bbde:	d818      	bhi.n	800bc12 <__hexnan+0x7e>
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	459b      	cmp	fp, r3
 800bbe4:	dd13      	ble.n	800bc0e <__hexnan+0x7a>
 800bbe6:	454c      	cmp	r4, r9
 800bbe8:	d206      	bcs.n	800bbf8 <__hexnan+0x64>
 800bbea:	2d07      	cmp	r5, #7
 800bbec:	dc04      	bgt.n	800bbf8 <__hexnan+0x64>
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ffa8 	bl	800bb48 <L_shift>
 800bbf8:	4544      	cmp	r4, r8
 800bbfa:	d950      	bls.n	800bc9e <__hexnan+0x10a>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f1a4 0904 	sub.w	r9, r4, #4
 800bc02:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc06:	f8cd b008 	str.w	fp, [sp, #8]
 800bc0a:	464c      	mov	r4, r9
 800bc0c:	461d      	mov	r5, r3
 800bc0e:	9903      	ldr	r1, [sp, #12]
 800bc10:	e7d7      	b.n	800bbc2 <__hexnan+0x2e>
 800bc12:	2a29      	cmp	r2, #41	; 0x29
 800bc14:	d155      	bne.n	800bcc2 <__hexnan+0x12e>
 800bc16:	3102      	adds	r1, #2
 800bc18:	f8ca 1000 	str.w	r1, [sl]
 800bc1c:	f1bb 0f00 	cmp.w	fp, #0
 800bc20:	d04f      	beq.n	800bcc2 <__hexnan+0x12e>
 800bc22:	454c      	cmp	r4, r9
 800bc24:	d206      	bcs.n	800bc34 <__hexnan+0xa0>
 800bc26:	2d07      	cmp	r5, #7
 800bc28:	dc04      	bgt.n	800bc34 <__hexnan+0xa0>
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7ff ff8a 	bl	800bb48 <L_shift>
 800bc34:	4544      	cmp	r4, r8
 800bc36:	d934      	bls.n	800bca2 <__hexnan+0x10e>
 800bc38:	f1a8 0204 	sub.w	r2, r8, #4
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc42:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc46:	429f      	cmp	r7, r3
 800bc48:	d2f9      	bcs.n	800bc3e <__hexnan+0xaa>
 800bc4a:	1b3b      	subs	r3, r7, r4
 800bc4c:	f023 0303 	bic.w	r3, r3, #3
 800bc50:	3304      	adds	r3, #4
 800bc52:	3e03      	subs	r6, #3
 800bc54:	3401      	adds	r4, #1
 800bc56:	42a6      	cmp	r6, r4
 800bc58:	bf38      	it	cc
 800bc5a:	2304      	movcc	r3, #4
 800bc5c:	4443      	add	r3, r8
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f843 2b04 	str.w	r2, [r3], #4
 800bc64:	429f      	cmp	r7, r3
 800bc66:	d2fb      	bcs.n	800bc60 <__hexnan+0xcc>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	b91b      	cbnz	r3, 800bc74 <__hexnan+0xe0>
 800bc6c:	4547      	cmp	r7, r8
 800bc6e:	d126      	bne.n	800bcbe <__hexnan+0x12a>
 800bc70:	2301      	movs	r3, #1
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	2005      	movs	r0, #5
 800bc76:	e025      	b.n	800bcc4 <__hexnan+0x130>
 800bc78:	3501      	adds	r5, #1
 800bc7a:	2d08      	cmp	r5, #8
 800bc7c:	f10b 0b01 	add.w	fp, fp, #1
 800bc80:	dd06      	ble.n	800bc90 <__hexnan+0xfc>
 800bc82:	4544      	cmp	r4, r8
 800bc84:	d9c3      	bls.n	800bc0e <__hexnan+0x7a>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc8c:	2501      	movs	r5, #1
 800bc8e:	3c04      	subs	r4, #4
 800bc90:	6822      	ldr	r2, [r4, #0]
 800bc92:	f000 000f 	and.w	r0, r0, #15
 800bc96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc9a:	6020      	str	r0, [r4, #0]
 800bc9c:	e7b7      	b.n	800bc0e <__hexnan+0x7a>
 800bc9e:	2508      	movs	r5, #8
 800bca0:	e7b5      	b.n	800bc0e <__hexnan+0x7a>
 800bca2:	9b01      	ldr	r3, [sp, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0df      	beq.n	800bc68 <__hexnan+0xd4>
 800bca8:	f1c3 0320 	rsb	r3, r3, #32
 800bcac:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb0:	40da      	lsrs	r2, r3
 800bcb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bcbc:	e7d4      	b.n	800bc68 <__hexnan+0xd4>
 800bcbe:	3f04      	subs	r7, #4
 800bcc0:	e7d2      	b.n	800bc68 <__hexnan+0xd4>
 800bcc2:	2004      	movs	r0, #4
 800bcc4:	b007      	add	sp, #28
 800bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcca <__ascii_mbtowc>:
 800bcca:	b082      	sub	sp, #8
 800bccc:	b901      	cbnz	r1, 800bcd0 <__ascii_mbtowc+0x6>
 800bcce:	a901      	add	r1, sp, #4
 800bcd0:	b142      	cbz	r2, 800bce4 <__ascii_mbtowc+0x1a>
 800bcd2:	b14b      	cbz	r3, 800bce8 <__ascii_mbtowc+0x1e>
 800bcd4:	7813      	ldrb	r3, [r2, #0]
 800bcd6:	600b      	str	r3, [r1, #0]
 800bcd8:	7812      	ldrb	r2, [r2, #0]
 800bcda:	1e10      	subs	r0, r2, #0
 800bcdc:	bf18      	it	ne
 800bcde:	2001      	movne	r0, #1
 800bce0:	b002      	add	sp, #8
 800bce2:	4770      	bx	lr
 800bce4:	4610      	mov	r0, r2
 800bce6:	e7fb      	b.n	800bce0 <__ascii_mbtowc+0x16>
 800bce8:	f06f 0001 	mvn.w	r0, #1
 800bcec:	e7f8      	b.n	800bce0 <__ascii_mbtowc+0x16>
	...

0800bcf0 <_Balloc>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	69c6      	ldr	r6, [r0, #28]
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	b976      	cbnz	r6, 800bd18 <_Balloc+0x28>
 800bcfa:	2010      	movs	r0, #16
 800bcfc:	f7fc fde6 	bl	80088cc <malloc>
 800bd00:	4602      	mov	r2, r0
 800bd02:	61e0      	str	r0, [r4, #28]
 800bd04:	b920      	cbnz	r0, 800bd10 <_Balloc+0x20>
 800bd06:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <_Balloc+0x78>)
 800bd08:	4818      	ldr	r0, [pc, #96]	; (800bd6c <_Balloc+0x7c>)
 800bd0a:	216b      	movs	r1, #107	; 0x6b
 800bd0c:	f001 faec 	bl	800d2e8 <__assert_func>
 800bd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd14:	6006      	str	r6, [r0, #0]
 800bd16:	60c6      	str	r6, [r0, #12]
 800bd18:	69e6      	ldr	r6, [r4, #28]
 800bd1a:	68f3      	ldr	r3, [r6, #12]
 800bd1c:	b183      	cbz	r3, 800bd40 <_Balloc+0x50>
 800bd1e:	69e3      	ldr	r3, [r4, #28]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd26:	b9b8      	cbnz	r0, 800bd58 <_Balloc+0x68>
 800bd28:	2101      	movs	r1, #1
 800bd2a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd2e:	1d72      	adds	r2, r6, #5
 800bd30:	0092      	lsls	r2, r2, #2
 800bd32:	4620      	mov	r0, r4
 800bd34:	f001 faf6 	bl	800d324 <_calloc_r>
 800bd38:	b160      	cbz	r0, 800bd54 <_Balloc+0x64>
 800bd3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd3e:	e00e      	b.n	800bd5e <_Balloc+0x6e>
 800bd40:	2221      	movs	r2, #33	; 0x21
 800bd42:	2104      	movs	r1, #4
 800bd44:	4620      	mov	r0, r4
 800bd46:	f001 faed 	bl	800d324 <_calloc_r>
 800bd4a:	69e3      	ldr	r3, [r4, #28]
 800bd4c:	60f0      	str	r0, [r6, #12]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e4      	bne.n	800bd1e <_Balloc+0x2e>
 800bd54:	2000      	movs	r0, #0
 800bd56:	bd70      	pop	{r4, r5, r6, pc}
 800bd58:	6802      	ldr	r2, [r0, #0]
 800bd5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd5e:	2300      	movs	r3, #0
 800bd60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd64:	e7f7      	b.n	800bd56 <_Balloc+0x66>
 800bd66:	bf00      	nop
 800bd68:	0800dd15 	.word	0x0800dd15
 800bd6c:	0800ddf5 	.word	0x0800ddf5

0800bd70 <_Bfree>:
 800bd70:	b570      	push	{r4, r5, r6, lr}
 800bd72:	69c6      	ldr	r6, [r0, #28]
 800bd74:	4605      	mov	r5, r0
 800bd76:	460c      	mov	r4, r1
 800bd78:	b976      	cbnz	r6, 800bd98 <_Bfree+0x28>
 800bd7a:	2010      	movs	r0, #16
 800bd7c:	f7fc fda6 	bl	80088cc <malloc>
 800bd80:	4602      	mov	r2, r0
 800bd82:	61e8      	str	r0, [r5, #28]
 800bd84:	b920      	cbnz	r0, 800bd90 <_Bfree+0x20>
 800bd86:	4b09      	ldr	r3, [pc, #36]	; (800bdac <_Bfree+0x3c>)
 800bd88:	4809      	ldr	r0, [pc, #36]	; (800bdb0 <_Bfree+0x40>)
 800bd8a:	218f      	movs	r1, #143	; 0x8f
 800bd8c:	f001 faac 	bl	800d2e8 <__assert_func>
 800bd90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd94:	6006      	str	r6, [r0, #0]
 800bd96:	60c6      	str	r6, [r0, #12]
 800bd98:	b13c      	cbz	r4, 800bdaa <_Bfree+0x3a>
 800bd9a:	69eb      	ldr	r3, [r5, #28]
 800bd9c:	6862      	ldr	r2, [r4, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bda4:	6021      	str	r1, [r4, #0]
 800bda6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	0800dd15 	.word	0x0800dd15
 800bdb0:	0800ddf5 	.word	0x0800ddf5

0800bdb4 <__multadd>:
 800bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb8:	690d      	ldr	r5, [r1, #16]
 800bdba:	4607      	mov	r7, r0
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	461e      	mov	r6, r3
 800bdc0:	f101 0c14 	add.w	ip, r1, #20
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	f8dc 3000 	ldr.w	r3, [ip]
 800bdca:	b299      	uxth	r1, r3
 800bdcc:	fb02 6101 	mla	r1, r2, r1, r6
 800bdd0:	0c1e      	lsrs	r6, r3, #16
 800bdd2:	0c0b      	lsrs	r3, r1, #16
 800bdd4:	fb02 3306 	mla	r3, r2, r6, r3
 800bdd8:	b289      	uxth	r1, r1
 800bdda:	3001      	adds	r0, #1
 800bddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bde0:	4285      	cmp	r5, r0
 800bde2:	f84c 1b04 	str.w	r1, [ip], #4
 800bde6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdea:	dcec      	bgt.n	800bdc6 <__multadd+0x12>
 800bdec:	b30e      	cbz	r6, 800be32 <__multadd+0x7e>
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	42ab      	cmp	r3, r5
 800bdf2:	dc19      	bgt.n	800be28 <__multadd+0x74>
 800bdf4:	6861      	ldr	r1, [r4, #4]
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	3101      	adds	r1, #1
 800bdfa:	f7ff ff79 	bl	800bcf0 <_Balloc>
 800bdfe:	4680      	mov	r8, r0
 800be00:	b928      	cbnz	r0, 800be0e <__multadd+0x5a>
 800be02:	4602      	mov	r2, r0
 800be04:	4b0c      	ldr	r3, [pc, #48]	; (800be38 <__multadd+0x84>)
 800be06:	480d      	ldr	r0, [pc, #52]	; (800be3c <__multadd+0x88>)
 800be08:	21ba      	movs	r1, #186	; 0xba
 800be0a:	f001 fa6d 	bl	800d2e8 <__assert_func>
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	3202      	adds	r2, #2
 800be12:	f104 010c 	add.w	r1, r4, #12
 800be16:	0092      	lsls	r2, r2, #2
 800be18:	300c      	adds	r0, #12
 800be1a:	f7fe fd1a 	bl	800a852 <memcpy>
 800be1e:	4621      	mov	r1, r4
 800be20:	4638      	mov	r0, r7
 800be22:	f7ff ffa5 	bl	800bd70 <_Bfree>
 800be26:	4644      	mov	r4, r8
 800be28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be2c:	3501      	adds	r5, #1
 800be2e:	615e      	str	r6, [r3, #20]
 800be30:	6125      	str	r5, [r4, #16]
 800be32:	4620      	mov	r0, r4
 800be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be38:	0800dd84 	.word	0x0800dd84
 800be3c:	0800ddf5 	.word	0x0800ddf5

0800be40 <__s2b>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	460c      	mov	r4, r1
 800be46:	4615      	mov	r5, r2
 800be48:	461f      	mov	r7, r3
 800be4a:	2209      	movs	r2, #9
 800be4c:	3308      	adds	r3, #8
 800be4e:	4606      	mov	r6, r0
 800be50:	fb93 f3f2 	sdiv	r3, r3, r2
 800be54:	2100      	movs	r1, #0
 800be56:	2201      	movs	r2, #1
 800be58:	429a      	cmp	r2, r3
 800be5a:	db09      	blt.n	800be70 <__s2b+0x30>
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff ff47 	bl	800bcf0 <_Balloc>
 800be62:	b940      	cbnz	r0, 800be76 <__s2b+0x36>
 800be64:	4602      	mov	r2, r0
 800be66:	4b19      	ldr	r3, [pc, #100]	; (800becc <__s2b+0x8c>)
 800be68:	4819      	ldr	r0, [pc, #100]	; (800bed0 <__s2b+0x90>)
 800be6a:	21d3      	movs	r1, #211	; 0xd3
 800be6c:	f001 fa3c 	bl	800d2e8 <__assert_func>
 800be70:	0052      	lsls	r2, r2, #1
 800be72:	3101      	adds	r1, #1
 800be74:	e7f0      	b.n	800be58 <__s2b+0x18>
 800be76:	9b08      	ldr	r3, [sp, #32]
 800be78:	6143      	str	r3, [r0, #20]
 800be7a:	2d09      	cmp	r5, #9
 800be7c:	f04f 0301 	mov.w	r3, #1
 800be80:	6103      	str	r3, [r0, #16]
 800be82:	dd16      	ble.n	800beb2 <__s2b+0x72>
 800be84:	f104 0909 	add.w	r9, r4, #9
 800be88:	46c8      	mov	r8, r9
 800be8a:	442c      	add	r4, r5
 800be8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be90:	4601      	mov	r1, r0
 800be92:	3b30      	subs	r3, #48	; 0x30
 800be94:	220a      	movs	r2, #10
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ff8c 	bl	800bdb4 <__multadd>
 800be9c:	45a0      	cmp	r8, r4
 800be9e:	d1f5      	bne.n	800be8c <__s2b+0x4c>
 800bea0:	f1a5 0408 	sub.w	r4, r5, #8
 800bea4:	444c      	add	r4, r9
 800bea6:	1b2d      	subs	r5, r5, r4
 800bea8:	1963      	adds	r3, r4, r5
 800beaa:	42bb      	cmp	r3, r7
 800beac:	db04      	blt.n	800beb8 <__s2b+0x78>
 800beae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb2:	340a      	adds	r4, #10
 800beb4:	2509      	movs	r5, #9
 800beb6:	e7f6      	b.n	800bea6 <__s2b+0x66>
 800beb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bebc:	4601      	mov	r1, r0
 800bebe:	3b30      	subs	r3, #48	; 0x30
 800bec0:	220a      	movs	r2, #10
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff76 	bl	800bdb4 <__multadd>
 800bec8:	e7ee      	b.n	800bea8 <__s2b+0x68>
 800beca:	bf00      	nop
 800becc:	0800dd84 	.word	0x0800dd84
 800bed0:	0800ddf5 	.word	0x0800ddf5

0800bed4 <__hi0bits>:
 800bed4:	0c03      	lsrs	r3, r0, #16
 800bed6:	041b      	lsls	r3, r3, #16
 800bed8:	b9d3      	cbnz	r3, 800bf10 <__hi0bits+0x3c>
 800beda:	0400      	lsls	r0, r0, #16
 800bedc:	2310      	movs	r3, #16
 800bede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bee2:	bf04      	itt	eq
 800bee4:	0200      	lsleq	r0, r0, #8
 800bee6:	3308      	addeq	r3, #8
 800bee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800beec:	bf04      	itt	eq
 800beee:	0100      	lsleq	r0, r0, #4
 800bef0:	3304      	addeq	r3, #4
 800bef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bef6:	bf04      	itt	eq
 800bef8:	0080      	lsleq	r0, r0, #2
 800befa:	3302      	addeq	r3, #2
 800befc:	2800      	cmp	r0, #0
 800befe:	db05      	blt.n	800bf0c <__hi0bits+0x38>
 800bf00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bf04:	f103 0301 	add.w	r3, r3, #1
 800bf08:	bf08      	it	eq
 800bf0a:	2320      	moveq	r3, #32
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	4770      	bx	lr
 800bf10:	2300      	movs	r3, #0
 800bf12:	e7e4      	b.n	800bede <__hi0bits+0xa>

0800bf14 <__lo0bits>:
 800bf14:	6803      	ldr	r3, [r0, #0]
 800bf16:	f013 0207 	ands.w	r2, r3, #7
 800bf1a:	d00c      	beq.n	800bf36 <__lo0bits+0x22>
 800bf1c:	07d9      	lsls	r1, r3, #31
 800bf1e:	d422      	bmi.n	800bf66 <__lo0bits+0x52>
 800bf20:	079a      	lsls	r2, r3, #30
 800bf22:	bf49      	itett	mi
 800bf24:	085b      	lsrmi	r3, r3, #1
 800bf26:	089b      	lsrpl	r3, r3, #2
 800bf28:	6003      	strmi	r3, [r0, #0]
 800bf2a:	2201      	movmi	r2, #1
 800bf2c:	bf5c      	itt	pl
 800bf2e:	6003      	strpl	r3, [r0, #0]
 800bf30:	2202      	movpl	r2, #2
 800bf32:	4610      	mov	r0, r2
 800bf34:	4770      	bx	lr
 800bf36:	b299      	uxth	r1, r3
 800bf38:	b909      	cbnz	r1, 800bf3e <__lo0bits+0x2a>
 800bf3a:	0c1b      	lsrs	r3, r3, #16
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	b2d9      	uxtb	r1, r3
 800bf40:	b909      	cbnz	r1, 800bf46 <__lo0bits+0x32>
 800bf42:	3208      	adds	r2, #8
 800bf44:	0a1b      	lsrs	r3, r3, #8
 800bf46:	0719      	lsls	r1, r3, #28
 800bf48:	bf04      	itt	eq
 800bf4a:	091b      	lsreq	r3, r3, #4
 800bf4c:	3204      	addeq	r2, #4
 800bf4e:	0799      	lsls	r1, r3, #30
 800bf50:	bf04      	itt	eq
 800bf52:	089b      	lsreq	r3, r3, #2
 800bf54:	3202      	addeq	r2, #2
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d403      	bmi.n	800bf62 <__lo0bits+0x4e>
 800bf5a:	085b      	lsrs	r3, r3, #1
 800bf5c:	f102 0201 	add.w	r2, r2, #1
 800bf60:	d003      	beq.n	800bf6a <__lo0bits+0x56>
 800bf62:	6003      	str	r3, [r0, #0]
 800bf64:	e7e5      	b.n	800bf32 <__lo0bits+0x1e>
 800bf66:	2200      	movs	r2, #0
 800bf68:	e7e3      	b.n	800bf32 <__lo0bits+0x1e>
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	e7e1      	b.n	800bf32 <__lo0bits+0x1e>
	...

0800bf70 <__i2b>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	460c      	mov	r4, r1
 800bf74:	2101      	movs	r1, #1
 800bf76:	f7ff febb 	bl	800bcf0 <_Balloc>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	b928      	cbnz	r0, 800bf8a <__i2b+0x1a>
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <__i2b+0x24>)
 800bf80:	4805      	ldr	r0, [pc, #20]	; (800bf98 <__i2b+0x28>)
 800bf82:	f240 1145 	movw	r1, #325	; 0x145
 800bf86:	f001 f9af 	bl	800d2e8 <__assert_func>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	6144      	str	r4, [r0, #20]
 800bf8e:	6103      	str	r3, [r0, #16]
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	bf00      	nop
 800bf94:	0800dd84 	.word	0x0800dd84
 800bf98:	0800ddf5 	.word	0x0800ddf5

0800bf9c <__multiply>:
 800bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	4691      	mov	r9, r2
 800bfa2:	690a      	ldr	r2, [r1, #16]
 800bfa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	bfb8      	it	lt
 800bfac:	460b      	movlt	r3, r1
 800bfae:	460c      	mov	r4, r1
 800bfb0:	bfbc      	itt	lt
 800bfb2:	464c      	movlt	r4, r9
 800bfb4:	4699      	movlt	r9, r3
 800bfb6:	6927      	ldr	r7, [r4, #16]
 800bfb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	6861      	ldr	r1, [r4, #4]
 800bfc0:	eb07 060a 	add.w	r6, r7, sl
 800bfc4:	42b3      	cmp	r3, r6
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	bfb8      	it	lt
 800bfca:	3101      	addlt	r1, #1
 800bfcc:	f7ff fe90 	bl	800bcf0 <_Balloc>
 800bfd0:	b930      	cbnz	r0, 800bfe0 <__multiply+0x44>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	4b44      	ldr	r3, [pc, #272]	; (800c0e8 <__multiply+0x14c>)
 800bfd6:	4845      	ldr	r0, [pc, #276]	; (800c0ec <__multiply+0x150>)
 800bfd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bfdc:	f001 f984 	bl	800d2e8 <__assert_func>
 800bfe0:	f100 0514 	add.w	r5, r0, #20
 800bfe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bfe8:	462b      	mov	r3, r5
 800bfea:	2200      	movs	r2, #0
 800bfec:	4543      	cmp	r3, r8
 800bfee:	d321      	bcc.n	800c034 <__multiply+0x98>
 800bff0:	f104 0314 	add.w	r3, r4, #20
 800bff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bff8:	f109 0314 	add.w	r3, r9, #20
 800bffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c000:	9202      	str	r2, [sp, #8]
 800c002:	1b3a      	subs	r2, r7, r4
 800c004:	3a15      	subs	r2, #21
 800c006:	f022 0203 	bic.w	r2, r2, #3
 800c00a:	3204      	adds	r2, #4
 800c00c:	f104 0115 	add.w	r1, r4, #21
 800c010:	428f      	cmp	r7, r1
 800c012:	bf38      	it	cc
 800c014:	2204      	movcc	r2, #4
 800c016:	9201      	str	r2, [sp, #4]
 800c018:	9a02      	ldr	r2, [sp, #8]
 800c01a:	9303      	str	r3, [sp, #12]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d80c      	bhi.n	800c03a <__multiply+0x9e>
 800c020:	2e00      	cmp	r6, #0
 800c022:	dd03      	ble.n	800c02c <__multiply+0x90>
 800c024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d05b      	beq.n	800c0e4 <__multiply+0x148>
 800c02c:	6106      	str	r6, [r0, #16]
 800c02e:	b005      	add	sp, #20
 800c030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c034:	f843 2b04 	str.w	r2, [r3], #4
 800c038:	e7d8      	b.n	800bfec <__multiply+0x50>
 800c03a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c03e:	f1ba 0f00 	cmp.w	sl, #0
 800c042:	d024      	beq.n	800c08e <__multiply+0xf2>
 800c044:	f104 0e14 	add.w	lr, r4, #20
 800c048:	46a9      	mov	r9, r5
 800c04a:	f04f 0c00 	mov.w	ip, #0
 800c04e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c052:	f8d9 1000 	ldr.w	r1, [r9]
 800c056:	fa1f fb82 	uxth.w	fp, r2
 800c05a:	b289      	uxth	r1, r1
 800c05c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c064:	f8d9 2000 	ldr.w	r2, [r9]
 800c068:	4461      	add	r1, ip
 800c06a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c06e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c076:	b289      	uxth	r1, r1
 800c078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c07c:	4577      	cmp	r7, lr
 800c07e:	f849 1b04 	str.w	r1, [r9], #4
 800c082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c086:	d8e2      	bhi.n	800c04e <__multiply+0xb2>
 800c088:	9a01      	ldr	r2, [sp, #4]
 800c08a:	f845 c002 	str.w	ip, [r5, r2]
 800c08e:	9a03      	ldr	r2, [sp, #12]
 800c090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c094:	3304      	adds	r3, #4
 800c096:	f1b9 0f00 	cmp.w	r9, #0
 800c09a:	d021      	beq.n	800c0e0 <__multiply+0x144>
 800c09c:	6829      	ldr	r1, [r5, #0]
 800c09e:	f104 0c14 	add.w	ip, r4, #20
 800c0a2:	46ae      	mov	lr, r5
 800c0a4:	f04f 0a00 	mov.w	sl, #0
 800c0a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c0ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0b0:	fb09 220b 	mla	r2, r9, fp, r2
 800c0b4:	4452      	add	r2, sl
 800c0b6:	b289      	uxth	r1, r1
 800c0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0bc:	f84e 1b04 	str.w	r1, [lr], #4
 800c0c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0c8:	f8be 1000 	ldrh.w	r1, [lr]
 800c0cc:	fb09 110a 	mla	r1, r9, sl, r1
 800c0d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c0d4:	4567      	cmp	r7, ip
 800c0d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0da:	d8e5      	bhi.n	800c0a8 <__multiply+0x10c>
 800c0dc:	9a01      	ldr	r2, [sp, #4]
 800c0de:	50a9      	str	r1, [r5, r2]
 800c0e0:	3504      	adds	r5, #4
 800c0e2:	e799      	b.n	800c018 <__multiply+0x7c>
 800c0e4:	3e01      	subs	r6, #1
 800c0e6:	e79b      	b.n	800c020 <__multiply+0x84>
 800c0e8:	0800dd84 	.word	0x0800dd84
 800c0ec:	0800ddf5 	.word	0x0800ddf5

0800c0f0 <__pow5mult>:
 800c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	4615      	mov	r5, r2
 800c0f6:	f012 0203 	ands.w	r2, r2, #3
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	d007      	beq.n	800c110 <__pow5mult+0x20>
 800c100:	4c25      	ldr	r4, [pc, #148]	; (800c198 <__pow5mult+0xa8>)
 800c102:	3a01      	subs	r2, #1
 800c104:	2300      	movs	r3, #0
 800c106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c10a:	f7ff fe53 	bl	800bdb4 <__multadd>
 800c10e:	4607      	mov	r7, r0
 800c110:	10ad      	asrs	r5, r5, #2
 800c112:	d03d      	beq.n	800c190 <__pow5mult+0xa0>
 800c114:	69f4      	ldr	r4, [r6, #28]
 800c116:	b97c      	cbnz	r4, 800c138 <__pow5mult+0x48>
 800c118:	2010      	movs	r0, #16
 800c11a:	f7fc fbd7 	bl	80088cc <malloc>
 800c11e:	4602      	mov	r2, r0
 800c120:	61f0      	str	r0, [r6, #28]
 800c122:	b928      	cbnz	r0, 800c130 <__pow5mult+0x40>
 800c124:	4b1d      	ldr	r3, [pc, #116]	; (800c19c <__pow5mult+0xac>)
 800c126:	481e      	ldr	r0, [pc, #120]	; (800c1a0 <__pow5mult+0xb0>)
 800c128:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c12c:	f001 f8dc 	bl	800d2e8 <__assert_func>
 800c130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c134:	6004      	str	r4, [r0, #0]
 800c136:	60c4      	str	r4, [r0, #12]
 800c138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c13c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c140:	b94c      	cbnz	r4, 800c156 <__pow5mult+0x66>
 800c142:	f240 2171 	movw	r1, #625	; 0x271
 800c146:	4630      	mov	r0, r6
 800c148:	f7ff ff12 	bl	800bf70 <__i2b>
 800c14c:	2300      	movs	r3, #0
 800c14e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c152:	4604      	mov	r4, r0
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	f04f 0900 	mov.w	r9, #0
 800c15a:	07eb      	lsls	r3, r5, #31
 800c15c:	d50a      	bpl.n	800c174 <__pow5mult+0x84>
 800c15e:	4639      	mov	r1, r7
 800c160:	4622      	mov	r2, r4
 800c162:	4630      	mov	r0, r6
 800c164:	f7ff ff1a 	bl	800bf9c <__multiply>
 800c168:	4639      	mov	r1, r7
 800c16a:	4680      	mov	r8, r0
 800c16c:	4630      	mov	r0, r6
 800c16e:	f7ff fdff 	bl	800bd70 <_Bfree>
 800c172:	4647      	mov	r7, r8
 800c174:	106d      	asrs	r5, r5, #1
 800c176:	d00b      	beq.n	800c190 <__pow5mult+0xa0>
 800c178:	6820      	ldr	r0, [r4, #0]
 800c17a:	b938      	cbnz	r0, 800c18c <__pow5mult+0x9c>
 800c17c:	4622      	mov	r2, r4
 800c17e:	4621      	mov	r1, r4
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff ff0b 	bl	800bf9c <__multiply>
 800c186:	6020      	str	r0, [r4, #0]
 800c188:	f8c0 9000 	str.w	r9, [r0]
 800c18c:	4604      	mov	r4, r0
 800c18e:	e7e4      	b.n	800c15a <__pow5mult+0x6a>
 800c190:	4638      	mov	r0, r7
 800c192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c196:	bf00      	nop
 800c198:	0800df40 	.word	0x0800df40
 800c19c:	0800dd15 	.word	0x0800dd15
 800c1a0:	0800ddf5 	.word	0x0800ddf5

0800c1a4 <__lshift>:
 800c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	6849      	ldr	r1, [r1, #4]
 800c1ac:	6923      	ldr	r3, [r4, #16]
 800c1ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1b2:	68a3      	ldr	r3, [r4, #8]
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	4691      	mov	r9, r2
 800c1b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1bc:	f108 0601 	add.w	r6, r8, #1
 800c1c0:	42b3      	cmp	r3, r6
 800c1c2:	db0b      	blt.n	800c1dc <__lshift+0x38>
 800c1c4:	4638      	mov	r0, r7
 800c1c6:	f7ff fd93 	bl	800bcf0 <_Balloc>
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	b948      	cbnz	r0, 800c1e2 <__lshift+0x3e>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b28      	ldr	r3, [pc, #160]	; (800c274 <__lshift+0xd0>)
 800c1d2:	4829      	ldr	r0, [pc, #164]	; (800c278 <__lshift+0xd4>)
 800c1d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c1d8:	f001 f886 	bl	800d2e8 <__assert_func>
 800c1dc:	3101      	adds	r1, #1
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__lshift+0x1c>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f100 0114 	add.w	r1, r0, #20
 800c1e8:	f100 0210 	add.w	r2, r0, #16
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	4553      	cmp	r3, sl
 800c1f0:	db33      	blt.n	800c25a <__lshift+0xb6>
 800c1f2:	6920      	ldr	r0, [r4, #16]
 800c1f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1f8:	f104 0314 	add.w	r3, r4, #20
 800c1fc:	f019 091f 	ands.w	r9, r9, #31
 800c200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c208:	d02b      	beq.n	800c262 <__lshift+0xbe>
 800c20a:	f1c9 0e20 	rsb	lr, r9, #32
 800c20e:	468a      	mov	sl, r1
 800c210:	2200      	movs	r2, #0
 800c212:	6818      	ldr	r0, [r3, #0]
 800c214:	fa00 f009 	lsl.w	r0, r0, r9
 800c218:	4310      	orrs	r0, r2
 800c21a:	f84a 0b04 	str.w	r0, [sl], #4
 800c21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c222:	459c      	cmp	ip, r3
 800c224:	fa22 f20e 	lsr.w	r2, r2, lr
 800c228:	d8f3      	bhi.n	800c212 <__lshift+0x6e>
 800c22a:	ebac 0304 	sub.w	r3, ip, r4
 800c22e:	3b15      	subs	r3, #21
 800c230:	f023 0303 	bic.w	r3, r3, #3
 800c234:	3304      	adds	r3, #4
 800c236:	f104 0015 	add.w	r0, r4, #21
 800c23a:	4584      	cmp	ip, r0
 800c23c:	bf38      	it	cc
 800c23e:	2304      	movcc	r3, #4
 800c240:	50ca      	str	r2, [r1, r3]
 800c242:	b10a      	cbz	r2, 800c248 <__lshift+0xa4>
 800c244:	f108 0602 	add.w	r6, r8, #2
 800c248:	3e01      	subs	r6, #1
 800c24a:	4638      	mov	r0, r7
 800c24c:	612e      	str	r6, [r5, #16]
 800c24e:	4621      	mov	r1, r4
 800c250:	f7ff fd8e 	bl	800bd70 <_Bfree>
 800c254:	4628      	mov	r0, r5
 800c256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c25a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c25e:	3301      	adds	r3, #1
 800c260:	e7c5      	b.n	800c1ee <__lshift+0x4a>
 800c262:	3904      	subs	r1, #4
 800c264:	f853 2b04 	ldr.w	r2, [r3], #4
 800c268:	f841 2f04 	str.w	r2, [r1, #4]!
 800c26c:	459c      	cmp	ip, r3
 800c26e:	d8f9      	bhi.n	800c264 <__lshift+0xc0>
 800c270:	e7ea      	b.n	800c248 <__lshift+0xa4>
 800c272:	bf00      	nop
 800c274:	0800dd84 	.word	0x0800dd84
 800c278:	0800ddf5 	.word	0x0800ddf5

0800c27c <__mcmp>:
 800c27c:	b530      	push	{r4, r5, lr}
 800c27e:	6902      	ldr	r2, [r0, #16]
 800c280:	690c      	ldr	r4, [r1, #16]
 800c282:	1b12      	subs	r2, r2, r4
 800c284:	d10e      	bne.n	800c2a4 <__mcmp+0x28>
 800c286:	f100 0314 	add.w	r3, r0, #20
 800c28a:	3114      	adds	r1, #20
 800c28c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c29c:	42a5      	cmp	r5, r4
 800c29e:	d003      	beq.n	800c2a8 <__mcmp+0x2c>
 800c2a0:	d305      	bcc.n	800c2ae <__mcmp+0x32>
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4610      	mov	r0, r2
 800c2a6:	bd30      	pop	{r4, r5, pc}
 800c2a8:	4283      	cmp	r3, r0
 800c2aa:	d3f3      	bcc.n	800c294 <__mcmp+0x18>
 800c2ac:	e7fa      	b.n	800c2a4 <__mcmp+0x28>
 800c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b2:	e7f7      	b.n	800c2a4 <__mcmp+0x28>

0800c2b4 <__mdiff>:
 800c2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	4611      	mov	r1, r2
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4690      	mov	r8, r2
 800c2c2:	f7ff ffdb 	bl	800c27c <__mcmp>
 800c2c6:	1e05      	subs	r5, r0, #0
 800c2c8:	d110      	bne.n	800c2ec <__mdiff+0x38>
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7ff fd0f 	bl	800bcf0 <_Balloc>
 800c2d2:	b930      	cbnz	r0, 800c2e2 <__mdiff+0x2e>
 800c2d4:	4b3a      	ldr	r3, [pc, #232]	; (800c3c0 <__mdiff+0x10c>)
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	f240 2137 	movw	r1, #567	; 0x237
 800c2dc:	4839      	ldr	r0, [pc, #228]	; (800c3c4 <__mdiff+0x110>)
 800c2de:	f001 f803 	bl	800d2e8 <__assert_func>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	bfa4      	itt	ge
 800c2ee:	4643      	movge	r3, r8
 800c2f0:	46a0      	movge	r8, r4
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c2f8:	bfa6      	itte	ge
 800c2fa:	461c      	movge	r4, r3
 800c2fc:	2500      	movge	r5, #0
 800c2fe:	2501      	movlt	r5, #1
 800c300:	f7ff fcf6 	bl	800bcf0 <_Balloc>
 800c304:	b920      	cbnz	r0, 800c310 <__mdiff+0x5c>
 800c306:	4b2e      	ldr	r3, [pc, #184]	; (800c3c0 <__mdiff+0x10c>)
 800c308:	4602      	mov	r2, r0
 800c30a:	f240 2145 	movw	r1, #581	; 0x245
 800c30e:	e7e5      	b.n	800c2dc <__mdiff+0x28>
 800c310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c314:	6926      	ldr	r6, [r4, #16]
 800c316:	60c5      	str	r5, [r0, #12]
 800c318:	f104 0914 	add.w	r9, r4, #20
 800c31c:	f108 0514 	add.w	r5, r8, #20
 800c320:	f100 0e14 	add.w	lr, r0, #20
 800c324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c32c:	f108 0210 	add.w	r2, r8, #16
 800c330:	46f2      	mov	sl, lr
 800c332:	2100      	movs	r1, #0
 800c334:	f859 3b04 	ldr.w	r3, [r9], #4
 800c338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c33c:	fa11 f88b 	uxtah	r8, r1, fp
 800c340:	b299      	uxth	r1, r3
 800c342:	0c1b      	lsrs	r3, r3, #16
 800c344:	eba8 0801 	sub.w	r8, r8, r1
 800c348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c34c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c350:	fa1f f888 	uxth.w	r8, r8
 800c354:	1419      	asrs	r1, r3, #16
 800c356:	454e      	cmp	r6, r9
 800c358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c35c:	f84a 3b04 	str.w	r3, [sl], #4
 800c360:	d8e8      	bhi.n	800c334 <__mdiff+0x80>
 800c362:	1b33      	subs	r3, r6, r4
 800c364:	3b15      	subs	r3, #21
 800c366:	f023 0303 	bic.w	r3, r3, #3
 800c36a:	3304      	adds	r3, #4
 800c36c:	3415      	adds	r4, #21
 800c36e:	42a6      	cmp	r6, r4
 800c370:	bf38      	it	cc
 800c372:	2304      	movcc	r3, #4
 800c374:	441d      	add	r5, r3
 800c376:	4473      	add	r3, lr
 800c378:	469e      	mov	lr, r3
 800c37a:	462e      	mov	r6, r5
 800c37c:	4566      	cmp	r6, ip
 800c37e:	d30e      	bcc.n	800c39e <__mdiff+0xea>
 800c380:	f10c 0203 	add.w	r2, ip, #3
 800c384:	1b52      	subs	r2, r2, r5
 800c386:	f022 0203 	bic.w	r2, r2, #3
 800c38a:	3d03      	subs	r5, #3
 800c38c:	45ac      	cmp	ip, r5
 800c38e:	bf38      	it	cc
 800c390:	2200      	movcc	r2, #0
 800c392:	4413      	add	r3, r2
 800c394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c398:	b17a      	cbz	r2, 800c3ba <__mdiff+0x106>
 800c39a:	6107      	str	r7, [r0, #16]
 800c39c:	e7a4      	b.n	800c2e8 <__mdiff+0x34>
 800c39e:	f856 8b04 	ldr.w	r8, [r6], #4
 800c3a2:	fa11 f288 	uxtah	r2, r1, r8
 800c3a6:	1414      	asrs	r4, r2, #16
 800c3a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c3b2:	f84e 2b04 	str.w	r2, [lr], #4
 800c3b6:	1421      	asrs	r1, r4, #16
 800c3b8:	e7e0      	b.n	800c37c <__mdiff+0xc8>
 800c3ba:	3f01      	subs	r7, #1
 800c3bc:	e7ea      	b.n	800c394 <__mdiff+0xe0>
 800c3be:	bf00      	nop
 800c3c0:	0800dd84 	.word	0x0800dd84
 800c3c4:	0800ddf5 	.word	0x0800ddf5

0800c3c8 <__ulp>:
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	ed8d 0b00 	vstr	d0, [sp]
 800c3ce:	9a01      	ldr	r2, [sp, #4]
 800c3d0:	4b0f      	ldr	r3, [pc, #60]	; (800c410 <__ulp+0x48>)
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	dc08      	bgt.n	800c3ee <__ulp+0x26>
 800c3dc:	425b      	negs	r3, r3
 800c3de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c3e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3e6:	da04      	bge.n	800c3f2 <__ulp+0x2a>
 800c3e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3ec:	4113      	asrs	r3, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	e008      	b.n	800c404 <__ulp+0x3c>
 800c3f2:	f1a2 0314 	sub.w	r3, r2, #20
 800c3f6:	2b1e      	cmp	r3, #30
 800c3f8:	bfda      	itte	le
 800c3fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c3fe:	40da      	lsrle	r2, r3
 800c400:	2201      	movgt	r2, #1
 800c402:	2300      	movs	r3, #0
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	ec41 0b10 	vmov	d0, r0, r1
 800c40c:	b002      	add	sp, #8
 800c40e:	4770      	bx	lr
 800c410:	7ff00000 	.word	0x7ff00000

0800c414 <__b2d>:
 800c414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c418:	6906      	ldr	r6, [r0, #16]
 800c41a:	f100 0814 	add.w	r8, r0, #20
 800c41e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c422:	1f37      	subs	r7, r6, #4
 800c424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c428:	4610      	mov	r0, r2
 800c42a:	f7ff fd53 	bl	800bed4 <__hi0bits>
 800c42e:	f1c0 0320 	rsb	r3, r0, #32
 800c432:	280a      	cmp	r0, #10
 800c434:	600b      	str	r3, [r1, #0]
 800c436:	491b      	ldr	r1, [pc, #108]	; (800c4a4 <__b2d+0x90>)
 800c438:	dc15      	bgt.n	800c466 <__b2d+0x52>
 800c43a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c43e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c442:	45b8      	cmp	r8, r7
 800c444:	ea43 0501 	orr.w	r5, r3, r1
 800c448:	bf34      	ite	cc
 800c44a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c44e:	2300      	movcs	r3, #0
 800c450:	3015      	adds	r0, #21
 800c452:	fa02 f000 	lsl.w	r0, r2, r0
 800c456:	fa23 f30c 	lsr.w	r3, r3, ip
 800c45a:	4303      	orrs	r3, r0
 800c45c:	461c      	mov	r4, r3
 800c45e:	ec45 4b10 	vmov	d0, r4, r5
 800c462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c466:	45b8      	cmp	r8, r7
 800c468:	bf3a      	itte	cc
 800c46a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c46e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c472:	2300      	movcs	r3, #0
 800c474:	380b      	subs	r0, #11
 800c476:	d012      	beq.n	800c49e <__b2d+0x8a>
 800c478:	f1c0 0120 	rsb	r1, r0, #32
 800c47c:	fa23 f401 	lsr.w	r4, r3, r1
 800c480:	4082      	lsls	r2, r0
 800c482:	4322      	orrs	r2, r4
 800c484:	4547      	cmp	r7, r8
 800c486:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c48a:	bf8c      	ite	hi
 800c48c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c490:	2200      	movls	r2, #0
 800c492:	4083      	lsls	r3, r0
 800c494:	40ca      	lsrs	r2, r1
 800c496:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c49a:	4313      	orrs	r3, r2
 800c49c:	e7de      	b.n	800c45c <__b2d+0x48>
 800c49e:	ea42 0501 	orr.w	r5, r2, r1
 800c4a2:	e7db      	b.n	800c45c <__b2d+0x48>
 800c4a4:	3ff00000 	.word	0x3ff00000

0800c4a8 <__d2b>:
 800c4a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4ac:	460f      	mov	r7, r1
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	ec59 8b10 	vmov	r8, r9, d0
 800c4b4:	4616      	mov	r6, r2
 800c4b6:	f7ff fc1b 	bl	800bcf0 <_Balloc>
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	b930      	cbnz	r0, 800c4cc <__d2b+0x24>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	4b24      	ldr	r3, [pc, #144]	; (800c554 <__d2b+0xac>)
 800c4c2:	4825      	ldr	r0, [pc, #148]	; (800c558 <__d2b+0xb0>)
 800c4c4:	f240 310f 	movw	r1, #783	; 0x30f
 800c4c8:	f000 ff0e 	bl	800d2e8 <__assert_func>
 800c4cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4d4:	bb2d      	cbnz	r5, 800c522 <__d2b+0x7a>
 800c4d6:	9301      	str	r3, [sp, #4]
 800c4d8:	f1b8 0300 	subs.w	r3, r8, #0
 800c4dc:	d026      	beq.n	800c52c <__d2b+0x84>
 800c4de:	4668      	mov	r0, sp
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	f7ff fd17 	bl	800bf14 <__lo0bits>
 800c4e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4ea:	b1e8      	cbz	r0, 800c528 <__d2b+0x80>
 800c4ec:	f1c0 0320 	rsb	r3, r0, #32
 800c4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	40c2      	lsrs	r2, r0
 800c4f8:	6163      	str	r3, [r4, #20]
 800c4fa:	9201      	str	r2, [sp, #4]
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	61a3      	str	r3, [r4, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	bf14      	ite	ne
 800c504:	2202      	movne	r2, #2
 800c506:	2201      	moveq	r2, #1
 800c508:	6122      	str	r2, [r4, #16]
 800c50a:	b1bd      	cbz	r5, 800c53c <__d2b+0x94>
 800c50c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c510:	4405      	add	r5, r0
 800c512:	603d      	str	r5, [r7, #0]
 800c514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c518:	6030      	str	r0, [r6, #0]
 800c51a:	4620      	mov	r0, r4
 800c51c:	b003      	add	sp, #12
 800c51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c526:	e7d6      	b.n	800c4d6 <__d2b+0x2e>
 800c528:	6161      	str	r1, [r4, #20]
 800c52a:	e7e7      	b.n	800c4fc <__d2b+0x54>
 800c52c:	a801      	add	r0, sp, #4
 800c52e:	f7ff fcf1 	bl	800bf14 <__lo0bits>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	6163      	str	r3, [r4, #20]
 800c536:	3020      	adds	r0, #32
 800c538:	2201      	movs	r2, #1
 800c53a:	e7e5      	b.n	800c508 <__d2b+0x60>
 800c53c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c544:	6038      	str	r0, [r7, #0]
 800c546:	6918      	ldr	r0, [r3, #16]
 800c548:	f7ff fcc4 	bl	800bed4 <__hi0bits>
 800c54c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c550:	e7e2      	b.n	800c518 <__d2b+0x70>
 800c552:	bf00      	nop
 800c554:	0800dd84 	.word	0x0800dd84
 800c558:	0800ddf5 	.word	0x0800ddf5

0800c55c <__ratio>:
 800c55c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c560:	4688      	mov	r8, r1
 800c562:	4669      	mov	r1, sp
 800c564:	4681      	mov	r9, r0
 800c566:	f7ff ff55 	bl	800c414 <__b2d>
 800c56a:	a901      	add	r1, sp, #4
 800c56c:	4640      	mov	r0, r8
 800c56e:	ec55 4b10 	vmov	r4, r5, d0
 800c572:	f7ff ff4f 	bl	800c414 <__b2d>
 800c576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c57a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c57e:	eba3 0c02 	sub.w	ip, r3, r2
 800c582:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c58c:	ec51 0b10 	vmov	r0, r1, d0
 800c590:	2b00      	cmp	r3, #0
 800c592:	bfd6      	itet	le
 800c594:	460a      	movle	r2, r1
 800c596:	462a      	movgt	r2, r5
 800c598:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c59c:	468b      	mov	fp, r1
 800c59e:	462f      	mov	r7, r5
 800c5a0:	bfd4      	ite	le
 800c5a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	ee10 2a10 	vmov	r2, s0
 800c5b0:	465b      	mov	r3, fp
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f4 f94a 	bl	800084c <__aeabi_ddiv>
 800c5b8:	ec41 0b10 	vmov	d0, r0, r1
 800c5bc:	b003      	add	sp, #12
 800c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5c2 <__copybits>:
 800c5c2:	3901      	subs	r1, #1
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	1149      	asrs	r1, r1, #5
 800c5c8:	6914      	ldr	r4, [r2, #16]
 800c5ca:	3101      	adds	r1, #1
 800c5cc:	f102 0314 	add.w	r3, r2, #20
 800c5d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5d8:	1f05      	subs	r5, r0, #4
 800c5da:	42a3      	cmp	r3, r4
 800c5dc:	d30c      	bcc.n	800c5f8 <__copybits+0x36>
 800c5de:	1aa3      	subs	r3, r4, r2
 800c5e0:	3b11      	subs	r3, #17
 800c5e2:	f023 0303 	bic.w	r3, r3, #3
 800c5e6:	3211      	adds	r2, #17
 800c5e8:	42a2      	cmp	r2, r4
 800c5ea:	bf88      	it	hi
 800c5ec:	2300      	movhi	r3, #0
 800c5ee:	4418      	add	r0, r3
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4288      	cmp	r0, r1
 800c5f4:	d305      	bcc.n	800c602 <__copybits+0x40>
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}
 800c5f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800c600:	e7eb      	b.n	800c5da <__copybits+0x18>
 800c602:	f840 3b04 	str.w	r3, [r0], #4
 800c606:	e7f4      	b.n	800c5f2 <__copybits+0x30>

0800c608 <__any_on>:
 800c608:	f100 0214 	add.w	r2, r0, #20
 800c60c:	6900      	ldr	r0, [r0, #16]
 800c60e:	114b      	asrs	r3, r1, #5
 800c610:	4298      	cmp	r0, r3
 800c612:	b510      	push	{r4, lr}
 800c614:	db11      	blt.n	800c63a <__any_on+0x32>
 800c616:	dd0a      	ble.n	800c62e <__any_on+0x26>
 800c618:	f011 011f 	ands.w	r1, r1, #31
 800c61c:	d007      	beq.n	800c62e <__any_on+0x26>
 800c61e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c622:	fa24 f001 	lsr.w	r0, r4, r1
 800c626:	fa00 f101 	lsl.w	r1, r0, r1
 800c62a:	428c      	cmp	r4, r1
 800c62c:	d10b      	bne.n	800c646 <__any_on+0x3e>
 800c62e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c632:	4293      	cmp	r3, r2
 800c634:	d803      	bhi.n	800c63e <__any_on+0x36>
 800c636:	2000      	movs	r0, #0
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	4603      	mov	r3, r0
 800c63c:	e7f7      	b.n	800c62e <__any_on+0x26>
 800c63e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c642:	2900      	cmp	r1, #0
 800c644:	d0f5      	beq.n	800c632 <__any_on+0x2a>
 800c646:	2001      	movs	r0, #1
 800c648:	e7f6      	b.n	800c638 <__any_on+0x30>

0800c64a <_malloc_usable_size_r>:
 800c64a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64e:	1f18      	subs	r0, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	bfbc      	itt	lt
 800c654:	580b      	ldrlt	r3, [r1, r0]
 800c656:	18c0      	addlt	r0, r0, r3
 800c658:	4770      	bx	lr
	...

0800c65c <_strtol_l.constprop.0>:
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c662:	d001      	beq.n	800c668 <_strtol_l.constprop.0+0xc>
 800c664:	2b24      	cmp	r3, #36	; 0x24
 800c666:	d906      	bls.n	800c676 <_strtol_l.constprop.0+0x1a>
 800c668:	f7fe f8c6 	bl	800a7f8 <__errno>
 800c66c:	2316      	movs	r3, #22
 800c66e:	6003      	str	r3, [r0, #0]
 800c670:	2000      	movs	r0, #0
 800c672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c676:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c75c <_strtol_l.constprop.0+0x100>
 800c67a:	460d      	mov	r5, r1
 800c67c:	462e      	mov	r6, r5
 800c67e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c682:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c686:	f017 0708 	ands.w	r7, r7, #8
 800c68a:	d1f7      	bne.n	800c67c <_strtol_l.constprop.0+0x20>
 800c68c:	2c2d      	cmp	r4, #45	; 0x2d
 800c68e:	d132      	bne.n	800c6f6 <_strtol_l.constprop.0+0x9a>
 800c690:	782c      	ldrb	r4, [r5, #0]
 800c692:	2701      	movs	r7, #1
 800c694:	1cb5      	adds	r5, r6, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d05b      	beq.n	800c752 <_strtol_l.constprop.0+0xf6>
 800c69a:	2b10      	cmp	r3, #16
 800c69c:	d109      	bne.n	800c6b2 <_strtol_l.constprop.0+0x56>
 800c69e:	2c30      	cmp	r4, #48	; 0x30
 800c6a0:	d107      	bne.n	800c6b2 <_strtol_l.constprop.0+0x56>
 800c6a2:	782c      	ldrb	r4, [r5, #0]
 800c6a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c6a8:	2c58      	cmp	r4, #88	; 0x58
 800c6aa:	d14d      	bne.n	800c748 <_strtol_l.constprop.0+0xec>
 800c6ac:	786c      	ldrb	r4, [r5, #1]
 800c6ae:	2310      	movs	r3, #16
 800c6b0:	3502      	adds	r5, #2
 800c6b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c6b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6ba:	f04f 0e00 	mov.w	lr, #0
 800c6be:	fbb8 f9f3 	udiv	r9, r8, r3
 800c6c2:	4676      	mov	r6, lr
 800c6c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c6c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c6cc:	f1bc 0f09 	cmp.w	ip, #9
 800c6d0:	d816      	bhi.n	800c700 <_strtol_l.constprop.0+0xa4>
 800c6d2:	4664      	mov	r4, ip
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	dd24      	ble.n	800c722 <_strtol_l.constprop.0+0xc6>
 800c6d8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c6dc:	d008      	beq.n	800c6f0 <_strtol_l.constprop.0+0x94>
 800c6de:	45b1      	cmp	r9, r6
 800c6e0:	d31c      	bcc.n	800c71c <_strtol_l.constprop.0+0xc0>
 800c6e2:	d101      	bne.n	800c6e8 <_strtol_l.constprop.0+0x8c>
 800c6e4:	45a2      	cmp	sl, r4
 800c6e6:	db19      	blt.n	800c71c <_strtol_l.constprop.0+0xc0>
 800c6e8:	fb06 4603 	mla	r6, r6, r3, r4
 800c6ec:	f04f 0e01 	mov.w	lr, #1
 800c6f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6f4:	e7e8      	b.n	800c6c8 <_strtol_l.constprop.0+0x6c>
 800c6f6:	2c2b      	cmp	r4, #43	; 0x2b
 800c6f8:	bf04      	itt	eq
 800c6fa:	782c      	ldrbeq	r4, [r5, #0]
 800c6fc:	1cb5      	addeq	r5, r6, #2
 800c6fe:	e7ca      	b.n	800c696 <_strtol_l.constprop.0+0x3a>
 800c700:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c704:	f1bc 0f19 	cmp.w	ip, #25
 800c708:	d801      	bhi.n	800c70e <_strtol_l.constprop.0+0xb2>
 800c70a:	3c37      	subs	r4, #55	; 0x37
 800c70c:	e7e2      	b.n	800c6d4 <_strtol_l.constprop.0+0x78>
 800c70e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c712:	f1bc 0f19 	cmp.w	ip, #25
 800c716:	d804      	bhi.n	800c722 <_strtol_l.constprop.0+0xc6>
 800c718:	3c57      	subs	r4, #87	; 0x57
 800c71a:	e7db      	b.n	800c6d4 <_strtol_l.constprop.0+0x78>
 800c71c:	f04f 3eff 	mov.w	lr, #4294967295
 800c720:	e7e6      	b.n	800c6f0 <_strtol_l.constprop.0+0x94>
 800c722:	f1be 3fff 	cmp.w	lr, #4294967295
 800c726:	d105      	bne.n	800c734 <_strtol_l.constprop.0+0xd8>
 800c728:	2322      	movs	r3, #34	; 0x22
 800c72a:	6003      	str	r3, [r0, #0]
 800c72c:	4646      	mov	r6, r8
 800c72e:	b942      	cbnz	r2, 800c742 <_strtol_l.constprop.0+0xe6>
 800c730:	4630      	mov	r0, r6
 800c732:	e79e      	b.n	800c672 <_strtol_l.constprop.0+0x16>
 800c734:	b107      	cbz	r7, 800c738 <_strtol_l.constprop.0+0xdc>
 800c736:	4276      	negs	r6, r6
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d0f9      	beq.n	800c730 <_strtol_l.constprop.0+0xd4>
 800c73c:	f1be 0f00 	cmp.w	lr, #0
 800c740:	d000      	beq.n	800c744 <_strtol_l.constprop.0+0xe8>
 800c742:	1e69      	subs	r1, r5, #1
 800c744:	6011      	str	r1, [r2, #0]
 800c746:	e7f3      	b.n	800c730 <_strtol_l.constprop.0+0xd4>
 800c748:	2430      	movs	r4, #48	; 0x30
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1b1      	bne.n	800c6b2 <_strtol_l.constprop.0+0x56>
 800c74e:	2308      	movs	r3, #8
 800c750:	e7af      	b.n	800c6b2 <_strtol_l.constprop.0+0x56>
 800c752:	2c30      	cmp	r4, #48	; 0x30
 800c754:	d0a5      	beq.n	800c6a2 <_strtol_l.constprop.0+0x46>
 800c756:	230a      	movs	r3, #10
 800c758:	e7ab      	b.n	800c6b2 <_strtol_l.constprop.0+0x56>
 800c75a:	bf00      	nop
 800c75c:	0800dbc9 	.word	0x0800dbc9

0800c760 <_strtol_r>:
 800c760:	f7ff bf7c 	b.w	800c65c <_strtol_l.constprop.0>

0800c764 <__ascii_wctomb>:
 800c764:	b149      	cbz	r1, 800c77a <__ascii_wctomb+0x16>
 800c766:	2aff      	cmp	r2, #255	; 0xff
 800c768:	bf85      	ittet	hi
 800c76a:	238a      	movhi	r3, #138	; 0x8a
 800c76c:	6003      	strhi	r3, [r0, #0]
 800c76e:	700a      	strbls	r2, [r1, #0]
 800c770:	f04f 30ff 	movhi.w	r0, #4294967295
 800c774:	bf98      	it	ls
 800c776:	2001      	movls	r0, #1
 800c778:	4770      	bx	lr
 800c77a:	4608      	mov	r0, r1
 800c77c:	4770      	bx	lr

0800c77e <__ssputs_r>:
 800c77e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c782:	688e      	ldr	r6, [r1, #8]
 800c784:	461f      	mov	r7, r3
 800c786:	42be      	cmp	r6, r7
 800c788:	680b      	ldr	r3, [r1, #0]
 800c78a:	4682      	mov	sl, r0
 800c78c:	460c      	mov	r4, r1
 800c78e:	4690      	mov	r8, r2
 800c790:	d82c      	bhi.n	800c7ec <__ssputs_r+0x6e>
 800c792:	898a      	ldrh	r2, [r1, #12]
 800c794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c798:	d026      	beq.n	800c7e8 <__ssputs_r+0x6a>
 800c79a:	6965      	ldr	r5, [r4, #20]
 800c79c:	6909      	ldr	r1, [r1, #16]
 800c79e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7a2:	eba3 0901 	sub.w	r9, r3, r1
 800c7a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7aa:	1c7b      	adds	r3, r7, #1
 800c7ac:	444b      	add	r3, r9
 800c7ae:	106d      	asrs	r5, r5, #1
 800c7b0:	429d      	cmp	r5, r3
 800c7b2:	bf38      	it	cc
 800c7b4:	461d      	movcc	r5, r3
 800c7b6:	0553      	lsls	r3, r2, #21
 800c7b8:	d527      	bpl.n	800c80a <__ssputs_r+0x8c>
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	f7fc f8ae 	bl	800891c <_malloc_r>
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	b360      	cbz	r0, 800c81e <__ssputs_r+0xa0>
 800c7c4:	6921      	ldr	r1, [r4, #16]
 800c7c6:	464a      	mov	r2, r9
 800c7c8:	f7fe f843 	bl	800a852 <memcpy>
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d6:	81a3      	strh	r3, [r4, #12]
 800c7d8:	6126      	str	r6, [r4, #16]
 800c7da:	6165      	str	r5, [r4, #20]
 800c7dc:	444e      	add	r6, r9
 800c7de:	eba5 0509 	sub.w	r5, r5, r9
 800c7e2:	6026      	str	r6, [r4, #0]
 800c7e4:	60a5      	str	r5, [r4, #8]
 800c7e6:	463e      	mov	r6, r7
 800c7e8:	42be      	cmp	r6, r7
 800c7ea:	d900      	bls.n	800c7ee <__ssputs_r+0x70>
 800c7ec:	463e      	mov	r6, r7
 800c7ee:	6820      	ldr	r0, [r4, #0]
 800c7f0:	4632      	mov	r2, r6
 800c7f2:	4641      	mov	r1, r8
 800c7f4:	f000 fd5d 	bl	800d2b2 <memmove>
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	1b9b      	subs	r3, r3, r6
 800c7fc:	60a3      	str	r3, [r4, #8]
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	4433      	add	r3, r6
 800c802:	6023      	str	r3, [r4, #0]
 800c804:	2000      	movs	r0, #0
 800c806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80a:	462a      	mov	r2, r5
 800c80c:	f7fc f912 	bl	8008a34 <_realloc_r>
 800c810:	4606      	mov	r6, r0
 800c812:	2800      	cmp	r0, #0
 800c814:	d1e0      	bne.n	800c7d8 <__ssputs_r+0x5a>
 800c816:	6921      	ldr	r1, [r4, #16]
 800c818:	4650      	mov	r0, sl
 800c81a:	f7fe feb3 	bl	800b584 <_free_r>
 800c81e:	230c      	movs	r3, #12
 800c820:	f8ca 3000 	str.w	r3, [sl]
 800c824:	89a3      	ldrh	r3, [r4, #12]
 800c826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c82a:	81a3      	strh	r3, [r4, #12]
 800c82c:	f04f 30ff 	mov.w	r0, #4294967295
 800c830:	e7e9      	b.n	800c806 <__ssputs_r+0x88>
	...

0800c834 <_svfiprintf_r>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	4698      	mov	r8, r3
 800c83a:	898b      	ldrh	r3, [r1, #12]
 800c83c:	061b      	lsls	r3, r3, #24
 800c83e:	b09d      	sub	sp, #116	; 0x74
 800c840:	4607      	mov	r7, r0
 800c842:	460d      	mov	r5, r1
 800c844:	4614      	mov	r4, r2
 800c846:	d50e      	bpl.n	800c866 <_svfiprintf_r+0x32>
 800c848:	690b      	ldr	r3, [r1, #16]
 800c84a:	b963      	cbnz	r3, 800c866 <_svfiprintf_r+0x32>
 800c84c:	2140      	movs	r1, #64	; 0x40
 800c84e:	f7fc f865 	bl	800891c <_malloc_r>
 800c852:	6028      	str	r0, [r5, #0]
 800c854:	6128      	str	r0, [r5, #16]
 800c856:	b920      	cbnz	r0, 800c862 <_svfiprintf_r+0x2e>
 800c858:	230c      	movs	r3, #12
 800c85a:	603b      	str	r3, [r7, #0]
 800c85c:	f04f 30ff 	mov.w	r0, #4294967295
 800c860:	e0d0      	b.n	800ca04 <_svfiprintf_r+0x1d0>
 800c862:	2340      	movs	r3, #64	; 0x40
 800c864:	616b      	str	r3, [r5, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	9309      	str	r3, [sp, #36]	; 0x24
 800c86a:	2320      	movs	r3, #32
 800c86c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c870:	f8cd 800c 	str.w	r8, [sp, #12]
 800c874:	2330      	movs	r3, #48	; 0x30
 800c876:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ca1c <_svfiprintf_r+0x1e8>
 800c87a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c87e:	f04f 0901 	mov.w	r9, #1
 800c882:	4623      	mov	r3, r4
 800c884:	469a      	mov	sl, r3
 800c886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88a:	b10a      	cbz	r2, 800c890 <_svfiprintf_r+0x5c>
 800c88c:	2a25      	cmp	r2, #37	; 0x25
 800c88e:	d1f9      	bne.n	800c884 <_svfiprintf_r+0x50>
 800c890:	ebba 0b04 	subs.w	fp, sl, r4
 800c894:	d00b      	beq.n	800c8ae <_svfiprintf_r+0x7a>
 800c896:	465b      	mov	r3, fp
 800c898:	4622      	mov	r2, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff ff6e 	bl	800c77e <__ssputs_r>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	f000 80a9 	beq.w	800c9fa <_svfiprintf_r+0x1c6>
 800c8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8aa:	445a      	add	r2, fp
 800c8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80a1 	beq.w	800c9fa <_svfiprintf_r+0x1c6>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c2:	f10a 0a01 	add.w	sl, sl, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	9307      	str	r3, [sp, #28]
 800c8ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d0:	4654      	mov	r4, sl
 800c8d2:	2205      	movs	r2, #5
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	4850      	ldr	r0, [pc, #320]	; (800ca1c <_svfiprintf_r+0x1e8>)
 800c8da:	f7f3 fc79 	bl	80001d0 <memchr>
 800c8de:	9a04      	ldr	r2, [sp, #16]
 800c8e0:	b9d8      	cbnz	r0, 800c91a <_svfiprintf_r+0xe6>
 800c8e2:	06d0      	lsls	r0, r2, #27
 800c8e4:	bf44      	itt	mi
 800c8e6:	2320      	movmi	r3, #32
 800c8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ec:	0711      	lsls	r1, r2, #28
 800c8ee:	bf44      	itt	mi
 800c8f0:	232b      	movmi	r3, #43	; 0x2b
 800c8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fc:	d015      	beq.n	800c92a <_svfiprintf_r+0xf6>
 800c8fe:	9a07      	ldr	r2, [sp, #28]
 800c900:	4654      	mov	r4, sl
 800c902:	2000      	movs	r0, #0
 800c904:	f04f 0c0a 	mov.w	ip, #10
 800c908:	4621      	mov	r1, r4
 800c90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c90e:	3b30      	subs	r3, #48	; 0x30
 800c910:	2b09      	cmp	r3, #9
 800c912:	d94d      	bls.n	800c9b0 <_svfiprintf_r+0x17c>
 800c914:	b1b0      	cbz	r0, 800c944 <_svfiprintf_r+0x110>
 800c916:	9207      	str	r2, [sp, #28]
 800c918:	e014      	b.n	800c944 <_svfiprintf_r+0x110>
 800c91a:	eba0 0308 	sub.w	r3, r0, r8
 800c91e:	fa09 f303 	lsl.w	r3, r9, r3
 800c922:	4313      	orrs	r3, r2
 800c924:	9304      	str	r3, [sp, #16]
 800c926:	46a2      	mov	sl, r4
 800c928:	e7d2      	b.n	800c8d0 <_svfiprintf_r+0x9c>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	9103      	str	r1, [sp, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfbb      	ittet	lt
 800c936:	425b      	neglt	r3, r3
 800c938:	f042 0202 	orrlt.w	r2, r2, #2
 800c93c:	9307      	strge	r3, [sp, #28]
 800c93e:	9307      	strlt	r3, [sp, #28]
 800c940:	bfb8      	it	lt
 800c942:	9204      	strlt	r2, [sp, #16]
 800c944:	7823      	ldrb	r3, [r4, #0]
 800c946:	2b2e      	cmp	r3, #46	; 0x2e
 800c948:	d10c      	bne.n	800c964 <_svfiprintf_r+0x130>
 800c94a:	7863      	ldrb	r3, [r4, #1]
 800c94c:	2b2a      	cmp	r3, #42	; 0x2a
 800c94e:	d134      	bne.n	800c9ba <_svfiprintf_r+0x186>
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	1d1a      	adds	r2, r3, #4
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	9203      	str	r2, [sp, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfb8      	it	lt
 800c95c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c960:	3402      	adds	r4, #2
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ca2c <_svfiprintf_r+0x1f8>
 800c968:	7821      	ldrb	r1, [r4, #0]
 800c96a:	2203      	movs	r2, #3
 800c96c:	4650      	mov	r0, sl
 800c96e:	f7f3 fc2f 	bl	80001d0 <memchr>
 800c972:	b138      	cbz	r0, 800c984 <_svfiprintf_r+0x150>
 800c974:	9b04      	ldr	r3, [sp, #16]
 800c976:	eba0 000a 	sub.w	r0, r0, sl
 800c97a:	2240      	movs	r2, #64	; 0x40
 800c97c:	4082      	lsls	r2, r0
 800c97e:	4313      	orrs	r3, r2
 800c980:	3401      	adds	r4, #1
 800c982:	9304      	str	r3, [sp, #16]
 800c984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c988:	4825      	ldr	r0, [pc, #148]	; (800ca20 <_svfiprintf_r+0x1ec>)
 800c98a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c98e:	2206      	movs	r2, #6
 800c990:	f7f3 fc1e 	bl	80001d0 <memchr>
 800c994:	2800      	cmp	r0, #0
 800c996:	d038      	beq.n	800ca0a <_svfiprintf_r+0x1d6>
 800c998:	4b22      	ldr	r3, [pc, #136]	; (800ca24 <_svfiprintf_r+0x1f0>)
 800c99a:	bb1b      	cbnz	r3, 800c9e4 <_svfiprintf_r+0x1b0>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	3307      	adds	r3, #7
 800c9a0:	f023 0307 	bic.w	r3, r3, #7
 800c9a4:	3308      	adds	r3, #8
 800c9a6:	9303      	str	r3, [sp, #12]
 800c9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9aa:	4433      	add	r3, r6
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	e768      	b.n	800c882 <_svfiprintf_r+0x4e>
 800c9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	e7a6      	b.n	800c908 <_svfiprintf_r+0xd4>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	3401      	adds	r4, #1
 800c9be:	9305      	str	r3, [sp, #20]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	f04f 0c0a 	mov.w	ip, #10
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9cc:	3a30      	subs	r2, #48	; 0x30
 800c9ce:	2a09      	cmp	r2, #9
 800c9d0:	d903      	bls.n	800c9da <_svfiprintf_r+0x1a6>
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0c6      	beq.n	800c964 <_svfiprintf_r+0x130>
 800c9d6:	9105      	str	r1, [sp, #20]
 800c9d8:	e7c4      	b.n	800c964 <_svfiprintf_r+0x130>
 800c9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9de:	4604      	mov	r4, r0
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e7f0      	b.n	800c9c6 <_svfiprintf_r+0x192>
 800c9e4:	ab03      	add	r3, sp, #12
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	; (800ca28 <_svfiprintf_r+0x1f4>)
 800c9ec:	a904      	add	r1, sp, #16
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f7fc ff04 	bl	80097fc <_printf_float>
 800c9f4:	1c42      	adds	r2, r0, #1
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	d1d6      	bne.n	800c9a8 <_svfiprintf_r+0x174>
 800c9fa:	89ab      	ldrh	r3, [r5, #12]
 800c9fc:	065b      	lsls	r3, r3, #25
 800c9fe:	f53f af2d 	bmi.w	800c85c <_svfiprintf_r+0x28>
 800ca02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca04:	b01d      	add	sp, #116	; 0x74
 800ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0a:	ab03      	add	r3, sp, #12
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	462a      	mov	r2, r5
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <_svfiprintf_r+0x1f4>)
 800ca12:	a904      	add	r1, sp, #16
 800ca14:	4638      	mov	r0, r7
 800ca16:	f7fd f995 	bl	8009d44 <_printf_i>
 800ca1a:	e7eb      	b.n	800c9f4 <_svfiprintf_r+0x1c0>
 800ca1c:	0800df4c 	.word	0x0800df4c
 800ca20:	0800df56 	.word	0x0800df56
 800ca24:	080097fd 	.word	0x080097fd
 800ca28:	0800c77f 	.word	0x0800c77f
 800ca2c:	0800df52 	.word	0x0800df52

0800ca30 <_sungetc_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	1c4b      	adds	r3, r1, #1
 800ca34:	4614      	mov	r4, r2
 800ca36:	d103      	bne.n	800ca40 <_sungetc_r+0x10>
 800ca38:	f04f 35ff 	mov.w	r5, #4294967295
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	8993      	ldrh	r3, [r2, #12]
 800ca42:	f023 0320 	bic.w	r3, r3, #32
 800ca46:	8193      	strh	r3, [r2, #12]
 800ca48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca4a:	6852      	ldr	r2, [r2, #4]
 800ca4c:	b2cd      	uxtb	r5, r1
 800ca4e:	b18b      	cbz	r3, 800ca74 <_sungetc_r+0x44>
 800ca50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ca52:	4293      	cmp	r3, r2
 800ca54:	dd08      	ble.n	800ca68 <_sungetc_r+0x38>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	1e5a      	subs	r2, r3, #1
 800ca5a:	6022      	str	r2, [r4, #0]
 800ca5c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ca60:	6863      	ldr	r3, [r4, #4]
 800ca62:	3301      	adds	r3, #1
 800ca64:	6063      	str	r3, [r4, #4]
 800ca66:	e7e9      	b.n	800ca3c <_sungetc_r+0xc>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f000 fbe8 	bl	800d23e <__submore>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d0f1      	beq.n	800ca56 <_sungetc_r+0x26>
 800ca72:	e7e1      	b.n	800ca38 <_sungetc_r+0x8>
 800ca74:	6921      	ldr	r1, [r4, #16]
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	b151      	cbz	r1, 800ca90 <_sungetc_r+0x60>
 800ca7a:	4299      	cmp	r1, r3
 800ca7c:	d208      	bcs.n	800ca90 <_sungetc_r+0x60>
 800ca7e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ca82:	42a9      	cmp	r1, r5
 800ca84:	d104      	bne.n	800ca90 <_sungetc_r+0x60>
 800ca86:	3b01      	subs	r3, #1
 800ca88:	3201      	adds	r2, #1
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	6062      	str	r2, [r4, #4]
 800ca8e:	e7d5      	b.n	800ca3c <_sungetc_r+0xc>
 800ca90:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ca94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca98:	6363      	str	r3, [r4, #52]	; 0x34
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ca9e:	4623      	mov	r3, r4
 800caa0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	2301      	movs	r3, #1
 800caa8:	e7dc      	b.n	800ca64 <_sungetc_r+0x34>

0800caaa <__ssrefill_r>:
 800caaa:	b510      	push	{r4, lr}
 800caac:	460c      	mov	r4, r1
 800caae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cab0:	b169      	cbz	r1, 800cace <__ssrefill_r+0x24>
 800cab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab6:	4299      	cmp	r1, r3
 800cab8:	d001      	beq.n	800cabe <__ssrefill_r+0x14>
 800caba:	f7fe fd63 	bl	800b584 <_free_r>
 800cabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	2000      	movs	r0, #0
 800cac4:	6360      	str	r0, [r4, #52]	; 0x34
 800cac6:	b113      	cbz	r3, 800cace <__ssrefill_r+0x24>
 800cac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800caca:	6023      	str	r3, [r4, #0]
 800cacc:	bd10      	pop	{r4, pc}
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	2300      	movs	r3, #0
 800cad4:	6063      	str	r3, [r4, #4]
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f043 0320 	orr.w	r3, r3, #32
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	f04f 30ff 	mov.w	r0, #4294967295
 800cae2:	e7f3      	b.n	800cacc <__ssrefill_r+0x22>

0800cae4 <__ssvfiscanf_r>:
 800cae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae8:	460c      	mov	r4, r1
 800caea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800caee:	2100      	movs	r1, #0
 800caf0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800caf4:	49a6      	ldr	r1, [pc, #664]	; (800cd90 <__ssvfiscanf_r+0x2ac>)
 800caf6:	91a0      	str	r1, [sp, #640]	; 0x280
 800caf8:	f10d 0804 	add.w	r8, sp, #4
 800cafc:	49a5      	ldr	r1, [pc, #660]	; (800cd94 <__ssvfiscanf_r+0x2b0>)
 800cafe:	4fa6      	ldr	r7, [pc, #664]	; (800cd98 <__ssvfiscanf_r+0x2b4>)
 800cb00:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cd9c <__ssvfiscanf_r+0x2b8>
 800cb04:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cb08:	4606      	mov	r6, r0
 800cb0a:	91a1      	str	r1, [sp, #644]	; 0x284
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	7813      	ldrb	r3, [r2, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 815a 	beq.w	800cdca <__ssvfiscanf_r+0x2e6>
 800cb16:	5cf9      	ldrb	r1, [r7, r3]
 800cb18:	f011 0108 	ands.w	r1, r1, #8
 800cb1c:	f102 0501 	add.w	r5, r2, #1
 800cb20:	d019      	beq.n	800cb56 <__ssvfiscanf_r+0x72>
 800cb22:	6863      	ldr	r3, [r4, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dd0f      	ble.n	800cb48 <__ssvfiscanf_r+0x64>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	781a      	ldrb	r2, [r3, #0]
 800cb2c:	5cba      	ldrb	r2, [r7, r2]
 800cb2e:	0712      	lsls	r2, r2, #28
 800cb30:	d401      	bmi.n	800cb36 <__ssvfiscanf_r+0x52>
 800cb32:	462a      	mov	r2, r5
 800cb34:	e7eb      	b.n	800cb0e <__ssvfiscanf_r+0x2a>
 800cb36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cb38:	3201      	adds	r2, #1
 800cb3a:	9245      	str	r2, [sp, #276]	; 0x114
 800cb3c:	6862      	ldr	r2, [r4, #4]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	3a01      	subs	r2, #1
 800cb42:	6062      	str	r2, [r4, #4]
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	e7ec      	b.n	800cb22 <__ssvfiscanf_r+0x3e>
 800cb48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	4798      	blx	r3
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d0e9      	beq.n	800cb28 <__ssvfiscanf_r+0x44>
 800cb54:	e7ed      	b.n	800cb32 <__ssvfiscanf_r+0x4e>
 800cb56:	2b25      	cmp	r3, #37	; 0x25
 800cb58:	d012      	beq.n	800cb80 <__ssvfiscanf_r+0x9c>
 800cb5a:	469a      	mov	sl, r3
 800cb5c:	6863      	ldr	r3, [r4, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f340 8091 	ble.w	800cc86 <__ssvfiscanf_r+0x1a2>
 800cb64:	6822      	ldr	r2, [r4, #0]
 800cb66:	7813      	ldrb	r3, [r2, #0]
 800cb68:	4553      	cmp	r3, sl
 800cb6a:	f040 812e 	bne.w	800cdca <__ssvfiscanf_r+0x2e6>
 800cb6e:	6863      	ldr	r3, [r4, #4]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	6063      	str	r3, [r4, #4]
 800cb74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cb76:	3201      	adds	r2, #1
 800cb78:	3301      	adds	r3, #1
 800cb7a:	6022      	str	r2, [r4, #0]
 800cb7c:	9345      	str	r3, [sp, #276]	; 0x114
 800cb7e:	e7d8      	b.n	800cb32 <__ssvfiscanf_r+0x4e>
 800cb80:	9141      	str	r1, [sp, #260]	; 0x104
 800cb82:	9143      	str	r1, [sp, #268]	; 0x10c
 800cb84:	7853      	ldrb	r3, [r2, #1]
 800cb86:	2b2a      	cmp	r3, #42	; 0x2a
 800cb88:	bf02      	ittt	eq
 800cb8a:	2310      	moveq	r3, #16
 800cb8c:	1c95      	addeq	r5, r2, #2
 800cb8e:	9341      	streq	r3, [sp, #260]	; 0x104
 800cb90:	220a      	movs	r2, #10
 800cb92:	46aa      	mov	sl, r5
 800cb94:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cb98:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cb9c:	2b09      	cmp	r3, #9
 800cb9e:	d91c      	bls.n	800cbda <__ssvfiscanf_r+0xf6>
 800cba0:	487e      	ldr	r0, [pc, #504]	; (800cd9c <__ssvfiscanf_r+0x2b8>)
 800cba2:	2203      	movs	r2, #3
 800cba4:	f7f3 fb14 	bl	80001d0 <memchr>
 800cba8:	b138      	cbz	r0, 800cbba <__ssvfiscanf_r+0xd6>
 800cbaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cbac:	eba0 0009 	sub.w	r0, r0, r9
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	4083      	lsls	r3, r0
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	9341      	str	r3, [sp, #260]	; 0x104
 800cbb8:	4655      	mov	r5, sl
 800cbba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cbbe:	2b78      	cmp	r3, #120	; 0x78
 800cbc0:	d806      	bhi.n	800cbd0 <__ssvfiscanf_r+0xec>
 800cbc2:	2b57      	cmp	r3, #87	; 0x57
 800cbc4:	d810      	bhi.n	800cbe8 <__ssvfiscanf_r+0x104>
 800cbc6:	2b25      	cmp	r3, #37	; 0x25
 800cbc8:	d0c7      	beq.n	800cb5a <__ssvfiscanf_r+0x76>
 800cbca:	d857      	bhi.n	800cc7c <__ssvfiscanf_r+0x198>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d065      	beq.n	800cc9c <__ssvfiscanf_r+0x1b8>
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	9347      	str	r3, [sp, #284]	; 0x11c
 800cbd4:	230a      	movs	r3, #10
 800cbd6:	9342      	str	r3, [sp, #264]	; 0x108
 800cbd8:	e076      	b.n	800ccc8 <__ssvfiscanf_r+0x1e4>
 800cbda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cbdc:	fb02 1103 	mla	r1, r2, r3, r1
 800cbe0:	3930      	subs	r1, #48	; 0x30
 800cbe2:	9143      	str	r1, [sp, #268]	; 0x10c
 800cbe4:	4655      	mov	r5, sl
 800cbe6:	e7d4      	b.n	800cb92 <__ssvfiscanf_r+0xae>
 800cbe8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cbec:	2a20      	cmp	r2, #32
 800cbee:	d8ef      	bhi.n	800cbd0 <__ssvfiscanf_r+0xec>
 800cbf0:	a101      	add	r1, pc, #4	; (adr r1, 800cbf8 <__ssvfiscanf_r+0x114>)
 800cbf2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cbf6:	bf00      	nop
 800cbf8:	0800ccab 	.word	0x0800ccab
 800cbfc:	0800cbd1 	.word	0x0800cbd1
 800cc00:	0800cbd1 	.word	0x0800cbd1
 800cc04:	0800cd09 	.word	0x0800cd09
 800cc08:	0800cbd1 	.word	0x0800cbd1
 800cc0c:	0800cbd1 	.word	0x0800cbd1
 800cc10:	0800cbd1 	.word	0x0800cbd1
 800cc14:	0800cbd1 	.word	0x0800cbd1
 800cc18:	0800cbd1 	.word	0x0800cbd1
 800cc1c:	0800cbd1 	.word	0x0800cbd1
 800cc20:	0800cbd1 	.word	0x0800cbd1
 800cc24:	0800cd1f 	.word	0x0800cd1f
 800cc28:	0800cd05 	.word	0x0800cd05
 800cc2c:	0800cc83 	.word	0x0800cc83
 800cc30:	0800cc83 	.word	0x0800cc83
 800cc34:	0800cc83 	.word	0x0800cc83
 800cc38:	0800cbd1 	.word	0x0800cbd1
 800cc3c:	0800ccc1 	.word	0x0800ccc1
 800cc40:	0800cbd1 	.word	0x0800cbd1
 800cc44:	0800cbd1 	.word	0x0800cbd1
 800cc48:	0800cbd1 	.word	0x0800cbd1
 800cc4c:	0800cbd1 	.word	0x0800cbd1
 800cc50:	0800cd2f 	.word	0x0800cd2f
 800cc54:	0800ccfd 	.word	0x0800ccfd
 800cc58:	0800cca3 	.word	0x0800cca3
 800cc5c:	0800cbd1 	.word	0x0800cbd1
 800cc60:	0800cbd1 	.word	0x0800cbd1
 800cc64:	0800cd2b 	.word	0x0800cd2b
 800cc68:	0800cbd1 	.word	0x0800cbd1
 800cc6c:	0800cd05 	.word	0x0800cd05
 800cc70:	0800cbd1 	.word	0x0800cbd1
 800cc74:	0800cbd1 	.word	0x0800cbd1
 800cc78:	0800ccab 	.word	0x0800ccab
 800cc7c:	3b45      	subs	r3, #69	; 0x45
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	d8a6      	bhi.n	800cbd0 <__ssvfiscanf_r+0xec>
 800cc82:	2305      	movs	r3, #5
 800cc84:	e01f      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800cc86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	4798      	blx	r3
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	f43f af68 	beq.w	800cb64 <__ssvfiscanf_r+0x80>
 800cc94:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f040 808d 	bne.w	800cdb6 <__ssvfiscanf_r+0x2d2>
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	e08f      	b.n	800cdc2 <__ssvfiscanf_r+0x2de>
 800cca2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cca4:	f042 0220 	orr.w	r2, r2, #32
 800cca8:	9241      	str	r2, [sp, #260]	; 0x104
 800ccaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ccac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccb0:	9241      	str	r2, [sp, #260]	; 0x104
 800ccb2:	2210      	movs	r2, #16
 800ccb4:	2b6f      	cmp	r3, #111	; 0x6f
 800ccb6:	9242      	str	r2, [sp, #264]	; 0x108
 800ccb8:	bf34      	ite	cc
 800ccba:	2303      	movcc	r3, #3
 800ccbc:	2304      	movcs	r3, #4
 800ccbe:	e002      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9342      	str	r3, [sp, #264]	; 0x108
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800ccc8:	6863      	ldr	r3, [r4, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	dd3d      	ble.n	800cd4a <__ssvfiscanf_r+0x266>
 800ccce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccd0:	0659      	lsls	r1, r3, #25
 800ccd2:	d404      	bmi.n	800ccde <__ssvfiscanf_r+0x1fa>
 800ccd4:	6823      	ldr	r3, [r4, #0]
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	5cba      	ldrb	r2, [r7, r2]
 800ccda:	0712      	lsls	r2, r2, #28
 800ccdc:	d43c      	bmi.n	800cd58 <__ssvfiscanf_r+0x274>
 800ccde:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	dc4b      	bgt.n	800cd7c <__ssvfiscanf_r+0x298>
 800cce4:	466b      	mov	r3, sp
 800cce6:	4622      	mov	r2, r4
 800cce8:	a941      	add	r1, sp, #260	; 0x104
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 f872 	bl	800cdd4 <_scanf_chars>
 800ccf0:	2801      	cmp	r0, #1
 800ccf2:	d06a      	beq.n	800cdca <__ssvfiscanf_r+0x2e6>
 800ccf4:	2802      	cmp	r0, #2
 800ccf6:	f47f af1c 	bne.w	800cb32 <__ssvfiscanf_r+0x4e>
 800ccfa:	e7cb      	b.n	800cc94 <__ssvfiscanf_r+0x1b0>
 800ccfc:	2308      	movs	r3, #8
 800ccfe:	9342      	str	r3, [sp, #264]	; 0x108
 800cd00:	2304      	movs	r3, #4
 800cd02:	e7e0      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800cd04:	220a      	movs	r2, #10
 800cd06:	e7d5      	b.n	800ccb4 <__ssvfiscanf_r+0x1d0>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	f000 fa5e 	bl	800d1cc <__sccl>
 800cd10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd16:	9341      	str	r3, [sp, #260]	; 0x104
 800cd18:	4605      	mov	r5, r0
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e7d3      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800cd1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd24:	9341      	str	r3, [sp, #260]	; 0x104
 800cd26:	2300      	movs	r3, #0
 800cd28:	e7cd      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	e7cb      	b.n	800ccc6 <__ssvfiscanf_r+0x1e2>
 800cd2e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cd30:	06c3      	lsls	r3, r0, #27
 800cd32:	f53f aefe 	bmi.w	800cb32 <__ssvfiscanf_r+0x4e>
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd3a:	1d19      	adds	r1, r3, #4
 800cd3c:	9100      	str	r1, [sp, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	07c0      	lsls	r0, r0, #31
 800cd42:	bf4c      	ite	mi
 800cd44:	801a      	strhmi	r2, [r3, #0]
 800cd46:	601a      	strpl	r2, [r3, #0]
 800cd48:	e6f3      	b.n	800cb32 <__ssvfiscanf_r+0x4e>
 800cd4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4798      	blx	r3
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0bb      	beq.n	800ccce <__ssvfiscanf_r+0x1ea>
 800cd56:	e79d      	b.n	800cc94 <__ssvfiscanf_r+0x1b0>
 800cd58:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cd5a:	3201      	adds	r2, #1
 800cd5c:	9245      	str	r2, [sp, #276]	; 0x114
 800cd5e:	6862      	ldr	r2, [r4, #4]
 800cd60:	3a01      	subs	r2, #1
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	6062      	str	r2, [r4, #4]
 800cd66:	dd02      	ble.n	800cd6e <__ssvfiscanf_r+0x28a>
 800cd68:	3301      	adds	r3, #1
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	e7b2      	b.n	800ccd4 <__ssvfiscanf_r+0x1f0>
 800cd6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cd70:	4621      	mov	r1, r4
 800cd72:	4630      	mov	r0, r6
 800cd74:	4798      	blx	r3
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d0ac      	beq.n	800ccd4 <__ssvfiscanf_r+0x1f0>
 800cd7a:	e78b      	b.n	800cc94 <__ssvfiscanf_r+0x1b0>
 800cd7c:	2b04      	cmp	r3, #4
 800cd7e:	dc0f      	bgt.n	800cda0 <__ssvfiscanf_r+0x2bc>
 800cd80:	466b      	mov	r3, sp
 800cd82:	4622      	mov	r2, r4
 800cd84:	a941      	add	r1, sp, #260	; 0x104
 800cd86:	4630      	mov	r0, r6
 800cd88:	f000 f87e 	bl	800ce88 <_scanf_i>
 800cd8c:	e7b0      	b.n	800ccf0 <__ssvfiscanf_r+0x20c>
 800cd8e:	bf00      	nop
 800cd90:	0800ca31 	.word	0x0800ca31
 800cd94:	0800caab 	.word	0x0800caab
 800cd98:	0800dbc9 	.word	0x0800dbc9
 800cd9c:	0800df52 	.word	0x0800df52
 800cda0:	4b0b      	ldr	r3, [pc, #44]	; (800cdd0 <__ssvfiscanf_r+0x2ec>)
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f43f aec5 	beq.w	800cb32 <__ssvfiscanf_r+0x4e>
 800cda8:	466b      	mov	r3, sp
 800cdaa:	4622      	mov	r2, r4
 800cdac:	a941      	add	r1, sp, #260	; 0x104
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7fd f8ea 	bl	8009f88 <_scanf_float>
 800cdb4:	e79c      	b.n	800ccf0 <__ssvfiscanf_r+0x20c>
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cdbc:	bf18      	it	ne
 800cdbe:	f04f 30ff 	movne.w	r0, #4294967295
 800cdc2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cdcc:	e7f9      	b.n	800cdc2 <__ssvfiscanf_r+0x2de>
 800cdce:	bf00      	nop
 800cdd0:	08009f89 	.word	0x08009f89

0800cdd4 <_scanf_chars>:
 800cdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	4615      	mov	r5, r2
 800cdda:	688a      	ldr	r2, [r1, #8]
 800cddc:	4680      	mov	r8, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	b932      	cbnz	r2, 800cdf0 <_scanf_chars+0x1c>
 800cde2:	698a      	ldr	r2, [r1, #24]
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	bf0c      	ite	eq
 800cde8:	2201      	moveq	r2, #1
 800cdea:	f04f 32ff 	movne.w	r2, #4294967295
 800cdee:	608a      	str	r2, [r1, #8]
 800cdf0:	6822      	ldr	r2, [r4, #0]
 800cdf2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ce84 <_scanf_chars+0xb0>
 800cdf6:	06d1      	lsls	r1, r2, #27
 800cdf8:	bf5f      	itttt	pl
 800cdfa:	681a      	ldrpl	r2, [r3, #0]
 800cdfc:	1d11      	addpl	r1, r2, #4
 800cdfe:	6019      	strpl	r1, [r3, #0]
 800ce00:	6816      	ldrpl	r6, [r2, #0]
 800ce02:	2700      	movs	r7, #0
 800ce04:	69a0      	ldr	r0, [r4, #24]
 800ce06:	b188      	cbz	r0, 800ce2c <_scanf_chars+0x58>
 800ce08:	2801      	cmp	r0, #1
 800ce0a:	d107      	bne.n	800ce1c <_scanf_chars+0x48>
 800ce0c:	682a      	ldr	r2, [r5, #0]
 800ce0e:	7811      	ldrb	r1, [r2, #0]
 800ce10:	6962      	ldr	r2, [r4, #20]
 800ce12:	5c52      	ldrb	r2, [r2, r1]
 800ce14:	b952      	cbnz	r2, 800ce2c <_scanf_chars+0x58>
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	d031      	beq.n	800ce7e <_scanf_chars+0xaa>
 800ce1a:	e022      	b.n	800ce62 <_scanf_chars+0x8e>
 800ce1c:	2802      	cmp	r0, #2
 800ce1e:	d120      	bne.n	800ce62 <_scanf_chars+0x8e>
 800ce20:	682b      	ldr	r3, [r5, #0]
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ce28:	071b      	lsls	r3, r3, #28
 800ce2a:	d41a      	bmi.n	800ce62 <_scanf_chars+0x8e>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	06da      	lsls	r2, r3, #27
 800ce30:	bf5e      	ittt	pl
 800ce32:	682b      	ldrpl	r3, [r5, #0]
 800ce34:	781b      	ldrbpl	r3, [r3, #0]
 800ce36:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ce3a:	682a      	ldr	r2, [r5, #0]
 800ce3c:	686b      	ldr	r3, [r5, #4]
 800ce3e:	3201      	adds	r2, #1
 800ce40:	602a      	str	r2, [r5, #0]
 800ce42:	68a2      	ldr	r2, [r4, #8]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	3a01      	subs	r2, #1
 800ce48:	606b      	str	r3, [r5, #4]
 800ce4a:	3701      	adds	r7, #1
 800ce4c:	60a2      	str	r2, [r4, #8]
 800ce4e:	b142      	cbz	r2, 800ce62 <_scanf_chars+0x8e>
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	dcd7      	bgt.n	800ce04 <_scanf_chars+0x30>
 800ce54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4640      	mov	r0, r8
 800ce5c:	4798      	blx	r3
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d0d0      	beq.n	800ce04 <_scanf_chars+0x30>
 800ce62:	6823      	ldr	r3, [r4, #0]
 800ce64:	f013 0310 	ands.w	r3, r3, #16
 800ce68:	d105      	bne.n	800ce76 <_scanf_chars+0xa2>
 800ce6a:	68e2      	ldr	r2, [r4, #12]
 800ce6c:	3201      	adds	r2, #1
 800ce6e:	60e2      	str	r2, [r4, #12]
 800ce70:	69a2      	ldr	r2, [r4, #24]
 800ce72:	b102      	cbz	r2, 800ce76 <_scanf_chars+0xa2>
 800ce74:	7033      	strb	r3, [r6, #0]
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	443b      	add	r3, r7
 800ce7a:	6123      	str	r3, [r4, #16]
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce82:	bf00      	nop
 800ce84:	0800dbc9 	.word	0x0800dbc9

0800ce88 <_scanf_i>:
 800ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce8c:	4698      	mov	r8, r3
 800ce8e:	4b74      	ldr	r3, [pc, #464]	; (800d060 <_scanf_i+0x1d8>)
 800ce90:	460c      	mov	r4, r1
 800ce92:	4682      	mov	sl, r0
 800ce94:	4616      	mov	r6, r2
 800ce96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	ab03      	add	r3, sp, #12
 800ce9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cea2:	4b70      	ldr	r3, [pc, #448]	; (800d064 <_scanf_i+0x1dc>)
 800cea4:	69a1      	ldr	r1, [r4, #24]
 800cea6:	4a70      	ldr	r2, [pc, #448]	; (800d068 <_scanf_i+0x1e0>)
 800cea8:	2903      	cmp	r1, #3
 800ceaa:	bf18      	it	ne
 800ceac:	461a      	movne	r2, r3
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	9201      	str	r2, [sp, #4]
 800ceb2:	1e5a      	subs	r2, r3, #1
 800ceb4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ceb8:	bf88      	it	hi
 800ceba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cebe:	4627      	mov	r7, r4
 800cec0:	bf82      	ittt	hi
 800cec2:	eb03 0905 	addhi.w	r9, r3, r5
 800cec6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ceca:	60a3      	strhi	r3, [r4, #8]
 800cecc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ced0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ced4:	bf98      	it	ls
 800ced6:	f04f 0900 	movls.w	r9, #0
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	463d      	mov	r5, r7
 800cede:	f04f 0b00 	mov.w	fp, #0
 800cee2:	6831      	ldr	r1, [r6, #0]
 800cee4:	ab03      	add	r3, sp, #12
 800cee6:	7809      	ldrb	r1, [r1, #0]
 800cee8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ceec:	2202      	movs	r2, #2
 800ceee:	f7f3 f96f 	bl	80001d0 <memchr>
 800cef2:	b328      	cbz	r0, 800cf40 <_scanf_i+0xb8>
 800cef4:	f1bb 0f01 	cmp.w	fp, #1
 800cef8:	d159      	bne.n	800cfae <_scanf_i+0x126>
 800cefa:	6862      	ldr	r2, [r4, #4]
 800cefc:	b92a      	cbnz	r2, 800cf0a <_scanf_i+0x82>
 800cefe:	6822      	ldr	r2, [r4, #0]
 800cf00:	2308      	movs	r3, #8
 800cf02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf06:	6063      	str	r3, [r4, #4]
 800cf08:	6022      	str	r2, [r4, #0]
 800cf0a:	6822      	ldr	r2, [r4, #0]
 800cf0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cf10:	6022      	str	r2, [r4, #0]
 800cf12:	68a2      	ldr	r2, [r4, #8]
 800cf14:	1e51      	subs	r1, r2, #1
 800cf16:	60a1      	str	r1, [r4, #8]
 800cf18:	b192      	cbz	r2, 800cf40 <_scanf_i+0xb8>
 800cf1a:	6832      	ldr	r2, [r6, #0]
 800cf1c:	1c51      	adds	r1, r2, #1
 800cf1e:	6031      	str	r1, [r6, #0]
 800cf20:	7812      	ldrb	r2, [r2, #0]
 800cf22:	f805 2b01 	strb.w	r2, [r5], #1
 800cf26:	6872      	ldr	r2, [r6, #4]
 800cf28:	3a01      	subs	r2, #1
 800cf2a:	2a00      	cmp	r2, #0
 800cf2c:	6072      	str	r2, [r6, #4]
 800cf2e:	dc07      	bgt.n	800cf40 <_scanf_i+0xb8>
 800cf30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cf34:	4631      	mov	r1, r6
 800cf36:	4650      	mov	r0, sl
 800cf38:	4790      	blx	r2
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f040 8085 	bne.w	800d04a <_scanf_i+0x1c2>
 800cf40:	f10b 0b01 	add.w	fp, fp, #1
 800cf44:	f1bb 0f03 	cmp.w	fp, #3
 800cf48:	d1cb      	bne.n	800cee2 <_scanf_i+0x5a>
 800cf4a:	6863      	ldr	r3, [r4, #4]
 800cf4c:	b90b      	cbnz	r3, 800cf52 <_scanf_i+0xca>
 800cf4e:	230a      	movs	r3, #10
 800cf50:	6063      	str	r3, [r4, #4]
 800cf52:	6863      	ldr	r3, [r4, #4]
 800cf54:	4945      	ldr	r1, [pc, #276]	; (800d06c <_scanf_i+0x1e4>)
 800cf56:	6960      	ldr	r0, [r4, #20]
 800cf58:	1ac9      	subs	r1, r1, r3
 800cf5a:	f000 f937 	bl	800d1cc <__sccl>
 800cf5e:	f04f 0b00 	mov.w	fp, #0
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	6822      	ldr	r2, [r4, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d03d      	beq.n	800cfe6 <_scanf_i+0x15e>
 800cf6a:	6831      	ldr	r1, [r6, #0]
 800cf6c:	6960      	ldr	r0, [r4, #20]
 800cf6e:	f891 c000 	ldrb.w	ip, [r1]
 800cf72:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d035      	beq.n	800cfe6 <_scanf_i+0x15e>
 800cf7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cf7e:	d124      	bne.n	800cfca <_scanf_i+0x142>
 800cf80:	0510      	lsls	r0, r2, #20
 800cf82:	d522      	bpl.n	800cfca <_scanf_i+0x142>
 800cf84:	f10b 0b01 	add.w	fp, fp, #1
 800cf88:	f1b9 0f00 	cmp.w	r9, #0
 800cf8c:	d003      	beq.n	800cf96 <_scanf_i+0x10e>
 800cf8e:	3301      	adds	r3, #1
 800cf90:	f109 39ff 	add.w	r9, r9, #4294967295
 800cf94:	60a3      	str	r3, [r4, #8]
 800cf96:	6873      	ldr	r3, [r6, #4]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	6073      	str	r3, [r6, #4]
 800cf9e:	dd1b      	ble.n	800cfd8 <_scanf_i+0x150>
 800cfa0:	6833      	ldr	r3, [r6, #0]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	6033      	str	r3, [r6, #0]
 800cfa6:	68a3      	ldr	r3, [r4, #8]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	60a3      	str	r3, [r4, #8]
 800cfac:	e7d9      	b.n	800cf62 <_scanf_i+0xda>
 800cfae:	f1bb 0f02 	cmp.w	fp, #2
 800cfb2:	d1ae      	bne.n	800cf12 <_scanf_i+0x8a>
 800cfb4:	6822      	ldr	r2, [r4, #0]
 800cfb6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cfba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cfbe:	d1bf      	bne.n	800cf40 <_scanf_i+0xb8>
 800cfc0:	2310      	movs	r3, #16
 800cfc2:	6063      	str	r3, [r4, #4]
 800cfc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cfc8:	e7a2      	b.n	800cf10 <_scanf_i+0x88>
 800cfca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cfce:	6022      	str	r2, [r4, #0]
 800cfd0:	780b      	ldrb	r3, [r1, #0]
 800cfd2:	f805 3b01 	strb.w	r3, [r5], #1
 800cfd6:	e7de      	b.n	800cf96 <_scanf_i+0x10e>
 800cfd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4650      	mov	r0, sl
 800cfe0:	4798      	blx	r3
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d0df      	beq.n	800cfa6 <_scanf_i+0x11e>
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	05d9      	lsls	r1, r3, #23
 800cfea:	d50d      	bpl.n	800d008 <_scanf_i+0x180>
 800cfec:	42bd      	cmp	r5, r7
 800cfee:	d909      	bls.n	800d004 <_scanf_i+0x17c>
 800cff0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cff8:	4632      	mov	r2, r6
 800cffa:	4650      	mov	r0, sl
 800cffc:	4798      	blx	r3
 800cffe:	f105 39ff 	add.w	r9, r5, #4294967295
 800d002:	464d      	mov	r5, r9
 800d004:	42bd      	cmp	r5, r7
 800d006:	d028      	beq.n	800d05a <_scanf_i+0x1d2>
 800d008:	6822      	ldr	r2, [r4, #0]
 800d00a:	f012 0210 	ands.w	r2, r2, #16
 800d00e:	d113      	bne.n	800d038 <_scanf_i+0x1b0>
 800d010:	702a      	strb	r2, [r5, #0]
 800d012:	6863      	ldr	r3, [r4, #4]
 800d014:	9e01      	ldr	r6, [sp, #4]
 800d016:	4639      	mov	r1, r7
 800d018:	4650      	mov	r0, sl
 800d01a:	47b0      	blx	r6
 800d01c:	f8d8 3000 	ldr.w	r3, [r8]
 800d020:	6821      	ldr	r1, [r4, #0]
 800d022:	1d1a      	adds	r2, r3, #4
 800d024:	f8c8 2000 	str.w	r2, [r8]
 800d028:	f011 0f20 	tst.w	r1, #32
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	d00f      	beq.n	800d050 <_scanf_i+0x1c8>
 800d030:	6018      	str	r0, [r3, #0]
 800d032:	68e3      	ldr	r3, [r4, #12]
 800d034:	3301      	adds	r3, #1
 800d036:	60e3      	str	r3, [r4, #12]
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	1bed      	subs	r5, r5, r7
 800d03c:	445d      	add	r5, fp
 800d03e:	442b      	add	r3, r5
 800d040:	6123      	str	r3, [r4, #16]
 800d042:	2000      	movs	r0, #0
 800d044:	b007      	add	sp, #28
 800d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04a:	f04f 0b00 	mov.w	fp, #0
 800d04e:	e7ca      	b.n	800cfe6 <_scanf_i+0x15e>
 800d050:	07ca      	lsls	r2, r1, #31
 800d052:	bf4c      	ite	mi
 800d054:	8018      	strhmi	r0, [r3, #0]
 800d056:	6018      	strpl	r0, [r3, #0]
 800d058:	e7eb      	b.n	800d032 <_scanf_i+0x1aa>
 800d05a:	2001      	movs	r0, #1
 800d05c:	e7f2      	b.n	800d044 <_scanf_i+0x1bc>
 800d05e:	bf00      	nop
 800d060:	0800db48 	.word	0x0800db48
 800d064:	0800d435 	.word	0x0800d435
 800d068:	0800c761 	.word	0x0800c761
 800d06c:	0800df6d 	.word	0x0800df6d

0800d070 <__sflush_r>:
 800d070:	898a      	ldrh	r2, [r1, #12]
 800d072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d076:	4605      	mov	r5, r0
 800d078:	0710      	lsls	r0, r2, #28
 800d07a:	460c      	mov	r4, r1
 800d07c:	d458      	bmi.n	800d130 <__sflush_r+0xc0>
 800d07e:	684b      	ldr	r3, [r1, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc05      	bgt.n	800d090 <__sflush_r+0x20>
 800d084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	dc02      	bgt.n	800d090 <__sflush_r+0x20>
 800d08a:	2000      	movs	r0, #0
 800d08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d092:	2e00      	cmp	r6, #0
 800d094:	d0f9      	beq.n	800d08a <__sflush_r+0x1a>
 800d096:	2300      	movs	r3, #0
 800d098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d09c:	682f      	ldr	r7, [r5, #0]
 800d09e:	6a21      	ldr	r1, [r4, #32]
 800d0a0:	602b      	str	r3, [r5, #0]
 800d0a2:	d032      	beq.n	800d10a <__sflush_r+0x9a>
 800d0a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	075a      	lsls	r2, r3, #29
 800d0aa:	d505      	bpl.n	800d0b8 <__sflush_r+0x48>
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	1ac0      	subs	r0, r0, r3
 800d0b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0b2:	b10b      	cbz	r3, 800d0b8 <__sflush_r+0x48>
 800d0b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0b6:	1ac0      	subs	r0, r0, r3
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0be:	6a21      	ldr	r1, [r4, #32]
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	47b0      	blx	r6
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	d106      	bne.n	800d0d8 <__sflush_r+0x68>
 800d0ca:	6829      	ldr	r1, [r5, #0]
 800d0cc:	291d      	cmp	r1, #29
 800d0ce:	d82b      	bhi.n	800d128 <__sflush_r+0xb8>
 800d0d0:	4a29      	ldr	r2, [pc, #164]	; (800d178 <__sflush_r+0x108>)
 800d0d2:	410a      	asrs	r2, r1
 800d0d4:	07d6      	lsls	r6, r2, #31
 800d0d6:	d427      	bmi.n	800d128 <__sflush_r+0xb8>
 800d0d8:	2200      	movs	r2, #0
 800d0da:	6062      	str	r2, [r4, #4]
 800d0dc:	04d9      	lsls	r1, r3, #19
 800d0de:	6922      	ldr	r2, [r4, #16]
 800d0e0:	6022      	str	r2, [r4, #0]
 800d0e2:	d504      	bpl.n	800d0ee <__sflush_r+0x7e>
 800d0e4:	1c42      	adds	r2, r0, #1
 800d0e6:	d101      	bne.n	800d0ec <__sflush_r+0x7c>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b903      	cbnz	r3, 800d0ee <__sflush_r+0x7e>
 800d0ec:	6560      	str	r0, [r4, #84]	; 0x54
 800d0ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0f0:	602f      	str	r7, [r5, #0]
 800d0f2:	2900      	cmp	r1, #0
 800d0f4:	d0c9      	beq.n	800d08a <__sflush_r+0x1a>
 800d0f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0fa:	4299      	cmp	r1, r3
 800d0fc:	d002      	beq.n	800d104 <__sflush_r+0x94>
 800d0fe:	4628      	mov	r0, r5
 800d100:	f7fe fa40 	bl	800b584 <_free_r>
 800d104:	2000      	movs	r0, #0
 800d106:	6360      	str	r0, [r4, #52]	; 0x34
 800d108:	e7c0      	b.n	800d08c <__sflush_r+0x1c>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4628      	mov	r0, r5
 800d10e:	47b0      	blx	r6
 800d110:	1c41      	adds	r1, r0, #1
 800d112:	d1c8      	bne.n	800d0a6 <__sflush_r+0x36>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0c5      	beq.n	800d0a6 <__sflush_r+0x36>
 800d11a:	2b1d      	cmp	r3, #29
 800d11c:	d001      	beq.n	800d122 <__sflush_r+0xb2>
 800d11e:	2b16      	cmp	r3, #22
 800d120:	d101      	bne.n	800d126 <__sflush_r+0xb6>
 800d122:	602f      	str	r7, [r5, #0]
 800d124:	e7b1      	b.n	800d08a <__sflush_r+0x1a>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12c:	81a3      	strh	r3, [r4, #12]
 800d12e:	e7ad      	b.n	800d08c <__sflush_r+0x1c>
 800d130:	690f      	ldr	r7, [r1, #16]
 800d132:	2f00      	cmp	r7, #0
 800d134:	d0a9      	beq.n	800d08a <__sflush_r+0x1a>
 800d136:	0793      	lsls	r3, r2, #30
 800d138:	680e      	ldr	r6, [r1, #0]
 800d13a:	bf08      	it	eq
 800d13c:	694b      	ldreq	r3, [r1, #20]
 800d13e:	600f      	str	r7, [r1, #0]
 800d140:	bf18      	it	ne
 800d142:	2300      	movne	r3, #0
 800d144:	eba6 0807 	sub.w	r8, r6, r7
 800d148:	608b      	str	r3, [r1, #8]
 800d14a:	f1b8 0f00 	cmp.w	r8, #0
 800d14e:	dd9c      	ble.n	800d08a <__sflush_r+0x1a>
 800d150:	6a21      	ldr	r1, [r4, #32]
 800d152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d154:	4643      	mov	r3, r8
 800d156:	463a      	mov	r2, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	47b0      	blx	r6
 800d15c:	2800      	cmp	r0, #0
 800d15e:	dc06      	bgt.n	800d16e <__sflush_r+0xfe>
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	e78e      	b.n	800d08c <__sflush_r+0x1c>
 800d16e:	4407      	add	r7, r0
 800d170:	eba8 0800 	sub.w	r8, r8, r0
 800d174:	e7e9      	b.n	800d14a <__sflush_r+0xda>
 800d176:	bf00      	nop
 800d178:	dfbffffe 	.word	0xdfbffffe

0800d17c <_fflush_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	690b      	ldr	r3, [r1, #16]
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	b913      	cbnz	r3, 800d18c <_fflush_r+0x10>
 800d186:	2500      	movs	r5, #0
 800d188:	4628      	mov	r0, r5
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	b118      	cbz	r0, 800d196 <_fflush_r+0x1a>
 800d18e:	6a03      	ldr	r3, [r0, #32]
 800d190:	b90b      	cbnz	r3, 800d196 <_fflush_r+0x1a>
 800d192:	f7fd f995 	bl	800a4c0 <__sinit>
 800d196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0f3      	beq.n	800d186 <_fflush_r+0xa>
 800d19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1a0:	07d0      	lsls	r0, r2, #31
 800d1a2:	d404      	bmi.n	800d1ae <_fflush_r+0x32>
 800d1a4:	0599      	lsls	r1, r3, #22
 800d1a6:	d402      	bmi.n	800d1ae <_fflush_r+0x32>
 800d1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1aa:	f7fd fb50 	bl	800a84e <__retarget_lock_acquire_recursive>
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	f7ff ff5d 	bl	800d070 <__sflush_r>
 800d1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b8:	07da      	lsls	r2, r3, #31
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	d4e4      	bmi.n	800d188 <_fflush_r+0xc>
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	059b      	lsls	r3, r3, #22
 800d1c2:	d4e1      	bmi.n	800d188 <_fflush_r+0xc>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f7fd fb43 	bl	800a850 <__retarget_lock_release_recursive>
 800d1ca:	e7dd      	b.n	800d188 <_fflush_r+0xc>

0800d1cc <__sccl>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	780b      	ldrb	r3, [r1, #0]
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	2b5e      	cmp	r3, #94	; 0x5e
 800d1d4:	bf0b      	itete	eq
 800d1d6:	784b      	ldrbeq	r3, [r1, #1]
 800d1d8:	1c4a      	addne	r2, r1, #1
 800d1da:	1c8a      	addeq	r2, r1, #2
 800d1dc:	2100      	movne	r1, #0
 800d1de:	bf08      	it	eq
 800d1e0:	2101      	moveq	r1, #1
 800d1e2:	3801      	subs	r0, #1
 800d1e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d1e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d1ec:	42a8      	cmp	r0, r5
 800d1ee:	d1fb      	bne.n	800d1e8 <__sccl+0x1c>
 800d1f0:	b90b      	cbnz	r3, 800d1f6 <__sccl+0x2a>
 800d1f2:	1e50      	subs	r0, r2, #1
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
 800d1f6:	f081 0101 	eor.w	r1, r1, #1
 800d1fa:	54e1      	strb	r1, [r4, r3]
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	4602      	mov	r2, r0
 800d200:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d204:	2d2d      	cmp	r5, #45	; 0x2d
 800d206:	d005      	beq.n	800d214 <__sccl+0x48>
 800d208:	2d5d      	cmp	r5, #93	; 0x5d
 800d20a:	d016      	beq.n	800d23a <__sccl+0x6e>
 800d20c:	2d00      	cmp	r5, #0
 800d20e:	d0f1      	beq.n	800d1f4 <__sccl+0x28>
 800d210:	462b      	mov	r3, r5
 800d212:	e7f2      	b.n	800d1fa <__sccl+0x2e>
 800d214:	7846      	ldrb	r6, [r0, #1]
 800d216:	2e5d      	cmp	r6, #93	; 0x5d
 800d218:	d0fa      	beq.n	800d210 <__sccl+0x44>
 800d21a:	42b3      	cmp	r3, r6
 800d21c:	dcf8      	bgt.n	800d210 <__sccl+0x44>
 800d21e:	3002      	adds	r0, #2
 800d220:	461a      	mov	r2, r3
 800d222:	3201      	adds	r2, #1
 800d224:	4296      	cmp	r6, r2
 800d226:	54a1      	strb	r1, [r4, r2]
 800d228:	dcfb      	bgt.n	800d222 <__sccl+0x56>
 800d22a:	1af2      	subs	r2, r6, r3
 800d22c:	3a01      	subs	r2, #1
 800d22e:	1c5d      	adds	r5, r3, #1
 800d230:	42b3      	cmp	r3, r6
 800d232:	bfa8      	it	ge
 800d234:	2200      	movge	r2, #0
 800d236:	18ab      	adds	r3, r5, r2
 800d238:	e7e1      	b.n	800d1fe <__sccl+0x32>
 800d23a:	4610      	mov	r0, r2
 800d23c:	e7da      	b.n	800d1f4 <__sccl+0x28>

0800d23e <__submore>:
 800d23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d242:	460c      	mov	r4, r1
 800d244:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d24a:	4299      	cmp	r1, r3
 800d24c:	d11d      	bne.n	800d28a <__submore+0x4c>
 800d24e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d252:	f7fb fb63 	bl	800891c <_malloc_r>
 800d256:	b918      	cbnz	r0, 800d260 <__submore+0x22>
 800d258:	f04f 30ff 	mov.w	r0, #4294967295
 800d25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d264:	63a3      	str	r3, [r4, #56]	; 0x38
 800d266:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d26a:	6360      	str	r0, [r4, #52]	; 0x34
 800d26c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d270:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d274:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d27c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d280:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d284:	6020      	str	r0, [r4, #0]
 800d286:	2000      	movs	r0, #0
 800d288:	e7e8      	b.n	800d25c <__submore+0x1e>
 800d28a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d28c:	0077      	lsls	r7, r6, #1
 800d28e:	463a      	mov	r2, r7
 800d290:	f7fb fbd0 	bl	8008a34 <_realloc_r>
 800d294:	4605      	mov	r5, r0
 800d296:	2800      	cmp	r0, #0
 800d298:	d0de      	beq.n	800d258 <__submore+0x1a>
 800d29a:	eb00 0806 	add.w	r8, r0, r6
 800d29e:	4601      	mov	r1, r0
 800d2a0:	4632      	mov	r2, r6
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	f7fd fad5 	bl	800a852 <memcpy>
 800d2a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d2ac:	f8c4 8000 	str.w	r8, [r4]
 800d2b0:	e7e9      	b.n	800d286 <__submore+0x48>

0800d2b2 <memmove>:
 800d2b2:	4288      	cmp	r0, r1
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	eb01 0402 	add.w	r4, r1, r2
 800d2ba:	d902      	bls.n	800d2c2 <memmove+0x10>
 800d2bc:	4284      	cmp	r4, r0
 800d2be:	4623      	mov	r3, r4
 800d2c0:	d807      	bhi.n	800d2d2 <memmove+0x20>
 800d2c2:	1e43      	subs	r3, r0, #1
 800d2c4:	42a1      	cmp	r1, r4
 800d2c6:	d008      	beq.n	800d2da <memmove+0x28>
 800d2c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2d0:	e7f8      	b.n	800d2c4 <memmove+0x12>
 800d2d2:	4402      	add	r2, r0
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	428a      	cmp	r2, r1
 800d2d8:	d100      	bne.n	800d2dc <memmove+0x2a>
 800d2da:	bd10      	pop	{r4, pc}
 800d2dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2e4:	e7f7      	b.n	800d2d6 <memmove+0x24>
	...

0800d2e8 <__assert_func>:
 800d2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2ea:	4614      	mov	r4, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <__assert_func+0x2c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	68d8      	ldr	r0, [r3, #12]
 800d2f6:	b14c      	cbz	r4, 800d30c <__assert_func+0x24>
 800d2f8:	4b07      	ldr	r3, [pc, #28]	; (800d318 <__assert_func+0x30>)
 800d2fa:	9100      	str	r1, [sp, #0]
 800d2fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d300:	4906      	ldr	r1, [pc, #24]	; (800d31c <__assert_func+0x34>)
 800d302:	462b      	mov	r3, r5
 800d304:	f000 f898 	bl	800d438 <fiprintf>
 800d308:	f000 f8a8 	bl	800d45c <abort>
 800d30c:	4b04      	ldr	r3, [pc, #16]	; (800d320 <__assert_func+0x38>)
 800d30e:	461c      	mov	r4, r3
 800d310:	e7f3      	b.n	800d2fa <__assert_func+0x12>
 800d312:	bf00      	nop
 800d314:	200001d8 	.word	0x200001d8
 800d318:	0800df78 	.word	0x0800df78
 800d31c:	0800df85 	.word	0x0800df85
 800d320:	0800dfb3 	.word	0x0800dfb3

0800d324 <_calloc_r>:
 800d324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d326:	fba1 2402 	umull	r2, r4, r1, r2
 800d32a:	b94c      	cbnz	r4, 800d340 <_calloc_r+0x1c>
 800d32c:	4611      	mov	r1, r2
 800d32e:	9201      	str	r2, [sp, #4]
 800d330:	f7fb faf4 	bl	800891c <_malloc_r>
 800d334:	9a01      	ldr	r2, [sp, #4]
 800d336:	4605      	mov	r5, r0
 800d338:	b930      	cbnz	r0, 800d348 <_calloc_r+0x24>
 800d33a:	4628      	mov	r0, r5
 800d33c:	b003      	add	sp, #12
 800d33e:	bd30      	pop	{r4, r5, pc}
 800d340:	220c      	movs	r2, #12
 800d342:	6002      	str	r2, [r0, #0]
 800d344:	2500      	movs	r5, #0
 800d346:	e7f8      	b.n	800d33a <_calloc_r+0x16>
 800d348:	4621      	mov	r1, r4
 800d34a:	f7fd f980 	bl	800a64e <memset>
 800d34e:	e7f4      	b.n	800d33a <_calloc_r+0x16>

0800d350 <_strtoul_l.constprop.0>:
 800d350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d354:	4f36      	ldr	r7, [pc, #216]	; (800d430 <_strtoul_l.constprop.0+0xe0>)
 800d356:	4686      	mov	lr, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	4628      	mov	r0, r5
 800d35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d360:	5d3e      	ldrb	r6, [r7, r4]
 800d362:	f016 0608 	ands.w	r6, r6, #8
 800d366:	d1f8      	bne.n	800d35a <_strtoul_l.constprop.0+0xa>
 800d368:	2c2d      	cmp	r4, #45	; 0x2d
 800d36a:	d130      	bne.n	800d3ce <_strtoul_l.constprop.0+0x7e>
 800d36c:	782c      	ldrb	r4, [r5, #0]
 800d36e:	2601      	movs	r6, #1
 800d370:	1c85      	adds	r5, r0, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d057      	beq.n	800d426 <_strtoul_l.constprop.0+0xd6>
 800d376:	2b10      	cmp	r3, #16
 800d378:	d109      	bne.n	800d38e <_strtoul_l.constprop.0+0x3e>
 800d37a:	2c30      	cmp	r4, #48	; 0x30
 800d37c:	d107      	bne.n	800d38e <_strtoul_l.constprop.0+0x3e>
 800d37e:	7828      	ldrb	r0, [r5, #0]
 800d380:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d384:	2858      	cmp	r0, #88	; 0x58
 800d386:	d149      	bne.n	800d41c <_strtoul_l.constprop.0+0xcc>
 800d388:	786c      	ldrb	r4, [r5, #1]
 800d38a:	2310      	movs	r3, #16
 800d38c:	3502      	adds	r5, #2
 800d38e:	f04f 38ff 	mov.w	r8, #4294967295
 800d392:	2700      	movs	r7, #0
 800d394:	fbb8 f8f3 	udiv	r8, r8, r3
 800d398:	fb03 f908 	mul.w	r9, r3, r8
 800d39c:	ea6f 0909 	mvn.w	r9, r9
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d3a6:	f1bc 0f09 	cmp.w	ip, #9
 800d3aa:	d815      	bhi.n	800d3d8 <_strtoul_l.constprop.0+0x88>
 800d3ac:	4664      	mov	r4, ip
 800d3ae:	42a3      	cmp	r3, r4
 800d3b0:	dd23      	ble.n	800d3fa <_strtoul_l.constprop.0+0xaa>
 800d3b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d3b6:	d007      	beq.n	800d3c8 <_strtoul_l.constprop.0+0x78>
 800d3b8:	4580      	cmp	r8, r0
 800d3ba:	d31b      	bcc.n	800d3f4 <_strtoul_l.constprop.0+0xa4>
 800d3bc:	d101      	bne.n	800d3c2 <_strtoul_l.constprop.0+0x72>
 800d3be:	45a1      	cmp	r9, r4
 800d3c0:	db18      	blt.n	800d3f4 <_strtoul_l.constprop.0+0xa4>
 800d3c2:	fb00 4003 	mla	r0, r0, r3, r4
 800d3c6:	2701      	movs	r7, #1
 800d3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3cc:	e7e9      	b.n	800d3a2 <_strtoul_l.constprop.0+0x52>
 800d3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800d3d0:	bf04      	itt	eq
 800d3d2:	782c      	ldrbeq	r4, [r5, #0]
 800d3d4:	1c85      	addeq	r5, r0, #2
 800d3d6:	e7cc      	b.n	800d372 <_strtoul_l.constprop.0+0x22>
 800d3d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d3dc:	f1bc 0f19 	cmp.w	ip, #25
 800d3e0:	d801      	bhi.n	800d3e6 <_strtoul_l.constprop.0+0x96>
 800d3e2:	3c37      	subs	r4, #55	; 0x37
 800d3e4:	e7e3      	b.n	800d3ae <_strtoul_l.constprop.0+0x5e>
 800d3e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d3ea:	f1bc 0f19 	cmp.w	ip, #25
 800d3ee:	d804      	bhi.n	800d3fa <_strtoul_l.constprop.0+0xaa>
 800d3f0:	3c57      	subs	r4, #87	; 0x57
 800d3f2:	e7dc      	b.n	800d3ae <_strtoul_l.constprop.0+0x5e>
 800d3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f8:	e7e6      	b.n	800d3c8 <_strtoul_l.constprop.0+0x78>
 800d3fa:	1c7b      	adds	r3, r7, #1
 800d3fc:	d106      	bne.n	800d40c <_strtoul_l.constprop.0+0xbc>
 800d3fe:	2322      	movs	r3, #34	; 0x22
 800d400:	f8ce 3000 	str.w	r3, [lr]
 800d404:	4638      	mov	r0, r7
 800d406:	b932      	cbnz	r2, 800d416 <_strtoul_l.constprop.0+0xc6>
 800d408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d40c:	b106      	cbz	r6, 800d410 <_strtoul_l.constprop.0+0xc0>
 800d40e:	4240      	negs	r0, r0
 800d410:	2a00      	cmp	r2, #0
 800d412:	d0f9      	beq.n	800d408 <_strtoul_l.constprop.0+0xb8>
 800d414:	b107      	cbz	r7, 800d418 <_strtoul_l.constprop.0+0xc8>
 800d416:	1e69      	subs	r1, r5, #1
 800d418:	6011      	str	r1, [r2, #0]
 800d41a:	e7f5      	b.n	800d408 <_strtoul_l.constprop.0+0xb8>
 800d41c:	2430      	movs	r4, #48	; 0x30
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1b5      	bne.n	800d38e <_strtoul_l.constprop.0+0x3e>
 800d422:	2308      	movs	r3, #8
 800d424:	e7b3      	b.n	800d38e <_strtoul_l.constprop.0+0x3e>
 800d426:	2c30      	cmp	r4, #48	; 0x30
 800d428:	d0a9      	beq.n	800d37e <_strtoul_l.constprop.0+0x2e>
 800d42a:	230a      	movs	r3, #10
 800d42c:	e7af      	b.n	800d38e <_strtoul_l.constprop.0+0x3e>
 800d42e:	bf00      	nop
 800d430:	0800dbc9 	.word	0x0800dbc9

0800d434 <_strtoul_r>:
 800d434:	f7ff bf8c 	b.w	800d350 <_strtoul_l.constprop.0>

0800d438 <fiprintf>:
 800d438:	b40e      	push	{r1, r2, r3}
 800d43a:	b503      	push	{r0, r1, lr}
 800d43c:	4601      	mov	r1, r0
 800d43e:	ab03      	add	r3, sp, #12
 800d440:	4805      	ldr	r0, [pc, #20]	; (800d458 <fiprintf+0x20>)
 800d442:	f853 2b04 	ldr.w	r2, [r3], #4
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	f000 f837 	bl	800d4bc <_vfiprintf_r>
 800d44e:	b002      	add	sp, #8
 800d450:	f85d eb04 	ldr.w	lr, [sp], #4
 800d454:	b003      	add	sp, #12
 800d456:	4770      	bx	lr
 800d458:	200001d8 	.word	0x200001d8

0800d45c <abort>:
 800d45c:	b508      	push	{r3, lr}
 800d45e:	2006      	movs	r0, #6
 800d460:	f000 fa04 	bl	800d86c <raise>
 800d464:	2001      	movs	r0, #1
 800d466:	f7f6 f9ad 	bl	80037c4 <_exit>

0800d46a <__sfputc_r>:
 800d46a:	6893      	ldr	r3, [r2, #8]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	2b00      	cmp	r3, #0
 800d470:	b410      	push	{r4}
 800d472:	6093      	str	r3, [r2, #8]
 800d474:	da08      	bge.n	800d488 <__sfputc_r+0x1e>
 800d476:	6994      	ldr	r4, [r2, #24]
 800d478:	42a3      	cmp	r3, r4
 800d47a:	db01      	blt.n	800d480 <__sfputc_r+0x16>
 800d47c:	290a      	cmp	r1, #10
 800d47e:	d103      	bne.n	800d488 <__sfputc_r+0x1e>
 800d480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d484:	f000 b934 	b.w	800d6f0 <__swbuf_r>
 800d488:	6813      	ldr	r3, [r2, #0]
 800d48a:	1c58      	adds	r0, r3, #1
 800d48c:	6010      	str	r0, [r2, #0]
 800d48e:	7019      	strb	r1, [r3, #0]
 800d490:	4608      	mov	r0, r1
 800d492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <__sfputs_r>:
 800d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49a:	4606      	mov	r6, r0
 800d49c:	460f      	mov	r7, r1
 800d49e:	4614      	mov	r4, r2
 800d4a0:	18d5      	adds	r5, r2, r3
 800d4a2:	42ac      	cmp	r4, r5
 800d4a4:	d101      	bne.n	800d4aa <__sfputs_r+0x12>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	e007      	b.n	800d4ba <__sfputs_r+0x22>
 800d4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ae:	463a      	mov	r2, r7
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7ff ffda 	bl	800d46a <__sfputc_r>
 800d4b6:	1c43      	adds	r3, r0, #1
 800d4b8:	d1f3      	bne.n	800d4a2 <__sfputs_r+0xa>
 800d4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4bc <_vfiprintf_r>:
 800d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	460d      	mov	r5, r1
 800d4c2:	b09d      	sub	sp, #116	; 0x74
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	4698      	mov	r8, r3
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	b118      	cbz	r0, 800d4d4 <_vfiprintf_r+0x18>
 800d4cc:	6a03      	ldr	r3, [r0, #32]
 800d4ce:	b90b      	cbnz	r3, 800d4d4 <_vfiprintf_r+0x18>
 800d4d0:	f7fc fff6 	bl	800a4c0 <__sinit>
 800d4d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4d6:	07d9      	lsls	r1, r3, #31
 800d4d8:	d405      	bmi.n	800d4e6 <_vfiprintf_r+0x2a>
 800d4da:	89ab      	ldrh	r3, [r5, #12]
 800d4dc:	059a      	lsls	r2, r3, #22
 800d4de:	d402      	bmi.n	800d4e6 <_vfiprintf_r+0x2a>
 800d4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4e2:	f7fd f9b4 	bl	800a84e <__retarget_lock_acquire_recursive>
 800d4e6:	89ab      	ldrh	r3, [r5, #12]
 800d4e8:	071b      	lsls	r3, r3, #28
 800d4ea:	d501      	bpl.n	800d4f0 <_vfiprintf_r+0x34>
 800d4ec:	692b      	ldr	r3, [r5, #16]
 800d4ee:	b99b      	cbnz	r3, 800d518 <_vfiprintf_r+0x5c>
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f000 f93a 	bl	800d76c <__swsetup_r>
 800d4f8:	b170      	cbz	r0, 800d518 <_vfiprintf_r+0x5c>
 800d4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4fc:	07dc      	lsls	r4, r3, #31
 800d4fe:	d504      	bpl.n	800d50a <_vfiprintf_r+0x4e>
 800d500:	f04f 30ff 	mov.w	r0, #4294967295
 800d504:	b01d      	add	sp, #116	; 0x74
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	89ab      	ldrh	r3, [r5, #12]
 800d50c:	0598      	lsls	r0, r3, #22
 800d50e:	d4f7      	bmi.n	800d500 <_vfiprintf_r+0x44>
 800d510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d512:	f7fd f99d 	bl	800a850 <__retarget_lock_release_recursive>
 800d516:	e7f3      	b.n	800d500 <_vfiprintf_r+0x44>
 800d518:	2300      	movs	r3, #0
 800d51a:	9309      	str	r3, [sp, #36]	; 0x24
 800d51c:	2320      	movs	r3, #32
 800d51e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d522:	f8cd 800c 	str.w	r8, [sp, #12]
 800d526:	2330      	movs	r3, #48	; 0x30
 800d528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d6dc <_vfiprintf_r+0x220>
 800d52c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d530:	f04f 0901 	mov.w	r9, #1
 800d534:	4623      	mov	r3, r4
 800d536:	469a      	mov	sl, r3
 800d538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d53c:	b10a      	cbz	r2, 800d542 <_vfiprintf_r+0x86>
 800d53e:	2a25      	cmp	r2, #37	; 0x25
 800d540:	d1f9      	bne.n	800d536 <_vfiprintf_r+0x7a>
 800d542:	ebba 0b04 	subs.w	fp, sl, r4
 800d546:	d00b      	beq.n	800d560 <_vfiprintf_r+0xa4>
 800d548:	465b      	mov	r3, fp
 800d54a:	4622      	mov	r2, r4
 800d54c:	4629      	mov	r1, r5
 800d54e:	4630      	mov	r0, r6
 800d550:	f7ff ffa2 	bl	800d498 <__sfputs_r>
 800d554:	3001      	adds	r0, #1
 800d556:	f000 80a9 	beq.w	800d6ac <_vfiprintf_r+0x1f0>
 800d55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d55c:	445a      	add	r2, fp
 800d55e:	9209      	str	r2, [sp, #36]	; 0x24
 800d560:	f89a 3000 	ldrb.w	r3, [sl]
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 80a1 	beq.w	800d6ac <_vfiprintf_r+0x1f0>
 800d56a:	2300      	movs	r3, #0
 800d56c:	f04f 32ff 	mov.w	r2, #4294967295
 800d570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d574:	f10a 0a01 	add.w	sl, sl, #1
 800d578:	9304      	str	r3, [sp, #16]
 800d57a:	9307      	str	r3, [sp, #28]
 800d57c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d580:	931a      	str	r3, [sp, #104]	; 0x68
 800d582:	4654      	mov	r4, sl
 800d584:	2205      	movs	r2, #5
 800d586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58a:	4854      	ldr	r0, [pc, #336]	; (800d6dc <_vfiprintf_r+0x220>)
 800d58c:	f7f2 fe20 	bl	80001d0 <memchr>
 800d590:	9a04      	ldr	r2, [sp, #16]
 800d592:	b9d8      	cbnz	r0, 800d5cc <_vfiprintf_r+0x110>
 800d594:	06d1      	lsls	r1, r2, #27
 800d596:	bf44      	itt	mi
 800d598:	2320      	movmi	r3, #32
 800d59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d59e:	0713      	lsls	r3, r2, #28
 800d5a0:	bf44      	itt	mi
 800d5a2:	232b      	movmi	r3, #43	; 0x2b
 800d5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ae:	d015      	beq.n	800d5dc <_vfiprintf_r+0x120>
 800d5b0:	9a07      	ldr	r2, [sp, #28]
 800d5b2:	4654      	mov	r4, sl
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	f04f 0c0a 	mov.w	ip, #10
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5c0:	3b30      	subs	r3, #48	; 0x30
 800d5c2:	2b09      	cmp	r3, #9
 800d5c4:	d94d      	bls.n	800d662 <_vfiprintf_r+0x1a6>
 800d5c6:	b1b0      	cbz	r0, 800d5f6 <_vfiprintf_r+0x13a>
 800d5c8:	9207      	str	r2, [sp, #28]
 800d5ca:	e014      	b.n	800d5f6 <_vfiprintf_r+0x13a>
 800d5cc:	eba0 0308 	sub.w	r3, r0, r8
 800d5d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	9304      	str	r3, [sp, #16]
 800d5d8:	46a2      	mov	sl, r4
 800d5da:	e7d2      	b.n	800d582 <_vfiprintf_r+0xc6>
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	1d19      	adds	r1, r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	9103      	str	r1, [sp, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	bfbb      	ittet	lt
 800d5e8:	425b      	neglt	r3, r3
 800d5ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d5ee:	9307      	strge	r3, [sp, #28]
 800d5f0:	9307      	strlt	r3, [sp, #28]
 800d5f2:	bfb8      	it	lt
 800d5f4:	9204      	strlt	r2, [sp, #16]
 800d5f6:	7823      	ldrb	r3, [r4, #0]
 800d5f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d5fa:	d10c      	bne.n	800d616 <_vfiprintf_r+0x15a>
 800d5fc:	7863      	ldrb	r3, [r4, #1]
 800d5fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d600:	d134      	bne.n	800d66c <_vfiprintf_r+0x1b0>
 800d602:	9b03      	ldr	r3, [sp, #12]
 800d604:	1d1a      	adds	r2, r3, #4
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	9203      	str	r2, [sp, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	bfb8      	it	lt
 800d60e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d612:	3402      	adds	r4, #2
 800d614:	9305      	str	r3, [sp, #20]
 800d616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d6ec <_vfiprintf_r+0x230>
 800d61a:	7821      	ldrb	r1, [r4, #0]
 800d61c:	2203      	movs	r2, #3
 800d61e:	4650      	mov	r0, sl
 800d620:	f7f2 fdd6 	bl	80001d0 <memchr>
 800d624:	b138      	cbz	r0, 800d636 <_vfiprintf_r+0x17a>
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	eba0 000a 	sub.w	r0, r0, sl
 800d62c:	2240      	movs	r2, #64	; 0x40
 800d62e:	4082      	lsls	r2, r0
 800d630:	4313      	orrs	r3, r2
 800d632:	3401      	adds	r4, #1
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63a:	4829      	ldr	r0, [pc, #164]	; (800d6e0 <_vfiprintf_r+0x224>)
 800d63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d640:	2206      	movs	r2, #6
 800d642:	f7f2 fdc5 	bl	80001d0 <memchr>
 800d646:	2800      	cmp	r0, #0
 800d648:	d03f      	beq.n	800d6ca <_vfiprintf_r+0x20e>
 800d64a:	4b26      	ldr	r3, [pc, #152]	; (800d6e4 <_vfiprintf_r+0x228>)
 800d64c:	bb1b      	cbnz	r3, 800d696 <_vfiprintf_r+0x1da>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	3307      	adds	r3, #7
 800d652:	f023 0307 	bic.w	r3, r3, #7
 800d656:	3308      	adds	r3, #8
 800d658:	9303      	str	r3, [sp, #12]
 800d65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65c:	443b      	add	r3, r7
 800d65e:	9309      	str	r3, [sp, #36]	; 0x24
 800d660:	e768      	b.n	800d534 <_vfiprintf_r+0x78>
 800d662:	fb0c 3202 	mla	r2, ip, r2, r3
 800d666:	460c      	mov	r4, r1
 800d668:	2001      	movs	r0, #1
 800d66a:	e7a6      	b.n	800d5ba <_vfiprintf_r+0xfe>
 800d66c:	2300      	movs	r3, #0
 800d66e:	3401      	adds	r4, #1
 800d670:	9305      	str	r3, [sp, #20]
 800d672:	4619      	mov	r1, r3
 800d674:	f04f 0c0a 	mov.w	ip, #10
 800d678:	4620      	mov	r0, r4
 800d67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d67e:	3a30      	subs	r2, #48	; 0x30
 800d680:	2a09      	cmp	r2, #9
 800d682:	d903      	bls.n	800d68c <_vfiprintf_r+0x1d0>
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0c6      	beq.n	800d616 <_vfiprintf_r+0x15a>
 800d688:	9105      	str	r1, [sp, #20]
 800d68a:	e7c4      	b.n	800d616 <_vfiprintf_r+0x15a>
 800d68c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d690:	4604      	mov	r4, r0
 800d692:	2301      	movs	r3, #1
 800d694:	e7f0      	b.n	800d678 <_vfiprintf_r+0x1bc>
 800d696:	ab03      	add	r3, sp, #12
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	462a      	mov	r2, r5
 800d69c:	4b12      	ldr	r3, [pc, #72]	; (800d6e8 <_vfiprintf_r+0x22c>)
 800d69e:	a904      	add	r1, sp, #16
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fc f8ab 	bl	80097fc <_printf_float>
 800d6a6:	4607      	mov	r7, r0
 800d6a8:	1c78      	adds	r0, r7, #1
 800d6aa:	d1d6      	bne.n	800d65a <_vfiprintf_r+0x19e>
 800d6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ae:	07d9      	lsls	r1, r3, #31
 800d6b0:	d405      	bmi.n	800d6be <_vfiprintf_r+0x202>
 800d6b2:	89ab      	ldrh	r3, [r5, #12]
 800d6b4:	059a      	lsls	r2, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_vfiprintf_r+0x202>
 800d6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ba:	f7fd f8c9 	bl	800a850 <__retarget_lock_release_recursive>
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	065b      	lsls	r3, r3, #25
 800d6c2:	f53f af1d 	bmi.w	800d500 <_vfiprintf_r+0x44>
 800d6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6c8:	e71c      	b.n	800d504 <_vfiprintf_r+0x48>
 800d6ca:	ab03      	add	r3, sp, #12
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	462a      	mov	r2, r5
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <_vfiprintf_r+0x22c>)
 800d6d2:	a904      	add	r1, sp, #16
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7fc fb35 	bl	8009d44 <_printf_i>
 800d6da:	e7e4      	b.n	800d6a6 <_vfiprintf_r+0x1ea>
 800d6dc:	0800df4c 	.word	0x0800df4c
 800d6e0:	0800df56 	.word	0x0800df56
 800d6e4:	080097fd 	.word	0x080097fd
 800d6e8:	0800d499 	.word	0x0800d499
 800d6ec:	0800df52 	.word	0x0800df52

0800d6f0 <__swbuf_r>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	460e      	mov	r6, r1
 800d6f4:	4614      	mov	r4, r2
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	b118      	cbz	r0, 800d702 <__swbuf_r+0x12>
 800d6fa:	6a03      	ldr	r3, [r0, #32]
 800d6fc:	b90b      	cbnz	r3, 800d702 <__swbuf_r+0x12>
 800d6fe:	f7fc fedf 	bl	800a4c0 <__sinit>
 800d702:	69a3      	ldr	r3, [r4, #24]
 800d704:	60a3      	str	r3, [r4, #8]
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	071a      	lsls	r2, r3, #28
 800d70a:	d525      	bpl.n	800d758 <__swbuf_r+0x68>
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	b31b      	cbz	r3, 800d758 <__swbuf_r+0x68>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	6922      	ldr	r2, [r4, #16]
 800d714:	1a98      	subs	r0, r3, r2
 800d716:	6963      	ldr	r3, [r4, #20]
 800d718:	b2f6      	uxtb	r6, r6
 800d71a:	4283      	cmp	r3, r0
 800d71c:	4637      	mov	r7, r6
 800d71e:	dc04      	bgt.n	800d72a <__swbuf_r+0x3a>
 800d720:	4621      	mov	r1, r4
 800d722:	4628      	mov	r0, r5
 800d724:	f7ff fd2a 	bl	800d17c <_fflush_r>
 800d728:	b9e0      	cbnz	r0, 800d764 <__swbuf_r+0x74>
 800d72a:	68a3      	ldr	r3, [r4, #8]
 800d72c:	3b01      	subs	r3, #1
 800d72e:	60a3      	str	r3, [r4, #8]
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	6022      	str	r2, [r4, #0]
 800d736:	701e      	strb	r6, [r3, #0]
 800d738:	6962      	ldr	r2, [r4, #20]
 800d73a:	1c43      	adds	r3, r0, #1
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d004      	beq.n	800d74a <__swbuf_r+0x5a>
 800d740:	89a3      	ldrh	r3, [r4, #12]
 800d742:	07db      	lsls	r3, r3, #31
 800d744:	d506      	bpl.n	800d754 <__swbuf_r+0x64>
 800d746:	2e0a      	cmp	r6, #10
 800d748:	d104      	bne.n	800d754 <__swbuf_r+0x64>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4628      	mov	r0, r5
 800d74e:	f7ff fd15 	bl	800d17c <_fflush_r>
 800d752:	b938      	cbnz	r0, 800d764 <__swbuf_r+0x74>
 800d754:	4638      	mov	r0, r7
 800d756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d758:	4621      	mov	r1, r4
 800d75a:	4628      	mov	r0, r5
 800d75c:	f000 f806 	bl	800d76c <__swsetup_r>
 800d760:	2800      	cmp	r0, #0
 800d762:	d0d5      	beq.n	800d710 <__swbuf_r+0x20>
 800d764:	f04f 37ff 	mov.w	r7, #4294967295
 800d768:	e7f4      	b.n	800d754 <__swbuf_r+0x64>
	...

0800d76c <__swsetup_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4b2a      	ldr	r3, [pc, #168]	; (800d818 <__swsetup_r+0xac>)
 800d770:	4605      	mov	r5, r0
 800d772:	6818      	ldr	r0, [r3, #0]
 800d774:	460c      	mov	r4, r1
 800d776:	b118      	cbz	r0, 800d780 <__swsetup_r+0x14>
 800d778:	6a03      	ldr	r3, [r0, #32]
 800d77a:	b90b      	cbnz	r3, 800d780 <__swsetup_r+0x14>
 800d77c:	f7fc fea0 	bl	800a4c0 <__sinit>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d786:	0718      	lsls	r0, r3, #28
 800d788:	d422      	bmi.n	800d7d0 <__swsetup_r+0x64>
 800d78a:	06d9      	lsls	r1, r3, #27
 800d78c:	d407      	bmi.n	800d79e <__swsetup_r+0x32>
 800d78e:	2309      	movs	r3, #9
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	f04f 30ff 	mov.w	r0, #4294967295
 800d79c:	e034      	b.n	800d808 <__swsetup_r+0x9c>
 800d79e:	0758      	lsls	r0, r3, #29
 800d7a0:	d512      	bpl.n	800d7c8 <__swsetup_r+0x5c>
 800d7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7a4:	b141      	cbz	r1, 800d7b8 <__swsetup_r+0x4c>
 800d7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7aa:	4299      	cmp	r1, r3
 800d7ac:	d002      	beq.n	800d7b4 <__swsetup_r+0x48>
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7fd fee8 	bl	800b584 <_free_r>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	6363      	str	r3, [r4, #52]	; 0x34
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7be:	81a3      	strh	r3, [r4, #12]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	6063      	str	r3, [r4, #4]
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	f043 0308 	orr.w	r3, r3, #8
 800d7ce:	81a3      	strh	r3, [r4, #12]
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	b94b      	cbnz	r3, 800d7e8 <__swsetup_r+0x7c>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7de:	d003      	beq.n	800d7e8 <__swsetup_r+0x7c>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f000 f884 	bl	800d8f0 <__smakebuf_r>
 800d7e8:	89a0      	ldrh	r0, [r4, #12]
 800d7ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7ee:	f010 0301 	ands.w	r3, r0, #1
 800d7f2:	d00a      	beq.n	800d80a <__swsetup_r+0x9e>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60a3      	str	r3, [r4, #8]
 800d7f8:	6963      	ldr	r3, [r4, #20]
 800d7fa:	425b      	negs	r3, r3
 800d7fc:	61a3      	str	r3, [r4, #24]
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	b943      	cbnz	r3, 800d814 <__swsetup_r+0xa8>
 800d802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d806:	d1c4      	bne.n	800d792 <__swsetup_r+0x26>
 800d808:	bd38      	pop	{r3, r4, r5, pc}
 800d80a:	0781      	lsls	r1, r0, #30
 800d80c:	bf58      	it	pl
 800d80e:	6963      	ldrpl	r3, [r4, #20]
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	e7f4      	b.n	800d7fe <__swsetup_r+0x92>
 800d814:	2000      	movs	r0, #0
 800d816:	e7f7      	b.n	800d808 <__swsetup_r+0x9c>
 800d818:	200001d8 	.word	0x200001d8

0800d81c <_raise_r>:
 800d81c:	291f      	cmp	r1, #31
 800d81e:	b538      	push	{r3, r4, r5, lr}
 800d820:	4604      	mov	r4, r0
 800d822:	460d      	mov	r5, r1
 800d824:	d904      	bls.n	800d830 <_raise_r+0x14>
 800d826:	2316      	movs	r3, #22
 800d828:	6003      	str	r3, [r0, #0]
 800d82a:	f04f 30ff 	mov.w	r0, #4294967295
 800d82e:	bd38      	pop	{r3, r4, r5, pc}
 800d830:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d832:	b112      	cbz	r2, 800d83a <_raise_r+0x1e>
 800d834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d838:	b94b      	cbnz	r3, 800d84e <_raise_r+0x32>
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 f830 	bl	800d8a0 <_getpid_r>
 800d840:	462a      	mov	r2, r5
 800d842:	4601      	mov	r1, r0
 800d844:	4620      	mov	r0, r4
 800d846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d84a:	f000 b817 	b.w	800d87c <_kill_r>
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d00a      	beq.n	800d868 <_raise_r+0x4c>
 800d852:	1c59      	adds	r1, r3, #1
 800d854:	d103      	bne.n	800d85e <_raise_r+0x42>
 800d856:	2316      	movs	r3, #22
 800d858:	6003      	str	r3, [r0, #0]
 800d85a:	2001      	movs	r0, #1
 800d85c:	e7e7      	b.n	800d82e <_raise_r+0x12>
 800d85e:	2400      	movs	r4, #0
 800d860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d864:	4628      	mov	r0, r5
 800d866:	4798      	blx	r3
 800d868:	2000      	movs	r0, #0
 800d86a:	e7e0      	b.n	800d82e <_raise_r+0x12>

0800d86c <raise>:
 800d86c:	4b02      	ldr	r3, [pc, #8]	; (800d878 <raise+0xc>)
 800d86e:	4601      	mov	r1, r0
 800d870:	6818      	ldr	r0, [r3, #0]
 800d872:	f7ff bfd3 	b.w	800d81c <_raise_r>
 800d876:	bf00      	nop
 800d878:	200001d8 	.word	0x200001d8

0800d87c <_kill_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d07      	ldr	r5, [pc, #28]	; (800d89c <_kill_r+0x20>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	f7f5 ff8b 	bl	80037a4 <_kill>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d102      	bne.n	800d898 <_kill_r+0x1c>
 800d892:	682b      	ldr	r3, [r5, #0]
 800d894:	b103      	cbz	r3, 800d898 <_kill_r+0x1c>
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	bd38      	pop	{r3, r4, r5, pc}
 800d89a:	bf00      	nop
 800d89c:	20005998 	.word	0x20005998

0800d8a0 <_getpid_r>:
 800d8a0:	f7f5 bf78 	b.w	8003794 <_getpid>

0800d8a4 <__swhatbuf_r>:
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ac:	2900      	cmp	r1, #0
 800d8ae:	b096      	sub	sp, #88	; 0x58
 800d8b0:	4615      	mov	r5, r2
 800d8b2:	461e      	mov	r6, r3
 800d8b4:	da0d      	bge.n	800d8d2 <__swhatbuf_r+0x2e>
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d8bc:	f04f 0100 	mov.w	r1, #0
 800d8c0:	bf0c      	ite	eq
 800d8c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d8c6:	2340      	movne	r3, #64	; 0x40
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	6031      	str	r1, [r6, #0]
 800d8cc:	602b      	str	r3, [r5, #0]
 800d8ce:	b016      	add	sp, #88	; 0x58
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	466a      	mov	r2, sp
 800d8d4:	f000 f848 	bl	800d968 <_fstat_r>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	dbec      	blt.n	800d8b6 <__swhatbuf_r+0x12>
 800d8dc:	9901      	ldr	r1, [sp, #4]
 800d8de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d8e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d8e6:	4259      	negs	r1, r3
 800d8e8:	4159      	adcs	r1, r3
 800d8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ee:	e7eb      	b.n	800d8c8 <__swhatbuf_r+0x24>

0800d8f0 <__smakebuf_r>:
 800d8f0:	898b      	ldrh	r3, [r1, #12]
 800d8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8f4:	079d      	lsls	r5, r3, #30
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	d507      	bpl.n	800d90c <__smakebuf_r+0x1c>
 800d8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	2301      	movs	r3, #1
 800d906:	6163      	str	r3, [r4, #20]
 800d908:	b002      	add	sp, #8
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	ab01      	add	r3, sp, #4
 800d90e:	466a      	mov	r2, sp
 800d910:	f7ff ffc8 	bl	800d8a4 <__swhatbuf_r>
 800d914:	9900      	ldr	r1, [sp, #0]
 800d916:	4605      	mov	r5, r0
 800d918:	4630      	mov	r0, r6
 800d91a:	f7fa ffff 	bl	800891c <_malloc_r>
 800d91e:	b948      	cbnz	r0, 800d934 <__smakebuf_r+0x44>
 800d920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d924:	059a      	lsls	r2, r3, #22
 800d926:	d4ef      	bmi.n	800d908 <__smakebuf_r+0x18>
 800d928:	f023 0303 	bic.w	r3, r3, #3
 800d92c:	f043 0302 	orr.w	r3, r3, #2
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	e7e3      	b.n	800d8fc <__smakebuf_r+0xc>
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	6020      	str	r0, [r4, #0]
 800d938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d93c:	81a3      	strh	r3, [r4, #12]
 800d93e:	9b00      	ldr	r3, [sp, #0]
 800d940:	6163      	str	r3, [r4, #20]
 800d942:	9b01      	ldr	r3, [sp, #4]
 800d944:	6120      	str	r0, [r4, #16]
 800d946:	b15b      	cbz	r3, 800d960 <__smakebuf_r+0x70>
 800d948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d94c:	4630      	mov	r0, r6
 800d94e:	f000 f81d 	bl	800d98c <_isatty_r>
 800d952:	b128      	cbz	r0, 800d960 <__smakebuf_r+0x70>
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	f023 0303 	bic.w	r3, r3, #3
 800d95a:	f043 0301 	orr.w	r3, r3, #1
 800d95e:	81a3      	strh	r3, [r4, #12]
 800d960:	89a3      	ldrh	r3, [r4, #12]
 800d962:	431d      	orrs	r5, r3
 800d964:	81a5      	strh	r5, [r4, #12]
 800d966:	e7cf      	b.n	800d908 <__smakebuf_r+0x18>

0800d968 <_fstat_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4d07      	ldr	r5, [pc, #28]	; (800d988 <_fstat_r+0x20>)
 800d96c:	2300      	movs	r3, #0
 800d96e:	4604      	mov	r4, r0
 800d970:	4608      	mov	r0, r1
 800d972:	4611      	mov	r1, r2
 800d974:	602b      	str	r3, [r5, #0]
 800d976:	f7f5 ff74 	bl	8003862 <_fstat>
 800d97a:	1c43      	adds	r3, r0, #1
 800d97c:	d102      	bne.n	800d984 <_fstat_r+0x1c>
 800d97e:	682b      	ldr	r3, [r5, #0]
 800d980:	b103      	cbz	r3, 800d984 <_fstat_r+0x1c>
 800d982:	6023      	str	r3, [r4, #0]
 800d984:	bd38      	pop	{r3, r4, r5, pc}
 800d986:	bf00      	nop
 800d988:	20005998 	.word	0x20005998

0800d98c <_isatty_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	4d06      	ldr	r5, [pc, #24]	; (800d9a8 <_isatty_r+0x1c>)
 800d990:	2300      	movs	r3, #0
 800d992:	4604      	mov	r4, r0
 800d994:	4608      	mov	r0, r1
 800d996:	602b      	str	r3, [r5, #0]
 800d998:	f7f5 ff73 	bl	8003882 <_isatty>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d102      	bne.n	800d9a6 <_isatty_r+0x1a>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	b103      	cbz	r3, 800d9a6 <_isatty_r+0x1a>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	20005998 	.word	0x20005998

0800d9ac <_init>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr

0800d9b8 <_fini>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	bf00      	nop
 800d9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9be:	bc08      	pop	{r3}
 800d9c0:	469e      	mov	lr, r3
 800d9c2:	4770      	bx	lr
