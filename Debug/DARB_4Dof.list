
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08009ed0  08009ed0  00019ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d8  0800a1d8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e0  0800a1e0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a1e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000047f0  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004878  20004878  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f9ea  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000282f  00000000  00000000  0002fae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f90  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bfc  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000227c7  00000000  00000000  00033ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011d87  00000000  00000000  0005666b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2784  00000000  00000000  000683f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004984  00000000  00000000  0013ab78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  0013f4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009eb8 	.word	0x08009eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009eb8 	.word	0x08009eb8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6178      	str	r0, [r7, #20]
 8000e9c:	6139      	str	r1, [r7, #16]
 8000e9e:	60fa      	str	r2, [r7, #12]
 8000ea0:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ee8:	441a      	add	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fab6 	bl	8000474 <__aeabi_i2d>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000f0e:	f7ff fc45 	bl	800079c <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff faa7 	bl	8000474 <__aeabi_i2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fc35 	bl	800079c <__aeabi_ddiv>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <SpeedReadNonReset+0x118>)
 8000f40:	f7ff fb02 	bl	8000548 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000f54:	a31e      	add	r3, pc, #120	; (adr r3, 8000fd0 <SpeedReadNonReset+0x108>)
 8000f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5a:	f7ff faf5 	bl	8000548 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000f6c:	a31a      	add	r3, pc, #104	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fae9 	bl	8000548 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	4629      	mov	r1, r5
 8000f7e:	f7ff f92d 	bl	80001dc <__adddf3>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000f90:	a311      	add	r3, pc, #68	; (adr r3, 8000fd8 <SpeedReadNonReset+0x110>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fad7 	bl	8000548 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff f91b 	bl	80001dc <__adddf3>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	611a      	str	r2, [r3, #16]
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	ced91687 	.word	0xced91687
 8000fd4:	3feb53f7 	.word	0x3feb53f7
 8000fd8:	532617c2 	.word	0x532617c2
 8000fdc:	3fb2a305 	.word	0x3fb2a305
 8000fe0:	404e0000 	.word	0x404e0000

08000fe4 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800100e:	441a      	add	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7e1b      	ldrb	r3, [r3, #24]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <CountRead+0x52>
	{
		return enc->count_X4;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa22 	bl	8000474 <__aeabi_i2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	e033      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7e1b      	ldrb	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d110      	bne.n	8001060 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b00      	cmp	r3, #0
 8001044:	da00      	bge.n	8001048 <CountRead+0x64>
 8001046:	3303      	adds	r3, #3
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa0d 	bl	8000474 <__aeabi_i2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	e01e      	b.n	800109e <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e1b      	ldrb	r3, [r3, #24]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d116      	bne.n	8001096 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001070:	fb03 f202 	mul.w	r2, r3, r2
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fb92 f3f3 	sdiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9f8 	bl	8000474 <__aeabi_i2d>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001094:	e003      	b.n	800109e <CountRead+0xba>
	}else {
		return 0;
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
	}
}
 800109e:	ec43 2b17 	vmov	d7, r2, r3
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	}
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfb8      	it	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	da4d      	bge.n	80011ae <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d105      	bne.n	8001126 <Drive+0x48>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	635a      	str	r2, [r3, #52]	; 0x34
 8001124:	e018      	b.n	8001158 <Drive+0x7a>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d105      	bne.n	800113a <Drive+0x5c>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	2300      	movs	r3, #0
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
 8001138:	e00e      	b.n	8001158 <Drive+0x7a>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b08      	cmp	r3, #8
 8001140:	d105      	bne.n	800114e <Drive+0x70>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2300      	movs	r3, #0
 800114a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800114c:	e004      	b.n	8001158 <Drive+0x7a>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d106      	bne.n	800116e <Drive+0x90>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	89da      	ldrh	r2, [r3, #14]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 800116c:	e0b7      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <Drive+0xa8>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	89d9      	ldrh	r1, [r3, #14]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	460b      	mov	r3, r1
 8001182:	6393      	str	r3, [r2, #56]	; 0x38
 8001184:	e0ab      	b.n	80012de <Drive+0x200>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d107      	bne.n	800119e <Drive+0xc0>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	89d9      	ldrh	r1, [r3, #14]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	460b      	mov	r3, r1
 800119a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800119c:	e09f      	b.n	80012de <Drive+0x200>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	89d9      	ldrh	r1, [r3, #14]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011ac:	e097      	b.n	80012de <Drive+0x200>
	else if(Input>0){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd4d      	ble.n	8001250 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <Drive+0xec>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	89da      	ldrh	r2, [r3, #14]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	e01e      	b.n	8001208 <Drive+0x12a>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d107      	bne.n	80011e2 <Drive+0x104>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	89d9      	ldrh	r1, [r3, #14]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	460b      	mov	r3, r1
 80011de:	6393      	str	r3, [r2, #56]	; 0x38
 80011e0:	e012      	b.n	8001208 <Drive+0x12a>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d107      	bne.n	80011fa <Drive+0x11c>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	89d9      	ldrh	r1, [r3, #14]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011f8:	e006      	b.n	8001208 <Drive+0x12a>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	89d9      	ldrh	r1, [r3, #14]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	460b      	mov	r3, r1
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <Drive+0x13e>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
}
 800121a:	e060      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d105      	bne.n	8001230 <Drive+0x152>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	6393      	str	r3, [r2, #56]	; 0x38
 800122e:	e056      	b.n	80012de <Drive+0x200>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d105      	bne.n	8001244 <Drive+0x166>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001242:	e04c      	b.n	80012de <Drive+0x200>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800124e:	e046      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <Drive+0x186>
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e018      	b.n	8001296 <Drive+0x1b8>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d105      	bne.n	8001278 <Drive+0x19a>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	6393      	str	r3, [r2, #56]	; 0x38
 8001276:	e00e      	b.n	8001296 <Drive+0x1b8>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d105      	bne.n	800128c <Drive+0x1ae>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	63d3      	str	r3, [r2, #60]	; 0x3c
 800128a:	e004      	b.n	8001296 <Drive+0x1b8>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <Drive+0x1cc>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012a8:	e019      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d105      	bne.n	80012be <Drive+0x1e0>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012bc:	e00f      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d105      	bne.n	80012d2 <Drive+0x1f4>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012d0:	e005      	b.n	80012de <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012dc:	e7ff      	b.n	80012de <Drive+0x200>
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f6:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a02 	vldr	s15, [r3, #8]
 8001328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	edd3 6a07 	vldr	s13, [r3, #28]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	edd3 7a02 	vldr	s15, [r3, #8]
 8001344:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	edd3 7a04 	vldr	s15, [r3, #16]
 800134e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	dd06      	ble.n	8001386 <Pid_Cal+0x9c>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	e002      	b.n	800138c <Pid_Cal+0xa2>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	edd3 7a08 	vldr	s15, [r3, #32]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	ed93 7a08 	vldr	s14, [r3, #32]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d506      	bpl.n	80013bc <Pid_Cal+0xd2>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	e002      	b.n	80013c2 <Pid_Cal+0xd8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	edd3 7a08 	vldr	s15, [r3, #32]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	edd3 7a08 	vldr	s15, [r3, #32]
 8001448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	dd02      	ble.n	8001478 <Pid_Cal+0x18e>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001476:	e001      	b.n	800147c <Pid_Cal+0x192>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800148c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	d502      	bpl.n	800149c <Pid_Cal+0x1b2>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	e001      	b.n	80014a0 <Pid_Cal+0x1b6>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a07      	ldr	r2, [pc, #28]	; (80014dc <vApplicationGetIdleTaskMemory+0x2c>)
 80014c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <vApplicationGetIdleTaskMemory+0x30>)
 80014c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2280      	movs	r2, #128	; 0x80
 80014cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200000a4 	.word	0x200000a4
 80014e0:	200000f8 	.word	0x200000f8

080014e4 <PID_LINK1_Init>:
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
float AngleLink1;
void PID_LINK1_Init()
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <PID_LINK1_Init+0x88>)
 80014ea:	4a21      	ldr	r2, [pc, #132]	; (8001570 <PID_LINK1_Init+0x8c>)
 80014ec:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <PID_LINK1_Init+0x88>)
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <PID_LINK1_Init+0x90>)
 80014f2:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <PID_LINK1_Init+0x88>)
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <PID_LINK1_Init+0x88>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <PID_LINK1_Init+0x88>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <PID_LINK1_Init+0x94>)
 8001508:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <PID_LINK1_Init+0x88>)
 800150c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <PID_LINK1_Init+0x88>)
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <PID_LINK1_Init+0x98>)
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <PID_LINK1_Init+0x88>)
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <PID_LINK1_Init+0x9c>)
 800151c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <PID_LINK1_Init+0x88>)
 8001520:	4a18      	ldr	r2, [pc, #96]	; (8001584 <PID_LINK1_Init+0xa0>)
 8001522:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001526:	4a19      	ldr	r2, [pc, #100]	; (800158c <PID_LINK1_Init+0xa8>)
 8001528:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <PID_LINK1_Init+0xa4>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <PID_LINK1_Init+0xa4>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <PID_LINK1_Init+0x94>)
 8001546:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <PID_LINK1_Init+0xa4>)
 800154a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <PID_LINK1_Init+0x98>)
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <PID_LINK1_Init+0xa4>)
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <PID_LINK1_Init+0x9c>)
 800155a:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <PID_LINK1_Init+0xa4>)
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <PID_LINK1_Init+0xa0>)
 8001560:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20000598 	.word	0x20000598
 8001570:	42480000 	.word	0x42480000
 8001574:	437a0000 	.word	0x437a0000
 8001578:	3c23d70a 	.word	0x3c23d70a
 800157c:	fffffc18 	.word	0xfffffc18
 8001580:	447a0000 	.word	0x447a0000
 8001584:	c47a0000 	.word	0xc47a0000
 8001588:	200005e8 	.word	0x200005e8
 800158c:	41200000 	.word	0x41200000

08001590 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 8001590:	b580      	push	{r7, lr}
 8001592:	ed2d 8b02 	vpush	{d8}
 8001596:	b082      	sub	sp, #8
 8001598:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <PID_LINK1_Speed+0x5c>)
 800159c:	f7ff fc94 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <PID_LINK1_Speed+0x60>)
 80015a2:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <PID_LINK1_Speed+0x5c>)
 80015a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff faa2 	bl	8000af8 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ee00 3a90 	vmov	s1, r3
 80015ba:	eeb0 0a48 	vmov.f32	s0, s16
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <PID_LINK1_Speed+0x64>)
 80015c0:	f7ff fe93 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <PID_LINK1_Speed+0x64>)
 80015c6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	230c      	movs	r3, #12
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2308      	movs	r3, #8
 80015d4:	ee17 2a90 	vmov	r2, s15
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <PID_LINK1_Speed+0x68>)
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <PID_LINK1_Speed+0x6c>)
 80015dc:	f7ff fd7f 	bl	80010de <Drive>
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	ecbd 8b02 	vpop	{d8}
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000538 	.word	0x20000538
 80015f0:	200005e8 	.word	0x200005e8
 80015f4:	20000598 	.word	0x20000598
 80015f8:	20000460 	.word	0x20000460
 80015fc:	20000580 	.word	0x20000580

08001600 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001600:	b580      	push	{r7, lr}
 8001602:	ed2d 8b02 	vpush	{d8}
 8001606:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <PID_LINK1_Pos+0x40>)
 800160a:	ed93 8a00 	vldr	s16, [r3]
 800160e:	2102      	movs	r1, #2
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <PID_LINK1_Pos+0x44>)
 8001612:	f7ff fce7 	bl	8000fe4 <CountRead>
 8001616:	ec53 2b10 	vmov	r2, r3, d0
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa6b 	bl	8000af8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	ee00 3a90 	vmov	s1, r3
 8001628:	eeb0 0a48 	vmov.f32	s0, s16
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <PID_LINK1_Pos+0x48>)
 800162e:	f7ff fe5c 	bl	80012ea <Pid_Cal>
	PID_LINK1_Speed();
 8001632:	f7ff ffad 	bl	8001590 <PID_LINK1_Speed>
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	ecbd 8b02 	vpop	{d8}
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000638 	.word	0x20000638
 8001644:	20000538 	.word	0x20000538
 8001648:	200005e8 	.word	0x200005e8

0800164c <PID_LINK2_Init>:
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
float AngleLink2;
void PID_LINK2_Init()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001652:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <PID_LINK2_Init+0x8c>)
 8001654:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <PID_LINK2_Init+0x90>)
 800165a:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <PID_LINK2_Init+0x88>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <PID_LINK2_Init+0x88>)
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <PID_LINK2_Init+0x94>)
 8001670:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <PID_LINK2_Init+0x88>)
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <PID_LINK2_Init+0x98>)
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <PID_LINK2_Init+0x9c>)
 8001684:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 8001686:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <PID_LINK2_Init+0x88>)
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <PID_LINK2_Init+0xa0>)
 800168a:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <PID_LINK2_Init+0xa4>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <PID_LINK2_Init+0xa8>)
 8001690:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <PID_LINK2_Init+0xa4>)
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <PID_LINK2_Init+0xa4>)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <PID_LINK2_Init+0x94>)
 80016ae:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <PID_LINK2_Init+0x98>)
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016c0:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <PID_LINK2_Init+0x9c>)
 80016c2:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <PID_LINK2_Init+0xa4>)
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <PID_LINK2_Init+0xa0>)
 80016c8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	200006a0 	.word	0x200006a0
 80016d8:	42480000 	.word	0x42480000
 80016dc:	437a0000 	.word	0x437a0000
 80016e0:	3c23d70a 	.word	0x3c23d70a
 80016e4:	fffffc18 	.word	0xfffffc18
 80016e8:	447a0000 	.word	0x447a0000
 80016ec:	c47a0000 	.word	0xc47a0000
 80016f0:	200006f0 	.word	0x200006f0
 80016f4:	41200000 	.word	0x41200000

080016f8 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	ed2d 8b02 	vpush	{d8}
 80016fe:	b082      	sub	sp, #8
 8001700:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <PID_LINK2_Speed+0x5c>)
 8001704:	f7ff fbe0 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <PID_LINK2_Speed+0x60>)
 800170a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <PID_LINK2_Speed+0x5c>)
 8001710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff f9ee 	bl	8000af8 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	ee00 3a90 	vmov	s1, r3
 8001722:	eeb0 0a48 	vmov.f32	s0, s16
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <PID_LINK2_Speed+0x64>)
 8001728:	f7ff fddf 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <PID_LINK2_Speed+0x64>)
 800172e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001736:	230c      	movs	r3, #12
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2308      	movs	r3, #8
 800173c:	ee17 2a90 	vmov	r2, s15
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <PID_LINK2_Speed+0x68>)
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <PID_LINK2_Speed+0x6c>)
 8001744:	f7ff fccb 	bl	80010de <Drive>
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	ecbd 8b02 	vpop	{d8}
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000640 	.word	0x20000640
 8001758:	200006f0 	.word	0x200006f0
 800175c:	200006a0 	.word	0x200006a0
 8001760:	200003d0 	.word	0x200003d0
 8001764:	20000688 	.word	0x20000688

08001768 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 8001768:	b580      	push	{r7, lr}
 800176a:	ed2d 8b02 	vpush	{d8}
 800176e:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <PID_LINK2_Pos+0x48>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017b4 <PID_LINK2_Pos+0x4c>
 800177a:	ee37 8ac7 	vsub.f32	s16, s15, s14
 800177e:	2102      	movs	r1, #2
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <PID_LINK2_Pos+0x50>)
 8001782:	f7ff fc2f 	bl	8000fe4 <CountRead>
 8001786:	ec53 2b10 	vmov	r2, r3, d0
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9b3 	bl	8000af8 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	ee00 3a90 	vmov	s1, r3
 8001798:	eeb0 0a48 	vmov.f32	s0, s16
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <PID_LINK2_Pos+0x54>)
 800179e:	f7ff fda4 	bl	80012ea <Pid_Cal>
	PID_LINK2_Speed();
 80017a2:	f7ff ffa9 	bl	80016f8 <PID_LINK2_Speed>
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	ecbd 8b02 	vpop	{d8}
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000740 	.word	0x20000740
 80017b4:	433b0000 	.word	0x433b0000
 80017b8:	20000640 	.word	0x20000640
 80017bc:	200006f0 	.word	0x200006f0

080017c0 <PID_LINK3_Init>:
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
float AngleLink3;
void PID_LINK3_Init()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 80017c4:	4b20      	ldr	r3, [pc, #128]	; (8001848 <PID_LINK3_Init+0x88>)
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <PID_LINK3_Init+0x8c>)
 80017c8:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 250;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <PID_LINK3_Init+0x88>)
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <PID_LINK3_Init+0x90>)
 80017ce:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <PID_LINK3_Init+0x88>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <PID_LINK3_Init+0x88>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <PID_LINK3_Init+0x88>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <PID_LINK3_Init+0x94>)
 80017e4:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <PID_LINK3_Init+0x88>)
 80017e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <PID_LINK3_Init+0x88>)
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <PID_LINK3_Init+0x98>)
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <PID_LINK3_Init+0x88>)
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <PID_LINK3_Init+0x9c>)
 80017f8:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <PID_LINK3_Init+0x88>)
 80017fc:	4a18      	ldr	r2, [pc, #96]	; (8001860 <PID_LINK3_Init+0xa0>)
 80017fe:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001802:	4a19      	ldr	r2, [pc, #100]	; (8001868 <PID_LINK3_Init+0xa8>)
 8001804:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001820:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <PID_LINK3_Init+0x94>)
 8001822:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <PID_LINK3_Init+0xa4>)
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <PID_LINK3_Init+0x98>)
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <PID_LINK3_Init+0xa4>)
 8001834:	4a09      	ldr	r2, [pc, #36]	; (800185c <PID_LINK3_Init+0x9c>)
 8001836:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <PID_LINK3_Init+0xa4>)
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <PID_LINK3_Init+0xa0>)
 800183c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	200007a8 	.word	0x200007a8
 800184c:	42480000 	.word	0x42480000
 8001850:	437a0000 	.word	0x437a0000
 8001854:	3c23d70a 	.word	0x3c23d70a
 8001858:	fffffc18 	.word	0xfffffc18
 800185c:	447a0000 	.word	0x447a0000
 8001860:	c47a0000 	.word	0xc47a0000
 8001864:	200007f8 	.word	0x200007f8
 8001868:	41200000 	.word	0x41200000

0800186c <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 800186c:	b580      	push	{r7, lr}
 800186e:	ed2d 8b02 	vpush	{d8}
 8001872:	b082      	sub	sp, #8
 8001874:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <PID_LINK3_Speed+0x5c>)
 8001878:	f7ff fb26 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <PID_LINK3_Speed+0x60>)
 800187e:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <PID_LINK3_Speed+0x5c>)
 8001884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f934 	bl	8000af8 <__aeabi_d2f>
 8001890:	4603      	mov	r3, r0
 8001892:	ee00 3a90 	vmov	s1, r3
 8001896:	eeb0 0a48 	vmov.f32	s0, s16
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <PID_LINK3_Speed+0x64>)
 800189c:	f7ff fd25 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <PID_LINK3_Speed+0x64>)
 80018a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80018a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018aa:	2304      	movs	r3, #4
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	ee17 2a90 	vmov	r2, s15
 80018b4:	4907      	ldr	r1, [pc, #28]	; (80018d4 <PID_LINK3_Speed+0x68>)
 80018b6:	4808      	ldr	r0, [pc, #32]	; (80018d8 <PID_LINK3_Speed+0x6c>)
 80018b8:	f7ff fc11 	bl	80010de <Drive>
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	ecbd 8b02 	vpop	{d8}
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000748 	.word	0x20000748
 80018cc:	200007f8 	.word	0x200007f8
 80018d0:	200007a8 	.word	0x200007a8
 80018d4:	200003d0 	.word	0x200003d0
 80018d8:	20000790 	.word	0x20000790

080018dc <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 80018dc:	b580      	push	{r7, lr}
 80018de:	ed2d 8b02 	vpush	{d8}
 80018e2:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <PID_LINK3_Pos+0x48>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001928 <PID_LINK3_Pos+0x4c>
 80018ee:	ee37 8a87 	vadd.f32	s16, s15, s14
 80018f2:	2102      	movs	r1, #2
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <PID_LINK3_Pos+0x50>)
 80018f6:	f7ff fb75 	bl	8000fe4 <CountRead>
 80018fa:	ec53 2b10 	vmov	r2, r3, d0
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f8f9 	bl	8000af8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	ee00 3a90 	vmov	s1, r3
 800190c:	eeb0 0a48 	vmov.f32	s0, s16
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <PID_LINK3_Pos+0x54>)
 8001912:	f7ff fcea 	bl	80012ea <Pid_Cal>
	PID_LINK3_Speed();
 8001916:	f7ff ffa9 	bl	800186c <PID_LINK3_Speed>
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	ecbd 8b02 	vpop	{d8}
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000848 	.word	0x20000848
 8001928:	43070000 	.word	0x43070000
 800192c:	20000748 	.word	0x20000748
 8001930:	200007f8 	.word	0x200007f8

08001934 <PID_LINK4_Init>:
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
float AngleLink4;
void PID_LINK4_Init()
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <PID_LINK4_Init+0x88>)
 800193a:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <PID_LINK4_Init+0x8c>)
 800193c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 300;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <PID_LINK4_Init+0x88>)
 8001940:	4a20      	ldr	r2, [pc, #128]	; (80019c4 <PID_LINK4_Init+0x90>)
 8001942:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <PID_LINK4_Init+0x88>)
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <PID_LINK4_Init+0x88>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <PID_LINK4_Init+0x88>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <PID_LINK4_Init+0x94>)
 8001958:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <PID_LINK4_Init+0x88>)
 800195c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <PID_LINK4_Init+0x88>)
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <PID_LINK4_Init+0x98>)
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <PID_LINK4_Init+0x88>)
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <PID_LINK4_Init+0x9c>)
 800196c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <PID_LINK4_Init+0x88>)
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <PID_LINK4_Init+0xa0>)
 8001972:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001974:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001976:	4a19      	ldr	r2, [pc, #100]	; (80019dc <PID_LINK4_Init+0xa8>)
 8001978:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <PID_LINK4_Init+0xa4>)
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <PID_LINK4_Init+0x94>)
 8001996:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <PID_LINK4_Init+0xa4>)
 800199a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <PID_LINK4_Init+0x98>)
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <PID_LINK4_Init+0x9c>)
 80019aa:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <PID_LINK4_Init+0xa4>)
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <PID_LINK4_Init+0xa0>)
 80019b0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	200008b0 	.word	0x200008b0
 80019c0:	42480000 	.word	0x42480000
 80019c4:	43960000 	.word	0x43960000
 80019c8:	3c23d70a 	.word	0x3c23d70a
 80019cc:	fffffc18 	.word	0xfffffc18
 80019d0:	447a0000 	.word	0x447a0000
 80019d4:	c47a0000 	.word	0xc47a0000
 80019d8:	20000900 	.word	0x20000900
 80019dc:	41200000 	.word	0x41200000

080019e0 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	ed2d 8b02 	vpush	{d8}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <PID_LINK4_Speed+0x5c>)
 80019ec:	f7ff fa6c 	bl	8000ec8 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <PID_LINK4_Speed+0x60>)
 80019f2:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <PID_LINK4_Speed+0x5c>)
 80019f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f87a 	bl	8000af8 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	ee00 3a90 	vmov	s1, r3
 8001a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <PID_LINK4_Speed+0x64>)
 8001a10:	f7ff fc6b 	bl	80012ea <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <PID_LINK4_Speed+0x64>)
 8001a16:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1e:	2304      	movs	r3, #4
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	ee17 2a90 	vmov	r2, s15
 8001a28:	4907      	ldr	r1, [pc, #28]	; (8001a48 <PID_LINK4_Speed+0x68>)
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <PID_LINK4_Speed+0x6c>)
 8001a2c:	f7ff fb57 	bl	80010de <Drive>
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	ecbd 8b02 	vpop	{d8}
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000850 	.word	0x20000850
 8001a40:	20000900 	.word	0x20000900
 8001a44:	200008b0 	.word	0x200008b0
 8001a48:	200004a8 	.word	0x200004a8
 8001a4c:	20000898 	.word	0x20000898

08001a50 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	ed2d 8b02 	vpush	{d8}
 8001a56:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <PID_LINK4_Pos+0x48>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a9c <PID_LINK4_Pos+0x4c>
 8001a62:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001a66:	2102      	movs	r1, #2
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <PID_LINK4_Pos+0x50>)
 8001a6a:	f7ff fabb 	bl	8000fe4 <CountRead>
 8001a6e:	ec53 2b10 	vmov	r2, r3, d0
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f83f 	bl	8000af8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	ee00 3a90 	vmov	s1, r3
 8001a80:	eeb0 0a48 	vmov.f32	s0, s16
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <PID_LINK4_Pos+0x54>)
 8001a86:	f7ff fc30 	bl	80012ea <Pid_Cal>
	PID_LINK4_Speed();
 8001a8a:	f7ff ffa9 	bl	80019e0 <PID_LINK4_Speed>
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	ecbd 8b02 	vpop	{d8}
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000950 	.word	0x20000950
 8001a9c:	42b40000 	.word	0x42b40000
 8001aa0:	20000850 	.word	0x20000850
 8001aa4:	20000900 	.word	0x20000900

08001aa8 <TINH_FK>:
float L1 = 91, L2 = 122, L3 = 77, L4 = 78, d1 = 62 + 176; // đơn vị mm

int16_t t1, t2, t3, t4;

float Px, Py, Pz;
void TINH_FK(float theta1Value, float theta2Value, float theta3Value, float theta4Value) {
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ab4:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ab8:	ed87 1a01 	vstr	s2, [r7, #4]
 8001abc:	edc7 1a00 	vstr	s3, [r7]

	theta1_FK = theta1Value;
 8001ac0:	4acb      	ldr	r2, [pc, #812]	; (8001df0 <TINH_FK+0x348>)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6013      	str	r3, [r2, #0]
	theta1_FK_rad = (theta1_FK * M_PI) / 180.0;
 8001ac6:	4bca      	ldr	r3, [pc, #808]	; (8001df0 <TINH_FK+0x348>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fce4 	bl	8000498 <__aeabi_f2d>
 8001ad0:	a3c5      	add	r3, pc, #788	; (adr r3, 8001de8 <TINH_FK+0x340>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4bc3      	ldr	r3, [pc, #780]	; (8001df4 <TINH_FK+0x34c>)
 8001ae8:	f7fe fe58 	bl	800079c <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff f800 	bl	8000af8 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4abf      	ldr	r2, [pc, #764]	; (8001df8 <TINH_FK+0x350>)
 8001afc:	6013      	str	r3, [r2, #0]

	theta2_FK = theta2Value;
 8001afe:	4abf      	ldr	r2, [pc, #764]	; (8001dfc <TINH_FK+0x354>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6013      	str	r3, [r2, #0]
	theta2_FK_rad = (theta2_FK * M_PI) / 180.0;
 8001b04:	4bbd      	ldr	r3, [pc, #756]	; (8001dfc <TINH_FK+0x354>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fcc5 	bl	8000498 <__aeabi_f2d>
 8001b0e:	a3b6      	add	r3, pc, #728	; (adr r3, 8001de8 <TINH_FK+0x340>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd18 	bl	8000548 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4bb3      	ldr	r3, [pc, #716]	; (8001df4 <TINH_FK+0x34c>)
 8001b26:	f7fe fe39 	bl	800079c <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffe1 	bl	8000af8 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4ab1      	ldr	r2, [pc, #708]	; (8001e00 <TINH_FK+0x358>)
 8001b3a:	6013      	str	r3, [r2, #0]

	theta3_FK = theta3Value;
 8001b3c:	4ab1      	ldr	r2, [pc, #708]	; (8001e04 <TINH_FK+0x35c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
	theta3_FK_rad = (theta3_FK * M_PI) / 180.0;
 8001b42:	4bb0      	ldr	r3, [pc, #704]	; (8001e04 <TINH_FK+0x35c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fca6 	bl	8000498 <__aeabi_f2d>
 8001b4c:	a3a6      	add	r3, pc, #664	; (adr r3, 8001de8 <TINH_FK+0x340>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fcf9 	bl	8000548 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4ba4      	ldr	r3, [pc, #656]	; (8001df4 <TINH_FK+0x34c>)
 8001b64:	f7fe fe1a 	bl	800079c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ffc2 	bl	8000af8 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4aa4      	ldr	r2, [pc, #656]	; (8001e08 <TINH_FK+0x360>)
 8001b78:	6013      	str	r3, [r2, #0]

	theta4_FK = theta4Value;
 8001b7a:	4aa4      	ldr	r2, [pc, #656]	; (8001e0c <TINH_FK+0x364>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6013      	str	r3, [r2, #0]
	theta4_FK_rad = (theta4_FK * M_PI) / 180.0;
 8001b80:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <TINH_FK+0x364>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fc87 	bl	8000498 <__aeabi_f2d>
 8001b8a:	a397      	add	r3, pc, #604	; (adr r3, 8001de8 <TINH_FK+0x340>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fcda 	bl	8000548 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b94      	ldr	r3, [pc, #592]	; (8001df4 <TINH_FK+0x34c>)
 8001ba2:	f7fe fdfb 	bl	800079c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ffa3 	bl	8000af8 <__aeabi_d2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a96      	ldr	r2, [pc, #600]	; (8001e10 <TINH_FK+0x368>)
 8001bb6:	6013      	str	r3, [r2, #0]

	psi_FK = theta2_FK + theta3_FK + theta4_FK;
 8001bb8:	4b90      	ldr	r3, [pc, #576]	; (8001dfc <TINH_FK+0x354>)
 8001bba:	ed93 7a00 	vldr	s14, [r3]
 8001bbe:	4b91      	ldr	r3, [pc, #580]	; (8001e04 <TINH_FK+0x35c>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc8:	4b90      	ldr	r3, [pc, #576]	; (8001e0c <TINH_FK+0x364>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <TINH_FK+0x36c>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	psi_FK_rad = theta2_FK_rad + theta3_FK_rad + theta4_FK_rad;
 8001bd8:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <TINH_FK+0x358>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <TINH_FK+0x360>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be8:	4b89      	ldr	r3, [pc, #548]	; (8001e10 <TINH_FK+0x368>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <TINH_FK+0x370>)
 8001bf4:	edc3 7a00 	vstr	s15, [r3]

	// Tính toán giá trị Px, Py, Pz
	Px_FK = cos(theta1_FK_rad) * (L1 + L2 * cos(theta2_FK_rad) + L3 * cos(theta2_FK_rad + theta3_FK_rad) + L4 * cos(psi_FK_rad));
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <TINH_FK+0x350>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc4b 	bl	8000498 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ec43 2b10 	vmov	d0, r2, r3
 8001c0a:	f006 f811 	bl	8007c30 <cos>
 8001c0e:	ec5b ab10 	vmov	sl, fp, d0
 8001c12:	4b82      	ldr	r3, [pc, #520]	; (8001e1c <TINH_FK+0x374>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc3e 	bl	8000498 <__aeabi_f2d>
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <TINH_FK+0x378>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc37 	bl	8000498 <__aeabi_f2d>
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4689      	mov	r9, r1
 8001c2e:	4b74      	ldr	r3, [pc, #464]	; (8001e00 <TINH_FK+0x358>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc30 	bl	8000498 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	ec43 2b10 	vmov	d0, r2, r3
 8001c40:	f005 fff6 	bl	8007c30 <cos>
 8001c44:	ec53 2b10 	vmov	r2, r3, d0
 8001c48:	4640      	mov	r0, r8
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fac0 	bl	80001dc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <TINH_FK+0x37c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc15 	bl	8000498 <__aeabi_f2d>
 8001c6e:	4604      	mov	r4, r0
 8001c70:	460d      	mov	r5, r1
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <TINH_FK+0x358>)
 8001c74:	ed93 7a00 	vldr	s14, [r3]
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <TINH_FK+0x360>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	ee17 0a90 	vmov	r0, s15
 8001c86:	f7fe fc07 	bl	8000498 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b10 	vmov	d0, r2, r3
 8001c92:	f005 ffcd 	bl	8007c30 <cos>
 8001c96:	ec53 2b10 	vmov	r2, r3, d0
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe fc53 	bl	8000548 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	4649      	mov	r1, r9
 8001caa:	f7fe fa97 	bl	80001dc <__adddf3>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4690      	mov	r8, r2
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	4b5c      	ldr	r3, [pc, #368]	; (8001e28 <TINH_FK+0x380>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fbec 	bl	8000498 <__aeabi_f2d>
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	460d      	mov	r5, r1
 8001cc4:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <TINH_FK+0x370>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbe5 	bl	8000498 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	ec43 2b10 	vmov	d0, r2, r3
 8001cd6:	f005 ffab 	bl	8007c30 <cos>
 8001cda:	ec53 2b10 	vmov	r2, r3, d0
 8001cde:	4620      	mov	r0, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	f7fe fc31 	bl	8000548 <__aeabi_dmul>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4640      	mov	r0, r8
 8001cec:	4649      	mov	r1, r9
 8001cee:	f7fe fa75 	bl	80001dc <__adddf3>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4650      	mov	r0, sl
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fef7 	bl	8000af8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a47      	ldr	r2, [pc, #284]	; (8001e2c <TINH_FK+0x384>)
 8001d0e:	6013      	str	r3, [r2, #0]

	Py_FK = sin(theta1_FK_rad) * (L1 + L2 * cos(theta2_FK_rad) + L3 * cos(theta2_FK_rad + theta3_FK_rad) + L4 * cos(psi_FK_rad));
 8001d10:	4b39      	ldr	r3, [pc, #228]	; (8001df8 <TINH_FK+0x350>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fbbf 	bl	8000498 <__aeabi_f2d>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	ec43 2b10 	vmov	d0, r2, r3
 8001d22:	f005 ffd9 	bl	8007cd8 <sin>
 8001d26:	ec5b ab10 	vmov	sl, fp, d0
 8001d2a:	4b3c      	ldr	r3, [pc, #240]	; (8001e1c <TINH_FK+0x374>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fbb2 	bl	8000498 <__aeabi_f2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <TINH_FK+0x378>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbab 	bl	8000498 <__aeabi_f2d>
 8001d42:	4680      	mov	r8, r0
 8001d44:	4689      	mov	r9, r1
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <TINH_FK+0x358>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fba4 	bl	8000498 <__aeabi_f2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	ec43 2b10 	vmov	d0, r2, r3
 8001d58:	f005 ff6a 	bl	8007c30 <cos>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4640      	mov	r0, r8
 8001d62:	4649      	mov	r1, r9
 8001d64:	f7fe fbf0 	bl	8000548 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa34 	bl	80001dc <__adddf3>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4690      	mov	r8, r2
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <TINH_FK+0x37c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb89 	bl	8000498 <__aeabi_f2d>
 8001d86:	4604      	mov	r4, r0
 8001d88:	460d      	mov	r5, r1
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <TINH_FK+0x358>)
 8001d8c:	ed93 7a00 	vldr	s14, [r3]
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <TINH_FK+0x360>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fb7b 	bl	8000498 <__aeabi_f2d>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b10 	vmov	d0, r2, r3
 8001daa:	f005 ff41 	bl	8007c30 <cos>
 8001dae:	ec53 2b10 	vmov	r2, r3, d0
 8001db2:	4620      	mov	r0, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	f7fe fbc7 	bl	8000548 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4640      	mov	r0, r8
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	f7fe fa0b 	bl	80001dc <__adddf3>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4699      	mov	r9, r3
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <TINH_FK+0x380>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fb60 	bl	8000498 <__aeabi_f2d>
 8001dd8:	4604      	mov	r4, r0
 8001dda:	460d      	mov	r5, r1
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <TINH_FK+0x370>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	e025      	b.n	8001e30 <TINH_FK+0x388>
 8001de4:	f3af 8000 	nop.w
 8001de8:	54442d18 	.word	0x54442d18
 8001dec:	400921fb 	.word	0x400921fb
 8001df0:	20000954 	.word	0x20000954
 8001df4:	40668000 	.word	0x40668000
 8001df8:	20000968 	.word	0x20000968
 8001dfc:	20000958 	.word	0x20000958
 8001e00:	2000096c 	.word	0x2000096c
 8001e04:	2000095c 	.word	0x2000095c
 8001e08:	20000970 	.word	0x20000970
 8001e0c:	20000960 	.word	0x20000960
 8001e10:	20000974 	.word	0x20000974
 8001e14:	20000964 	.word	0x20000964
 8001e18:	20000978 	.word	0x20000978
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000008 	.word	0x20000008
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	2000097c 	.word	0x2000097c
 8001e30:	f7fe fb32 	bl	8000498 <__aeabi_f2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	ec43 2b10 	vmov	d0, r2, r3
 8001e3c:	f005 fef8 	bl	8007c30 <cos>
 8001e40:	ec53 2b10 	vmov	r2, r3, d0
 8001e44:	4620      	mov	r0, r4
 8001e46:	4629      	mov	r1, r5
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4640      	mov	r0, r8
 8001e52:	4649      	mov	r1, r9
 8001e54:	f7fe f9c2 	bl	80001dc <__adddf3>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4650      	mov	r0, sl
 8001e5e:	4659      	mov	r1, fp
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe44 	bl	8000af8 <__aeabi_d2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <TINH_FK+0x4cc>)
 8001e74:	6013      	str	r3, [r2, #0]

	Pz_FK = d1 + L3 * sin(theta2_FK_rad + theta3_FK_rad) + L2 * sin(theta2_FK_rad) + L4 * sin(psi_FK_rad);
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <TINH_FK+0x4d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb0c 	bl	8000498 <__aeabi_f2d>
 8001e80:	4604      	mov	r4, r0
 8001e82:	460d      	mov	r5, r1
 8001e84:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <TINH_FK+0x4d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb05 	bl	8000498 <__aeabi_f2d>
 8001e8e:	4680      	mov	r8, r0
 8001e90:	4689      	mov	r9, r1
 8001e92:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <TINH_FK+0x4d8>)
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <TINH_FK+0x4dc>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7fe faf7 	bl	8000498 <__aeabi_f2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ec43 2b10 	vmov	d0, r2, r3
 8001eb2:	f005 ff11 	bl	8007cd8 <sin>
 8001eb6:	ec53 2b10 	vmov	r2, r3, d0
 8001eba:	4640      	mov	r0, r8
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	f7fe fb43 	bl	8000548 <__aeabi_dmul>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f7fe f987 	bl	80001dc <__adddf3>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	4b2c      	ldr	r3, [pc, #176]	; (8001f88 <TINH_FK+0x4e0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fadc 	bl	8000498 <__aeabi_f2d>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	460d      	mov	r5, r1
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <TINH_FK+0x4d8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fad5 	bl	8000498 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	ec43 2b10 	vmov	d0, r2, r3
 8001ef6:	f005 feef 	bl	8007cd8 <sin>
 8001efa:	ec53 2b10 	vmov	r2, r3, d0
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe fb21 	bl	8000548 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	f7fe f965 	bl	80001dc <__adddf3>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <TINH_FK+0x4e4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe faba 	bl	8000498 <__aeabi_f2d>
 8001f24:	4604      	mov	r4, r0
 8001f26:	460d      	mov	r5, r1
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <TINH_FK+0x4e8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fab3 	bl	8000498 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	ec43 2b10 	vmov	d0, r2, r3
 8001f3a:	f005 fecd 	bl	8007cd8 <sin>
 8001f3e:	ec53 2b10 	vmov	r2, r3, d0
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	f7fe faff 	bl	8000548 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe f943 	bl	80001dc <__adddf3>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fdcb 	bl	8000af8 <__aeabi_d2f>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <TINH_FK+0x4ec>)
 8001f66:	6013      	str	r3, [r2, #0]

}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f72:	bf00      	nop
 8001f74:	20000980 	.word	0x20000980
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	2000096c 	.word	0x2000096c
 8001f84:	20000970 	.word	0x20000970
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000978 	.word	0x20000978
 8001f94:	20000984 	.word	0x20000984

08001f98 <calculate_IK_BN1>:

float Theta1_IK = 0, Theta2_IK = 0, Theta3_IK = 0, Theta4_IK = 0;

float alpha = 0, k = 0, E = 0, F = 0, a = 0, b = 0, d = 0, f = 0, var_temp = 0, c23 = 0, s23 = 0, t_rad = 0;

void calculate_IK_BN1(float Px_value, float Py_value, float Pz_value, float Theta_value){
 8001f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f9c:	ed2d 8b02 	vpush	{d8}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fa8:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fac:	ed87 1a01 	vstr	s2, [r7, #4]
 8001fb0:	edc7 1a00 	vstr	s3, [r7]

    Px_IK = Px_value;
 8001fb4:	4a5a      	ldr	r2, [pc, #360]	; (8002120 <calculate_IK_BN1+0x188>)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6013      	str	r3, [r2, #0]
    Py_IK = Py_value;
 8001fba:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <calculate_IK_BN1+0x18c>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	6013      	str	r3, [r2, #0]
    Pz_IK = Pz_value;
 8001fc0:	4a59      	ldr	r2, [pc, #356]	; (8002128 <calculate_IK_BN1+0x190>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
    Theta_IK = Theta_value;
 8001fc6:	4a59      	ldr	r2, [pc, #356]	; (800212c <calculate_IK_BN1+0x194>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6013      	str	r3, [r2, #0]

    t_rad = Theta_IK * (M_PI / 180);
 8001fcc:	4b57      	ldr	r3, [pc, #348]	; (800212c <calculate_IK_BN1+0x194>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa61 	bl	8000498 <__aeabi_f2d>
 8001fd6:	a34c      	add	r3, pc, #304	; (adr r3, 8002108 <calculate_IK_BN1+0x170>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fab4 	bl	8000548 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd86 	bl	8000af8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a50      	ldr	r2, [pc, #320]	; (8002130 <calculate_IK_BN1+0x198>)
 8001ff0:	6013      	str	r3, [r2, #0]
    k = sqrt(pow(Px_IK, 2) + pow(Py_IK, 2));
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <calculate_IK_BN1+0x188>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa4e 	bl	8000498 <__aeabi_f2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002110 <calculate_IK_BN1+0x178>
 8002004:	ec43 2b10 	vmov	d0, r2, r3
 8002008:	f005 fd74 	bl	8007af4 <pow>
 800200c:	ec55 4b10 	vmov	r4, r5, d0
 8002010:	4b44      	ldr	r3, [pc, #272]	; (8002124 <calculate_IK_BN1+0x18c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa3f 	bl	8000498 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8002110 <calculate_IK_BN1+0x178>
 8002022:	ec43 2b10 	vmov	d0, r2, r3
 8002026:	f005 fd65 	bl	8007af4 <pow>
 800202a:	ec53 2b10 	vmov	r2, r3, d0
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f8d3 	bl	80001dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	ec43 2b17 	vmov	d7, r2, r3
 800203e:	eeb0 0a47 	vmov.f32	s0, s14
 8002042:	eef0 0a67 	vmov.f32	s1, s15
 8002046:	f005 fdc5 	bl	8007bd4 <sqrt>
 800204a:	ec53 2b10 	vmov	r2, r3, d0
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd51 	bl	8000af8 <__aeabi_d2f>
 8002056:	4603      	mov	r3, r0
 8002058:	4a36      	ldr	r2, [pc, #216]	; (8002134 <calculate_IK_BN1+0x19c>)
 800205a:	6013      	str	r3, [r2, #0]
    theta1_IK_rad = atan2((Py_IK / k), (Px_IK / k));
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <calculate_IK_BN1+0x18c>)
 800205e:	ed93 7a00 	vldr	s14, [r3]
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <calculate_IK_BN1+0x19c>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800206c:	ee16 0a90 	vmov	r0, s13
 8002070:	f7fe fa12 	bl	8000498 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
 8002078:	4b29      	ldr	r3, [pc, #164]	; (8002120 <calculate_IK_BN1+0x188>)
 800207a:	ed93 7a00 	vldr	s14, [r3]
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <calculate_IK_BN1+0x19c>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002088:	ee16 0a90 	vmov	r0, s13
 800208c:	f7fe fa04 	bl	8000498 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	ec43 2b11 	vmov	d1, r2, r3
 8002098:	ec45 4b10 	vmov	d0, r4, r5
 800209c:	f005 fd28 	bl	8007af0 <atan2>
 80020a0:	ec53 2b10 	vmov	r2, r3, d0
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd26 	bl	8000af8 <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <calculate_IK_BN1+0x1a0>)
 80020b0:	6013      	str	r3, [r2, #0]
    Theta1_IK = theta1_IK_rad * (180 / M_PI);
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <calculate_IK_BN1+0x1a0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f9ee 	bl	8000498 <__aeabi_f2d>
 80020bc:	a316      	add	r3, pc, #88	; (adr r3, 8002118 <calculate_IK_BN1+0x180>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fa41 	bl	8000548 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd13 	bl	8000af8 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a19      	ldr	r2, [pc, #100]	; (800213c <calculate_IK_BN1+0x1a4>)
 80020d6:	6013      	str	r3, [r2, #0]

    if (Theta1_IK < -180) {
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <calculate_IK_BN1+0x1a4>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002140 <calculate_IK_BN1+0x1a8>
 80020e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d52d      	bpl.n	8002148 <calculate_IK_BN1+0x1b0>
        Theta1_IK += 360;
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <calculate_IK_BN1+0x1a4>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002144 <calculate_IK_BN1+0x1ac>
 80020f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <calculate_IK_BN1+0x1a4>)
 80020fc:	edc3 7a00 	vstr	s15, [r3]
 8002100:	e036      	b.n	8002170 <calculate_IK_BN1+0x1d8>
 8002102:	bf00      	nop
 8002104:	f3af 8000 	nop.w
 8002108:	a2529d39 	.word	0xa2529d39
 800210c:	3f91df46 	.word	0x3f91df46
 8002110:	00000000 	.word	0x00000000
 8002114:	40000000 	.word	0x40000000
 8002118:	1a63c1f8 	.word	0x1a63c1f8
 800211c:	404ca5dc 	.word	0x404ca5dc
 8002120:	20000988 	.word	0x20000988
 8002124:	2000098c 	.word	0x2000098c
 8002128:	20000990 	.word	0x20000990
 800212c:	20000994 	.word	0x20000994
 8002130:	200009e4 	.word	0x200009e4
 8002134:	200009bc 	.word	0x200009bc
 8002138:	20000998 	.word	0x20000998
 800213c:	200009a8 	.word	0x200009a8
 8002140:	c3340000 	.word	0xc3340000
 8002144:	43b40000 	.word	0x43b40000
    } else if (Theta1_IK > 180) {
 8002148:	4bd5      	ldr	r3, [pc, #852]	; (80024a0 <calculate_IK_BN1+0x508>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80024a4 <calculate_IK_BN1+0x50c>
 8002152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215a:	dd09      	ble.n	8002170 <calculate_IK_BN1+0x1d8>
        Theta1_IK -= 360;
 800215c:	4bd0      	ldr	r3, [pc, #832]	; (80024a0 <calculate_IK_BN1+0x508>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 80024a8 <calculate_IK_BN1+0x510>
 8002166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800216a:	4bcd      	ldr	r3, [pc, #820]	; (80024a0 <calculate_IK_BN1+0x508>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
    }

    E = Px_IK * cos(theta1_IK_rad) + Py_IK * sin(theta1_IK_rad) - L1 - L4 * cos(t_rad);
 8002170:	4bce      	ldr	r3, [pc, #824]	; (80024ac <calculate_IK_BN1+0x514>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f98f 	bl	8000498 <__aeabi_f2d>
 800217a:	4604      	mov	r4, r0
 800217c:	460d      	mov	r5, r1
 800217e:	4bcc      	ldr	r3, [pc, #816]	; (80024b0 <calculate_IK_BN1+0x518>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f988 	bl	8000498 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	ec43 2b10 	vmov	d0, r2, r3
 8002190:	f005 fd4e 	bl	8007c30 <cos>
 8002194:	ec53 2b10 	vmov	r2, r3, d0
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f9d4 	bl	8000548 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4690      	mov	r8, r2
 80021a6:	4699      	mov	r9, r3
 80021a8:	4bc2      	ldr	r3, [pc, #776]	; (80024b4 <calculate_IK_BN1+0x51c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f973 	bl	8000498 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	4bbe      	ldr	r3, [pc, #760]	; (80024b0 <calculate_IK_BN1+0x518>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f96c 	bl	8000498 <__aeabi_f2d>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	ec43 2b10 	vmov	d0, r2, r3
 80021c8:	f005 fd86 	bl	8007cd8 <sin>
 80021cc:	ec53 2b10 	vmov	r2, r3, d0
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4640      	mov	r0, r8
 80021de:	4649      	mov	r1, r9
 80021e0:	f7fd fffc 	bl	80001dc <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	4bb2      	ldr	r3, [pc, #712]	; (80024b8 <calculate_IK_BN1+0x520>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f951 	bl	8000498 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4620      	mov	r0, r4
 80021fc:	4629      	mov	r1, r5
 80021fe:	f7fd ffeb 	bl	80001d8 <__aeabi_dsub>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4690      	mov	r8, r2
 8002208:	4699      	mov	r9, r3
 800220a:	4bac      	ldr	r3, [pc, #688]	; (80024bc <calculate_IK_BN1+0x524>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f942 	bl	8000498 <__aeabi_f2d>
 8002214:	4604      	mov	r4, r0
 8002216:	460d      	mov	r5, r1
 8002218:	4ba9      	ldr	r3, [pc, #676]	; (80024c0 <calculate_IK_BN1+0x528>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f93b 	bl	8000498 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	ec43 2b10 	vmov	d0, r2, r3
 800222a:	f005 fd01 	bl	8007c30 <cos>
 800222e:	ec53 2b10 	vmov	r2, r3, d0
 8002232:	4620      	mov	r0, r4
 8002234:	4629      	mov	r1, r5
 8002236:	f7fe f987 	bl	8000548 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fd ffc9 	bl	80001d8 <__aeabi_dsub>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fc53 	bl	8000af8 <__aeabi_d2f>
 8002252:	4603      	mov	r3, r0
 8002254:	4a9b      	ldr	r2, [pc, #620]	; (80024c4 <calculate_IK_BN1+0x52c>)
 8002256:	6013      	str	r3, [r2, #0]
    F = Pz_IK - d1 - L4 * sin(t_rad);
 8002258:	4b9b      	ldr	r3, [pc, #620]	; (80024c8 <calculate_IK_BN1+0x530>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b9b      	ldr	r3, [pc, #620]	; (80024cc <calculate_IK_BN1+0x534>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002268:	ee17 0a90 	vmov	r0, s15
 800226c:	f7fe f914 	bl	8000498 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b91      	ldr	r3, [pc, #580]	; (80024bc <calculate_IK_BN1+0x524>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f90d 	bl	8000498 <__aeabi_f2d>
 800227e:	4680      	mov	r8, r0
 8002280:	4689      	mov	r9, r1
 8002282:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <calculate_IK_BN1+0x528>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f906 	bl	8000498 <__aeabi_f2d>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	ec43 2b10 	vmov	d0, r2, r3
 8002294:	f005 fd20 	bl	8007cd8 <sin>
 8002298:	ec53 2b10 	vmov	r2, r3, d0
 800229c:	4640      	mov	r0, r8
 800229e:	4649      	mov	r1, r9
 80022a0:	f7fe f952 	bl	8000548 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd ff94 	bl	80001d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fc1e 	bl	8000af8 <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a84      	ldr	r2, [pc, #528]	; (80024d0 <calculate_IK_BN1+0x538>)
 80022c0:	6013      	str	r3, [r2, #0]
    a = -2 * L2 * F;
 80022c2:	4b84      	ldr	r3, [pc, #528]	; (80024d4 <calculate_IK_BN1+0x53c>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80022cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d0:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <calculate_IK_BN1+0x538>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <calculate_IK_BN1+0x540>)
 80022dc:	edc3 7a00 	vstr	s15, [r3]
    b = -2 * L2 * E;
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <calculate_IK_BN1+0x53c>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80022ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022ee:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <calculate_IK_BN1+0x52c>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f8:	4b78      	ldr	r3, [pc, #480]	; (80024dc <calculate_IK_BN1+0x544>)
 80022fa:	edc3 7a00 	vstr	s15, [r3]
    d = pow(L3, 2) - pow(E, 2) - pow(F, 2) - pow(L2, 2);
 80022fe:	4b78      	ldr	r3, [pc, #480]	; (80024e0 <calculate_IK_BN1+0x548>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8c8 	bl	8000498 <__aeabi_f2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8002498 <calculate_IK_BN1+0x500>
 8002310:	ec43 2b10 	vmov	d0, r2, r3
 8002314:	f005 fbee 	bl	8007af4 <pow>
 8002318:	ec55 4b10 	vmov	r4, r5, d0
 800231c:	4b69      	ldr	r3, [pc, #420]	; (80024c4 <calculate_IK_BN1+0x52c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f8b9 	bl	8000498 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002498 <calculate_IK_BN1+0x500>
 800232e:	ec43 2b10 	vmov	d0, r2, r3
 8002332:	f005 fbdf 	bl	8007af4 <pow>
 8002336:	ec53 2b10 	vmov	r2, r3, d0
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fd ff4b 	bl	80001d8 <__aeabi_dsub>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4614      	mov	r4, r2
 8002348:	461d      	mov	r5, r3
 800234a:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <calculate_IK_BN1+0x538>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8a2 	bl	8000498 <__aeabi_f2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002498 <calculate_IK_BN1+0x500>
 800235c:	ec43 2b10 	vmov	d0, r2, r3
 8002360:	f005 fbc8 	bl	8007af4 <pow>
 8002364:	ec53 2b10 	vmov	r2, r3, d0
 8002368:	4620      	mov	r0, r4
 800236a:	4629      	mov	r1, r5
 800236c:	f7fd ff34 	bl	80001d8 <__aeabi_dsub>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4614      	mov	r4, r2
 8002376:	461d      	mov	r5, r3
 8002378:	4b56      	ldr	r3, [pc, #344]	; (80024d4 <calculate_IK_BN1+0x53c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f88b 	bl	8000498 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8002498 <calculate_IK_BN1+0x500>
 800238a:	ec43 2b10 	vmov	d0, r2, r3
 800238e:	f005 fbb1 	bl	8007af4 <pow>
 8002392:	ec53 2b10 	vmov	r2, r3, d0
 8002396:	4620      	mov	r0, r4
 8002398:	4629      	mov	r1, r5
 800239a:	f7fd ff1d 	bl	80001d8 <__aeabi_dsub>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f7fe fba7 	bl	8000af8 <__aeabi_d2f>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4a4d      	ldr	r2, [pc, #308]	; (80024e4 <calculate_IK_BN1+0x54c>)
 80023ae:	6013      	str	r3, [r2, #0]
    f = sqrt(pow(a, 2) + pow(b, 2));
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <calculate_IK_BN1+0x540>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f86f 	bl	8000498 <__aeabi_f2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8002498 <calculate_IK_BN1+0x500>
 80023c2:	ec43 2b10 	vmov	d0, r2, r3
 80023c6:	f005 fb95 	bl	8007af4 <pow>
 80023ca:	ec55 4b10 	vmov	r4, r5, d0
 80023ce:	4b43      	ldr	r3, [pc, #268]	; (80024dc <calculate_IK_BN1+0x544>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f860 	bl	8000498 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8002498 <calculate_IK_BN1+0x500>
 80023e0:	ec43 2b10 	vmov	d0, r2, r3
 80023e4:	f005 fb86 	bl	8007af4 <pow>
 80023e8:	ec53 2b10 	vmov	r2, r3, d0
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd fef4 	bl	80001dc <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	ec43 2b17 	vmov	d7, r2, r3
 80023fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002400:	eef0 0a67 	vmov.f32	s1, s15
 8002404:	f005 fbe6 	bl	8007bd4 <sqrt>
 8002408:	ec53 2b10 	vmov	r2, r3, d0
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fb72 	bl	8000af8 <__aeabi_d2f>
 8002414:	4603      	mov	r3, r0
 8002416:	4a34      	ldr	r2, [pc, #208]	; (80024e8 <calculate_IK_BN1+0x550>)
 8002418:	6013      	str	r3, [r2, #0]
    alpha = atan2(-2 * L2 * F / f, -2 * L2 * E / f);
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <calculate_IK_BN1+0x53c>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002424:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <calculate_IK_BN1+0x538>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <calculate_IK_BN1+0x550>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800243c:	ee16 0a90 	vmov	r0, s13
 8002440:	f7fe f82a 	bl	8000498 <__aeabi_f2d>
 8002444:	4604      	mov	r4, r0
 8002446:	460d      	mov	r5, r1
 8002448:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <calculate_IK_BN1+0x53c>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002452:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <calculate_IK_BN1+0x52c>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <calculate_IK_BN1+0x550>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800246a:	ee16 0a90 	vmov	r0, s13
 800246e:	f7fe f813 	bl	8000498 <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	ec43 2b11 	vmov	d1, r2, r3
 800247a:	ec45 4b10 	vmov	d0, r4, r5
 800247e:	f005 fb37 	bl	8007af0 <atan2>
 8002482:	ec53 2b10 	vmov	r2, r3, d0
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	f7fe fb35 	bl	8000af8 <__aeabi_d2f>
 800248e:	4603      	mov	r3, r0
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <calculate_IK_BN1+0x554>)
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e02c      	b.n	80024f0 <calculate_IK_BN1+0x558>
 8002496:	bf00      	nop
 8002498:	00000000 	.word	0x00000000
 800249c:	40000000 	.word	0x40000000
 80024a0:	200009a8 	.word	0x200009a8
 80024a4:	43340000 	.word	0x43340000
 80024a8:	43b40000 	.word	0x43b40000
 80024ac:	20000988 	.word	0x20000988
 80024b0:	20000998 	.word	0x20000998
 80024b4:	2000098c 	.word	0x2000098c
 80024b8:	20000000 	.word	0x20000000
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	200009e4 	.word	0x200009e4
 80024c4:	200009c0 	.word	0x200009c0
 80024c8:	20000990 	.word	0x20000990
 80024cc:	20000010 	.word	0x20000010
 80024d0:	200009c4 	.word	0x200009c4
 80024d4:	20000004 	.word	0x20000004
 80024d8:	200009c8 	.word	0x200009c8
 80024dc:	200009cc 	.word	0x200009cc
 80024e0:	20000008 	.word	0x20000008
 80024e4:	200009d0 	.word	0x200009d0
 80024e8:	200009d4 	.word	0x200009d4
 80024ec:	200009b8 	.word	0x200009b8

    var_temp = pow(d, 2) / pow(f, 2);
 80024f0:	4b55      	ldr	r3, [pc, #340]	; (8002648 <calculate_IK_BN1+0x6b0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ffcf 	bl	8000498 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8002638 <calculate_IK_BN1+0x6a0>
 8002502:	ec43 2b10 	vmov	d0, r2, r3
 8002506:	f005 faf5 	bl	8007af4 <pow>
 800250a:	ec55 4b10 	vmov	r4, r5, d0
 800250e:	4b4f      	ldr	r3, [pc, #316]	; (800264c <calculate_IK_BN1+0x6b4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ffc0 	bl	8000498 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002638 <calculate_IK_BN1+0x6a0>
 8002520:	ec43 2b10 	vmov	d0, r2, r3
 8002524:	f005 fae6 	bl	8007af4 <pow>
 8002528:	ec53 2b10 	vmov	r2, r3, d0
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fe f934 	bl	800079c <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fadc 	bl	8000af8 <__aeabi_d2f>
 8002540:	4603      	mov	r3, r0
 8002542:	4a43      	ldr	r2, [pc, #268]	; (8002650 <calculate_IK_BN1+0x6b8>)
 8002544:	6013      	str	r3, [r2, #0]
    if (var_temp > 1) var_temp = 1;
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <calculate_IK_BN1+0x6b8>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd03      	ble.n	8002562 <calculate_IK_BN1+0x5ca>
 800255a:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <calculate_IK_BN1+0x6b8>)
 800255c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002560:	601a      	str	r2, [r3, #0]

    theta2_IK_rad = atan2(sqrt(1 - var_temp), d / f) + alpha;
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <calculate_IK_BN1+0x6b8>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	ee17 0a90 	vmov	r0, s15
 8002574:	f7fd ff90 	bl	8000498 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b10 	vmov	d0, r2, r3
 8002580:	f005 fb28 	bl	8007bd4 <sqrt>
 8002584:	eeb0 8a40 	vmov.f32	s16, s0
 8002588:	eef0 8a60 	vmov.f32	s17, s1
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <calculate_IK_BN1+0x6b0>)
 800258e:	ed93 7a00 	vldr	s14, [r3]
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <calculate_IK_BN1+0x6b4>)
 8002594:	edd3 7a00 	vldr	s15, [r3]
 8002598:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800259c:	ee16 0a90 	vmov	r0, s13
 80025a0:	f7fd ff7a 	bl	8000498 <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	ec43 2b11 	vmov	d1, r2, r3
 80025ac:	eeb0 0a48 	vmov.f32	s0, s16
 80025b0:	eef0 0a68 	vmov.f32	s1, s17
 80025b4:	f005 fa9c 	bl	8007af0 <atan2>
 80025b8:	ec55 4b10 	vmov	r4, r5, d0
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <calculate_IK_BN1+0x6bc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff69 	bl	8000498 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fd fe05 	bl	80001dc <__adddf3>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fa8d 	bl	8000af8 <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <calculate_IK_BN1+0x6c0>)
 80025e2:	6013      	str	r3, [r2, #0]
    Theta2_IK = theta2_IK_rad * (180 / M_PI);
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <calculate_IK_BN1+0x6c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff55 	bl	8000498 <__aeabi_f2d>
 80025ee:	a314      	add	r3, pc, #80	; (adr r3, 8002640 <calculate_IK_BN1+0x6a8>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4610      	mov	r0, r2
 80025fe:	4619      	mov	r1, r3
 8002600:	f7fe fa7a 	bl	8000af8 <__aeabi_d2f>
 8002604:	4603      	mov	r3, r0
 8002606:	4a15      	ldr	r2, [pc, #84]	; (800265c <calculate_IK_BN1+0x6c4>)
 8002608:	6013      	str	r3, [r2, #0]

    if (Theta2_IK < -180) {
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <calculate_IK_BN1+0x6c4>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002660 <calculate_IK_BN1+0x6c8>
 8002614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d524      	bpl.n	8002668 <calculate_IK_BN1+0x6d0>
        Theta2_IK += 360;
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <calculate_IK_BN1+0x6c4>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002664 <calculate_IK_BN1+0x6cc>
 8002628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <calculate_IK_BN1+0x6c4>)
 800262e:	edc3 7a00 	vstr	s15, [r3]
 8002632:	e02d      	b.n	8002690 <calculate_IK_BN1+0x6f8>
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	40000000 	.word	0x40000000
 8002640:	1a63c1f8 	.word	0x1a63c1f8
 8002644:	404ca5dc 	.word	0x404ca5dc
 8002648:	200009d0 	.word	0x200009d0
 800264c:	200009d4 	.word	0x200009d4
 8002650:	200009d8 	.word	0x200009d8
 8002654:	200009b8 	.word	0x200009b8
 8002658:	2000099c 	.word	0x2000099c
 800265c:	200009ac 	.word	0x200009ac
 8002660:	c3340000 	.word	0xc3340000
 8002664:	43b40000 	.word	0x43b40000
    } else if (Theta2_IK > 180) {
 8002668:	4bbb      	ldr	r3, [pc, #748]	; (8002958 <calculate_IK_BN1+0x9c0>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ed9f 7abb 	vldr	s14, [pc, #748]	; 800295c <calculate_IK_BN1+0x9c4>
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	dd09      	ble.n	8002690 <calculate_IK_BN1+0x6f8>
        Theta2_IK -= 360;
 800267c:	4bb6      	ldr	r3, [pc, #728]	; (8002958 <calculate_IK_BN1+0x9c0>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002960 <calculate_IK_BN1+0x9c8>
 8002686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800268a:	4bb3      	ldr	r3, [pc, #716]	; (8002958 <calculate_IK_BN1+0x9c0>)
 800268c:	edc3 7a00 	vstr	s15, [r3]
    }

    c23 = (Px_IK * cos(theta1_IK_rad) + Py_IK * sin(theta1_IK_rad) - L1 - L2 * cos(theta2_IK_rad) - L4 * cos(t_rad)) / L3;
 8002690:	4bb4      	ldr	r3, [pc, #720]	; (8002964 <calculate_IK_BN1+0x9cc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd feff 	bl	8000498 <__aeabi_f2d>
 800269a:	4604      	mov	r4, r0
 800269c:	460d      	mov	r5, r1
 800269e:	4bb2      	ldr	r3, [pc, #712]	; (8002968 <calculate_IK_BN1+0x9d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fef8 	bl	8000498 <__aeabi_f2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	ec43 2b10 	vmov	d0, r2, r3
 80026b0:	f005 fabe 	bl	8007c30 <cos>
 80026b4:	ec53 2b10 	vmov	r2, r3, d0
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ff44 	bl	8000548 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4690      	mov	r8, r2
 80026c6:	4699      	mov	r9, r3
 80026c8:	4ba8      	ldr	r3, [pc, #672]	; (800296c <calculate_IK_BN1+0x9d4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fee3 	bl	8000498 <__aeabi_f2d>
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	4ba4      	ldr	r3, [pc, #656]	; (8002968 <calculate_IK_BN1+0x9d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fedc 	bl	8000498 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	ec43 2b10 	vmov	d0, r2, r3
 80026e8:	f005 faf6 	bl	8007cd8 <sin>
 80026ec:	ec53 2b10 	vmov	r2, r3, d0
 80026f0:	4620      	mov	r0, r4
 80026f2:	4629      	mov	r1, r5
 80026f4:	f7fd ff28 	bl	8000548 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4640      	mov	r0, r8
 80026fe:	4649      	mov	r1, r9
 8002700:	f7fd fd6c 	bl	80001dc <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4b98      	ldr	r3, [pc, #608]	; (8002970 <calculate_IK_BN1+0x9d8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fec1 	bl	8000498 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4620      	mov	r0, r4
 800271c:	4629      	mov	r1, r5
 800271e:	f7fd fd5b 	bl	80001d8 <__aeabi_dsub>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4690      	mov	r8, r2
 8002728:	4699      	mov	r9, r3
 800272a:	4b92      	ldr	r3, [pc, #584]	; (8002974 <calculate_IK_BN1+0x9dc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd feb2 	bl	8000498 <__aeabi_f2d>
 8002734:	4604      	mov	r4, r0
 8002736:	460d      	mov	r5, r1
 8002738:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <calculate_IK_BN1+0x9e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd feab 	bl	8000498 <__aeabi_f2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	ec43 2b10 	vmov	d0, r2, r3
 800274a:	f005 fa71 	bl	8007c30 <cos>
 800274e:	ec53 2b10 	vmov	r2, r3, d0
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd fef7 	bl	8000548 <__aeabi_dmul>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4640      	mov	r0, r8
 8002760:	4649      	mov	r1, r9
 8002762:	f7fd fd39 	bl	80001d8 <__aeabi_dsub>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4690      	mov	r8, r2
 800276c:	4699      	mov	r9, r3
 800276e:	4b83      	ldr	r3, [pc, #524]	; (800297c <calculate_IK_BN1+0x9e4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fe90 	bl	8000498 <__aeabi_f2d>
 8002778:	4604      	mov	r4, r0
 800277a:	460d      	mov	r5, r1
 800277c:	4b80      	ldr	r3, [pc, #512]	; (8002980 <calculate_IK_BN1+0x9e8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fe89 	bl	8000498 <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	ec43 2b10 	vmov	d0, r2, r3
 800278e:	f005 fa4f 	bl	8007c30 <cos>
 8002792:	ec53 2b10 	vmov	r2, r3, d0
 8002796:	4620      	mov	r0, r4
 8002798:	4629      	mov	r1, r5
 800279a:	f7fd fed5 	bl	8000548 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4640      	mov	r0, r8
 80027a4:	4649      	mov	r1, r9
 80027a6:	f7fd fd17 	bl	80001d8 <__aeabi_dsub>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	461d      	mov	r5, r3
 80027b2:	4b74      	ldr	r3, [pc, #464]	; (8002984 <calculate_IK_BN1+0x9ec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fd fe6e 	bl	8000498 <__aeabi_f2d>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4620      	mov	r0, r4
 80027c2:	4629      	mov	r1, r5
 80027c4:	f7fd ffea 	bl	800079c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f992 	bl	8000af8 <__aeabi_d2f>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a6c      	ldr	r2, [pc, #432]	; (8002988 <calculate_IK_BN1+0x9f0>)
 80027d8:	6013      	str	r3, [r2, #0]
    s23 = (Pz_IK - d1 - L2 * sin(theta2_IK_rad) - L4 * sin(t_rad)) / L3;
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <calculate_IK_BN1+0x9f4>)
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	4b6b      	ldr	r3, [pc, #428]	; (8002990 <calculate_IK_BN1+0x9f8>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	ee17 0a90 	vmov	r0, s15
 80027ee:	f7fd fe53 	bl	8000498 <__aeabi_f2d>
 80027f2:	4604      	mov	r4, r0
 80027f4:	460d      	mov	r5, r1
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <calculate_IK_BN1+0x9dc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe4c 	bl	8000498 <__aeabi_f2d>
 8002800:	4680      	mov	r8, r0
 8002802:	4689      	mov	r9, r1
 8002804:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <calculate_IK_BN1+0x9e0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe45 	bl	8000498 <__aeabi_f2d>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	ec43 2b10 	vmov	d0, r2, r3
 8002816:	f005 fa5f 	bl	8007cd8 <sin>
 800281a:	ec53 2b10 	vmov	r2, r3, d0
 800281e:	4640      	mov	r0, r8
 8002820:	4649      	mov	r1, r9
 8002822:	f7fd fe91 	bl	8000548 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f7fd fcd3 	bl	80001d8 <__aeabi_dsub>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4690      	mov	r8, r2
 8002838:	4699      	mov	r9, r3
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <calculate_IK_BN1+0x9e4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe2a 	bl	8000498 <__aeabi_f2d>
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <calculate_IK_BN1+0x9e8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe23 	bl	8000498 <__aeabi_f2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	ec43 2b10 	vmov	d0, r2, r3
 800285a:	f005 fa3d 	bl	8007cd8 <sin>
 800285e:	ec53 2b10 	vmov	r2, r3, d0
 8002862:	4620      	mov	r0, r4
 8002864:	4629      	mov	r1, r5
 8002866:	f7fd fe6f 	bl	8000548 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4640      	mov	r0, r8
 8002870:	4649      	mov	r1, r9
 8002872:	f7fd fcb1 	bl	80001d8 <__aeabi_dsub>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4614      	mov	r4, r2
 800287c:	461d      	mov	r5, r3
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <calculate_IK_BN1+0x9ec>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe08 	bl	8000498 <__aeabi_f2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fd ff84 	bl	800079c <__aeabi_ddiv>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f92c 	bl	8000af8 <__aeabi_d2f>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a3c      	ldr	r2, [pc, #240]	; (8002994 <calculate_IK_BN1+0x9fc>)
 80028a4:	6013      	str	r3, [r2, #0]
    theta3_IK_rad = atan2(s23, c23) - theta2_IK_rad;
 80028a6:	4b3b      	ldr	r3, [pc, #236]	; (8002994 <calculate_IK_BN1+0x9fc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fdf4 	bl	8000498 <__aeabi_f2d>
 80028b0:	4604      	mov	r4, r0
 80028b2:	460d      	mov	r5, r1
 80028b4:	4b34      	ldr	r3, [pc, #208]	; (8002988 <calculate_IK_BN1+0x9f0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fded 	bl	8000498 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ec43 2b11 	vmov	d1, r2, r3
 80028c6:	ec45 4b10 	vmov	d0, r4, r5
 80028ca:	f005 f911 	bl	8007af0 <atan2>
 80028ce:	ec55 4b10 	vmov	r4, r5, d0
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <calculate_IK_BN1+0x9e0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fdde 	bl	8000498 <__aeabi_f2d>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4620      	mov	r0, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	f7fd fc78 	bl	80001d8 <__aeabi_dsub>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fe f902 	bl	8000af8 <__aeabi_d2f>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4a28      	ldr	r2, [pc, #160]	; (8002998 <calculate_IK_BN1+0xa00>)
 80028f8:	6013      	str	r3, [r2, #0]
    Theta3_IK = theta3_IK_rad * (180 / M_PI);
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <calculate_IK_BN1+0xa00>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fdca 	bl	8000498 <__aeabi_f2d>
 8002904:	a312      	add	r3, pc, #72	; (adr r3, 8002950 <calculate_IK_BN1+0x9b8>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd fe1d 	bl	8000548 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f8ef 	bl	8000af8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	4a1f      	ldr	r2, [pc, #124]	; (800299c <calculate_IK_BN1+0xa04>)
 800291e:	6013      	str	r3, [r2, #0]

    if (Theta3_IK < -180) {
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <calculate_IK_BN1+0xa04>)
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80029a0 <calculate_IK_BN1+0xa08>
 800292a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	d537      	bpl.n	80029a4 <calculate_IK_BN1+0xa0c>
        Theta3_IK += 360;
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <calculate_IK_BN1+0xa04>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002960 <calculate_IK_BN1+0x9c8>
 800293e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <calculate_IK_BN1+0xa04>)
 8002944:	edc3 7a00 	vstr	s15, [r3]
 8002948:	e040      	b.n	80029cc <calculate_IK_BN1+0xa34>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	1a63c1f8 	.word	0x1a63c1f8
 8002954:	404ca5dc 	.word	0x404ca5dc
 8002958:	200009ac 	.word	0x200009ac
 800295c:	43340000 	.word	0x43340000
 8002960:	43b40000 	.word	0x43b40000
 8002964:	20000988 	.word	0x20000988
 8002968:	20000998 	.word	0x20000998
 800296c:	2000098c 	.word	0x2000098c
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004
 8002978:	2000099c 	.word	0x2000099c
 800297c:	2000000c 	.word	0x2000000c
 8002980:	200009e4 	.word	0x200009e4
 8002984:	20000008 	.word	0x20000008
 8002988:	200009dc 	.word	0x200009dc
 800298c:	20000990 	.word	0x20000990
 8002990:	20000010 	.word	0x20000010
 8002994:	200009e0 	.word	0x200009e0
 8002998:	200009a0 	.word	0x200009a0
 800299c:	200009b0 	.word	0x200009b0
 80029a0:	c3340000 	.word	0xc3340000
    } else if (Theta3_IK > 180) {
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <calculate_IK_BN1+0xa90>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002a2c <calculate_IK_BN1+0xa94>
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	dd09      	ble.n	80029cc <calculate_IK_BN1+0xa34>
        Theta3_IK -= 360;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <calculate_IK_BN1+0xa90>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a30 <calculate_IK_BN1+0xa98>
 80029c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <calculate_IK_BN1+0xa90>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
    }

    theta4_IK_rad = t_rad - theta2_IK_rad - theta3_IK_rad;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <calculate_IK_BN1+0xa9c>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <calculate_IK_BN1+0xaa0>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <calculate_IK_BN1+0xaa4>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <calculate_IK_BN1+0xaa8>)
 80029e8:	edc3 7a00 	vstr	s15, [r3]
    Theta4_IK = theta4_IK_rad * (180 / M_PI);
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <calculate_IK_BN1+0xaa8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fd51 	bl	8000498 <__aeabi_f2d>
 80029f6:	a30a      	add	r3, pc, #40	; (adr r3, 8002a20 <calculate_IK_BN1+0xa88>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fda4 	bl	8000548 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fe f876 	bl	8000af8 <__aeabi_d2f>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <calculate_IK_BN1+0xaac>)
 8002a10:	6013      	str	r3, [r2, #0]

}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	ecbd 8b02 	vpop	{d8}
 8002a1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a20:	1a63c1f8 	.word	0x1a63c1f8
 8002a24:	404ca5dc 	.word	0x404ca5dc
 8002a28:	200009b0 	.word	0x200009b0
 8002a2c:	43340000 	.word	0x43340000
 8002a30:	43b40000 	.word	0x43b40000
 8002a34:	200009e4 	.word	0x200009e4
 8002a38:	2000099c 	.word	0x2000099c
 8002a3c:	200009a0 	.word	0x200009a0
 8002a40:	200009a4 	.word	0x200009a4
 8002a44:	200009b4 	.word	0x200009b4

08002a48 <calculate_IK_BN2>:

void calculate_IK_BN2(float px_value, float py_value, float pz_value, float Theta_value) {
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a54:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a58:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a5c:	edc7 1a00 	vstr	s3, [r7]

    Px_IK = px_value;
 8002a60:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <calculate_IK_BN2+0x180>)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6013      	str	r3, [r2, #0]
    Py_IK = py_value;
 8002a66:	4a59      	ldr	r2, [pc, #356]	; (8002bcc <calculate_IK_BN2+0x184>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6013      	str	r3, [r2, #0]
    Pz_IK = pz_value;
 8002a6c:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <calculate_IK_BN2+0x188>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
    Theta_IK = Theta_value;
 8002a72:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <calculate_IK_BN2+0x18c>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6013      	str	r3, [r2, #0]

    t_rad = Theta_IK * (M_PI / 180);
 8002a78:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <calculate_IK_BN2+0x18c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd0b 	bl	8000498 <__aeabi_f2d>
 8002a82:	a34b      	add	r3, pc, #300	; (adr r3, 8002bb0 <calculate_IK_BN2+0x168>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fd5e 	bl	8000548 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f830 	bl	8000af8 <__aeabi_d2f>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <calculate_IK_BN2+0x190>)
 8002a9c:	6013      	str	r3, [r2, #0]
    k = sqrt(pow(Px_IK, 2) + pow(Py_IK, 2));
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <calculate_IK_BN2+0x180>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fcf8 	bl	8000498 <__aeabi_f2d>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002bb8 <calculate_IK_BN2+0x170>
 8002ab0:	ec43 2b10 	vmov	d0, r2, r3
 8002ab4:	f005 f81e 	bl	8007af4 <pow>
 8002ab8:	ec55 4b10 	vmov	r4, r5, d0
 8002abc:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <calculate_IK_BN2+0x184>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fce9 	bl	8000498 <__aeabi_f2d>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8002bb8 <calculate_IK_BN2+0x170>
 8002ace:	ec43 2b10 	vmov	d0, r2, r3
 8002ad2:	f005 f80f 	bl	8007af4 <pow>
 8002ad6:	ec53 2b10 	vmov	r2, r3, d0
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fb7d 	bl	80001dc <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b17 	vmov	d7, r2, r3
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	eef0 0a67 	vmov.f32	s1, s15
 8002af2:	f005 f86f 	bl	8007bd4 <sqrt>
 8002af6:	ec53 2b10 	vmov	r2, r3, d0
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fd fffb 	bl	8000af8 <__aeabi_d2f>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <calculate_IK_BN2+0x194>)
 8002b06:	6013      	str	r3, [r2, #0]
    theta1_IK_rad = atan2((Py_IK / k), (Px_IK / k));
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <calculate_IK_BN2+0x184>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <calculate_IK_BN2+0x194>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b18:	ee16 0a90 	vmov	r0, s13
 8002b1c:	f7fd fcbc 	bl	8000498 <__aeabi_f2d>
 8002b20:	4604      	mov	r4, r0
 8002b22:	460d      	mov	r5, r1
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <calculate_IK_BN2+0x180>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <calculate_IK_BN2+0x194>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b34:	ee16 0a90 	vmov	r0, s13
 8002b38:	f7fd fcae 	bl	8000498 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	ec43 2b11 	vmov	d1, r2, r3
 8002b44:	ec45 4b10 	vmov	d0, r4, r5
 8002b48:	f004 ffd2 	bl	8007af0 <atan2>
 8002b4c:	ec53 2b10 	vmov	r2, r3, d0
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fd ffd0 	bl	8000af8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <calculate_IK_BN2+0x198>)
 8002b5c:	6013      	str	r3, [r2, #0]
    Theta1_IK = theta1_IK_rad * (180 / M_PI);
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <calculate_IK_BN2+0x198>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc98 	bl	8000498 <__aeabi_f2d>
 8002b68:	a315      	add	r3, pc, #84	; (adr r3, 8002bc0 <calculate_IK_BN2+0x178>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fceb 	bl	8000548 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fd ffbd 	bl	8000af8 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <calculate_IK_BN2+0x19c>)
 8002b82:	6013      	str	r3, [r2, #0]

    if (Theta1_IK < -180) {
 8002b84:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <calculate_IK_BN2+0x19c>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002be8 <calculate_IK_BN2+0x1a0>
 8002b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	d52b      	bpl.n	8002bf0 <calculate_IK_BN2+0x1a8>
        Theta1_IK += 360;
 8002b98:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <calculate_IK_BN2+0x19c>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bec <calculate_IK_BN2+0x1a4>
 8002ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <calculate_IK_BN2+0x19c>)
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
 8002bac:	e034      	b.n	8002c18 <calculate_IK_BN2+0x1d0>
 8002bae:	bf00      	nop
 8002bb0:	a2529d39 	.word	0xa2529d39
 8002bb4:	3f91df46 	.word	0x3f91df46
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	40000000 	.word	0x40000000
 8002bc0:	1a63c1f8 	.word	0x1a63c1f8
 8002bc4:	404ca5dc 	.word	0x404ca5dc
 8002bc8:	20000988 	.word	0x20000988
 8002bcc:	2000098c 	.word	0x2000098c
 8002bd0:	20000990 	.word	0x20000990
 8002bd4:	20000994 	.word	0x20000994
 8002bd8:	200009e4 	.word	0x200009e4
 8002bdc:	200009bc 	.word	0x200009bc
 8002be0:	20000998 	.word	0x20000998
 8002be4:	200009a8 	.word	0x200009a8
 8002be8:	c3340000 	.word	0xc3340000
 8002bec:	43b40000 	.word	0x43b40000
    } else if (Theta1_IK > 180) {
 8002bf0:	4bd5      	ldr	r3, [pc, #852]	; (8002f48 <calculate_IK_BN2+0x500>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8002f4c <calculate_IK_BN2+0x504>
 8002bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c02:	dd09      	ble.n	8002c18 <calculate_IK_BN2+0x1d0>
        Theta1_IK -= 360;
 8002c04:	4bd0      	ldr	r3, [pc, #832]	; (8002f48 <calculate_IK_BN2+0x500>)
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8002f50 <calculate_IK_BN2+0x508>
 8002c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <calculate_IK_BN2+0x500>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]
    }

    E = Px_IK * cos(theta1_IK_rad) + Py_IK * sin(theta1_IK_rad) - L1 - L4 * cos(t_rad);
 8002c18:	4bce      	ldr	r3, [pc, #824]	; (8002f54 <calculate_IK_BN2+0x50c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fc3b 	bl	8000498 <__aeabi_f2d>
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
 8002c26:	4bcc      	ldr	r3, [pc, #816]	; (8002f58 <calculate_IK_BN2+0x510>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc34 	bl	8000498 <__aeabi_f2d>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ec43 2b10 	vmov	d0, r2, r3
 8002c38:	f004 fffa 	bl	8007c30 <cos>
 8002c3c:	ec53 2b10 	vmov	r2, r3, d0
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd fc80 	bl	8000548 <__aeabi_dmul>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4690      	mov	r8, r2
 8002c4e:	4699      	mov	r9, r3
 8002c50:	4bc2      	ldr	r3, [pc, #776]	; (8002f5c <calculate_IK_BN2+0x514>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fc1f 	bl	8000498 <__aeabi_f2d>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	4bbe      	ldr	r3, [pc, #760]	; (8002f58 <calculate_IK_BN2+0x510>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc18 	bl	8000498 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	ec43 2b10 	vmov	d0, r2, r3
 8002c70:	f005 f832 	bl	8007cd8 <sin>
 8002c74:	ec53 2b10 	vmov	r2, r3, d0
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4640      	mov	r0, r8
 8002c86:	4649      	mov	r1, r9
 8002c88:	f7fd faa8 	bl	80001dc <__adddf3>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4bb2      	ldr	r3, [pc, #712]	; (8002f60 <calculate_IK_BN2+0x518>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fbfd 	bl	8000498 <__aeabi_f2d>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f7fd fa97 	bl	80001d8 <__aeabi_dsub>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	4690      	mov	r8, r2
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	4bac      	ldr	r3, [pc, #688]	; (8002f64 <calculate_IK_BN2+0x51c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fbee 	bl	8000498 <__aeabi_f2d>
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	460d      	mov	r5, r1
 8002cc0:	4ba9      	ldr	r3, [pc, #676]	; (8002f68 <calculate_IK_BN2+0x520>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fbe7 	bl	8000498 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	ec43 2b10 	vmov	d0, r2, r3
 8002cd2:	f004 ffad 	bl	8007c30 <cos>
 8002cd6:	ec53 2b10 	vmov	r2, r3, d0
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fc33 	bl	8000548 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	4649      	mov	r1, r9
 8002cea:	f7fd fa75 	bl	80001d8 <__aeabi_dsub>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7fd feff 	bl	8000af8 <__aeabi_d2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a9b      	ldr	r2, [pc, #620]	; (8002f6c <calculate_IK_BN2+0x524>)
 8002cfe:	6013      	str	r3, [r2, #0]
    F = Pz_IK - d1 - L4 * sin(t_rad);
 8002d00:	4b9b      	ldr	r3, [pc, #620]	; (8002f70 <calculate_IK_BN2+0x528>)
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	4b9b      	ldr	r3, [pc, #620]	; (8002f74 <calculate_IK_BN2+0x52c>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d10:	ee17 0a90 	vmov	r0, s15
 8002d14:	f7fd fbc0 	bl	8000498 <__aeabi_f2d>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	460d      	mov	r5, r1
 8002d1c:	4b91      	ldr	r3, [pc, #580]	; (8002f64 <calculate_IK_BN2+0x51c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fbb9 	bl	8000498 <__aeabi_f2d>
 8002d26:	4680      	mov	r8, r0
 8002d28:	4689      	mov	r9, r1
 8002d2a:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <calculate_IK_BN2+0x520>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fbb2 	bl	8000498 <__aeabi_f2d>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	ec43 2b10 	vmov	d0, r2, r3
 8002d3c:	f004 ffcc 	bl	8007cd8 <sin>
 8002d40:	ec53 2b10 	vmov	r2, r3, d0
 8002d44:	4640      	mov	r0, r8
 8002d46:	4649      	mov	r1, r9
 8002d48:	f7fd fbfe 	bl	8000548 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4620      	mov	r0, r4
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7fd fa40 	bl	80001d8 <__aeabi_dsub>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f7fd feca 	bl	8000af8 <__aeabi_d2f>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a84      	ldr	r2, [pc, #528]	; (8002f78 <calculate_IK_BN2+0x530>)
 8002d68:	6013      	str	r3, [r2, #0]

    a = -2 * L2 * F;
 8002d6a:	4b84      	ldr	r3, [pc, #528]	; (8002f7c <calculate_IK_BN2+0x534>)
 8002d6c:	edd3 7a00 	vldr	s15, [r3]
 8002d70:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d78:	4b7f      	ldr	r3, [pc, #508]	; (8002f78 <calculate_IK_BN2+0x530>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <calculate_IK_BN2+0x538>)
 8002d84:	edc3 7a00 	vstr	s15, [r3]
    b = -2 * L2 * E;
 8002d88:	4b7c      	ldr	r3, [pc, #496]	; (8002f7c <calculate_IK_BN2+0x534>)
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002d92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d96:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <calculate_IK_BN2+0x524>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <calculate_IK_BN2+0x53c>)
 8002da2:	edc3 7a00 	vstr	s15, [r3]
    d = pow(L3, 2) - pow(E, 2) - pow(F, 2) - pow(L2, 2);
 8002da6:	4b78      	ldr	r3, [pc, #480]	; (8002f88 <calculate_IK_BN2+0x540>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fb74 	bl	8000498 <__aeabi_f2d>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002db8:	ec43 2b10 	vmov	d0, r2, r3
 8002dbc:	f004 fe9a 	bl	8007af4 <pow>
 8002dc0:	ec55 4b10 	vmov	r4, r5, d0
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <calculate_IK_BN2+0x524>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fb65 	bl	8000498 <__aeabi_f2d>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002dd6:	ec43 2b10 	vmov	d0, r2, r3
 8002dda:	f004 fe8b 	bl	8007af4 <pow>
 8002dde:	ec53 2b10 	vmov	r2, r3, d0
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd f9f7 	bl	80001d8 <__aeabi_dsub>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	461d      	mov	r5, r3
 8002df2:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <calculate_IK_BN2+0x530>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb4e 	bl	8000498 <__aeabi_f2d>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002e04:	ec43 2b10 	vmov	d0, r2, r3
 8002e08:	f004 fe74 	bl	8007af4 <pow>
 8002e0c:	ec53 2b10 	vmov	r2, r3, d0
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd f9e0 	bl	80001d8 <__aeabi_dsub>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4b56      	ldr	r3, [pc, #344]	; (8002f7c <calculate_IK_BN2+0x534>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fb37 	bl	8000498 <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002e32:	ec43 2b10 	vmov	d0, r2, r3
 8002e36:	f004 fe5d 	bl	8007af4 <pow>
 8002e3a:	ec53 2b10 	vmov	r2, r3, d0
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f7fd f9c9 	bl	80001d8 <__aeabi_dsub>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f7fd fe53 	bl	8000af8 <__aeabi_d2f>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4a4d      	ldr	r2, [pc, #308]	; (8002f8c <calculate_IK_BN2+0x544>)
 8002e56:	6013      	str	r3, [r2, #0]
    f = sqrt(pow(a, 2) + pow(b, 2));
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <calculate_IK_BN2+0x538>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb1b 	bl	8000498 <__aeabi_f2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002e6a:	ec43 2b10 	vmov	d0, r2, r3
 8002e6e:	f004 fe41 	bl	8007af4 <pow>
 8002e72:	ec55 4b10 	vmov	r4, r5, d0
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <calculate_IK_BN2+0x53c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb0c 	bl	8000498 <__aeabi_f2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 8002f40 <calculate_IK_BN2+0x4f8>
 8002e88:	ec43 2b10 	vmov	d0, r2, r3
 8002e8c:	f004 fe32 	bl	8007af4 <pow>
 8002e90:	ec53 2b10 	vmov	r2, r3, d0
 8002e94:	4620      	mov	r0, r4
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fd f9a0 	bl	80001dc <__adddf3>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	ec43 2b17 	vmov	d7, r2, r3
 8002ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea8:	eef0 0a67 	vmov.f32	s1, s15
 8002eac:	f004 fe92 	bl	8007bd4 <sqrt>
 8002eb0:	ec53 2b10 	vmov	r2, r3, d0
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7fd fe1e 	bl	8000af8 <__aeabi_d2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <calculate_IK_BN2+0x548>)
 8002ec0:	6013      	str	r3, [r2, #0]
    alpha = atan2(-2 * L2 * F / f, -2 * L2 * E / f);
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <calculate_IK_BN2+0x534>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ed0:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <calculate_IK_BN2+0x530>)
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <calculate_IK_BN2+0x548>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee4:	ee16 0a90 	vmov	r0, s13
 8002ee8:	f7fd fad6 	bl	8000498 <__aeabi_f2d>
 8002eec:	4604      	mov	r4, r0
 8002eee:	460d      	mov	r5, r1
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <calculate_IK_BN2+0x534>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002efa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <calculate_IK_BN2+0x524>)
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <calculate_IK_BN2+0x548>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f12:	ee16 0a90 	vmov	r0, s13
 8002f16:	f7fd fabf 	bl	8000498 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ec43 2b11 	vmov	d1, r2, r3
 8002f22:	ec45 4b10 	vmov	d0, r4, r5
 8002f26:	f004 fde3 	bl	8007af0 <atan2>
 8002f2a:	ec53 2b10 	vmov	r2, r3, d0
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7fd fde1 	bl	8000af8 <__aeabi_d2f>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <calculate_IK_BN2+0x54c>)
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e02c      	b.n	8002f98 <calculate_IK_BN2+0x550>
 8002f3e:	bf00      	nop
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40000000 	.word	0x40000000
 8002f48:	200009a8 	.word	0x200009a8
 8002f4c:	43340000 	.word	0x43340000
 8002f50:	43b40000 	.word	0x43b40000
 8002f54:	20000988 	.word	0x20000988
 8002f58:	20000998 	.word	0x20000998
 8002f5c:	2000098c 	.word	0x2000098c
 8002f60:	20000000 	.word	0x20000000
 8002f64:	2000000c 	.word	0x2000000c
 8002f68:	200009e4 	.word	0x200009e4
 8002f6c:	200009c0 	.word	0x200009c0
 8002f70:	20000990 	.word	0x20000990
 8002f74:	20000010 	.word	0x20000010
 8002f78:	200009c4 	.word	0x200009c4
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	200009c8 	.word	0x200009c8
 8002f84:	200009cc 	.word	0x200009cc
 8002f88:	20000008 	.word	0x20000008
 8002f8c:	200009d0 	.word	0x200009d0
 8002f90:	200009d4 	.word	0x200009d4
 8002f94:	200009b8 	.word	0x200009b8

    var_temp = pow(d, 2) / pow(f, 2);
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <calculate_IK_BN2+0x6a8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fa7b 	bl	8000498 <__aeabi_f2d>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 80030e0 <calculate_IK_BN2+0x698>
 8002faa:	ec43 2b10 	vmov	d0, r2, r3
 8002fae:	f004 fda1 	bl	8007af4 <pow>
 8002fb2:	ec55 4b10 	vmov	r4, r5, d0
 8002fb6:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <calculate_IK_BN2+0x6ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fa6c 	bl	8000498 <__aeabi_f2d>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80030e0 <calculate_IK_BN2+0x698>
 8002fc8:	ec43 2b10 	vmov	d0, r2, r3
 8002fcc:	f004 fd92 	bl	8007af4 <pow>
 8002fd0:	ec53 2b10 	vmov	r2, r3, d0
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	f7fd fbe0 	bl	800079c <__aeabi_ddiv>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fd88 	bl	8000af8 <__aeabi_d2f>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a43      	ldr	r2, [pc, #268]	; (80030f8 <calculate_IK_BN2+0x6b0>)
 8002fec:	6013      	str	r3, [r2, #0]
    if (var_temp > 1) var_temp = 1;
 8002fee:	4b42      	ldr	r3, [pc, #264]	; (80030f8 <calculate_IK_BN2+0x6b0>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	dd03      	ble.n	800300a <calculate_IK_BN2+0x5c2>
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <calculate_IK_BN2+0x6b0>)
 8003004:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003008:	601a      	str	r2, [r3, #0]

    theta2_IK_rad = atan2(-sqrt(1 - var_temp), d / f) + alpha;
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <calculate_IK_BN2+0x6b0>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	ee17 0a90 	vmov	r0, s15
 800301c:	f7fd fa3c 	bl	8000498 <__aeabi_f2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	ec43 2b10 	vmov	d0, r2, r3
 8003028:	f004 fdd4 	bl	8007bd4 <sqrt>
 800302c:	ec53 2b10 	vmov	r2, r3, d0
 8003030:	4692      	mov	sl, r2
 8003032:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <calculate_IK_BN2+0x6a8>)
 8003038:	ed93 7a00 	vldr	s14, [r3]
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <calculate_IK_BN2+0x6ac>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003046:	ee16 0a90 	vmov	r0, s13
 800304a:	f7fd fa25 	bl	8000498 <__aeabi_f2d>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	ec43 2b11 	vmov	d1, r2, r3
 8003056:	ec4b ab10 	vmov	d0, sl, fp
 800305a:	f004 fd49 	bl	8007af0 <atan2>
 800305e:	ec55 4b10 	vmov	r4, r5, d0
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <calculate_IK_BN2+0x6b4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa16 	bl	8000498 <__aeabi_f2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4620      	mov	r0, r4
 8003072:	4629      	mov	r1, r5
 8003074:	f7fd f8b2 	bl	80001dc <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	f7fd fd3a 	bl	8000af8 <__aeabi_d2f>
 8003084:	4603      	mov	r3, r0
 8003086:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <calculate_IK_BN2+0x6b8>)
 8003088:	6013      	str	r3, [r2, #0]
    Theta2_IK = theta2_IK_rad * (180 / M_PI);
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <calculate_IK_BN2+0x6b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa02 	bl	8000498 <__aeabi_f2d>
 8003094:	a314      	add	r3, pc, #80	; (adr r3, 80030e8 <calculate_IK_BN2+0x6a0>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fa55 	bl	8000548 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fd27 	bl	8000af8 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a15      	ldr	r2, [pc, #84]	; (8003104 <calculate_IK_BN2+0x6bc>)
 80030ae:	6013      	str	r3, [r2, #0]

    if (Theta2_IK < -180) {
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <calculate_IK_BN2+0x6bc>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003108 <calculate_IK_BN2+0x6c0>
 80030ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c2:	d525      	bpl.n	8003110 <calculate_IK_BN2+0x6c8>
        Theta2_IK += 360;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <calculate_IK_BN2+0x6bc>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800310c <calculate_IK_BN2+0x6c4>
 80030ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <calculate_IK_BN2+0x6bc>)
 80030d4:	edc3 7a00 	vstr	s15, [r3]
 80030d8:	e02e      	b.n	8003138 <calculate_IK_BN2+0x6f0>
 80030da:	bf00      	nop
 80030dc:	f3af 8000 	nop.w
 80030e0:	00000000 	.word	0x00000000
 80030e4:	40000000 	.word	0x40000000
 80030e8:	1a63c1f8 	.word	0x1a63c1f8
 80030ec:	404ca5dc 	.word	0x404ca5dc
 80030f0:	200009d0 	.word	0x200009d0
 80030f4:	200009d4 	.word	0x200009d4
 80030f8:	200009d8 	.word	0x200009d8
 80030fc:	200009b8 	.word	0x200009b8
 8003100:	2000099c 	.word	0x2000099c
 8003104:	200009ac 	.word	0x200009ac
 8003108:	c3340000 	.word	0xc3340000
 800310c:	43b40000 	.word	0x43b40000
    } else if (Theta2_IK > 180) {
 8003110:	4bbb      	ldr	r3, [pc, #748]	; (8003400 <calculate_IK_BN2+0x9b8>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8003404 <calculate_IK_BN2+0x9bc>
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dd09      	ble.n	8003138 <calculate_IK_BN2+0x6f0>
        Theta2_IK -= 360;
 8003124:	4bb6      	ldr	r3, [pc, #728]	; (8003400 <calculate_IK_BN2+0x9b8>)
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8003408 <calculate_IK_BN2+0x9c0>
 800312e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003132:	4bb3      	ldr	r3, [pc, #716]	; (8003400 <calculate_IK_BN2+0x9b8>)
 8003134:	edc3 7a00 	vstr	s15, [r3]
    }

    c23 = (Px_IK * cos(theta1_IK_rad) + Py_IK * sin(theta1_IK_rad) - L1 - L2 * cos(theta2_IK_rad) - L4 * cos(t_rad)) / L3;
 8003138:	4bb4      	ldr	r3, [pc, #720]	; (800340c <calculate_IK_BN2+0x9c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd f9ab 	bl	8000498 <__aeabi_f2d>
 8003142:	4604      	mov	r4, r0
 8003144:	460d      	mov	r5, r1
 8003146:	4bb2      	ldr	r3, [pc, #712]	; (8003410 <calculate_IK_BN2+0x9c8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f9a4 	bl	8000498 <__aeabi_f2d>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	ec43 2b10 	vmov	d0, r2, r3
 8003158:	f004 fd6a 	bl	8007c30 <cos>
 800315c:	ec53 2b10 	vmov	r2, r3, d0
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd f9f0 	bl	8000548 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4690      	mov	r8, r2
 800316e:	4699      	mov	r9, r3
 8003170:	4ba8      	ldr	r3, [pc, #672]	; (8003414 <calculate_IK_BN2+0x9cc>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f98f 	bl	8000498 <__aeabi_f2d>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	4ba4      	ldr	r3, [pc, #656]	; (8003410 <calculate_IK_BN2+0x9c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f988 	bl	8000498 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	ec43 2b10 	vmov	d0, r2, r3
 8003190:	f004 fda2 	bl	8007cd8 <sin>
 8003194:	ec53 2b10 	vmov	r2, r3, d0
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f9d4 	bl	8000548 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4640      	mov	r0, r8
 80031a6:	4649      	mov	r1, r9
 80031a8:	f7fd f818 	bl	80001dc <__adddf3>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	4b98      	ldr	r3, [pc, #608]	; (8003418 <calculate_IK_BN2+0x9d0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f96d 	bl	8000498 <__aeabi_f2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f807 	bl	80001d8 <__aeabi_dsub>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4b92      	ldr	r3, [pc, #584]	; (800341c <calculate_IK_BN2+0x9d4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f95e 	bl	8000498 <__aeabi_f2d>
 80031dc:	4604      	mov	r4, r0
 80031de:	460d      	mov	r5, r1
 80031e0:	4b8f      	ldr	r3, [pc, #572]	; (8003420 <calculate_IK_BN2+0x9d8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd f957 	bl	8000498 <__aeabi_f2d>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	ec43 2b10 	vmov	d0, r2, r3
 80031f2:	f004 fd1d 	bl	8007c30 <cos>
 80031f6:	ec53 2b10 	vmov	r2, r3, d0
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd f9a3 	bl	8000548 <__aeabi_dmul>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4640      	mov	r0, r8
 8003208:	4649      	mov	r1, r9
 800320a:	f7fc ffe5 	bl	80001d8 <__aeabi_dsub>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4690      	mov	r8, r2
 8003214:	4699      	mov	r9, r3
 8003216:	4b83      	ldr	r3, [pc, #524]	; (8003424 <calculate_IK_BN2+0x9dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f93c 	bl	8000498 <__aeabi_f2d>
 8003220:	4604      	mov	r4, r0
 8003222:	460d      	mov	r5, r1
 8003224:	4b80      	ldr	r3, [pc, #512]	; (8003428 <calculate_IK_BN2+0x9e0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f935 	bl	8000498 <__aeabi_f2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	ec43 2b10 	vmov	d0, r2, r3
 8003236:	f004 fcfb 	bl	8007c30 <cos>
 800323a:	ec53 2b10 	vmov	r2, r3, d0
 800323e:	4620      	mov	r0, r4
 8003240:	4629      	mov	r1, r5
 8003242:	f7fd f981 	bl	8000548 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4640      	mov	r0, r8
 800324c:	4649      	mov	r1, r9
 800324e:	f7fc ffc3 	bl	80001d8 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4614      	mov	r4, r2
 8003258:	461d      	mov	r5, r3
 800325a:	4b74      	ldr	r3, [pc, #464]	; (800342c <calculate_IK_BN2+0x9e4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f91a 	bl	8000498 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fd fa96 	bl	800079c <__aeabi_ddiv>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc3e 	bl	8000af8 <__aeabi_d2f>
 800327c:	4603      	mov	r3, r0
 800327e:	4a6c      	ldr	r2, [pc, #432]	; (8003430 <calculate_IK_BN2+0x9e8>)
 8003280:	6013      	str	r3, [r2, #0]
    s23 = (Pz_IK - d1 - L2 * sin(theta2_IK_rad) - L4 * sin(t_rad)) / L3;
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <calculate_IK_BN2+0x9ec>)
 8003284:	ed93 7a00 	vldr	s14, [r3]
 8003288:	4b6b      	ldr	r3, [pc, #428]	; (8003438 <calculate_IK_BN2+0x9f0>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003292:	ee17 0a90 	vmov	r0, s15
 8003296:	f7fd f8ff 	bl	8000498 <__aeabi_f2d>
 800329a:	4604      	mov	r4, r0
 800329c:	460d      	mov	r5, r1
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <calculate_IK_BN2+0x9d4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f8f8 	bl	8000498 <__aeabi_f2d>
 80032a8:	4680      	mov	r8, r0
 80032aa:	4689      	mov	r9, r1
 80032ac:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <calculate_IK_BN2+0x9d8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f8f1 	bl	8000498 <__aeabi_f2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	ec43 2b10 	vmov	d0, r2, r3
 80032be:	f004 fd0b 	bl	8007cd8 <sin>
 80032c2:	ec53 2b10 	vmov	r2, r3, d0
 80032c6:	4640      	mov	r0, r8
 80032c8:	4649      	mov	r1, r9
 80032ca:	f7fd f93d 	bl	8000548 <__aeabi_dmul>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fc ff7f 	bl	80001d8 <__aeabi_dsub>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4690      	mov	r8, r2
 80032e0:	4699      	mov	r9, r3
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <calculate_IK_BN2+0x9dc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f8d6 	bl	8000498 <__aeabi_f2d>
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
 80032f0:	4b4d      	ldr	r3, [pc, #308]	; (8003428 <calculate_IK_BN2+0x9e0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f8cf 	bl	8000498 <__aeabi_f2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	ec43 2b10 	vmov	d0, r2, r3
 8003302:	f004 fce9 	bl	8007cd8 <sin>
 8003306:	ec53 2b10 	vmov	r2, r3, d0
 800330a:	4620      	mov	r0, r4
 800330c:	4629      	mov	r1, r5
 800330e:	f7fd f91b 	bl	8000548 <__aeabi_dmul>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4640      	mov	r0, r8
 8003318:	4649      	mov	r1, r9
 800331a:	f7fc ff5d 	bl	80001d8 <__aeabi_dsub>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4614      	mov	r4, r2
 8003324:	461d      	mov	r5, r3
 8003326:	4b41      	ldr	r3, [pc, #260]	; (800342c <calculate_IK_BN2+0x9e4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f8b4 	bl	8000498 <__aeabi_f2d>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4620      	mov	r0, r4
 8003336:	4629      	mov	r1, r5
 8003338:	f7fd fa30 	bl	800079c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	f7fd fbd8 	bl	8000af8 <__aeabi_d2f>
 8003348:	4603      	mov	r3, r0
 800334a:	4a3c      	ldr	r2, [pc, #240]	; (800343c <calculate_IK_BN2+0x9f4>)
 800334c:	6013      	str	r3, [r2, #0]
    theta3_IK_rad = atan2(s23, c23) - theta2_IK_rad;
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <calculate_IK_BN2+0x9f4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8a0 	bl	8000498 <__aeabi_f2d>
 8003358:	4604      	mov	r4, r0
 800335a:	460d      	mov	r5, r1
 800335c:	4b34      	ldr	r3, [pc, #208]	; (8003430 <calculate_IK_BN2+0x9e8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f899 	bl	8000498 <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	ec43 2b11 	vmov	d1, r2, r3
 800336e:	ec45 4b10 	vmov	d0, r4, r5
 8003372:	f004 fbbd 	bl	8007af0 <atan2>
 8003376:	ec55 4b10 	vmov	r4, r5, d0
 800337a:	4b29      	ldr	r3, [pc, #164]	; (8003420 <calculate_IK_BN2+0x9d8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f88a 	bl	8000498 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff24 	bl	80001d8 <__aeabi_dsub>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	f7fd fbae 	bl	8000af8 <__aeabi_d2f>
 800339c:	4603      	mov	r3, r0
 800339e:	4a28      	ldr	r2, [pc, #160]	; (8003440 <calculate_IK_BN2+0x9f8>)
 80033a0:	6013      	str	r3, [r2, #0]
    Theta3_IK = theta3_IK_rad * (180 / M_PI);
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <calculate_IK_BN2+0x9f8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f876 	bl	8000498 <__aeabi_f2d>
 80033ac:	a312      	add	r3, pc, #72	; (adr r3, 80033f8 <calculate_IK_BN2+0x9b0>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f8c9 	bl	8000548 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f7fd fb9b 	bl	8000af8 <__aeabi_d2f>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <calculate_IK_BN2+0x9fc>)
 80033c6:	6013      	str	r3, [r2, #0]

    if (Theta3_IK < -180) {
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <calculate_IK_BN2+0x9fc>)
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003448 <calculate_IK_BN2+0xa00>
 80033d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d537      	bpl.n	800344c <calculate_IK_BN2+0xa04>
        Theta3_IK += 360;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <calculate_IK_BN2+0x9fc>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003408 <calculate_IK_BN2+0x9c0>
 80033e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <calculate_IK_BN2+0x9fc>)
 80033ec:	edc3 7a00 	vstr	s15, [r3]
 80033f0:	e040      	b.n	8003474 <calculate_IK_BN2+0xa2c>
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	1a63c1f8 	.word	0x1a63c1f8
 80033fc:	404ca5dc 	.word	0x404ca5dc
 8003400:	200009ac 	.word	0x200009ac
 8003404:	43340000 	.word	0x43340000
 8003408:	43b40000 	.word	0x43b40000
 800340c:	20000988 	.word	0x20000988
 8003410:	20000998 	.word	0x20000998
 8003414:	2000098c 	.word	0x2000098c
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004
 8003420:	2000099c 	.word	0x2000099c
 8003424:	2000000c 	.word	0x2000000c
 8003428:	200009e4 	.word	0x200009e4
 800342c:	20000008 	.word	0x20000008
 8003430:	200009dc 	.word	0x200009dc
 8003434:	20000990 	.word	0x20000990
 8003438:	20000010 	.word	0x20000010
 800343c:	200009e0 	.word	0x200009e0
 8003440:	200009a0 	.word	0x200009a0
 8003444:	200009b0 	.word	0x200009b0
 8003448:	c3340000 	.word	0xc3340000
    } else if (Theta3_IK > 180) {
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <calculate_IK_BN2+0xa88>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80034d4 <calculate_IK_BN2+0xa8c>
 8003456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	dd09      	ble.n	8003474 <calculate_IK_BN2+0xa2c>
        Theta3_IK -= 360;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <calculate_IK_BN2+0xa88>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80034d8 <calculate_IK_BN2+0xa90>
 800346a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <calculate_IK_BN2+0xa88>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
    }

    theta4_IK_rad = t_rad - theta2_IK_rad - theta3_IK_rad;
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <calculate_IK_BN2+0xa94>)
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <calculate_IK_BN2+0xa98>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <calculate_IK_BN2+0xa9c>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <calculate_IK_BN2+0xaa0>)
 8003490:	edc3 7a00 	vstr	s15, [r3]
    Theta4_IK = theta4_IK_rad * (180 / M_PI);
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <calculate_IK_BN2+0xaa0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fc fffd 	bl	8000498 <__aeabi_f2d>
 800349e:	a30a      	add	r3, pc, #40	; (adr r3, 80034c8 <calculate_IK_BN2+0xa80>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fd f850 	bl	8000548 <__aeabi_dmul>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fb22 	bl	8000af8 <__aeabi_d2f>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <calculate_IK_BN2+0xaa4>)
 80034b8:	6013      	str	r3, [r2, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c4:	f3af 8000 	nop.w
 80034c8:	1a63c1f8 	.word	0x1a63c1f8
 80034cc:	404ca5dc 	.word	0x404ca5dc
 80034d0:	200009b0 	.word	0x200009b0
 80034d4:	43340000 	.word	0x43340000
 80034d8:	43b40000 	.word	0x43b40000
 80034dc:	200009e4 	.word	0x200009e4
 80034e0:	2000099c 	.word	0x2000099c
 80034e4:	200009a0 	.word	0x200009a0
 80034e8:	200009a4 	.word	0x200009a4
 80034ec:	200009b4 	.word	0x200009b4

080034f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f0:	b5b0      	push	{r4, r5, r7, lr}
 80034f2:	b096      	sub	sp, #88	; 0x58
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f6:	f001 f931 	bl	800475c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034fa:	f000 f8cb 	bl	8003694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034fe:	f000 fbdf 	bl	8003cc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003502:	f000 f92f 	bl	8003764 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003506:	f000 fa2d 	bl	8003964 <MX_TIM4_Init>
  MX_TIM2_Init();
 800350a:	f000 f983 	bl	8003814 <MX_TIM2_Init>
  MX_TIM3_Init();
 800350e:	f000 f9d5 	bl	80038bc <MX_TIM3_Init>
  MX_TIM5_Init();
 8003512:	f000 faa1 	bl	8003a58 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003516:	f000 faf3 	bl	8003b00 <MX_TIM8_Init>
  MX_TIM9_Init();
 800351a:	f000 fb81 	bl	8003c20 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800351e:	2100      	movs	r1, #0
 8003520:	484b      	ldr	r0, [pc, #300]	; (8003650 <main+0x160>)
 8003522:	f002 f907 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003526:	2104      	movs	r1, #4
 8003528:	4849      	ldr	r0, [pc, #292]	; (8003650 <main+0x160>)
 800352a:	f002 f903 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800352e:	2108      	movs	r1, #8
 8003530:	4847      	ldr	r0, [pc, #284]	; (8003650 <main+0x160>)
 8003532:	f002 f8ff 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003536:	210c      	movs	r1, #12
 8003538:	4845      	ldr	r0, [pc, #276]	; (8003650 <main+0x160>)
 800353a:	f002 f8fb 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800353e:	2100      	movs	r1, #0
 8003540:	4844      	ldr	r0, [pc, #272]	; (8003654 <main+0x164>)
 8003542:	f002 f8f7 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003546:	2104      	movs	r1, #4
 8003548:	4842      	ldr	r0, [pc, #264]	; (8003654 <main+0x164>)
 800354a:	f002 f8f3 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800354e:	2108      	movs	r1, #8
 8003550:	4841      	ldr	r0, [pc, #260]	; (8003658 <main+0x168>)
 8003552:	f002 f8ef 	bl	8005734 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8003556:	210c      	movs	r1, #12
 8003558:	483f      	ldr	r0, [pc, #252]	; (8003658 <main+0x168>)
 800355a:	f002 f8eb 	bl	8005734 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800355e:	213c      	movs	r1, #60	; 0x3c
 8003560:	483e      	ldr	r0, [pc, #248]	; (800365c <main+0x16c>)
 8003562:	f002 fa55 	bl	8005a10 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003566:	213c      	movs	r1, #60	; 0x3c
 8003568:	483d      	ldr	r0, [pc, #244]	; (8003660 <main+0x170>)
 800356a:	f002 fa51 	bl	8005a10 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800356e:	213c      	movs	r1, #60	; 0x3c
 8003570:	483c      	ldr	r0, [pc, #240]	; (8003664 <main+0x174>)
 8003572:	f002 fa4d 	bl	8005a10 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003576:	213c      	movs	r1, #60	; 0x3c
 8003578:	483b      	ldr	r0, [pc, #236]	; (8003668 <main+0x178>)
 800357a:	f002 fa49 	bl	8005a10 <HAL_TIM_Encoder_Start>


  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 800357e:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8003648 <main+0x158>
 8003582:	f641 3226 	movw	r2, #6950	; 0x1b26
 8003586:	4935      	ldr	r1, [pc, #212]	; (800365c <main+0x16c>)
 8003588:	4838      	ldr	r0, [pc, #224]	; (800366c <main+0x17c>)
 800358a:	f7fd fc83 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 800358e:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8003648 <main+0x158>
 8003592:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8003596:	4932      	ldr	r1, [pc, #200]	; (8003660 <main+0x170>)
 8003598:	4835      	ldr	r0, [pc, #212]	; (8003670 <main+0x180>)
 800359a:	f7fd fc7b 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 6880, 0.01);
 800359e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003648 <main+0x158>
 80035a2:	f44f 52d7 	mov.w	r2, #6880	; 0x1ae0
 80035a6:	492f      	ldr	r1, [pc, #188]	; (8003664 <main+0x174>)
 80035a8:	4832      	ldr	r0, [pc, #200]	; (8003674 <main+0x184>)
 80035aa:	f7fd fc73 	bl	8000e94 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 80035ae:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8003648 <main+0x158>
 80035b2:	f640 4294 	movw	r2, #3220	; 0xc94
 80035b6:	492c      	ldr	r1, [pc, #176]	; (8003668 <main+0x178>)
 80035b8:	482f      	ldr	r0, [pc, #188]	; (8003678 <main+0x188>)
 80035ba:	f7fd fc6b 	bl	8000e94 <EncoderSetting>

  PID_LINK1_Init();
 80035be:	f7fd ff91 	bl	80014e4 <PID_LINK1_Init>
  PID_LINK2_Init();
 80035c2:	f7fe f843 	bl	800164c <PID_LINK2_Init>
  PID_LINK3_Init();
 80035c6:	f7fe f8fb 	bl	80017c0 <PID_LINK3_Init>
  PID_LINK4_Init();
 80035ca:	f7fe f9b3 	bl	8001934 <PID_LINK4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <main+0x18c>)
 80035d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80035d4:	461d      	mov	r5, r3
 80035d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80035e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 f806 	bl	80065fa <osThreadCreate>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <main+0x190>)
 80035f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <main+0x194>)
 80035f6:	f107 0420 	add.w	r4, r7, #32
 80035fa:	461d      	mov	r5, r3
 80035fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 8003608:	f107 0320 	add.w	r3, r7, #32
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f002 fff3 	bl	80065fa <osThreadCreate>
 8003614:	4603      	mov	r3, r0
 8003616:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <main+0x198>)
 8003618:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <main+0x19c>)
 800361c:	1d3c      	adds	r4, r7, #4
 800361e:	461d      	mov	r5, r3
 8003620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f002 ffe2 	bl	80065fa <osThreadCreate>
 8003636:	4603      	mov	r3, r0
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <main+0x1a0>)
 800363a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800363c:	f002 ffd6 	bl	80065ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003640:	e7fe      	b.n	8003640 <main+0x150>
 8003642:	bf00      	nop
 8003644:	f3af 8000 	nop.w
 8003648:	47ae147b 	.word	0x47ae147b
 800364c:	3f847ae1 	.word	0x3f847ae1
 8003650:	200003d0 	.word	0x200003d0
 8003654:	200004a8 	.word	0x200004a8
 8003658:	20000460 	.word	0x20000460
 800365c:	200002f8 	.word	0x200002f8
 8003660:	20000340 	.word	0x20000340
 8003664:	20000388 	.word	0x20000388
 8003668:	20000418 	.word	0x20000418
 800366c:	20000538 	.word	0x20000538
 8003670:	20000640 	.word	0x20000640
 8003674:	20000748 	.word	0x20000748
 8003678:	20000850 	.word	0x20000850
 800367c:	08009edc 	.word	0x08009edc
 8003680:	200004f0 	.word	0x200004f0
 8003684:	08009f04 	.word	0x08009f04
 8003688:	200004f4 	.word	0x200004f4
 800368c:	08009f2c 	.word	0x08009f2c
 8003690:	200004f8 	.word	0x200004f8

08003694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b094      	sub	sp, #80	; 0x50
 8003698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800369a:	f107 0320 	add.w	r3, r7, #32
 800369e:	2230      	movs	r2, #48	; 0x30
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 f9f2 	bl	8007a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <SystemClock_Config+0xc8>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <SystemClock_Config+0xc8>)
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	6413      	str	r3, [r2, #64]	; 0x40
 80036c8:	4b24      	ldr	r3, [pc, #144]	; (800375c <SystemClock_Config+0xc8>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <SystemClock_Config+0xcc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <SystemClock_Config+0xcc>)
 80036de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <SystemClock_Config+0xcc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036f0:	2302      	movs	r3, #2
 80036f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036f4:	2301      	movs	r3, #1
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036f8:	2310      	movs	r3, #16
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036fc:	2302      	movs	r3, #2
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003700:	2300      	movs	r3, #0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003704:	2308      	movs	r3, #8
 8003706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003708:	2348      	movs	r3, #72	; 0x48
 800370a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800370c:	2302      	movs	r3, #2
 800370e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003710:	2304      	movs	r3, #4
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003714:	f107 0320 	add.w	r3, r7, #32
 8003718:	4618      	mov	r0, r3
 800371a:	f001 fb57 	bl	8004dcc <HAL_RCC_OscConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003724:	f000 fd8e 	bl	8004244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003728:	230f      	movs	r3, #15
 800372a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800372c:	2302      	movs	r3, #2
 800372e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800373e:	f107 030c 	add.w	r3, r7, #12
 8003742:	2102      	movs	r1, #2
 8003744:	4618      	mov	r0, r3
 8003746:	f001 fdb9 	bl	80052bc <HAL_RCC_ClockConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003750:	f000 fd78 	bl	8004244 <Error_Handler>
  }
}
 8003754:	bf00      	nop
 8003756:	3750      	adds	r7, #80	; 0x50
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	40007000 	.word	0x40007000

08003764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	; 0x30
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f004 f98a 	bl	8007a8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <MX_TIM1_Init+0xa8>)
 8003782:	4a23      	ldr	r2, [pc, #140]	; (8003810 <MX_TIM1_Init+0xac>)
 8003784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003786:	4b21      	ldr	r3, [pc, #132]	; (800380c <MX_TIM1_Init+0xa8>)
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <MX_TIM1_Init+0xa8>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <MX_TIM1_Init+0xa8>)
 8003794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379a:	4b1c      	ldr	r3, [pc, #112]	; (800380c <MX_TIM1_Init+0xa8>)
 800379c:	2200      	movs	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <MX_TIM1_Init+0xa8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <MX_TIM1_Init+0xa8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037ac:	2303      	movs	r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037c4:	2301      	movs	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	4619      	mov	r1, r3
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <MX_TIM1_Init+0xa8>)
 80037d8:	f002 f874 	bl	80058c4 <HAL_TIM_Encoder_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80037e2:	f000 fd2f 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4806      	ldr	r0, [pc, #24]	; (800380c <MX_TIM1_Init+0xa8>)
 80037f4:	f002 fe00 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80037fe:	f000 fd21 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003802:	bf00      	nop
 8003804:	3730      	adds	r7, #48	; 0x30
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200002f8 	.word	0x200002f8
 8003810:	40010000 	.word	0x40010000

08003814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	; 0x30
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800381a:	f107 030c 	add.w	r3, r7, #12
 800381e:	2224      	movs	r2, #36	; 0x24
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f004 f932 	bl	8007a8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003828:	1d3b      	adds	r3, r7, #4
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <MX_TIM2_Init+0xa4>)
 8003832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <MX_TIM2_Init+0xa4>)
 800383a:	2200      	movs	r2, #0
 800383c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <MX_TIM2_Init+0xa4>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <MX_TIM2_Init+0xa4>)
 8003846:	f04f 32ff 	mov.w	r2, #4294967295
 800384a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <MX_TIM2_Init+0xa4>)
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <MX_TIM2_Init+0xa4>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003860:	2301      	movs	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800386c:	2300      	movs	r3, #0
 800386e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003874:	2300      	movs	r3, #0
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	4619      	mov	r1, r3
 8003882:	480d      	ldr	r0, [pc, #52]	; (80038b8 <MX_TIM2_Init+0xa4>)
 8003884:	f002 f81e 	bl	80058c4 <HAL_TIM_Encoder_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800388e:	f000 fcd9 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4806      	ldr	r0, [pc, #24]	; (80038b8 <MX_TIM2_Init+0xa4>)
 80038a0:	f002 fdaa 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038aa:	f000 fccb 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	3730      	adds	r7, #48	; 0x30
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000340 	.word	0x20000340

080038bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 f8de 	bl	8007a8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <MX_TIM3_Init+0xa0>)
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <MX_TIM3_Init+0xa4>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <MX_TIM3_Init+0xa0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <MX_TIM3_Init+0xa0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <MX_TIM3_Init+0xa0>)
 80038ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <MX_TIM3_Init+0xa0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <MX_TIM3_Init+0xa0>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038fe:	2303      	movs	r3, #3
 8003900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003916:	2301      	movs	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4619      	mov	r1, r3
 8003928:	480c      	ldr	r0, [pc, #48]	; (800395c <MX_TIM3_Init+0xa0>)
 800392a:	f001 ffcb 	bl	80058c4 <HAL_TIM_Encoder_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003934:	f000 fc86 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_TIM3_Init+0xa0>)
 8003946:	f002 fd57 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003950:	f000 fc78 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003954:	bf00      	nop
 8003956:	3730      	adds	r7, #48	; 0x30
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000388 	.word	0x20000388
 8003960:	40000400 	.word	0x40000400

08003964 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396a:	f107 0320 	add.w	r3, r7, #32
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	615a      	str	r2, [r3, #20]
 8003984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003988:	4a32      	ldr	r2, [pc, #200]	; (8003a54 <MX_TIM4_Init+0xf0>)
 800398a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <MX_TIM4_Init+0xec>)
 800398e:	2206      	movs	r2, #6
 8003990:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <MX_TIM4_Init+0xec>)
 800399a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800399e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a0:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <MX_TIM4_Init+0xec>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <MX_TIM4_Init+0xec>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80039ac:	4828      	ldr	r0, [pc, #160]	; (8003a50 <MX_TIM4_Init+0xec>)
 80039ae:	f001 fe71 	bl	8005694 <HAL_TIM_PWM_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80039b8:	f000 fc44 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039c4:	f107 0320 	add.w	r3, r7, #32
 80039c8:	4619      	mov	r1, r3
 80039ca:	4821      	ldr	r0, [pc, #132]	; (8003a50 <MX_TIM4_Init+0xec>)
 80039cc:	f002 fd14 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80039d6:	f000 fc35 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039da:	2360      	movs	r3, #96	; 0x60
 80039dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	2200      	movs	r2, #0
 80039ee:	4619      	mov	r1, r3
 80039f0:	4817      	ldr	r0, [pc, #92]	; (8003a50 <MX_TIM4_Init+0xec>)
 80039f2:	f002 f98b 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80039fc:	f000 fc22 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	2204      	movs	r2, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4812      	ldr	r0, [pc, #72]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003a08:	f002 f980 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003a12:	f000 fc17 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2208      	movs	r2, #8
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	480c      	ldr	r0, [pc, #48]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003a1e:	f002 f975 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8003a28:	f000 fc0c 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	220c      	movs	r2, #12
 8003a30:	4619      	mov	r1, r3
 8003a32:	4807      	ldr	r0, [pc, #28]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003a34:	f002 f96a 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8003a3e:	f000 fc01 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <MX_TIM4_Init+0xec>)
 8003a44:	f000 fd90 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003a48:	bf00      	nop
 8003a4a:	3728      	adds	r7, #40	; 0x28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200003d0 	.word	0x200003d0
 8003a54:	40000800 	.word	0x40000800

08003a58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	; 0x30
 8003a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 f810 	bl	8007a8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <MX_TIM5_Init+0xa4>)
 8003a78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003abe:	f107 030c 	add.w	r3, r7, #12
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	480c      	ldr	r0, [pc, #48]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003ac6:	f001 fefd 	bl	80058c4 <HAL_TIM_Encoder_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8003ad0:	f000 fbb8 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <MX_TIM5_Init+0xa0>)
 8003ae2:	f002 fc89 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8003aec:	f000 fbaa 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003af0:	bf00      	nop
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	20000418 	.word	0x20000418
 8003afc:	40000c00 	.word	0x40000c00

08003b00 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b092      	sub	sp, #72	; 0x48
 8003b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	615a      	str	r2, [r3, #20]
 8003b22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	2220      	movs	r2, #32
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f003 ffae 	bl	8007a8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b32:	4a3a      	ldr	r2, [pc, #232]	; (8003c1c <MX_TIM8_Init+0x11c>)
 8003b34:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 8003b36:	4b38      	ldr	r3, [pc, #224]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b38:	2206      	movs	r2, #6
 8003b3a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3c:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8003b42:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b48:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b50:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003b5c:	482e      	ldr	r0, [pc, #184]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b5e:	f001 fd99 	bl	8005694 <HAL_TIM_PWM_Init>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003b68:	f000 fb6c 	bl	8004244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4827      	ldr	r0, [pc, #156]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003b7c:	f002 fc3c 	bl	80063f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003b86:	f000 fb5d 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b8a:	2360      	movs	r3, #96	; 0x60
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b96:	2300      	movs	r3, #0
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003baa:	2208      	movs	r2, #8
 8003bac:	4619      	mov	r1, r3
 8003bae:	481a      	ldr	r0, [pc, #104]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003bb0:	f002 f8ac 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003bba:	f000 fb43 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4814      	ldr	r0, [pc, #80]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003bc8:	f002 f8a0 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003bd2:	f000 fb37 	bl	8004244 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4807      	ldr	r0, [pc, #28]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003bfa:	f002 fc79 	bl	80064f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003c04:	f000 fb1e 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003c08:	4803      	ldr	r0, [pc, #12]	; (8003c18 <MX_TIM8_Init+0x118>)
 8003c0a:	f000 fcad 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003c0e:	bf00      	nop
 8003c10:	3748      	adds	r7, #72	; 0x48
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000460 	.word	0x20000460
 8003c1c:	40010400 	.word	0x40010400

08003c20 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
 8003c34:	615a      	str	r2, [r3, #20]
 8003c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003c38:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c3a:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <MX_TIM9_Init+0x9c>)
 8003c3c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c40:	2206      	movs	r2, #6
 8003c42:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c50:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c52:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003c5e:	4816      	ldr	r0, [pc, #88]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c60:	f001 fd18 	bl	8005694 <HAL_TIM_PWM_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003c6a:	f000 faeb 	bl	8004244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c6e:	2360      	movs	r3, #96	; 0x60
 8003c70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c7e:	1d3b      	adds	r3, r7, #4
 8003c80:	2200      	movs	r2, #0
 8003c82:	4619      	mov	r1, r3
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c86:	f002 f841 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003c90:	f000 fad8 	bl	8004244 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c94:	1d3b      	adds	r3, r7, #4
 8003c96:	2204      	movs	r2, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4807      	ldr	r0, [pc, #28]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003c9c:	f002 f836 	bl	8005d0c <HAL_TIM_PWM_ConfigChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003ca6:	f000 facd 	bl	8004244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <MX_TIM9_Init+0x98>)
 8003cac:	f000 fc5c 	bl	8004568 <HAL_TIM_MspPostInit>

}
 8003cb0:	bf00      	nop
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	200004a8 	.word	0x200004a8
 8003cbc:	40014000 	.word	0x40014000

08003cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
 8003cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003cfc:	f043 0308 	orr.w	r3, r3, #8
 8003d00:	6313      	str	r3, [r2, #48]	; 0x30
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <MX_GPIO_Init+0xc0>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 8003d46:	2330      	movs	r3, #48	; 0x30
 8003d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 0314 	add.w	r3, r7, #20
 8003d56:	4619      	mov	r1, r3
 8003d58:	480a      	ldr	r0, [pc, #40]	; (8003d84 <MX_GPIO_Init+0xc4>)
 8003d5a:	f000 fe83 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 8003d5e:	23c0      	movs	r3, #192	; 0xc0
 8003d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4805      	ldr	r0, [pc, #20]	; (8003d88 <MX_GPIO_Init+0xc8>)
 8003d72:	f000 fe77 	bl	8004a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d76:	bf00      	nop
 8003d78:	3728      	adds	r7, #40	; 0x28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40020000 	.word	0x40020000
 8003d88:	40020800 	.word	0x40020800

08003d8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(startProgram == 1){
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <StartDefaultTask+0xb4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d14d      	bne.n	8003e38 <StartDefaultTask+0xac>
		if(startFK == 1){
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <StartDefaultTask+0xb8>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d115      	bne.n	8003dd0 <StartDefaultTask+0x44>
			TINH_FK(inputTheta1, inputTheta2, inputTheta3, inputTheta4);
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <StartDefaultTask+0xbc>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <StartDefaultTask+0xc0>)
 8003dac:	ed93 7a00 	vldr	s14, [r3]
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <StartDefaultTask+0xc4>)
 8003db2:	edd3 6a00 	vldr	s13, [r3]
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <StartDefaultTask+0xc8>)
 8003db8:	ed93 6a00 	vldr	s12, [r3]
 8003dbc:	eef0 1a46 	vmov.f32	s3, s12
 8003dc0:	eeb0 1a66 	vmov.f32	s2, s13
 8003dc4:	eef0 0a47 	vmov.f32	s1, s14
 8003dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dcc:	f7fd fe6c 	bl	8001aa8 <TINH_FK>
		}
		if(startIK_BN1 == 1){
 8003dd0:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <StartDefaultTask+0xcc>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d115      	bne.n	8003e04 <StartDefaultTask+0x78>
			calculate_IK_BN1(inputPx, inputPy, inputPz, inputTheta);
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <StartDefaultTask+0xd0>)
 8003dda:	edd3 7a00 	vldr	s15, [r3]
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <StartDefaultTask+0xd4>)
 8003de0:	ed93 7a00 	vldr	s14, [r3]
 8003de4:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <StartDefaultTask+0xd8>)
 8003de6:	edd3 6a00 	vldr	s13, [r3]
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <StartDefaultTask+0xdc>)
 8003dec:	ed93 6a00 	vldr	s12, [r3]
 8003df0:	eef0 1a46 	vmov.f32	s3, s12
 8003df4:	eeb0 1a66 	vmov.f32	s2, s13
 8003df8:	eef0 0a47 	vmov.f32	s1, s14
 8003dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003e00:	f7fe f8ca 	bl	8001f98 <calculate_IK_BN1>
		}
		if(startIK_BN2 == 1){
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <StartDefaultTask+0xe0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d115      	bne.n	8003e38 <StartDefaultTask+0xac>
			calculate_IK_BN2(inputPx, inputPy, inputPz, inputTheta);
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <StartDefaultTask+0xd0>)
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <StartDefaultTask+0xd4>)
 8003e14:	ed93 7a00 	vldr	s14, [r3]
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <StartDefaultTask+0xd8>)
 8003e1a:	edd3 6a00 	vldr	s13, [r3]
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <StartDefaultTask+0xdc>)
 8003e20:	ed93 6a00 	vldr	s12, [r3]
 8003e24:	eef0 1a46 	vmov.f32	s3, s12
 8003e28:	eeb0 1a66 	vmov.f32	s2, s13
 8003e2c:	eef0 0a47 	vmov.f32	s1, s14
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	f7fe fe08 	bl	8002a48 <calculate_IK_BN2>
		}
	}
//	TINH_FK(inputTheta1, inputTheta2, inputTheta3, inputTheta4);
    osDelay(10);
 8003e38:	200a      	movs	r0, #10
 8003e3a:	f002 fc2a 	bl	8006692 <osDelay>
	if(startProgram == 1){
 8003e3e:	e7a9      	b.n	8003d94 <StartDefaultTask+0x8>
 8003e40:	200004fc 	.word	0x200004fc
 8003e44:	200004fd 	.word	0x200004fd
 8003e48:	20000514 	.word	0x20000514
 8003e4c:	20000518 	.word	0x20000518
 8003e50:	2000051c 	.word	0x2000051c
 8003e54:	20000520 	.word	0x20000520
 8003e58:	200004fe 	.word	0x200004fe
 8003e5c:	20000524 	.word	0x20000524
 8003e60:	20000528 	.word	0x20000528
 8003e64:	2000052c 	.word	0x2000052c
 8003e68:	20000530 	.word	0x20000530
 8003e6c:	200004ff 	.word	0x200004ff

08003e70 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  startProgram = 0;
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <StartTaskSetHome+0x25c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
	sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	4893      	ldr	r0, [pc, #588]	; (80040d0 <StartTaskSetHome+0x260>)
 8003e82:	f000 ff8b 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003e86:	4603      	mov	r3, r0
 8003e88:	b25a      	sxtb	r2, r3
 8003e8a:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <StartTaskSetHome+0x264>)
 8003e8c:	701a      	strb	r2, [r3, #0]
	sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	488f      	ldr	r0, [pc, #572]	; (80040d0 <StartTaskSetHome+0x260>)
 8003e92:	f000 ff83 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003e96:	4603      	mov	r3, r0
 8003e98:	b25a      	sxtb	r2, r3
 8003e9a:	4b8f      	ldr	r3, [pc, #572]	; (80040d8 <StartTaskSetHome+0x268>)
 8003e9c:	701a      	strb	r2, [r3, #0]
	sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8003e9e:	2110      	movs	r1, #16
 8003ea0:	488e      	ldr	r0, [pc, #568]	; (80040dc <StartTaskSetHome+0x26c>)
 8003ea2:	f000 ff7b 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	b25a      	sxtb	r2, r3
 8003eaa:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <StartTaskSetHome+0x270>)
 8003eac:	701a      	strb	r2, [r3, #0]
	sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8003eae:	2120      	movs	r1, #32
 8003eb0:	488a      	ldr	r0, [pc, #552]	; (80040dc <StartTaskSetHome+0x26c>)
 8003eb2:	f000 ff73 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	b25a      	sxtb	r2, r3
 8003eba:	4b8a      	ldr	r3, [pc, #552]	; (80040e4 <StartTaskSetHome+0x274>)
 8003ebc:	701a      	strb	r2, [r3, #0]

	if(startProgram == 0){
 8003ebe:	4b83      	ldr	r3, [pc, #524]	; (80040cc <StartTaskSetHome+0x25c>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80fe 	bne.w	80040c4 <StartTaskSetHome+0x254>
		if(sethomeJ1 == 0){
 8003ec8:	4b87      	ldr	r3, [pc, #540]	; (80040e8 <StartTaskSetHome+0x278>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15a      	bne.n	8003f86 <StartTaskSetHome+0x116>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8003ed0:	2140      	movs	r1, #64	; 0x40
 8003ed2:	487f      	ldr	r0, [pc, #508]	; (80040d0 <StartTaskSetHome+0x260>)
 8003ed4:	f000 ff62 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d118      	bne.n	8003f10 <StartTaskSetHome+0xa0>
				osDelay(1);
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f002 fbd7 	bl	8006692 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	487a      	ldr	r0, [pc, #488]	; (80040d0 <StartTaskSetHome+0x260>)
 8003ee8:	f000 ff58 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d149      	bne.n	8003f86 <StartTaskSetHome+0x116>
					ResetCount(&ENC_LINK1, 1);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	487d      	ldr	r0, [pc, #500]	; (80040ec <StartTaskSetHome+0x27c>)
 8003ef6:	f7fd f8db 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ1 = 0;
 8003efa:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <StartTaskSetHome+0x280>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
					sethomeJ1 = 1;
 8003f00:	4b79      	ldr	r3, [pc, #484]	; (80040e8 <StartTaskSetHome+0x278>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
					AngleLink1 = 0;
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <StartTaskSetHome+0x284>)
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e03a      	b.n	8003f86 <StartTaskSetHome+0x116>
				}
			}
			else {
				SpeedSetHomeJ1 = -400;
 8003f10:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f12:	4a79      	ldr	r2, [pc, #484]	; (80040f8 <StartTaskSetHome+0x288>)
 8003f14:	601a      	str	r2, [r3, #0]
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ1 > 0){
 8003f16:	2102      	movs	r1, #2
 8003f18:	4874      	ldr	r0, [pc, #464]	; (80040ec <StartTaskSetHome+0x27c>)
 8003f1a:	f7fd f863 	bl	8000fe4 <CountRead>
 8003f1e:	ec51 0b10 	vmov	r0, r1, d0
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	4b75      	ldr	r3, [pc, #468]	; (80040fc <StartTaskSetHome+0x28c>)
 8003f28:	f7fc fd9e 	bl	8000a68 <__aeabi_dcmpgt>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <StartTaskSetHome+0xd6>
 8003f32:	4b6f      	ldr	r3, [pc, #444]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dd05      	ble.n	8003f46 <StartTaskSetHome+0xd6>
					SpeedSetHomeJ1 *= -1;
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	425b      	negs	r3, r3
 8003f40:	4a6b      	ldr	r2, [pc, #428]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e016      	b.n	8003f74 <StartTaskSetHome+0x104>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ1 < 0) {
 8003f46:	2102      	movs	r1, #2
 8003f48:	4868      	ldr	r0, [pc, #416]	; (80040ec <StartTaskSetHome+0x27c>)
 8003f4a:	f7fd f84b 	bl	8000fe4 <CountRead>
 8003f4e:	ec51 0b10 	vmov	r0, r1, d0
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <StartTaskSetHome+0x290>)
 8003f58:	f7fc fd68 	bl	8000a2c <__aeabi_dcmplt>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <StartTaskSetHome+0x104>
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da04      	bge.n	8003f74 <StartTaskSetHome+0x104>
					SpeedSetHomeJ1 *= -1;
 8003f6a:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	425b      	negs	r3, r3
 8003f70:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f72:	6013      	str	r3, [r2, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <StartTaskSetHome+0x280>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	230c      	movs	r3, #12
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	4961      	ldr	r1, [pc, #388]	; (8004104 <StartTaskSetHome+0x294>)
 8003f80:	4861      	ldr	r0, [pc, #388]	; (8004108 <StartTaskSetHome+0x298>)
 8003f82:	f7fd f8ac 	bl	80010de <Drive>
			}
		}
		if(sethomeJ2 == 0){
 8003f86:	4b61      	ldr	r3, [pc, #388]	; (800410c <StartTaskSetHome+0x29c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d12b      	bne.n	8003fe6 <StartTaskSetHome+0x176>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	484f      	ldr	r0, [pc, #316]	; (80040d0 <StartTaskSetHome+0x260>)
 8003f92:	f000 ff03 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d117      	bne.n	8003fcc <StartTaskSetHome+0x15c>
				osDelay(1);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f002 fb78 	bl	8006692 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	484a      	ldr	r0, [pc, #296]	; (80040d0 <StartTaskSetHome+0x260>)
 8003fa6:	f000 fef9 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d11a      	bne.n	8003fe6 <StartTaskSetHome+0x176>
					ResetCount(&ENC_LINK2, 1);
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4857      	ldr	r0, [pc, #348]	; (8004110 <StartTaskSetHome+0x2a0>)
 8003fb4:	f7fd f87c 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ2 = 0;
 8003fb8:	4b56      	ldr	r3, [pc, #344]	; (8004114 <StartTaskSetHome+0x2a4>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
					sethomeJ2 = 1;
 8003fbe:	4b53      	ldr	r3, [pc, #332]	; (800410c <StartTaskSetHome+0x29c>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
					AngleLink2 = 187;
 8003fc4:	4b54      	ldr	r3, [pc, #336]	; (8004118 <StartTaskSetHome+0x2a8>)
 8003fc6:	4a55      	ldr	r2, [pc, #340]	; (800411c <StartTaskSetHome+0x2ac>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e00c      	b.n	8003fe6 <StartTaskSetHome+0x176>
				}
			}
			else {
				SpeedSetHomeJ2 = 400;
 8003fcc:	4b51      	ldr	r3, [pc, #324]	; (8004114 <StartTaskSetHome+0x2a4>)
 8003fce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003fd2:	601a      	str	r2, [r3, #0]
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <StartTaskSetHome+0x2a4>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	230c      	movs	r3, #12
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2308      	movs	r3, #8
 8003fde:	4950      	ldr	r1, [pc, #320]	; (8004120 <StartTaskSetHome+0x2b0>)
 8003fe0:	4850      	ldr	r0, [pc, #320]	; (8004124 <StartTaskSetHome+0x2b4>)
 8003fe2:	f7fd f87c 	bl	80010de <Drive>
			}
		}
		if(sethomeJ3 == 0){
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <StartTaskSetHome+0x2b8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d127      	bne.n	800403e <StartTaskSetHome+0x1ce>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8003fee:	2110      	movs	r1, #16
 8003ff0:	483a      	ldr	r0, [pc, #232]	; (80040dc <StartTaskSetHome+0x26c>)
 8003ff2:	f000 fed3 	bl	8004d9c <HAL_GPIO_ReadPin>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d114      	bne.n	8004026 <StartTaskSetHome+0x1b6>
				osDelay(1);
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f002 fb48 	bl	8006692 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8004002:	2110      	movs	r1, #16
 8004004:	4835      	ldr	r0, [pc, #212]	; (80040dc <StartTaskSetHome+0x26c>)
 8004006:	f000 fec9 	bl	8004d9c <HAL_GPIO_ReadPin>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d116      	bne.n	800403e <StartTaskSetHome+0x1ce>
					ResetCount(&ENC_LINK3, 1);
 8004010:	2101      	movs	r1, #1
 8004012:	4846      	ldr	r0, [pc, #280]	; (800412c <StartTaskSetHome+0x2bc>)
 8004014:	f7fd f84c 	bl	80010b0 <ResetCount>
					sethomeJ3 = 1;
 8004018:	4b43      	ldr	r3, [pc, #268]	; (8004128 <StartTaskSetHome+0x2b8>)
 800401a:	2201      	movs	r2, #1
 800401c:	701a      	strb	r2, [r3, #0]
					AngleLink3 = -135;
 800401e:	4b44      	ldr	r3, [pc, #272]	; (8004130 <StartTaskSetHome+0x2c0>)
 8004020:	4a44      	ldr	r2, [pc, #272]	; (8004134 <StartTaskSetHome+0x2c4>)
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	e00b      	b.n	800403e <StartTaskSetHome+0x1ce>
				}
			}
			else {
				SpeedSetHomeJ3 = -300;
 8004026:	4b44      	ldr	r3, [pc, #272]	; (8004138 <StartTaskSetHome+0x2c8>)
 8004028:	4a44      	ldr	r2, [pc, #272]	; (800413c <StartTaskSetHome+0x2cc>)
 800402a:	601a      	str	r2, [r3, #0]
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800402c:	4b42      	ldr	r3, [pc, #264]	; (8004138 <StartTaskSetHome+0x2c8>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2304      	movs	r3, #4
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	493a      	ldr	r1, [pc, #232]	; (8004120 <StartTaskSetHome+0x2b0>)
 8004038:	4841      	ldr	r0, [pc, #260]	; (8004140 <StartTaskSetHome+0x2d0>)
 800403a:	f7fd f850 	bl	80010de <Drive>
			}
		}
		if(sethomeJ4 == 0){
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <StartTaskSetHome+0x2d4>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d12b      	bne.n	800409e <StartTaskSetHome+0x22e>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8004046:	2120      	movs	r1, #32
 8004048:	4824      	ldr	r0, [pc, #144]	; (80040dc <StartTaskSetHome+0x26c>)
 800404a:	f000 fea7 	bl	8004d9c <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d117      	bne.n	8004084 <StartTaskSetHome+0x214>
				osDelay(1);
 8004054:	2001      	movs	r0, #1
 8004056:	f002 fb1c 	bl	8006692 <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 800405a:	2120      	movs	r1, #32
 800405c:	481f      	ldr	r0, [pc, #124]	; (80040dc <StartTaskSetHome+0x26c>)
 800405e:	f000 fe9d 	bl	8004d9c <HAL_GPIO_ReadPin>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d11a      	bne.n	800409e <StartTaskSetHome+0x22e>
					ResetCount(&ENC_LINK4, 1);
 8004068:	2101      	movs	r1, #1
 800406a:	4837      	ldr	r0, [pc, #220]	; (8004148 <StartTaskSetHome+0x2d8>)
 800406c:	f7fd f820 	bl	80010b0 <ResetCount>
					SpeedSetHomeJ4 = 0;
 8004070:	4b36      	ldr	r3, [pc, #216]	; (800414c <StartTaskSetHome+0x2dc>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
					sethomeJ4 = 1;
 8004076:	4b33      	ldr	r3, [pc, #204]	; (8004144 <StartTaskSetHome+0x2d4>)
 8004078:	2201      	movs	r2, #1
 800407a:	701a      	strb	r2, [r3, #0]
					AngleLink4 = 90;
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <StartTaskSetHome+0x2e0>)
 800407e:	4a35      	ldr	r2, [pc, #212]	; (8004154 <StartTaskSetHome+0x2e4>)
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00c      	b.n	800409e <StartTaskSetHome+0x22e>
				}
			}
			else {
				SpeedSetHomeJ4 = 300;
 8004084:	4b31      	ldr	r3, [pc, #196]	; (800414c <StartTaskSetHome+0x2dc>)
 8004086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800408a:	601a      	str	r2, [r3, #0]
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800408c:	4b2f      	ldr	r3, [pc, #188]	; (800414c <StartTaskSetHome+0x2dc>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2304      	movs	r3, #4
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2300      	movs	r3, #0
 8004096:	4930      	ldr	r1, [pc, #192]	; (8004158 <StartTaskSetHome+0x2e8>)
 8004098:	4830      	ldr	r0, [pc, #192]	; (800415c <StartTaskSetHome+0x2ec>)
 800409a:	f7fd f820 	bl	80010de <Drive>
			}
		}
		if(sethomeJ1 == 1 && sethomeJ2 == 1 && sethomeJ3 == 1 && sethomeJ4 == 1){
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <StartTaskSetHome+0x278>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10e      	bne.n	80040c4 <StartTaskSetHome+0x254>
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <StartTaskSetHome+0x29c>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10a      	bne.n	80040c4 <StartTaskSetHome+0x254>
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <StartTaskSetHome+0x2b8>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d106      	bne.n	80040c4 <StartTaskSetHome+0x254>
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <StartTaskSetHome+0x2d4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <StartTaskSetHome+0x254>
			startProgram = 1;
 80040be:	4b03      	ldr	r3, [pc, #12]	; (80040cc <StartTaskSetHome+0x25c>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
		}
	}
    osDelay(10);
 80040c4:	200a      	movs	r0, #10
 80040c6:	f002 fae4 	bl	8006692 <osDelay>
	sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 80040ca:	e6d8      	b.n	8003e7e <StartTaskSetHome+0xe>
 80040cc:	200004fc 	.word	0x200004fc
 80040d0:	40020800 	.word	0x40020800
 80040d4:	20000534 	.word	0x20000534
 80040d8:	20000535 	.word	0x20000535
 80040dc:	40020000 	.word	0x40020000
 80040e0:	20000536 	.word	0x20000536
 80040e4:	20000537 	.word	0x20000537
 80040e8:	20000510 	.word	0x20000510
 80040ec:	20000538 	.word	0x20000538
 80040f0:	20000500 	.word	0x20000500
 80040f4:	20000638 	.word	0x20000638
 80040f8:	fffffe70 	.word	0xfffffe70
 80040fc:	40568000 	.word	0x40568000
 8004100:	c0568000 	.word	0xc0568000
 8004104:	20000460 	.word	0x20000460
 8004108:	20000580 	.word	0x20000580
 800410c:	20000511 	.word	0x20000511
 8004110:	20000640 	.word	0x20000640
 8004114:	20000504 	.word	0x20000504
 8004118:	20000740 	.word	0x20000740
 800411c:	433b0000 	.word	0x433b0000
 8004120:	200003d0 	.word	0x200003d0
 8004124:	20000688 	.word	0x20000688
 8004128:	20000512 	.word	0x20000512
 800412c:	20000748 	.word	0x20000748
 8004130:	20000848 	.word	0x20000848
 8004134:	c3070000 	.word	0xc3070000
 8004138:	20000508 	.word	0x20000508
 800413c:	fffffed4 	.word	0xfffffed4
 8004140:	20000790 	.word	0x20000790
 8004144:	20000513 	.word	0x20000513
 8004148:	20000850 	.word	0x20000850
 800414c:	2000050c 	.word	0x2000050c
 8004150:	20000950 	.word	0x20000950
 8004154:	42b40000 	.word	0x42b40000
 8004158:	200004a8 	.word	0x200004a8
 800415c:	20000898 	.word	0x20000898

08004160 <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ1 == 1)	PID_LINK1_Pos();
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <StartTaskPID+0x98>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <StartTaskPID+0x14>
 8004170:	f7fd fa46 	bl	8001600 <PID_LINK1_Pos>
	  if(sethomeJ2 == 1)	PID_LINK2_Pos();
 8004174:	4b21      	ldr	r3, [pc, #132]	; (80041fc <StartTaskPID+0x9c>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <StartTaskPID+0x20>
 800417c:	f7fd faf4 	bl	8001768 <PID_LINK2_Pos>
	  if(sethomeJ3 == 1)	PID_LINK3_Pos();
 8004180:	4b1f      	ldr	r3, [pc, #124]	; (8004200 <StartTaskPID+0xa0>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <StartTaskPID+0x2c>
 8004188:	f7fd fba8 	bl	80018dc <PID_LINK3_Pos>
	  if(sethomeJ4 == 1)	PID_LINK4_Pos();
 800418c:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <StartTaskPID+0xa4>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <StartTaskPID+0x38>
 8004194:	f7fd fc5c 	bl	8001a50 <PID_LINK4_Pos>

	  if(startFK == 1){
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <StartTaskPID+0xa8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10f      	bne.n	80041c0 <StartTaskPID+0x60>
		  AngleLink1 = inputTheta1;
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <StartTaskPID+0xac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1a      	ldr	r2, [pc, #104]	; (8004210 <StartTaskPID+0xb0>)
 80041a6:	6013      	str	r3, [r2, #0]
		  AngleLink2 = inputTheta2;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <StartTaskPID+0xb4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <StartTaskPID+0xb8>)
 80041ae:	6013      	str	r3, [r2, #0]
		  AngleLink3 = inputTheta3;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <StartTaskPID+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <StartTaskPID+0xc0>)
 80041b6:	6013      	str	r3, [r2, #0]
		  AngleLink4 = inputTheta4;
 80041b8:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <StartTaskPID+0xc4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <StartTaskPID+0xc8>)
 80041be:	6013      	str	r3, [r2, #0]
	  }
	  if(startIK_BN1 == 1 || startIK_BN2 == 1){
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <StartTaskPID+0xcc>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d003      	beq.n	80041d0 <StartTaskPID+0x70>
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <StartTaskPID+0xd0>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10f      	bne.n	80041f0 <StartTaskPID+0x90>
		  AngleLink1 = Theta1_IK;
 80041d0:	4b18      	ldr	r3, [pc, #96]	; (8004234 <StartTaskPID+0xd4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <StartTaskPID+0xb0>)
 80041d6:	6013      	str	r3, [r2, #0]
		  AngleLink2 = Theta2_IK;
 80041d8:	4b17      	ldr	r3, [pc, #92]	; (8004238 <StartTaskPID+0xd8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <StartTaskPID+0xb8>)
 80041de:	6013      	str	r3, [r2, #0]
		  AngleLink3 = Theta3_IK;
 80041e0:	4b16      	ldr	r3, [pc, #88]	; (800423c <StartTaskPID+0xdc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <StartTaskPID+0xc0>)
 80041e6:	6013      	str	r3, [r2, #0]
		  AngleLink4 = Theta4_IK;
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <StartTaskPID+0xe0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <StartTaskPID+0xc8>)
 80041ee:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(10);
 80041f0:	200a      	movs	r0, #10
 80041f2:	f002 fa4e 	bl	8006692 <osDelay>
	  if(sethomeJ1 == 1)	PID_LINK1_Pos();
 80041f6:	e7b7      	b.n	8004168 <StartTaskPID+0x8>
 80041f8:	20000510 	.word	0x20000510
 80041fc:	20000511 	.word	0x20000511
 8004200:	20000512 	.word	0x20000512
 8004204:	20000513 	.word	0x20000513
 8004208:	200004fd 	.word	0x200004fd
 800420c:	20000514 	.word	0x20000514
 8004210:	20000638 	.word	0x20000638
 8004214:	20000518 	.word	0x20000518
 8004218:	20000740 	.word	0x20000740
 800421c:	2000051c 	.word	0x2000051c
 8004220:	20000848 	.word	0x20000848
 8004224:	20000520 	.word	0x20000520
 8004228:	20000950 	.word	0x20000950
 800422c:	200004fe 	.word	0x200004fe
 8004230:	200004ff 	.word	0x200004ff
 8004234:	200009a8 	.word	0x200009a8
 8004238:	200009ac 	.word	0x200009ac
 800423c:	200009b0 	.word	0x200009b0
 8004240:	200009b4 	.word	0x200009b4

08004244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004248:	b672      	cpsid	i
}
 800424a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800424c:	e7fe      	b.n	800424c <Error_Handler+0x8>
	...

08004250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_MspInit+0x54>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <HAL_MspInit+0x54>)
 8004260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	4b0f      	ldr	r3, [pc, #60]	; (80042a4 <HAL_MspInit+0x54>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_MspInit+0x54>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <HAL_MspInit+0x54>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_MspInit+0x54>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	210f      	movs	r1, #15
 8004292:	f06f 0001 	mvn.w	r0, #1
 8004296:	f000 fbae 	bl	80049f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800

080042a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b090      	sub	sp, #64	; 0x40
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a78      	ldr	r2, [pc, #480]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x200>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d135      	bne.n	8004336 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	4a76      	ldr	r2, [pc, #472]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6453      	str	r3, [r2, #68]	; 0x44
 80042da:	4b74      	ldr	r3, [pc, #464]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	4b70      	ldr	r3, [pc, #448]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	4a6f      	ldr	r2, [pc, #444]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6313      	str	r3, [r2, #48]	; 0x30
 80042f6:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8004302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	2300      	movs	r3, #0
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004310:	2300      	movs	r3, #0
 8004312:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004314:	2301      	movs	r3, #1
 8004316:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431c:	4619      	mov	r1, r3
 800431e:	4864      	ldr	r0, [pc, #400]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x208>)
 8004320:	f000 fba0 	bl	8004a64 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8004324:	2200      	movs	r2, #0
 8004326:	2105      	movs	r1, #5
 8004328:	2018      	movs	r0, #24
 800432a:	f000 fb64 	bl	80049f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800432e:	2018      	movs	r0, #24
 8004330:	f000 fb7d 	bl	8004a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004334:	e0b3      	b.n	800449e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d14b      	bne.n	80043d8 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	4a58      	ldr	r2, [pc, #352]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
 8004350:	4b56      	ldr	r3, [pc, #344]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	4a51      	ldr	r2, [pc, #324]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6313      	str	r3, [r2, #48]	; 0x30
 800436c:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4a4a      	ldr	r2, [pc, #296]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	6313      	str	r3, [r2, #48]	; 0x30
 8004388:	4b48      	ldr	r3, [pc, #288]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8004394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439a:	2302      	movs	r3, #2
 800439c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043a2:	2300      	movs	r3, #0
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043a6:	2301      	movs	r3, #1
 80043a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 80043aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ae:	4619      	mov	r1, r3
 80043b0:	483f      	ldr	r0, [pc, #252]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x208>)
 80043b2:	f000 fb57 	bl	8004a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 80043b6:	2308      	movs	r3, #8
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ba:	2302      	movs	r3, #2
 80043bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c2:	2300      	movs	r3, #0
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043c6:	2301      	movs	r3, #1
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 80043ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ce:	4619      	mov	r1, r3
 80043d0:	4838      	ldr	r0, [pc, #224]	; (80044b4 <HAL_TIM_Encoder_MspInit+0x20c>)
 80043d2:	f000 fb47 	bl	8004a64 <HAL_GPIO_Init>
}
 80043d6:	e062      	b.n	800449e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <HAL_TIM_Encoder_MspInit+0x210>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12c      	bne.n	800443c <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	4a30      	ldr	r2, [pc, #192]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6413      	str	r3, [r2, #64]	; 0x40
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	6313      	str	r3, [r2, #48]	; 0x30
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 800441a:	23c0      	movs	r3, #192	; 0xc0
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441e:	2302      	movs	r3, #2
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004426:	2300      	movs	r3, #0
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800442a:	2302      	movs	r3, #2
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800442e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004432:	4619      	mov	r1, r3
 8004434:	481e      	ldr	r0, [pc, #120]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x208>)
 8004436:	f000 fb15 	bl	8004a64 <HAL_GPIO_Init>
}
 800443a:	e030      	b.n	800449e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <HAL_TIM_Encoder_MspInit+0x214>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d12b      	bne.n	800449e <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_TIM_Encoder_MspInit+0x204>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 800447e:	2303      	movs	r3, #3
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800448e:	2302      	movs	r3, #2
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004496:	4619      	mov	r1, r3
 8004498:	4805      	ldr	r0, [pc, #20]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x208>)
 800449a:	f000 fae3 	bl	8004a64 <HAL_GPIO_Init>
}
 800449e:	bf00      	nop
 80044a0:	3740      	adds	r7, #64	; 0x40
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020400 	.word	0x40020400
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000c00 	.word	0x40000c00

080044c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_TIM_PWM_MspInit+0x98>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d10e      	bne.n	80044f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6413      	str	r3, [r2, #64]	; 0x40
 80044e2:	4b1e      	ldr	r3, [pc, #120]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80044ee:	e02e      	b.n	800454e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_TIM_PWM_MspInit+0xa0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10e      	bne.n	8004518 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6453      	str	r3, [r2, #68]	; 0x44
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
}
 8004516:	e01a      	b.n	800454e <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM9)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a11      	ldr	r2, [pc, #68]	; (8004564 <HAL_TIM_PWM_MspInit+0xa4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d115      	bne.n	800454e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6453      	str	r3, [r2, #68]	; 0x44
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_TIM_PWM_MspInit+0x9c>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	2105      	movs	r1, #5
 8004542:	2018      	movs	r0, #24
 8004544:	f000 fa57 	bl	80049f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004548:	2018      	movs	r0, #24
 800454a:	f000 fa70 	bl	8004a2e <HAL_NVIC_EnableIRQ>
}
 800454e:	bf00      	nop
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40000800 	.word	0x40000800
 800455c:	40023800 	.word	0x40023800
 8004560:	40010400 	.word	0x40010400
 8004564:	40014000 	.word	0x40014000

08004568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a37      	ldr	r2, [pc, #220]	; (8004664 <HAL_TIM_MspPostInit+0xfc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d11f      	bne.n	80045ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004592:	4a35      	ldr	r2, [pc, #212]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 8004594:	f043 0308 	orr.w	r3, r3, #8
 8004598:	6313      	str	r3, [r2, #48]	; 0x30
 800459a:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 80045a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80045aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045b8:	2302      	movs	r3, #2
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4619      	mov	r1, r3
 80045c2:	482a      	ldr	r0, [pc, #168]	; (800466c <HAL_TIM_MspPostInit+0x104>)
 80045c4:	f000 fa4e 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80045c8:	e047      	b.n	800465a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a28      	ldr	r2, [pc, #160]	; (8004670 <HAL_TIM_MspPostInit+0x108>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d11f      	bne.n	8004614 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	4b23      	ldr	r3, [pc, #140]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a22      	ldr	r2, [pc, #136]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 80045f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004602:	2303      	movs	r3, #3
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004606:	f107 0314 	add.w	r3, r7, #20
 800460a:	4619      	mov	r1, r3
 800460c:	4819      	ldr	r0, [pc, #100]	; (8004674 <HAL_TIM_MspPostInit+0x10c>)
 800460e:	f000 fa29 	bl	8004a64 <HAL_GPIO_Init>
}
 8004612:	e022      	b.n	800465a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_TIM_MspPostInit+0x110>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d11d      	bne.n	800465a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b11      	ldr	r3, [pc, #68]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_TIM_MspPostInit+0x100>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 800463a:	230c      	movs	r3, #12
 800463c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800463e:	2302      	movs	r3, #2
 8004640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2300      	movs	r3, #0
 8004648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800464a:	2303      	movs	r3, #3
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	4809      	ldr	r0, [pc, #36]	; (800467c <HAL_TIM_MspPostInit+0x114>)
 8004656:	f000 fa05 	bl	8004a64 <HAL_GPIO_Init>
}
 800465a:	bf00      	nop
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40000800 	.word	0x40000800
 8004668:	40023800 	.word	0x40023800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40010400 	.word	0x40010400
 8004674:	40020800 	.word	0x40020800
 8004678:	40014000 	.word	0x40014000
 800467c:	40020000 	.word	0x40020000

08004680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004684:	e7fe      	b.n	8004684 <NMI_Handler+0x4>

08004686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800468a:	e7fe      	b.n	800468a <HardFault_Handler+0x4>

0800468c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004690:	e7fe      	b.n	8004690 <MemManage_Handler+0x4>

08004692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004696:	e7fe      	b.n	8004696 <BusFault_Handler+0x4>

08004698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800469c:	e7fe      	b.n	800469c <UsageFault_Handler+0x4>

0800469e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046a2:	bf00      	nop
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046b0:	f000 f8a6 	bl	8004800 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80046b4:	f002 fd70 	bl	8007198 <xTaskGetSchedulerState>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80046be:	f002 ffab 	bl	8007618 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046cc:	4803      	ldr	r0, [pc, #12]	; (80046dc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80046ce:	f001 fa2d 	bl	8005b2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80046d2:	4803      	ldr	r0, [pc, #12]	; (80046e0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80046d4:	f001 fa2a 	bl	8005b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200002f8 	.word	0x200002f8
 80046e0:	200004a8 	.word	0x200004a8

080046e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046e8:	4b06      	ldr	r3, [pc, #24]	; (8004704 <SystemInit+0x20>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <SystemInit+0x20>)
 80046f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046f8:	bf00      	nop
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800470c:	f7ff ffea 	bl	80046e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004710:	480c      	ldr	r0, [pc, #48]	; (8004744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004712:	490d      	ldr	r1, [pc, #52]	; (8004748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004718:	e002      	b.n	8004720 <LoopCopyDataInit>

0800471a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800471a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800471c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800471e:	3304      	adds	r3, #4

08004720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004724:	d3f9      	bcc.n	800471a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004728:	4c0a      	ldr	r4, [pc, #40]	; (8004754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800472c:	e001      	b.n	8004732 <LoopFillZerobss>

0800472e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800472e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004730:	3204      	adds	r2, #4

08004732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004734:	d3fb      	bcc.n	800472e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004736:	f003 f9b7 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800473a:	f7fe fed9 	bl	80034f0 <main>
  bx  lr    
 800473e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004748:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800474c:	0800a1e8 	.word	0x0800a1e8
  ldr r2, =_sbss
 8004750:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004754:	20004878 	.word	0x20004878

08004758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004758:	e7fe      	b.n	8004758 <ADC_IRQHandler>
	...

0800475c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004760:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_Init+0x40>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <HAL_Init+0x40>)
 8004766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800476a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_Init+0x40>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	; (800479c <HAL_Init+0x40>)
 8004772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004778:	4b08      	ldr	r3, [pc, #32]	; (800479c <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a07      	ldr	r2, [pc, #28]	; (800479c <HAL_Init+0x40>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004784:	2003      	movs	r0, #3
 8004786:	f000 f92b 	bl	80049e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800478a:	200f      	movs	r0, #15
 800478c:	f000 f808 	bl	80047a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004790:	f7ff fd5e 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023c00 	.word	0x40023c00

080047a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_InitTick+0x54>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <HAL_InitTick+0x58>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f943 	bl	8004a4a <HAL_SYSTICK_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00e      	b.n	80047ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	d80a      	bhi.n	80047ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047d4:	2200      	movs	r2, #0
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	f000 f90b 	bl	80049f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047e0:	4a06      	ldr	r2, [pc, #24]	; (80047fc <HAL_InitTick+0x5c>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000014 	.word	0x20000014
 80047f8:	2000001c 	.word	0x2000001c
 80047fc:	20000018 	.word	0x20000018

08004800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_IncTick+0x20>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_IncTick+0x24>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4413      	add	r3, r2
 8004810:	4a04      	ldr	r2, [pc, #16]	; (8004824 <HAL_IncTick+0x24>)
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000001c 	.word	0x2000001c
 8004824:	200009e8 	.word	0x200009e8

08004828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return uwTick;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_GetTick+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	200009e8 	.word	0x200009e8

08004840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4907      	ldr	r1, [pc, #28]	; (80048dc <__NVIC_EnableIRQ+0x38>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	; (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
         );
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ac:	d301      	bcc.n	80049b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00f      	b.n	80049d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <SysTick_Config+0x40>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ba:	210f      	movs	r1, #15
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	f7ff ff8e 	bl	80048e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <SysTick_Config+0x40>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <SysTick_Config+0x40>)
 80049cc:	2207      	movs	r2, #7
 80049ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	e000e010 	.word	0xe000e010

080049e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff29 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b086      	sub	sp, #24
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	4603      	mov	r3, r0
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a08:	f7ff ff3e 	bl	8004888 <__NVIC_GetPriorityGrouping>
 8004a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f7ff ff8e 	bl	8004934 <NVIC_EncodePriority>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff5d 	bl	80048e0 <__NVIC_SetPriority>
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4603      	mov	r3, r0
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff ff31 	bl	80048a4 <__NVIC_EnableIRQ>
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff ffa2 	bl	800499c <SysTick_Config>
 8004a58:	4603      	mov	r3, r0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e16b      	b.n	8004d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 815a 	bne.w	8004d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d130      	bne.n	8004b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aec:	2201      	movs	r2, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0201 	and.w	r2, r3, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d017      	beq.n	8004b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d123      	bne.n	8004ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	220f      	movs	r2, #15
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80b4 	beq.w	8004d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a5f      	ldr	r2, [pc, #380]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b5d      	ldr	r3, [pc, #372]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	4a5b      	ldr	r2, [pc, #364]	; (8004d74 <HAL_GPIO_Init+0x310>)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_GPIO_Init+0x314>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02b      	beq.n	8004c8a <HAL_GPIO_Init+0x226>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_GPIO_Init+0x318>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d025      	beq.n	8004c86 <HAL_GPIO_Init+0x222>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a50      	ldr	r2, [pc, #320]	; (8004d80 <HAL_GPIO_Init+0x31c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <HAL_GPIO_Init+0x21e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a4f      	ldr	r2, [pc, #316]	; (8004d84 <HAL_GPIO_Init+0x320>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d019      	beq.n	8004c7e <HAL_GPIO_Init+0x21a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <HAL_GPIO_Init+0x324>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_GPIO_Init+0x216>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <HAL_GPIO_Init+0x328>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00d      	beq.n	8004c76 <HAL_GPIO_Init+0x212>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_GPIO_Init+0x32c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4b      	ldr	r2, [pc, #300]	; (8004d94 <HAL_GPIO_Init+0x330>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_GPIO_Init+0x20a>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	; (8004d74 <HAL_GPIO_Init+0x310>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a32      	ldr	r2, [pc, #200]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae90 	bls.w	8004a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e267      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d075      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dea:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d00c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004df6:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d112      	bne.n	8004e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b82      	ldr	r3, [pc, #520]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	4b7e      	ldr	r3, [pc, #504]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d05b      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x108>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d157      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e242      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d106      	bne.n	8004e40 <HAL_RCC_OscConfig+0x74>
 8004e32:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a75      	ldr	r2, [pc, #468]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e01d      	b.n	8004e7c <HAL_RCC_OscConfig+0xb0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x98>
 8004e4a:	4b70      	ldr	r3, [pc, #448]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6f      	ldr	r2, [pc, #444]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4b6d      	ldr	r3, [pc, #436]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6c      	ldr	r2, [pc, #432]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e00b      	b.n	8004e7c <HAL_RCC_OscConfig+0xb0>
 8004e64:	4b69      	ldr	r3, [pc, #420]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a68      	ldr	r2, [pc, #416]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a65      	ldr	r2, [pc, #404]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d013      	beq.n	8004eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7ff fcd0 	bl	8004828 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7ff fccc 	bl	8004828 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	; 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e207      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0xc0>
 8004eaa:	e014      	b.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7ff fcbc 	bl	8004828 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7ff fcb8 	bl	8004828 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1f3      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xe8>
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d063      	beq.n	8004faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ee2:	4b4a      	ldr	r3, [pc, #296]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eee:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d11c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	4b44      	ldr	r3, [pc, #272]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_RCC_OscConfig+0x152>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e1c7      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1e:	4b3b      	ldr	r3, [pc, #236]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4937      	ldr	r1, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	e03a      	b.n	8004faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7ff fc71 	bl	8004828 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7ff fc6d 	bl	8004828 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e1a8      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4925      	ldr	r1, [pc, #148]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]
 8004f7c:	e015      	b.n	8004faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x244>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7ff fc50 	bl	8004828 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8c:	f7ff fc4c 	bl	8004828 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e187      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d036      	beq.n	8005024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <HAL_RCC_OscConfig+0x248>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7ff fc30 	bl	8004828 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fcc:	f7ff fc2c 	bl	8004828 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e167      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x200>
 8004fea:	e01b      	b.n	8005024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCC_OscConfig+0x248>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff2:	f7ff fc19 	bl	8004828 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	e00e      	b.n	8005018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ffa:	f7ff fc15 	bl	8004828 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d907      	bls.n	8005018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e150      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
 800500c:	40023800 	.word	0x40023800
 8005010:	42470000 	.word	0x42470000
 8005014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ea      	bne.n	8004ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8097 	beq.w	8005160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005036:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	4b7d      	ldr	r3, [pc, #500]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	4a7c      	ldr	r2, [pc, #496]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005050:	6413      	str	r3, [r2, #64]	; 0x40
 8005052:	4b7a      	ldr	r3, [pc, #488]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005062:	4b77      	ldr	r3, [pc, #476]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d118      	bne.n	80050a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506e:	4b74      	ldr	r3, [pc, #464]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a73      	ldr	r2, [pc, #460]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800507a:	f7ff fbd5 	bl	8004828 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005082:	f7ff fbd1 	bl	8004828 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e10c      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <HAL_RCC_OscConfig+0x2ea>
 80050a8:	4b64      	ldr	r3, [pc, #400]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a63      	ldr	r2, [pc, #396]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	e01c      	b.n	80050f0 <HAL_RCC_OscConfig+0x324>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x30c>
 80050be:	4b5f      	ldr	r3, [pc, #380]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a5e      	ldr	r2, [pc, #376]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050c4:	f043 0304 	orr.w	r3, r3, #4
 80050c8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ca:	4b5c      	ldr	r3, [pc, #368]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a5b      	ldr	r2, [pc, #364]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0x324>
 80050d8:	4b58      	ldr	r3, [pc, #352]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a57      	ldr	r2, [pc, #348]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b55      	ldr	r3, [pc, #340]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a54      	ldr	r2, [pc, #336]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7ff fb96 	bl	8004828 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7ff fb92 	bl	8004828 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0cb      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005116:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ee      	beq.n	8005100 <HAL_RCC_OscConfig+0x334>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7ff fb80 	bl	8004828 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7ff fb7c 	bl	8004828 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0b5      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005142:	4b3e      	ldr	r3, [pc, #248]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b39      	ldr	r3, [pc, #228]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	4a38      	ldr	r2, [pc, #224]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80a1 	beq.w	80052ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b08      	cmp	r3, #8
 8005174:	d05c      	beq.n	8005230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d141      	bne.n	8005202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7ff fb50 	bl	8004828 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7ff fb4c 	bl	8004828 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e087      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	4b27      	ldr	r3, [pc, #156]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	3b01      	subs	r3, #1
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	491b      	ldr	r1, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7ff fb25 	bl	8004828 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e2:	f7ff fb21 	bl	8004828 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e05c      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x416>
 8005200:	e054      	b.n	80052ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005208:	f7ff fb0e 	bl	8004828 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7ff fb0a 	bl	8004828 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e045      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x444>
 800522e:	e03d      	b.n	80052ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e038      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
 800523c:	40023800 	.word	0x40023800
 8005240:	40007000 	.word	0x40007000
 8005244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x4ec>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d028      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d121      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d11a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005278:	4013      	ands	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800527e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800

080052bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0cc      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b68      	ldr	r3, [pc, #416]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d90c      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b65      	ldr	r3, [pc, #404]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b63      	ldr	r3, [pc, #396]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0b8      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d020      	beq.n	8005346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005310:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a58      	ldr	r2, [pc, #352]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800531a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005328:	4b53      	ldr	r3, [pc, #332]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a52      	ldr	r2, [pc, #328]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005334:	4b50      	ldr	r3, [pc, #320]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	494d      	ldr	r1, [pc, #308]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d044      	beq.n	80053dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d119      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e07f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d003      	beq.n	800537a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	2b03      	cmp	r3, #3
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e06f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e067      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4934      	ldr	r1, [pc, #208]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ac:	f7ff fa3c 	bl	8004828 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7ff fa38 	bl	8004828 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e04f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d20c      	bcs.n	8005404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e032      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4916      	ldr	r1, [pc, #88]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	490e      	ldr	r1, [pc, #56]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005442:	f000 f821 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8005446:	4602      	mov	r2, r0
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	490a      	ldr	r1, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 8005454:	5ccb      	ldrb	r3, [r1, r3]
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <HAL_RCC_ClockConfig+0x1c8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f99c 	bl	80047a0 <HAL_InitTick>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023c00 	.word	0x40023c00
 8005478:	40023800 	.word	0x40023800
 800547c:	08009f50 	.word	0x08009f50
 8005480:	20000014 	.word	0x20000014
 8005484:	20000018 	.word	0x20000018

08005488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800548c:	b094      	sub	sp, #80	; 0x50
 800548e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a0:	4b79      	ldr	r3, [pc, #484]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d00d      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x40>
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	f200 80e1 	bhi.w	8005674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x34>
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d003      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ba:	e0db      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b73      	ldr	r3, [pc, #460]	; (800568c <HAL_RCC_GetSysClockFreq+0x204>)
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c0:	e0db      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c2:	4b73      	ldr	r3, [pc, #460]	; (8005690 <HAL_RCC_GetSysClockFreq+0x208>)
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c6:	e0d8      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c8:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d2:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d063      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	2200      	movs	r2, #0
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	f04f 0000 	mov.w	r0, #0
 8005502:	f04f 0100 	mov.w	r1, #0
 8005506:	0159      	lsls	r1, r3, #5
 8005508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800550c:	0150      	lsls	r0, r2, #5
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4621      	mov	r1, r4
 8005514:	1a51      	subs	r1, r2, r1
 8005516:	6139      	str	r1, [r7, #16]
 8005518:	4629      	mov	r1, r5
 800551a:	eb63 0301 	sbc.w	r3, r3, r1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800552c:	4659      	mov	r1, fp
 800552e:	018b      	lsls	r3, r1, #6
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005536:	4651      	mov	r1, sl
 8005538:	018a      	lsls	r2, r1, #6
 800553a:	4651      	mov	r1, sl
 800553c:	ebb2 0801 	subs.w	r8, r2, r1
 8005540:	4659      	mov	r1, fp
 8005542:	eb63 0901 	sbc.w	r9, r3, r1
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800555a:	4690      	mov	r8, r2
 800555c:	4699      	mov	r9, r3
 800555e:	4623      	mov	r3, r4
 8005560:	eb18 0303 	adds.w	r3, r8, r3
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	462b      	mov	r3, r5
 8005568:	eb49 0303 	adc.w	r3, r9, r3
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800557a:	4629      	mov	r1, r5
 800557c:	024b      	lsls	r3, r1, #9
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005584:	4621      	mov	r1, r4
 8005586:	024a      	lsls	r2, r1, #9
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558e:	2200      	movs	r2, #0
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005598:	f7fb fafe 	bl	8000b98 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	e058      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a6:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	099b      	lsrs	r3, r3, #6
 80055ac:	2200      	movs	r2, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	4611      	mov	r1, r2
 80055b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f04f 0100 	mov.w	r1, #0
 80055cc:	0159      	lsls	r1, r3, #5
 80055ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d2:	0150      	lsls	r0, r2, #5
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4641      	mov	r1, r8
 80055da:	ebb2 0a01 	subs.w	sl, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f8:	ebb2 040a 	subs.w	r4, r2, sl
 80055fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	00eb      	lsls	r3, r5, #3
 800560a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560e:	00e2      	lsls	r2, r4, #3
 8005610:	4614      	mov	r4, r2
 8005612:	461d      	mov	r5, r3
 8005614:	4643      	mov	r3, r8
 8005616:	18e3      	adds	r3, r4, r3
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	464b      	mov	r3, r9
 800561c:	eb45 0303 	adc.w	r3, r5, r3
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562e:	4629      	mov	r1, r5
 8005630:	028b      	lsls	r3, r1, #10
 8005632:	4621      	mov	r1, r4
 8005634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005638:	4621      	mov	r1, r4
 800563a:	028a      	lsls	r2, r1, #10
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	2200      	movs	r2, #0
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	61fa      	str	r2, [r7, #28]
 8005648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564c:	f7fb faa4 	bl	8000b98 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetSysClockFreq+0x204>)
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800567c:	4618      	mov	r0, r3
 800567e:	3750      	adds	r7, #80	; 0x50
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e041      	b.n	800572a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fe ff00 	bl	80044c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4610      	mov	r0, r2
 80056d4:	f000 fc0e 	bl	8005ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_TIM_PWM_Start+0x24>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	bf14      	ite	ne
 8005750:	2301      	movne	r3, #1
 8005752:	2300      	moveq	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e022      	b.n	800579e <HAL_TIM_PWM_Start+0x6a>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d109      	bne.n	8005772 <HAL_TIM_PWM_Start+0x3e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b01      	cmp	r3, #1
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	e015      	b.n	800579e <HAL_TIM_PWM_Start+0x6a>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d109      	bne.n	800578c <HAL_TIM_PWM_Start+0x58>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e008      	b.n	800579e <HAL_TIM_PWM_Start+0x6a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e07c      	b.n	80058a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0x82>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b4:	e013      	b.n	80057de <HAL_TIM_PWM_Start+0xaa>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0x92>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c4:	e00b      	b.n	80057de <HAL_TIM_PWM_Start+0xaa>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xa2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d4:	e003      	b.n	80057de <HAL_TIM_PWM_Start+0xaa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fde0 	bl	80063ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2d      	ldr	r2, [pc, #180]	; (80058a8 <HAL_TIM_PWM_Start+0x174>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_TIM_PWM_Start+0xcc>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <HAL_TIM_PWM_Start+0x178>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_PWM_Start+0xd0>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_TIM_PWM_Start+0xd2>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a22      	ldr	r2, [pc, #136]	; (80058a8 <HAL_TIM_PWM_Start+0x174>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d022      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582c:	d01d      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_TIM_PWM_Start+0x17c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d018      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1d      	ldr	r2, [pc, #116]	; (80058b4 <HAL_TIM_PWM_Start+0x180>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1c      	ldr	r2, [pc, #112]	; (80058b8 <HAL_TIM_PWM_Start+0x184>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <HAL_TIM_PWM_Start+0x178>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_TIM_PWM_Start+0x188>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_PWM_Start+0x136>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <HAL_TIM_PWM_Start+0x18c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d111      	bne.n	800588e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d010      	beq.n	800589e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	e007      	b.n	800589e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40010000 	.word	0x40010000
 80058ac:	40010400 	.word	0x40010400
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40014000 	.word	0x40014000
 80058c0:	40001800 	.word	0x40001800

080058c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e097      	b.n	8005a08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fe fcdb 	bl	80042a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005908:	f023 0307 	bic.w	r3, r3, #7
 800590c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3304      	adds	r3, #4
 8005916:	4619      	mov	r1, r3
 8005918:	4610      	mov	r0, r2
 800591a:	f000 faeb 	bl	8005ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005946:	f023 0303 	bic.w	r3, r3, #3
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	4313      	orrs	r3, r2
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005964:	f023 030c 	bic.w	r3, r3, #12
 8005968:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	4313      	orrs	r3, r2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	011a      	lsls	r2, r3, #4
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	031b      	lsls	r3, r3, #12
 8005994:	4313      	orrs	r3, r2
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80059a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	4313      	orrs	r3, r2
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d110      	bne.n	8005a62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d102      	bne.n	8005a4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a46:	7b7b      	ldrb	r3, [r7, #13]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e069      	b.n	8005b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a60:	e031      	b.n	8005ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d110      	bne.n	8005a8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d102      	bne.n	8005a74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a6e:	7b3b      	ldrb	r3, [r7, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e055      	b.n	8005b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a88:	e01d      	b.n	8005ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d108      	bne.n	8005aa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d105      	bne.n	8005aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a96:	7b7b      	ldrb	r3, [r7, #13]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d102      	bne.n	8005aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a9c:	7b3b      	ldrb	r3, [r7, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d001      	beq.n	8005aa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e03e      	b.n	8005b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_TIM_Encoder_Start+0xc4>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d008      	beq.n	8005ae4 <HAL_TIM_Encoder_Start+0xd4>
 8005ad2:	e00f      	b.n	8005af4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fc65 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 8005ae2:	e016      	b.n	8005b12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2104      	movs	r1, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fc5d 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 8005af2:	e00e      	b.n	8005b12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fc55 	bl	80063ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2201      	movs	r2, #1
 8005b08:	2104      	movs	r1, #4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fc4e 	bl	80063ac <TIM_CCxChannelCmd>
      break;
 8005b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0202 	mvn.w	r2, #2
 8005b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f99e 	bl	8005eb8 <HAL_TIM_IC_CaptureCallback>
 8005b7c:	e005      	b.n	8005b8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f990 	bl	8005ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f9a1 	bl	8005ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d020      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01b      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0204 	mvn.w	r2, #4
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f978 	bl	8005eb8 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f96a 	bl	8005ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f97b 	bl	8005ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d020      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0208 	mvn.w	r2, #8
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f952 	bl	8005eb8 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f944 	bl	8005ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f955 	bl	8005ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d020      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0210 	mvn.w	r2, #16
 8005c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2208      	movs	r2, #8
 8005c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f92c 	bl	8005eb8 <HAL_TIM_IC_CaptureCallback>
 8005c60:	e005      	b.n	8005c6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f91e 	bl	8005ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f92f 	bl	8005ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0201 	mvn.w	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8fc 	bl	8005e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00c      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc76 	bl	80065a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f900 	bl	8005ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0220 	mvn.w	r2, #32
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc48 	bl	8006594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e0ae      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	f200 809f 	bhi.w	8005e78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d75 	.word	0x08005d75
 8005d44:	08005e79 	.word	0x08005e79
 8005d48:	08005e79 	.word	0x08005e79
 8005d4c:	08005e79 	.word	0x08005e79
 8005d50:	08005db5 	.word	0x08005db5
 8005d54:	08005e79 	.word	0x08005e79
 8005d58:	08005e79 	.word	0x08005e79
 8005d5c:	08005e79 	.word	0x08005e79
 8005d60:	08005df7 	.word	0x08005df7
 8005d64:	08005e79 	.word	0x08005e79
 8005d68:	08005e79 	.word	0x08005e79
 8005d6c:	08005e79 	.word	0x08005e79
 8005d70:	08005e37 	.word	0x08005e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f966 	bl	800604c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	619a      	str	r2, [r3, #24]
      break;
 8005db2:	e064      	b.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f9b6 	bl	800612c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	619a      	str	r2, [r3, #24]
      break;
 8005df4:	e043      	b.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fa0b 	bl	8006218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0204 	bic.w	r2, r2, #4
 8005e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69d9      	ldr	r1, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	61da      	str	r2, [r3, #28]
      break;
 8005e34:	e023      	b.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fa5f 	bl	8006300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	61da      	str	r2, [r3, #28]
      break;
 8005e76:	e002      	b.n	8005e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a46      	ldr	r2, [pc, #280]	; (8006020 <TIM_Base_SetConfig+0x12c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f12:	d00f      	beq.n	8005f34 <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a43      	ldr	r2, [pc, #268]	; (8006024 <TIM_Base_SetConfig+0x130>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a42      	ldr	r2, [pc, #264]	; (8006028 <TIM_Base_SetConfig+0x134>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a41      	ldr	r2, [pc, #260]	; (800602c <TIM_Base_SetConfig+0x138>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a40      	ldr	r2, [pc, #256]	; (8006030 <TIM_Base_SetConfig+0x13c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d108      	bne.n	8005f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a35      	ldr	r2, [pc, #212]	; (8006020 <TIM_Base_SetConfig+0x12c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02b      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f54:	d027      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a32      	ldr	r2, [pc, #200]	; (8006024 <TIM_Base_SetConfig+0x130>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d023      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a31      	ldr	r2, [pc, #196]	; (8006028 <TIM_Base_SetConfig+0x134>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01f      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a30      	ldr	r2, [pc, #192]	; (800602c <TIM_Base_SetConfig+0x138>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01b      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2f      	ldr	r2, [pc, #188]	; (8006030 <TIM_Base_SetConfig+0x13c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d017      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2e      	ldr	r2, [pc, #184]	; (8006034 <TIM_Base_SetConfig+0x140>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d013      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2d      	ldr	r2, [pc, #180]	; (8006038 <TIM_Base_SetConfig+0x144>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00f      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2c      	ldr	r2, [pc, #176]	; (800603c <TIM_Base_SetConfig+0x148>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00b      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2b      	ldr	r2, [pc, #172]	; (8006040 <TIM_Base_SetConfig+0x14c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <TIM_Base_SetConfig+0x150>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a29      	ldr	r2, [pc, #164]	; (8006048 <TIM_Base_SetConfig+0x154>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d108      	bne.n	8005fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <TIM_Base_SetConfig+0x12c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0xf8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <TIM_Base_SetConfig+0x13c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d103      	bne.n	8005ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b01      	cmp	r3, #1
 8006004:	d105      	bne.n	8006012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f023 0201 	bic.w	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	611a      	str	r2, [r3, #16]
  }
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40000c00 	.word	0x40000c00
 8006030:	40010400 	.word	0x40010400
 8006034:	40014000 	.word	0x40014000
 8006038:	40014400 	.word	0x40014400
 800603c:	40014800 	.word	0x40014800
 8006040:	40001800 	.word	0x40001800
 8006044:	40001c00 	.word	0x40001c00
 8006048:	40002000 	.word	0x40002000

0800604c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f023 0201 	bic.w	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f023 0302 	bic.w	r3, r3, #2
 8006094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a20      	ldr	r2, [pc, #128]	; (8006124 <TIM_OC1_SetConfig+0xd8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC1_SetConfig+0x64>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1f      	ldr	r2, [pc, #124]	; (8006128 <TIM_OC1_SetConfig+0xdc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10c      	bne.n	80060ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0308 	bic.w	r3, r3, #8
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a15      	ldr	r2, [pc, #84]	; (8006124 <TIM_OC1_SetConfig+0xd8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_OC1_SetConfig+0x8e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a14      	ldr	r2, [pc, #80]	; (8006128 <TIM_OC1_SetConfig+0xdc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d111      	bne.n	80060fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400

0800612c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f023 0210 	bic.w	r2, r3, #16
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	021b      	lsls	r3, r3, #8
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0320 	bic.w	r3, r3, #32
 8006176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a22      	ldr	r2, [pc, #136]	; (8006210 <TIM_OC2_SetConfig+0xe4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_OC2_SetConfig+0x68>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <TIM_OC2_SetConfig+0xe8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10d      	bne.n	80061b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a17      	ldr	r2, [pc, #92]	; (8006210 <TIM_OC2_SetConfig+0xe4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC2_SetConfig+0x94>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a16      	ldr	r2, [pc, #88]	; (8006214 <TIM_OC2_SetConfig+0xe8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d113      	bne.n	80061e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400

08006218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <TIM_OC3_SetConfig+0xe0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_OC3_SetConfig+0x66>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a20      	ldr	r2, [pc, #128]	; (80062fc <TIM_OC3_SetConfig+0xe4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10d      	bne.n	800629a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <TIM_OC3_SetConfig+0xe0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC3_SetConfig+0x92>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <TIM_OC3_SetConfig+0xe4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d113      	bne.n	80062d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <TIM_OC4_SetConfig+0xa4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC4_SetConfig+0x68>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a11      	ldr	r2, [pc, #68]	; (80063a8 <TIM_OC4_SetConfig+0xa8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d109      	bne.n	800637c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800636e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400

080063ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2201      	movs	r2, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800640c:	2302      	movs	r3, #2
 800640e:	e05a      	b.n	80064c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645c:	d01d      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1d      	ldr	r2, [pc, #116]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1a      	ldr	r2, [pc, #104]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a17      	ldr	r2, [pc, #92]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a15      	ldr	r2, [pc, #84]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d10c      	bne.n	80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40010000 	.word	0x40010000
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40010400 	.word	0x40010400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40001800 	.word	0x40001800

080064f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006508:	2302      	movs	r3, #2
 800650a:	e03d      	b.n	8006588 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ce:	2b84      	cmp	r3, #132	; 0x84
 80065d0:	d005      	beq.n	80065de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	3303      	adds	r3, #3
 80065dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065de:	68fb      	ldr	r3, [r7, #12]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80065f0:	f000 fade 	bl	8006bb0 <vTaskStartScheduler>
  
  return osOK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	bd80      	pop	{r7, pc}

080065fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065fc:	b089      	sub	sp, #36	; 0x24
 80065fe:	af04      	add	r7, sp, #16
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d020      	beq.n	800664e <osThreadCreate+0x54>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01c      	beq.n	800664e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685c      	ldr	r4, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691e      	ldr	r6, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff ffc8 	bl	80065bc <makeFreeRtosPriority>
 800662c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006636:	9202      	str	r2, [sp, #8]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	9100      	str	r1, [sp, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	4632      	mov	r2, r6
 8006640:	4629      	mov	r1, r5
 8006642:	4620      	mov	r0, r4
 8006644:	f000 f8ed 	bl	8006822 <xTaskCreateStatic>
 8006648:	4603      	mov	r3, r0
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e01c      	b.n	8006688 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685c      	ldr	r4, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800665a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ffaa 	bl	80065bc <makeFreeRtosPriority>
 8006668:	4602      	mov	r2, r0
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	9301      	str	r3, [sp, #4]
 8006670:	9200      	str	r2, [sp, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	4632      	mov	r2, r6
 8006676:	4629      	mov	r1, r5
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f92f 	bl	80068dc <xTaskCreate>
 800667e:	4603      	mov	r3, r0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d001      	beq.n	8006688 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006692 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <osDelay+0x16>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	e000      	b.n	80066aa <osDelay+0x18>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa4c 	bl	8006b48 <vTaskDelay>
  
  return osOK;
 80066b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f103 0208 	add.w	r2, r3, #8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f103 0208 	add.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f103 0208 	add.w	r2, r3, #8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d103      	bne.n	800677c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	e00c      	b.n	8006796 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3308      	adds	r3, #8
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e002      	b.n	800678a <vListInsert+0x2e>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	d2f6      	bcs.n	8006784 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6892      	ldr	r2, [r2, #8]
 80067e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6852      	ldr	r2, [r2, #4]
 80067ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d103      	bne.n	8006802 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	1e5a      	subs	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006822:	b580      	push	{r7, lr}
 8006824:	b08e      	sub	sp, #56	; 0x38
 8006826:	af04      	add	r7, sp, #16
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <xTaskCreateStatic+0x46>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61fb      	str	r3, [r7, #28]
}
 8006864:	bf00      	nop
 8006866:	e7fe      	b.n	8006866 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006868:	2354      	movs	r3, #84	; 0x54
 800686a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b54      	cmp	r3, #84	; 0x54
 8006870:	d00a      	beq.n	8006888 <xTaskCreateStatic+0x66>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61bb      	str	r3, [r7, #24]
}
 8006884:	bf00      	nop
 8006886:	e7fe      	b.n	8006886 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006888:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <xTaskCreateStatic+0xac>
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d01b      	beq.n	80068ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068a8:	2300      	movs	r3, #0
 80068aa:	9303      	str	r3, [sp, #12]
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	f107 0314 	add.w	r3, r7, #20
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f850 	bl	8006966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068c8:	f000 f8d4 	bl	8006a74 <prvAddNewTaskToReadyList>
 80068cc:	e001      	b.n	80068d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068d2:	697b      	ldr	r3, [r7, #20]
	}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3728      	adds	r7, #40	; 0x28
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	; 0x30
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fee1 	bl	80076b8 <pvPortMalloc>
 80068f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00e      	beq.n	800691c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068fe:	2054      	movs	r0, #84	; 0x54
 8006900:	f000 feda 	bl	80076b8 <pvPortMalloc>
 8006904:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
 8006912:	e005      	b.n	8006920 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006914:	6978      	ldr	r0, [r7, #20]
 8006916:	f000 ff9b 	bl	8007850 <vPortFree>
 800691a:	e001      	b.n	8006920 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d017      	beq.n	8006956 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	2300      	movs	r3, #0
 8006932:	9303      	str	r3, [sp, #12]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f80e 	bl	8006966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800694a:	69f8      	ldr	r0, [r7, #28]
 800694c:	f000 f892 	bl	8006a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006950:	2301      	movs	r3, #1
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	e002      	b.n	800695c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295
 800695a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800695c:	69bb      	ldr	r3, [r7, #24]
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800697e:	3b01      	subs	r3, #1
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <prvInitialiseNewTask+0x48>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	617b      	str	r3, [r7, #20]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01f      	beq.n	80069f4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e012      	b.n	80069e0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	7819      	ldrb	r1, [r3, #0]
 80069c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	3334      	adds	r3, #52	; 0x34
 80069ca:	460a      	mov	r2, r1
 80069cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3301      	adds	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b0f      	cmp	r3, #15
 80069e4:	d9e9      	bls.n	80069ba <prvInitialiseNewTask+0x54>
 80069e6:	e000      	b.n	80069ea <prvInitialiseNewTask+0x84>
			{
				break;
 80069e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069f2:	e003      	b.n	80069fc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d901      	bls.n	8006a06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a02:	2306      	movs	r3, #6
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2200      	movs	r2, #0
 8006a16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fe6c 	bl	80066fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	3318      	adds	r3, #24
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fe67 	bl	80066fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	f1c3 0207 	rsb	r2, r3, #7
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	69b8      	ldr	r0, [r7, #24]
 8006a56:	f000 fc23 	bl	80072a0 <pxPortInitialiseStack>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a6c:	bf00      	nop
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a7c:	f000 fd3a 	bl	80074f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a80:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <prvAddNewTaskToReadyList+0xb8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3301      	adds	r3, #1
 8006a86:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <prvAddNewTaskToReadyList+0xb8>)
 8006a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <prvAddNewTaskToReadyList+0xbc>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a92:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <prvAddNewTaskToReadyList+0xbc>)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a98:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <prvAddNewTaskToReadyList+0xb8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d110      	bne.n	8006ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa0:	f000 fabc 	bl	800701c <prvInitialiseTaskLists>
 8006aa4:	e00d      	b.n	8006ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aa6:	4b23      	ldr	r3, [pc, #140]	; (8006b34 <prvAddNewTaskToReadyList+0xc0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aae:	4b20      	ldr	r3, [pc, #128]	; (8006b30 <prvAddNewTaskToReadyList+0xbc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d802      	bhi.n	8006ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006abc:	4a1c      	ldr	r2, [pc, #112]	; (8006b30 <prvAddNewTaskToReadyList+0xbc>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <prvAddNewTaskToReadyList+0xc4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <prvAddNewTaskToReadyList+0xc4>)
 8006aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	409a      	lsls	r2, r3
 8006ad4:	4b19      	ldr	r3, [pc, #100]	; (8006b3c <prvAddNewTaskToReadyList+0xc8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	4a18      	ldr	r2, [pc, #96]	; (8006b3c <prvAddNewTaskToReadyList+0xc8>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <prvAddNewTaskToReadyList+0xcc>)
 8006aec:	441a      	add	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f7ff fe0d 	bl	8006714 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006afa:	f000 fd2b 	bl	8007554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006afe:	4b0d      	ldr	r3, [pc, #52]	; (8006b34 <prvAddNewTaskToReadyList+0xc0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b06:	4b0a      	ldr	r3, [pc, #40]	; (8006b30 <prvAddNewTaskToReadyList+0xbc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d207      	bcs.n	8006b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b14:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <prvAddNewTaskToReadyList+0xd0>)
 8006b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000aec 	.word	0x20000aec
 8006b30:	200009ec 	.word	0x200009ec
 8006b34:	20000af8 	.word	0x20000af8
 8006b38:	20000b08 	.word	0x20000b08
 8006b3c:	20000af4 	.word	0x20000af4
 8006b40:	200009f0 	.word	0x200009f0
 8006b44:	e000ed04 	.word	0xe000ed04

08006b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d017      	beq.n	8006b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <vTaskDelay+0x60>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <vTaskDelay+0x30>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60bb      	str	r3, [r7, #8]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b78:	f000 f87a 	bl	8006c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fb28 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b84:	f000 f882 	bl	8006c8c <xTaskResumeAll>
 8006b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d107      	bne.n	8006ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <vTaskDelay+0x64>)
 8006b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000b14 	.word	0x20000b14
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bbe:	463a      	mov	r2, r7
 8006bc0:	1d39      	adds	r1, r7, #4
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa fc72 	bl	80014b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	9202      	str	r2, [sp, #8]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	460a      	mov	r2, r1
 8006bde:	491e      	ldr	r1, [pc, #120]	; (8006c58 <vTaskStartScheduler+0xa8>)
 8006be0:	481e      	ldr	r0, [pc, #120]	; (8006c5c <vTaskStartScheduler+0xac>)
 8006be2:	f7ff fe1e 	bl	8006822 <xTaskCreateStatic>
 8006be6:	4603      	mov	r3, r0
 8006be8:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <vTaskStartScheduler+0xb0>)
 8006bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bec:	4b1c      	ldr	r3, [pc, #112]	; (8006c60 <vTaskStartScheduler+0xb0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e001      	b.n	8006bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d116      	bne.n	8006c32 <vTaskStartScheduler+0x82>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	613b      	str	r3, [r7, #16]
}
 8006c16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c18:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <vTaskStartScheduler+0xb4>)
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <vTaskStartScheduler+0xb8>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <vTaskStartScheduler+0xbc>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c2c:	f000 fbc0 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c30:	e00e      	b.n	8006c50 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d10a      	bne.n	8006c50 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60fb      	str	r3, [r7, #12]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <vTaskStartScheduler+0x9e>
}
 8006c50:	bf00      	nop
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	08009f48 	.word	0x08009f48
 8006c5c:	08006fed 	.word	0x08006fed
 8006c60:	20000b10 	.word	0x20000b10
 8006c64:	20000b0c 	.word	0x20000b0c
 8006c68:	20000af8 	.word	0x20000af8
 8006c6c:	20000af0 	.word	0x20000af0

08006c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	4a03      	ldr	r2, [pc, #12]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c7e:	bf00      	nop
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	20000b14 	.word	0x20000b14

08006c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <xTaskResumeAll+0x114>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	603b      	str	r3, [r7, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cb8:	f000 fc1c 	bl	80074f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cbc:	4b38      	ldr	r3, [pc, #224]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc6:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d161      	bne.n	8006d92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cce:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <xTaskResumeAll+0x118>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d05d      	beq.n	8006d92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd6:	e02e      	b.n	8006d36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cd8:	4b33      	ldr	r3, [pc, #204]	; (8006da8 <xTaskResumeAll+0x11c>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3318      	adds	r3, #24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fd72 	bl	80067ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fd6d 	bl	80067ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	409a      	lsls	r2, r3
 8006cfc:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <xTaskResumeAll+0x120>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <xTaskResumeAll+0x120>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <xTaskResumeAll+0x124>)
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	f7ff fcf9 	bl	8006714 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4b23      	ldr	r3, [pc, #140]	; (8006db4 <xTaskResumeAll+0x128>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d302      	bcc.n	8006d36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d30:	4b21      	ldr	r3, [pc, #132]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <xTaskResumeAll+0x11c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1cc      	bne.n	8006cd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d44:	f000 fa08 	bl	8007158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d48:	4b1c      	ldr	r3, [pc, #112]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d54:	f000 f836 	bl	8006dc4 <xTaskIncrementTick>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f1      	bne.n	8006d54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d76:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <xTaskResumeAll+0x134>)
 8006d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d92:	f000 fbdf 	bl	8007554 <vPortExitCritical>

	return xAlreadyYielded;
 8006d96:	68bb      	ldr	r3, [r7, #8]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000b14 	.word	0x20000b14
 8006da4:	20000aec 	.word	0x20000aec
 8006da8:	20000aac 	.word	0x20000aac
 8006dac:	20000af4 	.word	0x20000af4
 8006db0:	200009f0 	.word	0x200009f0
 8006db4:	200009ec 	.word	0x200009ec
 8006db8:	20000b00 	.word	0x20000b00
 8006dbc:	20000afc 	.word	0x20000afc
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dce:	4b4e      	ldr	r3, [pc, #312]	; (8006f08 <xTaskIncrementTick+0x144>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 808e 	bne.w	8006ef4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dd8:	4b4c      	ldr	r3, [pc, #304]	; (8006f0c <xTaskIncrementTick+0x148>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006de0:	4a4a      	ldr	r2, [pc, #296]	; (8006f0c <xTaskIncrementTick+0x148>)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d120      	bne.n	8006e2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dec:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <xTaskIncrementTick+0x48>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	603b      	str	r3, [r7, #0]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xTaskIncrementTick+0x46>
 8006e0c:	4b40      	ldr	r3, [pc, #256]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a3e      	ldr	r2, [pc, #248]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4a3e      	ldr	r2, [pc, #248]	; (8006f14 <xTaskIncrementTick+0x150>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6013      	str	r3, [r2, #0]
 8006e20:	4b3d      	ldr	r3, [pc, #244]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a3c      	ldr	r2, [pc, #240]	; (8006f18 <xTaskIncrementTick+0x154>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	f000 f995 	bl	8007158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d348      	bcc.n	8006eca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e44:	f04f 32ff 	mov.w	r2, #4294967295
 8006e48:	601a      	str	r2, [r3, #0]
					break;
 8006e4a:	e03e      	b.n	8006eca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e4c:	4b30      	ldr	r3, [pc, #192]	; (8006f10 <xTaskIncrementTick+0x14c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d203      	bcs.n	8006e6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e64:	4a2d      	ldr	r2, [pc, #180]	; (8006f1c <xTaskIncrementTick+0x158>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e6a:	e02e      	b.n	8006eca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fcac 	bl	80067ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3318      	adds	r3, #24
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff fca3 	bl	80067ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <xTaskIncrementTick+0x15c>)
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006ea8:	441a      	add	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7ff fc2f 	bl	8006714 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eba:	4b1b      	ldr	r3, [pc, #108]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d3b9      	bcc.n	8006e38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec8:	e7b6      	b.n	8006e38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eca:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <xTaskIncrementTick+0x164>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed0:	4914      	ldr	r1, [pc, #80]	; (8006f24 <xTaskIncrementTick+0x160>)
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d901      	bls.n	8006ee6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ee6:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <xTaskIncrementTick+0x168>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e004      	b.n	8006efe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <xTaskIncrementTick+0x16c>)
 8006efc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006efe:	697b      	ldr	r3, [r7, #20]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000b14 	.word	0x20000b14
 8006f0c:	20000af0 	.word	0x20000af0
 8006f10:	20000aa4 	.word	0x20000aa4
 8006f14:	20000aa8 	.word	0x20000aa8
 8006f18:	20000b04 	.word	0x20000b04
 8006f1c:	20000b0c 	.word	0x20000b0c
 8006f20:	20000af4 	.word	0x20000af4
 8006f24:	200009f0 	.word	0x200009f0
 8006f28:	200009ec 	.word	0x200009ec
 8006f2c:	20000b00 	.word	0x20000b00
 8006f30:	20000afc 	.word	0x20000afc

08006f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f3a:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <vTaskSwitchContext+0xa4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <vTaskSwitchContext+0xa8>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f48:	e03f      	b.n	8006fca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <vTaskSwitchContext+0xa8>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f50:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <vTaskSwitchContext+0xac>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	fab3 f383 	clz	r3, r3
 8006f5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	f1c3 031f 	rsb	r3, r3, #31
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	491f      	ldr	r1, [pc, #124]	; (8006fe4 <vTaskSwitchContext+0xb0>)
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	607b      	str	r3, [r7, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <vTaskSwitchContext+0x5a>
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <vTaskSwitchContext+0xb0>)
 8006f9c:	4413      	add	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d104      	bne.n	8006fc0 <vTaskSwitchContext+0x8c>
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	605a      	str	r2, [r3, #4]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <vTaskSwitchContext+0xb4>)
 8006fc8:	6013      	str	r3, [r2, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	20000b14 	.word	0x20000b14
 8006fdc:	20000b00 	.word	0x20000b00
 8006fe0:	20000af4 	.word	0x20000af4
 8006fe4:	200009f0 	.word	0x200009f0
 8006fe8:	200009ec 	.word	0x200009ec

08006fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ff4:	f000 f852 	bl	800709c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <prvIdleTask+0x28>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d9f9      	bls.n	8006ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <prvIdleTask+0x2c>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007010:	e7f0      	b.n	8006ff4 <prvIdleTask+0x8>
 8007012:	bf00      	nop
 8007014:	200009f0 	.word	0x200009f0
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e00c      	b.n	8007042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	; (800707c <prvInitialiseTaskLists+0x60>)
 8007034:	4413      	add	r3, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fb3f 	bl	80066ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3301      	adds	r3, #1
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b06      	cmp	r3, #6
 8007046:	d9ef      	bls.n	8007028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007048:	480d      	ldr	r0, [pc, #52]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800704a:	f7ff fb36 	bl	80066ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800704e:	480d      	ldr	r0, [pc, #52]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007050:	f7ff fb33 	bl	80066ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007054:	480c      	ldr	r0, [pc, #48]	; (8007088 <prvInitialiseTaskLists+0x6c>)
 8007056:	f7ff fb30 	bl	80066ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800705a:	480c      	ldr	r0, [pc, #48]	; (800708c <prvInitialiseTaskLists+0x70>)
 800705c:	f7ff fb2d 	bl	80066ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007060:	480b      	ldr	r0, [pc, #44]	; (8007090 <prvInitialiseTaskLists+0x74>)
 8007062:	f7ff fb2a 	bl	80066ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <prvInitialiseTaskLists+0x78>)
 8007068:	4a05      	ldr	r2, [pc, #20]	; (8007080 <prvInitialiseTaskLists+0x64>)
 800706a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <prvInitialiseTaskLists+0x7c>)
 800706e:	4a05      	ldr	r2, [pc, #20]	; (8007084 <prvInitialiseTaskLists+0x68>)
 8007070:	601a      	str	r2, [r3, #0]
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	200009f0 	.word	0x200009f0
 8007080:	20000a7c 	.word	0x20000a7c
 8007084:	20000a90 	.word	0x20000a90
 8007088:	20000aac 	.word	0x20000aac
 800708c:	20000ac0 	.word	0x20000ac0
 8007090:	20000ad8 	.word	0x20000ad8
 8007094:	20000aa4 	.word	0x20000aa4
 8007098:	20000aa8 	.word	0x20000aa8

0800709c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a2:	e019      	b.n	80070d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070a4:	f000 fa26 	bl	80074f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <prvCheckTasksWaitingTermination+0x50>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fb8a 	bl	80067ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ba:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3b01      	subs	r3, #1
 80070c0:	4a0b      	ldr	r2, [pc, #44]	; (80070f0 <prvCheckTasksWaitingTermination+0x54>)
 80070c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070ce:	f000 fa41 	bl	8007554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f810 	bl	80070f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <prvCheckTasksWaitingTermination+0x58>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e1      	bne.n	80070a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000ac0 	.word	0x20000ac0
 80070f0:	20000aec 	.word	0x20000aec
 80070f4:	20000ad4 	.word	0x20000ad4

080070f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fb9e 	bl	8007850 <vPortFree>
				vPortFree( pxTCB );
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb9b 	bl	8007850 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800711a:	e018      	b.n	800714e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007122:	2b01      	cmp	r3, #1
 8007124:	d103      	bne.n	800712e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb92 	bl	8007850 <vPortFree>
	}
 800712c:	e00f      	b.n	800714e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007134:	2b02      	cmp	r3, #2
 8007136:	d00a      	beq.n	800714e <prvDeleteTCB+0x56>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	60fb      	str	r3, [r7, #12]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <prvDeleteTCB+0x54>
	}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715e:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <prvResetNextTaskUnblockTime+0x38>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <prvResetNextTaskUnblockTime+0x3c>)
 800716a:	f04f 32ff 	mov.w	r2, #4294967295
 800716e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007170:	e008      	b.n	8007184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007172:	4b07      	ldr	r3, [pc, #28]	; (8007190 <prvResetNextTaskUnblockTime+0x38>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4a04      	ldr	r2, [pc, #16]	; (8007194 <prvResetNextTaskUnblockTime+0x3c>)
 8007182:	6013      	str	r3, [r2, #0]
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20000aa4 	.word	0x20000aa4
 8007194:	20000b0c 	.word	0x20000b0c

08007198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <xTaskGetSchedulerState+0x34>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d102      	bne.n	80071ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071a6:	2301      	movs	r3, #1
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	e008      	b.n	80071be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ac:	4b08      	ldr	r3, [pc, #32]	; (80071d0 <xTaskGetSchedulerState+0x38>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80071b4:	2302      	movs	r3, #2
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e001      	b.n	80071be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80071ba:	2300      	movs	r3, #0
 80071bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80071be:	687b      	ldr	r3, [r7, #4]
	}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20000af8 	.word	0x20000af8
 80071d0:	20000b14 	.word	0x20000b14

080071d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071de:	4b29      	ldr	r3, [pc, #164]	; (8007284 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff faef 	bl	80067ce <uxListRemove>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071f6:	4b24      	ldr	r3, [pc, #144]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	2201      	movs	r2, #1
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43da      	mvns	r2, r3
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <prvAddCurrentTaskToDelayedList+0xb8>)
 800720c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d10a      	bne.n	800722c <prvAddCurrentTaskToDelayedList+0x58>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	481a      	ldr	r0, [pc, #104]	; (8007290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007226:	f7ff fa75 	bl	8006714 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800722a:	e026      	b.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	429a      	cmp	r2, r3
 8007242:	d209      	bcs.n	8007258 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7ff fa83 	bl	800675c <vListInsert>
}
 8007256:	e010      	b.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <prvAddCurrentTaskToDelayedList+0xc4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff fa79 	bl	800675c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvAddCurrentTaskToDelayedList+0xc8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d202      	bcs.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007274:	4a09      	ldr	r2, [pc, #36]	; (800729c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6013      	str	r3, [r2, #0]
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000af0 	.word	0x20000af0
 8007288:	200009ec 	.word	0x200009ec
 800728c:	20000af4 	.word	0x20000af4
 8007290:	20000ad8 	.word	0x20000ad8
 8007294:	20000aa8 	.word	0x20000aa8
 8007298:	20000aa4 	.word	0x20000aa4
 800729c:	20000b0c 	.word	0x20000b0c

080072a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b04      	subs	r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <pxPortInitialiseStack+0x64>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b14      	subs	r3, #20
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f06f 0202 	mvn.w	r2, #2
 80072ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b20      	subs	r3, #32
 80072f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08007309 	.word	0x08007309

08007308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <prvTaskExitError+0x54>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d00a      	beq.n	8007332 <prvTaskExitError+0x2a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <prvTaskExitError+0x28>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
}
 8007344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007346:	bf00      	nop
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0fc      	beq.n	8007348 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	20000020 	.word	0x20000020

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	200009ec 	.word	0x200009ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b46      	ldr	r3, [pc, #280]	; (80074d0 <xPortStartScheduler+0x120>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a46      	ldr	r2, [pc, #280]	; (80074d4 <xPortStartScheduler+0x124>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10a      	bne.n	80073d6 <xPortStartScheduler+0x26>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d6:	4b3e      	ldr	r3, [pc, #248]	; (80074d0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <xPortStartScheduler+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x46>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <xPortStartScheduler+0x12c>)
 80073f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <xPortStartScheduler+0x130>)
 800741c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <xPortStartScheduler+0x134>)
 8007420:	2207      	movs	r2, #7
 8007422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007424:	e009      	b.n	800743a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007426:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <xPortStartScheduler+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	4a2d      	ldr	r2, [pc, #180]	; (80074e4 <xPortStartScheduler+0x134>)
 800742e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d0ef      	beq.n	8007426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007446:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1c3 0307 	rsb	r3, r3, #7
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00a      	beq.n	8007468 <xPortStartScheduler+0xb8>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <xPortStartScheduler+0x134>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <xPortStartScheduler+0x134>)
 8007470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xPortStartScheduler+0x134>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <xPortStartScheduler+0x134>)
 800747c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007486:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <xPortStartScheduler+0x138>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <xPortStartScheduler+0x138>)
 800748c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <xPortStartScheduler+0x138>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <xPortStartScheduler+0x138>)
 8007498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800749c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800749e:	f000 f8dd 	bl	800765c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <xPortStartScheduler+0x13c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074a8:	f000 f8fc 	bl	80076a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <xPortStartScheduler+0x140>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <xPortStartScheduler+0x140>)
 80074b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074b8:	f7ff ff66 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074bc:	f7ff fd3a 	bl	8006f34 <vTaskSwitchContext>
	prvTaskExitError();
 80074c0:	f7ff ff22 	bl	8007308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed00 	.word	0xe000ed00
 80074d4:	410fc271 	.word	0x410fc271
 80074d8:	410fc270 	.word	0x410fc270
 80074dc:	e000e400 	.word	0xe000e400
 80074e0:	20000b18 	.word	0x20000b18
 80074e4:	20000b1c 	.word	0x20000b1c
 80074e8:	e000ed20 	.word	0xe000ed20
 80074ec:	20000020 	.word	0x20000020
 80074f0:	e000ef34 	.word	0xe000ef34

080074f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	607b      	str	r3, [r7, #4]
}
 800750c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <vPortEnterCritical+0x58>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a0d      	ldr	r2, [pc, #52]	; (800754c <vPortEnterCritical+0x58>)
 8007516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <vPortEnterCritical+0x58>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10f      	bne.n	8007540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <vPortEnterCritical+0x5c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <vPortEnterCritical+0x4c>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vPortEnterCritical+0x4a>
	}
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000020 	.word	0x20000020
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800755a:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <vPortExitCritical+0x50>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <vPortExitCritical+0x24>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	607b      	str	r3, [r7, #4]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <vPortExitCritical+0x50>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <vPortExitCritical+0x50>)
 8007580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <vPortExitCritical+0x50>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <vPortExitCritical+0x42>
 800758a:	2300      	movs	r3, #0
 800758c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000020 	.word	0x20000020
	...

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f01e 0f10 	tst.w	lr, #16
 80075c0:	bf08      	it	eq
 80075c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075d4:	f380 8811 	msr	BASEPRI, r0
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f7ff fca8 	bl	8006f34 <vTaskSwitchContext>
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f380 8811 	msr	BASEPRI, r0
 80075ec:	bc09      	pop	{r0, r3}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f6:	f01e 0f10 	tst.w	lr, #16
 80075fa:	bf08      	it	eq
 80075fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007600:	f380 8809 	msr	PSP, r0
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst>:
 8007610:	200009ec 	.word	0x200009ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007632:	f7ff fbc7 	bl	8006dc4 <xTaskIncrementTick>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <xPortSysTickHandler+0x40>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <vPortSetupTimerInterrupt+0x38>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortSetupTimerInterrupt+0x3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <vPortSetupTimerInterrupt+0x40>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <vPortSetupTimerInterrupt+0x44>)
 800767a:	3b01      	subs	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000e010 	.word	0xe000e010
 8007694:	e000e018 	.word	0xe000e018
 8007698:	20000014 	.word	0x20000014
 800769c:	10624dd3 	.word	0x10624dd3
 80076a0:	e000e014 	.word	0xe000e014

080076a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076b4 <vPortEnableVFP+0x10>
 80076a8:	6801      	ldr	r1, [r0, #0]
 80076aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076b2:	bf00      	nop
 80076b4:	e000ed88 	.word	0xe000ed88

080076b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80076c4:	f7ff fad4 	bl	8006c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80076c8:	4b5b      	ldr	r3, [pc, #364]	; (8007838 <pvPortMalloc+0x180>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076d0:	f000 f920 	bl	8007914 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076d4:	4b59      	ldr	r3, [pc, #356]	; (800783c <pvPortMalloc+0x184>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8093 	bne.w	8007808 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01d      	beq.n	8007724 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076e8:	2208      	movs	r2, #8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d014      	beq.n	8007724 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f023 0307 	bic.w	r3, r3, #7
 8007700:	3308      	adds	r3, #8
 8007702:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <pvPortMalloc+0x6c>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	617b      	str	r3, [r7, #20]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d06e      	beq.n	8007808 <pvPortMalloc+0x150>
 800772a:	4b45      	ldr	r3, [pc, #276]	; (8007840 <pvPortMalloc+0x188>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d869      	bhi.n	8007808 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007734:	4b43      	ldr	r3, [pc, #268]	; (8007844 <pvPortMalloc+0x18c>)
 8007736:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007738:	4b42      	ldr	r3, [pc, #264]	; (8007844 <pvPortMalloc+0x18c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800773e:	e004      	b.n	800774a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d903      	bls.n	800775c <pvPortMalloc+0xa4>
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f1      	bne.n	8007740 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800775c:	4b36      	ldr	r3, [pc, #216]	; (8007838 <pvPortMalloc+0x180>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007762:	429a      	cmp	r2, r3
 8007764:	d050      	beq.n	8007808 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2208      	movs	r2, #8
 800776c:	4413      	add	r3, r2
 800776e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	2308      	movs	r3, #8
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	429a      	cmp	r2, r3
 8007786:	d91f      	bls.n	80077c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <pvPortMalloc+0xf8>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	613b      	str	r3, [r7, #16]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077c2:	69b8      	ldr	r0, [r7, #24]
 80077c4:	f000 f908 	bl	80079d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <pvPortMalloc+0x188>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	4a1b      	ldr	r2, [pc, #108]	; (8007840 <pvPortMalloc+0x188>)
 80077d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077d6:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <pvPortMalloc+0x188>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	4b1b      	ldr	r3, [pc, #108]	; (8007848 <pvPortMalloc+0x190>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d203      	bcs.n	80077ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077e2:	4b17      	ldr	r3, [pc, #92]	; (8007840 <pvPortMalloc+0x188>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a18      	ldr	r2, [pc, #96]	; (8007848 <pvPortMalloc+0x190>)
 80077e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <pvPortMalloc+0x184>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <pvPortMalloc+0x194>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	4a11      	ldr	r2, [pc, #68]	; (800784c <pvPortMalloc+0x194>)
 8007806:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007808:	f7ff fa40 	bl	8006c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <pvPortMalloc+0x174>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	60fb      	str	r3, [r7, #12]
}
 8007828:	bf00      	nop
 800782a:	e7fe      	b.n	800782a <pvPortMalloc+0x172>
	return pvReturn;
 800782c:	69fb      	ldr	r3, [r7, #28]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3728      	adds	r7, #40	; 0x28
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20004728 	.word	0x20004728
 800783c:	2000473c 	.word	0x2000473c
 8007840:	2000472c 	.word	0x2000472c
 8007844:	20004720 	.word	0x20004720
 8007848:	20004730 	.word	0x20004730
 800784c:	20004734 	.word	0x20004734

08007850 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d04d      	beq.n	80078fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007862:	2308      	movs	r3, #8
 8007864:	425b      	negs	r3, r3
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4413      	add	r3, r2
 800786a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <vPortFree+0xb8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4013      	ands	r3, r2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <vPortFree+0x44>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <vPortFree+0x62>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60bb      	str	r3, [r7, #8]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <vPortFree+0xb8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01e      	beq.n	80078fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d11a      	bne.n	80078fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <vPortFree+0xb8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	43db      	mvns	r3, r3
 80078d2:	401a      	ands	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078d8:	f7ff f9ca 	bl	8006c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <vPortFree+0xbc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4413      	add	r3, r2
 80078e6:	4a09      	ldr	r2, [pc, #36]	; (800790c <vPortFree+0xbc>)
 80078e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ea:	6938      	ldr	r0, [r7, #16]
 80078ec:	f000 f874 	bl	80079d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <vPortFree+0xc0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a06      	ldr	r2, [pc, #24]	; (8007910 <vPortFree+0xc0>)
 80078f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078fa:	f7ff f9c7 	bl	8006c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078fe:	bf00      	nop
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	2000473c 	.word	0x2000473c
 800790c:	2000472c 	.word	0x2000472c
 8007910:	20004738 	.word	0x20004738

08007914 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800791a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800791e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007920:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <prvHeapInit+0xac>)
 8007922:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3307      	adds	r3, #7
 8007932:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0307 	bic.w	r3, r3, #7
 800793a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	4a1f      	ldr	r2, [pc, #124]	; (80079c0 <prvHeapInit+0xac>)
 8007944:	4413      	add	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800794c:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <prvHeapInit+0xb0>)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <prvHeapInit+0xb0>)
 8007954:	2200      	movs	r2, #0
 8007956:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4413      	add	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007960:	2208      	movs	r2, #8
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0307 	bic.w	r3, r3, #7
 800796e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <prvHeapInit+0xb4>)
 8007974:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007976:	4b14      	ldr	r3, [pc, #80]	; (80079c8 <prvHeapInit+0xb4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2200      	movs	r2, #0
 800797c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800797e:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <prvHeapInit+0xb4>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvHeapInit+0xb4>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	4a0a      	ldr	r2, [pc, #40]	; (80079cc <prvHeapInit+0xb8>)
 80079a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <prvHeapInit+0xbc>)
 80079aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <prvHeapInit+0xc0>)
 80079ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80079b2:	601a      	str	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20000b20 	.word	0x20000b20
 80079c4:	20004720 	.word	0x20004720
 80079c8:	20004728 	.word	0x20004728
 80079cc:	20004730 	.word	0x20004730
 80079d0:	2000472c 	.word	0x2000472c
 80079d4:	2000473c 	.word	0x2000473c

080079d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079e0:	4b28      	ldr	r3, [pc, #160]	; (8007a84 <prvInsertBlockIntoFreeList+0xac>)
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	e002      	b.n	80079ec <prvInsertBlockIntoFreeList+0x14>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d8f7      	bhi.n	80079e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4413      	add	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d108      	bne.n	8007a1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	441a      	add	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d118      	bne.n	8007a60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b15      	ldr	r3, [pc, #84]	; (8007a88 <prvInsertBlockIntoFreeList+0xb0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d00d      	beq.n	8007a56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	441a      	add	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e008      	b.n	8007a68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a56:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <prvInsertBlockIntoFreeList+0xb0>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e003      	b.n	8007a68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d002      	beq.n	8007a76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a76:	bf00      	nop
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20004720 	.word	0x20004720
 8007a88:	20004728 	.word	0x20004728

08007a8c <memset>:
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d100      	bne.n	8007a96 <memset+0xa>
 8007a94:	4770      	bx	lr
 8007a96:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9a:	e7f9      	b.n	8007a90 <memset+0x4>

08007a9c <__errno>:
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <__errno+0x8>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000070 	.word	0x20000070

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4d0d      	ldr	r5, [pc, #52]	; (8007ae0 <__libc_init_array+0x38>)
 8007aac:	4c0d      	ldr	r4, [pc, #52]	; (8007ae4 <__libc_init_array+0x3c>)
 8007aae:	1b64      	subs	r4, r4, r5
 8007ab0:	10a4      	asrs	r4, r4, #2
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	42a6      	cmp	r6, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	4d0b      	ldr	r5, [pc, #44]	; (8007ae8 <__libc_init_array+0x40>)
 8007aba:	4c0c      	ldr	r4, [pc, #48]	; (8007aec <__libc_init_array+0x44>)
 8007abc:	f002 f9fc 	bl	8009eb8 <_init>
 8007ac0:	1b64      	subs	r4, r4, r5
 8007ac2:	10a4      	asrs	r4, r4, #2
 8007ac4:	2600      	movs	r6, #0
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad0:	4798      	blx	r3
 8007ad2:	3601      	adds	r6, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ada:	4798      	blx	r3
 8007adc:	3601      	adds	r6, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	0800a1e0 	.word	0x0800a1e0
 8007ae4:	0800a1e0 	.word	0x0800a1e0
 8007ae8:	0800a1e0 	.word	0x0800a1e0
 8007aec:	0800a1e4 	.word	0x0800a1e4

08007af0 <atan2>:
 8007af0:	f000 bbba 	b.w	8008268 <__ieee754_atan2>

08007af4 <pow>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	ed2d 8b02 	vpush	{d8}
 8007afa:	eeb0 8a40 	vmov.f32	s16, s0
 8007afe:	eef0 8a60 	vmov.f32	s17, s1
 8007b02:	ec55 4b11 	vmov	r4, r5, d1
 8007b06:	f000 fc77 	bl	80083f8 <__ieee754_pow>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	ec57 6b10 	vmov	r6, r7, d0
 8007b16:	f7f8 ffb1 	bl	8000a7c <__aeabi_dcmpun>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d13b      	bne.n	8007b96 <pow+0xa2>
 8007b1e:	ec51 0b18 	vmov	r0, r1, d8
 8007b22:	2200      	movs	r2, #0
 8007b24:	2300      	movs	r3, #0
 8007b26:	f7f8 ff77 	bl	8000a18 <__aeabi_dcmpeq>
 8007b2a:	b1b8      	cbz	r0, 8007b5c <pow+0x68>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4620      	mov	r0, r4
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7f8 ff70 	bl	8000a18 <__aeabi_dcmpeq>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d146      	bne.n	8007bca <pow+0xd6>
 8007b3c:	ec45 4b10 	vmov	d0, r4, r5
 8007b40:	f000 f922 	bl	8007d88 <finite>
 8007b44:	b338      	cbz	r0, 8007b96 <pow+0xa2>
 8007b46:	2200      	movs	r2, #0
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	f7f8 ff6d 	bl	8000a2c <__aeabi_dcmplt>
 8007b52:	b300      	cbz	r0, 8007b96 <pow+0xa2>
 8007b54:	f7ff ffa2 	bl	8007a9c <__errno>
 8007b58:	2322      	movs	r3, #34	; 0x22
 8007b5a:	e01b      	b.n	8007b94 <pow+0xa0>
 8007b5c:	ec47 6b10 	vmov	d0, r6, r7
 8007b60:	f000 f912 	bl	8007d88 <finite>
 8007b64:	b9e0      	cbnz	r0, 8007ba0 <pow+0xac>
 8007b66:	eeb0 0a48 	vmov.f32	s0, s16
 8007b6a:	eef0 0a68 	vmov.f32	s1, s17
 8007b6e:	f000 f90b 	bl	8007d88 <finite>
 8007b72:	b1a8      	cbz	r0, 8007ba0 <pow+0xac>
 8007b74:	ec45 4b10 	vmov	d0, r4, r5
 8007b78:	f000 f906 	bl	8007d88 <finite>
 8007b7c:	b180      	cbz	r0, 8007ba0 <pow+0xac>
 8007b7e:	4632      	mov	r2, r6
 8007b80:	463b      	mov	r3, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 ff79 	bl	8000a7c <__aeabi_dcmpun>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d0e2      	beq.n	8007b54 <pow+0x60>
 8007b8e:	f7ff ff85 	bl	8007a9c <__errno>
 8007b92:	2321      	movs	r3, #33	; 0x21
 8007b94:	6003      	str	r3, [r0, #0]
 8007b96:	ecbd 8b02 	vpop	{d8}
 8007b9a:	ec47 6b10 	vmov	d0, r6, r7
 8007b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 ff36 	bl	8000a18 <__aeabi_dcmpeq>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0f2      	beq.n	8007b96 <pow+0xa2>
 8007bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007bb4:	eef0 0a68 	vmov.f32	s1, s17
 8007bb8:	f000 f8e6 	bl	8007d88 <finite>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0ea      	beq.n	8007b96 <pow+0xa2>
 8007bc0:	ec45 4b10 	vmov	d0, r4, r5
 8007bc4:	f000 f8e0 	bl	8007d88 <finite>
 8007bc8:	e7c3      	b.n	8007b52 <pow+0x5e>
 8007bca:	4f01      	ldr	r7, [pc, #4]	; (8007bd0 <pow+0xdc>)
 8007bcc:	2600      	movs	r6, #0
 8007bce:	e7e2      	b.n	8007b96 <pow+0xa2>
 8007bd0:	3ff00000 	.word	0x3ff00000

08007bd4 <sqrt>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	ed2d 8b02 	vpush	{d8}
 8007bda:	ec55 4b10 	vmov	r4, r5, d0
 8007bde:	f000 f8df 	bl	8007da0 <__ieee754_sqrt>
 8007be2:	4622      	mov	r2, r4
 8007be4:	462b      	mov	r3, r5
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	eeb0 8a40 	vmov.f32	s16, s0
 8007bee:	eef0 8a60 	vmov.f32	s17, s1
 8007bf2:	f7f8 ff43 	bl	8000a7c <__aeabi_dcmpun>
 8007bf6:	b990      	cbnz	r0, 8007c1e <sqrt+0x4a>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 ff14 	bl	8000a2c <__aeabi_dcmplt>
 8007c04:	b158      	cbz	r0, 8007c1e <sqrt+0x4a>
 8007c06:	f7ff ff49 	bl	8007a9c <__errno>
 8007c0a:	2321      	movs	r3, #33	; 0x21
 8007c0c:	6003      	str	r3, [r0, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	4610      	mov	r0, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	f7f8 fdc1 	bl	800079c <__aeabi_ddiv>
 8007c1a:	ec41 0b18 	vmov	d8, r0, r1
 8007c1e:	eeb0 0a48 	vmov.f32	s0, s16
 8007c22:	eef0 0a68 	vmov.f32	s1, s17
 8007c26:	ecbd 8b02 	vpop	{d8}
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	0000      	movs	r0, r0
	...

08007c30 <cos>:
 8007c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c32:	ec53 2b10 	vmov	r2, r3, d0
 8007c36:	4826      	ldr	r0, [pc, #152]	; (8007cd0 <cos+0xa0>)
 8007c38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c3c:	4281      	cmp	r1, r0
 8007c3e:	dc06      	bgt.n	8007c4e <cos+0x1e>
 8007c40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007cc8 <cos+0x98>
 8007c44:	b005      	add	sp, #20
 8007c46:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c4a:	f000 b985 	b.w	8007f58 <__kernel_cos>
 8007c4e:	4821      	ldr	r0, [pc, #132]	; (8007cd4 <cos+0xa4>)
 8007c50:	4281      	cmp	r1, r0
 8007c52:	dd09      	ble.n	8007c68 <cos+0x38>
 8007c54:	ee10 0a10 	vmov	r0, s0
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f7f8 fabd 	bl	80001d8 <__aeabi_dsub>
 8007c5e:	ec41 0b10 	vmov	d0, r0, r1
 8007c62:	b005      	add	sp, #20
 8007c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c68:	4668      	mov	r0, sp
 8007c6a:	f001 f8f1 	bl	8008e50 <__ieee754_rem_pio2>
 8007c6e:	f000 0003 	and.w	r0, r0, #3
 8007c72:	2801      	cmp	r0, #1
 8007c74:	d00b      	beq.n	8007c8e <cos+0x5e>
 8007c76:	2802      	cmp	r0, #2
 8007c78:	d016      	beq.n	8007ca8 <cos+0x78>
 8007c7a:	b9e0      	cbnz	r0, 8007cb6 <cos+0x86>
 8007c7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c80:	ed9d 0b00 	vldr	d0, [sp]
 8007c84:	f000 f968 	bl	8007f58 <__kernel_cos>
 8007c88:	ec51 0b10 	vmov	r0, r1, d0
 8007c8c:	e7e7      	b.n	8007c5e <cos+0x2e>
 8007c8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007c92:	ed9d 0b00 	vldr	d0, [sp]
 8007c96:	f000 fa27 	bl	80080e8 <__kernel_sin>
 8007c9a:	ec53 2b10 	vmov	r2, r3, d0
 8007c9e:	ee10 0a10 	vmov	r0, s0
 8007ca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ca6:	e7da      	b.n	8007c5e <cos+0x2e>
 8007ca8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cac:	ed9d 0b00 	vldr	d0, [sp]
 8007cb0:	f000 f952 	bl	8007f58 <__kernel_cos>
 8007cb4:	e7f1      	b.n	8007c9a <cos+0x6a>
 8007cb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007cba:	ed9d 0b00 	vldr	d0, [sp]
 8007cbe:	2001      	movs	r0, #1
 8007cc0:	f000 fa12 	bl	80080e8 <__kernel_sin>
 8007cc4:	e7e0      	b.n	8007c88 <cos+0x58>
 8007cc6:	bf00      	nop
	...
 8007cd0:	3fe921fb 	.word	0x3fe921fb
 8007cd4:	7fefffff 	.word	0x7fefffff

08007cd8 <sin>:
 8007cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cda:	ec53 2b10 	vmov	r2, r3, d0
 8007cde:	4828      	ldr	r0, [pc, #160]	; (8007d80 <sin+0xa8>)
 8007ce0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ce4:	4281      	cmp	r1, r0
 8007ce6:	dc07      	bgt.n	8007cf8 <sin+0x20>
 8007ce8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007d78 <sin+0xa0>
 8007cec:	2000      	movs	r0, #0
 8007cee:	b005      	add	sp, #20
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	f000 b9f8 	b.w	80080e8 <__kernel_sin>
 8007cf8:	4822      	ldr	r0, [pc, #136]	; (8007d84 <sin+0xac>)
 8007cfa:	4281      	cmp	r1, r0
 8007cfc:	dd09      	ble.n	8007d12 <sin+0x3a>
 8007cfe:	ee10 0a10 	vmov	r0, s0
 8007d02:	4619      	mov	r1, r3
 8007d04:	f7f8 fa68 	bl	80001d8 <__aeabi_dsub>
 8007d08:	ec41 0b10 	vmov	d0, r0, r1
 8007d0c:	b005      	add	sp, #20
 8007d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d12:	4668      	mov	r0, sp
 8007d14:	f001 f89c 	bl	8008e50 <__ieee754_rem_pio2>
 8007d18:	f000 0003 	and.w	r0, r0, #3
 8007d1c:	2801      	cmp	r0, #1
 8007d1e:	d00c      	beq.n	8007d3a <sin+0x62>
 8007d20:	2802      	cmp	r0, #2
 8007d22:	d011      	beq.n	8007d48 <sin+0x70>
 8007d24:	b9f0      	cbnz	r0, 8007d64 <sin+0x8c>
 8007d26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d2a:	ed9d 0b00 	vldr	d0, [sp]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f000 f9da 	bl	80080e8 <__kernel_sin>
 8007d34:	ec51 0b10 	vmov	r0, r1, d0
 8007d38:	e7e6      	b.n	8007d08 <sin+0x30>
 8007d3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d3e:	ed9d 0b00 	vldr	d0, [sp]
 8007d42:	f000 f909 	bl	8007f58 <__kernel_cos>
 8007d46:	e7f5      	b.n	8007d34 <sin+0x5c>
 8007d48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d4c:	ed9d 0b00 	vldr	d0, [sp]
 8007d50:	2001      	movs	r0, #1
 8007d52:	f000 f9c9 	bl	80080e8 <__kernel_sin>
 8007d56:	ec53 2b10 	vmov	r2, r3, d0
 8007d5a:	ee10 0a10 	vmov	r0, s0
 8007d5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d62:	e7d1      	b.n	8007d08 <sin+0x30>
 8007d64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d68:	ed9d 0b00 	vldr	d0, [sp]
 8007d6c:	f000 f8f4 	bl	8007f58 <__kernel_cos>
 8007d70:	e7f1      	b.n	8007d56 <sin+0x7e>
 8007d72:	bf00      	nop
 8007d74:	f3af 8000 	nop.w
	...
 8007d80:	3fe921fb 	.word	0x3fe921fb
 8007d84:	7fefffff 	.word	0x7fefffff

08007d88 <finite>:
 8007d88:	b082      	sub	sp, #8
 8007d8a:	ed8d 0b00 	vstr	d0, [sp]
 8007d8e:	9801      	ldr	r0, [sp, #4]
 8007d90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d98:	0fc0      	lsrs	r0, r0, #31
 8007d9a:	b002      	add	sp, #8
 8007d9c:	4770      	bx	lr
	...

08007da0 <__ieee754_sqrt>:
 8007da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	ec55 4b10 	vmov	r4, r5, d0
 8007da8:	4e67      	ldr	r6, [pc, #412]	; (8007f48 <__ieee754_sqrt+0x1a8>)
 8007daa:	43ae      	bics	r6, r5
 8007dac:	ee10 0a10 	vmov	r0, s0
 8007db0:	ee10 2a10 	vmov	r2, s0
 8007db4:	4629      	mov	r1, r5
 8007db6:	462b      	mov	r3, r5
 8007db8:	d10d      	bne.n	8007dd6 <__ieee754_sqrt+0x36>
 8007dba:	f7f8 fbc5 	bl	8000548 <__aeabi_dmul>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fa09 	bl	80001dc <__adddf3>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	460d      	mov	r5, r1
 8007dce:	ec45 4b10 	vmov	d0, r4, r5
 8007dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	dc0b      	bgt.n	8007df2 <__ieee754_sqrt+0x52>
 8007dda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007dde:	4326      	orrs	r6, r4
 8007de0:	d0f5      	beq.n	8007dce <__ieee754_sqrt+0x2e>
 8007de2:	b135      	cbz	r5, 8007df2 <__ieee754_sqrt+0x52>
 8007de4:	f7f8 f9f8 	bl	80001d8 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	f7f8 fcd6 	bl	800079c <__aeabi_ddiv>
 8007df0:	e7eb      	b.n	8007dca <__ieee754_sqrt+0x2a>
 8007df2:	1509      	asrs	r1, r1, #20
 8007df4:	f000 808d 	beq.w	8007f12 <__ieee754_sqrt+0x172>
 8007df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dfc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e04:	07c9      	lsls	r1, r1, #31
 8007e06:	bf5c      	itt	pl
 8007e08:	005b      	lslpl	r3, r3, #1
 8007e0a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007e0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e12:	bf58      	it	pl
 8007e14:	0052      	lslpl	r2, r2, #1
 8007e16:	2500      	movs	r5, #0
 8007e18:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e1c:	1076      	asrs	r6, r6, #1
 8007e1e:	0052      	lsls	r2, r2, #1
 8007e20:	f04f 0e16 	mov.w	lr, #22
 8007e24:	46ac      	mov	ip, r5
 8007e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e2a:	eb0c 0001 	add.w	r0, ip, r1
 8007e2e:	4298      	cmp	r0, r3
 8007e30:	bfde      	ittt	le
 8007e32:	1a1b      	suble	r3, r3, r0
 8007e34:	eb00 0c01 	addle.w	ip, r0, r1
 8007e38:	186d      	addle	r5, r5, r1
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	f1be 0e01 	subs.w	lr, lr, #1
 8007e40:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e44:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e48:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e4c:	d1ed      	bne.n	8007e2a <__ieee754_sqrt+0x8a>
 8007e4e:	4674      	mov	r4, lr
 8007e50:	2720      	movs	r7, #32
 8007e52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007e56:	4563      	cmp	r3, ip
 8007e58:	eb01 000e 	add.w	r0, r1, lr
 8007e5c:	dc02      	bgt.n	8007e64 <__ieee754_sqrt+0xc4>
 8007e5e:	d113      	bne.n	8007e88 <__ieee754_sqrt+0xe8>
 8007e60:	4290      	cmp	r0, r2
 8007e62:	d811      	bhi.n	8007e88 <__ieee754_sqrt+0xe8>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	eb00 0e01 	add.w	lr, r0, r1
 8007e6a:	da57      	bge.n	8007f1c <__ieee754_sqrt+0x17c>
 8007e6c:	f1be 0f00 	cmp.w	lr, #0
 8007e70:	db54      	blt.n	8007f1c <__ieee754_sqrt+0x17c>
 8007e72:	f10c 0801 	add.w	r8, ip, #1
 8007e76:	eba3 030c 	sub.w	r3, r3, ip
 8007e7a:	4290      	cmp	r0, r2
 8007e7c:	bf88      	it	hi
 8007e7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e82:	1a12      	subs	r2, r2, r0
 8007e84:	440c      	add	r4, r1
 8007e86:	46c4      	mov	ip, r8
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	3f01      	subs	r7, #1
 8007e8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007e94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e98:	d1dd      	bne.n	8007e56 <__ieee754_sqrt+0xb6>
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	d01b      	beq.n	8007ed6 <__ieee754_sqrt+0x136>
 8007e9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007f4c <__ieee754_sqrt+0x1ac>
 8007ea2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007f50 <__ieee754_sqrt+0x1b0>
 8007ea6:	e9da 0100 	ldrd	r0, r1, [sl]
 8007eaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8007eae:	f7f8 f993 	bl	80001d8 <__aeabi_dsub>
 8007eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fdbf 	bl	8000a40 <__aeabi_dcmple>
 8007ec2:	b140      	cbz	r0, 8007ed6 <__ieee754_sqrt+0x136>
 8007ec4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007ec8:	e9da 0100 	ldrd	r0, r1, [sl]
 8007ecc:	e9db 2300 	ldrd	r2, r3, [fp]
 8007ed0:	d126      	bne.n	8007f20 <__ieee754_sqrt+0x180>
 8007ed2:	3501      	adds	r5, #1
 8007ed4:	463c      	mov	r4, r7
 8007ed6:	106a      	asrs	r2, r5, #1
 8007ed8:	0863      	lsrs	r3, r4, #1
 8007eda:	07e9      	lsls	r1, r5, #31
 8007edc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007ee0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007ee4:	bf48      	it	mi
 8007ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007eea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007eee:	461c      	mov	r4, r3
 8007ef0:	e76d      	b.n	8007dce <__ieee754_sqrt+0x2e>
 8007ef2:	0ad3      	lsrs	r3, r2, #11
 8007ef4:	3815      	subs	r0, #21
 8007ef6:	0552      	lsls	r2, r2, #21
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0fa      	beq.n	8007ef2 <__ieee754_sqrt+0x152>
 8007efc:	02dc      	lsls	r4, r3, #11
 8007efe:	d50a      	bpl.n	8007f16 <__ieee754_sqrt+0x176>
 8007f00:	f1c1 0420 	rsb	r4, r1, #32
 8007f04:	fa22 f404 	lsr.w	r4, r2, r4
 8007f08:	1e4d      	subs	r5, r1, #1
 8007f0a:	408a      	lsls	r2, r1
 8007f0c:	4323      	orrs	r3, r4
 8007f0e:	1b41      	subs	r1, r0, r5
 8007f10:	e772      	b.n	8007df8 <__ieee754_sqrt+0x58>
 8007f12:	4608      	mov	r0, r1
 8007f14:	e7f0      	b.n	8007ef8 <__ieee754_sqrt+0x158>
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	3101      	adds	r1, #1
 8007f1a:	e7ef      	b.n	8007efc <__ieee754_sqrt+0x15c>
 8007f1c:	46e0      	mov	r8, ip
 8007f1e:	e7aa      	b.n	8007e76 <__ieee754_sqrt+0xd6>
 8007f20:	f7f8 f95c 	bl	80001dc <__adddf3>
 8007f24:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 fd7c 	bl	8000a2c <__aeabi_dcmplt>
 8007f34:	b120      	cbz	r0, 8007f40 <__ieee754_sqrt+0x1a0>
 8007f36:	1ca0      	adds	r0, r4, #2
 8007f38:	bf08      	it	eq
 8007f3a:	3501      	addeq	r5, #1
 8007f3c:	3402      	adds	r4, #2
 8007f3e:	e7ca      	b.n	8007ed6 <__ieee754_sqrt+0x136>
 8007f40:	3401      	adds	r4, #1
 8007f42:	f024 0401 	bic.w	r4, r4, #1
 8007f46:	e7c6      	b.n	8007ed6 <__ieee754_sqrt+0x136>
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	20000078 	.word	0x20000078
 8007f50:	20000080 	.word	0x20000080
 8007f54:	00000000 	.word	0x00000000

08007f58 <__kernel_cos>:
 8007f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	ec57 6b10 	vmov	r6, r7, d0
 8007f60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007f64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007f68:	ed8d 1b00 	vstr	d1, [sp]
 8007f6c:	da07      	bge.n	8007f7e <__kernel_cos+0x26>
 8007f6e:	ee10 0a10 	vmov	r0, s0
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 fd98 	bl	8000aa8 <__aeabi_d2iz>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f000 8088 	beq.w	800808e <__kernel_cos+0x136>
 8007f7e:	4632      	mov	r2, r6
 8007f80:	463b      	mov	r3, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 fadf 	bl	8000548 <__aeabi_dmul>
 8007f8a:	4b51      	ldr	r3, [pc, #324]	; (80080d0 <__kernel_cos+0x178>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460d      	mov	r5, r1
 8007f92:	f7f8 fad9 	bl	8000548 <__aeabi_dmul>
 8007f96:	a340      	add	r3, pc, #256	; (adr r3, 8008098 <__kernel_cos+0x140>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	468b      	mov	fp, r1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 fad0 	bl	8000548 <__aeabi_dmul>
 8007fa8:	a33d      	add	r3, pc, #244	; (adr r3, 80080a0 <__kernel_cos+0x148>)
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f7f8 f915 	bl	80001dc <__adddf3>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f7f8 fac7 	bl	8000548 <__aeabi_dmul>
 8007fba:	a33b      	add	r3, pc, #236	; (adr r3, 80080a8 <__kernel_cos+0x150>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 f90a 	bl	80001d8 <__aeabi_dsub>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	f7f8 fabe 	bl	8000548 <__aeabi_dmul>
 8007fcc:	a338      	add	r3, pc, #224	; (adr r3, 80080b0 <__kernel_cos+0x158>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 f903 	bl	80001dc <__adddf3>
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	462b      	mov	r3, r5
 8007fda:	f7f8 fab5 	bl	8000548 <__aeabi_dmul>
 8007fde:	a336      	add	r3, pc, #216	; (adr r3, 80080b8 <__kernel_cos+0x160>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f7f8 f8f8 	bl	80001d8 <__aeabi_dsub>
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	f7f8 faac 	bl	8000548 <__aeabi_dmul>
 8007ff0:	a333      	add	r3, pc, #204	; (adr r3, 80080c0 <__kernel_cos+0x168>)
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f7f8 f8f1 	bl	80001dc <__adddf3>
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	f7f8 faa3 	bl	8000548 <__aeabi_dmul>
 8008002:	4622      	mov	r2, r4
 8008004:	462b      	mov	r3, r5
 8008006:	f7f8 fa9f 	bl	8000548 <__aeabi_dmul>
 800800a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fa97 	bl	8000548 <__aeabi_dmul>
 800801a:	460b      	mov	r3, r1
 800801c:	4602      	mov	r2, r0
 800801e:	4629      	mov	r1, r5
 8008020:	4620      	mov	r0, r4
 8008022:	f7f8 f8d9 	bl	80001d8 <__aeabi_dsub>
 8008026:	4b2b      	ldr	r3, [pc, #172]	; (80080d4 <__kernel_cos+0x17c>)
 8008028:	4598      	cmp	r8, r3
 800802a:	4606      	mov	r6, r0
 800802c:	460f      	mov	r7, r1
 800802e:	dc10      	bgt.n	8008052 <__kernel_cos+0xfa>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4650      	mov	r0, sl
 8008036:	4659      	mov	r1, fp
 8008038:	f7f8 f8ce 	bl	80001d8 <__aeabi_dsub>
 800803c:	460b      	mov	r3, r1
 800803e:	4926      	ldr	r1, [pc, #152]	; (80080d8 <__kernel_cos+0x180>)
 8008040:	4602      	mov	r2, r0
 8008042:	2000      	movs	r0, #0
 8008044:	f7f8 f8c8 	bl	80001d8 <__aeabi_dsub>
 8008048:	ec41 0b10 	vmov	d0, r0, r1
 800804c:	b003      	add	sp, #12
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	4b22      	ldr	r3, [pc, #136]	; (80080dc <__kernel_cos+0x184>)
 8008054:	4920      	ldr	r1, [pc, #128]	; (80080d8 <__kernel_cos+0x180>)
 8008056:	4598      	cmp	r8, r3
 8008058:	bfcc      	ite	gt
 800805a:	4d21      	ldrgt	r5, [pc, #132]	; (80080e0 <__kernel_cos+0x188>)
 800805c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008060:	2400      	movs	r4, #0
 8008062:	4622      	mov	r2, r4
 8008064:	462b      	mov	r3, r5
 8008066:	2000      	movs	r0, #0
 8008068:	f7f8 f8b6 	bl	80001d8 <__aeabi_dsub>
 800806c:	4622      	mov	r2, r4
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	462b      	mov	r3, r5
 8008074:	4650      	mov	r0, sl
 8008076:	4659      	mov	r1, fp
 8008078:	f7f8 f8ae 	bl	80001d8 <__aeabi_dsub>
 800807c:	4632      	mov	r2, r6
 800807e:	463b      	mov	r3, r7
 8008080:	f7f8 f8aa 	bl	80001d8 <__aeabi_dsub>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	e7da      	b.n	8008044 <__kernel_cos+0xec>
 800808e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80080c8 <__kernel_cos+0x170>
 8008092:	e7db      	b.n	800804c <__kernel_cos+0xf4>
 8008094:	f3af 8000 	nop.w
 8008098:	be8838d4 	.word	0xbe8838d4
 800809c:	bda8fae9 	.word	0xbda8fae9
 80080a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80080a4:	3e21ee9e 	.word	0x3e21ee9e
 80080a8:	809c52ad 	.word	0x809c52ad
 80080ac:	3e927e4f 	.word	0x3e927e4f
 80080b0:	19cb1590 	.word	0x19cb1590
 80080b4:	3efa01a0 	.word	0x3efa01a0
 80080b8:	16c15177 	.word	0x16c15177
 80080bc:	3f56c16c 	.word	0x3f56c16c
 80080c0:	5555554c 	.word	0x5555554c
 80080c4:	3fa55555 	.word	0x3fa55555
 80080c8:	00000000 	.word	0x00000000
 80080cc:	3ff00000 	.word	0x3ff00000
 80080d0:	3fe00000 	.word	0x3fe00000
 80080d4:	3fd33332 	.word	0x3fd33332
 80080d8:	3ff00000 	.word	0x3ff00000
 80080dc:	3fe90000 	.word	0x3fe90000
 80080e0:	3fd20000 	.word	0x3fd20000
 80080e4:	00000000 	.word	0x00000000

080080e8 <__kernel_sin>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	ed2d 8b04 	vpush	{d8-d9}
 80080f0:	eeb0 8a41 	vmov.f32	s16, s2
 80080f4:	eef0 8a61 	vmov.f32	s17, s3
 80080f8:	ec55 4b10 	vmov	r4, r5, d0
 80080fc:	b083      	sub	sp, #12
 80080fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008102:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008106:	9001      	str	r0, [sp, #4]
 8008108:	da06      	bge.n	8008118 <__kernel_sin+0x30>
 800810a:	ee10 0a10 	vmov	r0, s0
 800810e:	4629      	mov	r1, r5
 8008110:	f7f8 fcca 	bl	8000aa8 <__aeabi_d2iz>
 8008114:	2800      	cmp	r0, #0
 8008116:	d051      	beq.n	80081bc <__kernel_sin+0xd4>
 8008118:	4622      	mov	r2, r4
 800811a:	462b      	mov	r3, r5
 800811c:	4620      	mov	r0, r4
 800811e:	4629      	mov	r1, r5
 8008120:	f7f8 fa12 	bl	8000548 <__aeabi_dmul>
 8008124:	4682      	mov	sl, r0
 8008126:	468b      	mov	fp, r1
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fa0a 	bl	8000548 <__aeabi_dmul>
 8008134:	a341      	add	r3, pc, #260	; (adr r3, 800823c <__kernel_sin+0x154>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	4680      	mov	r8, r0
 800813c:	4689      	mov	r9, r1
 800813e:	4650      	mov	r0, sl
 8008140:	4659      	mov	r1, fp
 8008142:	f7f8 fa01 	bl	8000548 <__aeabi_dmul>
 8008146:	a33f      	add	r3, pc, #252	; (adr r3, 8008244 <__kernel_sin+0x15c>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f7f8 f844 	bl	80001d8 <__aeabi_dsub>
 8008150:	4652      	mov	r2, sl
 8008152:	465b      	mov	r3, fp
 8008154:	f7f8 f9f8 	bl	8000548 <__aeabi_dmul>
 8008158:	a33c      	add	r3, pc, #240	; (adr r3, 800824c <__kernel_sin+0x164>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 f83d 	bl	80001dc <__adddf3>
 8008162:	4652      	mov	r2, sl
 8008164:	465b      	mov	r3, fp
 8008166:	f7f8 f9ef 	bl	8000548 <__aeabi_dmul>
 800816a:	a33a      	add	r3, pc, #232	; (adr r3, 8008254 <__kernel_sin+0x16c>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f832 	bl	80001d8 <__aeabi_dsub>
 8008174:	4652      	mov	r2, sl
 8008176:	465b      	mov	r3, fp
 8008178:	f7f8 f9e6 	bl	8000548 <__aeabi_dmul>
 800817c:	a337      	add	r3, pc, #220	; (adr r3, 800825c <__kernel_sin+0x174>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 f82b 	bl	80001dc <__adddf3>
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	4606      	mov	r6, r0
 800818a:	460f      	mov	r7, r1
 800818c:	b9eb      	cbnz	r3, 80081ca <__kernel_sin+0xe2>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4650      	mov	r0, sl
 8008194:	4659      	mov	r1, fp
 8008196:	f7f8 f9d7 	bl	8000548 <__aeabi_dmul>
 800819a:	a325      	add	r3, pc, #148	; (adr r3, 8008230 <__kernel_sin+0x148>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 f81a 	bl	80001d8 <__aeabi_dsub>
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	f7f8 f9ce 	bl	8000548 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f812 	bl	80001dc <__adddf3>
 80081b8:	4604      	mov	r4, r0
 80081ba:	460d      	mov	r5, r1
 80081bc:	ec45 4b10 	vmov	d0, r4, r5
 80081c0:	b003      	add	sp, #12
 80081c2:	ecbd 8b04 	vpop	{d8-d9}
 80081c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ca:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <__kernel_sin+0x150>)
 80081cc:	ec51 0b18 	vmov	r0, r1, d8
 80081d0:	2200      	movs	r2, #0
 80081d2:	f7f8 f9b9 	bl	8000548 <__aeabi_dmul>
 80081d6:	4632      	mov	r2, r6
 80081d8:	ec41 0b19 	vmov	d9, r0, r1
 80081dc:	463b      	mov	r3, r7
 80081de:	4640      	mov	r0, r8
 80081e0:	4649      	mov	r1, r9
 80081e2:	f7f8 f9b1 	bl	8000548 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	ec51 0b19 	vmov	r0, r1, d9
 80081ee:	f7f7 fff3 	bl	80001d8 <__aeabi_dsub>
 80081f2:	4652      	mov	r2, sl
 80081f4:	465b      	mov	r3, fp
 80081f6:	f7f8 f9a7 	bl	8000548 <__aeabi_dmul>
 80081fa:	ec53 2b18 	vmov	r2, r3, d8
 80081fe:	f7f7 ffeb 	bl	80001d8 <__aeabi_dsub>
 8008202:	a30b      	add	r3, pc, #44	; (adr r3, 8008230 <__kernel_sin+0x148>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	4606      	mov	r6, r0
 800820a:	460f      	mov	r7, r1
 800820c:	4640      	mov	r0, r8
 800820e:	4649      	mov	r1, r9
 8008210:	f7f8 f99a 	bl	8000548 <__aeabi_dmul>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f7 ffde 	bl	80001dc <__adddf3>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f7 ffd6 	bl	80001d8 <__aeabi_dsub>
 800822c:	e7c4      	b.n	80081b8 <__kernel_sin+0xd0>
 800822e:	bf00      	nop
 8008230:	55555549 	.word	0x55555549
 8008234:	3fc55555 	.word	0x3fc55555
 8008238:	3fe00000 	.word	0x3fe00000
 800823c:	5acfd57c 	.word	0x5acfd57c
 8008240:	3de5d93a 	.word	0x3de5d93a
 8008244:	8a2b9ceb 	.word	0x8a2b9ceb
 8008248:	3e5ae5e6 	.word	0x3e5ae5e6
 800824c:	57b1fe7d 	.word	0x57b1fe7d
 8008250:	3ec71de3 	.word	0x3ec71de3
 8008254:	19c161d5 	.word	0x19c161d5
 8008258:	3f2a01a0 	.word	0x3f2a01a0
 800825c:	1110f8a6 	.word	0x1110f8a6
 8008260:	3f811111 	.word	0x3f811111
 8008264:	00000000 	.word	0x00000000

08008268 <__ieee754_atan2>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	ec57 6b11 	vmov	r6, r7, d1
 8008270:	4273      	negs	r3, r6
 8008272:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80083f0 <__ieee754_atan2+0x188>
 8008276:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800827a:	4333      	orrs	r3, r6
 800827c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008280:	4543      	cmp	r3, r8
 8008282:	ec51 0b10 	vmov	r0, r1, d0
 8008286:	ee11 5a10 	vmov	r5, s2
 800828a:	d80a      	bhi.n	80082a2 <__ieee754_atan2+0x3a>
 800828c:	4244      	negs	r4, r0
 800828e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008292:	4304      	orrs	r4, r0
 8008294:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008298:	4544      	cmp	r4, r8
 800829a:	ee10 9a10 	vmov	r9, s0
 800829e:	468e      	mov	lr, r1
 80082a0:	d907      	bls.n	80082b2 <__ieee754_atan2+0x4a>
 80082a2:	4632      	mov	r2, r6
 80082a4:	463b      	mov	r3, r7
 80082a6:	f7f7 ff99 	bl	80001dc <__adddf3>
 80082aa:	ec41 0b10 	vmov	d0, r0, r1
 80082ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80082b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80082ba:	4334      	orrs	r4, r6
 80082bc:	d103      	bne.n	80082c6 <__ieee754_atan2+0x5e>
 80082be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c2:	f000 bfcd 	b.w	8009260 <atan>
 80082c6:	17bc      	asrs	r4, r7, #30
 80082c8:	f004 0402 	and.w	r4, r4, #2
 80082cc:	ea53 0909 	orrs.w	r9, r3, r9
 80082d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80082d4:	d107      	bne.n	80082e6 <__ieee754_atan2+0x7e>
 80082d6:	2c02      	cmp	r4, #2
 80082d8:	d05f      	beq.n	800839a <__ieee754_atan2+0x132>
 80082da:	2c03      	cmp	r4, #3
 80082dc:	d1e5      	bne.n	80082aa <__ieee754_atan2+0x42>
 80082de:	a140      	add	r1, pc, #256	; (adr r1, 80083e0 <__ieee754_atan2+0x178>)
 80082e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e4:	e7e1      	b.n	80082aa <__ieee754_atan2+0x42>
 80082e6:	4315      	orrs	r5, r2
 80082e8:	d106      	bne.n	80082f8 <__ieee754_atan2+0x90>
 80082ea:	f1be 0f00 	cmp.w	lr, #0
 80082ee:	da5f      	bge.n	80083b0 <__ieee754_atan2+0x148>
 80082f0:	a13d      	add	r1, pc, #244	; (adr r1, 80083e8 <__ieee754_atan2+0x180>)
 80082f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082f6:	e7d8      	b.n	80082aa <__ieee754_atan2+0x42>
 80082f8:	4542      	cmp	r2, r8
 80082fa:	d10f      	bne.n	800831c <__ieee754_atan2+0xb4>
 80082fc:	4293      	cmp	r3, r2
 80082fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008302:	d107      	bne.n	8008314 <__ieee754_atan2+0xac>
 8008304:	2c02      	cmp	r4, #2
 8008306:	d84c      	bhi.n	80083a2 <__ieee754_atan2+0x13a>
 8008308:	4b33      	ldr	r3, [pc, #204]	; (80083d8 <__ieee754_atan2+0x170>)
 800830a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800830e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008312:	e7ca      	b.n	80082aa <__ieee754_atan2+0x42>
 8008314:	2c02      	cmp	r4, #2
 8008316:	d848      	bhi.n	80083aa <__ieee754_atan2+0x142>
 8008318:	4b30      	ldr	r3, [pc, #192]	; (80083dc <__ieee754_atan2+0x174>)
 800831a:	e7f6      	b.n	800830a <__ieee754_atan2+0xa2>
 800831c:	4543      	cmp	r3, r8
 800831e:	d0e4      	beq.n	80082ea <__ieee754_atan2+0x82>
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008326:	ea4f 5223 	mov.w	r2, r3, asr #20
 800832a:	da1e      	bge.n	800836a <__ieee754_atan2+0x102>
 800832c:	2f00      	cmp	r7, #0
 800832e:	da01      	bge.n	8008334 <__ieee754_atan2+0xcc>
 8008330:	323c      	adds	r2, #60	; 0x3c
 8008332:	db1e      	blt.n	8008372 <__ieee754_atan2+0x10a>
 8008334:	4632      	mov	r2, r6
 8008336:	463b      	mov	r3, r7
 8008338:	f7f8 fa30 	bl	800079c <__aeabi_ddiv>
 800833c:	ec41 0b10 	vmov	d0, r0, r1
 8008340:	f001 f92e 	bl	80095a0 <fabs>
 8008344:	f000 ff8c 	bl	8009260 <atan>
 8008348:	ec51 0b10 	vmov	r0, r1, d0
 800834c:	2c01      	cmp	r4, #1
 800834e:	d013      	beq.n	8008378 <__ieee754_atan2+0x110>
 8008350:	2c02      	cmp	r4, #2
 8008352:	d015      	beq.n	8008380 <__ieee754_atan2+0x118>
 8008354:	2c00      	cmp	r4, #0
 8008356:	d0a8      	beq.n	80082aa <__ieee754_atan2+0x42>
 8008358:	a317      	add	r3, pc, #92	; (adr r3, 80083b8 <__ieee754_atan2+0x150>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f7f7 ff3b 	bl	80001d8 <__aeabi_dsub>
 8008362:	a317      	add	r3, pc, #92	; (adr r3, 80083c0 <__ieee754_atan2+0x158>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	e014      	b.n	8008394 <__ieee754_atan2+0x12c>
 800836a:	a117      	add	r1, pc, #92	; (adr r1, 80083c8 <__ieee754_atan2+0x160>)
 800836c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008370:	e7ec      	b.n	800834c <__ieee754_atan2+0xe4>
 8008372:	2000      	movs	r0, #0
 8008374:	2100      	movs	r1, #0
 8008376:	e7e9      	b.n	800834c <__ieee754_atan2+0xe4>
 8008378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800837c:	4619      	mov	r1, r3
 800837e:	e794      	b.n	80082aa <__ieee754_atan2+0x42>
 8008380:	a30d      	add	r3, pc, #52	; (adr r3, 80083b8 <__ieee754_atan2+0x150>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f7 ff27 	bl	80001d8 <__aeabi_dsub>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	a10c      	add	r1, pc, #48	; (adr r1, 80083c0 <__ieee754_atan2+0x158>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	f7f7 ff20 	bl	80001d8 <__aeabi_dsub>
 8008398:	e787      	b.n	80082aa <__ieee754_atan2+0x42>
 800839a:	a109      	add	r1, pc, #36	; (adr r1, 80083c0 <__ieee754_atan2+0x158>)
 800839c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a0:	e783      	b.n	80082aa <__ieee754_atan2+0x42>
 80083a2:	a10b      	add	r1, pc, #44	; (adr r1, 80083d0 <__ieee754_atan2+0x168>)
 80083a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a8:	e77f      	b.n	80082aa <__ieee754_atan2+0x42>
 80083aa:	2000      	movs	r0, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	e77c      	b.n	80082aa <__ieee754_atan2+0x42>
 80083b0:	a105      	add	r1, pc, #20	; (adr r1, 80083c8 <__ieee754_atan2+0x160>)
 80083b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b6:	e778      	b.n	80082aa <__ieee754_atan2+0x42>
 80083b8:	33145c07 	.word	0x33145c07
 80083bc:	3ca1a626 	.word	0x3ca1a626
 80083c0:	54442d18 	.word	0x54442d18
 80083c4:	400921fb 	.word	0x400921fb
 80083c8:	54442d18 	.word	0x54442d18
 80083cc:	3ff921fb 	.word	0x3ff921fb
 80083d0:	54442d18 	.word	0x54442d18
 80083d4:	3fe921fb 	.word	0x3fe921fb
 80083d8:	08009f60 	.word	0x08009f60
 80083dc:	08009f78 	.word	0x08009f78
 80083e0:	54442d18 	.word	0x54442d18
 80083e4:	c00921fb 	.word	0xc00921fb
 80083e8:	54442d18 	.word	0x54442d18
 80083ec:	bff921fb 	.word	0xbff921fb
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	00000000 	.word	0x00000000

080083f8 <__ieee754_pow>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ed2d 8b06 	vpush	{d8-d10}
 8008400:	b089      	sub	sp, #36	; 0x24
 8008402:	ed8d 1b00 	vstr	d1, [sp]
 8008406:	e9dd 2900 	ldrd	r2, r9, [sp]
 800840a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800840e:	ea58 0102 	orrs.w	r1, r8, r2
 8008412:	ec57 6b10 	vmov	r6, r7, d0
 8008416:	d115      	bne.n	8008444 <__ieee754_pow+0x4c>
 8008418:	19b3      	adds	r3, r6, r6
 800841a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800841e:	4152      	adcs	r2, r2
 8008420:	4299      	cmp	r1, r3
 8008422:	4b89      	ldr	r3, [pc, #548]	; (8008648 <__ieee754_pow+0x250>)
 8008424:	4193      	sbcs	r3, r2
 8008426:	f080 84d1 	bcs.w	8008dcc <__ieee754_pow+0x9d4>
 800842a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 fed3 	bl	80001dc <__adddf3>
 8008436:	ec41 0b10 	vmov	d0, r0, r1
 800843a:	b009      	add	sp, #36	; 0x24
 800843c:	ecbd 8b06 	vpop	{d8-d10}
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b81      	ldr	r3, [pc, #516]	; (800864c <__ieee754_pow+0x254>)
 8008446:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800844a:	429c      	cmp	r4, r3
 800844c:	ee10 aa10 	vmov	sl, s0
 8008450:	463d      	mov	r5, r7
 8008452:	dc06      	bgt.n	8008462 <__ieee754_pow+0x6a>
 8008454:	d101      	bne.n	800845a <__ieee754_pow+0x62>
 8008456:	2e00      	cmp	r6, #0
 8008458:	d1e7      	bne.n	800842a <__ieee754_pow+0x32>
 800845a:	4598      	cmp	r8, r3
 800845c:	dc01      	bgt.n	8008462 <__ieee754_pow+0x6a>
 800845e:	d10f      	bne.n	8008480 <__ieee754_pow+0x88>
 8008460:	b172      	cbz	r2, 8008480 <__ieee754_pow+0x88>
 8008462:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008466:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800846a:	ea55 050a 	orrs.w	r5, r5, sl
 800846e:	d1dc      	bne.n	800842a <__ieee754_pow+0x32>
 8008470:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008474:	18db      	adds	r3, r3, r3
 8008476:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800847a:	4152      	adcs	r2, r2
 800847c:	429d      	cmp	r5, r3
 800847e:	e7d0      	b.n	8008422 <__ieee754_pow+0x2a>
 8008480:	2d00      	cmp	r5, #0
 8008482:	da3b      	bge.n	80084fc <__ieee754_pow+0x104>
 8008484:	4b72      	ldr	r3, [pc, #456]	; (8008650 <__ieee754_pow+0x258>)
 8008486:	4598      	cmp	r8, r3
 8008488:	dc51      	bgt.n	800852e <__ieee754_pow+0x136>
 800848a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800848e:	4598      	cmp	r8, r3
 8008490:	f340 84ab 	ble.w	8008dea <__ieee754_pow+0x9f2>
 8008494:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800849c:	2b14      	cmp	r3, #20
 800849e:	dd0f      	ble.n	80084c0 <__ieee754_pow+0xc8>
 80084a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084a4:	fa22 f103 	lsr.w	r1, r2, r3
 80084a8:	fa01 f303 	lsl.w	r3, r1, r3
 80084ac:	4293      	cmp	r3, r2
 80084ae:	f040 849c 	bne.w	8008dea <__ieee754_pow+0x9f2>
 80084b2:	f001 0101 	and.w	r1, r1, #1
 80084b6:	f1c1 0302 	rsb	r3, r1, #2
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	b182      	cbz	r2, 80084e0 <__ieee754_pow+0xe8>
 80084be:	e05f      	b.n	8008580 <__ieee754_pow+0x188>
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	d15b      	bne.n	800857c <__ieee754_pow+0x184>
 80084c4:	f1c3 0314 	rsb	r3, r3, #20
 80084c8:	fa48 f103 	asr.w	r1, r8, r3
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	4543      	cmp	r3, r8
 80084d2:	f040 8487 	bne.w	8008de4 <__ieee754_pow+0x9ec>
 80084d6:	f001 0101 	and.w	r1, r1, #1
 80084da:	f1c1 0302 	rsb	r3, r1, #2
 80084de:	9304      	str	r3, [sp, #16]
 80084e0:	4b5c      	ldr	r3, [pc, #368]	; (8008654 <__ieee754_pow+0x25c>)
 80084e2:	4598      	cmp	r8, r3
 80084e4:	d132      	bne.n	800854c <__ieee754_pow+0x154>
 80084e6:	f1b9 0f00 	cmp.w	r9, #0
 80084ea:	f280 8477 	bge.w	8008ddc <__ieee754_pow+0x9e4>
 80084ee:	4959      	ldr	r1, [pc, #356]	; (8008654 <__ieee754_pow+0x25c>)
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7f8 f951 	bl	800079c <__aeabi_ddiv>
 80084fa:	e79c      	b.n	8008436 <__ieee754_pow+0x3e>
 80084fc:	2300      	movs	r3, #0
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	2a00      	cmp	r2, #0
 8008502:	d13d      	bne.n	8008580 <__ieee754_pow+0x188>
 8008504:	4b51      	ldr	r3, [pc, #324]	; (800864c <__ieee754_pow+0x254>)
 8008506:	4598      	cmp	r8, r3
 8008508:	d1ea      	bne.n	80084e0 <__ieee754_pow+0xe8>
 800850a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800850e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008512:	ea53 030a 	orrs.w	r3, r3, sl
 8008516:	f000 8459 	beq.w	8008dcc <__ieee754_pow+0x9d4>
 800851a:	4b4f      	ldr	r3, [pc, #316]	; (8008658 <__ieee754_pow+0x260>)
 800851c:	429c      	cmp	r4, r3
 800851e:	dd08      	ble.n	8008532 <__ieee754_pow+0x13a>
 8008520:	f1b9 0f00 	cmp.w	r9, #0
 8008524:	f2c0 8456 	blt.w	8008dd4 <__ieee754_pow+0x9dc>
 8008528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852c:	e783      	b.n	8008436 <__ieee754_pow+0x3e>
 800852e:	2302      	movs	r3, #2
 8008530:	e7e5      	b.n	80084fe <__ieee754_pow+0x106>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	f04f 0000 	mov.w	r0, #0
 800853a:	f04f 0100 	mov.w	r1, #0
 800853e:	f6bf af7a 	bge.w	8008436 <__ieee754_pow+0x3e>
 8008542:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008546:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800854a:	e774      	b.n	8008436 <__ieee754_pow+0x3e>
 800854c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008550:	d106      	bne.n	8008560 <__ieee754_pow+0x168>
 8008552:	4632      	mov	r2, r6
 8008554:	463b      	mov	r3, r7
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f7 fff5 	bl	8000548 <__aeabi_dmul>
 800855e:	e76a      	b.n	8008436 <__ieee754_pow+0x3e>
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <__ieee754_pow+0x264>)
 8008562:	4599      	cmp	r9, r3
 8008564:	d10c      	bne.n	8008580 <__ieee754_pow+0x188>
 8008566:	2d00      	cmp	r5, #0
 8008568:	db0a      	blt.n	8008580 <__ieee754_pow+0x188>
 800856a:	ec47 6b10 	vmov	d0, r6, r7
 800856e:	b009      	add	sp, #36	; 0x24
 8008570:	ecbd 8b06 	vpop	{d8-d10}
 8008574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	f7ff bc12 	b.w	8007da0 <__ieee754_sqrt>
 800857c:	2300      	movs	r3, #0
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	ec47 6b10 	vmov	d0, r6, r7
 8008584:	f001 f80c 	bl	80095a0 <fabs>
 8008588:	ec51 0b10 	vmov	r0, r1, d0
 800858c:	f1ba 0f00 	cmp.w	sl, #0
 8008590:	d129      	bne.n	80085e6 <__ieee754_pow+0x1ee>
 8008592:	b124      	cbz	r4, 800859e <__ieee754_pow+0x1a6>
 8008594:	4b2f      	ldr	r3, [pc, #188]	; (8008654 <__ieee754_pow+0x25c>)
 8008596:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800859a:	429a      	cmp	r2, r3
 800859c:	d123      	bne.n	80085e6 <__ieee754_pow+0x1ee>
 800859e:	f1b9 0f00 	cmp.w	r9, #0
 80085a2:	da05      	bge.n	80085b0 <__ieee754_pow+0x1b8>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	2000      	movs	r0, #0
 80085aa:	492a      	ldr	r1, [pc, #168]	; (8008654 <__ieee754_pow+0x25c>)
 80085ac:	f7f8 f8f6 	bl	800079c <__aeabi_ddiv>
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	f6bf af40 	bge.w	8008436 <__ieee754_pow+0x3e>
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80085bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085c0:	431c      	orrs	r4, r3
 80085c2:	d108      	bne.n	80085d6 <__ieee754_pow+0x1de>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4610      	mov	r0, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	f7f7 fe04 	bl	80001d8 <__aeabi_dsub>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e78f      	b.n	80084f6 <__ieee754_pow+0xfe>
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f47f af2c 	bne.w	8008436 <__ieee754_pow+0x3e>
 80085de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085e2:	4619      	mov	r1, r3
 80085e4:	e727      	b.n	8008436 <__ieee754_pow+0x3e>
 80085e6:	0feb      	lsrs	r3, r5, #31
 80085e8:	3b01      	subs	r3, #1
 80085ea:	9306      	str	r3, [sp, #24]
 80085ec:	9a06      	ldr	r2, [sp, #24]
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d102      	bne.n	80085fa <__ieee754_pow+0x202>
 80085f4:	4632      	mov	r2, r6
 80085f6:	463b      	mov	r3, r7
 80085f8:	e7e6      	b.n	80085c8 <__ieee754_pow+0x1d0>
 80085fa:	4b19      	ldr	r3, [pc, #100]	; (8008660 <__ieee754_pow+0x268>)
 80085fc:	4598      	cmp	r8, r3
 80085fe:	f340 80fb 	ble.w	80087f8 <__ieee754_pow+0x400>
 8008602:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008606:	4598      	cmp	r8, r3
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <__ieee754_pow+0x260>)
 800860a:	dd0c      	ble.n	8008626 <__ieee754_pow+0x22e>
 800860c:	429c      	cmp	r4, r3
 800860e:	dc0f      	bgt.n	8008630 <__ieee754_pow+0x238>
 8008610:	f1b9 0f00 	cmp.w	r9, #0
 8008614:	da0f      	bge.n	8008636 <__ieee754_pow+0x23e>
 8008616:	2000      	movs	r0, #0
 8008618:	b009      	add	sp, #36	; 0x24
 800861a:	ecbd 8b06 	vpop	{d8-d10}
 800861e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008622:	f001 b86e 	b.w	8009702 <__math_oflow>
 8008626:	429c      	cmp	r4, r3
 8008628:	dbf2      	blt.n	8008610 <__ieee754_pow+0x218>
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <__ieee754_pow+0x25c>)
 800862c:	429c      	cmp	r4, r3
 800862e:	dd19      	ble.n	8008664 <__ieee754_pow+0x26c>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dcef      	bgt.n	8008616 <__ieee754_pow+0x21e>
 8008636:	2000      	movs	r0, #0
 8008638:	b009      	add	sp, #36	; 0x24
 800863a:	ecbd 8b06 	vpop	{d8-d10}
 800863e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008642:	f001 b855 	b.w	80096f0 <__math_uflow>
 8008646:	bf00      	nop
 8008648:	fff00000 	.word	0xfff00000
 800864c:	7ff00000 	.word	0x7ff00000
 8008650:	433fffff 	.word	0x433fffff
 8008654:	3ff00000 	.word	0x3ff00000
 8008658:	3fefffff 	.word	0x3fefffff
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	41e00000 	.word	0x41e00000
 8008664:	4b60      	ldr	r3, [pc, #384]	; (80087e8 <__ieee754_pow+0x3f0>)
 8008666:	2200      	movs	r2, #0
 8008668:	f7f7 fdb6 	bl	80001d8 <__aeabi_dsub>
 800866c:	a354      	add	r3, pc, #336	; (adr r3, 80087c0 <__ieee754_pow+0x3c8>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	4604      	mov	r4, r0
 8008674:	460d      	mov	r5, r1
 8008676:	f7f7 ff67 	bl	8000548 <__aeabi_dmul>
 800867a:	a353      	add	r3, pc, #332	; (adr r3, 80087c8 <__ieee754_pow+0x3d0>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	4606      	mov	r6, r0
 8008682:	460f      	mov	r7, r1
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f7 ff5e 	bl	8000548 <__aeabi_dmul>
 800868c:	4b57      	ldr	r3, [pc, #348]	; (80087ec <__ieee754_pow+0x3f4>)
 800868e:	4682      	mov	sl, r0
 8008690:	468b      	mov	fp, r1
 8008692:	2200      	movs	r2, #0
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f7f7 ff56 	bl	8000548 <__aeabi_dmul>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	a14b      	add	r1, pc, #300	; (adr r1, 80087d0 <__ieee754_pow+0x3d8>)
 80086a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a6:	f7f7 fd97 	bl	80001d8 <__aeabi_dsub>
 80086aa:	4622      	mov	r2, r4
 80086ac:	462b      	mov	r3, r5
 80086ae:	f7f7 ff4b 	bl	8000548 <__aeabi_dmul>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	2000      	movs	r0, #0
 80086b8:	494d      	ldr	r1, [pc, #308]	; (80087f0 <__ieee754_pow+0x3f8>)
 80086ba:	f7f7 fd8d 	bl	80001d8 <__aeabi_dsub>
 80086be:	4622      	mov	r2, r4
 80086c0:	4680      	mov	r8, r0
 80086c2:	4689      	mov	r9, r1
 80086c4:	462b      	mov	r3, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f7 ff3d 	bl	8000548 <__aeabi_dmul>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	f7f7 ff37 	bl	8000548 <__aeabi_dmul>
 80086da:	a33f      	add	r3, pc, #252	; (adr r3, 80087d8 <__ieee754_pow+0x3e0>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff32 	bl	8000548 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f7 fd74 	bl	80001d8 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f7 fd6e 	bl	80001dc <__adddf3>
 8008700:	2000      	movs	r0, #0
 8008702:	4632      	mov	r2, r6
 8008704:	463b      	mov	r3, r7
 8008706:	4604      	mov	r4, r0
 8008708:	460d      	mov	r5, r1
 800870a:	f7f7 fd65 	bl	80001d8 <__aeabi_dsub>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fd5f 	bl	80001d8 <__aeabi_dsub>
 800871a:	9b04      	ldr	r3, [sp, #16]
 800871c:	9a06      	ldr	r2, [sp, #24]
 800871e:	3b01      	subs	r3, #1
 8008720:	4313      	orrs	r3, r2
 8008722:	4682      	mov	sl, r0
 8008724:	468b      	mov	fp, r1
 8008726:	f040 81e7 	bne.w	8008af8 <__ieee754_pow+0x700>
 800872a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80087e0 <__ieee754_pow+0x3e8>
 800872e:	eeb0 8a47 	vmov.f32	s16, s14
 8008732:	eef0 8a67 	vmov.f32	s17, s15
 8008736:	e9dd 6700 	ldrd	r6, r7, [sp]
 800873a:	2600      	movs	r6, #0
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008744:	f7f7 fd48 	bl	80001d8 <__aeabi_dsub>
 8008748:	4622      	mov	r2, r4
 800874a:	462b      	mov	r3, r5
 800874c:	f7f7 fefc 	bl	8000548 <__aeabi_dmul>
 8008750:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	4650      	mov	r0, sl
 800875a:	4659      	mov	r1, fp
 800875c:	f7f7 fef4 	bl	8000548 <__aeabi_dmul>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f7 fd38 	bl	80001dc <__adddf3>
 800876c:	4632      	mov	r2, r6
 800876e:	463b      	mov	r3, r7
 8008770:	4680      	mov	r8, r0
 8008772:	4689      	mov	r9, r1
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f7 fee6 	bl	8000548 <__aeabi_dmul>
 800877c:	460b      	mov	r3, r1
 800877e:	4604      	mov	r4, r0
 8008780:	460d      	mov	r5, r1
 8008782:	4602      	mov	r2, r0
 8008784:	4649      	mov	r1, r9
 8008786:	4640      	mov	r0, r8
 8008788:	f7f7 fd28 	bl	80001dc <__adddf3>
 800878c:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <__ieee754_pow+0x3fc>)
 800878e:	4299      	cmp	r1, r3
 8008790:	ec45 4b19 	vmov	d9, r4, r5
 8008794:	4606      	mov	r6, r0
 8008796:	460f      	mov	r7, r1
 8008798:	468b      	mov	fp, r1
 800879a:	f340 82f0 	ble.w	8008d7e <__ieee754_pow+0x986>
 800879e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087a6:	4303      	orrs	r3, r0
 80087a8:	f000 81e4 	beq.w	8008b74 <__ieee754_pow+0x77c>
 80087ac:	ec51 0b18 	vmov	r0, r1, d8
 80087b0:	2200      	movs	r2, #0
 80087b2:	2300      	movs	r3, #0
 80087b4:	f7f8 f93a 	bl	8000a2c <__aeabi_dcmplt>
 80087b8:	3800      	subs	r0, #0
 80087ba:	bf18      	it	ne
 80087bc:	2001      	movne	r0, #1
 80087be:	e72b      	b.n	8008618 <__ieee754_pow+0x220>
 80087c0:	60000000 	.word	0x60000000
 80087c4:	3ff71547 	.word	0x3ff71547
 80087c8:	f85ddf44 	.word	0xf85ddf44
 80087cc:	3e54ae0b 	.word	0x3e54ae0b
 80087d0:	55555555 	.word	0x55555555
 80087d4:	3fd55555 	.word	0x3fd55555
 80087d8:	652b82fe 	.word	0x652b82fe
 80087dc:	3ff71547 	.word	0x3ff71547
 80087e0:	00000000 	.word	0x00000000
 80087e4:	bff00000 	.word	0xbff00000
 80087e8:	3ff00000 	.word	0x3ff00000
 80087ec:	3fd00000 	.word	0x3fd00000
 80087f0:	3fe00000 	.word	0x3fe00000
 80087f4:	408fffff 	.word	0x408fffff
 80087f8:	4bd5      	ldr	r3, [pc, #852]	; (8008b50 <__ieee754_pow+0x758>)
 80087fa:	402b      	ands	r3, r5
 80087fc:	2200      	movs	r2, #0
 80087fe:	b92b      	cbnz	r3, 800880c <__ieee754_pow+0x414>
 8008800:	4bd4      	ldr	r3, [pc, #848]	; (8008b54 <__ieee754_pow+0x75c>)
 8008802:	f7f7 fea1 	bl	8000548 <__aeabi_dmul>
 8008806:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800880a:	460c      	mov	r4, r1
 800880c:	1523      	asrs	r3, r4, #20
 800880e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008812:	4413      	add	r3, r2
 8008814:	9305      	str	r3, [sp, #20]
 8008816:	4bd0      	ldr	r3, [pc, #832]	; (8008b58 <__ieee754_pow+0x760>)
 8008818:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800881c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008820:	429c      	cmp	r4, r3
 8008822:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008826:	dd08      	ble.n	800883a <__ieee754_pow+0x442>
 8008828:	4bcc      	ldr	r3, [pc, #816]	; (8008b5c <__ieee754_pow+0x764>)
 800882a:	429c      	cmp	r4, r3
 800882c:	f340 8162 	ble.w	8008af4 <__ieee754_pow+0x6fc>
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	3301      	adds	r3, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800883a:	2400      	movs	r4, #0
 800883c:	00e3      	lsls	r3, r4, #3
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	4bc7      	ldr	r3, [pc, #796]	; (8008b60 <__ieee754_pow+0x768>)
 8008842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008846:	ed93 7b00 	vldr	d7, [r3]
 800884a:	4629      	mov	r1, r5
 800884c:	ec53 2b17 	vmov	r2, r3, d7
 8008850:	eeb0 9a47 	vmov.f32	s18, s14
 8008854:	eef0 9a67 	vmov.f32	s19, s15
 8008858:	4682      	mov	sl, r0
 800885a:	f7f7 fcbd 	bl	80001d8 <__aeabi_dsub>
 800885e:	4652      	mov	r2, sl
 8008860:	4606      	mov	r6, r0
 8008862:	460f      	mov	r7, r1
 8008864:	462b      	mov	r3, r5
 8008866:	ec51 0b19 	vmov	r0, r1, d9
 800886a:	f7f7 fcb7 	bl	80001dc <__adddf3>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	2000      	movs	r0, #0
 8008874:	49bb      	ldr	r1, [pc, #748]	; (8008b64 <__ieee754_pow+0x76c>)
 8008876:	f7f7 ff91 	bl	800079c <__aeabi_ddiv>
 800887a:	ec41 0b1a 	vmov	d10, r0, r1
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f7 fe5f 	bl	8000548 <__aeabi_dmul>
 800888a:	2300      	movs	r3, #0
 800888c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008896:	46ab      	mov	fp, r5
 8008898:	106d      	asrs	r5, r5, #1
 800889a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800889e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088a2:	ec41 0b18 	vmov	d8, r0, r1
 80088a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80088aa:	2200      	movs	r2, #0
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	4614      	mov	r4, r2
 80088b2:	461d      	mov	r5, r3
 80088b4:	f7f7 fe48 	bl	8000548 <__aeabi_dmul>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f7 fc8a 	bl	80001d8 <__aeabi_dsub>
 80088c4:	ec53 2b19 	vmov	r2, r3, d9
 80088c8:	4606      	mov	r6, r0
 80088ca:	460f      	mov	r7, r1
 80088cc:	4620      	mov	r0, r4
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7f7 fc82 	bl	80001d8 <__aeabi_dsub>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4650      	mov	r0, sl
 80088da:	4659      	mov	r1, fp
 80088dc:	f7f7 fc7c 	bl	80001d8 <__aeabi_dsub>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	f7f7 fe30 	bl	8000548 <__aeabi_dmul>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4630      	mov	r0, r6
 80088ee:	4639      	mov	r1, r7
 80088f0:	f7f7 fc72 	bl	80001d8 <__aeabi_dsub>
 80088f4:	ec53 2b1a 	vmov	r2, r3, d10
 80088f8:	f7f7 fe26 	bl	8000548 <__aeabi_dmul>
 80088fc:	ec53 2b18 	vmov	r2, r3, d8
 8008900:	ec41 0b19 	vmov	d9, r0, r1
 8008904:	ec51 0b18 	vmov	r0, r1, d8
 8008908:	f7f7 fe1e 	bl	8000548 <__aeabi_dmul>
 800890c:	a37c      	add	r3, pc, #496	; (adr r3, 8008b00 <__ieee754_pow+0x708>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	4604      	mov	r4, r0
 8008914:	460d      	mov	r5, r1
 8008916:	f7f7 fe17 	bl	8000548 <__aeabi_dmul>
 800891a:	a37b      	add	r3, pc, #492	; (adr r3, 8008b08 <__ieee754_pow+0x710>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fc5c 	bl	80001dc <__adddf3>
 8008924:	4622      	mov	r2, r4
 8008926:	462b      	mov	r3, r5
 8008928:	f7f7 fe0e 	bl	8000548 <__aeabi_dmul>
 800892c:	a378      	add	r3, pc, #480	; (adr r3, 8008b10 <__ieee754_pow+0x718>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fc53 	bl	80001dc <__adddf3>
 8008936:	4622      	mov	r2, r4
 8008938:	462b      	mov	r3, r5
 800893a:	f7f7 fe05 	bl	8000548 <__aeabi_dmul>
 800893e:	a376      	add	r3, pc, #472	; (adr r3, 8008b18 <__ieee754_pow+0x720>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fc4a 	bl	80001dc <__adddf3>
 8008948:	4622      	mov	r2, r4
 800894a:	462b      	mov	r3, r5
 800894c:	f7f7 fdfc 	bl	8000548 <__aeabi_dmul>
 8008950:	a373      	add	r3, pc, #460	; (adr r3, 8008b20 <__ieee754_pow+0x728>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f7 fc41 	bl	80001dc <__adddf3>
 800895a:	4622      	mov	r2, r4
 800895c:	462b      	mov	r3, r5
 800895e:	f7f7 fdf3 	bl	8000548 <__aeabi_dmul>
 8008962:	a371      	add	r3, pc, #452	; (adr r3, 8008b28 <__ieee754_pow+0x730>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fc38 	bl	80001dc <__adddf3>
 800896c:	4622      	mov	r2, r4
 800896e:	4606      	mov	r6, r0
 8008970:	460f      	mov	r7, r1
 8008972:	462b      	mov	r3, r5
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f7f7 fde6 	bl	8000548 <__aeabi_dmul>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f7 fde0 	bl	8000548 <__aeabi_dmul>
 8008988:	4642      	mov	r2, r8
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	464b      	mov	r3, r9
 8008990:	ec51 0b18 	vmov	r0, r1, d8
 8008994:	f7f7 fc22 	bl	80001dc <__adddf3>
 8008998:	ec53 2b19 	vmov	r2, r3, d9
 800899c:	f7f7 fdd4 	bl	8000548 <__aeabi_dmul>
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	f7f7 fc1a 	bl	80001dc <__adddf3>
 80089a8:	4642      	mov	r2, r8
 80089aa:	4682      	mov	sl, r0
 80089ac:	468b      	mov	fp, r1
 80089ae:	464b      	mov	r3, r9
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 fdc8 	bl	8000548 <__aeabi_dmul>
 80089b8:	4b6b      	ldr	r3, [pc, #428]	; (8008b68 <__ieee754_pow+0x770>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	f7f7 fc0c 	bl	80001dc <__adddf3>
 80089c4:	4652      	mov	r2, sl
 80089c6:	465b      	mov	r3, fp
 80089c8:	f7f7 fc08 	bl	80001dc <__adddf3>
 80089cc:	2000      	movs	r0, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4640      	mov	r0, r8
 80089d8:	4649      	mov	r1, r9
 80089da:	f7f7 fdb5 	bl	8000548 <__aeabi_dmul>
 80089de:	4b62      	ldr	r3, [pc, #392]	; (8008b68 <__ieee754_pow+0x770>)
 80089e0:	4680      	mov	r8, r0
 80089e2:	4689      	mov	r9, r1
 80089e4:	2200      	movs	r2, #0
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	f7f7 fbf5 	bl	80001d8 <__aeabi_dsub>
 80089ee:	4632      	mov	r2, r6
 80089f0:	463b      	mov	r3, r7
 80089f2:	f7f7 fbf1 	bl	80001d8 <__aeabi_dsub>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	f7f7 fbeb 	bl	80001d8 <__aeabi_dsub>
 8008a02:	ec53 2b18 	vmov	r2, r3, d8
 8008a06:	f7f7 fd9f 	bl	8000548 <__aeabi_dmul>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460f      	mov	r7, r1
 8008a10:	462b      	mov	r3, r5
 8008a12:	ec51 0b19 	vmov	r0, r1, d9
 8008a16:	f7f7 fd97 	bl	8000548 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4630      	mov	r0, r6
 8008a20:	4639      	mov	r1, r7
 8008a22:	f7f7 fbdb 	bl	80001dc <__adddf3>
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4649      	mov	r1, r9
 8008a32:	f7f7 fbd3 	bl	80001dc <__adddf3>
 8008a36:	a33e      	add	r3, pc, #248	; (adr r3, 8008b30 <__ieee754_pow+0x738>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4604      	mov	r4, r0
 8008a40:	460d      	mov	r5, r1
 8008a42:	f7f7 fd81 	bl	8000548 <__aeabi_dmul>
 8008a46:	4642      	mov	r2, r8
 8008a48:	ec41 0b18 	vmov	d8, r0, r1
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	4620      	mov	r0, r4
 8008a50:	4629      	mov	r1, r5
 8008a52:	f7f7 fbc1 	bl	80001d8 <__aeabi_dsub>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	f7f7 fbbb 	bl	80001d8 <__aeabi_dsub>
 8008a62:	a335      	add	r3, pc, #212	; (adr r3, 8008b38 <__ieee754_pow+0x740>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fd6e 	bl	8000548 <__aeabi_dmul>
 8008a6c:	a334      	add	r3, pc, #208	; (adr r3, 8008b40 <__ieee754_pow+0x748>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4606      	mov	r6, r0
 8008a74:	460f      	mov	r7, r1
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 fd65 	bl	8000548 <__aeabi_dmul>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4630      	mov	r0, r6
 8008a84:	4639      	mov	r1, r7
 8008a86:	f7f7 fba9 	bl	80001dc <__adddf3>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	4b37      	ldr	r3, [pc, #220]	; (8008b6c <__ieee754_pow+0x774>)
 8008a8e:	4413      	add	r3, r2
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fba2 	bl	80001dc <__adddf3>
 8008a98:	4682      	mov	sl, r0
 8008a9a:	9805      	ldr	r0, [sp, #20]
 8008a9c:	468b      	mov	fp, r1
 8008a9e:	f7f7 fce9 	bl	8000474 <__aeabi_i2d>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	4b32      	ldr	r3, [pc, #200]	; (8008b70 <__ieee754_pow+0x778>)
 8008aa6:	4413      	add	r3, r2
 8008aa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	4652      	mov	r2, sl
 8008ab2:	465b      	mov	r3, fp
 8008ab4:	ec51 0b18 	vmov	r0, r1, d8
 8008ab8:	f7f7 fb90 	bl	80001dc <__adddf3>
 8008abc:	4642      	mov	r2, r8
 8008abe:	464b      	mov	r3, r9
 8008ac0:	f7f7 fb8c 	bl	80001dc <__adddf3>
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	f7f7 fb88 	bl	80001dc <__adddf3>
 8008acc:	2000      	movs	r0, #0
 8008ace:	4632      	mov	r2, r6
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	f7f7 fb7f 	bl	80001d8 <__aeabi_dsub>
 8008ada:	4642      	mov	r2, r8
 8008adc:	464b      	mov	r3, r9
 8008ade:	f7f7 fb7b 	bl	80001d8 <__aeabi_dsub>
 8008ae2:	ec53 2b18 	vmov	r2, r3, d8
 8008ae6:	f7f7 fb77 	bl	80001d8 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4650      	mov	r0, sl
 8008af0:	4659      	mov	r1, fp
 8008af2:	e610      	b.n	8008716 <__ieee754_pow+0x31e>
 8008af4:	2401      	movs	r4, #1
 8008af6:	e6a1      	b.n	800883c <__ieee754_pow+0x444>
 8008af8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008b48 <__ieee754_pow+0x750>
 8008afc:	e617      	b.n	800872e <__ieee754_pow+0x336>
 8008afe:	bf00      	nop
 8008b00:	4a454eef 	.word	0x4a454eef
 8008b04:	3fca7e28 	.word	0x3fca7e28
 8008b08:	93c9db65 	.word	0x93c9db65
 8008b0c:	3fcd864a 	.word	0x3fcd864a
 8008b10:	a91d4101 	.word	0xa91d4101
 8008b14:	3fd17460 	.word	0x3fd17460
 8008b18:	518f264d 	.word	0x518f264d
 8008b1c:	3fd55555 	.word	0x3fd55555
 8008b20:	db6fabff 	.word	0xdb6fabff
 8008b24:	3fdb6db6 	.word	0x3fdb6db6
 8008b28:	33333303 	.word	0x33333303
 8008b2c:	3fe33333 	.word	0x3fe33333
 8008b30:	e0000000 	.word	0xe0000000
 8008b34:	3feec709 	.word	0x3feec709
 8008b38:	dc3a03fd 	.word	0xdc3a03fd
 8008b3c:	3feec709 	.word	0x3feec709
 8008b40:	145b01f5 	.word	0x145b01f5
 8008b44:	be3e2fe0 	.word	0xbe3e2fe0
 8008b48:	00000000 	.word	0x00000000
 8008b4c:	3ff00000 	.word	0x3ff00000
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	43400000 	.word	0x43400000
 8008b58:	0003988e 	.word	0x0003988e
 8008b5c:	000bb679 	.word	0x000bb679
 8008b60:	08009f90 	.word	0x08009f90
 8008b64:	3ff00000 	.word	0x3ff00000
 8008b68:	40080000 	.word	0x40080000
 8008b6c:	08009fb0 	.word	0x08009fb0
 8008b70:	08009fa0 	.word	0x08009fa0
 8008b74:	a3b3      	add	r3, pc, #716	; (adr r3, 8008e44 <__ieee754_pow+0xa4c>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fb2d 	bl	80001dc <__adddf3>
 8008b82:	4622      	mov	r2, r4
 8008b84:	ec41 0b1a 	vmov	d10, r0, r1
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	f7f7 fb23 	bl	80001d8 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	ec51 0b1a 	vmov	r0, r1, d10
 8008b9a:	f7f7 ff65 	bl	8000a68 <__aeabi_dcmpgt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f47f ae04 	bne.w	80087ac <__ieee754_pow+0x3b4>
 8008ba4:	4aa2      	ldr	r2, [pc, #648]	; (8008e30 <__ieee754_pow+0xa38>)
 8008ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f340 8107 	ble.w	8008dbe <__ieee754_pow+0x9c6>
 8008bb0:	151b      	asrs	r3, r3, #20
 8008bb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008bb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bba:	fa4a fa03 	asr.w	sl, sl, r3
 8008bbe:	44da      	add	sl, fp
 8008bc0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008bc4:	489b      	ldr	r0, [pc, #620]	; (8008e34 <__ieee754_pow+0xa3c>)
 8008bc6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008bca:	4108      	asrs	r0, r1
 8008bcc:	ea00 030a 	and.w	r3, r0, sl
 8008bd0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008bd4:	f1c1 0114 	rsb	r1, r1, #20
 8008bd8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008bdc:	fa4a fa01 	asr.w	sl, sl, r1
 8008be0:	f1bb 0f00 	cmp.w	fp, #0
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	4620      	mov	r0, r4
 8008bea:	4629      	mov	r1, r5
 8008bec:	bfb8      	it	lt
 8008bee:	f1ca 0a00 	rsblt	sl, sl, #0
 8008bf2:	f7f7 faf1 	bl	80001d8 <__aeabi_dsub>
 8008bf6:	ec41 0b19 	vmov	d9, r0, r1
 8008bfa:	4642      	mov	r2, r8
 8008bfc:	464b      	mov	r3, r9
 8008bfe:	ec51 0b19 	vmov	r0, r1, d9
 8008c02:	f7f7 faeb 	bl	80001dc <__adddf3>
 8008c06:	a37a      	add	r3, pc, #488	; (adr r3, 8008df0 <__ieee754_pow+0x9f8>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	f7f7 fc99 	bl	8000548 <__aeabi_dmul>
 8008c16:	ec53 2b19 	vmov	r2, r3, d9
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4629      	mov	r1, r5
 8008c22:	f7f7 fad9 	bl	80001d8 <__aeabi_dsub>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	f7f7 fad3 	bl	80001d8 <__aeabi_dsub>
 8008c32:	a371      	add	r3, pc, #452	; (adr r3, 8008df8 <__ieee754_pow+0xa00>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fc86 	bl	8000548 <__aeabi_dmul>
 8008c3c:	a370      	add	r3, pc, #448	; (adr r3, 8008e00 <__ieee754_pow+0xa08>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	4620      	mov	r0, r4
 8008c48:	4629      	mov	r1, r5
 8008c4a:	f7f7 fc7d 	bl	8000548 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fac1 	bl	80001dc <__adddf3>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fab9 	bl	80001dc <__adddf3>
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	f7f7 fab1 	bl	80001d8 <__aeabi_dsub>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 faab 	bl	80001d8 <__aeabi_dsub>
 8008c82:	4642      	mov	r2, r8
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	464b      	mov	r3, r9
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	f7f7 fc5b 	bl	8000548 <__aeabi_dmul>
 8008c92:	a35d      	add	r3, pc, #372	; (adr r3, 8008e08 <__ieee754_pow+0xa10>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	f7f7 fc54 	bl	8000548 <__aeabi_dmul>
 8008ca0:	a35b      	add	r3, pc, #364	; (adr r3, 8008e10 <__ieee754_pow+0xa18>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fa97 	bl	80001d8 <__aeabi_dsub>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	f7f7 fc4b 	bl	8000548 <__aeabi_dmul>
 8008cb2:	a359      	add	r3, pc, #356	; (adr r3, 8008e18 <__ieee754_pow+0xa20>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fa90 	bl	80001dc <__adddf3>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fc42 	bl	8000548 <__aeabi_dmul>
 8008cc4:	a356      	add	r3, pc, #344	; (adr r3, 8008e20 <__ieee754_pow+0xa28>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fa85 	bl	80001d8 <__aeabi_dsub>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	f7f7 fc39 	bl	8000548 <__aeabi_dmul>
 8008cd6:	a354      	add	r3, pc, #336	; (adr r3, 8008e28 <__ieee754_pow+0xa30>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fa7e 	bl	80001dc <__adddf3>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	f7f7 fc30 	bl	8000548 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fa72 	bl	80001d8 <__aeabi_dsub>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4649      	mov	r1, r9
 8008d00:	f7f7 fc22 	bl	8000548 <__aeabi_dmul>
 8008d04:	2200      	movs	r2, #0
 8008d06:	ec41 0b19 	vmov	d9, r0, r1
 8008d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 fa61 	bl	80001d8 <__aeabi_dsub>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	ec51 0b19 	vmov	r0, r1, d9
 8008d1e:	f7f7 fd3d 	bl	800079c <__aeabi_ddiv>
 8008d22:	4632      	mov	r2, r6
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	463b      	mov	r3, r7
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 fc0b 	bl	8000548 <__aeabi_dmul>
 8008d32:	4632      	mov	r2, r6
 8008d34:	463b      	mov	r3, r7
 8008d36:	f7f7 fa51 	bl	80001dc <__adddf3>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4620      	mov	r0, r4
 8008d40:	4629      	mov	r1, r5
 8008d42:	f7f7 fa49 	bl	80001d8 <__aeabi_dsub>
 8008d46:	4642      	mov	r2, r8
 8008d48:	464b      	mov	r3, r9
 8008d4a:	f7f7 fa45 	bl	80001d8 <__aeabi_dsub>
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4602      	mov	r2, r0
 8008d52:	4939      	ldr	r1, [pc, #228]	; (8008e38 <__ieee754_pow+0xa40>)
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7f7 fa3f 	bl	80001d8 <__aeabi_dsub>
 8008d5a:	ec41 0b10 	vmov	d0, r0, r1
 8008d5e:	ee10 3a90 	vmov	r3, s1
 8008d62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6a:	da2b      	bge.n	8008dc4 <__ieee754_pow+0x9cc>
 8008d6c:	4650      	mov	r0, sl
 8008d6e:	f000 fc23 	bl	80095b8 <scalbn>
 8008d72:	ec51 0b10 	vmov	r0, r1, d0
 8008d76:	ec53 2b18 	vmov	r2, r3, d8
 8008d7a:	f7ff bbee 	b.w	800855a <__ieee754_pow+0x162>
 8008d7e:	4b2f      	ldr	r3, [pc, #188]	; (8008e3c <__ieee754_pow+0xa44>)
 8008d80:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008d84:	429e      	cmp	r6, r3
 8008d86:	f77f af0d 	ble.w	8008ba4 <__ieee754_pow+0x7ac>
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <__ieee754_pow+0xa48>)
 8008d8c:	440b      	add	r3, r1
 8008d8e:	4303      	orrs	r3, r0
 8008d90:	d009      	beq.n	8008da6 <__ieee754_pow+0x9ae>
 8008d92:	ec51 0b18 	vmov	r0, r1, d8
 8008d96:	2200      	movs	r2, #0
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f7f7 fe47 	bl	8000a2c <__aeabi_dcmplt>
 8008d9e:	3800      	subs	r0, #0
 8008da0:	bf18      	it	ne
 8008da2:	2001      	movne	r0, #1
 8008da4:	e448      	b.n	8008638 <__ieee754_pow+0x240>
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	f7f7 fa15 	bl	80001d8 <__aeabi_dsub>
 8008dae:	4642      	mov	r2, r8
 8008db0:	464b      	mov	r3, r9
 8008db2:	f7f7 fe4f 	bl	8000a54 <__aeabi_dcmpge>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f43f aef4 	beq.w	8008ba4 <__ieee754_pow+0x7ac>
 8008dbc:	e7e9      	b.n	8008d92 <__ieee754_pow+0x99a>
 8008dbe:	f04f 0a00 	mov.w	sl, #0
 8008dc2:	e71a      	b.n	8008bfa <__ieee754_pow+0x802>
 8008dc4:	ec51 0b10 	vmov	r0, r1, d0
 8008dc8:	4619      	mov	r1, r3
 8008dca:	e7d4      	b.n	8008d76 <__ieee754_pow+0x97e>
 8008dcc:	491a      	ldr	r1, [pc, #104]	; (8008e38 <__ieee754_pow+0xa40>)
 8008dce:	2000      	movs	r0, #0
 8008dd0:	f7ff bb31 	b.w	8008436 <__ieee754_pow+0x3e>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f7ff bb2d 	b.w	8008436 <__ieee754_pow+0x3e>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	4639      	mov	r1, r7
 8008de0:	f7ff bb29 	b.w	8008436 <__ieee754_pow+0x3e>
 8008de4:	9204      	str	r2, [sp, #16]
 8008de6:	f7ff bb7b 	b.w	80084e0 <__ieee754_pow+0xe8>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f7ff bb65 	b.w	80084ba <__ieee754_pow+0xc2>
 8008df0:	00000000 	.word	0x00000000
 8008df4:	3fe62e43 	.word	0x3fe62e43
 8008df8:	fefa39ef 	.word	0xfefa39ef
 8008dfc:	3fe62e42 	.word	0x3fe62e42
 8008e00:	0ca86c39 	.word	0x0ca86c39
 8008e04:	be205c61 	.word	0xbe205c61
 8008e08:	72bea4d0 	.word	0x72bea4d0
 8008e0c:	3e663769 	.word	0x3e663769
 8008e10:	c5d26bf1 	.word	0xc5d26bf1
 8008e14:	3ebbbd41 	.word	0x3ebbbd41
 8008e18:	af25de2c 	.word	0xaf25de2c
 8008e1c:	3f11566a 	.word	0x3f11566a
 8008e20:	16bebd93 	.word	0x16bebd93
 8008e24:	3f66c16c 	.word	0x3f66c16c
 8008e28:	5555553e 	.word	0x5555553e
 8008e2c:	3fc55555 	.word	0x3fc55555
 8008e30:	3fe00000 	.word	0x3fe00000
 8008e34:	fff00000 	.word	0xfff00000
 8008e38:	3ff00000 	.word	0x3ff00000
 8008e3c:	4090cbff 	.word	0x4090cbff
 8008e40:	3f6f3400 	.word	0x3f6f3400
 8008e44:	652b82fe 	.word	0x652b82fe
 8008e48:	3c971547 	.word	0x3c971547
 8008e4c:	00000000 	.word	0x00000000

08008e50 <__ieee754_rem_pio2>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ed2d 8b02 	vpush	{d8}
 8008e58:	ec55 4b10 	vmov	r4, r5, d0
 8008e5c:	4bca      	ldr	r3, [pc, #808]	; (8009188 <__ieee754_rem_pio2+0x338>)
 8008e5e:	b08b      	sub	sp, #44	; 0x2c
 8008e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008e64:	4598      	cmp	r8, r3
 8008e66:	4682      	mov	sl, r0
 8008e68:	9502      	str	r5, [sp, #8]
 8008e6a:	dc08      	bgt.n	8008e7e <__ieee754_rem_pio2+0x2e>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	ed80 0b00 	vstr	d0, [r0]
 8008e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008e78:	f04f 0b00 	mov.w	fp, #0
 8008e7c:	e028      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 8008e7e:	4bc3      	ldr	r3, [pc, #780]	; (800918c <__ieee754_rem_pio2+0x33c>)
 8008e80:	4598      	cmp	r8, r3
 8008e82:	dc78      	bgt.n	8008f76 <__ieee754_rem_pio2+0x126>
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	4ec2      	ldr	r6, [pc, #776]	; (8009190 <__ieee754_rem_pio2+0x340>)
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	ee10 0a10 	vmov	r0, s0
 8008e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009150 <__ieee754_rem_pio2+0x300>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	4629      	mov	r1, r5
 8008e96:	dd39      	ble.n	8008f0c <__ieee754_rem_pio2+0xbc>
 8008e98:	f7f7 f99e 	bl	80001d8 <__aeabi_dsub>
 8008e9c:	45b0      	cmp	r8, r6
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	d01b      	beq.n	8008edc <__ieee754_rem_pio2+0x8c>
 8008ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 f995 	bl	80001d8 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7f7 f98d 	bl	80001d8 <__aeabi_dsub>
 8008ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f7f7 f988 	bl	80001d8 <__aeabi_dsub>
 8008ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ecc:	f04f 0b01 	mov.w	fp, #1
 8008ed0:	4658      	mov	r0, fp
 8008ed2:	b00b      	add	sp, #44	; 0x2c
 8008ed4:	ecbd 8b02 	vpop	{d8}
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f979 	bl	80001d8 <__aeabi_dsub>
 8008ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	f7f7 f972 	bl	80001d8 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f96a 	bl	80001d8 <__aeabi_dsub>
 8008f04:	a398      	add	r3, pc, #608	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	e7db      	b.n	8008ec4 <__ieee754_rem_pio2+0x74>
 8008f0c:	f7f7 f966 	bl	80001dc <__adddf3>
 8008f10:	45b0      	cmp	r8, r6
 8008f12:	4604      	mov	r4, r0
 8008f14:	460d      	mov	r5, r1
 8008f16:	d016      	beq.n	8008f46 <__ieee754_rem_pio2+0xf6>
 8008f18:	a38f      	add	r3, pc, #572	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f7f7 f95d 	bl	80001dc <__adddf3>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9ca 2300 	strd	r2, r3, [sl]
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7f7 f953 	bl	80001d8 <__aeabi_dsub>
 8008f32:	a389      	add	r3, pc, #548	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 f950 	bl	80001dc <__adddf3>
 8008f3c:	f04f 3bff 	mov.w	fp, #4294967295
 8008f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f44:	e7c4      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 8008f46:	a386      	add	r3, pc, #536	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 f946 	bl	80001dc <__adddf3>
 8008f50:	a385      	add	r3, pc, #532	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 f93f 	bl	80001dc <__adddf3>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	e9ca 2300 	strd	r2, r3, [sl]
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7f7 f935 	bl	80001d8 <__aeabi_dsub>
 8008f6e:	a37e      	add	r3, pc, #504	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	e7e0      	b.n	8008f38 <__ieee754_rem_pio2+0xe8>
 8008f76:	4b87      	ldr	r3, [pc, #540]	; (8009194 <__ieee754_rem_pio2+0x344>)
 8008f78:	4598      	cmp	r8, r3
 8008f7a:	f300 80d8 	bgt.w	800912e <__ieee754_rem_pio2+0x2de>
 8008f7e:	f000 fb0f 	bl	80095a0 <fabs>
 8008f82:	ec55 4b10 	vmov	r4, r5, d0
 8008f86:	ee10 0a10 	vmov	r0, s0
 8008f8a:	a379      	add	r3, pc, #484	; (adr r3, 8009170 <__ieee754_rem_pio2+0x320>)
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	4629      	mov	r1, r5
 8008f92:	f7f7 fad9 	bl	8000548 <__aeabi_dmul>
 8008f96:	4b80      	ldr	r3, [pc, #512]	; (8009198 <__ieee754_rem_pio2+0x348>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f7f7 f91f 	bl	80001dc <__adddf3>
 8008f9e:	f7f7 fd83 	bl	8000aa8 <__aeabi_d2iz>
 8008fa2:	4683      	mov	fp, r0
 8008fa4:	f7f7 fa66 	bl	8000474 <__aeabi_i2d>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	ec43 2b18 	vmov	d8, r2, r3
 8008fb0:	a367      	add	r3, pc, #412	; (adr r3, 8009150 <__ieee754_rem_pio2+0x300>)
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 fac7 	bl	8000548 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7f7 f909 	bl	80001d8 <__aeabi_dsub>
 8008fc6:	a364      	add	r3, pc, #400	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	4606      	mov	r6, r0
 8008fce:	460f      	mov	r7, r1
 8008fd0:	ec51 0b18 	vmov	r0, r1, d8
 8008fd4:	f7f7 fab8 	bl	8000548 <__aeabi_dmul>
 8008fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8008fdc:	4604      	mov	r4, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	dc0d      	bgt.n	8008ffe <__ieee754_rem_pio2+0x1ae>
 8008fe2:	4b6e      	ldr	r3, [pc, #440]	; (800919c <__ieee754_rem_pio2+0x34c>)
 8008fe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	4543      	cmp	r3, r8
 8008fee:	d006      	beq.n	8008ffe <__ieee754_rem_pio2+0x1ae>
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	462b      	mov	r3, r5
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 f8ee 	bl	80001d8 <__aeabi_dsub>
 8008ffc:	e00e      	b.n	800901c <__ieee754_rem_pio2+0x1cc>
 8008ffe:	462b      	mov	r3, r5
 8009000:	4622      	mov	r2, r4
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 f8e7 	bl	80001d8 <__aeabi_dsub>
 800900a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800900e:	9303      	str	r3, [sp, #12]
 8009010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009014:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009018:	2b10      	cmp	r3, #16
 800901a:	dc02      	bgt.n	8009022 <__ieee754_rem_pio2+0x1d2>
 800901c:	e9ca 0100 	strd	r0, r1, [sl]
 8009020:	e039      	b.n	8009096 <__ieee754_rem_pio2+0x246>
 8009022:	a34f      	add	r3, pc, #316	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	ec51 0b18 	vmov	r0, r1, d8
 800902c:	f7f7 fa8c 	bl	8000548 <__aeabi_dmul>
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 f8cc 	bl	80001d8 <__aeabi_dsub>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	4630      	mov	r0, r6
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 f8c4 	bl	80001d8 <__aeabi_dsub>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	f7f7 f8c0 	bl	80001d8 <__aeabi_dsub>
 8009058:	a343      	add	r3, pc, #268	; (adr r3, 8009168 <__ieee754_rem_pio2+0x318>)
 800905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905e:	4604      	mov	r4, r0
 8009060:	460d      	mov	r5, r1
 8009062:	ec51 0b18 	vmov	r0, r1, d8
 8009066:	f7f7 fa6f 	bl	8000548 <__aeabi_dmul>
 800906a:	4622      	mov	r2, r4
 800906c:	462b      	mov	r3, r5
 800906e:	f7f7 f8b3 	bl	80001d8 <__aeabi_dsub>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 f8ab 	bl	80001d8 <__aeabi_dsub>
 8009082:	9a03      	ldr	r2, [sp, #12]
 8009084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	2b31      	cmp	r3, #49	; 0x31
 800908c:	dc24      	bgt.n	80090d8 <__ieee754_rem_pio2+0x288>
 800908e:	e9ca 0100 	strd	r0, r1, [sl]
 8009092:	4646      	mov	r6, r8
 8009094:	464f      	mov	r7, r9
 8009096:	e9da 8900 	ldrd	r8, r9, [sl]
 800909a:	4630      	mov	r0, r6
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 f899 	bl	80001d8 <__aeabi_dsub>
 80090a6:	462b      	mov	r3, r5
 80090a8:	4622      	mov	r2, r4
 80090aa:	f7f7 f895 	bl	80001d8 <__aeabi_dsub>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090b6:	f6bf af0b 	bge.w	8008ed0 <__ieee754_rem_pio2+0x80>
 80090ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090be:	f8ca 3004 	str.w	r3, [sl, #4]
 80090c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c6:	f8ca 8000 	str.w	r8, [sl]
 80090ca:	f8ca 0008 	str.w	r0, [sl, #8]
 80090ce:	f8ca 300c 	str.w	r3, [sl, #12]
 80090d2:	f1cb 0b00 	rsb	fp, fp, #0
 80090d6:	e6fb      	b.n	8008ed0 <__ieee754_rem_pio2+0x80>
 80090d8:	a327      	add	r3, pc, #156	; (adr r3, 8009178 <__ieee754_rem_pio2+0x328>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	ec51 0b18 	vmov	r0, r1, d8
 80090e2:	f7f7 fa31 	bl	8000548 <__aeabi_dmul>
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 f871 	bl	80001d8 <__aeabi_dsub>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 f869 	bl	80001d8 <__aeabi_dsub>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 f865 	bl	80001d8 <__aeabi_dsub>
 800910e:	a31c      	add	r3, pc, #112	; (adr r3, 8009180 <__ieee754_rem_pio2+0x330>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	ec51 0b18 	vmov	r0, r1, d8
 800911c:	f7f7 fa14 	bl	8000548 <__aeabi_dmul>
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	f7f7 f858 	bl	80001d8 <__aeabi_dsub>
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	e760      	b.n	8008ff0 <__ieee754_rem_pio2+0x1a0>
 800912e:	4b1c      	ldr	r3, [pc, #112]	; (80091a0 <__ieee754_rem_pio2+0x350>)
 8009130:	4598      	cmp	r8, r3
 8009132:	dd37      	ble.n	80091a4 <__ieee754_rem_pio2+0x354>
 8009134:	ee10 2a10 	vmov	r2, s0
 8009138:	462b      	mov	r3, r5
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 f84b 	bl	80001d8 <__aeabi_dsub>
 8009142:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009146:	e9ca 0100 	strd	r0, r1, [sl]
 800914a:	e695      	b.n	8008e78 <__ieee754_rem_pio2+0x28>
 800914c:	f3af 8000 	nop.w
 8009150:	54400000 	.word	0x54400000
 8009154:	3ff921fb 	.word	0x3ff921fb
 8009158:	1a626331 	.word	0x1a626331
 800915c:	3dd0b461 	.word	0x3dd0b461
 8009160:	1a600000 	.word	0x1a600000
 8009164:	3dd0b461 	.word	0x3dd0b461
 8009168:	2e037073 	.word	0x2e037073
 800916c:	3ba3198a 	.word	0x3ba3198a
 8009170:	6dc9c883 	.word	0x6dc9c883
 8009174:	3fe45f30 	.word	0x3fe45f30
 8009178:	2e000000 	.word	0x2e000000
 800917c:	3ba3198a 	.word	0x3ba3198a
 8009180:	252049c1 	.word	0x252049c1
 8009184:	397b839a 	.word	0x397b839a
 8009188:	3fe921fb 	.word	0x3fe921fb
 800918c:	4002d97b 	.word	0x4002d97b
 8009190:	3ff921fb 	.word	0x3ff921fb
 8009194:	413921fb 	.word	0x413921fb
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	08009fc0 	.word	0x08009fc0
 80091a0:	7fefffff 	.word	0x7fefffff
 80091a4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80091a8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80091ac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80091b0:	4620      	mov	r0, r4
 80091b2:	460d      	mov	r5, r1
 80091b4:	f7f7 fc78 	bl	8000aa8 <__aeabi_d2iz>
 80091b8:	f7f7 f95c 	bl	8000474 <__aeabi_i2d>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091c8:	f7f7 f806 	bl	80001d8 <__aeabi_dsub>
 80091cc:	4b21      	ldr	r3, [pc, #132]	; (8009254 <__ieee754_rem_pio2+0x404>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	f7f7 f9ba 	bl	8000548 <__aeabi_dmul>
 80091d4:	460d      	mov	r5, r1
 80091d6:	4604      	mov	r4, r0
 80091d8:	f7f7 fc66 	bl	8000aa8 <__aeabi_d2iz>
 80091dc:	f7f7 f94a 	bl	8000474 <__aeabi_i2d>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091ec:	f7f6 fff4 	bl	80001d8 <__aeabi_dsub>
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <__ieee754_rem_pio2+0x404>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	f7f7 f9a8 	bl	8000548 <__aeabi_dmul>
 80091f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80091fc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009200:	2703      	movs	r7, #3
 8009202:	2400      	movs	r4, #0
 8009204:	2500      	movs	r5, #0
 8009206:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800920a:	4622      	mov	r2, r4
 800920c:	462b      	mov	r3, r5
 800920e:	46b9      	mov	r9, r7
 8009210:	3f01      	subs	r7, #1
 8009212:	f7f7 fc01 	bl	8000a18 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d1f5      	bne.n	8009206 <__ieee754_rem_pio2+0x3b6>
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <__ieee754_rem_pio2+0x408>)
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	2302      	movs	r3, #2
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4632      	mov	r2, r6
 8009224:	464b      	mov	r3, r9
 8009226:	4651      	mov	r1, sl
 8009228:	a804      	add	r0, sp, #16
 800922a:	f000 fa75 	bl	8009718 <__kernel_rem_pio2>
 800922e:	9b02      	ldr	r3, [sp, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	4683      	mov	fp, r0
 8009234:	f6bf ae4c 	bge.w	8008ed0 <__ieee754_rem_pio2+0x80>
 8009238:	e9da 2100 	ldrd	r2, r1, [sl]
 800923c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009240:	e9ca 2300 	strd	r2, r3, [sl]
 8009244:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009248:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800924c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009250:	e73f      	b.n	80090d2 <__ieee754_rem_pio2+0x282>
 8009252:	bf00      	nop
 8009254:	41700000 	.word	0x41700000
 8009258:	0800a040 	.word	0x0800a040
 800925c:	00000000 	.word	0x00000000

08009260 <atan>:
 8009260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	ec55 4b10 	vmov	r4, r5, d0
 8009268:	4bc3      	ldr	r3, [pc, #780]	; (8009578 <atan+0x318>)
 800926a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800926e:	429e      	cmp	r6, r3
 8009270:	46ab      	mov	fp, r5
 8009272:	dd18      	ble.n	80092a6 <atan+0x46>
 8009274:	4bc1      	ldr	r3, [pc, #772]	; (800957c <atan+0x31c>)
 8009276:	429e      	cmp	r6, r3
 8009278:	dc01      	bgt.n	800927e <atan+0x1e>
 800927a:	d109      	bne.n	8009290 <atan+0x30>
 800927c:	b144      	cbz	r4, 8009290 <atan+0x30>
 800927e:	4622      	mov	r2, r4
 8009280:	462b      	mov	r3, r5
 8009282:	4620      	mov	r0, r4
 8009284:	4629      	mov	r1, r5
 8009286:	f7f6 ffa9 	bl	80001dc <__adddf3>
 800928a:	4604      	mov	r4, r0
 800928c:	460d      	mov	r5, r1
 800928e:	e006      	b.n	800929e <atan+0x3e>
 8009290:	f1bb 0f00 	cmp.w	fp, #0
 8009294:	f300 8131 	bgt.w	80094fa <atan+0x29a>
 8009298:	a59b      	add	r5, pc, #620	; (adr r5, 8009508 <atan+0x2a8>)
 800929a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800929e:	ec45 4b10 	vmov	d0, r4, r5
 80092a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a6:	4bb6      	ldr	r3, [pc, #728]	; (8009580 <atan+0x320>)
 80092a8:	429e      	cmp	r6, r3
 80092aa:	dc14      	bgt.n	80092d6 <atan+0x76>
 80092ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80092b0:	429e      	cmp	r6, r3
 80092b2:	dc0d      	bgt.n	80092d0 <atan+0x70>
 80092b4:	a396      	add	r3, pc, #600	; (adr r3, 8009510 <atan+0x2b0>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	ee10 0a10 	vmov	r0, s0
 80092be:	4629      	mov	r1, r5
 80092c0:	f7f6 ff8c 	bl	80001dc <__adddf3>
 80092c4:	4baf      	ldr	r3, [pc, #700]	; (8009584 <atan+0x324>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	f7f7 fbce 	bl	8000a68 <__aeabi_dcmpgt>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d1e6      	bne.n	800929e <atan+0x3e>
 80092d0:	f04f 3aff 	mov.w	sl, #4294967295
 80092d4:	e02b      	b.n	800932e <atan+0xce>
 80092d6:	f000 f963 	bl	80095a0 <fabs>
 80092da:	4bab      	ldr	r3, [pc, #684]	; (8009588 <atan+0x328>)
 80092dc:	429e      	cmp	r6, r3
 80092de:	ec55 4b10 	vmov	r4, r5, d0
 80092e2:	f300 80bf 	bgt.w	8009464 <atan+0x204>
 80092e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80092ea:	429e      	cmp	r6, r3
 80092ec:	f300 80a0 	bgt.w	8009430 <atan+0x1d0>
 80092f0:	ee10 2a10 	vmov	r2, s0
 80092f4:	ee10 0a10 	vmov	r0, s0
 80092f8:	462b      	mov	r3, r5
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7f6 ff6e 	bl	80001dc <__adddf3>
 8009300:	4ba0      	ldr	r3, [pc, #640]	; (8009584 <atan+0x324>)
 8009302:	2200      	movs	r2, #0
 8009304:	f7f6 ff68 	bl	80001d8 <__aeabi_dsub>
 8009308:	2200      	movs	r2, #0
 800930a:	4606      	mov	r6, r0
 800930c:	460f      	mov	r7, r1
 800930e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009312:	4620      	mov	r0, r4
 8009314:	4629      	mov	r1, r5
 8009316:	f7f6 ff61 	bl	80001dc <__adddf3>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4630      	mov	r0, r6
 8009320:	4639      	mov	r1, r7
 8009322:	f7f7 fa3b 	bl	800079c <__aeabi_ddiv>
 8009326:	f04f 0a00 	mov.w	sl, #0
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	4622      	mov	r2, r4
 8009330:	462b      	mov	r3, r5
 8009332:	4620      	mov	r0, r4
 8009334:	4629      	mov	r1, r5
 8009336:	f7f7 f907 	bl	8000548 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	f7f7 f901 	bl	8000548 <__aeabi_dmul>
 8009346:	a374      	add	r3, pc, #464	; (adr r3, 8009518 <atan+0x2b8>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	4606      	mov	r6, r0
 800934e:	460f      	mov	r7, r1
 8009350:	f7f7 f8fa 	bl	8000548 <__aeabi_dmul>
 8009354:	a372      	add	r3, pc, #456	; (adr r3, 8009520 <atan+0x2c0>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f6 ff3f 	bl	80001dc <__adddf3>
 800935e:	4632      	mov	r2, r6
 8009360:	463b      	mov	r3, r7
 8009362:	f7f7 f8f1 	bl	8000548 <__aeabi_dmul>
 8009366:	a370      	add	r3, pc, #448	; (adr r3, 8009528 <atan+0x2c8>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f6 ff36 	bl	80001dc <__adddf3>
 8009370:	4632      	mov	r2, r6
 8009372:	463b      	mov	r3, r7
 8009374:	f7f7 f8e8 	bl	8000548 <__aeabi_dmul>
 8009378:	a36d      	add	r3, pc, #436	; (adr r3, 8009530 <atan+0x2d0>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f6 ff2d 	bl	80001dc <__adddf3>
 8009382:	4632      	mov	r2, r6
 8009384:	463b      	mov	r3, r7
 8009386:	f7f7 f8df 	bl	8000548 <__aeabi_dmul>
 800938a:	a36b      	add	r3, pc, #428	; (adr r3, 8009538 <atan+0x2d8>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f6 ff24 	bl	80001dc <__adddf3>
 8009394:	4632      	mov	r2, r6
 8009396:	463b      	mov	r3, r7
 8009398:	f7f7 f8d6 	bl	8000548 <__aeabi_dmul>
 800939c:	a368      	add	r3, pc, #416	; (adr r3, 8009540 <atan+0x2e0>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff1b 	bl	80001dc <__adddf3>
 80093a6:	4642      	mov	r2, r8
 80093a8:	464b      	mov	r3, r9
 80093aa:	f7f7 f8cd 	bl	8000548 <__aeabi_dmul>
 80093ae:	a366      	add	r3, pc, #408	; (adr r3, 8009548 <atan+0x2e8>)
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	4680      	mov	r8, r0
 80093b6:	4689      	mov	r9, r1
 80093b8:	4630      	mov	r0, r6
 80093ba:	4639      	mov	r1, r7
 80093bc:	f7f7 f8c4 	bl	8000548 <__aeabi_dmul>
 80093c0:	a363      	add	r3, pc, #396	; (adr r3, 8009550 <atan+0x2f0>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f6 ff07 	bl	80001d8 <__aeabi_dsub>
 80093ca:	4632      	mov	r2, r6
 80093cc:	463b      	mov	r3, r7
 80093ce:	f7f7 f8bb 	bl	8000548 <__aeabi_dmul>
 80093d2:	a361      	add	r3, pc, #388	; (adr r3, 8009558 <atan+0x2f8>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	f7f6 fefe 	bl	80001d8 <__aeabi_dsub>
 80093dc:	4632      	mov	r2, r6
 80093de:	463b      	mov	r3, r7
 80093e0:	f7f7 f8b2 	bl	8000548 <__aeabi_dmul>
 80093e4:	a35e      	add	r3, pc, #376	; (adr r3, 8009560 <atan+0x300>)
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f7f6 fef5 	bl	80001d8 <__aeabi_dsub>
 80093ee:	4632      	mov	r2, r6
 80093f0:	463b      	mov	r3, r7
 80093f2:	f7f7 f8a9 	bl	8000548 <__aeabi_dmul>
 80093f6:	a35c      	add	r3, pc, #368	; (adr r3, 8009568 <atan+0x308>)
 80093f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fc:	f7f6 feec 	bl	80001d8 <__aeabi_dsub>
 8009400:	4632      	mov	r2, r6
 8009402:	463b      	mov	r3, r7
 8009404:	f7f7 f8a0 	bl	8000548 <__aeabi_dmul>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f6 fee4 	bl	80001dc <__adddf3>
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f7f7 f896 	bl	8000548 <__aeabi_dmul>
 800941c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	d14b      	bne.n	80094be <atan+0x25e>
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 fed5 	bl	80001d8 <__aeabi_dsub>
 800942e:	e72c      	b.n	800928a <atan+0x2a>
 8009430:	ee10 0a10 	vmov	r0, s0
 8009434:	4b53      	ldr	r3, [pc, #332]	; (8009584 <atan+0x324>)
 8009436:	2200      	movs	r2, #0
 8009438:	4629      	mov	r1, r5
 800943a:	f7f6 fecd 	bl	80001d8 <__aeabi_dsub>
 800943e:	4b51      	ldr	r3, [pc, #324]	; (8009584 <atan+0x324>)
 8009440:	4606      	mov	r6, r0
 8009442:	460f      	mov	r7, r1
 8009444:	2200      	movs	r2, #0
 8009446:	4620      	mov	r0, r4
 8009448:	4629      	mov	r1, r5
 800944a:	f7f6 fec7 	bl	80001dc <__adddf3>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 f9a1 	bl	800079c <__aeabi_ddiv>
 800945a:	f04f 0a01 	mov.w	sl, #1
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	e764      	b.n	800932e <atan+0xce>
 8009464:	4b49      	ldr	r3, [pc, #292]	; (800958c <atan+0x32c>)
 8009466:	429e      	cmp	r6, r3
 8009468:	da1d      	bge.n	80094a6 <atan+0x246>
 800946a:	ee10 0a10 	vmov	r0, s0
 800946e:	4b48      	ldr	r3, [pc, #288]	; (8009590 <atan+0x330>)
 8009470:	2200      	movs	r2, #0
 8009472:	4629      	mov	r1, r5
 8009474:	f7f6 feb0 	bl	80001d8 <__aeabi_dsub>
 8009478:	4b45      	ldr	r3, [pc, #276]	; (8009590 <atan+0x330>)
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	2200      	movs	r2, #0
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f7 f860 	bl	8000548 <__aeabi_dmul>
 8009488:	4b3e      	ldr	r3, [pc, #248]	; (8009584 <atan+0x324>)
 800948a:	2200      	movs	r2, #0
 800948c:	f7f6 fea6 	bl	80001dc <__adddf3>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4630      	mov	r0, r6
 8009496:	4639      	mov	r1, r7
 8009498:	f7f7 f980 	bl	800079c <__aeabi_ddiv>
 800949c:	f04f 0a02 	mov.w	sl, #2
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	e743      	b.n	800932e <atan+0xce>
 80094a6:	462b      	mov	r3, r5
 80094a8:	ee10 2a10 	vmov	r2, s0
 80094ac:	4939      	ldr	r1, [pc, #228]	; (8009594 <atan+0x334>)
 80094ae:	2000      	movs	r0, #0
 80094b0:	f7f7 f974 	bl	800079c <__aeabi_ddiv>
 80094b4:	f04f 0a03 	mov.w	sl, #3
 80094b8:	4604      	mov	r4, r0
 80094ba:	460d      	mov	r5, r1
 80094bc:	e737      	b.n	800932e <atan+0xce>
 80094be:	4b36      	ldr	r3, [pc, #216]	; (8009598 <atan+0x338>)
 80094c0:	4e36      	ldr	r6, [pc, #216]	; (800959c <atan+0x33c>)
 80094c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fe85 	bl	80001d8 <__aeabi_dsub>
 80094ce:	4622      	mov	r2, r4
 80094d0:	462b      	mov	r3, r5
 80094d2:	f7f6 fe81 	bl	80001d8 <__aeabi_dsub>
 80094d6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80094e2:	f7f6 fe79 	bl	80001d8 <__aeabi_dsub>
 80094e6:	f1bb 0f00 	cmp.w	fp, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	460d      	mov	r5, r1
 80094ee:	f6bf aed6 	bge.w	800929e <atan+0x3e>
 80094f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094f6:	461d      	mov	r5, r3
 80094f8:	e6d1      	b.n	800929e <atan+0x3e>
 80094fa:	a51d      	add	r5, pc, #116	; (adr r5, 8009570 <atan+0x310>)
 80094fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009500:	e6cd      	b.n	800929e <atan+0x3e>
 8009502:	bf00      	nop
 8009504:	f3af 8000 	nop.w
 8009508:	54442d18 	.word	0x54442d18
 800950c:	bff921fb 	.word	0xbff921fb
 8009510:	8800759c 	.word	0x8800759c
 8009514:	7e37e43c 	.word	0x7e37e43c
 8009518:	e322da11 	.word	0xe322da11
 800951c:	3f90ad3a 	.word	0x3f90ad3a
 8009520:	24760deb 	.word	0x24760deb
 8009524:	3fa97b4b 	.word	0x3fa97b4b
 8009528:	a0d03d51 	.word	0xa0d03d51
 800952c:	3fb10d66 	.word	0x3fb10d66
 8009530:	c54c206e 	.word	0xc54c206e
 8009534:	3fb745cd 	.word	0x3fb745cd
 8009538:	920083ff 	.word	0x920083ff
 800953c:	3fc24924 	.word	0x3fc24924
 8009540:	5555550d 	.word	0x5555550d
 8009544:	3fd55555 	.word	0x3fd55555
 8009548:	2c6a6c2f 	.word	0x2c6a6c2f
 800954c:	bfa2b444 	.word	0xbfa2b444
 8009550:	52defd9a 	.word	0x52defd9a
 8009554:	3fadde2d 	.word	0x3fadde2d
 8009558:	af749a6d 	.word	0xaf749a6d
 800955c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009560:	fe231671 	.word	0xfe231671
 8009564:	3fbc71c6 	.word	0x3fbc71c6
 8009568:	9998ebc4 	.word	0x9998ebc4
 800956c:	3fc99999 	.word	0x3fc99999
 8009570:	54442d18 	.word	0x54442d18
 8009574:	3ff921fb 	.word	0x3ff921fb
 8009578:	440fffff 	.word	0x440fffff
 800957c:	7ff00000 	.word	0x7ff00000
 8009580:	3fdbffff 	.word	0x3fdbffff
 8009584:	3ff00000 	.word	0x3ff00000
 8009588:	3ff2ffff 	.word	0x3ff2ffff
 800958c:	40038000 	.word	0x40038000
 8009590:	3ff80000 	.word	0x3ff80000
 8009594:	bff00000 	.word	0xbff00000
 8009598:	0800a168 	.word	0x0800a168
 800959c:	0800a148 	.word	0x0800a148

080095a0 <fabs>:
 80095a0:	ec51 0b10 	vmov	r0, r1, d0
 80095a4:	ee10 2a10 	vmov	r2, s0
 80095a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095ac:	ec43 2b10 	vmov	d0, r2, r3
 80095b0:	4770      	bx	lr
 80095b2:	0000      	movs	r0, r0
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <scalbn>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	ec55 4b10 	vmov	r4, r5, d0
 80095be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80095c2:	4606      	mov	r6, r0
 80095c4:	462b      	mov	r3, r5
 80095c6:	b999      	cbnz	r1, 80095f0 <scalbn+0x38>
 80095c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095cc:	4323      	orrs	r3, r4
 80095ce:	d03f      	beq.n	8009650 <scalbn+0x98>
 80095d0:	4b35      	ldr	r3, [pc, #212]	; (80096a8 <scalbn+0xf0>)
 80095d2:	4629      	mov	r1, r5
 80095d4:	ee10 0a10 	vmov	r0, s0
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f6 ffb5 	bl	8000548 <__aeabi_dmul>
 80095de:	4b33      	ldr	r3, [pc, #204]	; (80096ac <scalbn+0xf4>)
 80095e0:	429e      	cmp	r6, r3
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	da10      	bge.n	800960a <scalbn+0x52>
 80095e8:	a327      	add	r3, pc, #156	; (adr r3, 8009688 <scalbn+0xd0>)
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	e01f      	b.n	8009630 <scalbn+0x78>
 80095f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80095f4:	4291      	cmp	r1, r2
 80095f6:	d10c      	bne.n	8009612 <scalbn+0x5a>
 80095f8:	ee10 2a10 	vmov	r2, s0
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fdec 	bl	80001dc <__adddf3>
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	e022      	b.n	8009650 <scalbn+0x98>
 800960a:	460b      	mov	r3, r1
 800960c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009610:	3936      	subs	r1, #54	; 0x36
 8009612:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009616:	4296      	cmp	r6, r2
 8009618:	dd0d      	ble.n	8009636 <scalbn+0x7e>
 800961a:	2d00      	cmp	r5, #0
 800961c:	a11c      	add	r1, pc, #112	; (adr r1, 8009690 <scalbn+0xd8>)
 800961e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009622:	da02      	bge.n	800962a <scalbn+0x72>
 8009624:	a11c      	add	r1, pc, #112	; (adr r1, 8009698 <scalbn+0xe0>)
 8009626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800962a:	a319      	add	r3, pc, #100	; (adr r3, 8009690 <scalbn+0xd8>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	f7f6 ff8a 	bl	8000548 <__aeabi_dmul>
 8009634:	e7e6      	b.n	8009604 <scalbn+0x4c>
 8009636:	1872      	adds	r2, r6, r1
 8009638:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800963c:	428a      	cmp	r2, r1
 800963e:	dcec      	bgt.n	800961a <scalbn+0x62>
 8009640:	2a00      	cmp	r2, #0
 8009642:	dd08      	ble.n	8009656 <scalbn+0x9e>
 8009644:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800964c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009650:	ec45 4b10 	vmov	d0, r4, r5
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800965a:	da08      	bge.n	800966e <scalbn+0xb6>
 800965c:	2d00      	cmp	r5, #0
 800965e:	a10a      	add	r1, pc, #40	; (adr r1, 8009688 <scalbn+0xd0>)
 8009660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009664:	dac0      	bge.n	80095e8 <scalbn+0x30>
 8009666:	a10e      	add	r1, pc, #56	; (adr r1, 80096a0 <scalbn+0xe8>)
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	e7bc      	b.n	80095e8 <scalbn+0x30>
 800966e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009672:	3236      	adds	r2, #54	; 0x36
 8009674:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009678:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800967c:	4620      	mov	r0, r4
 800967e:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <scalbn+0xf8>)
 8009680:	2200      	movs	r2, #0
 8009682:	e7d5      	b.n	8009630 <scalbn+0x78>
 8009684:	f3af 8000 	nop.w
 8009688:	c2f8f359 	.word	0xc2f8f359
 800968c:	01a56e1f 	.word	0x01a56e1f
 8009690:	8800759c 	.word	0x8800759c
 8009694:	7e37e43c 	.word	0x7e37e43c
 8009698:	8800759c 	.word	0x8800759c
 800969c:	fe37e43c 	.word	0xfe37e43c
 80096a0:	c2f8f359 	.word	0xc2f8f359
 80096a4:	81a56e1f 	.word	0x81a56e1f
 80096a8:	43500000 	.word	0x43500000
 80096ac:	ffff3cb0 	.word	0xffff3cb0
 80096b0:	3c900000 	.word	0x3c900000

080096b4 <with_errno>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4604      	mov	r4, r0
 80096b8:	460d      	mov	r5, r1
 80096ba:	4616      	mov	r6, r2
 80096bc:	f7fe f9ee 	bl	8007a9c <__errno>
 80096c0:	4629      	mov	r1, r5
 80096c2:	6006      	str	r6, [r0, #0]
 80096c4:	4620      	mov	r0, r4
 80096c6:	bd70      	pop	{r4, r5, r6, pc}

080096c8 <xflow>:
 80096c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ca:	4614      	mov	r4, r2
 80096cc:	461d      	mov	r5, r3
 80096ce:	b108      	cbz	r0, 80096d4 <xflow+0xc>
 80096d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096d4:	e9cd 2300 	strd	r2, r3, [sp]
 80096d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ff32 	bl	8000548 <__aeabi_dmul>
 80096e4:	2222      	movs	r2, #34	; 0x22
 80096e6:	b003      	add	sp, #12
 80096e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ec:	f7ff bfe2 	b.w	80096b4 <with_errno>

080096f0 <__math_uflow>:
 80096f0:	b508      	push	{r3, lr}
 80096f2:	2200      	movs	r2, #0
 80096f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096f8:	f7ff ffe6 	bl	80096c8 <xflow>
 80096fc:	ec41 0b10 	vmov	d0, r0, r1
 8009700:	bd08      	pop	{r3, pc}

08009702 <__math_oflow>:
 8009702:	b508      	push	{r3, lr}
 8009704:	2200      	movs	r2, #0
 8009706:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800970a:	f7ff ffdd 	bl	80096c8 <xflow>
 800970e:	ec41 0b10 	vmov	d0, r0, r1
 8009712:	bd08      	pop	{r3, pc}
 8009714:	0000      	movs	r0, r0
	...

08009718 <__kernel_rem_pio2>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	ed2d 8b02 	vpush	{d8}
 8009720:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009724:	f112 0f14 	cmn.w	r2, #20
 8009728:	9306      	str	r3, [sp, #24]
 800972a:	9104      	str	r1, [sp, #16]
 800972c:	4bc2      	ldr	r3, [pc, #776]	; (8009a38 <__kernel_rem_pio2+0x320>)
 800972e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009730:	9009      	str	r0, [sp, #36]	; 0x24
 8009732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	f103 33ff 	add.w	r3, r3, #4294967295
 800973e:	bfa8      	it	ge
 8009740:	1ed4      	subge	r4, r2, #3
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	bfb2      	itee	lt
 8009746:	2400      	movlt	r4, #0
 8009748:	2318      	movge	r3, #24
 800974a:	fb94 f4f3 	sdivge	r4, r4, r3
 800974e:	f06f 0317 	mvn.w	r3, #23
 8009752:	fb04 3303 	mla	r3, r4, r3, r3
 8009756:	eb03 0a02 	add.w	sl, r3, r2
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009a28 <__kernel_rem_pio2+0x310>
 8009762:	eb03 0802 	add.w	r8, r3, r2
 8009766:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009768:	1aa7      	subs	r7, r4, r2
 800976a:	ae20      	add	r6, sp, #128	; 0x80
 800976c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009770:	2500      	movs	r5, #0
 8009772:	4545      	cmp	r5, r8
 8009774:	dd13      	ble.n	800979e <__kernel_rem_pio2+0x86>
 8009776:	9b06      	ldr	r3, [sp, #24]
 8009778:	aa20      	add	r2, sp, #128	; 0x80
 800977a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800977e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	9b00      	ldr	r3, [sp, #0]
 8009788:	4598      	cmp	r8, r3
 800978a:	dc31      	bgt.n	80097f0 <__kernel_rem_pio2+0xd8>
 800978c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009a28 <__kernel_rem_pio2+0x310>
 8009790:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009798:	462f      	mov	r7, r5
 800979a:	2600      	movs	r6, #0
 800979c:	e01b      	b.n	80097d6 <__kernel_rem_pio2+0xbe>
 800979e:	42ef      	cmn	r7, r5
 80097a0:	d407      	bmi.n	80097b2 <__kernel_rem_pio2+0x9a>
 80097a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80097a6:	f7f6 fe65 	bl	8000474 <__aeabi_i2d>
 80097aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097ae:	3501      	adds	r5, #1
 80097b0:	e7df      	b.n	8009772 <__kernel_rem_pio2+0x5a>
 80097b2:	ec51 0b18 	vmov	r0, r1, d8
 80097b6:	e7f8      	b.n	80097aa <__kernel_rem_pio2+0x92>
 80097b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80097c0:	f7f6 fec2 	bl	8000548 <__aeabi_dmul>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097cc:	f7f6 fd06 	bl	80001dc <__adddf3>
 80097d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097d4:	3601      	adds	r6, #1
 80097d6:	9b05      	ldr	r3, [sp, #20]
 80097d8:	429e      	cmp	r6, r3
 80097da:	f1a7 0708 	sub.w	r7, r7, #8
 80097de:	ddeb      	ble.n	80097b8 <__kernel_rem_pio2+0xa0>
 80097e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097e4:	f108 0801 	add.w	r8, r8, #1
 80097e8:	ecab 7b02 	vstmia	fp!, {d7}
 80097ec:	3508      	adds	r5, #8
 80097ee:	e7ca      	b.n	8009786 <__kernel_rem_pio2+0x6e>
 80097f0:	9b00      	ldr	r3, [sp, #0]
 80097f2:	aa0c      	add	r2, sp, #48	; 0x30
 80097f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80097fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009800:	9c00      	ldr	r4, [sp, #0]
 8009802:	930a      	str	r3, [sp, #40]	; 0x28
 8009804:	00e3      	lsls	r3, r4, #3
 8009806:	9308      	str	r3, [sp, #32]
 8009808:	ab98      	add	r3, sp, #608	; 0x260
 800980a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800980e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009812:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009816:	ab70      	add	r3, sp, #448	; 0x1c0
 8009818:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800981c:	46c3      	mov	fp, r8
 800981e:	46a1      	mov	r9, r4
 8009820:	f1b9 0f00 	cmp.w	r9, #0
 8009824:	f1a5 0508 	sub.w	r5, r5, #8
 8009828:	dc77      	bgt.n	800991a <__kernel_rem_pio2+0x202>
 800982a:	ec47 6b10 	vmov	d0, r6, r7
 800982e:	4650      	mov	r0, sl
 8009830:	f7ff fec2 	bl	80095b8 <scalbn>
 8009834:	ec57 6b10 	vmov	r6, r7, d0
 8009838:	2200      	movs	r2, #0
 800983a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800983e:	ee10 0a10 	vmov	r0, s0
 8009842:	4639      	mov	r1, r7
 8009844:	f7f6 fe80 	bl	8000548 <__aeabi_dmul>
 8009848:	ec41 0b10 	vmov	d0, r0, r1
 800984c:	f000 fab4 	bl	8009db8 <floor>
 8009850:	4b7a      	ldr	r3, [pc, #488]	; (8009a3c <__kernel_rem_pio2+0x324>)
 8009852:	ec51 0b10 	vmov	r0, r1, d0
 8009856:	2200      	movs	r2, #0
 8009858:	f7f6 fe76 	bl	8000548 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4630      	mov	r0, r6
 8009862:	4639      	mov	r1, r7
 8009864:	f7f6 fcb8 	bl	80001d8 <__aeabi_dsub>
 8009868:	460f      	mov	r7, r1
 800986a:	4606      	mov	r6, r0
 800986c:	f7f7 f91c 	bl	8000aa8 <__aeabi_d2iz>
 8009870:	9002      	str	r0, [sp, #8]
 8009872:	f7f6 fdff 	bl	8000474 <__aeabi_i2d>
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 fcab 	bl	80001d8 <__aeabi_dsub>
 8009882:	f1ba 0f00 	cmp.w	sl, #0
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	dd6d      	ble.n	8009968 <__kernel_rem_pio2+0x250>
 800988c:	1e61      	subs	r1, r4, #1
 800988e:	ab0c      	add	r3, sp, #48	; 0x30
 8009890:	9d02      	ldr	r5, [sp, #8]
 8009892:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009896:	f1ca 0018 	rsb	r0, sl, #24
 800989a:	fa43 f200 	asr.w	r2, r3, r0
 800989e:	4415      	add	r5, r2
 80098a0:	4082      	lsls	r2, r0
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	aa0c      	add	r2, sp, #48	; 0x30
 80098a6:	9502      	str	r5, [sp, #8]
 80098a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80098ac:	f1ca 0217 	rsb	r2, sl, #23
 80098b0:	fa43 fb02 	asr.w	fp, r3, r2
 80098b4:	f1bb 0f00 	cmp.w	fp, #0
 80098b8:	dd65      	ble.n	8009986 <__kernel_rem_pio2+0x26e>
 80098ba:	9b02      	ldr	r3, [sp, #8]
 80098bc:	2200      	movs	r2, #0
 80098be:	3301      	adds	r3, #1
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	4615      	mov	r5, r2
 80098c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80098c8:	4294      	cmp	r4, r2
 80098ca:	f300 809f 	bgt.w	8009a0c <__kernel_rem_pio2+0x2f4>
 80098ce:	f1ba 0f00 	cmp.w	sl, #0
 80098d2:	dd07      	ble.n	80098e4 <__kernel_rem_pio2+0x1cc>
 80098d4:	f1ba 0f01 	cmp.w	sl, #1
 80098d8:	f000 80c1 	beq.w	8009a5e <__kernel_rem_pio2+0x346>
 80098dc:	f1ba 0f02 	cmp.w	sl, #2
 80098e0:	f000 80c7 	beq.w	8009a72 <__kernel_rem_pio2+0x35a>
 80098e4:	f1bb 0f02 	cmp.w	fp, #2
 80098e8:	d14d      	bne.n	8009986 <__kernel_rem_pio2+0x26e>
 80098ea:	4632      	mov	r2, r6
 80098ec:	463b      	mov	r3, r7
 80098ee:	4954      	ldr	r1, [pc, #336]	; (8009a40 <__kernel_rem_pio2+0x328>)
 80098f0:	2000      	movs	r0, #0
 80098f2:	f7f6 fc71 	bl	80001d8 <__aeabi_dsub>
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	d043      	beq.n	8009986 <__kernel_rem_pio2+0x26e>
 80098fe:	4650      	mov	r0, sl
 8009900:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009a30 <__kernel_rem_pio2+0x318>
 8009904:	f7ff fe58 	bl	80095b8 <scalbn>
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	ec53 2b10 	vmov	r2, r3, d0
 8009910:	f7f6 fc62 	bl	80001d8 <__aeabi_dsub>
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	e035      	b.n	8009986 <__kernel_rem_pio2+0x26e>
 800991a:	4b4a      	ldr	r3, [pc, #296]	; (8009a44 <__kernel_rem_pio2+0x32c>)
 800991c:	2200      	movs	r2, #0
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fe11 	bl	8000548 <__aeabi_dmul>
 8009926:	f7f7 f8bf 	bl	8000aa8 <__aeabi_d2iz>
 800992a:	f7f6 fda3 	bl	8000474 <__aeabi_i2d>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	ec43 2b18 	vmov	d8, r2, r3
 8009936:	4b44      	ldr	r3, [pc, #272]	; (8009a48 <__kernel_rem_pio2+0x330>)
 8009938:	2200      	movs	r2, #0
 800993a:	f7f6 fe05 	bl	8000548 <__aeabi_dmul>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 fc47 	bl	80001d8 <__aeabi_dsub>
 800994a:	f7f7 f8ad 	bl	8000aa8 <__aeabi_d2iz>
 800994e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009952:	f84b 0b04 	str.w	r0, [fp], #4
 8009956:	ec51 0b18 	vmov	r0, r1, d8
 800995a:	f7f6 fc3f 	bl	80001dc <__adddf3>
 800995e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	e75b      	b.n	8009820 <__kernel_rem_pio2+0x108>
 8009968:	d106      	bne.n	8009978 <__kernel_rem_pio2+0x260>
 800996a:	1e63      	subs	r3, r4, #1
 800996c:	aa0c      	add	r2, sp, #48	; 0x30
 800996e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009972:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009976:	e79d      	b.n	80098b4 <__kernel_rem_pio2+0x19c>
 8009978:	4b34      	ldr	r3, [pc, #208]	; (8009a4c <__kernel_rem_pio2+0x334>)
 800997a:	2200      	movs	r2, #0
 800997c:	f7f7 f86a 	bl	8000a54 <__aeabi_dcmpge>
 8009980:	2800      	cmp	r0, #0
 8009982:	d140      	bne.n	8009a06 <__kernel_rem_pio2+0x2ee>
 8009984:	4683      	mov	fp, r0
 8009986:	2200      	movs	r2, #0
 8009988:	2300      	movs	r3, #0
 800998a:	4630      	mov	r0, r6
 800998c:	4639      	mov	r1, r7
 800998e:	f7f7 f843 	bl	8000a18 <__aeabi_dcmpeq>
 8009992:	2800      	cmp	r0, #0
 8009994:	f000 80c1 	beq.w	8009b1a <__kernel_rem_pio2+0x402>
 8009998:	1e65      	subs	r5, r4, #1
 800999a:	462b      	mov	r3, r5
 800999c:	2200      	movs	r2, #0
 800999e:	9900      	ldr	r1, [sp, #0]
 80099a0:	428b      	cmp	r3, r1
 80099a2:	da6d      	bge.n	8009a80 <__kernel_rem_pio2+0x368>
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	f000 808a 	beq.w	8009abe <__kernel_rem_pio2+0x3a6>
 80099aa:	ab0c      	add	r3, sp, #48	; 0x30
 80099ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80099b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80ae 	beq.w	8009b16 <__kernel_rem_pio2+0x3fe>
 80099ba:	4650      	mov	r0, sl
 80099bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009a30 <__kernel_rem_pio2+0x318>
 80099c0:	f7ff fdfa 	bl	80095b8 <scalbn>
 80099c4:	1c6b      	adds	r3, r5, #1
 80099c6:	00da      	lsls	r2, r3, #3
 80099c8:	9205      	str	r2, [sp, #20]
 80099ca:	ec57 6b10 	vmov	r6, r7, d0
 80099ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80099d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009a44 <__kernel_rem_pio2+0x32c>
 80099d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80099d8:	462c      	mov	r4, r5
 80099da:	f04f 0800 	mov.w	r8, #0
 80099de:	2c00      	cmp	r4, #0
 80099e0:	f280 80d4 	bge.w	8009b8c <__kernel_rem_pio2+0x474>
 80099e4:	462c      	mov	r4, r5
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	f2c0 8102 	blt.w	8009bf0 <__kernel_rem_pio2+0x4d8>
 80099ec:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <__kernel_rem_pio2+0x338>)
 80099ee:	461e      	mov	r6, r3
 80099f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80099f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80099f6:	1b2b      	subs	r3, r5, r4
 80099f8:	f04f 0900 	mov.w	r9, #0
 80099fc:	f04f 0a00 	mov.w	sl, #0
 8009a00:	2700      	movs	r7, #0
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	e0e6      	b.n	8009bd4 <__kernel_rem_pio2+0x4bc>
 8009a06:	f04f 0b02 	mov.w	fp, #2
 8009a0a:	e756      	b.n	80098ba <__kernel_rem_pio2+0x1a2>
 8009a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a10:	bb05      	cbnz	r5, 8009a54 <__kernel_rem_pio2+0x33c>
 8009a12:	b123      	cbz	r3, 8009a1e <__kernel_rem_pio2+0x306>
 8009a14:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009a18:	f8c8 3000 	str.w	r3, [r8]
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	3201      	adds	r2, #1
 8009a20:	f108 0804 	add.w	r8, r8, #4
 8009a24:	461d      	mov	r5, r3
 8009a26:	e74f      	b.n	80098c8 <__kernel_rem_pio2+0x1b0>
	...
 8009a34:	3ff00000 	.word	0x3ff00000
 8009a38:	0800a1c8 	.word	0x0800a1c8
 8009a3c:	40200000 	.word	0x40200000
 8009a40:	3ff00000 	.word	0x3ff00000
 8009a44:	3e700000 	.word	0x3e700000
 8009a48:	41700000 	.word	0x41700000
 8009a4c:	3fe00000 	.word	0x3fe00000
 8009a50:	0800a188 	.word	0x0800a188
 8009a54:	1acb      	subs	r3, r1, r3
 8009a56:	f8c8 3000 	str.w	r3, [r8]
 8009a5a:	462b      	mov	r3, r5
 8009a5c:	e7df      	b.n	8009a1e <__kernel_rem_pio2+0x306>
 8009a5e:	1e62      	subs	r2, r4, #1
 8009a60:	ab0c      	add	r3, sp, #48	; 0x30
 8009a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a6a:	a90c      	add	r1, sp, #48	; 0x30
 8009a6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a70:	e738      	b.n	80098e4 <__kernel_rem_pio2+0x1cc>
 8009a72:	1e62      	subs	r2, r4, #1
 8009a74:	ab0c      	add	r3, sp, #48	; 0x30
 8009a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a7e:	e7f4      	b.n	8009a6a <__kernel_rem_pio2+0x352>
 8009a80:	a90c      	add	r1, sp, #48	; 0x30
 8009a82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	e788      	b.n	800999e <__kernel_rem_pio2+0x286>
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009a92:	2900      	cmp	r1, #0
 8009a94:	d0fa      	beq.n	8009a8c <__kernel_rem_pio2+0x374>
 8009a96:	9a08      	ldr	r2, [sp, #32]
 8009a98:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009a9c:	446a      	add	r2, sp
 8009a9e:	3a98      	subs	r2, #152	; 0x98
 8009aa0:	9208      	str	r2, [sp, #32]
 8009aa2:	9a06      	ldr	r2, [sp, #24]
 8009aa4:	a920      	add	r1, sp, #128	; 0x80
 8009aa6:	18a2      	adds	r2, r4, r2
 8009aa8:	18e3      	adds	r3, r4, r3
 8009aaa:	f104 0801 	add.w	r8, r4, #1
 8009aae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009ab2:	9302      	str	r3, [sp, #8]
 8009ab4:	9b02      	ldr	r3, [sp, #8]
 8009ab6:	4543      	cmp	r3, r8
 8009ab8:	da04      	bge.n	8009ac4 <__kernel_rem_pio2+0x3ac>
 8009aba:	461c      	mov	r4, r3
 8009abc:	e6a2      	b.n	8009804 <__kernel_rem_pio2+0xec>
 8009abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e7e4      	b.n	8009a8e <__kernel_rem_pio2+0x376>
 8009ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009aca:	f7f6 fcd3 	bl	8000474 <__aeabi_i2d>
 8009ace:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad4:	46ab      	mov	fp, r5
 8009ad6:	461c      	mov	r4, r3
 8009ad8:	f04f 0900 	mov.w	r9, #0
 8009adc:	2600      	movs	r6, #0
 8009ade:	2700      	movs	r7, #0
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	4599      	cmp	r9, r3
 8009ae4:	dd06      	ble.n	8009af4 <__kernel_rem_pio2+0x3dc>
 8009ae6:	9b08      	ldr	r3, [sp, #32]
 8009ae8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009aec:	f108 0801 	add.w	r8, r8, #1
 8009af0:	9308      	str	r3, [sp, #32]
 8009af2:	e7df      	b.n	8009ab4 <__kernel_rem_pio2+0x39c>
 8009af4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009af8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009afc:	f7f6 fd24 	bl	8000548 <__aeabi_dmul>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4630      	mov	r0, r6
 8009b06:	4639      	mov	r1, r7
 8009b08:	f7f6 fb68 	bl	80001dc <__adddf3>
 8009b0c:	f109 0901 	add.w	r9, r9, #1
 8009b10:	4606      	mov	r6, r0
 8009b12:	460f      	mov	r7, r1
 8009b14:	e7e4      	b.n	8009ae0 <__kernel_rem_pio2+0x3c8>
 8009b16:	3d01      	subs	r5, #1
 8009b18:	e747      	b.n	80099aa <__kernel_rem_pio2+0x292>
 8009b1a:	ec47 6b10 	vmov	d0, r6, r7
 8009b1e:	f1ca 0000 	rsb	r0, sl, #0
 8009b22:	f7ff fd49 	bl	80095b8 <scalbn>
 8009b26:	ec57 6b10 	vmov	r6, r7, d0
 8009b2a:	4ba0      	ldr	r3, [pc, #640]	; (8009dac <__kernel_rem_pio2+0x694>)
 8009b2c:	ee10 0a10 	vmov	r0, s0
 8009b30:	2200      	movs	r2, #0
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 ff8e 	bl	8000a54 <__aeabi_dcmpge>
 8009b38:	b1f8      	cbz	r0, 8009b7a <__kernel_rem_pio2+0x462>
 8009b3a:	4b9d      	ldr	r3, [pc, #628]	; (8009db0 <__kernel_rem_pio2+0x698>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 fd01 	bl	8000548 <__aeabi_dmul>
 8009b46:	f7f6 ffaf 	bl	8000aa8 <__aeabi_d2iz>
 8009b4a:	4680      	mov	r8, r0
 8009b4c:	f7f6 fc92 	bl	8000474 <__aeabi_i2d>
 8009b50:	4b96      	ldr	r3, [pc, #600]	; (8009dac <__kernel_rem_pio2+0x694>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fcf8 	bl	8000548 <__aeabi_dmul>
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7f6 fb3a 	bl	80001d8 <__aeabi_dsub>
 8009b64:	f7f6 ffa0 	bl	8000aa8 <__aeabi_d2iz>
 8009b68:	1c65      	adds	r5, r4, #1
 8009b6a:	ab0c      	add	r3, sp, #48	; 0x30
 8009b6c:	f10a 0a18 	add.w	sl, sl, #24
 8009b70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b74:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b78:	e71f      	b.n	80099ba <__kernel_rem_pio2+0x2a2>
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 ff93 	bl	8000aa8 <__aeabi_d2iz>
 8009b82:	ab0c      	add	r3, sp, #48	; 0x30
 8009b84:	4625      	mov	r5, r4
 8009b86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b8a:	e716      	b.n	80099ba <__kernel_rem_pio2+0x2a2>
 8009b8c:	ab0c      	add	r3, sp, #48	; 0x30
 8009b8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009b92:	f7f6 fc6f 	bl	8000474 <__aeabi_i2d>
 8009b96:	4632      	mov	r2, r6
 8009b98:	463b      	mov	r3, r7
 8009b9a:	f7f6 fcd5 	bl	8000548 <__aeabi_dmul>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fccd 	bl	8000548 <__aeabi_dmul>
 8009bae:	3c01      	subs	r4, #1
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	e713      	b.n	80099de <__kernel_rem_pio2+0x2c6>
 8009bb6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009bba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009bbe:	f7f6 fcc3 	bl	8000548 <__aeabi_dmul>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	4651      	mov	r1, sl
 8009bca:	f7f6 fb07 	bl	80001dc <__adddf3>
 8009bce:	3701      	adds	r7, #1
 8009bd0:	4681      	mov	r9, r0
 8009bd2:	468a      	mov	sl, r1
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	429f      	cmp	r7, r3
 8009bd8:	dc02      	bgt.n	8009be0 <__kernel_rem_pio2+0x4c8>
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	429f      	cmp	r7, r3
 8009bde:	ddea      	ble.n	8009bb6 <__kernel_rem_pio2+0x49e>
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	ab48      	add	r3, sp, #288	; 0x120
 8009be4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009be8:	e9c6 9a00 	strd	r9, sl, [r6]
 8009bec:	3c01      	subs	r4, #1
 8009bee:	e6fa      	b.n	80099e6 <__kernel_rem_pio2+0x2ce>
 8009bf0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	dc0b      	bgt.n	8009c0e <__kernel_rem_pio2+0x4f6>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dc39      	bgt.n	8009c6e <__kernel_rem_pio2+0x556>
 8009bfa:	d05d      	beq.n	8009cb8 <__kernel_rem_pio2+0x5a0>
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	f003 0007 	and.w	r0, r3, #7
 8009c02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009c06:	ecbd 8b02 	vpop	{d8}
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d1f3      	bne.n	8009bfc <__kernel_rem_pio2+0x4e4>
 8009c14:	9b05      	ldr	r3, [sp, #20]
 8009c16:	9500      	str	r5, [sp, #0]
 8009c18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009c1c:	eb0d 0403 	add.w	r4, sp, r3
 8009c20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009c24:	46a2      	mov	sl, r4
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f1aa 0a08 	sub.w	sl, sl, #8
 8009c2e:	dc69      	bgt.n	8009d04 <__kernel_rem_pio2+0x5ec>
 8009c30:	46aa      	mov	sl, r5
 8009c32:	f1ba 0f01 	cmp.w	sl, #1
 8009c36:	f1a4 0408 	sub.w	r4, r4, #8
 8009c3a:	f300 8083 	bgt.w	8009d44 <__kernel_rem_pio2+0x62c>
 8009c3e:	9c05      	ldr	r4, [sp, #20]
 8009c40:	ab48      	add	r3, sp, #288	; 0x120
 8009c42:	441c      	add	r4, r3
 8009c44:	2000      	movs	r0, #0
 8009c46:	2100      	movs	r1, #0
 8009c48:	2d01      	cmp	r5, #1
 8009c4a:	f300 809a 	bgt.w	8009d82 <__kernel_rem_pio2+0x66a>
 8009c4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009c52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009c56:	f1bb 0f00 	cmp.w	fp, #0
 8009c5a:	f040 8098 	bne.w	8009d8e <__kernel_rem_pio2+0x676>
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	e9c3 7800 	strd	r7, r8, [r3]
 8009c64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009c68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c6c:	e7c6      	b.n	8009bfc <__kernel_rem_pio2+0x4e4>
 8009c6e:	9e05      	ldr	r6, [sp, #20]
 8009c70:	ab48      	add	r3, sp, #288	; 0x120
 8009c72:	441e      	add	r6, r3
 8009c74:	462c      	mov	r4, r5
 8009c76:	2000      	movs	r0, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2c00      	cmp	r4, #0
 8009c7c:	da33      	bge.n	8009ce6 <__kernel_rem_pio2+0x5ce>
 8009c7e:	f1bb 0f00 	cmp.w	fp, #0
 8009c82:	d036      	beq.n	8009cf2 <__kernel_rem_pio2+0x5da>
 8009c84:	4602      	mov	r2, r0
 8009c86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c8a:	9c04      	ldr	r4, [sp, #16]
 8009c8c:	e9c4 2300 	strd	r2, r3, [r4]
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009c98:	f7f6 fa9e 	bl	80001d8 <__aeabi_dsub>
 8009c9c:	ae4a      	add	r6, sp, #296	; 0x128
 8009c9e:	2401      	movs	r4, #1
 8009ca0:	42a5      	cmp	r5, r4
 8009ca2:	da29      	bge.n	8009cf8 <__kernel_rem_pio2+0x5e0>
 8009ca4:	f1bb 0f00 	cmp.w	fp, #0
 8009ca8:	d002      	beq.n	8009cb0 <__kernel_rem_pio2+0x598>
 8009caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cae:	4619      	mov	r1, r3
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009cb6:	e7a1      	b.n	8009bfc <__kernel_rem_pio2+0x4e4>
 8009cb8:	9c05      	ldr	r4, [sp, #20]
 8009cba:	ab48      	add	r3, sp, #288	; 0x120
 8009cbc:	441c      	add	r4, r3
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2d00      	cmp	r5, #0
 8009cc4:	da09      	bge.n	8009cda <__kernel_rem_pio2+0x5c2>
 8009cc6:	f1bb 0f00 	cmp.w	fp, #0
 8009cca:	d002      	beq.n	8009cd2 <__kernel_rem_pio2+0x5ba>
 8009ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	9b04      	ldr	r3, [sp, #16]
 8009cd4:	e9c3 0100 	strd	r0, r1, [r3]
 8009cd8:	e790      	b.n	8009bfc <__kernel_rem_pio2+0x4e4>
 8009cda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009cde:	f7f6 fa7d 	bl	80001dc <__adddf3>
 8009ce2:	3d01      	subs	r5, #1
 8009ce4:	e7ed      	b.n	8009cc2 <__kernel_rem_pio2+0x5aa>
 8009ce6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009cea:	f7f6 fa77 	bl	80001dc <__adddf3>
 8009cee:	3c01      	subs	r4, #1
 8009cf0:	e7c3      	b.n	8009c7a <__kernel_rem_pio2+0x562>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	e7c8      	b.n	8009c8a <__kernel_rem_pio2+0x572>
 8009cf8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009cfc:	f7f6 fa6e 	bl	80001dc <__adddf3>
 8009d00:	3401      	adds	r4, #1
 8009d02:	e7cd      	b.n	8009ca0 <__kernel_rem_pio2+0x588>
 8009d04:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009d0c:	9b00      	ldr	r3, [sp, #0]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	4632      	mov	r2, r6
 8009d14:	463b      	mov	r3, r7
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 fa5f 	bl	80001dc <__adddf3>
 8009d1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4640      	mov	r0, r8
 8009d28:	4649      	mov	r1, r9
 8009d2a:	f7f6 fa55 	bl	80001d8 <__aeabi_dsub>
 8009d2e:	4632      	mov	r2, r6
 8009d30:	463b      	mov	r3, r7
 8009d32:	f7f6 fa53 	bl	80001dc <__adddf3>
 8009d36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009d3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d3e:	ed8a 7b00 	vstr	d7, [sl]
 8009d42:	e770      	b.n	8009c26 <__kernel_rem_pio2+0x50e>
 8009d44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009d48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	4632      	mov	r2, r6
 8009d50:	463b      	mov	r3, r7
 8009d52:	4649      	mov	r1, r9
 8009d54:	f7f6 fa42 	bl	80001dc <__adddf3>
 8009d58:	e9cd 0100 	strd	r0, r1, [sp]
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4640      	mov	r0, r8
 8009d62:	4649      	mov	r1, r9
 8009d64:	f7f6 fa38 	bl	80001d8 <__aeabi_dsub>
 8009d68:	4632      	mov	r2, r6
 8009d6a:	463b      	mov	r3, r7
 8009d6c:	f7f6 fa36 	bl	80001dc <__adddf3>
 8009d70:	ed9d 7b00 	vldr	d7, [sp]
 8009d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d78:	ed84 7b00 	vstr	d7, [r4]
 8009d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d80:	e757      	b.n	8009c32 <__kernel_rem_pio2+0x51a>
 8009d82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d86:	f7f6 fa29 	bl	80001dc <__adddf3>
 8009d8a:	3d01      	subs	r5, #1
 8009d8c:	e75c      	b.n	8009c48 <__kernel_rem_pio2+0x530>
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	9a04      	ldr	r2, [sp, #16]
 8009d92:	601f      	str	r7, [r3, #0]
 8009d94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009d98:	605c      	str	r4, [r3, #4]
 8009d9a:	609d      	str	r5, [r3, #8]
 8009d9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009da0:	60d3      	str	r3, [r2, #12]
 8009da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009da6:	6110      	str	r0, [r2, #16]
 8009da8:	6153      	str	r3, [r2, #20]
 8009daa:	e727      	b.n	8009bfc <__kernel_rem_pio2+0x4e4>
 8009dac:	41700000 	.word	0x41700000
 8009db0:	3e700000 	.word	0x3e700000
 8009db4:	00000000 	.word	0x00000000

08009db8 <floor>:
 8009db8:	ec51 0b10 	vmov	r0, r1, d0
 8009dbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009dc8:	2e13      	cmp	r6, #19
 8009dca:	ee10 5a10 	vmov	r5, s0
 8009dce:	ee10 8a10 	vmov	r8, s0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	dc31      	bgt.n	8009e3a <floor+0x82>
 8009dd6:	2e00      	cmp	r6, #0
 8009dd8:	da14      	bge.n	8009e04 <floor+0x4c>
 8009dda:	a333      	add	r3, pc, #204	; (adr r3, 8009ea8 <floor+0xf0>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 f9fc 	bl	80001dc <__adddf3>
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	f7f6 fe3e 	bl	8000a68 <__aeabi_dcmpgt>
 8009dec:	b138      	cbz	r0, 8009dfe <floor+0x46>
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	da53      	bge.n	8009e9a <floor+0xe2>
 8009df2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009df6:	4325      	orrs	r5, r4
 8009df8:	d052      	beq.n	8009ea0 <floor+0xe8>
 8009dfa:	4c2d      	ldr	r4, [pc, #180]	; (8009eb0 <floor+0xf8>)
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	4621      	mov	r1, r4
 8009e00:	4628      	mov	r0, r5
 8009e02:	e024      	b.n	8009e4e <floor+0x96>
 8009e04:	4f2b      	ldr	r7, [pc, #172]	; (8009eb4 <floor+0xfc>)
 8009e06:	4137      	asrs	r7, r6
 8009e08:	ea01 0307 	and.w	r3, r1, r7
 8009e0c:	4303      	orrs	r3, r0
 8009e0e:	d01e      	beq.n	8009e4e <floor+0x96>
 8009e10:	a325      	add	r3, pc, #148	; (adr r3, 8009ea8 <floor+0xf0>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 f9e1 	bl	80001dc <__adddf3>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f7f6 fe23 	bl	8000a68 <__aeabi_dcmpgt>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0eb      	beq.n	8009dfe <floor+0x46>
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	bfbe      	ittt	lt
 8009e2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009e2e:	4133      	asrlt	r3, r6
 8009e30:	18e4      	addlt	r4, r4, r3
 8009e32:	ea24 0407 	bic.w	r4, r4, r7
 8009e36:	2500      	movs	r5, #0
 8009e38:	e7e1      	b.n	8009dfe <floor+0x46>
 8009e3a:	2e33      	cmp	r6, #51	; 0x33
 8009e3c:	dd0b      	ble.n	8009e56 <floor+0x9e>
 8009e3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009e42:	d104      	bne.n	8009e4e <floor+0x96>
 8009e44:	ee10 2a10 	vmov	r2, s0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	f7f6 f9c7 	bl	80001dc <__adddf3>
 8009e4e:	ec41 0b10 	vmov	d0, r0, r1
 8009e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e5e:	40df      	lsrs	r7, r3
 8009e60:	4238      	tst	r0, r7
 8009e62:	d0f4      	beq.n	8009e4e <floor+0x96>
 8009e64:	a310      	add	r3, pc, #64	; (adr r3, 8009ea8 <floor+0xf0>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f7f6 f9b7 	bl	80001dc <__adddf3>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2300      	movs	r3, #0
 8009e72:	f7f6 fdf9 	bl	8000a68 <__aeabi_dcmpgt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d0c1      	beq.n	8009dfe <floor+0x46>
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	da0a      	bge.n	8009e94 <floor+0xdc>
 8009e7e:	2e14      	cmp	r6, #20
 8009e80:	d101      	bne.n	8009e86 <floor+0xce>
 8009e82:	3401      	adds	r4, #1
 8009e84:	e006      	b.n	8009e94 <floor+0xdc>
 8009e86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	40b3      	lsls	r3, r6
 8009e8e:	441d      	add	r5, r3
 8009e90:	45a8      	cmp	r8, r5
 8009e92:	d8f6      	bhi.n	8009e82 <floor+0xca>
 8009e94:	ea25 0507 	bic.w	r5, r5, r7
 8009e98:	e7b1      	b.n	8009dfe <floor+0x46>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	462c      	mov	r4, r5
 8009e9e:	e7ae      	b.n	8009dfe <floor+0x46>
 8009ea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009ea4:	e7ab      	b.n	8009dfe <floor+0x46>
 8009ea6:	bf00      	nop
 8009ea8:	8800759c 	.word	0x8800759c
 8009eac:	7e37e43c 	.word	0x7e37e43c
 8009eb0:	bff00000 	.word	0xbff00000
 8009eb4:	000fffff 	.word	0x000fffff

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
