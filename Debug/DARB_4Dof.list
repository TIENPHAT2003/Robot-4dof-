
DARB_4Dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800d750  0800d750  0001d750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcfc  0800dcfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcfc  0800dcfc  0001dcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd04  0800dd04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd04  0800dd04  0001dd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd08  0800dd08  0001dd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800dd0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000048f4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004ad4  20004ad4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001564e  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032e1  00000000  00000000  0003589d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001390  00000000  00000000  00038b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f2b  00000000  00000000  00039f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023ebd  00000000  00000000  0003ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000170f0  00000000  00000000  0005ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7306  00000000  00000000  00075de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000691c  00000000  00000000  0014d0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003f  00000000  00000000  00153a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d734 	.word	0x0800d734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d734 	.word	0x0800d734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <EncoderSetting>:
 */
#include "main.h"
#include "Encoder.h"

void EncoderSetting(EncoderRead *enc,TIM_HandleTypeDef *htim,int count_PerRevol,double deltaT)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6178      	str	r0, [r7, #20]
 8000ff8:	6139      	str	r1, [r7, #16]
 8000ffa:	60fa      	str	r2, [r7, #12]
 8000ffc:	ed87 0b00 	vstr	d0, [r7]
	enc->htim = htim;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	601a      	str	r2, [r3, #0]
	enc->count_PerRevol = count_PerRevol;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	615a      	str	r2, [r3, #20]
	enc->deltaT = deltaT;
 800100c:	6979      	ldr	r1, [r7, #20]
 800100e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001012:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	0000      	movs	r0, r0
 8001024:	0000      	movs	r0, r0
	...

08001028 <SpeedReadNonReset>:
	enc->count_X4 = 0;
}



void SpeedReadNonReset(EncoderRead *enc){
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001048:	441a      	add	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
	enc->vel_Real = ((enc->count_X4-enc->count_Pre)/enc->deltaT)/(enc->count_PerRevol*4)*60;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa5e 	bl	8000524 <__aeabi_i2d>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800106e:	f7ff fbed 	bl	800084c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4614      	mov	r4, r2
 8001078:	461d      	mov	r5, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4f 	bl	8000524 <__aeabi_i2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff fbdd 	bl	800084c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <SpeedReadNonReset+0x118>)
 80010a0:	f7ff faaa 	bl	80005f8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	enc->vel_Fil = 0.854 * enc->vel_Fil + 0.0728 * enc->vel_Real+ 0.0728 * enc->vel_Pre;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010b4:	a31e      	add	r3, pc, #120	; (adr r3, 8001130 <SpeedReadNonReset+0x108>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4614      	mov	r4, r2
 80010c4:	461d      	mov	r5, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80010cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa91 	bl	80005f8 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff f8d5 	bl	800028c <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010f0:	a311      	add	r3, pc, #68	; (adr r3, 8001138 <SpeedReadNonReset+0x110>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa7f 	bl	80005f8 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c3 	bl	800028c <__adddf3>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	enc->vel_Pre = enc->vel_Real;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	enc->count_Pre = enc->count_X4;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bdb0      	pop	{r4, r5, r7, pc}
 800112c:	f3af 8000 	nop.w
 8001130:	ced91687 	.word	0xced91687
 8001134:	3feb53f7 	.word	0x3feb53f7
 8001138:	532617c2 	.word	0x532617c2
 800113c:	3fb2a305 	.word	0x3fb2a305
 8001140:	404e0000 	.word	0x404e0000

08001144 <CountRead>:

double CountRead(EncoderRead *enc,uint8_t count_mode){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
	enc->count_Mode = count_mode;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	761a      	strb	r2, [r3, #24]
	enc->count_Timer = __HAL_TIM_GET_COUNTER(enc->htim);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	809a      	strh	r2, [r3, #4]
	enc->count_X4 += enc->count_Timer;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24

	if (enc->count_Mode == count_ModeX4)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <CountRead+0x52>
	{
		return enc->count_X4;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ca 	bl	8000524 <__aeabi_i2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e033      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeX1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e1b      	ldrb	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d110      	bne.n	80011c0 <CountRead+0x7c>
	{
		enc->count_X1 = enc->count_X4/4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <CountRead+0x64>
 80011a6:	3303      	adds	r3, #3
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	461a      	mov	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60da      	str	r2, [r3, #12]
		return enc->count_X1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9b5 	bl	8000524 <__aeabi_i2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e01e      	b.n	80011fe <CountRead+0xba>
	}else if (enc->count_Mode == count_ModeDegree)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d116      	bne.n	80011f6 <CountRead+0xb2>
	{
		enc->Degree = enc->count_X4*360/(enc->count_PerRevol*4);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		return enc->Degree;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80011f4:	e003      	b.n	80011fe <CountRead+0xba>
	}else {
		return 0;
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
	}
}
 80011fe:	ec43 2b17 	vmov	d7, r2, r3
 8001202:	eeb0 0a47 	vmov.f32	s0, s14
 8001206:	eef0 0a67 	vmov.f32	s1, s15
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <ResetCount>:

void ResetCount(EncoderRead *enc,uint8_t command)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	if (command == 1)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <ResetCount+0x22>
	{
		__HAL_TIM_SET_COUNTER(enc->htim,0);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
		enc->count_X4 = 0;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	}
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <Drive>:
 */

#include "MotorDrive.h"
#include "stdlib.h"

void Drive(MotorDrive *motor,TIM_HandleTypeDef *htim2,int Input,unsigned int Channel1,unsigned int Channel2){
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
	motor->htim2 = htim2;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	605a      	str	r2, [r3, #4]
	motor->Pwm = abs(Input);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bfb8      	it	lt
 8001258:	425b      	neglt	r3, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	81da      	strh	r2, [r3, #14]
	motor->Channel1 = Channel1;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	611a      	str	r2, [r3, #16]
	motor->Channel2 = Channel2;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	615a      	str	r2, [r3, #20]

	if(Input<0){
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da4d      	bge.n	800130e <Drive+0xd0>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d105      	bne.n	8001286 <Drive+0x48>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e018      	b.n	80012b8 <Drive+0x7a>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d105      	bne.n	800129a <Drive+0x5c>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
 8001298:	e00e      	b.n	80012b8 <Drive+0x7a>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d105      	bne.n	80012ae <Drive+0x70>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012ac:	e004      	b.n	80012b8 <Drive+0x7a>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <Drive+0x90>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	89da      	ldrh	r2, [r3, #14]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
	else{
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
	}

}
 80012cc:	e0b7      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,motor->Pwm);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d107      	bne.n	80012e6 <Drive+0xa8>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	89d9      	ldrh	r1, [r3, #14]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	460b      	mov	r3, r1
 80012e2:	6393      	str	r3, [r2, #56]	; 0x38
 80012e4:	e0ab      	b.n	800143e <Drive+0x200>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d107      	bne.n	80012fe <Drive+0xc0>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	89d9      	ldrh	r1, [r3, #14]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	460b      	mov	r3, r1
 80012fa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012fc:	e09f      	b.n	800143e <Drive+0x200>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	89d9      	ldrh	r1, [r3, #14]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	460b      	mov	r3, r1
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800130c:	e097      	b.n	800143e <Drive+0x200>
	else if(Input>0){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd4d      	ble.n	80013b0 <Drive+0x172>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,motor->Pwm);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d106      	bne.n	800132a <Drive+0xec>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	89da      	ldrh	r2, [r3, #14]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
 8001328:	e01e      	b.n	8001368 <Drive+0x12a>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d107      	bne.n	8001342 <Drive+0x104>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	89d9      	ldrh	r1, [r3, #14]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	6393      	str	r3, [r2, #56]	; 0x38
 8001340:	e012      	b.n	8001368 <Drive+0x12a>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d107      	bne.n	800135a <Drive+0x11c>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	89d9      	ldrh	r1, [r3, #14]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001358:	e006      	b.n	8001368 <Drive+0x12a>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	89d9      	ldrh	r1, [r3, #14]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	460b      	mov	r3, r1
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d105      	bne.n	800137c <Drive+0x13e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
}
 800137a:	e060      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	2b04      	cmp	r3, #4
 8001382:	d105      	bne.n	8001390 <Drive+0x152>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2300      	movs	r3, #0
 800138c:	6393      	str	r3, [r2, #56]	; 0x38
 800138e:	e056      	b.n	800143e <Drive+0x200>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b08      	cmp	r3, #8
 8001396:	d105      	bne.n	80013a4 <Drive+0x166>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013a2:	e04c      	b.n	800143e <Drive+0x200>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ae:	e046      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel1,0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <Drive+0x186>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
 80013c2:	e018      	b.n	80013f6 <Drive+0x1b8>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d105      	bne.n	80013d8 <Drive+0x19a>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	6393      	str	r3, [r2, #56]	; 0x38
 80013d6:	e00e      	b.n	80013f6 <Drive+0x1b8>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d105      	bne.n	80013ec <Drive+0x1ae>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ea:	e004      	b.n	80013f6 <Drive+0x1b8>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <Drive+0x1cc>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2200      	movs	r2, #0
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001408:	e019      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d105      	bne.n	800141e <Drive+0x1e0>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800141c:	e00f      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d105      	bne.n	8001432 <Drive+0x1f4>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001430:	e005      	b.n	800143e <Drive+0x200>
		__HAL_TIM_SET_COMPARE(motor->htim2,motor->Channel2,0);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800143c:	e7ff      	b.n	800143e <Drive+0x200>
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <Pid_Cal>:
//------------------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------Begin: Calculating PID---------------------------------------------------//

void Pid_Cal(PID_Param *pid,float Target,float CurrVal)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	ed87 0a02 	vstr	s0, [r7, #8]
 8001456:	edc7 0a01 	vstr	s1, [r7, #4]
//-----------------------Input-------------------------//
	pid->Target = Target;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
	pid->CurrVal = CurrVal;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
	pid->e = pid->Target - pid->CurrVal;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	edc3 7a02 	vstr	s15, [r3, #8]

//-----------------------Propotion Term----------------//
	pid->uP = pid->kP*pid->e;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a02 	vldr	s15, [r3, #8]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edc3 7a06 	vstr	s15, [r3, #24]

//-----------------------Integral Term-----------------//
	pid->uI = pid->uI_Pre + pid->kI*pid->e*pid->deltaT;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	edd3 6a07 	vldr	s13, [r3, #28]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI > pid->uI_AboveLimit ? pid->uI_AboveLimit : pid->uI;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	ed93 7a08 	vldr	s14, [r3, #32]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd06      	ble.n	80014e6 <Pid_Cal+0x9c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	e002      	b.n	80014ec <Pid_Cal+0xa2>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->uI = pid->uI < pid->uI_BelowLimit ? pid->uI_BelowLimit : pid->uI;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d506      	bpl.n	800151c <Pid_Cal+0xd2>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800151a:	e002      	b.n	8001522 <Pid_Cal+0xd8>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edc3 7a08 	vstr	s15, [r3, #32]

//-----------------------Derivative Term---------------//
	pid->uD = pid->kD*(pid->e - pid->e_Pre)/pid->deltaT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edd3 6a02 	vldr	s13, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a03 	vldr	s15, [r3, #12]
 800153a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	ed93 7a04 	vldr	s14, [r3, #16]
 8001548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->uD_Fil = (1-pid->alpha)*pid->uD_FilPre+pid->alpha*pid->uD;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800155c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001566:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//-----------------------Previous Value----------------//
	pid->e_Pre = pid->e;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]
	pid->uI_Pre = pid->uI;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
	pid->uD_FilPre = pid->uD_Fil;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

//-----------------------Sum---------------------------//
	pid->u = pid->uP + pid->uI + pid->uD;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	ed93 7a06 	vldr	s14, [r3, #24]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	pid->u = pid->u > pid->u_AboveLimit ? pid->u_AboveLimit : pid->u;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd02      	ble.n	80015d8 <Pid_Cal+0x18e>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	e001      	b.n	80015dc <Pid_Cal+0x192>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	6453      	str	r3, [r2, #68]	; 0x44
	pid->u = pid->u < pid->u_BelowLimit ? pid->u_BelowLimit : pid->u;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80015ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d502      	bpl.n	80015fc <Pid_Cal+0x1b2>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	e001      	b.n	8001600 <Pid_Cal+0x1b6>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	6453      	str	r3, [r2, #68]	; 0x44

//	return pid->u;
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <vApplicationGetIdleTaskMemory+0x2c>)
 8001620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4a06      	ldr	r2, [pc, #24]	; (8001640 <vApplicationGetIdleTaskMemory+0x30>)
 8001626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200001fc 	.word	0x200001fc
 8001640:	20000250 	.word	0x20000250

08001644 <p>:

float T1, T2, T3, T4;
float Tf=3000;

float p(float p0, float pf, float tf, float v0, float vf, float T)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	ed87 0a05 	vstr	s0, [r7, #20]
 800164e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001652:	ed87 1a03 	vstr	s2, [r7, #12]
 8001656:	edc7 1a02 	vstr	s3, [r7, #8]
 800165a:	ed87 2a01 	vstr	s4, [r7, #4]
 800165e:	edc7 2a00 	vstr	s5, [r7]
    return p0+v0*T+(3*(pf-p0)/(tf*tf)-2*v0/tf-vf/tf)*(T*T)+(-2*(pf-p0)/(tf*tf*tf)+(vf+v0)/(tf*tf))*(T*T*T);
 8001662:	ed97 7a02 	vldr	s14, [r7, #8]
 8001666:	edd7 7a00 	vldr	s15, [r7]
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001676:	edd7 6a04 	vldr	s13, [r7, #16]
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001682:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001686:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001692:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001696:	edd7 7a02 	vldr	s15, [r7, #8]
 800169a:	ee77 5aa7 	vadd.f32	s11, s15, s15
 800169e:	ed97 6a03 	vldr	s12, [r7, #12]
 80016a2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016aa:	edd7 5a01 	vldr	s11, [r7, #4]
 80016ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80016b2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80016b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ca:	edd7 6a04 	vldr	s13, [r7, #16]
 80016ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80016d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016d6:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 80016da:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80016de:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80016f2:	ed97 6a01 	vldr	s12, [r7, #4]
 80016f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fa:	ee76 5a27 	vadd.f32	s11, s12, s15
 80016fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001702:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001706:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800170a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800170e:	edd7 7a00 	vldr	s15, [r7]
 8001712:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8001716:	edd7 7a00 	vldr	s15, [r7]
 800171a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <PID_LINK1_Init>:
EncoderRead ENC_LINK1;
MotorDrive 	Motor_LINK1;
PID_Param	PID_DC_SPEED_LINK1;
PID_Param	PID_DC_POS_LINK1;
void PID_LINK1_Init()
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK1.kP = 50;
 8001738:	4b20      	ldr	r3, [pc, #128]	; (80017bc <PID_LINK1_Init+0x88>)
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <PID_LINK1_Init+0x8c>)
 800173c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK1.kI = 250;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <PID_LINK1_Init+0x88>)
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <PID_LINK1_Init+0x90>)
 8001742:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK1.kD = 0;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <PID_LINK1_Init+0x88>)
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK1.alpha = 0;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <PID_LINK1_Init+0x88>)
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK1.deltaT = 0.01;
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <PID_LINK1_Init+0x88>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <PID_LINK1_Init+0x94>)
 8001758:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK1.uI_AboveLimit = 1000;
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <PID_LINK1_Init+0x88>)
 800175c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK1.uI_BelowLimit = -1000;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <PID_LINK1_Init+0x88>)
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <PID_LINK1_Init+0x98>)
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK1.u_AboveLimit  = 1000;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <PID_LINK1_Init+0x88>)
 800176a:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <PID_LINK1_Init+0x9c>)
 800176c:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK1.u_BelowLimit  = -1000;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <PID_LINK1_Init+0x88>)
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <PID_LINK1_Init+0xa0>)
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK1.kP = 10;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <PID_LINK1_Init+0xa4>)
 8001776:	4a19      	ldr	r2, [pc, #100]	; (80017dc <PID_LINK1_Init+0xa8>)
 8001778:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK1.kI = 0;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <PID_LINK1_Init+0xa4>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK1.kD = 0;
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <PID_LINK1_Init+0xa4>)
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK1.alpha = 0;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <PID_LINK1_Init+0xa4>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK1.deltaT = 0.01;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <PID_LINK1_Init+0xa4>)
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <PID_LINK1_Init+0x94>)
 8001796:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK1.uI_AboveLimit = 1000;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <PID_LINK1_Init+0xa4>)
 800179a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK1.uI_BelowLimit = -1000;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <PID_LINK1_Init+0xa4>)
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <PID_LINK1_Init+0x98>)
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK1.u_AboveLimit  = 1000;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <PID_LINK1_Init+0xa4>)
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <PID_LINK1_Init+0x9c>)
 80017aa:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK1.u_BelowLimit  = -1000;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <PID_LINK1_Init+0xa4>)
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <PID_LINK1_Init+0xa0>)
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	200007d8 	.word	0x200007d8
 80017c0:	42480000 	.word	0x42480000
 80017c4:	437a0000 	.word	0x437a0000
 80017c8:	3c23d70a 	.word	0x3c23d70a
 80017cc:	fffffc18 	.word	0xfffffc18
 80017d0:	447a0000 	.word	0x447a0000
 80017d4:	c47a0000 	.word	0xc47a0000
 80017d8:	20000828 	.word	0x20000828
 80017dc:	41200000 	.word	0x41200000

080017e0 <PID_LINK1_Speed>:
void PID_LINK1_Speed(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	ed2d 8b02 	vpush	{d8}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK1);
 80017ea:	4814      	ldr	r0, [pc, #80]	; (800183c <PID_LINK1_Speed+0x5c>)
 80017ec:	f7ff fc1c 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK1, PID_DC_POS_LINK1.u, ENC_LINK1.vel_Real);
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <PID_LINK1_Speed+0x60>)
 80017f2:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <PID_LINK1_Speed+0x5c>)
 80017f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9f2 	bl	8000be8 <__aeabi_d2f>
 8001804:	4603      	mov	r3, r0
 8001806:	ee00 3a90 	vmov	s1, r3
 800180a:	eeb0 0a48 	vmov.f32	s0, s16
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <PID_LINK1_Speed+0x64>)
 8001810:	f7ff fe1b 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK1, &htim8, PID_DC_SPEED_LINK1.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <PID_LINK1_Speed+0x64>)
 8001816:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	230c      	movs	r3, #12
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2308      	movs	r3, #8
 8001824:	ee17 2a90 	vmov	r2, s15
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <PID_LINK1_Speed+0x68>)
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <PID_LINK1_Speed+0x6c>)
 800182c:	f7ff fd07 	bl	800123e <Drive>
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	ecbd 8b02 	vpop	{d8}
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000778 	.word	0x20000778
 8001840:	20000828 	.word	0x20000828
 8001844:	200007d8 	.word	0x200007d8
 8001848:	200005b8 	.word	0x200005b8
 800184c:	200007c0 	.word	0x200007c0

08001850 <PID_LINK1_Pos>:
void PID_LINK1_Pos(){
 8001850:	b580      	push	{r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK1, Angle.AngleLink1, CountRead(&ENC_LINK1, count_ModeDegree));
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <PID_LINK1_Pos+0x40>)
 800185a:	ed93 8a00 	vldr	s16, [r3]
 800185e:	2102      	movs	r1, #2
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <PID_LINK1_Pos+0x44>)
 8001862:	f7ff fc6f 	bl	8001144 <CountRead>
 8001866:	ec53 2b10 	vmov	r2, r3, d0
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f9bb 	bl	8000be8 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	ee00 3a90 	vmov	s1, r3
 8001878:	eeb0 0a48 	vmov.f32	s0, s16
 800187c:	4806      	ldr	r0, [pc, #24]	; (8001898 <PID_LINK1_Pos+0x48>)
 800187e:	f7ff fde4 	bl	800144a <Pid_Cal>
	PID_LINK1_Speed();
 8001882:	f7ff ffad 	bl	80017e0 <PID_LINK1_Speed>
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	ecbd 8b02 	vpop	{d8}
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000718 	.word	0x20000718
 8001894:	20000778 	.word	0x20000778
 8001898:	20000828 	.word	0x20000828

0800189c <PID_LINK2_Init>:
EncoderRead ENC_LINK2;
MotorDrive 	Motor_LINK2;
PID_Param	PID_DC_SPEED_LINK2;
PID_Param	PID_DC_POS_LINK2;
void PID_LINK2_Init()
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK2.kP = 50;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <PID_LINK2_Init+0x88>)
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <PID_LINK2_Init+0x8c>)
 80018a4:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK2.kI = 250;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <PID_LINK2_Init+0x88>)
 80018a8:	4a20      	ldr	r2, [pc, #128]	; (800192c <PID_LINK2_Init+0x90>)
 80018aa:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK2.kD = 0;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <PID_LINK2_Init+0x88>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK2.alpha = 0;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <PID_LINK2_Init+0x88>)
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK2.deltaT = 0.01;
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <PID_LINK2_Init+0x88>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <PID_LINK2_Init+0x94>)
 80018c0:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK2.uI_AboveLimit = 1000;
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <PID_LINK2_Init+0x88>)
 80018c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK2.uI_BelowLimit = -1000;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <PID_LINK2_Init+0x88>)
 80018cc:	4a19      	ldr	r2, [pc, #100]	; (8001934 <PID_LINK2_Init+0x98>)
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK2.u_AboveLimit  = 1000;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <PID_LINK2_Init+0x88>)
 80018d2:	4a19      	ldr	r2, [pc, #100]	; (8001938 <PID_LINK2_Init+0x9c>)
 80018d4:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK2.u_BelowLimit  = -1000;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <PID_LINK2_Init+0x88>)
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <PID_LINK2_Init+0xa0>)
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK2.kP = 10;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <PID_LINK2_Init+0xa4>)
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <PID_LINK2_Init+0xa8>)
 80018e0:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK2.kI = 0;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <PID_LINK2_Init+0xa4>)
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK2.kD = 0;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <PID_LINK2_Init+0xa4>)
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK2.alpha = 0;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <PID_LINK2_Init+0xa4>)
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK2.deltaT = 0.01;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <PID_LINK2_Init+0xa4>)
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <PID_LINK2_Init+0x94>)
 80018fe:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK2.uI_AboveLimit = 1000;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <PID_LINK2_Init+0xa4>)
 8001902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK2.uI_BelowLimit = -1000;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <PID_LINK2_Init+0xa4>)
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <PID_LINK2_Init+0x98>)
 800190c:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK2.u_AboveLimit  = 1000;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <PID_LINK2_Init+0xa4>)
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <PID_LINK2_Init+0x9c>)
 8001912:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK2.u_BelowLimit  = -1000;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <PID_LINK2_Init+0xa4>)
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <PID_LINK2_Init+0xa0>)
 8001918:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	200008d8 	.word	0x200008d8
 8001928:	42480000 	.word	0x42480000
 800192c:	437a0000 	.word	0x437a0000
 8001930:	3c23d70a 	.word	0x3c23d70a
 8001934:	fffffc18 	.word	0xfffffc18
 8001938:	447a0000 	.word	0x447a0000
 800193c:	c47a0000 	.word	0xc47a0000
 8001940:	20000928 	.word	0x20000928
 8001944:	41200000 	.word	0x41200000

08001948 <PID_LINK2_Speed>:
void PID_LINK2_Speed(){
 8001948:	b580      	push	{r7, lr}
 800194a:	ed2d 8b02 	vpush	{d8}
 800194e:	b082      	sub	sp, #8
 8001950:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK2);
 8001952:	4814      	ldr	r0, [pc, #80]	; (80019a4 <PID_LINK2_Speed+0x5c>)
 8001954:	f7ff fb68 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK2, PID_DC_POS_LINK2.u, ENC_LINK2.vel_Real);
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <PID_LINK2_Speed+0x60>)
 800195a:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <PID_LINK2_Speed+0x5c>)
 8001960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f93e 	bl	8000be8 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	ee00 3a90 	vmov	s1, r3
 8001972:	eeb0 0a48 	vmov.f32	s0, s16
 8001976:	480d      	ldr	r0, [pc, #52]	; (80019ac <PID_LINK2_Speed+0x64>)
 8001978:	f7ff fd67 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK2, &htim4, PID_DC_SPEED_LINK2.u, TIM_CHANNEL_3, TIM_CHANNEL_4);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <PID_LINK2_Speed+0x64>)
 800197e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001986:	230c      	movs	r3, #12
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2308      	movs	r3, #8
 800198c:	ee17 2a90 	vmov	r2, s15
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <PID_LINK2_Speed+0x68>)
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <PID_LINK2_Speed+0x6c>)
 8001994:	f7ff fc53 	bl	800123e <Drive>
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	ecbd 8b02 	vpop	{d8}
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000878 	.word	0x20000878
 80019a8:	20000928 	.word	0x20000928
 80019ac:	200008d8 	.word	0x200008d8
 80019b0:	20000528 	.word	0x20000528
 80019b4:	200008c0 	.word	0x200008c0

080019b8 <PID_LINK2_Pos>:
void PID_LINK2_Pos(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	ed2d 8b02 	vpush	{d8}
 80019be:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK2, Angle.AngleLink2 -187, CountRead(&ENC_LINK2, count_ModeDegree));
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <PID_LINK2_Pos+0x48>)
 80019c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a04 <PID_LINK2_Pos+0x4c>
 80019ca:	ee37 8ac7 	vsub.f32	s16, s15, s14
 80019ce:	2102      	movs	r1, #2
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <PID_LINK2_Pos+0x50>)
 80019d2:	f7ff fbb7 	bl	8001144 <CountRead>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f903 	bl	8000be8 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	ee00 3a90 	vmov	s1, r3
 80019e8:	eeb0 0a48 	vmov.f32	s0, s16
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <PID_LINK2_Pos+0x54>)
 80019ee:	f7ff fd2c 	bl	800144a <Pid_Cal>
	PID_LINK2_Speed();
 80019f2:	f7ff ffa9 	bl	8001948 <PID_LINK2_Speed>
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	ecbd 8b02 	vpop	{d8}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000718 	.word	0x20000718
 8001a04:	433b0000 	.word	0x433b0000
 8001a08:	20000878 	.word	0x20000878
 8001a0c:	20000928 	.word	0x20000928

08001a10 <PID_LINK3_Init>:
EncoderRead ENC_LINK3;
MotorDrive 	Motor_LINK3;
PID_Param	PID_DC_SPEED_LINK3;
PID_Param	PID_DC_POS_LINK3;
void PID_LINK3_Init()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK3.kP = 50;
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <PID_LINK3_Init+0x8c>)
 8001a18:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK3.kI = 300;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a1c:	4a20      	ldr	r2, [pc, #128]	; (8001aa0 <PID_LINK3_Init+0x90>)
 8001a1e:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK3.kD = 0;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK3.alpha = 0;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK3.deltaT = 0.01;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	; (8001aa4 <PID_LINK3_Init+0x94>)
 8001a34:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK3.uI_AboveLimit = 1000;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK3.uI_BelowLimit = -1000;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <PID_LINK3_Init+0x98>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK3.u_AboveLimit  = 1000;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <PID_LINK3_Init+0x9c>)
 8001a48:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK3.u_BelowLimit  = -1000;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <PID_LINK3_Init+0x88>)
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <PID_LINK3_Init+0xa0>)
 8001a4e:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK3.kP = 10;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <PID_LINK3_Init+0xa8>)
 8001a54:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK3.kI = 0;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK3.kD = 0;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK3.alpha = 0;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK3.deltaT = 0.01;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <PID_LINK3_Init+0x94>)
 8001a72:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK3.uI_AboveLimit = 1000;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK3.uI_BelowLimit = -1000;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <PID_LINK3_Init+0x98>)
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK3.u_AboveLimit  = 1000;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <PID_LINK3_Init+0x9c>)
 8001a86:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK3.u_BelowLimit  = -1000;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <PID_LINK3_Init+0xa4>)
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <PID_LINK3_Init+0xa0>)
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	200009d8 	.word	0x200009d8
 8001a9c:	42480000 	.word	0x42480000
 8001aa0:	43960000 	.word	0x43960000
 8001aa4:	3c23d70a 	.word	0x3c23d70a
 8001aa8:	fffffc18 	.word	0xfffffc18
 8001aac:	447a0000 	.word	0x447a0000
 8001ab0:	c47a0000 	.word	0xc47a0000
 8001ab4:	20000a28 	.word	0x20000a28
 8001ab8:	41200000 	.word	0x41200000

08001abc <PID_LINK3_Speed>:
void PID_LINK3_Speed(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	ed2d 8b02 	vpush	{d8}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK3);
 8001ac6:	4814      	ldr	r0, [pc, #80]	; (8001b18 <PID_LINK3_Speed+0x5c>)
 8001ac8:	f7ff faae 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK3, PID_DC_POS_LINK3.u, ENC_LINK3.vel_Real);
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <PID_LINK3_Speed+0x60>)
 8001ace:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <PID_LINK3_Speed+0x5c>)
 8001ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f884 	bl	8000be8 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	ee00 3a90 	vmov	s1, r3
 8001ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <PID_LINK3_Speed+0x64>)
 8001aec:	f7ff fcad 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK3, &htim4, PID_DC_SPEED_LINK3.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <PID_LINK3_Speed+0x64>)
 8001af2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afa:	2304      	movs	r3, #4
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	ee17 2a90 	vmov	r2, s15
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <PID_LINK3_Speed+0x68>)
 8001b06:	4808      	ldr	r0, [pc, #32]	; (8001b28 <PID_LINK3_Speed+0x6c>)
 8001b08:	f7ff fb99 	bl	800123e <Drive>
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	ecbd 8b02 	vpop	{d8}
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000978 	.word	0x20000978
 8001b1c:	20000a28 	.word	0x20000a28
 8001b20:	200009d8 	.word	0x200009d8
 8001b24:	20000528 	.word	0x20000528
 8001b28:	200009c0 	.word	0x200009c0

08001b2c <PID_LINK3_Pos>:
void PID_LINK3_Pos(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	ed2d 8b02 	vpush	{d8}
 8001b32:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK3, Angle.AngleLink3 + 135, CountRead(&ENC_LINK3, count_ModeDegree));
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <PID_LINK3_Pos+0x48>)
 8001b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001b78 <PID_LINK3_Pos+0x4c>
 8001b3e:	ee37 8a87 	vadd.f32	s16, s15, s14
 8001b42:	2102      	movs	r1, #2
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <PID_LINK3_Pos+0x50>)
 8001b46:	f7ff fafd 	bl	8001144 <CountRead>
 8001b4a:	ec53 2b10 	vmov	r2, r3, d0
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f849 	bl	8000be8 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	ee00 3a90 	vmov	s1, r3
 8001b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <PID_LINK3_Pos+0x54>)
 8001b62:	f7ff fc72 	bl	800144a <Pid_Cal>
	PID_LINK3_Speed();
 8001b66:	f7ff ffa9 	bl	8001abc <PID_LINK3_Speed>
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	ecbd 8b02 	vpop	{d8}
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000718 	.word	0x20000718
 8001b78:	43070000 	.word	0x43070000
 8001b7c:	20000978 	.word	0x20000978
 8001b80:	20000a28 	.word	0x20000a28

08001b84 <PID_LINK4_Init>:
EncoderRead ENC_LINK4;
MotorDrive 	Motor_LINK4;
PID_Param	PID_DC_SPEED_LINK4;
PID_Param	PID_DC_POS_LINK4;
void PID_LINK4_Init()
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	PID_DC_SPEED_LINK4.kP = 50;
 8001b88:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <PID_LINK4_Init+0x8c>)
 8001b8c:	615a      	str	r2, [r3, #20]
	PID_DC_SPEED_LINK4.kI = 250;
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <PID_LINK4_Init+0x90>)
 8001b92:	61da      	str	r2, [r3, #28]
	PID_DC_SPEED_LINK4.kD = 0;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_SPEED_LINK4.alpha = 0;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_SPEED_LINK4.deltaT = 0.01;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001ba6:	4a1c      	ldr	r2, [pc, #112]	; (8001c18 <PID_LINK4_Init+0x94>)
 8001ba8:	611a      	str	r2, [r3, #16]
	PID_DC_SPEED_LINK4.uI_AboveLimit = 1000;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_SPEED_LINK4.uI_BelowLimit = -1000;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001bb4:	4a19      	ldr	r2, [pc, #100]	; (8001c1c <PID_LINK4_Init+0x98>)
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_SPEED_LINK4.u_AboveLimit  = 1000;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001bba:	4a19      	ldr	r2, [pc, #100]	; (8001c20 <PID_LINK4_Init+0x9c>)
 8001bbc:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_SPEED_LINK4.u_BelowLimit  = -1000;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <PID_LINK4_Init+0x88>)
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <PID_LINK4_Init+0xa0>)
 8001bc2:	64da      	str	r2, [r3, #76]	; 0x4c

	PID_DC_POS_LINK4.kP = 10;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bc6:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <PID_LINK4_Init+0xa8>)
 8001bc8:	615a      	str	r2, [r3, #20]
	PID_DC_POS_LINK4.kI = 0;
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
	PID_DC_POS_LINK4.kD = 0;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
	PID_DC_POS_LINK4.alpha = 0;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
	PID_DC_POS_LINK4.deltaT = 0.01;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <PID_LINK4_Init+0x94>)
 8001be6:	611a      	str	r2, [r3, #16]
	PID_DC_POS_LINK4.uI_AboveLimit = 1000;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
	PID_DC_POS_LINK4.uI_BelowLimit = -1000;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <PID_LINK4_Init+0x98>)
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_DC_POS_LINK4.u_AboveLimit  = 1000;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bf8:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <PID_LINK4_Init+0x9c>)
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
	PID_DC_POS_LINK4.u_BelowLimit  = -1000;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <PID_LINK4_Init+0xa4>)
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <PID_LINK4_Init+0xa0>)
 8001c00:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000ad8 	.word	0x20000ad8
 8001c10:	42480000 	.word	0x42480000
 8001c14:	437a0000 	.word	0x437a0000
 8001c18:	3c23d70a 	.word	0x3c23d70a
 8001c1c:	fffffc18 	.word	0xfffffc18
 8001c20:	447a0000 	.word	0x447a0000
 8001c24:	c47a0000 	.word	0xc47a0000
 8001c28:	20000b28 	.word	0x20000b28
 8001c2c:	41200000 	.word	0x41200000

08001c30 <PID_LINK4_Speed>:
void PID_LINK4_Speed(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	ed2d 8b02 	vpush	{d8}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af02      	add	r7, sp, #8
	SpeedReadNonReset(&ENC_LINK4);
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <PID_LINK4_Speed+0x5c>)
 8001c3c:	f7ff f9f4 	bl	8001028 <SpeedReadNonReset>
	Pid_Cal(&PID_DC_SPEED_LINK4, PID_DC_POS_LINK4.u, ENC_LINK4.vel_Real);
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <PID_LINK4_Speed+0x60>)
 8001c42:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <PID_LINK4_Speed+0x5c>)
 8001c48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ffca 	bl	8000be8 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	ee00 3a90 	vmov	s1, r3
 8001c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <PID_LINK4_Speed+0x64>)
 8001c60:	f7ff fbf3 	bl	800144a <Pid_Cal>
	Drive(&Motor_LINK4, &htim9, PID_DC_SPEED_LINK4.u, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <PID_LINK4_Speed+0x64>)
 8001c66:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6e:	2304      	movs	r3, #4
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	ee17 2a90 	vmov	r2, s15
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <PID_LINK4_Speed+0x68>)
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <PID_LINK4_Speed+0x6c>)
 8001c7c:	f7ff fadf 	bl	800123e <Drive>
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	ecbd 8b02 	vpop	{d8}
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000a78 	.word	0x20000a78
 8001c90:	20000b28 	.word	0x20000b28
 8001c94:	20000ad8 	.word	0x20000ad8
 8001c98:	20000600 	.word	0x20000600
 8001c9c:	20000ac0 	.word	0x20000ac0

08001ca0 <PID_LINK4_Pos>:
void PID_LINK4_Pos(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	ed2d 8b02 	vpush	{d8}
 8001ca6:	af00      	add	r7, sp, #0
	Pid_Cal(&PID_DC_POS_LINK4, Angle.AngleLink4 - 90, CountRead(&ENC_LINK4, count_ModeDegree));
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <PID_LINK4_Pos+0x48>)
 8001caa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cec <PID_LINK4_Pos+0x4c>
 8001cb2:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <PID_LINK4_Pos+0x50>)
 8001cba:	f7ff fa43 	bl	8001144 <CountRead>
 8001cbe:	ec53 2b10 	vmov	r2, r3, d0
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe ff8f 	bl	8000be8 <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	ee00 3a90 	vmov	s1, r3
 8001cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <PID_LINK4_Pos+0x54>)
 8001cd6:	f7ff fbb8 	bl	800144a <Pid_Cal>
	PID_LINK4_Speed();
 8001cda:	f7ff ffa9 	bl	8001c30 <PID_LINK4_Speed>
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	ecbd 8b02 	vpop	{d8}
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000718 	.word	0x20000718
 8001cec:	42b40000 	.word	0x42b40000
 8001cf0:	20000a78 	.word	0x20000a78
 8001cf4:	20000b28 	.word	0x20000b28

08001cf8 <UartIdle_Init>:
char uartLogBuffer[MAX_MESG];
uint8_t flag_uart_rx = 0;
uint16_t uartLogRxSize;

void UartIdle_Init()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001cfc:	2264      	movs	r2, #100	; 0x64
 8001cfe:	4907      	ldr	r1, [pc, #28]	; (8001d1c <UartIdle_Init+0x24>)
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <UartIdle_Init+0x28>)
 8001d02:	f004 f9af 	bl	8006064 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <UartIdle_Init+0x2c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <UartIdle_Init+0x2c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0208 	bic.w	r2, r2, #8
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000b78 	.word	0x20000b78
 8001d20:	20000648 	.word	0x20000648
 8001d24:	20000690 	.word	0x20000690

08001d28 <UART_Handle>:


void UART_Handle(char* data, Setpoint_* Setpoint)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  if (flag_uart_rx == 1 && strstr(data, "\n"))  // Only process data when flag is set and newline is detected
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <UART_Handle+0x120>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	f040 8082 	bne.w	8001e40 <UART_Handle+0x118>
 8001d3c:	210a      	movs	r1, #10
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f008 fb8d 	bl	800a45e <strchr>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d07a      	beq.n	8001e40 <UART_Handle+0x118>
  {
    if (strstr(data, "theta1"))  // Handle "theta1" data
 8001d4a:	4940      	ldr	r1, [pc, #256]	; (8001e4c <UART_Handle+0x124>)
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f008 fba5 	bl	800a49c <strstr>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d015      	beq.n	8001d84 <UART_Handle+0x5c>
    {
      if (sscanf(data, "theta1:%f,theta2:%f,theta3:%f,theta4:%f\n",
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	1d18      	adds	r0, r3, #4
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3308      	adds	r3, #8
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	320c      	adds	r2, #12
 8001d66:	9201      	str	r2, [sp, #4]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	4938      	ldr	r1, [pc, #224]	; (8001e50 <UART_Handle+0x128>)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f008 fafb 	bl	800a36c <siscanf>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d157      	bne.n	8001e2c <UART_Handle+0x104>
                 &Setpoint->setpoint1, &Setpoint->setpoint2,
                 &Setpoint->setpoint3, &Setpoint->setpoint4) == 4)
      {
          FlagStart.startUartFK = 1;
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <UART_Handle+0x12c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	715a      	strb	r2, [r3, #5]
 8001d82:	e053      	b.n	8001e2c <UART_Handle+0x104>
      }
    }
    else if (strstr(data, "NhaT1"))  // Handle "theta1Nha" data
 8001d84:	4934      	ldr	r1, [pc, #208]	; (8001e58 <UART_Handle+0x130>)
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f008 fb88 	bl	800a49c <strstr>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d018      	beq.n	8001dc4 <UART_Handle+0x9c>
    {
      if (sscanf(data, "NhaT1:%f,NhaT2:%f,NhaT3:%f,NhaT4:%f\n",
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3338      	adds	r3, #56	; 0x38
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	323c      	adds	r2, #60	; 0x3c
 8001da6:	9201      	str	r2, [sp, #4]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4603      	mov	r3, r0
 8001dac:	460a      	mov	r2, r1
 8001dae:	492b      	ldr	r1, [pc, #172]	; (8001e5c <UART_Handle+0x134>)
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f008 fadb 	bl	800a36c <siscanf>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d137      	bne.n	8001e2c <UART_Handle+0x104>
    		  &Setpoint->theta1_Nha, &Setpoint->theta2_Nha,
		      &Setpoint->theta3_Nha, &Setpoint->theta4_Nha) == 4)
      {
        FlagStart.startUartIK = 1;
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <UART_Handle+0x12c>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	719a      	strb	r2, [r3, #6]
 8001dc2:	e033      	b.n	8001e2c <UART_Handle+0x104>
      }
    }
    else if (strstr(data, "home"))  // Handle "home" command
 8001dc4:	4926      	ldr	r1, [pc, #152]	; (8001e60 <UART_Handle+0x138>)
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f008 fb68 	bl	800a49c <strstr>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d12c      	bne.n	8001e2c <UART_Handle+0x104>
    {
      // Add logic to handle "home" command
    }
    else if (strstr(data, "Reset"))  // Handle system reset
 8001dd2:	4924      	ldr	r1, [pc, #144]	; (8001e64 <UART_Handle+0x13c>)
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f008 fb61 	bl	800a49c <strstr>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <UART_Handle+0xbe>
    {
      HAL_NVIC_SystemReset();  // Reset system
 8001de0:	f001 fe17 	bl	8003a12 <HAL_NVIC_SystemReset>
 8001de4:	e022      	b.n	8001e2c <UART_Handle+0x104>
    }
    else if (strstr(data, "hut"))  // Handle "hut" command
 8001de6:	4920      	ldr	r1, [pc, #128]	; (8001e68 <UART_Handle+0x140>)
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f008 fb57 	bl	800a49c <strstr>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11b      	bne.n	8001e2c <UART_Handle+0x104>
    {
      // Add logic to handle "hut" command
    }
    else if (strstr(data, "nha"))  // Handle "nha" command
 8001df4:	491d      	ldr	r1, [pc, #116]	; (8001e6c <UART_Handle+0x144>)
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f008 fb50 	bl	800a49c <strstr>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d114      	bne.n	8001e2c <UART_Handle+0x104>
    {
      // Add logic to handle "nha" command
    }
    else if (strstr(data, "start"))  // Start program
 8001e02:	491b      	ldr	r1, [pc, #108]	; (8001e70 <UART_Handle+0x148>)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f008 fb49 	bl	800a49c <strstr>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <UART_Handle+0xf0>
    {
      FlagStart.startProgram = 1;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <UART_Handle+0x12c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	705a      	strb	r2, [r3, #1]
 8001e16:	e009      	b.n	8001e2c <UART_Handle+0x104>
    }
    else if (strstr(data, "disconnected"))  // Handle disconnection
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <UART_Handle+0x14c>)
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f008 fb3e 	bl	800a49c <strstr>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <UART_Handle+0x104>
    {
      FlagStart.startProgram = 0;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <UART_Handle+0x12c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	705a      	strb	r2, [r3, #1]
    }

    flag_uart_rx = 0;   // Clear the UART RX flag after processing
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <UART_Handle+0x120>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    memset(data, 0, uartLogRxSize);  // Clear the buffer
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <UART_Handle+0x150>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f008 fb07 	bl	800a44e <memset>
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000bdc 	.word	0x20000bdc
 8001e4c:	0800d750 	.word	0x0800d750
 8001e50:	0800d758 	.word	0x0800d758
 8001e54:	20000700 	.word	0x20000700
 8001e58:	0800d784 	.word	0x0800d784
 8001e5c:	0800d78c 	.word	0x0800d78c
 8001e60:	0800d7b4 	.word	0x0800d7b4
 8001e64:	0800d7bc 	.word	0x0800d7bc
 8001e68:	0800d7c4 	.word	0x0800d7c4
 8001e6c:	0800d7c8 	.word	0x0800d7c8
 8001e70:	0800d7cc 	.word	0x0800d7cc
 8001e74:	0800d7d4 	.word	0x0800d7d4
 8001e78:	20000bde 	.word	0x20000bde

08001e7c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef* huart, uint16_t Size)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10e      	bne.n	8001eb0 <HAL_UARTEx_RxEventCallback+0x34>
  {
    uartLogRxSize = Size;
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <HAL_UARTEx_RxEventCallback+0x40>)
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	8013      	strh	r3, [r2, #0]
    flag_uart_rx = 1;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_UARTEx_RxEventCallback+0x44>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
	UART_Handle(uartLogBuffer, &Setpoint);
 8001e9e:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <HAL_UARTEx_RxEventCallback+0x48>)
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001ea2:	f7ff ff41 	bl	8001d28 <UART_Handle>

    // Sau khi xử lý, kích hoạt lại nhận DMA
    HAL_UARTEx_ReceiveToIdle_DMA(huart, (uint8_t*)uartLogBuffer, MAX_MESG);
 8001ea6:	2264      	movs	r2, #100	; 0x64
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f004 f8da 	bl	8006064 <HAL_UARTEx_ReceiveToIdle_DMA>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	20000bde 	.word	0x20000bde
 8001ec0:	20000bdc 	.word	0x20000bdc
 8001ec4:	20000728 	.word	0x20000728
 8001ec8:	20000b78 	.word	0x20000b78
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b09c      	sub	sp, #112	; 0x70
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed6:	f001 fc61 	bl	800379c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eda:	f000 f8e7 	bl	80020ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ede:	f000 fc45 	bl	800276c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee2:	f000 fc23 	bl	800272c <MX_DMA_Init>
  MX_TIM1_Init();
 8001ee6:	f000 f949 	bl	800217c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001eea:	f000 fa47 	bl	800237c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001eee:	f000 f99d 	bl	800222c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ef2:	f000 f9ef 	bl	80022d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001ef6:	f000 fabb 	bl	8002470 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001efa:	f000 fb0d 	bl	8002518 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001efe:	f000 fb9b 	bl	8002638 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8001f02:	f000 fbe9 	bl	80026d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	4855      	ldr	r0, [pc, #340]	; (8002060 <main+0x190>)
 8001f0a:	f003 f921 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <main+0x190>)
 8001f12:	f003 f91d 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f16:	2108      	movs	r1, #8
 8001f18:	4851      	ldr	r0, [pc, #324]	; (8002060 <main+0x190>)
 8001f1a:	f003 f919 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f1e:	210c      	movs	r1, #12
 8001f20:	484f      	ldr	r0, [pc, #316]	; (8002060 <main+0x190>)
 8001f22:	f003 f915 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001f26:	2100      	movs	r1, #0
 8001f28:	484e      	ldr	r0, [pc, #312]	; (8002064 <main+0x194>)
 8001f2a:	f003 f911 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8001f2e:	2104      	movs	r1, #4
 8001f30:	484c      	ldr	r0, [pc, #304]	; (8002064 <main+0x194>)
 8001f32:	f003 f90d 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f36:	2108      	movs	r1, #8
 8001f38:	484b      	ldr	r0, [pc, #300]	; (8002068 <main+0x198>)
 8001f3a:	f003 f909 	bl	8005150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001f3e:	210c      	movs	r1, #12
 8001f40:	4849      	ldr	r0, [pc, #292]	; (8002068 <main+0x198>)
 8001f42:	f003 f905 	bl	8005150 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001f46:	213c      	movs	r1, #60	; 0x3c
 8001f48:	4848      	ldr	r0, [pc, #288]	; (800206c <main+0x19c>)
 8001f4a:	f003 fa6f 	bl	800542c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001f4e:	213c      	movs	r1, #60	; 0x3c
 8001f50:	4847      	ldr	r0, [pc, #284]	; (8002070 <main+0x1a0>)
 8001f52:	f003 fa6b 	bl	800542c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f56:	213c      	movs	r1, #60	; 0x3c
 8001f58:	4846      	ldr	r0, [pc, #280]	; (8002074 <main+0x1a4>)
 8001f5a:	f003 fa67 	bl	800542c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001f5e:	213c      	movs	r1, #60	; 0x3c
 8001f60:	4845      	ldr	r0, [pc, #276]	; (8002078 <main+0x1a8>)
 8001f62:	f003 fa63 	bl	800542c <HAL_TIM_Encoder_Start>

  EncoderSetting(&ENC_LINK1, &htim1, 6950, 0.01);
 8001f66:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8002058 <main+0x188>
 8001f6a:	f641 3226 	movw	r2, #6950	; 0x1b26
 8001f6e:	493f      	ldr	r1, [pc, #252]	; (800206c <main+0x19c>)
 8001f70:	4842      	ldr	r0, [pc, #264]	; (800207c <main+0x1ac>)
 8001f72:	f7ff f83d 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK2, &htim2, 3250, 0.01);
 8001f76:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8002058 <main+0x188>
 8001f7a:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8001f7e:	493c      	ldr	r1, [pc, #240]	; (8002070 <main+0x1a0>)
 8001f80:	483f      	ldr	r0, [pc, #252]	; (8002080 <main+0x1b0>)
 8001f82:	f7ff f835 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK3, &htim3, 7050, 0.01);
 8001f86:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8002058 <main+0x188>
 8001f8a:	f641 328a 	movw	r2, #7050	; 0x1b8a
 8001f8e:	4939      	ldr	r1, [pc, #228]	; (8002074 <main+0x1a4>)
 8001f90:	483c      	ldr	r0, [pc, #240]	; (8002084 <main+0x1b4>)
 8001f92:	f7ff f82d 	bl	8000ff0 <EncoderSetting>
  EncoderSetting(&ENC_LINK4, &htim5, 3220, 0.01);
 8001f96:	ed9f 0b30 	vldr	d0, [pc, #192]	; 8002058 <main+0x188>
 8001f9a:	f640 4294 	movw	r2, #3220	; 0xc94
 8001f9e:	4936      	ldr	r1, [pc, #216]	; (8002078 <main+0x1a8>)
 8001fa0:	4839      	ldr	r0, [pc, #228]	; (8002088 <main+0x1b8>)
 8001fa2:	f7ff f825 	bl	8000ff0 <EncoderSetting>

  PID_LINK1_Init();
 8001fa6:	f7ff fbc5 	bl	8001734 <PID_LINK1_Init>
  PID_LINK2_Init();
 8001faa:	f7ff fc77 	bl	800189c <PID_LINK2_Init>
  PID_LINK3_Init();
 8001fae:	f7ff fd2f 	bl	8001a10 <PID_LINK3_Init>
  PID_LINK4_Init();
 8001fb2:	f7ff fde7 	bl	8001b84 <PID_LINK4_Init>

  UartIdle_Init();
 8001fb6:	f7ff fe9f 	bl	8001cf8 <UartIdle_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskLogic */
  osThreadDef(TaskLogic, StartTaskLogic, osPriorityNormal, 0, 128);
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <main+0x1bc>)
 8001fbc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001fc0:	461d      	mov	r5, r3
 8001fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLogicHandle = osThreadCreate(osThread(TaskLogic), NULL);
 8001fce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f005 f94e 	bl	8007276 <osThreadCreate>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <main+0x1c0>)
 8001fde:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskSetHome */
  osThreadDef(TaskSetHome, StartTaskSetHome, osPriorityNormal, 0, 128);
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <main+0x1c4>)
 8001fe2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ff0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskSetHomeHandle = osThreadCreate(osThread(TaskSetHome), NULL);
 8001ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f005 f93b 	bl	8007276 <osThreadCreate>
 8002000:	4603      	mov	r3, r0
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <main+0x1c8>)
 8002004:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskCalPID */
  osThreadDef(TaskCalPID, StartTaskPID, osPriorityNormal, 0, 128);
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <main+0x1cc>)
 8002008:	f107 041c 	add.w	r4, r7, #28
 800200c:	461d      	mov	r5, r3
 800200e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskCalPIDHandle = osThreadCreate(osThread(TaskCalPID), NULL);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f005 f928 	bl	8007276 <osThreadCreate>
 8002026:	4603      	mov	r3, r0
 8002028:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <main+0x1d0>)
 800202a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTrajectory */
  osThreadDef(TaskTrajectory, StartTaskTrajectory, osPriorityBelowNormal, 0, 128);
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <main+0x1d4>)
 800202e:	463c      	mov	r4, r7
 8002030:	461d      	mov	r5, r3
 8002032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002036:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800203a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTrajectoryHandle = osThreadCreate(osThread(TaskTrajectory), NULL);
 800203e:	463b      	mov	r3, r7
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f005 f917 	bl	8007276 <osThreadCreate>
 8002048:	4603      	mov	r3, r0
 800204a:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <main+0x1d8>)
 800204c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800204e:	f005 f90b 	bl	8007268 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002052:	e7fe      	b.n	8002052 <main+0x182>
 8002054:	f3af 8000 	nop.w
 8002058:	47ae147b 	.word	0x47ae147b
 800205c:	3f847ae1 	.word	0x3f847ae1
 8002060:	20000528 	.word	0x20000528
 8002064:	20000600 	.word	0x20000600
 8002068:	200005b8 	.word	0x200005b8
 800206c:	20000450 	.word	0x20000450
 8002070:	20000498 	.word	0x20000498
 8002074:	200004e0 	.word	0x200004e0
 8002078:	20000570 	.word	0x20000570
 800207c:	20000778 	.word	0x20000778
 8002080:	20000878 	.word	0x20000878
 8002084:	20000978 	.word	0x20000978
 8002088:	20000a78 	.word	0x20000a78
 800208c:	0800d7f0 	.word	0x0800d7f0
 8002090:	200006f0 	.word	0x200006f0
 8002094:	0800d818 	.word	0x0800d818
 8002098:	200006f4 	.word	0x200006f4
 800209c:	0800d840 	.word	0x0800d840
 80020a0:	200006f8 	.word	0x200006f8
 80020a4:	0800d86c 	.word	0x0800d86c
 80020a8:	200006fc 	.word	0x200006fc

080020ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b094      	sub	sp, #80	; 0x50
 80020b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	2230      	movs	r2, #48	; 0x30
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f008 f9c7 	bl	800a44e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <SystemClock_Config+0xc8>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <SystemClock_Config+0xc8>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <SystemClock_Config+0xc8>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <SystemClock_Config+0xcc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a20      	ldr	r2, [pc, #128]	; (8002178 <SystemClock_Config+0xcc>)
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <SystemClock_Config+0xcc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800210c:	2301      	movs	r3, #1
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002110:	2310      	movs	r3, #16
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002114:	2302      	movs	r3, #2
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800211c:	2308      	movs	r3, #8
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002120:	2348      	movs	r3, #72	; 0x48
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002124:	2302      	movs	r3, #2
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002128:	2304      	movs	r3, #4
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fa29 	bl	8004588 <HAL_RCC_OscConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800213c:	f000 feb0 	bl	8002ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002140:	230f      	movs	r3, #15
 8002142:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002144:	2302      	movs	r3, #2
 8002146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2102      	movs	r1, #2
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fc8b 	bl	8004a78 <HAL_RCC_ClockConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002168:	f000 fe9a 	bl	8002ea0 <Error_Handler>
  }
}
 800216c:	bf00      	nop
 800216e:	3750      	adds	r7, #80	; 0x50
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2224      	movs	r2, #36	; 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f008 f95f 	bl	800a44e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <MX_TIM1_Init+0xa8>)
 800219a:	4a23      	ldr	r2, [pc, #140]	; (8002228 <MX_TIM1_Init+0xac>)
 800219c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021c4:	2303      	movs	r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021cc:	2301      	movs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021dc:	2301      	movs	r3, #1
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	4619      	mov	r1, r3
 80021ee:	480d      	ldr	r0, [pc, #52]	; (8002224 <MX_TIM1_Init+0xa8>)
 80021f0:	f003 f876 	bl	80052e0 <HAL_TIM_Encoder_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80021fa:	f000 fe51 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4806      	ldr	r0, [pc, #24]	; (8002224 <MX_TIM1_Init+0xa8>)
 800220c:	f003 fdf8 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002216:	f000 fe43 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	3730      	adds	r7, #48	; 0x30
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000450 	.word	0x20000450
 8002228:	40010000 	.word	0x40010000

0800222c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	; 0x30
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002232:	f107 030c 	add.w	r3, r7, #12
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f008 f907 	bl	800a44e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <MX_TIM2_Init+0xa4>)
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002250:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <MX_TIM2_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_TIM2_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <MX_TIM2_Init+0xa4>)
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_TIM2_Init+0xa4>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <MX_TIM2_Init+0xa4>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002270:	2301      	movs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002288:	2301      	movs	r3, #1
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MX_TIM2_Init+0xa4>)
 800229c:	f003 f820 	bl	80052e0 <HAL_TIM_Encoder_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022a6:	f000 fdfb 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_TIM2_Init+0xa4>)
 80022b8:	f003 fda2 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022c2:	f000 fded 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3730      	adds	r7, #48	; 0x30
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000498 	.word	0x20000498

080022d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08c      	sub	sp, #48	; 0x30
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f008 f8b3 	bl	800a44e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <MX_TIM3_Init+0xa0>)
 80022f2:	4a21      	ldr	r2, [pc, #132]	; (8002378 <MX_TIM3_Init+0xa4>)
 80022f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022f6:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_TIM3_Init+0xa0>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_TIM3_Init+0xa0>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002302:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_TIM3_Init+0xa0>)
 8002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_TIM3_Init+0xa0>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002310:	4b18      	ldr	r3, [pc, #96]	; (8002374 <MX_TIM3_Init+0xa0>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002316:	2303      	movs	r3, #3
 8002318:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800232e:	2301      	movs	r3, #1
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <MX_TIM3_Init+0xa0>)
 8002342:	f002 ffcd 	bl	80052e0 <HAL_TIM_Encoder_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800234c:	f000 fda8 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_TIM3_Init+0xa0>)
 800235e:	f003 fd4f 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002368:	f000 fd9a 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200004e0 	.word	0x200004e0
 8002378:	40000400 	.word	0x40000400

0800237c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	615a      	str	r2, [r3, #20]
 800239c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800239e:	4b32      	ldr	r3, [pc, #200]	; (8002468 <MX_TIM4_Init+0xec>)
 80023a0:	4a32      	ldr	r2, [pc, #200]	; (800246c <MX_TIM4_Init+0xf0>)
 80023a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7-1;
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <MX_TIM4_Init+0xec>)
 80023a6:	2206      	movs	r2, #6
 80023a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b2f      	ldr	r3, [pc, #188]	; (8002468 <MX_TIM4_Init+0xec>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <MX_TIM4_Init+0xec>)
 80023b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <MX_TIM4_Init+0xec>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <MX_TIM4_Init+0xec>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023c4:	4828      	ldr	r0, [pc, #160]	; (8002468 <MX_TIM4_Init+0xec>)
 80023c6:	f002 fe73 	bl	80050b0 <HAL_TIM_PWM_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80023d0:	f000 fd66 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023dc:	f107 0320 	add.w	r3, r7, #32
 80023e0:	4619      	mov	r1, r3
 80023e2:	4821      	ldr	r0, [pc, #132]	; (8002468 <MX_TIM4_Init+0xec>)
 80023e4:	f003 fd0c 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80023ee:	f000 fd57 	bl	8002ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023f2:	2360      	movs	r3, #96	; 0x60
 80023f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	4619      	mov	r1, r3
 8002408:	4817      	ldr	r0, [pc, #92]	; (8002468 <MX_TIM4_Init+0xec>)
 800240a:	f003 f98d 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002414:	f000 fd44 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2204      	movs	r2, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <MX_TIM4_Init+0xec>)
 8002420:	f003 f982 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800242a:	f000 fd39 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2208      	movs	r2, #8
 8002432:	4619      	mov	r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <MX_TIM4_Init+0xec>)
 8002436:	f003 f977 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002440:	f000 fd2e 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	220c      	movs	r2, #12
 8002448:	4619      	mov	r1, r3
 800244a:	4807      	ldr	r0, [pc, #28]	; (8002468 <MX_TIM4_Init+0xec>)
 800244c:	f003 f96c 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002456:	f000 fd23 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <MX_TIM4_Init+0xec>)
 800245c:	f000 fec2 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000528 	.word	0x20000528
 800246c:	40000800 	.word	0x40000800

08002470 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f007 ffe5 	bl	800a44e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <MX_TIM5_Init+0xa0>)
 800248e:	4a21      	ldr	r2, [pc, #132]	; (8002514 <MX_TIM5_Init+0xa4>)
 8002490:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <MX_TIM5_Init+0xa0>)
 8002494:	2200      	movs	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002498:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <MX_TIM5_Init+0xa0>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <MX_TIM5_Init+0xa0>)
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_TIM5_Init+0xa0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_TIM5_Init+0xa0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024b2:	2303      	movs	r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ba:	2301      	movs	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4619      	mov	r1, r3
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <MX_TIM5_Init+0xa0>)
 80024de:	f002 feff 	bl	80052e0 <HAL_TIM_Encoder_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80024e8:	f000 fcda 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <MX_TIM5_Init+0xa0>)
 80024fa:	f003 fc81 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002504:	f000 fccc 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	3730      	adds	r7, #48	; 0x30
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000570 	.word	0x20000570
 8002514:	40000c00 	.word	0x40000c00

08002518 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b092      	sub	sp, #72	; 0x48
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800251e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
 8002538:	615a      	str	r2, [r3, #20]
 800253a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2220      	movs	r2, #32
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f007 ff83 	bl	800a44e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <MX_TIM8_Init+0x118>)
 800254a:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <MX_TIM8_Init+0x11c>)
 800254c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 6;
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <MX_TIM8_Init+0x118>)
 8002550:	2206      	movs	r2, #6
 8002552:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <MX_TIM8_Init+0x118>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800255a:	4b35      	ldr	r3, [pc, #212]	; (8002630 <MX_TIM8_Init+0x118>)
 800255c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002560:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <MX_TIM8_Init+0x118>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002568:	4b31      	ldr	r3, [pc, #196]	; (8002630 <MX_TIM8_Init+0x118>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256e:	4b30      	ldr	r3, [pc, #192]	; (8002630 <MX_TIM8_Init+0x118>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002574:	482e      	ldr	r0, [pc, #184]	; (8002630 <MX_TIM8_Init+0x118>)
 8002576:	f002 fd9b 	bl	80050b0 <HAL_TIM_PWM_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002580:	f000 fc8e 	bl	8002ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800258c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002590:	4619      	mov	r1, r3
 8002592:	4827      	ldr	r0, [pc, #156]	; (8002630 <MX_TIM8_Init+0x118>)
 8002594:	f003 fc34 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800259e:	f000 fc7f 	bl	8002ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a2:	2360      	movs	r3, #96	; 0x60
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c2:	2208      	movs	r2, #8
 80025c4:	4619      	mov	r1, r3
 80025c6:	481a      	ldr	r0, [pc, #104]	; (8002630 <MX_TIM8_Init+0x118>)
 80025c8:	f003 f8ae 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80025d2:	f000 fc65 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	220c      	movs	r2, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	; (8002630 <MX_TIM8_Init+0x118>)
 80025e0:	f003 f8a2 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80025ea:	f000 fc59 	bl	8002ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	4807      	ldr	r0, [pc, #28]	; (8002630 <MX_TIM8_Init+0x118>)
 8002612:	f003 fc71 	bl	8005ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800261c:	f000 fc40 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <MX_TIM8_Init+0x118>)
 8002622:	f000 fddf 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 8002626:	bf00      	nop
 8002628:	3748      	adds	r7, #72	; 0x48
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200005b8 	.word	0x200005b8
 8002634:	40010400 	.word	0x40010400

08002638 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
 800264c:	615a      	str	r2, [r3, #20]
 800264e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MX_TIM9_Init+0x98>)
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <MX_TIM9_Init+0x9c>)
 8002654:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 6;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <MX_TIM9_Init+0x98>)
 8002658:	2206      	movs	r2, #6
 800265a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <MX_TIM9_Init+0x98>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_TIM9_Init+0x98>)
 8002664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002668:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_TIM9_Init+0x98>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_TIM9_Init+0x98>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002676:	4816      	ldr	r0, [pc, #88]	; (80026d0 <MX_TIM9_Init+0x98>)
 8002678:	f002 fd1a 	bl	80050b0 <HAL_TIM_PWM_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002682:	f000 fc0d 	bl	8002ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002686:	2360      	movs	r3, #96	; 0x60
 8002688:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2200      	movs	r2, #0
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <MX_TIM9_Init+0x98>)
 800269e:	f003 f843 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80026a8:	f000 fbfa 	bl	8002ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2204      	movs	r2, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <MX_TIM9_Init+0x98>)
 80026b4:	f003 f838 	bl	8005728 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80026be:	f000 fbef 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80026c2:	4803      	ldr	r0, [pc, #12]	; (80026d0 <MX_TIM9_Init+0x98>)
 80026c4:	f000 fd8e 	bl	80031e4 <HAL_TIM_MspPostInit>

}
 80026c8:	bf00      	nop
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000600 	.word	0x20000600
 80026d4:	40014000 	.word	0x40014000

080026d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <MX_USART1_UART_Init+0x50>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_USART1_UART_Init+0x4c>)
 8002710:	f003 fc58 	bl	8005fc4 <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800271a:	f000 fbc1 	bl	8002ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000648 	.word	0x20000648
 8002728:	40011000 	.word	0x40011000

0800272c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_DMA_Init+0x3c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <MX_DMA_Init+0x3c>)
 800273c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_DMA_Init+0x3c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2105      	movs	r1, #5
 8002752:	203a      	movs	r0, #58	; 0x3a
 8002754:	f001 f933 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002758:	203a      	movs	r0, #58	; 0x3a
 800275a:	f001 f94c 	bl	80039f6 <HAL_NVIC_EnableIRQ>

}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	60da      	str	r2, [r3, #12]
 8002780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <MX_GPIO_Init+0xc0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a28      	ldr	r2, [pc, #160]	; (800282c <MX_GPIO_Init+0xc0>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b26      	ldr	r3, [pc, #152]	; (800282c <MX_GPIO_Init+0xc0>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <MX_GPIO_Init+0xc0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <MX_GPIO_Init+0xc0>)
 80027a8:	f043 0308 	orr.w	r3, r3, #8
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_GPIO_Init+0xc0>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <MX_GPIO_Init+0xc0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <MX_GPIO_Init+0xc0>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_GPIO_Init+0xc0>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <MX_GPIO_Init+0xc0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <MX_GPIO_Init+0xc0>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_GPIO_Init+0xc0>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : Sensor_J3_Pin Sensor_J4_Pin */
  GPIO_InitStruct.Pin = Sensor_J3_Pin|Sensor_J4_Pin;
 80027f2:	2330      	movs	r3, #48	; 0x30
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	480a      	ldr	r0, [pc, #40]	; (8002830 <MX_GPIO_Init+0xc4>)
 8002806:	f001 fd0b 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor_J1_Pin Sensor_J2_Pin */
  GPIO_InitStruct.Pin = Sensor_J1_Pin|Sensor_J2_Pin;
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002812:	2301      	movs	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	4805      	ldr	r0, [pc, #20]	; (8002834 <MX_GPIO_Init+0xc8>)
 800281e:	f001 fcff 	bl	8004220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002822:	bf00      	nop
 8002824:	3728      	adds	r7, #40	; 0x28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020800 	.word	0x40020800

08002838 <StartTaskLogic>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLogic */
void StartTaskLogic(void const * argument)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8002840:	200a      	movs	r0, #10
 8002842:	f004 fd64 	bl	800730e <osDelay>
 8002846:	e7fb      	b.n	8002840 <StartTaskLogic+0x8>

08002848 <StartTaskSetHome>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetHome */
void StartTaskSetHome(void const * argument)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetHome */
  /* Infinite loop */
  for(;;)
  {
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	48a6      	ldr	r0, [pc, #664]	; (8002aec <StartTaskSetHome+0x2a4>)
 8002854:	f001 fe80 	bl	8004558 <HAL_GPIO_ReadPin>
 8002858:	4603      	mov	r3, r0
 800285a:	b25a      	sxtb	r2, r3
 800285c:	4ba4      	ldr	r3, [pc, #656]	; (8002af0 <StartTaskSetHome+0x2a8>)
 800285e:	701a      	strb	r2, [r3, #0]
	sensor.sensor2 = HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin);
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	48a2      	ldr	r0, [pc, #648]	; (8002aec <StartTaskSetHome+0x2a4>)
 8002864:	f001 fe78 	bl	8004558 <HAL_GPIO_ReadPin>
 8002868:	4603      	mov	r3, r0
 800286a:	b25a      	sxtb	r2, r3
 800286c:	4ba0      	ldr	r3, [pc, #640]	; (8002af0 <StartTaskSetHome+0x2a8>)
 800286e:	705a      	strb	r2, [r3, #1]
	sensor.sensor3 = HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin);
 8002870:	2110      	movs	r1, #16
 8002872:	48a0      	ldr	r0, [pc, #640]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002874:	f001 fe70 	bl	8004558 <HAL_GPIO_ReadPin>
 8002878:	4603      	mov	r3, r0
 800287a:	b25a      	sxtb	r2, r3
 800287c:	4b9c      	ldr	r3, [pc, #624]	; (8002af0 <StartTaskSetHome+0x2a8>)
 800287e:	709a      	strb	r2, [r3, #2]
	sensor.sensor4 = HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin);
 8002880:	2120      	movs	r1, #32
 8002882:	489c      	ldr	r0, [pc, #624]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002884:	f001 fe68 	bl	8004558 <HAL_GPIO_ReadPin>
 8002888:	4603      	mov	r3, r0
 800288a:	b25a      	sxtb	r2, r3
 800288c:	4b98      	ldr	r3, [pc, #608]	; (8002af0 <StartTaskSetHome+0x2a8>)
 800288e:	70da      	strb	r2, [r3, #3]
	if(FlagStart.startSetHome == 1){
 8002890:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <StartTaskSetHome+0x2b0>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d111      	bne.n	80028bc <StartTaskSetHome+0x74>
		sethomeJ.sethomeJ1 = 0;
 8002898:	4b98      	ldr	r3, [pc, #608]	; (8002afc <StartTaskSetHome+0x2b4>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
		sethomeJ.sethomeJ2 = 0;
 800289e:	4b97      	ldr	r3, [pc, #604]	; (8002afc <StartTaskSetHome+0x2b4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	705a      	strb	r2, [r3, #1]
		sethomeJ.sethomeJ3 = 0;
 80028a4:	4b95      	ldr	r3, [pc, #596]	; (8002afc <StartTaskSetHome+0x2b4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	709a      	strb	r2, [r3, #2]
		sethomeJ.sethomeJ4 = 0;
 80028aa:	4b94      	ldr	r3, [pc, #592]	; (8002afc <StartTaskSetHome+0x2b4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	70da      	strb	r2, [r3, #3]
		FlagStart.startProgram = 0;
 80028b0:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <StartTaskSetHome+0x2b0>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	705a      	strb	r2, [r3, #1]
		FlagStart.startSetHome = 0;
 80028b6:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <StartTaskSetHome+0x2b0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
	}
	if(FlagStart.startProgram == 0){
 80028bc:	4b8e      	ldr	r3, [pc, #568]	; (8002af8 <StartTaskSetHome+0x2b0>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 810f 	bne.w	8002ae4 <StartTaskSetHome+0x29c>
		if(sethomeJ.sethomeJ1 == 0){
 80028c6:	4b8d      	ldr	r3, [pc, #564]	; (8002afc <StartTaskSetHome+0x2b4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d16b      	bne.n	80029a6 <StartTaskSetHome+0x15e>
			if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	4886      	ldr	r0, [pc, #536]	; (8002aec <StartTaskSetHome+0x2a4>)
 80028d2:	f001 fe41 	bl	8004558 <HAL_GPIO_ReadPin>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d11c      	bne.n	8002916 <StartTaskSetHome+0xce>
				osDelay(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f004 fd16 	bl	800730e <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin) == 1){
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	4881      	ldr	r0, [pc, #516]	; (8002aec <StartTaskSetHome+0x2a4>)
 80028e6:	f001 fe37 	bl	8004558 <HAL_GPIO_ReadPin>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d15a      	bne.n	80029a6 <StartTaskSetHome+0x15e>
					ResetCount(&ENC_LINK1, 1);
 80028f0:	2101      	movs	r1, #1
 80028f2:	4883      	ldr	r0, [pc, #524]	; (8002b00 <StartTaskSetHome+0x2b8>)
 80028f4:	f7fe fc8c 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ1 = 0;
 80028f8:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <StartTaskSetHome+0x2bc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
					sethomeJ.sethomeJ1 = 1;
 80028fe:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <StartTaskSetHome+0x2b4>)
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
					Angle.AngleLink1 = 0;
 8002904:	4b80      	ldr	r3, [pc, #512]	; (8002b08 <StartTaskSetHome+0x2c0>)
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = 0;
 800290c:	4b7f      	ldr	r3, [pc, #508]	; (8002b0c <StartTaskSetHome+0x2c4>)
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	e047      	b.n	80029a6 <StartTaskSetHome+0x15e>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ1 = -400;
 8002916:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002918:	f64f 6270 	movw	r2, #65136	; 0xfe70
 800291c:	801a      	strh	r2, [r3, #0]
				if(CountRead(&ENC_LINK1, count_ModeDegree) > 90 && SpeedSetHomeJ.SpeedSetHomeJ1 > 0){
 800291e:	2102      	movs	r1, #2
 8002920:	4877      	ldr	r0, [pc, #476]	; (8002b00 <StartTaskSetHome+0x2b8>)
 8002922:	f7fe fc0f 	bl	8001144 <CountRead>
 8002926:	ec51 0b10 	vmov	r0, r1, d0
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	4b78      	ldr	r3, [pc, #480]	; (8002b10 <StartTaskSetHome+0x2c8>)
 8002930:	f7fe f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00e      	beq.n	8002958 <StartTaskSetHome+0x110>
 800293a:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <StartTaskSetHome+0x2bc>)
 800293c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002940:	2b00      	cmp	r3, #0
 8002942:	dd09      	ble.n	8002958 <StartTaskSetHome+0x110>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294a:	b29b      	uxth	r3, r3
 800294c:	425b      	negs	r3, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e01b      	b.n	8002990 <StartTaskSetHome+0x148>
				}
				else if(CountRead(&ENC_LINK1, count_ModeDegree) < -90 && SpeedSetHomeJ.SpeedSetHomeJ1 < 0) {
 8002958:	2102      	movs	r1, #2
 800295a:	4869      	ldr	r0, [pc, #420]	; (8002b00 <StartTaskSetHome+0x2b8>)
 800295c:	f7fe fbf2 	bl	8001144 <CountRead>
 8002960:	ec51 0b10 	vmov	r0, r1, d0
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <StartTaskSetHome+0x2cc>)
 800296a:	f7fe f8b7 	bl	8000adc <__aeabi_dcmplt>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <StartTaskSetHome+0x148>
 8002974:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da08      	bge.n	8002990 <StartTaskSetHome+0x148>
					SpeedSetHomeJ.SpeedSetHomeJ1 *= -1;
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002984:	b29b      	uxth	r3, r3
 8002986:	425b      	negs	r3, r3
 8002988:	b29b      	uxth	r3, r3
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <StartTaskSetHome+0x2bc>)
 800298e:	801a      	strh	r2, [r3, #0]
				}
				Drive(&Motor_LINK1, &htim8, SpeedSetHomeJ.SpeedSetHomeJ1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8002990:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002996:	461a      	mov	r2, r3
 8002998:	230c      	movs	r3, #12
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2308      	movs	r3, #8
 800299e:	495e      	ldr	r1, [pc, #376]	; (8002b18 <StartTaskSetHome+0x2d0>)
 80029a0:	485e      	ldr	r0, [pc, #376]	; (8002b1c <StartTaskSetHome+0x2d4>)
 80029a2:	f7fe fc4c 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ2 == 0){
 80029a6:	4b55      	ldr	r3, [pc, #340]	; (8002afc <StartTaskSetHome+0x2b4>)
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d130      	bne.n	8002a10 <StartTaskSetHome+0x1c8>
			if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	484e      	ldr	r0, [pc, #312]	; (8002aec <StartTaskSetHome+0x2a4>)
 80029b2:	f001 fdd1 	bl	8004558 <HAL_GPIO_ReadPin>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d11a      	bne.n	80029f2 <StartTaskSetHome+0x1aa>
				osDelay(1);
 80029bc:	2001      	movs	r0, #1
 80029be:	f004 fca6 	bl	800730e <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J2_GPIO_Port, Sensor_J2_Pin) == 1){
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	4849      	ldr	r0, [pc, #292]	; (8002aec <StartTaskSetHome+0x2a4>)
 80029c6:	f001 fdc7 	bl	8004558 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d11f      	bne.n	8002a10 <StartTaskSetHome+0x1c8>
					ResetCount(&ENC_LINK2, 1);
 80029d0:	2101      	movs	r1, #1
 80029d2:	4853      	ldr	r0, [pc, #332]	; (8002b20 <StartTaskSetHome+0x2d8>)
 80029d4:	f7fe fc1c 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ2 = 0;
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <StartTaskSetHome+0x2bc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	805a      	strh	r2, [r3, #2]
					sethomeJ.sethomeJ2 = 1;
 80029de:	4b47      	ldr	r3, [pc, #284]	; (8002afc <StartTaskSetHome+0x2b4>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
					Angle.AngleLink2 = 187;
 80029e4:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <StartTaskSetHome+0x2c0>)
 80029e6:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <StartTaskSetHome+0x2dc>)
 80029e8:	605a      	str	r2, [r3, #4]
					Setpoint.p0_2 = 187;
 80029ea:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <StartTaskSetHome+0x2c4>)
 80029ec:	4a4d      	ldr	r2, [pc, #308]	; (8002b24 <StartTaskSetHome+0x2dc>)
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
 80029f0:	e00e      	b.n	8002a10 <StartTaskSetHome+0x1c8>

				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ2 = 400;
 80029f2:	4b44      	ldr	r3, [pc, #272]	; (8002b04 <StartTaskSetHome+0x2bc>)
 80029f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80029f8:	805a      	strh	r2, [r3, #2]
				Drive(&Motor_LINK2, &htim4, SpeedSetHomeJ.SpeedSetHomeJ2, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80029fa:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <StartTaskSetHome+0x2bc>)
 80029fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a00:	461a      	mov	r2, r3
 8002a02:	230c      	movs	r3, #12
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	2308      	movs	r3, #8
 8002a08:	4947      	ldr	r1, [pc, #284]	; (8002b28 <StartTaskSetHome+0x2e0>)
 8002a0a:	4848      	ldr	r0, [pc, #288]	; (8002b2c <StartTaskSetHome+0x2e4>)
 8002a0c:	f7fe fc17 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ3 == 0){
 8002a10:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <StartTaskSetHome+0x2b4>)
 8002a12:	789b      	ldrb	r3, [r3, #2]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d130      	bne.n	8002a7a <StartTaskSetHome+0x232>
			if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002a18:	2110      	movs	r1, #16
 8002a1a:	4836      	ldr	r0, [pc, #216]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002a1c:	f001 fd9c 	bl	8004558 <HAL_GPIO_ReadPin>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11a      	bne.n	8002a5c <StartTaskSetHome+0x214>
				osDelay(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f004 fc71 	bl	800730e <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J3_GPIO_Port, Sensor_J3_Pin) == 0){
 8002a2c:	2110      	movs	r1, #16
 8002a2e:	4831      	ldr	r0, [pc, #196]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002a30:	f001 fd92 	bl	8004558 <HAL_GPIO_ReadPin>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11f      	bne.n	8002a7a <StartTaskSetHome+0x232>
					ResetCount(&ENC_LINK3, 1);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	483c      	ldr	r0, [pc, #240]	; (8002b30 <StartTaskSetHome+0x2e8>)
 8002a3e:	f7fe fbe7 	bl	8001210 <ResetCount>
					sethomeJ.sethomeJ3 = 1;
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <StartTaskSetHome+0x2b4>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	709a      	strb	r2, [r3, #2]
					SpeedSetHomeJ.SpeedSetHomeJ3 = 0;
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	809a      	strh	r2, [r3, #4]
					Angle.AngleLink3 = -135;
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <StartTaskSetHome+0x2c0>)
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <StartTaskSetHome+0x2ec>)
 8002a52:	609a      	str	r2, [r3, #8]
					Setpoint.p0_3 = -135;
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <StartTaskSetHome+0x2c4>)
 8002a56:	4a37      	ldr	r2, [pc, #220]	; (8002b34 <StartTaskSetHome+0x2ec>)
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
 8002a5a:	e00e      	b.n	8002a7a <StartTaskSetHome+0x232>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ3 = -300;
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002a5e:	f64f 62d4 	movw	r2, #65236	; 0xfed4
 8002a62:	809a      	strh	r2, [r3, #4]
				Drive(&Motor_LINK3, &htim4, SpeedSetHomeJ.SpeedSetHomeJ3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002a66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	492d      	ldr	r1, [pc, #180]	; (8002b28 <StartTaskSetHome+0x2e0>)
 8002a74:	4830      	ldr	r0, [pc, #192]	; (8002b38 <StartTaskSetHome+0x2f0>)
 8002a76:	f7fe fbe2 	bl	800123e <Drive>
			}
		}
		if(sethomeJ.sethomeJ4 == 0){
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <StartTaskSetHome+0x2b4>)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d130      	bne.n	8002ae4 <StartTaskSetHome+0x29c>
			if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002a82:	2120      	movs	r1, #32
 8002a84:	481b      	ldr	r0, [pc, #108]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002a86:	f001 fd67 	bl	8004558 <HAL_GPIO_ReadPin>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11a      	bne.n	8002ac6 <StartTaskSetHome+0x27e>
				osDelay(1);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f004 fc3c 	bl	800730e <osDelay>
				if(HAL_GPIO_ReadPin(Sensor_J4_GPIO_Port, Sensor_J4_Pin) == 0){
 8002a96:	2120      	movs	r1, #32
 8002a98:	4816      	ldr	r0, [pc, #88]	; (8002af4 <StartTaskSetHome+0x2ac>)
 8002a9a:	f001 fd5d 	bl	8004558 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11f      	bne.n	8002ae4 <StartTaskSetHome+0x29c>
					ResetCount(&ENC_LINK4, 1);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4825      	ldr	r0, [pc, #148]	; (8002b3c <StartTaskSetHome+0x2f4>)
 8002aa8:	f7fe fbb2 	bl	8001210 <ResetCount>
					SpeedSetHomeJ.SpeedSetHomeJ4 = 0;
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	80da      	strh	r2, [r3, #6]
					sethomeJ.sethomeJ4 = 1;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <StartTaskSetHome+0x2b4>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	70da      	strb	r2, [r3, #3]
					Angle.AngleLink4 = 90;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <StartTaskSetHome+0x2c0>)
 8002aba:	4a21      	ldr	r2, [pc, #132]	; (8002b40 <StartTaskSetHome+0x2f8>)
 8002abc:	60da      	str	r2, [r3, #12]
					Setpoint.p0_4 = 90;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <StartTaskSetHome+0x2c4>)
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <StartTaskSetHome+0x2f8>)
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac4:	e00e      	b.n	8002ae4 <StartTaskSetHome+0x29c>
				}
			}
			else {
				SpeedSetHomeJ.SpeedSetHomeJ4 = 300;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002ac8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002acc:	80da      	strh	r2, [r3, #6]
				Drive(&Motor_LINK4, &htim9, SpeedSetHomeJ.SpeedSetHomeJ4, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <StartTaskSetHome+0x2bc>)
 8002ad0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	4919      	ldr	r1, [pc, #100]	; (8002b44 <StartTaskSetHome+0x2fc>)
 8002ade:	481a      	ldr	r0, [pc, #104]	; (8002b48 <StartTaskSetHome+0x300>)
 8002ae0:	f7fe fbad 	bl	800123e <Drive>
		}
//		if(sethomeJ.sethomeJ1 == 1 && sethomeJ.sethomeJ2 == 1 && sethomeJ.sethomeJ3 == 1 && sethomeJ.sethomeJ4 == 1){
//			FlagStart.startProgram = 1;
//		}
	}
    osDelay(10);
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f004 fc12 	bl	800730e <osDelay>
	sensor.sensor1 = HAL_GPIO_ReadPin(Sensor_J1_GPIO_Port, Sensor_J1_Pin);
 8002aea:	e6b1      	b.n	8002850 <StartTaskSetHome+0x8>
 8002aec:	40020800 	.word	0x40020800
 8002af0:	20000714 	.word	0x20000714
 8002af4:	40020000 	.word	0x40020000
 8002af8:	20000700 	.word	0x20000700
 8002afc:	20000710 	.word	0x20000710
 8002b00:	20000778 	.word	0x20000778
 8002b04:	20000708 	.word	0x20000708
 8002b08:	20000718 	.word	0x20000718
 8002b0c:	20000728 	.word	0x20000728
 8002b10:	40568000 	.word	0x40568000
 8002b14:	c0568000 	.word	0xc0568000
 8002b18:	200005b8 	.word	0x200005b8
 8002b1c:	200007c0 	.word	0x200007c0
 8002b20:	20000878 	.word	0x20000878
 8002b24:	433b0000 	.word	0x433b0000
 8002b28:	20000528 	.word	0x20000528
 8002b2c:	200008c0 	.word	0x200008c0
 8002b30:	20000978 	.word	0x20000978
 8002b34:	c3070000 	.word	0xc3070000
 8002b38:	200009c0 	.word	0x200009c0
 8002b3c:	20000a78 	.word	0x20000a78
 8002b40:	42b40000 	.word	0x42b40000
 8002b44:	20000600 	.word	0x20000600
 8002b48:	20000ac0 	.word	0x20000ac0

08002b4c <StartTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPID */
void StartTaskPID(void const * argument)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPID */
  /* Infinite loop */
  for(;;)
  {
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <StartTaskPID+0x40>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <StartTaskPID+0x14>
 8002b5c:	f7fe fe78 	bl	8001850 <PID_LINK1_Pos>
	  if(sethomeJ.sethomeJ2 == 1)	PID_LINK2_Pos();
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <StartTaskPID+0x40>)
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <StartTaskPID+0x20>
 8002b68:	f7fe ff26 	bl	80019b8 <PID_LINK2_Pos>
	  if(sethomeJ.sethomeJ3 == 1)	PID_LINK3_Pos();
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <StartTaskPID+0x40>)
 8002b6e:	789b      	ldrb	r3, [r3, #2]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <StartTaskPID+0x2c>
 8002b74:	f7fe ffda 	bl	8001b2c <PID_LINK3_Pos>
	  if(sethomeJ.sethomeJ4 == 1)	PID_LINK4_Pos();
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <StartTaskPID+0x40>)
 8002b7a:	78db      	ldrb	r3, [r3, #3]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <StartTaskPID+0x38>
 8002b80:	f7ff f88e 	bl	8001ca0 <PID_LINK4_Pos>

	  osDelay(10);
 8002b84:	200a      	movs	r0, #10
 8002b86:	f004 fbc2 	bl	800730e <osDelay>
	  if(sethomeJ.sethomeJ1 == 1)	PID_LINK1_Pos();
 8002b8a:	e7e3      	b.n	8002b54 <StartTaskPID+0x8>
 8002b8c:	20000710 	.word	0x20000710

08002b90 <StartTaskTrajectory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTrajectory */
void StartTaskTrajectory(void const * argument)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTrajectory */
  /* Infinite loop */
  static uint8_t mode = 0;
  for(;;)
  {
	if(FlagStart.startProgram == 1){
 8002b98:	4bae      	ldr	r3, [pc, #696]	; (8002e54 <StartTaskTrajectory+0x2c4>)
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 8154 	bne.w	8002e4a <StartTaskTrajectory+0x2ba>
		switch(mode){
 8002ba2:	4bad      	ldr	r3, [pc, #692]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	f200 814e 	bhi.w	8002e48 <StartTaskTrajectory+0x2b8>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <StartTaskTrajectory+0x24>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002bc9 	.word	0x08002bc9
 8002bb8:	08002c39 	.word	0x08002c39
 8002bbc:	08002ca9 	.word	0x08002ca9
 8002bc0:	08002d19 	.word	0x08002d19
 8002bc4:	08002d89 	.word	0x08002d89
			case 0:
				if(T1 < Tf){
 8002bc8:	4ba4      	ldr	r3, [pc, #656]	; (8002e5c <StartTaskTrajectory+0x2cc>)
 8002bca:	ed93 7a00 	vldr	s14, [r3]
 8002bce:	4ba4      	ldr	r3, [pc, #656]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bdc:	d528      	bpl.n	8002c30 <StartTaskTrajectory+0xa0>
					T1 += 5;
 8002bde:	4b9f      	ldr	r3, [pc, #636]	; (8002e5c <StartTaskTrajectory+0x2cc>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002be8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bec:	4b9b      	ldr	r3, [pc, #620]	; (8002e5c <StartTaskTrajectory+0x2cc>)
 8002bee:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink1 = p(Setpoint.p0_1, Setpoint.setpoint1, Tf, 0, 0, T1);
 8002bf2:	4b9c      	ldr	r3, [pc, #624]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002bf4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bf8:	4b9a      	ldr	r3, [pc, #616]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	4b98      	ldr	r3, [pc, #608]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002c00:	edd3 6a00 	vldr	s13, [r3]
 8002c04:	4b95      	ldr	r3, [pc, #596]	; (8002e5c <StartTaskTrajectory+0x2cc>)
 8002c06:	ed93 6a00 	vldr	s12, [r3]
 8002c0a:	eef0 2a46 	vmov.f32	s5, s12
 8002c0e:	ed9f 2a96 	vldr	s4, [pc, #600]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002c12:	eddf 1a95 	vldr	s3, [pc, #596]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002c16:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1a:	eef0 0a47 	vmov.f32	s1, s14
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	f7fe fd0f 	bl	8001644 <p>
 8002c26:	eef0 7a40 	vmov.f32	s15, s0
 8002c2a:	4b90      	ldr	r3, [pc, #576]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002c2c:	edc3 7a00 	vstr	s15, [r3]
				}
				mode = 1;
 8002c30:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
				break;
 8002c36:	e108      	b.n	8002e4a <StartTaskTrajectory+0x2ba>
			case 1:
				if(T2 < Tf){
 8002c38:	4b8d      	ldr	r3, [pc, #564]	; (8002e70 <StartTaskTrajectory+0x2e0>)
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d528      	bpl.n	8002ca0 <StartTaskTrajectory+0x110>
					T2 += 5;
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <StartTaskTrajectory+0x2e0>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <StartTaskTrajectory+0x2e0>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink2 = p(Setpoint.p0_2, Setpoint.setpoint2, Tf, 0, 0, T2);
 8002c62:	4b80      	ldr	r3, [pc, #512]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002c64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c68:	4b7e      	ldr	r3, [pc, #504]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002c6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c6e:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002c70:	edd3 6a00 	vldr	s13, [r3]
 8002c74:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <StartTaskTrajectory+0x2e0>)
 8002c76:	ed93 6a00 	vldr	s12, [r3]
 8002c7a:	eef0 2a46 	vmov.f32	s5, s12
 8002c7e:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002c82:	eddf 1a79 	vldr	s3, [pc, #484]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002c86:	eeb0 1a66 	vmov.f32	s2, s13
 8002c8a:	eef0 0a47 	vmov.f32	s1, s14
 8002c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c92:	f7fe fcd7 	bl	8001644 <p>
 8002c96:	eef0 7a40 	vmov.f32	s15, s0
 8002c9a:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002c9c:	edc3 7a01 	vstr	s15, [r3, #4]
				}
				mode = 2;
 8002ca0:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
				break;
 8002ca6:	e0d0      	b.n	8002e4a <StartTaskTrajectory+0x2ba>

			case 2:
				if(T3 < Tf){
 8002ca8:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <StartTaskTrajectory+0x2e4>)
 8002caa:	ed93 7a00 	vldr	s14, [r3]
 8002cae:	4b6c      	ldr	r3, [pc, #432]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	d528      	bpl.n	8002d10 <StartTaskTrajectory+0x180>
					T3 += 5;
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <StartTaskTrajectory+0x2e4>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ccc:	4b69      	ldr	r3, [pc, #420]	; (8002e74 <StartTaskTrajectory+0x2e4>)
 8002cce:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink3 = p(Setpoint.p0_3, Setpoint.setpoint3, Tf, 0, 0, T3);
 8002cd2:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002cd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cd8:	4b62      	ldr	r3, [pc, #392]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002cda:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cde:	4b60      	ldr	r3, [pc, #384]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002ce0:	edd3 6a00 	vldr	s13, [r3]
 8002ce4:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <StartTaskTrajectory+0x2e4>)
 8002ce6:	ed93 6a00 	vldr	s12, [r3]
 8002cea:	eef0 2a46 	vmov.f32	s5, s12
 8002cee:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002cf2:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002cf6:	eeb0 1a66 	vmov.f32	s2, s13
 8002cfa:	eef0 0a47 	vmov.f32	s1, s14
 8002cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002d02:	f7fe fc9f 	bl	8001644 <p>
 8002d06:	eef0 7a40 	vmov.f32	s15, s0
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002d0c:	edc3 7a02 	vstr	s15, [r3, #8]
				}
				mode = 3;
 8002d10:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002d12:	2203      	movs	r2, #3
 8002d14:	701a      	strb	r2, [r3, #0]
				break;
 8002d16:	e098      	b.n	8002e4a <StartTaskTrajectory+0x2ba>
			case 3:
				if(T4 < Tf){
 8002d18:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <StartTaskTrajectory+0x2e8>)
 8002d1a:	ed93 7a00 	vldr	s14, [r3]
 8002d1e:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d528      	bpl.n	8002d80 <StartTaskTrajectory+0x1f0>
					T4 += 5;
 8002d2e:	4b52      	ldr	r3, [pc, #328]	; (8002e78 <StartTaskTrajectory+0x2e8>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d3c:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <StartTaskTrajectory+0x2e8>)
 8002d3e:	edc3 7a00 	vstr	s15, [r3]
					Angle.AngleLink4 = p(Setpoint.p0_4, Setpoint.setpoint4, Tf, 0, 0, T4);
 8002d42:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002d44:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d48:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002d4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <StartTaskTrajectory+0x2d0>)
 8002d50:	edd3 6a00 	vldr	s13, [r3]
 8002d54:	4b48      	ldr	r3, [pc, #288]	; (8002e78 <StartTaskTrajectory+0x2e8>)
 8002d56:	ed93 6a00 	vldr	s12, [r3]
 8002d5a:	eef0 2a46 	vmov.f32	s5, s12
 8002d5e:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002d62:	eddf 1a41 	vldr	s3, [pc, #260]	; 8002e68 <StartTaskTrajectory+0x2d8>
 8002d66:	eeb0 1a66 	vmov.f32	s2, s13
 8002d6a:	eef0 0a47 	vmov.f32	s1, s14
 8002d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d72:	f7fe fc67 	bl	8001644 <p>
 8002d76:	eef0 7a40 	vmov.f32	s15, s0
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002d7c:	edc3 7a03 	vstr	s15, [r3, #12]
				}
				mode = 4;
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002d82:	2204      	movs	r2, #4
 8002d84:	701a      	strb	r2, [r3, #0]
				break;
 8002d86:	e060      	b.n	8002e4a <StartTaskTrajectory+0x2ba>
			case 4:
				  if (Setpoint.setpoint1 != Setpoint.preSetpoint1)
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002d8a:	ed93 7a00 	vldr	s14, [r3]
 8002d8e:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002d90:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d94:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	d00b      	beq.n	8002db6 <StartTaskTrajectory+0x226>
				  {
					T1 = 0;
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <StartTaskTrajectory+0x2cc>)
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
					Setpoint.p0_1 = Angle.AngleLink1;
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002dac:	6213      	str	r3, [r2, #32]
					Setpoint.preSetpoint1 = Setpoint.setpoint1;
 8002dae:	4b2d      	ldr	r3, [pc, #180]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002db4:	6113      	str	r3, [r2, #16]
				  }
				  if (Setpoint.setpoint2 != Setpoint.preSetpoint2)
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002db8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002dbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	d00b      	beq.n	8002de4 <StartTaskTrajectory+0x254>
				  {
					T2 = 0;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <StartTaskTrajectory+0x2e0>)
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
					Setpoint.p0_2 = Angle.AngleLink2;
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002dda:	6253      	str	r3, [r2, #36]	; 0x24
					Setpoint.preSetpoint2 = Setpoint.setpoint2;
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002de2:	6153      	str	r3, [r2, #20]
				  }
				  if (Setpoint.setpoint3 != Setpoint.preSetpoint3)
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002de6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002dec:	edd3 7a06 	vldr	s15, [r3, #24]
 8002df0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	d00b      	beq.n	8002e12 <StartTaskTrajectory+0x282>
				  {
					T3 = 0;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <StartTaskTrajectory+0x2e4>)
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
					Setpoint.p0_3 = Angle.AngleLink3;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e08:	6293      	str	r3, [r2, #40]	; 0x28
					Setpoint.preSetpoint3 = Setpoint.setpoint3;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e10:	6193      	str	r3, [r2, #24]
				  }
				  if (Setpoint.setpoint4 != Setpoint.preSetpoint4)
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e14:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d00b      	beq.n	8002e40 <StartTaskTrajectory+0x2b0>
				  {
					T4 = 0;
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <StartTaskTrajectory+0x2e8>)
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
					Setpoint.p0_4 = Angle.AngleLink4;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <StartTaskTrajectory+0x2dc>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e36:	62d3      	str	r3, [r2, #44]	; 0x2c
					Setpoint.preSetpoint4 = Setpoint.setpoint4;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <StartTaskTrajectory+0x2d4>)
 8002e3e:	61d3      	str	r3, [r2, #28]
				  }
				  mode = 0;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <StartTaskTrajectory+0x2c8>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

				  break;
 8002e46:	e000      	b.n	8002e4a <StartTaskTrajectory+0x2ba>
			default:
			  break;
 8002e48:	bf00      	nop
		}
	}
    osDelay(1);
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f004 fa5f 	bl	800730e <osDelay>
	if(FlagStart.startProgram == 1){
 8002e50:	e6a2      	b.n	8002b98 <StartTaskTrajectory+0x8>
 8002e52:	bf00      	nop
 8002e54:	20000700 	.word	0x20000700
 8002e58:	20000be0 	.word	0x20000be0
 8002e5c:	20000768 	.word	0x20000768
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000728 	.word	0x20000728
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	20000718 	.word	0x20000718
 8002e70:	2000076c 	.word	0x2000076c
 8002e74:	20000770 	.word	0x20000770
 8002e78:	20000774 	.word	0x20000774

08002e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e8e:	f000 fca7 	bl	80037e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40002000 	.word	0x40002000

08002ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <Error_Handler+0x8>
	...

08002eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_MspInit+0x54>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_MspInit+0x54>)
 8002ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_MspInit+0x54>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_MspInit+0x54>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <HAL_MspInit+0x54>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_MspInit+0x54>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	210f      	movs	r1, #15
 8002eee:	f06f 0001 	mvn.w	r0, #1
 8002ef2:	f000 fd64 	bl	80039be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800

08002f04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b090      	sub	sp, #64	; 0x40
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a78      	ldr	r2, [pc, #480]	; (8003104 <HAL_TIM_Encoder_MspInit+0x200>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d135      	bne.n	8002f92 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	4b77      	ldr	r3, [pc, #476]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a76      	ldr	r2, [pc, #472]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b74      	ldr	r3, [pc, #464]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	4b70      	ldr	r3, [pc, #448]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a6f      	ldr	r2, [pc, #444]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_J1_Pin|ENC_B_J1_Pin;
 8002f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4864      	ldr	r0, [pc, #400]	; (800310c <HAL_TIM_Encoder_MspInit+0x208>)
 8002f7c:	f001 f950 	bl	8004220 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2105      	movs	r1, #5
 8002f84:	2018      	movs	r0, #24
 8002f86:	f000 fd1a 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002f8a:	2018      	movs	r0, #24
 8002f8c:	f000 fd33 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f90:	e0b3      	b.n	80030fa <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d14b      	bne.n	8003034 <HAL_TIM_Encoder_MspInit+0x130>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
 8002fa0:	4b59      	ldr	r3, [pc, #356]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a58      	ldr	r2, [pc, #352]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
 8002fac:	4b56      	ldr	r3, [pc, #344]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a51      	ldr	r2, [pc, #324]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a4a      	ldr	r2, [pc, #296]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b48      	ldr	r3, [pc, #288]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC_A_J2_Pin;
 8002ff0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003002:	2301      	movs	r3, #1
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_J2_GPIO_Port, &GPIO_InitStruct);
 8003006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	483f      	ldr	r0, [pc, #252]	; (800310c <HAL_TIM_Encoder_MspInit+0x208>)
 800300e:	f001 f907 	bl	8004220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENC_B_J2_Pin;
 8003012:	2308      	movs	r3, #8
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003022:	2301      	movs	r3, #1
 8003024:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_B_J2_GPIO_Port, &GPIO_InitStruct);
 8003026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302a:	4619      	mov	r1, r3
 800302c:	4838      	ldr	r0, [pc, #224]	; (8003110 <HAL_TIM_Encoder_MspInit+0x20c>)
 800302e:	f001 f8f7 	bl	8004220 <HAL_GPIO_Init>
}
 8003032:	e062      	b.n	80030fa <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM3)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a36      	ldr	r2, [pc, #216]	; (8003114 <HAL_TIM_Encoder_MspInit+0x210>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d12c      	bne.n	8003098 <HAL_TIM_Encoder_MspInit+0x194>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	4b31      	ldr	r3, [pc, #196]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a30      	ldr	r2, [pc, #192]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a29      	ldr	r2, [pc, #164]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC_A_J3_Pin|ENC_B_J3_Pin;
 8003076:	23c0      	movs	r3, #192	; 0xc0
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003086:	2302      	movs	r3, #2
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308e:	4619      	mov	r1, r3
 8003090:	481e      	ldr	r0, [pc, #120]	; (800310c <HAL_TIM_Encoder_MspInit+0x208>)
 8003092:	f001 f8c5 	bl	8004220 <HAL_GPIO_Init>
}
 8003096:	e030      	b.n	80030fa <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM5)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_TIM_Encoder_MspInit+0x214>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d12b      	bne.n	80030fa <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b18      	ldr	r3, [pc, #96]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_TIM_Encoder_MspInit+0x204>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC_A_J4_Pin|ENC_B_J4_Pin;
 80030da:	2303      	movs	r3, #3
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030ea:	2302      	movs	r3, #2
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030f2:	4619      	mov	r1, r3
 80030f4:	4805      	ldr	r0, [pc, #20]	; (800310c <HAL_TIM_Encoder_MspInit+0x208>)
 80030f6:	f001 f893 	bl	8004220 <HAL_GPIO_Init>
}
 80030fa:	bf00      	nop
 80030fc:	3740      	adds	r7, #64	; 0x40
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40023800 	.word	0x40023800
 800310c:	40020000 	.word	0x40020000
 8003110:	40020400 	.word	0x40020400
 8003114:	40000400 	.word	0x40000400
 8003118:	40000c00 	.word	0x40000c00

0800311c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <HAL_TIM_PWM_MspInit+0xb8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10e      	bne.n	800314c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800314a:	e03e      	b.n	80031ca <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM8)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_TIM_PWM_MspInit+0xc0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d11e      	bne.n	8003194 <HAL_TIM_PWM_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2105      	movs	r1, #5
 8003176:	202b      	movs	r0, #43	; 0x2b
 8003178:	f000 fc21 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800317c:	202b      	movs	r0, #43	; 0x2b
 800317e:	f000 fc3a 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	210f      	movs	r1, #15
 8003186:	202d      	movs	r0, #45	; 0x2d
 8003188:	f000 fc19 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800318c:	202d      	movs	r0, #45	; 0x2d
 800318e:	f000 fc32 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 8003192:	e01a      	b.n	80031ca <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM9)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_TIM_PWM_MspInit+0xc4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d115      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80031a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_TIM_PWM_MspInit+0xbc>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2105      	movs	r1, #5
 80031be:	2018      	movs	r0, #24
 80031c0:	f000 fbfd 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80031c4:	2018      	movs	r0, #24
 80031c6:	f000 fc16 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40010400 	.word	0x40010400
 80031e0:	40014000 	.word	0x40014000

080031e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a37      	ldr	r2, [pc, #220]	; (80032e0 <HAL_TIM_MspPostInit+0xfc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d11f      	bne.n	8003246 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a35      	ldr	r2, [pc, #212]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PMW3_A_Pin|PWM3_B_Pin|PWM2_A_Pin|PWM2_B_Pin;
 8003222:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003234:	2302      	movs	r3, #2
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	482a      	ldr	r0, [pc, #168]	; (80032e8 <HAL_TIM_MspPostInit+0x104>)
 8003240:	f000 ffee 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003244:	e047      	b.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_TIM_MspPostInit+0x108>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d11f      	bne.n	8003290 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6313      	str	r3, [r2, #48]	; 0x30
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_A_Pin|PWM1_B_Pin;
 800326c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003272:	2302      	movs	r3, #2
 8003274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327a:	2300      	movs	r3, #0
 800327c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800327e:	2303      	movs	r3, #3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	4619      	mov	r1, r3
 8003288:	4819      	ldr	r0, [pc, #100]	; (80032f0 <HAL_TIM_MspPostInit+0x10c>)
 800328a:	f000 ffc9 	bl	8004220 <HAL_GPIO_Init>
}
 800328e:	e022      	b.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_TIM_MspPostInit+0x110>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d11d      	bne.n	80032d6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_TIM_MspPostInit+0x100>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM4_A_Pin|PWM4_B_Pin;
 80032b6:	230c      	movs	r3, #12
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80032c6:	2303      	movs	r3, #3
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	4809      	ldr	r0, [pc, #36]	; (80032f8 <HAL_TIM_MspPostInit+0x114>)
 80032d2:	f000 ffa5 	bl	8004220 <HAL_GPIO_Init>
}
 80032d6:	bf00      	nop
 80032d8:	3728      	adds	r7, #40	; 0x28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40020c00 	.word	0x40020c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40014000 	.word	0x40014000
 80032f8:	40020000 	.word	0x40020000

080032fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_UART_MspInit+0xf0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d162      	bne.n	80033e4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 8003328:	f043 0310 	orr.w	r3, r3, #16
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b29      	ldr	r3, [pc, #164]	; (80033f0 <HAL_UART_MspInit+0xf4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003366:	2307      	movs	r3, #7
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	4820      	ldr	r0, [pc, #128]	; (80033f4 <HAL_UART_MspInit+0xf8>)
 8003372:	f000 ff55 	bl	8004220 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 8003378:	4a20      	ldr	r2, [pc, #128]	; (80033fc <HAL_UART_MspInit+0x100>)
 800337a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 800337e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003382:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 800338c:	2200      	movs	r2, #0
 800338e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 8003392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003396:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 800339a:	2200      	movs	r2, #0
 800339c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033b0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033b8:	480f      	ldr	r0, [pc, #60]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033ba:	f000 fb2f 	bl	8003a1c <HAL_DMA_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80033c4:	f7ff fd6c 	bl	8002ea0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ce:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_UART_MspInit+0xfc>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2105      	movs	r1, #5
 80033d8:	2025      	movs	r0, #37	; 0x25
 80033da:	f000 faf0 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033de:	2025      	movs	r0, #37	; 0x25
 80033e0:	f000 fb09 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033e4:	bf00      	nop
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020400 	.word	0x40020400
 80033f8:	20000690 	.word	0x20000690
 80033fc:	40026440 	.word	0x40026440

08003400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	; 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <HAL_InitTick+0xe4>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a32      	ldr	r2, [pc, #200]	; (80034e4 <HAL_InitTick+0xe4>)
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
 8003420:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <HAL_InitTick+0xe4>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800342c:	f107 0210 	add.w	r2, r7, #16
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4611      	mov	r1, r2
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fd3e 	bl	8004eb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003446:	f001 fd0f 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 800344a:	6378      	str	r0, [r7, #52]	; 0x34
 800344c:	e004      	b.n	8003458 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800344e:	f001 fd0b 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8003452:	4603      	mov	r3, r0
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <HAL_InitTick+0xe8>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	0c9b      	lsrs	r3, r3, #18
 8003462:	3b01      	subs	r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <HAL_InitTick+0xec>)
 8003468:	4a21      	ldr	r2, [pc, #132]	; (80034f0 <HAL_InitTick+0xf0>)
 800346a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_InitTick+0xec>)
 800346e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003472:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_InitTick+0xec>)
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800347a:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <HAL_InitTick+0xec>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003480:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <HAL_InitTick+0xec>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_InitTick+0xec>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800348c:	4817      	ldr	r0, [pc, #92]	; (80034ec <HAL_InitTick+0xec>)
 800348e:	f001 fd45 	bl	8004f1c <HAL_TIM_Base_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11b      	bne.n	80034d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80034a0:	4812      	ldr	r0, [pc, #72]	; (80034ec <HAL_InitTick+0xec>)
 80034a2:	f001 fd95 	bl	8004fd0 <HAL_TIM_Base_Start_IT>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80034ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80034b4:	202d      	movs	r0, #45	; 0x2d
 80034b6:	f000 fa9e 	bl	80039f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d808      	bhi.n	80034d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	202d      	movs	r0, #45	; 0x2d
 80034c6:	f000 fa7a 	bl	80039be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_InitTick+0xf4>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e002      	b.n	80034d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3738      	adds	r7, #56	; 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800
 80034e8:	431bde83 	.word	0x431bde83
 80034ec:	20000be4 	.word	0x20000be4
 80034f0:	40002000 	.word	0x40002000
 80034f4:	20000008 	.word	0x20000008

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034fc:	e7fe      	b.n	80034fc <NMI_Handler+0x4>

080034fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003502:	e7fe      	b.n	8003502 <HardFault_Handler+0x4>

08003504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <MemManage_Handler+0x4>

0800350a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <BusFault_Handler+0x4>

08003510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <UsageFault_Handler+0x4>

08003516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800352a:	f002 f80d 	bl	8005548 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800352e:	4803      	ldr	r0, [pc, #12]	; (800353c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003530:	f002 f80a 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000450 	.word	0x20000450
 800353c:	20000600 	.word	0x20000600

08003540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <USART1_IRQHandler+0x10>)
 8003546:	f002 fdeb 	bl	8006120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000648 	.word	0x20000648

08003554 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800355a:	f001 fff5 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200005b8 	.word	0x200005b8

08003568 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800356e:	f001 ffeb 	bl	8005548 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003572:	4803      	ldr	r0, [pc, #12]	; (8003580 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003574:	f001 ffe8 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	200005b8 	.word	0x200005b8
 8003580:	20000be4 	.word	0x20000be4

08003584 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <DMA2_Stream2_IRQHandler+0x10>)
 800358a:	f000 fbdf 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000690 	.word	0x20000690

08003598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return 1;
 800359c:	2301      	movs	r3, #1
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <_kill>:

int _kill(int pid, int sig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035b2:	f006 ffe3 	bl	800a57c <__errno>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2216      	movs	r2, #22
 80035ba:	601a      	str	r2, [r3, #0]
  return -1;
 80035bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <_exit>:

void _exit (int status)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ffe7 	bl	80035a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035da:	e7fe      	b.n	80035da <_exit+0x12>

080035dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e00a      	b.n	8003604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ee:	f3af 8000 	nop.w
 80035f2:	4601      	mov	r1, r0
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	60ba      	str	r2, [r7, #8]
 80035fa:	b2ca      	uxtb	r2, r1
 80035fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3301      	adds	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	dbf0      	blt.n	80035ee <_read+0x12>
  }

  return len;
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e009      	b.n	800363c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	60ba      	str	r2, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf1      	blt.n	8003628 <_write+0x12>
  }
  return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_close>:

int _close(int file)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003676:	605a      	str	r2, [r3, #4]
  return 0;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_isatty>:

int _isatty(int file)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f006 ff48 	bl	800a57c <__errno>
 80036ec:	4603      	mov	r3, r0
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20020000 	.word	0x20020000
 8003718:	00000400 	.word	0x00000400
 800371c:	20000c2c 	.word	0x20000c2c
 8003720:	20004ad8 	.word	0x20004ad8

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <SystemInit+0x20>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <SystemInit+0x20>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003780 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800374c:	f7ff ffea 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003752:	490d      	ldr	r1, [pc, #52]	; (8003788 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003758:	e002      	b.n	8003760 <LoopCopyDataInit>

0800375a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800375c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375e:	3304      	adds	r3, #4

08003760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003764:	d3f9      	bcc.n	800375a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003768:	4c0a      	ldr	r4, [pc, #40]	; (8003794 <LoopFillZerobss+0x22>)
  movs r3, #0
 800376a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800376c:	e001      	b.n	8003772 <LoopFillZerobss>

0800376e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003770:	3204      	adds	r2, #4

08003772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003774:	d3fb      	bcc.n	800376e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003776:	f006 ff07 	bl	800a588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377a:	f7fe fba9 	bl	8001ed0 <main>
  bx  lr    
 800377e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003788:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800378c:	0800dd0c 	.word	0x0800dd0c
  ldr r2, =_sbss
 8003790:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003794:	20004ad4 	.word	0x20004ad4

08003798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>
	...

0800379c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 f8ef 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	200f      	movs	r0, #15
 80037cc:	f7ff fe18 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7ff fb6c 	bl	8002eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x20>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_IncTick+0x24>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4413      	add	r3, r2
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_IncTick+0x24>)
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c
 8003804:	20000c30 	.word	0x20000c30

08003808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return uwTick;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <HAL_GetTick+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000c30 	.word	0x20000c30

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	; (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	6039      	str	r1, [r7, #0]
 80038ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db0a      	blt.n	80038ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	490c      	ldr	r1, [pc, #48]	; (800390c <__NVIC_SetPriority+0x4c>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	440b      	add	r3, r1
 80038e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038e8:	e00a      	b.n	8003900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4908      	ldr	r1, [pc, #32]	; (8003910 <__NVIC_SetPriority+0x50>)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	3b04      	subs	r3, #4
 80038f8:	0112      	lsls	r2, r2, #4
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	440b      	add	r3, r1
 80038fe:	761a      	strb	r2, [r3, #24]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003914:	b480      	push	{r7}
 8003916:	b089      	sub	sp, #36	; 0x24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f1c3 0307 	rsb	r3, r3, #7
 800392e:	2b04      	cmp	r3, #4
 8003930:	bf28      	it	cs
 8003932:	2304      	movcs	r3, #4
 8003934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3304      	adds	r3, #4
 800393a:	2b06      	cmp	r3, #6
 800393c:	d902      	bls.n	8003944 <NVIC_EncodePriority+0x30>
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3b03      	subs	r3, #3
 8003942:	e000      	b.n	8003946 <NVIC_EncodePriority+0x32>
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	f04f 32ff 	mov.w	r2, #4294967295
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	401a      	ands	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43d9      	mvns	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	4313      	orrs	r3, r2
         );
}
 800396e:	4618      	mov	r0, r3
 8003970:	3724      	adds	r7, #36	; 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003980:	f3bf 8f4f 	dsb	sy
}
 8003984:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <__NVIC_SystemReset+0x24>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800398e:	4904      	ldr	r1, [pc, #16]	; (80039a0 <__NVIC_SystemReset+0x24>)
 8003990:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <__NVIC_SystemReset+0x28>)
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003996:	f3bf 8f4f 	dsb	sy
}
 800399a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <__NVIC_SystemReset+0x20>
 80039a0:	e000ed00 	.word	0xe000ed00
 80039a4:	05fa0004 	.word	0x05fa0004

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff35 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d0:	f7ff ff4a 	bl	8003868 <__NVIC_GetPriorityGrouping>
 80039d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff9a 	bl	8003914 <NVIC_EncodePriority>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff69 	bl	80038c0 <__NVIC_SetPriority>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff3d 	bl	8003884 <__NVIC_EnableIRQ>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003a16:	f7ff ffb1 	bl	800397c <__NVIC_SystemReset>
	...

08003a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff feee 	bl	8003808 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e099      	b.n	8003b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a58:	e00f      	b.n	8003a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a5a:	f7ff fed5 	bl	8003808 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d908      	bls.n	8003a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2203      	movs	r2, #3
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e078      	b.n	8003b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e8      	bne.n	8003a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_DMA_Init+0x158>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4313      	orrs	r3, r2
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d117      	bne.n	8003b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb01 	bl	8004128 <DMA_CheckFifoParam>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e016      	b.n	8003b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fab8 	bl	80040bc <DMA_CalcBaseAndBitshift>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	f010803f 	.word	0xf010803f

08003b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_DMA_Start_IT+0x26>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e040      	b.n	8003c20 <HAL_DMA_Start_IT+0xa8>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12f      	bne.n	8003c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa4a 	bl	8004060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	223f      	movs	r2, #63	; 0x3f
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0216 	orr.w	r2, r2, #22
 8003be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e005      	b.n	8003c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c36:	f7ff fde7 	bl	8003808 <HAL_GetTick>
 8003c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e052      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0216 	bic.w	r2, r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_DMA_Abort+0x62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0208 	bic.w	r2, r2, #8
 8003c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003caa:	e013      	b.n	8003cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cac:	f7ff fdac 	bl	8003808 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e015      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	223f      	movs	r2, #63	; 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00c      	b.n	8003d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d58:	4b8e      	ldr	r3, [pc, #568]	; (8003f94 <HAL_DMA_IRQHandler+0x248>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <HAL_DMA_IRQHandler+0x24c>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2204      	movs	r2, #4
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d043      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2210      	movs	r2, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	e01f      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e016      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808f 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d136      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0216 	bic.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x1da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	223f      	movs	r2, #63	; 0x3f
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d07e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
        }
        return;
 8003f62:	e079      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e02c      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003f92:	bf00      	nop
 8003f94:	20000004 	.word	0x20000004
 8003f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01e      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0210 	bic.w	r2, r2, #16
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2205      	movs	r2, #5
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d307      	bcc.n	8004034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_DMA_IRQHandler+0x2cc>
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e000      	b.n	800405a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004058:	bf00      	nop
    }
  }
}
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800407c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b10      	subs	r3, #16
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <DMA_CalcBaseAndBitshift+0x64>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <DMA_CalcBaseAndBitshift+0x68>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d909      	bls.n	80040fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
 80040fc:	e007      	b.n	800410e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	0800d8b4 	.word	0x0800d8b4

08004128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11f      	bne.n	8004182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d856      	bhi.n	80041f6 <DMA_CheckFifoParam+0xce>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <DMA_CheckFifoParam+0x28>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004173 	.word	0x08004173
 8004158:	08004161 	.word	0x08004161
 800415c:	080041f7 	.word	0x080041f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d046      	beq.n	80041fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e043      	b.n	80041fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800417a:	d140      	bne.n	80041fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e03d      	b.n	80041fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d121      	bne.n	80041d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d837      	bhi.n	8004202 <DMA_CheckFifoParam+0xda>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <DMA_CheckFifoParam+0x70>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041af 	.word	0x080041af
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	080041c1 	.word	0x080041c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e030      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d025      	beq.n	8004206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041be:	e022      	b.n	8004206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c8:	d11f      	bne.n	800420a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ce:	e01c      	b.n	800420a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d903      	bls.n	80041de <DMA_CheckFifoParam+0xb6>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d003      	beq.n	80041e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041dc:	e018      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      break;
 80041e2:	e015      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e00b      	b.n	800420e <DMA_CheckFifoParam+0xe6>
      break;
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;   
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 800420e:	bf00      	nop
    }
  } 
  
  return status; 
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e16b      	b.n	8004514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 815a 	bne.w	800450e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426e:	2b02      	cmp	r3, #2
 8004270:	d130      	bne.n	80042d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0201 	and.w	r2, r3, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d017      	beq.n	8004310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d123      	bne.n	8004364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80b4 	beq.w	800450e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b60      	ldr	r3, [pc, #384]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a5f      	ldr	r2, [pc, #380]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	4b5d      	ldr	r3, [pc, #372]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c2:	4a5b      	ldr	r2, [pc, #364]	; (8004530 <HAL_GPIO_Init+0x310>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	3302      	adds	r3, #2
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_GPIO_Init+0x314>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x226>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_GPIO_Init+0x318>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x222>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_GPIO_Init+0x31c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x21e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	; (8004540 <HAL_GPIO_Init+0x320>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x21a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_GPIO_Init+0x324>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x216>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_GPIO_Init+0x328>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x212>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4c      	ldr	r2, [pc, #304]	; (800454c <HAL_GPIO_Init+0x32c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_GPIO_Init+0x330>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x20a>
 8004426:	2307      	movs	r3, #7
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442a:	2308      	movs	r3, #8
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_GPIO_Init+0x310>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_GPIO_Init+0x334>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_GPIO_Init+0x334>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_GPIO_Init+0x334>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae90 	bls.w	800423c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	4013      	ands	r3, r2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e001      	b.n	800457a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e267      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d075      	beq.n	8004692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045a6:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d00c      	beq.n	80045cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b2:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d112      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045be:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d10b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	4b7e      	ldr	r3, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05b      	beq.n	8004690 <HAL_RCC_OscConfig+0x108>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d157      	bne.n	8004690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e242      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d106      	bne.n	80045fc <HAL_RCC_OscConfig+0x74>
 80045ee:	4b76      	ldr	r3, [pc, #472]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a75      	ldr	r2, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e01d      	b.n	8004638 <HAL_RCC_OscConfig+0xb0>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x98>
 8004606:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800460c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6c      	ldr	r2, [pc, #432]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0xb0>
 8004620:	4b69      	ldr	r3, [pc, #420]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a68      	ldr	r2, [pc, #416]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7ff f8e2 	bl	8003808 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004648:	f7ff f8de 	bl	8003808 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e207      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0xc0>
 8004666:	e014      	b.n	8004692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7ff f8ce 	bl	8003808 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7ff f8ca 	bl	8003808 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1f3      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0xe8>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d063      	beq.n	8004766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800469e:	4b4a      	ldr	r3, [pc, #296]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d11c      	bne.n	80046f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b6:	4b44      	ldr	r3, [pc, #272]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c2:	4b41      	ldr	r3, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_RCC_OscConfig+0x152>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e1c7      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4937      	ldr	r1, [pc, #220]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	e03a      	b.n	8004766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f8:	4b34      	ldr	r3, [pc, #208]	; (80047cc <HAL_RCC_OscConfig+0x244>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7ff f883 	bl	8003808 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004706:	f7ff f87f 	bl	8003808 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e1a8      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4925      	ldr	r1, [pc, #148]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
 8004738:	e015      	b.n	8004766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCC_OscConfig+0x244>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7ff f862 	bl	8003808 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004748:	f7ff f85e 	bl	8003808 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e187      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d036      	beq.n	80047e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d016      	beq.n	80047a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_RCC_OscConfig+0x248>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7ff f842 	bl	8003808 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004788:	f7ff f83e 	bl	8003808 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e167      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_OscConfig+0x240>)
 800479c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x200>
 80047a6:	e01b      	b.n	80047e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_OscConfig+0x248>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ae:	f7ff f82b 	bl	8003808 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b4:	e00e      	b.n	80047d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b6:	f7ff f827 	bl	8003808 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d907      	bls.n	80047d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e150      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	42470000 	.word	0x42470000
 80047d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d4:	4b88      	ldr	r3, [pc, #544]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ea      	bne.n	80047b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8097 	beq.w	800491c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f2:	4b81      	ldr	r3, [pc, #516]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10f      	bne.n	800481e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	4b7d      	ldr	r3, [pc, #500]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a7c      	ldr	r2, [pc, #496]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
 800480e:	4b7a      	ldr	r3, [pc, #488]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481a:	2301      	movs	r3, #1
 800481c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b77      	ldr	r3, [pc, #476]	; (80049fc <HAL_RCC_OscConfig+0x474>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482a:	4b74      	ldr	r3, [pc, #464]	; (80049fc <HAL_RCC_OscConfig+0x474>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a73      	ldr	r2, [pc, #460]	; (80049fc <HAL_RCC_OscConfig+0x474>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004836:	f7fe ffe7 	bl	8003808 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fe ffe3 	bl	8003808 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e10c      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004850:	4b6a      	ldr	r3, [pc, #424]	; (80049fc <HAL_RCC_OscConfig+0x474>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d106      	bne.n	8004872 <HAL_RCC_OscConfig+0x2ea>
 8004864:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4a63      	ldr	r2, [pc, #396]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
 8004870:	e01c      	b.n	80048ac <HAL_RCC_OscConfig+0x324>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x30c>
 800487a:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	4a5e      	ldr	r2, [pc, #376]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004880:	f043 0304 	orr.w	r3, r3, #4
 8004884:	6713      	str	r3, [r2, #112]	; 0x70
 8004886:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	4a5b      	ldr	r2, [pc, #364]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	; 0x70
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0x324>
 8004894:	4b58      	ldr	r3, [pc, #352]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	4a57      	ldr	r2, [pc, #348]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	6713      	str	r3, [r2, #112]	; 0x70
 80048a0:	4b55      	ldr	r3, [pc, #340]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	4a54      	ldr	r2, [pc, #336]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80048a6:	f023 0304 	bic.w	r3, r3, #4
 80048aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fe ffa8 	bl	8003808 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fe ffa4 	bl	8003808 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e0cb      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d2:	4b49      	ldr	r3, [pc, #292]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0ee      	beq.n	80048bc <HAL_RCC_OscConfig+0x334>
 80048de:	e014      	b.n	800490a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e0:	f7fe ff92 	bl	8003808 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fe ff8e 	bl	8003808 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0b5      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fe:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490a:	7dfb      	ldrb	r3, [r7, #23]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004910:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	4a38      	ldr	r2, [pc, #224]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80a1 	beq.w	8004a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b08      	cmp	r3, #8
 8004930:	d05c      	beq.n	80049ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d141      	bne.n	80049be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <HAL_RCC_OscConfig+0x478>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe ff62 	bl	8003808 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fe ff5e 	bl	8003808 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e087      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	3b01      	subs	r3, #1
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	061b      	lsls	r3, r3, #24
 800498a:	491b      	ldr	r1, [pc, #108]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 800498c:	4313      	orrs	r3, r2
 800498e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x478>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004996:	f7fe ff37 	bl	8003808 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fe ff33 	bl	8003808 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e05c      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x416>
 80049bc:	e054      	b.n	8004a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <HAL_RCC_OscConfig+0x478>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe ff20 	bl	8003808 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fe ff1c 	bl	8003808 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e045      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCC_OscConfig+0x470>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x444>
 80049ea:	e03d      	b.n	8004a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e038      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40007000 	.word	0x40007000
 8004a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d028      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d121      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d11a      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d111      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800

08004a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0cc      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b68      	ldr	r3, [pc, #416]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d90c      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b63      	ldr	r3, [pc, #396]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0b8      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d020      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004acc:	4b59      	ldr	r3, [pc, #356]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4a58      	ldr	r2, [pc, #352]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ad6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a52      	ldr	r2, [pc, #328]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af0:	4b50      	ldr	r3, [pc, #320]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	494d      	ldr	r1, [pc, #308]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d044      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b16:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d119      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e07f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b36:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e06f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b46:	4b3b      	ldr	r3, [pc, #236]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e067      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b56:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4934      	ldr	r1, [pc, #208]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b68:	f7fe fe4e 	bl	8003808 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fe fe4a 	bl	8003808 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e04f      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 020c 	and.w	r2, r3, #12
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1eb      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d20c      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e032      	b.n	8004c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4916      	ldr	r1, [pc, #88]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bfe:	f000 f821 	bl	8004c44 <HAL_RCC_GetSysClockFreq>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	490a      	ldr	r1, [pc, #40]	; (8004c38 <HAL_RCC_ClockConfig+0x1c0>)
 8004c10:	5ccb      	ldrb	r3, [r1, r3]
 8004c12:	fa22 f303 	lsr.w	r3, r2, r3
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1c8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fbee 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023c00 	.word	0x40023c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	0800d89c 	.word	0x0800d89c
 8004c3c:	20000004 	.word	0x20000004
 8004c40:	20000008 	.word	0x20000008

08004c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c48:	b094      	sub	sp, #80	; 0x50
 8004c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c5c:	4b79      	ldr	r3, [pc, #484]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d00d      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x40>
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	f200 80e1 	bhi.w	8004e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_RCC_GetSysClockFreq+0x34>
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c76:	e0db      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c78:	4b73      	ldr	r3, [pc, #460]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c7c:	e0db      	b.n	8004e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c7e:	4b73      	ldr	r3, [pc, #460]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c82:	e0d8      	b.n	8004e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c84:	4b6f      	ldr	r3, [pc, #444]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d063      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30
 8004cae:	2300      	movs	r3, #0
 8004cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	f04f 0000 	mov.w	r0, #0
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	0159      	lsls	r1, r3, #5
 8004cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc8:	0150      	lsls	r0, r2, #5
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4621      	mov	r1, r4
 8004cd0:	1a51      	subs	r1, r2, r1
 8004cd2:	6139      	str	r1, [r7, #16]
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce8:	4659      	mov	r1, fp
 8004cea:	018b      	lsls	r3, r1, #6
 8004cec:	4651      	mov	r1, sl
 8004cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	018a      	lsls	r2, r1, #6
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8004cfc:	4659      	mov	r1, fp
 8004cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d16:	4690      	mov	r8, r2
 8004d18:	4699      	mov	r9, r3
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	eb18 0303 	adds.w	r3, r8, r3
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	462b      	mov	r3, r5
 8004d24:	eb49 0303 	adc.w	r3, r9, r3
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d36:	4629      	mov	r1, r5
 8004d38:	024b      	lsls	r3, r1, #9
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d40:	4621      	mov	r1, r4
 8004d42:	024a      	lsls	r2, r1, #9
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d54:	f7fb ff98 	bl	8000c88 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d60:	e058      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d62:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d72:	623b      	str	r3, [r7, #32]
 8004d74:	2300      	movs	r3, #0
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	f04f 0000 	mov.w	r0, #0
 8004d84:	f04f 0100 	mov.w	r1, #0
 8004d88:	0159      	lsls	r1, r3, #5
 8004d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8e:	0150      	lsls	r0, r2, #5
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4641      	mov	r1, r8
 8004d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004db4:	ebb2 040a 	subs.w	r4, r2, sl
 8004db8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	00eb      	lsls	r3, r5, #3
 8004dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dca:	00e2      	lsls	r2, r4, #3
 8004dcc:	4614      	mov	r4, r2
 8004dce:	461d      	mov	r5, r3
 8004dd0:	4643      	mov	r3, r8
 8004dd2:	18e3      	adds	r3, r4, r3
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	eb45 0303 	adc.w	r3, r5, r3
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dea:	4629      	mov	r1, r5
 8004dec:	028b      	lsls	r3, r1, #10
 8004dee:	4621      	mov	r1, r4
 8004df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df4:	4621      	mov	r1, r4
 8004df6:	028a      	lsls	r2, r1, #10
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	61fa      	str	r2, [r7, #28]
 8004e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e08:	f7fb ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4613      	mov	r3, r2
 8004e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e2e:	e002      	b.n	8004e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3750      	adds	r7, #80	; 0x50
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	00f42400 	.word	0x00f42400
 8004e4c:	007a1200 	.word	0x007a1200

08004e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000004 	.word	0x20000004

08004e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e6c:	f7ff fff0 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0a9b      	lsrs	r3, r3, #10
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4903      	ldr	r1, [pc, #12]	; (8004e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	0800d8ac 	.word	0x0800d8ac

08004e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e94:	f7ff ffdc 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	0b5b      	lsrs	r3, r3, #13
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	4903      	ldr	r1, [pc, #12]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea6:	5ccb      	ldrb	r3, [r1, r3]
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	0800d8ac 	.word	0x0800d8ac

08004eb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec8:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0203 	and.w	r2, r3, #3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_GetClockConfig+0x5c>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004efa:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <HAL_RCC_GetClockConfig+0x60>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0207 	and.w	r2, r3, #7
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	40023c00 	.word	0x40023c00

08004f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e041      	b.n	8004fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f839 	bl	8004fba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fcce 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d001      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e04e      	b.n	8005086 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a23      	ldr	r2, [pc, #140]	; (8005094 <HAL_TIM_Base_Start_IT+0xc4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005012:	d01d      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <HAL_TIM_Base_Start_IT+0xc8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_TIM_Base_Start_IT+0xcc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIM_Base_Start_IT+0xdc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d111      	bne.n	8005074 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d010      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005072:	e007      	b.n	8005084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40001800 	.word	0x40001800

080050b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e041      	b.n	8005146 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fe f820 	bl	800311c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f000 fc04 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start+0x24>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e022      	b.n	80051ba <HAL_TIM_PWM_Start+0x6a>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b04      	cmp	r3, #4
 8005178:	d109      	bne.n	800518e <HAL_TIM_PWM_Start+0x3e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	e015      	b.n	80051ba <HAL_TIM_PWM_Start+0x6a>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d109      	bne.n	80051a8 <HAL_TIM_PWM_Start+0x58>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e008      	b.n	80051ba <HAL_TIM_PWM_Start+0x6a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07c      	b.n	80052bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0x82>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d0:	e013      	b.n	80051fa <HAL_TIM_PWM_Start+0xaa>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x92>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_PWM_Start+0xaa>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	e003      	b.n	80051fa <HAL_TIM_PWM_Start+0xaa>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fdd6 	bl	8005db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <HAL_TIM_PWM_Start+0x174>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_PWM_Start+0xcc>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2c      	ldr	r2, [pc, #176]	; (80052c8 <HAL_TIM_PWM_Start+0x178>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_TIM_PWM_Start+0xd0>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_TIM_PWM_Start+0xd2>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a22      	ldr	r2, [pc, #136]	; (80052c4 <HAL_TIM_PWM_Start+0x174>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005248:	d01d      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <HAL_TIM_PWM_Start+0x17c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <HAL_TIM_PWM_Start+0x180>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1c      	ldr	r2, [pc, #112]	; (80052d4 <HAL_TIM_PWM_Start+0x184>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <HAL_TIM_PWM_Start+0x178>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <HAL_TIM_PWM_Start+0x188>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIM_PWM_Start+0x136>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <HAL_TIM_PWM_Start+0x18c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d010      	beq.n	80052ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	e007      	b.n	80052ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40001800 	.word	0x40001800

080052e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e097      	b.n	8005424 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fd fdfb 	bl	8002f04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2202      	movs	r2, #2
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f000 fae1 	bl	80058fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4313      	orrs	r3, r2
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005380:	f023 030c 	bic.w	r3, r3, #12
 8005384:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800538c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4313      	orrs	r3, r2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	011a      	lsls	r2, r3, #4
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	031b      	lsls	r3, r3, #12
 80053b0:	4313      	orrs	r3, r2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4313      	orrs	r3, r2
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005444:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800544c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005454:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d110      	bne.n	800547e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d102      	bne.n	8005468 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005462:	7b7b      	ldrb	r3, [r7, #13]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e069      	b.n	8005540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	e031      	b.n	80054e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d110      	bne.n	80054a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005484:	7bbb      	ldrb	r3, [r7, #14]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800548a:	7b3b      	ldrb	r3, [r7, #12]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d001      	beq.n	8005494 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e055      	b.n	8005540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a4:	e01d      	b.n	80054e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d108      	bne.n	80054be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b2:	7b7b      	ldrb	r3, [r7, #13]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d102      	bne.n	80054be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054b8:	7b3b      	ldrb	r3, [r7, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e03e      	b.n	8005540 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_TIM_Encoder_Start+0xc4>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d008      	beq.n	8005500 <HAL_TIM_Encoder_Start+0xd4>
 80054ee:	e00f      	b.n	8005510 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2201      	movs	r2, #1
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fc5b 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 80054fe:	e016      	b.n	800552e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	2104      	movs	r1, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fc53 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 800550e:	e00e      	b.n	800552e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2201      	movs	r2, #1
 8005516:	2100      	movs	r1, #0
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fc4b 	bl	8005db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	2104      	movs	r1, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc44 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 800552c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0202 	mvn.w	r2, #2
 800557c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f994 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f986 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f997 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0204 	mvn.w	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f96e 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f960 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f971 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0208 	mvn.w	r2, #8
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f948 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f93a 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f94b 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d020      	beq.n	8005690 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0210 	mvn.w	r2, #16
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2208      	movs	r2, #8
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f922 	bl	80058c0 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f914 	bl	80058ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f925 	bl	80058d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0201 	mvn.w	r2, #1
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd fbe4 	bl	8002e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fc6c 	bl	8005fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8f6 	bl	80058e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00c      	beq.n	8005720 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d007      	beq.n	8005720 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0220 	mvn.w	r2, #32
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fc3e 	bl	8005f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005742:	2302      	movs	r3, #2
 8005744:	e0ae      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b0c      	cmp	r3, #12
 8005752:	f200 809f 	bhi.w	8005894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005791 	.word	0x08005791
 8005760:	08005895 	.word	0x08005895
 8005764:	08005895 	.word	0x08005895
 8005768:	08005895 	.word	0x08005895
 800576c:	080057d1 	.word	0x080057d1
 8005770:	08005895 	.word	0x08005895
 8005774:	08005895 	.word	0x08005895
 8005778:	08005895 	.word	0x08005895
 800577c:	08005813 	.word	0x08005813
 8005780:	08005895 	.word	0x08005895
 8005784:	08005895 	.word	0x08005895
 8005788:	08005895 	.word	0x08005895
 800578c:	08005853 	.word	0x08005853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f95c 	bl	8005a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0208 	orr.w	r2, r2, #8
 80057aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0204 	bic.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6999      	ldr	r1, [r3, #24]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	619a      	str	r2, [r3, #24]
      break;
 80057ce:	e064      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f9ac 	bl	8005b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6999      	ldr	r1, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	619a      	str	r2, [r3, #24]
      break;
 8005810:	e043      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fa01 	bl	8005c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0208 	orr.w	r2, r2, #8
 800582c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0204 	bic.w	r2, r2, #4
 800583c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69d9      	ldr	r1, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	61da      	str	r2, [r3, #28]
      break;
 8005850:	e023      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fa55 	bl	8005d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69d9      	ldr	r1, [r3, #28]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	61da      	str	r2, [r3, #28]
      break;
 8005892:	e002      	b.n	800589a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	75fb      	strb	r3, [r7, #23]
      break;
 8005898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a46      	ldr	r2, [pc, #280]	; (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d00f      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <TIM_Base_SetConfig+0x130>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a42      	ldr	r2, [pc, #264]	; (8005a30 <TIM_Base_SetConfig+0x134>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a41      	ldr	r2, [pc, #260]	; (8005a34 <TIM_Base_SetConfig+0x138>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <TIM_Base_SetConfig+0x13c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a35      	ldr	r2, [pc, #212]	; (8005a28 <TIM_Base_SetConfig+0x12c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d027      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a32      	ldr	r2, [pc, #200]	; (8005a2c <TIM_Base_SetConfig+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d023      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <TIM_Base_SetConfig+0x134>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a30      	ldr	r2, [pc, #192]	; (8005a34 <TIM_Base_SetConfig+0x138>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <TIM_Base_SetConfig+0x13c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <TIM_Base_SetConfig+0x140>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <TIM_Base_SetConfig+0x144>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x148>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x14c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x150>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x154>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a10      	ldr	r2, [pc, #64]	; (8005a28 <TIM_Base_SetConfig+0x12c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <TIM_Base_SetConfig+0x13c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d105      	bne.n	8005a1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f023 0201 	bic.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	611a      	str	r2, [r3, #16]
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	40001c00 	.word	0x40001c00
 8005a50:	40002000 	.word	0x40002000

08005a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 0201 	bic.w	r2, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f023 0302 	bic.w	r3, r3, #2
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <TIM_OC1_SetConfig+0xd8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC1_SetConfig+0x64>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10c      	bne.n	8005ad2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0308 	bic.w	r3, r3, #8
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <TIM_OC1_SetConfig+0xd8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC1_SetConfig+0x8e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <TIM_OC1_SetConfig+0xdc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d111      	bne.n	8005b06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	621a      	str	r2, [r3, #32]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40010000 	.word	0x40010000
 8005b30:	40010400 	.word	0x40010400

08005b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 0210 	bic.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0320 	bic.w	r3, r3, #32
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <TIM_OC2_SetConfig+0xe4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_OC2_SetConfig+0x68>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <TIM_OC2_SetConfig+0xe8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10d      	bne.n	8005bb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC2_SetConfig+0xe4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC2_SetConfig+0x94>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <TIM_OC2_SetConfig+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d113      	bne.n	8005bf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <TIM_OC3_SetConfig+0xe0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC3_SetConfig+0x66>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <TIM_OC3_SetConfig+0xe4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10d      	bne.n	8005ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <TIM_OC3_SetConfig+0xe0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC3_SetConfig+0x92>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <TIM_OC3_SetConfig+0xe4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d113      	bne.n	8005cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	621a      	str	r2, [r3, #32]
}
 8005cf4:	bf00      	nop
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40010400 	.word	0x40010400

08005d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	031b      	lsls	r3, r3, #12
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a12      	ldr	r2, [pc, #72]	; (8005dac <TIM_OC4_SetConfig+0xa4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC4_SetConfig+0x68>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <TIM_OC4_SetConfig+0xa8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e05a      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d022      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d01d      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d018      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00e      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a18      	ldr	r2, [pc, #96]	; (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d009      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40010400 	.word	0x40010400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40001800 	.word	0x40001800

08005ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e03d      	b.n	8005f90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e042      	b.n	800605c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fd f986 	bl	80032fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fea1 	bl	8006d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800601c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695a      	ldr	r2, [r3, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800602c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800603c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08c      	sub	sp, #48	; 0x30
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b20      	cmp	r3, #32
 800607c:	d14a      	bne.n	8006114 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e043      	b.n	8006116 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	461a      	mov	r2, r3
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fbf5 	bl	8006890 <UART_Start_Receive_DMA>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d12c      	bne.n	800610e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d125      	bne.n	8006108 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	617b      	str	r3, [r7, #20]
   return(result);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f043 0310 	orr.w	r3, r3, #16
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f2:	627a      	str	r2, [r7, #36]	; 0x24
 80060f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6a39      	ldr	r1, [r7, #32]
 80060f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006106:	e002      	b.n	800610e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800610e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006112:	e000      	b.n	8006116 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3730      	adds	r7, #48	; 0x30
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b0ba      	sub	sp, #232	; 0xe8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800614c:	2300      	movs	r3, #0
 800614e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800615e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10f      	bne.n	8006186 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_UART_IRQHandler+0x66>
 8006172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fd27 	bl	8006bd2 <UART_Receive_IT>
      return;
 8006184:	e25b      	b.n	800663e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80de 	beq.w	800634c <HAL_UART_IRQHandler+0x22c>
 8006190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80d1 	beq.w	800634c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <HAL_UART_IRQHandler+0xae>
 80061b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f043 0201 	orr.w	r2, r3, #1
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <HAL_UART_IRQHandler+0xd2>
 80061da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d005      	beq.n	80061f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f043 0202 	orr.w	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_UART_IRQHandler+0xf6>
 80061fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f043 0204 	orr.w	r2, r3, #4
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0308 	and.w	r3, r3, #8
 800621e:	2b00      	cmp	r3, #0
 8006220:	d011      	beq.n	8006246 <HAL_UART_IRQHandler+0x126>
 8006222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d105      	bne.n	800623a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f043 0208 	orr.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 81f2 	beq.w	8006634 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_UART_IRQHandler+0x14e>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fcb2 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d103      	bne.n	800629a <HAL_UART_IRQHandler+0x17a>
 8006292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04f      	beq.n	800633a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fbba 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d141      	bne.n	8006332 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3314      	adds	r3, #20
 80062b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3314      	adds	r3, #20
 80062d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062ea:	e841 2300 	strex	r3, r2, [r1]
 80062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1d9      	bne.n	80062ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d013      	beq.n	800632a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	4a7e      	ldr	r2, [pc, #504]	; (8006500 <HAL_UART_IRQHandler+0x3e0>)
 8006308:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	4618      	mov	r0, r3
 8006310:	f7fd fcfa 	bl	8003d08 <HAL_DMA_Abort_IT>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006324:	4610      	mov	r0, r2
 8006326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	e00e      	b.n	8006348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9a8 	bl	8006680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	e00a      	b.n	8006348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9a4 	bl	8006680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e006      	b.n	8006348 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f9a0 	bl	8006680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006346:	e175      	b.n	8006634 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	bf00      	nop
    return;
 800634a:	e173      	b.n	8006634 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	2b01      	cmp	r3, #1
 8006352:	f040 814f 	bne.w	80065f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8148 	beq.w	80065f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8141 	beq.w	80065f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60bb      	str	r3, [r7, #8]
 8006386:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	f040 80b6 	bne.w	8006504 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 8145 	beq.w	8006638 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063b6:	429a      	cmp	r2, r3
 80063b8:	f080 813e 	bcs.w	8006638 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ce:	f000 8088 	beq.w	80064e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	330c      	adds	r3, #12
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800640a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1d9      	bne.n	80063d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006428:	e853 3f00 	ldrex	r3, [r3]
 800642c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800642e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006442:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006446:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800644a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e1      	bne.n	800641e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800646a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800647e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006484:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800648c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e3      	bne.n	800645a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80064c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80064c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e3      	bne.n	80064a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fd fba3 	bl	8003c28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7fb fcbf 	bl	8001e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064fe:	e09b      	b.n	8006638 <HAL_UART_IRQHandler+0x518>
 8006500:	08006adb 	.word	0x08006adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800650c:	b29b      	uxth	r3, r3
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 808e 	beq.w	800663c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8089 	beq.w	800663c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800654e:	647a      	str	r2, [r7, #68]	; 0x44
 8006550:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e3      	bne.n	800652a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	623b      	str	r3, [r7, #32]
   return(result);
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006586:	633a      	str	r2, [r7, #48]	; 0x30
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e3      	bne.n	8006562 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	e853 3f00 	ldrex	r3, [r3]
 80065b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0310 	bic.w	r3, r3, #16
 80065be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80065cc:	61fa      	str	r2, [r7, #28]
 80065ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d0:	69b9      	ldr	r1, [r7, #24]
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	617b      	str	r3, [r7, #20]
   return(result);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e3      	bne.n	80065a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fb fc45 	bl	8001e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065f2:	e023      	b.n	800663c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <HAL_UART_IRQHandler+0x4f4>
 8006600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fa78 	bl	8006b02 <UART_Transmit_IT>
    return;
 8006612:	e014      	b.n	800663e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00e      	beq.n	800663e <HAL_UART_IRQHandler+0x51e>
 8006620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fab8 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 8006632:	e004      	b.n	800663e <HAL_UART_IRQHandler+0x51e>
    return;
 8006634:	bf00      	nop
 8006636:	e002      	b.n	800663e <HAL_UART_IRQHandler+0x51e>
      return;
 8006638:	bf00      	nop
 800663a:	e000      	b.n	800663e <HAL_UART_IRQHandler+0x51e>
      return;
 800663c:	bf00      	nop
  }
}
 800663e:	37e8      	adds	r7, #232	; 0xe8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b09c      	sub	sp, #112	; 0x70
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d172      	bne.n	8006796 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80066b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b2:	2200      	movs	r2, #0
 80066b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80066d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	667b      	str	r3, [r7, #100]	; 0x64
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800670a:	647a      	str	r2, [r7, #68]	; 0x44
 800670c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3314      	adds	r3, #20
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	e853 3f00 	ldrex	r3, [r3]
 800672c:	623b      	str	r3, [r7, #32]
   return(result);
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006734:	663b      	str	r3, [r7, #96]	; 0x60
 8006736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3314      	adds	r3, #20
 800673c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800673e:	633a      	str	r2, [r7, #48]	; 0x30
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e5      	bne.n	800671e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006754:	2220      	movs	r2, #32
 8006756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	2b01      	cmp	r3, #1
 8006760:	d119      	bne.n	8006796 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	60fb      	str	r3, [r7, #12]
   return(result);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 0310 	bic.w	r3, r3, #16
 8006778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006782:	61fa      	str	r2, [r7, #28]
 8006784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	69b9      	ldr	r1, [r7, #24]
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	617b      	str	r3, [r7, #20]
   return(result);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006798:	2200      	movs	r2, #0
 800679a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067a8:	4619      	mov	r1, r3
 80067aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067ac:	f7fb fb66 	bl	8001e7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067b0:	e002      	b.n	80067b8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80067b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80067b4:	f7ff ff50 	bl	8006658 <HAL_UART_RxCpltCallback>
}
 80067b8:	bf00      	nop
 80067ba:	3770      	adds	r7, #112	; 0x70
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d108      	bne.n	80067ee <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	4619      	mov	r1, r3
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7fb fb48 	bl	8001e7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ec:	e002      	b.n	80067f4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ff3c 	bl	800666c <HAL_UART_RxHalfCpltCallback>
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006818:	2b80      	cmp	r3, #128	; 0x80
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b21      	cmp	r3, #33	; 0x21
 800682e:	d108      	bne.n	8006842 <UART_DMAError+0x46>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800683c:	68b8      	ldr	r0, [r7, #8]
 800683e:	f000 f8c1 	bl	80069c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	bf0c      	ite	eq
 8006850:	2301      	moveq	r3, #1
 8006852:	2300      	movne	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b22      	cmp	r3, #34	; 0x22
 8006862:	d108      	bne.n	8006876 <UART_DMAError+0x7a>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d005      	beq.n	8006876 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	f000 f8cf 	bl	8006a14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	f043 0210 	orr.w	r2, r3, #16
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f7ff fefc 	bl	8006680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b098      	sub	sp, #96	; 0x60
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2222      	movs	r2, #34	; 0x22
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	4a3e      	ldr	r2, [pc, #248]	; (80069b8 <UART_Start_Receive_DMA+0x128>)
 80068be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <UART_Start_Receive_DMA+0x12c>)
 80068c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <UART_Start_Receive_DMA+0x130>)
 80068ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d4:	2200      	movs	r2, #0
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	f7fd f942 	bl	8003b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068f4:	2300      	movs	r3, #0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d019      	beq.n	8006946 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	330c      	adds	r3, #12
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006932:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3314      	adds	r3, #20
 800694c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	657b      	str	r3, [r7, #84]	; 0x54
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3314      	adds	r3, #20
 8006964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006966:	63ba      	str	r2, [r7, #56]	; 0x38
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800696c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3314      	adds	r3, #20
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	653b      	str	r3, [r7, #80]	; 0x50
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3314      	adds	r3, #20
 8006998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	6a39      	ldr	r1, [r7, #32]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3760      	adds	r7, #96	; 0x60
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	08006695 	.word	0x08006695
 80069bc:	080067c1 	.word	0x080067c1
 80069c0:	080067fd 	.word	0x080067fd

080069c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60bb      	str	r3, [r7, #8]
   return(result);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	61ba      	str	r2, [r7, #24]
 80069ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	613b      	str	r3, [r7, #16]
   return(result);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006a08:	bf00      	nop
 8006a0a:	3724      	adds	r7, #36	; 0x24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	; 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fdc3 	bl	8006680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	; 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fd3e 	bl	8006644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 80ae 	bne.w	8006d44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d117      	bne.n	8006c22 <UART_Receive_IT+0x50>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e026      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15d      	bne.n	8006d40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d135      	bne.n	8006d36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	330c      	adds	r3, #12
 8006cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf0:	623a      	str	r2, [r7, #32]
 8006cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	69f9      	ldr	r1, [r7, #28]
 8006cf6:	6a3a      	ldr	r2, [r7, #32]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0310 	and.w	r3, r3, #16
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d10a      	bne.n	8006d28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fb f8a4 	bl	8001e7c <HAL_UARTEx_RxEventCallback>
 8006d34:	e002      	b.n	8006d3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fc8e 	bl	8006658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e002      	b.n	8006d46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
  }
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d54:	b0c0      	sub	sp, #256	; 0x100
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	ea40 0301 	orr.w	r3, r0, r1
 8006d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006da8:	f021 010c 	bic.w	r1, r1, #12
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006db6:	430b      	orrs	r3, r1
 8006db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	6999      	ldr	r1, [r3, #24]
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	ea40 0301 	orr.w	r3, r0, r1
 8006dd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b8f      	ldr	r3, [pc, #572]	; (800701c <UART_SetConfig+0x2cc>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d005      	beq.n	8006df0 <UART_SetConfig+0xa0>
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b8d      	ldr	r3, [pc, #564]	; (8007020 <UART_SetConfig+0x2d0>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d104      	bne.n	8006dfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006df0:	f7fe f84e 	bl	8004e90 <HAL_RCC_GetPCLK2Freq>
 8006df4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006df8:	e003      	b.n	8006e02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dfa:	f7fe f835 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8006dfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0c:	f040 810c 	bne.w	8007028 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e22:	4622      	mov	r2, r4
 8006e24:	462b      	mov	r3, r5
 8006e26:	1891      	adds	r1, r2, r2
 8006e28:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e2a:	415b      	adcs	r3, r3
 8006e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e32:	4621      	mov	r1, r4
 8006e34:	eb12 0801 	adds.w	r8, r2, r1
 8006e38:	4629      	mov	r1, r5
 8006e3a:	eb43 0901 	adc.w	r9, r3, r1
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e52:	4690      	mov	r8, r2
 8006e54:	4699      	mov	r9, r3
 8006e56:	4623      	mov	r3, r4
 8006e58:	eb18 0303 	adds.w	r3, r8, r3
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e60:	462b      	mov	r3, r5
 8006e62:	eb49 0303 	adc.w	r3, r9, r3
 8006e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e7e:	460b      	mov	r3, r1
 8006e80:	18db      	adds	r3, r3, r3
 8006e82:	653b      	str	r3, [r7, #80]	; 0x50
 8006e84:	4613      	mov	r3, r2
 8006e86:	eb42 0303 	adc.w	r3, r2, r3
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e94:	f7f9 fef8 	bl	8000c88 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4b61      	ldr	r3, [pc, #388]	; (8007024 <UART_SetConfig+0x2d4>)
 8006e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	011c      	lsls	r4, r3, #4
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006eb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006eb8:	4642      	mov	r2, r8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	1891      	adds	r1, r2, r2
 8006ebe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ec0:	415b      	adcs	r3, r3
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ec8:	4641      	mov	r1, r8
 8006eca:	eb12 0a01 	adds.w	sl, r2, r1
 8006ece:	4649      	mov	r1, r9
 8006ed0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	f04f 0300 	mov.w	r3, #0
 8006edc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ee0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ee4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ee8:	4692      	mov	sl, r2
 8006eea:	469b      	mov	fp, r3
 8006eec:	4643      	mov	r3, r8
 8006eee:	eb1a 0303 	adds.w	r3, sl, r3
 8006ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	eb4b 0303 	adc.w	r3, fp, r3
 8006efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f14:	460b      	mov	r3, r1
 8006f16:	18db      	adds	r3, r3, r3
 8006f18:	643b      	str	r3, [r7, #64]	; 0x40
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	eb42 0303 	adc.w	r3, r2, r3
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
 8006f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f2a:	f7f9 fead 	bl	8000c88 <__aeabi_uldivmod>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	4b3b      	ldr	r3, [pc, #236]	; (8007024 <UART_SetConfig+0x2d4>)
 8006f36:	fba3 2301 	umull	r2, r3, r3, r1
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	2264      	movs	r2, #100	; 0x64
 8006f3e:	fb02 f303 	mul.w	r3, r2, r3
 8006f42:	1acb      	subs	r3, r1, r3
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f4a:	4b36      	ldr	r3, [pc, #216]	; (8007024 <UART_SetConfig+0x2d4>)
 8006f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f58:	441c      	add	r4, r3
 8006f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	1891      	adds	r1, r2, r2
 8006f72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f74:	415b      	adcs	r3, r3
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f7c:	4641      	mov	r1, r8
 8006f7e:	1851      	adds	r1, r2, r1
 8006f80:	6339      	str	r1, [r7, #48]	; 0x30
 8006f82:	4649      	mov	r1, r9
 8006f84:	414b      	adcs	r3, r1
 8006f86:	637b      	str	r3, [r7, #52]	; 0x34
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f94:	4659      	mov	r1, fp
 8006f96:	00cb      	lsls	r3, r1, #3
 8006f98:	4651      	mov	r1, sl
 8006f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	00ca      	lsls	r2, r1, #3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	189b      	adds	r3, r3, r2
 8006fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	460a      	mov	r2, r1
 8006fb4:	eb42 0303 	adc.w	r3, r2, r3
 8006fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	18db      	adds	r3, r3, r3
 8006fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	eb42 0303 	adc.w	r3, r2, r3
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fe6:	f7f9 fe4f 	bl	8000c88 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <UART_SetConfig+0x2d4>)
 8006ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	2164      	movs	r1, #100	; 0x64
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	3332      	adds	r3, #50	; 0x32
 8007002:	4a08      	ldr	r2, [pc, #32]	; (8007024 <UART_SetConfig+0x2d4>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f003 0207 	and.w	r2, r3, #7
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4422      	add	r2, r4
 8007016:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007018:	e106      	b.n	8007228 <UART_SetConfig+0x4d8>
 800701a:	bf00      	nop
 800701c:	40011000 	.word	0x40011000
 8007020:	40011400 	.word	0x40011400
 8007024:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702c:	2200      	movs	r2, #0
 800702e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007032:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007036:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800703a:	4642      	mov	r2, r8
 800703c:	464b      	mov	r3, r9
 800703e:	1891      	adds	r1, r2, r2
 8007040:	6239      	str	r1, [r7, #32]
 8007042:	415b      	adcs	r3, r3
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
 8007046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800704a:	4641      	mov	r1, r8
 800704c:	1854      	adds	r4, r2, r1
 800704e:	4649      	mov	r1, r9
 8007050:	eb43 0501 	adc.w	r5, r3, r1
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	00eb      	lsls	r3, r5, #3
 800705e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007062:	00e2      	lsls	r2, r4, #3
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	4643      	mov	r3, r8
 800706a:	18e3      	adds	r3, r4, r3
 800706c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007070:	464b      	mov	r3, r9
 8007072:	eb45 0303 	adc.w	r3, r5, r3
 8007076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007086:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007096:	4629      	mov	r1, r5
 8007098:	008b      	lsls	r3, r1, #2
 800709a:	4621      	mov	r1, r4
 800709c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a0:	4621      	mov	r1, r4
 80070a2:	008a      	lsls	r2, r1, #2
 80070a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070a8:	f7f9 fdee 	bl	8000c88 <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4b60      	ldr	r3, [pc, #384]	; (8007234 <UART_SetConfig+0x4e4>)
 80070b2:	fba3 2302 	umull	r2, r3, r3, r2
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	011c      	lsls	r4, r3, #4
 80070ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	1891      	adds	r1, r2, r2
 80070d2:	61b9      	str	r1, [r7, #24]
 80070d4:	415b      	adcs	r3, r3
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070dc:	4641      	mov	r1, r8
 80070de:	1851      	adds	r1, r2, r1
 80070e0:	6139      	str	r1, [r7, #16]
 80070e2:	4649      	mov	r1, r9
 80070e4:	414b      	adcs	r3, r1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070f4:	4659      	mov	r1, fp
 80070f6:	00cb      	lsls	r3, r1, #3
 80070f8:	4651      	mov	r1, sl
 80070fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070fe:	4651      	mov	r1, sl
 8007100:	00ca      	lsls	r2, r1, #3
 8007102:	4610      	mov	r0, r2
 8007104:	4619      	mov	r1, r3
 8007106:	4603      	mov	r3, r0
 8007108:	4642      	mov	r2, r8
 800710a:	189b      	adds	r3, r3, r2
 800710c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007110:	464b      	mov	r3, r9
 8007112:	460a      	mov	r2, r1
 8007114:	eb42 0303 	adc.w	r3, r2, r3
 8007118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	67bb      	str	r3, [r7, #120]	; 0x78
 8007126:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007134:	4649      	mov	r1, r9
 8007136:	008b      	lsls	r3, r1, #2
 8007138:	4641      	mov	r1, r8
 800713a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800713e:	4641      	mov	r1, r8
 8007140:	008a      	lsls	r2, r1, #2
 8007142:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007146:	f7f9 fd9f 	bl	8000c88 <__aeabi_uldivmod>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4611      	mov	r1, r2
 8007150:	4b38      	ldr	r3, [pc, #224]	; (8007234 <UART_SetConfig+0x4e4>)
 8007152:	fba3 2301 	umull	r2, r3, r3, r1
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2264      	movs	r2, #100	; 0x64
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	1acb      	subs	r3, r1, r3
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	3332      	adds	r3, #50	; 0x32
 8007164:	4a33      	ldr	r2, [pc, #204]	; (8007234 <UART_SetConfig+0x4e4>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007170:	441c      	add	r4, r3
 8007172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007176:	2200      	movs	r2, #0
 8007178:	673b      	str	r3, [r7, #112]	; 0x70
 800717a:	677a      	str	r2, [r7, #116]	; 0x74
 800717c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007180:	4642      	mov	r2, r8
 8007182:	464b      	mov	r3, r9
 8007184:	1891      	adds	r1, r2, r2
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	415b      	adcs	r3, r3
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007190:	4641      	mov	r1, r8
 8007192:	1851      	adds	r1, r2, r1
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	4649      	mov	r1, r9
 8007198:	414b      	adcs	r3, r1
 800719a:	607b      	str	r3, [r7, #4]
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071a8:	4659      	mov	r1, fp
 80071aa:	00cb      	lsls	r3, r1, #3
 80071ac:	4651      	mov	r1, sl
 80071ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b2:	4651      	mov	r1, sl
 80071b4:	00ca      	lsls	r2, r1, #3
 80071b6:	4610      	mov	r0, r2
 80071b8:	4619      	mov	r1, r3
 80071ba:	4603      	mov	r3, r0
 80071bc:	4642      	mov	r2, r8
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80071c2:	464b      	mov	r3, r9
 80071c4:	460a      	mov	r2, r1
 80071c6:	eb42 0303 	adc.w	r3, r2, r3
 80071ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	663b      	str	r3, [r7, #96]	; 0x60
 80071d6:	667a      	str	r2, [r7, #100]	; 0x64
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071e4:	4649      	mov	r1, r9
 80071e6:	008b      	lsls	r3, r1, #2
 80071e8:	4641      	mov	r1, r8
 80071ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ee:	4641      	mov	r1, r8
 80071f0:	008a      	lsls	r2, r1, #2
 80071f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071f6:	f7f9 fd47 	bl	8000c88 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <UART_SetConfig+0x4e4>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	; 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	; 0x32
 8007212:	4a08      	ldr	r2, [pc, #32]	; (8007234 <UART_SetConfig+0x4e4>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 020f 	and.w	r2, r3, #15
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4422      	add	r2, r4
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800722e:	46bd      	mov	sp, r7
 8007230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007234:	51eb851f 	.word	0x51eb851f

08007238 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800724a:	2b84      	cmp	r3, #132	; 0x84
 800724c:	d005      	beq.n	800725a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800724e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4413      	add	r3, r2
 8007256:	3303      	adds	r3, #3
 8007258:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800726c:	f000 fade 	bl	800782c <vTaskStartScheduler>
  
  return osOK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	bd80      	pop	{r7, pc}

08007276 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007278:	b089      	sub	sp, #36	; 0x24
 800727a:	af04      	add	r7, sp, #16
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d020      	beq.n	80072ca <osThreadCreate+0x54>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01c      	beq.n	80072ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685c      	ldr	r4, [r3, #4]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691e      	ldr	r6, [r3, #16]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff ffc8 	bl	8007238 <makeFreeRtosPriority>
 80072a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072b2:	9202      	str	r2, [sp, #8]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	9100      	str	r1, [sp, #0]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	4632      	mov	r2, r6
 80072bc:	4629      	mov	r1, r5
 80072be:	4620      	mov	r0, r4
 80072c0:	f000 f8ed 	bl	800749e <xTaskCreateStatic>
 80072c4:	4603      	mov	r3, r0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e01c      	b.n	8007304 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685c      	ldr	r4, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff ffaa 	bl	8007238 <makeFreeRtosPriority>
 80072e4:	4602      	mov	r2, r0
 80072e6:	f107 030c 	add.w	r3, r7, #12
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	9200      	str	r2, [sp, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	4632      	mov	r2, r6
 80072f2:	4629      	mov	r1, r5
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 f92f 	bl	8007558 <xTaskCreate>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d001      	beq.n	8007304 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007304:	68fb      	ldr	r3, [r7, #12]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800730e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <osDelay+0x16>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	e000      	b.n	8007326 <osDelay+0x18>
 8007324:	2301      	movs	r3, #1
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fa4c 	bl	80077c4 <vTaskDelay>
  
  return osOK;
 800732c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 0208 	add.w	r2, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f103 0208 	add.w	r2, r3, #8
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f103 0208 	add.w	r2, r3, #8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d103      	bne.n	80073f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e00c      	b.n	8007412 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3308      	adds	r3, #8
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e002      	b.n	8007406 <vListInsert+0x2e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	d2f6      	bcs.n	8007400 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	601a      	str	r2, [r3, #0]
}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6892      	ldr	r2, [r2, #8]
 8007460:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6852      	ldr	r2, [r2, #4]
 800746a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d103      	bne.n	800747e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b08e      	sub	sp, #56	; 0x38
 80074a2:	af04      	add	r7, sp, #16
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <xTaskCreateStatic+0x46>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	61fb      	str	r3, [r7, #28]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074e4:	2354      	movs	r3, #84	; 0x54
 80074e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2b54      	cmp	r3, #84	; 0x54
 80074ec:	d00a      	beq.n	8007504 <xTaskCreateStatic+0x66>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61bb      	str	r3, [r7, #24]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007504:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01e      	beq.n	800754a <xTaskCreateStatic+0xac>
 800750c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01b      	beq.n	800754a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	2202      	movs	r2, #2
 8007520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007524:	2300      	movs	r3, #0
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f850 	bl	80075e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007542:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007544:	f000 f8d4 	bl	80076f0 <prvAddNewTaskToReadyList>
 8007548:	e001      	b.n	800754e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800754e:	697b      	ldr	r3, [r7, #20]
	}
 8007550:	4618      	mov	r0, r3
 8007552:	3728      	adds	r7, #40	; 0x28
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08c      	sub	sp, #48	; 0x30
 800755c:	af04      	add	r7, sp, #16
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007568:	88fb      	ldrh	r3, [r7, #6]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fec3 	bl	80082f8 <pvPortMalloc>
 8007572:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00e      	beq.n	8007598 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800757a:	2054      	movs	r0, #84	; 0x54
 800757c:	f000 febc 	bl	80082f8 <pvPortMalloc>
 8007580:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
 800758e:	e005      	b.n	800759c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f000 ff7d 	bl	8008490 <vPortFree>
 8007596:	e001      	b.n	800759c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d017      	beq.n	80075d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	2300      	movs	r3, #0
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	9302      	str	r3, [sp, #8]
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f80e 	bl	80075e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075c6:	69f8      	ldr	r0, [r7, #28]
 80075c8:	f000 f892 	bl	80076f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075cc:	2301      	movs	r3, #1
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e002      	b.n	80075d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075d8:	69bb      	ldr	r3, [r7, #24]
	}
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b088      	sub	sp, #32
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075fa:	3b01      	subs	r3, #1
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <prvInitialiseNewTask+0x48>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	617b      	str	r3, [r7, #20]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01f      	beq.n	8007670 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e012      	b.n	800765c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	7819      	ldrb	r1, [r3, #0]
 800763e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	3334      	adds	r3, #52	; 0x34
 8007646:	460a      	mov	r2, r1
 8007648:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3301      	adds	r3, #1
 800765a:	61fb      	str	r3, [r7, #28]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d9e9      	bls.n	8007636 <prvInitialiseNewTask+0x54>
 8007662:	e000      	b.n	8007666 <prvInitialiseNewTask+0x84>
			{
				break;
 8007664:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800766e:	e003      	b.n	8007678 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	2b06      	cmp	r3, #6
 800767c:	d901      	bls.n	8007682 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800767e:	2306      	movs	r3, #6
 8007680:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007686:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	3304      	adds	r3, #4
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fe6c 	bl	8007376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	3318      	adds	r3, #24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fe67 	bl	8007376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	f1c3 0207 	rsb	r2, r3, #7
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	69b8      	ldr	r0, [r7, #24]
 80076d2:	f000 fc05 	bl	8007ee0 <pxPortInitialiseStack>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e8:	bf00      	nop
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076f8:	f000 fd1c 	bl	8008134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076fc:	4b2a      	ldr	r3, [pc, #168]	; (80077a8 <prvAddNewTaskToReadyList+0xb8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a29      	ldr	r2, [pc, #164]	; (80077a8 <prvAddNewTaskToReadyList+0xb8>)
 8007704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007706:	4b29      	ldr	r3, [pc, #164]	; (80077ac <prvAddNewTaskToReadyList+0xbc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d109      	bne.n	8007722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800770e:	4a27      	ldr	r2, [pc, #156]	; (80077ac <prvAddNewTaskToReadyList+0xbc>)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <prvAddNewTaskToReadyList+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d110      	bne.n	800773e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800771c:	f000 fabc 	bl	8007c98 <prvInitialiseTaskLists>
 8007720:	e00d      	b.n	800773e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007722:	4b23      	ldr	r3, [pc, #140]	; (80077b0 <prvAddNewTaskToReadyList+0xc0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800772a:	4b20      	ldr	r3, [pc, #128]	; (80077ac <prvAddNewTaskToReadyList+0xbc>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	429a      	cmp	r2, r3
 8007736:	d802      	bhi.n	800773e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007738:	4a1c      	ldr	r2, [pc, #112]	; (80077ac <prvAddNewTaskToReadyList+0xbc>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <prvAddNewTaskToReadyList+0xc4>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <prvAddNewTaskToReadyList+0xc4>)
 8007746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	2201      	movs	r2, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4313      	orrs	r3, r2
 8007756:	4a18      	ldr	r2, [pc, #96]	; (80077b8 <prvAddNewTaskToReadyList+0xc8>)
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a15      	ldr	r2, [pc, #84]	; (80077bc <prvAddNewTaskToReadyList+0xcc>)
 8007768:	441a      	add	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f7ff fe0d 	bl	8007390 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007776:	f000 fd0d 	bl	8008194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <prvAddNewTaskToReadyList+0xc0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <prvAddNewTaskToReadyList+0xbc>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	429a      	cmp	r2, r3
 800778e:	d207      	bcs.n	80077a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <prvAddNewTaskToReadyList+0xd0>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20000d34 	.word	0x20000d34
 80077ac:	20000c34 	.word	0x20000c34
 80077b0:	20000d40 	.word	0x20000d40
 80077b4:	20000d50 	.word	0x20000d50
 80077b8:	20000d3c 	.word	0x20000d3c
 80077bc:	20000c38 	.word	0x20000c38
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d017      	beq.n	8007806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <vTaskDelay+0x60>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <vTaskDelay+0x30>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60bb      	str	r3, [r7, #8]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077f4:	f000 f87a 	bl	80078ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fb0a 	bl	8007e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007800:	f000 f882 	bl	8007908 <xTaskResumeAll>
 8007804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <vTaskDelay+0x64>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000d5c 	.word	0x20000d5c
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800783a:	463a      	mov	r2, r7
 800783c:	1d39      	adds	r1, r7, #4
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f7f9 fee4 	bl	8001610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	460a      	mov	r2, r1
 800785a:	491e      	ldr	r1, [pc, #120]	; (80078d4 <vTaskStartScheduler+0xa8>)
 800785c:	481e      	ldr	r0, [pc, #120]	; (80078d8 <vTaskStartScheduler+0xac>)
 800785e:	f7ff fe1e 	bl	800749e <xTaskCreateStatic>
 8007862:	4603      	mov	r3, r0
 8007864:	4a1d      	ldr	r2, [pc, #116]	; (80078dc <vTaskStartScheduler+0xb0>)
 8007866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007868:	4b1c      	ldr	r3, [pc, #112]	; (80078dc <vTaskStartScheduler+0xb0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e001      	b.n	800787a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d116      	bne.n	80078ae <vTaskStartScheduler+0x82>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007894:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <vTaskStartScheduler+0xb4>)
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800789c:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <vTaskStartScheduler+0xb8>)
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078a2:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <vTaskStartScheduler+0xbc>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078a8:	f000 fba2 	bl	8007ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ac:	e00e      	b.n	80078cc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b4:	d10a      	bne.n	80078cc <vTaskStartScheduler+0xa0>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60fb      	str	r3, [r7, #12]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <vTaskStartScheduler+0x9e>
}
 80078cc:	bf00      	nop
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	0800d888 	.word	0x0800d888
 80078d8:	08007c69 	.word	0x08007c69
 80078dc:	20000d58 	.word	0x20000d58
 80078e0:	20000d54 	.word	0x20000d54
 80078e4:	20000d40 	.word	0x20000d40
 80078e8:	20000d38 	.word	0x20000d38

080078ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <vTaskSuspendAll+0x18>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a03      	ldr	r2, [pc, #12]	; (8007904 <vTaskSuspendAll+0x18>)
 80078f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078fa:	bf00      	nop
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	20000d5c 	.word	0x20000d5c

08007908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007916:	4b41      	ldr	r3, [pc, #260]	; (8007a1c <xTaskResumeAll+0x114>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <xTaskResumeAll+0x2c>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	603b      	str	r3, [r7, #0]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007934:	f000 fbfe 	bl	8008134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007938:	4b38      	ldr	r3, [pc, #224]	; (8007a1c <xTaskResumeAll+0x114>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3b01      	subs	r3, #1
 800793e:	4a37      	ldr	r2, [pc, #220]	; (8007a1c <xTaskResumeAll+0x114>)
 8007940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <xTaskResumeAll+0x114>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d161      	bne.n	8007a0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800794a:	4b35      	ldr	r3, [pc, #212]	; (8007a20 <xTaskResumeAll+0x118>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d05d      	beq.n	8007a0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007952:	e02e      	b.n	80079b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007954:	4b33      	ldr	r3, [pc, #204]	; (8007a24 <xTaskResumeAll+0x11c>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3318      	adds	r3, #24
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff fd72 	bl	800744a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff fd6d 	bl	800744a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	2201      	movs	r2, #1
 8007976:	409a      	lsls	r2, r3
 8007978:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <xTaskResumeAll+0x120>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <xTaskResumeAll+0x120>)
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4a27      	ldr	r2, [pc, #156]	; (8007a2c <xTaskResumeAll+0x124>)
 8007990:	441a      	add	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3304      	adds	r3, #4
 8007996:	4619      	mov	r1, r3
 8007998:	4610      	mov	r0, r2
 800799a:	f7ff fcf9 	bl	8007390 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <xTaskResumeAll+0x128>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d302      	bcc.n	80079b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80079ac:	4b21      	ldr	r3, [pc, #132]	; (8007a34 <xTaskResumeAll+0x12c>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <xTaskResumeAll+0x11c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1cc      	bne.n	8007954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079c0:	f000 fa08 	bl	8007dd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079c4:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <xTaskResumeAll+0x130>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d010      	beq.n	80079f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079d0:	f000 f836 	bl	8007a40 <xTaskIncrementTick>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80079da:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <xTaskResumeAll+0x12c>)
 80079dc:	2201      	movs	r2, #1
 80079de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f1      	bne.n	80079d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <xTaskResumeAll+0x130>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079f2:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <xTaskResumeAll+0x12c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d009      	beq.n	8007a0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <xTaskResumeAll+0x134>)
 8007a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a0e:	f000 fbc1 	bl	8008194 <vPortExitCritical>

	return xAlreadyYielded;
 8007a12:	68bb      	ldr	r3, [r7, #8]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000d5c 	.word	0x20000d5c
 8007a20:	20000d34 	.word	0x20000d34
 8007a24:	20000cf4 	.word	0x20000cf4
 8007a28:	20000d3c 	.word	0x20000d3c
 8007a2c:	20000c38 	.word	0x20000c38
 8007a30:	20000c34 	.word	0x20000c34
 8007a34:	20000d48 	.word	0x20000d48
 8007a38:	20000d44 	.word	0x20000d44
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b4e      	ldr	r3, [pc, #312]	; (8007b84 <xTaskIncrementTick+0x144>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 808e 	bne.w	8007b70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a54:	4b4c      	ldr	r3, [pc, #304]	; (8007b88 <xTaskIncrementTick+0x148>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a5c:	4a4a      	ldr	r2, [pc, #296]	; (8007b88 <xTaskIncrementTick+0x148>)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d120      	bne.n	8007aaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a68:	4b48      	ldr	r3, [pc, #288]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xTaskIncrementTick+0x46>
 8007a88:	4b40      	ldr	r3, [pc, #256]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a3e      	ldr	r2, [pc, #248]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	4a3e      	ldr	r2, [pc, #248]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	4b3d      	ldr	r3, [pc, #244]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a3c      	ldr	r2, [pc, #240]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	f000 f995 	bl	8007dd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aaa:	4b3b      	ldr	r3, [pc, #236]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d348      	bcc.n	8007b46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab4:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007abe:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	601a      	str	r2, [r3, #0]
					break;
 8007ac6:	e03e      	b.n	8007b46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac8:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d203      	bcs.n	8007ae8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae0:	4a2d      	ldr	r2, [pc, #180]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ae6:	e02e      	b.n	8007b46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff fcac 	bl	800744a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fca3 	bl	800744a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	2201      	movs	r2, #1
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	4b23      	ldr	r3, [pc, #140]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b24:	441a      	add	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7ff fc2f 	bl	8007390 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b36:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d3b9      	bcc.n	8007ab4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b44:	e7b6      	b.n	8007ab4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b46:	4b17      	ldr	r3, [pc, #92]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	4914      	ldr	r1, [pc, #80]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d901      	bls.n	8007b62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b62:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <xTaskIncrementTick+0x168>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e004      	b.n	8007b7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b70:	4b0e      	ldr	r3, [pc, #56]	; (8007bac <xTaskIncrementTick+0x16c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3301      	adds	r3, #1
 8007b76:	4a0d      	ldr	r2, [pc, #52]	; (8007bac <xTaskIncrementTick+0x16c>)
 8007b78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b7a:	697b      	ldr	r3, [r7, #20]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000d5c 	.word	0x20000d5c
 8007b88:	20000d38 	.word	0x20000d38
 8007b8c:	20000cec 	.word	0x20000cec
 8007b90:	20000cf0 	.word	0x20000cf0
 8007b94:	20000d4c 	.word	0x20000d4c
 8007b98:	20000d54 	.word	0x20000d54
 8007b9c:	20000d3c 	.word	0x20000d3c
 8007ba0:	20000c38 	.word	0x20000c38
 8007ba4:	20000c34 	.word	0x20000c34
 8007ba8:	20000d48 	.word	0x20000d48
 8007bac:	20000d44 	.word	0x20000d44

08007bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bb6:	4b27      	ldr	r3, [pc, #156]	; (8007c54 <vTaskSwitchContext+0xa4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bbe:	4b26      	ldr	r3, [pc, #152]	; (8007c58 <vTaskSwitchContext+0xa8>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc4:	e03f      	b.n	8007c46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <vTaskSwitchContext+0xa8>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bcc:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <vTaskSwitchContext+0xac>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	fab3 f383 	clz	r3, r3
 8007bd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f1c3 031f 	rsb	r3, r3, #31
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	491f      	ldr	r1, [pc, #124]	; (8007c60 <vTaskSwitchContext+0xb0>)
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	607b      	str	r3, [r7, #4]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <vTaskSwitchContext+0x5a>
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <vTaskSwitchContext+0xb0>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d104      	bne.n	8007c3c <vTaskSwitchContext+0x8c>
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <vTaskSwitchContext+0xb4>)
 8007c44:	6013      	str	r3, [r2, #0]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000d5c 	.word	0x20000d5c
 8007c58:	20000d48 	.word	0x20000d48
 8007c5c:	20000d3c 	.word	0x20000d3c
 8007c60:	20000c38 	.word	0x20000c38
 8007c64:	20000c34 	.word	0x20000c34

08007c68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c70:	f000 f852 	bl	8007d18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c74:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <prvIdleTask+0x28>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d9f9      	bls.n	8007c70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c7c:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <prvIdleTask+0x2c>)
 8007c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c8c:	e7f0      	b.n	8007c70 <prvIdleTask+0x8>
 8007c8e:	bf00      	nop
 8007c90:	20000c38 	.word	0x20000c38
 8007c94:	e000ed04 	.word	0xe000ed04

08007c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	e00c      	b.n	8007cbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a12      	ldr	r2, [pc, #72]	; (8007cf8 <prvInitialiseTaskLists+0x60>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fb3f 	bl	8007336 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b06      	cmp	r3, #6
 8007cc2:	d9ef      	bls.n	8007ca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cc4:	480d      	ldr	r0, [pc, #52]	; (8007cfc <prvInitialiseTaskLists+0x64>)
 8007cc6:	f7ff fb36 	bl	8007336 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cca:	480d      	ldr	r0, [pc, #52]	; (8007d00 <prvInitialiseTaskLists+0x68>)
 8007ccc:	f7ff fb33 	bl	8007336 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cd0:	480c      	ldr	r0, [pc, #48]	; (8007d04 <prvInitialiseTaskLists+0x6c>)
 8007cd2:	f7ff fb30 	bl	8007336 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007cd6:	480c      	ldr	r0, [pc, #48]	; (8007d08 <prvInitialiseTaskLists+0x70>)
 8007cd8:	f7ff fb2d 	bl	8007336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cdc:	480b      	ldr	r0, [pc, #44]	; (8007d0c <prvInitialiseTaskLists+0x74>)
 8007cde:	f7ff fb2a 	bl	8007336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <prvInitialiseTaskLists+0x78>)
 8007ce4:	4a05      	ldr	r2, [pc, #20]	; (8007cfc <prvInitialiseTaskLists+0x64>)
 8007ce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <prvInitialiseTaskLists+0x7c>)
 8007cea:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <prvInitialiseTaskLists+0x68>)
 8007cec:	601a      	str	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000c38 	.word	0x20000c38
 8007cfc:	20000cc4 	.word	0x20000cc4
 8007d00:	20000cd8 	.word	0x20000cd8
 8007d04:	20000cf4 	.word	0x20000cf4
 8007d08:	20000d08 	.word	0x20000d08
 8007d0c:	20000d20 	.word	0x20000d20
 8007d10:	20000cec 	.word	0x20000cec
 8007d14:	20000cf0 	.word	0x20000cf0

08007d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d1e:	e019      	b.n	8007d54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d20:	f000 fa08 	bl	8008134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <prvCheckTasksWaitingTermination+0x50>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fb8a 	bl	800744a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d36:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <prvCheckTasksWaitingTermination+0x54>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <prvCheckTasksWaitingTermination+0x54>)
 8007d3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d4a:	f000 fa23 	bl	8008194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f810 	bl	8007d74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <prvCheckTasksWaitingTermination+0x58>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e1      	bne.n	8007d20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000d08 	.word	0x20000d08
 8007d6c:	20000d34 	.word	0x20000d34
 8007d70:	20000d1c 	.word	0x20000d1c

08007d74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d108      	bne.n	8007d98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fb80 	bl	8008490 <vPortFree>
				vPortFree( pxTCB );
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fb7d 	bl	8008490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d96:	e018      	b.n	8007dca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d103      	bne.n	8007daa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fb74 	bl	8008490 <vPortFree>
	}
 8007da8:	e00f      	b.n	8007dca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d00a      	beq.n	8007dca <prvDeleteTCB+0x56>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	60fb      	str	r3, [r7, #12]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <prvDeleteTCB+0x54>
	}
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dda:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <prvResetNextTaskUnblockTime+0x38>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <prvResetNextTaskUnblockTime+0x3c>)
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dec:	e008      	b.n	8007e00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dee:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <prvResetNextTaskUnblockTime+0x38>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4a04      	ldr	r2, [pc, #16]	; (8007e10 <prvResetNextTaskUnblockTime+0x3c>)
 8007dfe:	6013      	str	r3, [r2, #0]
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000cec 	.word	0x20000cec
 8007e10:	20000d54 	.word	0x20000d54

08007e14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e1e:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e24:	4b28      	ldr	r3, [pc, #160]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fb0d 	bl	800744a <uxListRemove>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	43da      	mvns	r2, r3
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e54:	d10a      	bne.n	8007e6c <prvAddCurrentTaskToDelayedList+0x58>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	481a      	ldr	r0, [pc, #104]	; (8007ed0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e66:	f7ff fa93 	bl	8007390 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e6a:	e026      	b.n	8007eba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e74:	4b14      	ldr	r3, [pc, #80]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d209      	bcs.n	8007e98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e84:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f7ff faa1 	bl	80073d8 <vListInsert>
}
 8007e96:	e010      	b.n	8007eba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e98:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7ff fa97 	bl	80073d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d202      	bcs.n	8007eba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007eb4:	4a09      	ldr	r2, [pc, #36]	; (8007edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6013      	str	r3, [r2, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000d38 	.word	0x20000d38
 8007ec8:	20000c34 	.word	0x20000c34
 8007ecc:	20000d3c 	.word	0x20000d3c
 8007ed0:	20000d20 	.word	0x20000d20
 8007ed4:	20000cf0 	.word	0x20000cf0
 8007ed8:	20000cec 	.word	0x20000cec
 8007edc:	20000d54 	.word	0x20000d54

08007ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f023 0201 	bic.w	r2, r3, #1
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f10:	4a0c      	ldr	r2, [pc, #48]	; (8007f44 <pxPortInitialiseStack+0x64>)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3b14      	subs	r3, #20
 8007f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f06f 0202 	mvn.w	r2, #2
 8007f2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3b20      	subs	r3, #32
 8007f34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f36:	68fb      	ldr	r3, [r7, #12]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	08007f49 	.word	0x08007f49

08007f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <prvTaskExitError+0x54>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d00a      	beq.n	8007f72 <prvTaskExitError+0x2a>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <prvTaskExitError+0x28>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60bb      	str	r3, [r7, #8]
}
 8007f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f86:	bf00      	nop
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0fc      	beq.n	8007f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	20000010 	.word	0x20000010

08007fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <pxCurrentTCBConst2>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	6808      	ldr	r0, [r1, #0]
 8007fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	f380 8809 	msr	PSP, r0
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8811 	msr	BASEPRI, r0
 8007fba:	4770      	bx	lr
 8007fbc:	f3af 8000 	nop.w

08007fc0 <pxCurrentTCBConst2>:
 8007fc0:	20000c34 	.word	0x20000c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fc8:	4808      	ldr	r0, [pc, #32]	; (8007fec <prvPortStartFirstTask+0x24>)
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	6800      	ldr	r0, [r0, #0]
 8007fce:	f380 8808 	msr	MSP, r0
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8814 	msr	CONTROL, r0
 8007fda:	b662      	cpsie	i
 8007fdc:	b661      	cpsie	f
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	df00      	svc	0
 8007fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fea:	bf00      	nop
 8007fec:	e000ed08 	.word	0xe000ed08

08007ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ff6:	4b46      	ldr	r3, [pc, #280]	; (8008110 <xPortStartScheduler+0x120>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a46      	ldr	r2, [pc, #280]	; (8008114 <xPortStartScheduler+0x124>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10a      	bne.n	8008016 <xPortStartScheduler+0x26>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	613b      	str	r3, [r7, #16]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008016:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <xPortStartScheduler+0x120>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a3f      	ldr	r2, [pc, #252]	; (8008118 <xPortStartScheduler+0x128>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10a      	bne.n	8008036 <xPortStartScheduler+0x46>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008036:	4b39      	ldr	r3, [pc, #228]	; (800811c <xPortStartScheduler+0x12c>)
 8008038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	22ff      	movs	r2, #255	; 0xff
 8008046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008058:	b2da      	uxtb	r2, r3
 800805a:	4b31      	ldr	r3, [pc, #196]	; (8008120 <xPortStartScheduler+0x130>)
 800805c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800805e:	4b31      	ldr	r3, [pc, #196]	; (8008124 <xPortStartScheduler+0x134>)
 8008060:	2207      	movs	r2, #7
 8008062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008064:	e009      	b.n	800807a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008066:	4b2f      	ldr	r3, [pc, #188]	; (8008124 <xPortStartScheduler+0x134>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3b01      	subs	r3, #1
 800806c:	4a2d      	ldr	r2, [pc, #180]	; (8008124 <xPortStartScheduler+0x134>)
 800806e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d0ef      	beq.n	8008066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008086:	4b27      	ldr	r3, [pc, #156]	; (8008124 <xPortStartScheduler+0x134>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f1c3 0307 	rsb	r3, r3, #7
 800808e:	2b04      	cmp	r3, #4
 8008090:	d00a      	beq.n	80080a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60bb      	str	r3, [r7, #8]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080a8:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <xPortStartScheduler+0x134>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	4a1d      	ldr	r2, [pc, #116]	; (8008124 <xPortStartScheduler+0x134>)
 80080b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <xPortStartScheduler+0x134>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080ba:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <xPortStartScheduler+0x134>)
 80080bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080c6:	4b18      	ldr	r3, [pc, #96]	; (8008128 <xPortStartScheduler+0x138>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a17      	ldr	r2, [pc, #92]	; (8008128 <xPortStartScheduler+0x138>)
 80080cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080d2:	4b15      	ldr	r3, [pc, #84]	; (8008128 <xPortStartScheduler+0x138>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a14      	ldr	r2, [pc, #80]	; (8008128 <xPortStartScheduler+0x138>)
 80080d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080de:	f000 f8dd 	bl	800829c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <xPortStartScheduler+0x13c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080e8:	f000 f8fc 	bl	80082e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080ec:	4b10      	ldr	r3, [pc, #64]	; (8008130 <xPortStartScheduler+0x140>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0f      	ldr	r2, [pc, #60]	; (8008130 <xPortStartScheduler+0x140>)
 80080f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080f8:	f7ff ff66 	bl	8007fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080fc:	f7ff fd58 	bl	8007bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8008100:	f7ff ff22 	bl	8007f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	e000ed00 	.word	0xe000ed00
 8008114:	410fc271 	.word	0x410fc271
 8008118:	410fc270 	.word	0x410fc270
 800811c:	e000e400 	.word	0xe000e400
 8008120:	20000d60 	.word	0x20000d60
 8008124:	20000d64 	.word	0x20000d64
 8008128:	e000ed20 	.word	0xe000ed20
 800812c:	20000010 	.word	0x20000010
 8008130:	e000ef34 	.word	0xe000ef34

08008134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <vPortEnterCritical+0x58>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	3301      	adds	r3, #1
 8008154:	4a0d      	ldr	r2, [pc, #52]	; (800818c <vPortEnterCritical+0x58>)
 8008156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008158:	4b0c      	ldr	r3, [pc, #48]	; (800818c <vPortEnterCritical+0x58>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10f      	bne.n	8008180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008160:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <vPortEnterCritical+0x5c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <vPortEnterCritical+0x4c>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	603b      	str	r3, [r7, #0]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <vPortEnterCritical+0x4a>
	}
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20000010 	.word	0x20000010
 8008190:	e000ed04 	.word	0xe000ed04

08008194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <vPortExitCritical+0x50>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <vPortExitCritical+0x24>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	607b      	str	r3, [r7, #4]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <vPortExitCritical+0x50>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3b01      	subs	r3, #1
 80081be:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <vPortExitCritical+0x50>)
 80081c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081c2:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <vPortExitCritical+0x50>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <vPortExitCritical+0x42>
 80081ca:	2300      	movs	r3, #0
 80081cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000010 	.word	0x20000010
	...

080081f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081f0:	f3ef 8009 	mrs	r0, PSP
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4b15      	ldr	r3, [pc, #84]	; (8008250 <pxCurrentTCBConst>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	f01e 0f10 	tst.w	lr, #16
 8008200:	bf08      	it	eq
 8008202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820a:	6010      	str	r0, [r2, #0]
 800820c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008214:	f380 8811 	msr	BASEPRI, r0
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f7ff fcc6 	bl	8007bb0 <vTaskSwitchContext>
 8008224:	f04f 0000 	mov.w	r0, #0
 8008228:	f380 8811 	msr	BASEPRI, r0
 800822c:	bc09      	pop	{r0, r3}
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	6808      	ldr	r0, [r1, #0]
 8008232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008236:	f01e 0f10 	tst.w	lr, #16
 800823a:	bf08      	it	eq
 800823c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008240:	f380 8809 	msr	PSP, r0
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w

08008250 <pxCurrentTCBConst>:
 8008250:	20000c34 	.word	0x20000c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop

08008258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	607b      	str	r3, [r7, #4]
}
 8008270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008272:	f7ff fbe5 	bl	8007a40 <xTaskIncrementTick>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <SysTick_Handler+0x40>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	2300      	movs	r3, #0
 8008286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f383 8811 	msr	BASEPRI, r3
}
 800828e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008290:	bf00      	nop
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <vPortSetupTimerInterrupt+0x34>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <vPortSetupTimerInterrupt+0x38>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <vPortSetupTimerInterrupt+0x3c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <vPortSetupTimerInterrupt+0x40>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	099b      	lsrs	r3, r3, #6
 80082b8:	4a09      	ldr	r2, [pc, #36]	; (80082e0 <vPortSetupTimerInterrupt+0x44>)
 80082ba:	3b01      	subs	r3, #1
 80082bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082be:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <vPortSetupTimerInterrupt+0x34>)
 80082c0:	2207      	movs	r2, #7
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	e000e010 	.word	0xe000e010
 80082d4:	e000e018 	.word	0xe000e018
 80082d8:	20000004 	.word	0x20000004
 80082dc:	10624dd3 	.word	0x10624dd3
 80082e0:	e000e014 	.word	0xe000e014

080082e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082f4 <vPortEnableVFP+0x10>
 80082e8:	6801      	ldr	r1, [r0, #0]
 80082ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ee:	6001      	str	r1, [r0, #0]
 80082f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082f2:	bf00      	nop
 80082f4:	e000ed88 	.word	0xe000ed88

080082f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	; 0x28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008304:	f7ff faf2 	bl	80078ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008308:	4b5b      	ldr	r3, [pc, #364]	; (8008478 <pvPortMalloc+0x180>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008310:	f000 f920 	bl	8008554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008314:	4b59      	ldr	r3, [pc, #356]	; (800847c <pvPortMalloc+0x184>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	f040 8093 	bne.w	8008448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01d      	beq.n	8008364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008328:	2208      	movs	r2, #8
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4413      	add	r3, r2
 800832e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f003 0307 	and.w	r3, r3, #7
 8008336:	2b00      	cmp	r3, #0
 8008338:	d014      	beq.n	8008364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	3308      	adds	r3, #8
 8008342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <pvPortMalloc+0x6c>
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	617b      	str	r3, [r7, #20]
}
 8008360:	bf00      	nop
 8008362:	e7fe      	b.n	8008362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d06e      	beq.n	8008448 <pvPortMalloc+0x150>
 800836a:	4b45      	ldr	r3, [pc, #276]	; (8008480 <pvPortMalloc+0x188>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d869      	bhi.n	8008448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008374:	4b43      	ldr	r3, [pc, #268]	; (8008484 <pvPortMalloc+0x18c>)
 8008376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008378:	4b42      	ldr	r3, [pc, #264]	; (8008484 <pvPortMalloc+0x18c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800837e:	e004      	b.n	800838a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	429a      	cmp	r2, r3
 8008392:	d903      	bls.n	800839c <pvPortMalloc+0xa4>
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f1      	bne.n	8008380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800839c:	4b36      	ldr	r3, [pc, #216]	; (8008478 <pvPortMalloc+0x180>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d050      	beq.n	8008448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2208      	movs	r2, #8
 80083ac:	4413      	add	r3, r2
 80083ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	2308      	movs	r3, #8
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d91f      	bls.n	8008408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <pvPortMalloc+0xf8>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	613b      	str	r3, [r7, #16]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008402:	69b8      	ldr	r0, [r7, #24]
 8008404:	f000 f908 	bl	8008618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008408:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <pvPortMalloc+0x188>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	4a1b      	ldr	r2, [pc, #108]	; (8008480 <pvPortMalloc+0x188>)
 8008414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008416:	4b1a      	ldr	r3, [pc, #104]	; (8008480 <pvPortMalloc+0x188>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <pvPortMalloc+0x190>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d203      	bcs.n	800842a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008422:	4b17      	ldr	r3, [pc, #92]	; (8008480 <pvPortMalloc+0x188>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a18      	ldr	r2, [pc, #96]	; (8008488 <pvPortMalloc+0x190>)
 8008428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <pvPortMalloc+0x184>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	431a      	orrs	r2, r3
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800843e:	4b13      	ldr	r3, [pc, #76]	; (800848c <pvPortMalloc+0x194>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	4a11      	ldr	r2, [pc, #68]	; (800848c <pvPortMalloc+0x194>)
 8008446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008448:	f7ff fa5e 	bl	8007908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f003 0307 	and.w	r3, r3, #7
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <pvPortMalloc+0x174>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	60fb      	str	r3, [r7, #12]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <pvPortMalloc+0x172>
	return pvReturn;
 800846c:	69fb      	ldr	r3, [r7, #28]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20004970 	.word	0x20004970
 800847c:	20004984 	.word	0x20004984
 8008480:	20004974 	.word	0x20004974
 8008484:	20004968 	.word	0x20004968
 8008488:	20004978 	.word	0x20004978
 800848c:	2000497c 	.word	0x2000497c

08008490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d04d      	beq.n	800853e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084a2:	2308      	movs	r3, #8
 80084a4:	425b      	negs	r3, r3
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	4b24      	ldr	r3, [pc, #144]	; (8008548 <vPortFree+0xb8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4013      	ands	r3, r2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10a      	bne.n	80084d4 <vPortFree+0x44>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	60fb      	str	r3, [r7, #12]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <vPortFree+0x62>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60bb      	str	r3, [r7, #8]
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <vPortFree+0xb8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01e      	beq.n	800853e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d11a      	bne.n	800853e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <vPortFree+0xb8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	43db      	mvns	r3, r3
 8008512:	401a      	ands	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008518:	f7ff f9e8 	bl	80078ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <vPortFree+0xbc>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4413      	add	r3, r2
 8008526:	4a09      	ldr	r2, [pc, #36]	; (800854c <vPortFree+0xbc>)
 8008528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800852a:	6938      	ldr	r0, [r7, #16]
 800852c:	f000 f874 	bl	8008618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <vPortFree+0xc0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	4a06      	ldr	r2, [pc, #24]	; (8008550 <vPortFree+0xc0>)
 8008538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800853a:	f7ff f9e5 	bl	8007908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800853e:	bf00      	nop
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20004984 	.word	0x20004984
 800854c:	20004974 	.word	0x20004974
 8008550:	20004980 	.word	0x20004980

08008554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800855a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800855e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <prvHeapInit+0xac>)
 8008562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3307      	adds	r3, #7
 8008572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0307 	bic.w	r3, r3, #7
 800857a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <prvHeapInit+0xac>)
 8008584:	4413      	add	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <prvHeapInit+0xb0>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <prvHeapInit+0xb0>)
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085a0:	2208      	movs	r2, #8
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0307 	bic.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <prvHeapInit+0xb4>)
 80085b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <prvHeapInit+0xb4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvHeapInit+0xb4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvHeapInit+0xb4>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a0a      	ldr	r2, [pc, #40]	; (800860c <prvHeapInit+0xb8>)
 80085e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4a09      	ldr	r2, [pc, #36]	; (8008610 <prvHeapInit+0xbc>)
 80085ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <prvHeapInit+0xc0>)
 80085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000d68 	.word	0x20000d68
 8008604:	20004968 	.word	0x20004968
 8008608:	20004970 	.word	0x20004970
 800860c:	20004978 	.word	0x20004978
 8008610:	20004974 	.word	0x20004974
 8008614:	20004984 	.word	0x20004984

08008618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <prvInsertBlockIntoFreeList+0xac>)
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e002      	b.n	800862c <prvInsertBlockIntoFreeList+0x14>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d8f7      	bhi.n	8008626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d108      	bne.n	800865a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	441a      	add	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	441a      	add	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d118      	bne.n	80086a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d00d      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e008      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e003      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d002      	beq.n	80086b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20004968 	.word	0x20004968
 80086c8:	20004970 	.word	0x20004970

080086cc <malloc>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <malloc+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f000 b823 	b.w	800871c <_malloc_r>
 80086d6:	bf00      	nop
 80086d8:	200001d8 	.word	0x200001d8

080086dc <sbrk_aligned>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4e0e      	ldr	r6, [pc, #56]	; (8008718 <sbrk_aligned+0x3c>)
 80086e0:	460c      	mov	r4, r1
 80086e2:	6831      	ldr	r1, [r6, #0]
 80086e4:	4605      	mov	r5, r0
 80086e6:	b911      	cbnz	r1, 80086ee <sbrk_aligned+0x12>
 80086e8:	f001 ff26 	bl	800a538 <_sbrk_r>
 80086ec:	6030      	str	r0, [r6, #0]
 80086ee:	4621      	mov	r1, r4
 80086f0:	4628      	mov	r0, r5
 80086f2:	f001 ff21 	bl	800a538 <_sbrk_r>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d00a      	beq.n	8008710 <sbrk_aligned+0x34>
 80086fa:	1cc4      	adds	r4, r0, #3
 80086fc:	f024 0403 	bic.w	r4, r4, #3
 8008700:	42a0      	cmp	r0, r4
 8008702:	d007      	beq.n	8008714 <sbrk_aligned+0x38>
 8008704:	1a21      	subs	r1, r4, r0
 8008706:	4628      	mov	r0, r5
 8008708:	f001 ff16 	bl	800a538 <_sbrk_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d101      	bne.n	8008714 <sbrk_aligned+0x38>
 8008710:	f04f 34ff 	mov.w	r4, #4294967295
 8008714:	4620      	mov	r0, r4
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	2000498c 	.word	0x2000498c

0800871c <_malloc_r>:
 800871c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008720:	1ccd      	adds	r5, r1, #3
 8008722:	f025 0503 	bic.w	r5, r5, #3
 8008726:	3508      	adds	r5, #8
 8008728:	2d0c      	cmp	r5, #12
 800872a:	bf38      	it	cc
 800872c:	250c      	movcc	r5, #12
 800872e:	2d00      	cmp	r5, #0
 8008730:	4607      	mov	r7, r0
 8008732:	db01      	blt.n	8008738 <_malloc_r+0x1c>
 8008734:	42a9      	cmp	r1, r5
 8008736:	d905      	bls.n	8008744 <_malloc_r+0x28>
 8008738:	230c      	movs	r3, #12
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	2600      	movs	r6, #0
 800873e:	4630      	mov	r0, r6
 8008740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008744:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008818 <_malloc_r+0xfc>
 8008748:	f000 f868 	bl	800881c <__malloc_lock>
 800874c:	f8d8 3000 	ldr.w	r3, [r8]
 8008750:	461c      	mov	r4, r3
 8008752:	bb5c      	cbnz	r4, 80087ac <_malloc_r+0x90>
 8008754:	4629      	mov	r1, r5
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ffc0 	bl	80086dc <sbrk_aligned>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	4604      	mov	r4, r0
 8008760:	d155      	bne.n	800880e <_malloc_r+0xf2>
 8008762:	f8d8 4000 	ldr.w	r4, [r8]
 8008766:	4626      	mov	r6, r4
 8008768:	2e00      	cmp	r6, #0
 800876a:	d145      	bne.n	80087f8 <_malloc_r+0xdc>
 800876c:	2c00      	cmp	r4, #0
 800876e:	d048      	beq.n	8008802 <_malloc_r+0xe6>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	4631      	mov	r1, r6
 8008774:	4638      	mov	r0, r7
 8008776:	eb04 0903 	add.w	r9, r4, r3
 800877a:	f001 fedd 	bl	800a538 <_sbrk_r>
 800877e:	4581      	cmp	r9, r0
 8008780:	d13f      	bne.n	8008802 <_malloc_r+0xe6>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	1a6d      	subs	r5, r5, r1
 8008786:	4629      	mov	r1, r5
 8008788:	4638      	mov	r0, r7
 800878a:	f7ff ffa7 	bl	80086dc <sbrk_aligned>
 800878e:	3001      	adds	r0, #1
 8008790:	d037      	beq.n	8008802 <_malloc_r+0xe6>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	442b      	add	r3, r5
 8008796:	6023      	str	r3, [r4, #0]
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d038      	beq.n	8008812 <_malloc_r+0xf6>
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	42a2      	cmp	r2, r4
 80087a4:	d12b      	bne.n	80087fe <_malloc_r+0xe2>
 80087a6:	2200      	movs	r2, #0
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	e00f      	b.n	80087cc <_malloc_r+0xb0>
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	1b52      	subs	r2, r2, r5
 80087b0:	d41f      	bmi.n	80087f2 <_malloc_r+0xd6>
 80087b2:	2a0b      	cmp	r2, #11
 80087b4:	d917      	bls.n	80087e6 <_malloc_r+0xca>
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	6059      	strne	r1, [r3, #4]
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	bf08      	it	eq
 80087c4:	f8c8 1000 	streq.w	r1, [r8]
 80087c8:	5162      	str	r2, [r4, r5]
 80087ca:	604b      	str	r3, [r1, #4]
 80087cc:	4638      	mov	r0, r7
 80087ce:	f104 060b 	add.w	r6, r4, #11
 80087d2:	f000 f829 	bl	8008828 <__malloc_unlock>
 80087d6:	f026 0607 	bic.w	r6, r6, #7
 80087da:	1d23      	adds	r3, r4, #4
 80087dc:	1af2      	subs	r2, r6, r3
 80087de:	d0ae      	beq.n	800873e <_malloc_r+0x22>
 80087e0:	1b9b      	subs	r3, r3, r6
 80087e2:	50a3      	str	r3, [r4, r2]
 80087e4:	e7ab      	b.n	800873e <_malloc_r+0x22>
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	6862      	ldr	r2, [r4, #4]
 80087ea:	d1dd      	bne.n	80087a8 <_malloc_r+0x8c>
 80087ec:	f8c8 2000 	str.w	r2, [r8]
 80087f0:	e7ec      	b.n	80087cc <_malloc_r+0xb0>
 80087f2:	4623      	mov	r3, r4
 80087f4:	6864      	ldr	r4, [r4, #4]
 80087f6:	e7ac      	b.n	8008752 <_malloc_r+0x36>
 80087f8:	4634      	mov	r4, r6
 80087fa:	6876      	ldr	r6, [r6, #4]
 80087fc:	e7b4      	b.n	8008768 <_malloc_r+0x4c>
 80087fe:	4613      	mov	r3, r2
 8008800:	e7cc      	b.n	800879c <_malloc_r+0x80>
 8008802:	230c      	movs	r3, #12
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4638      	mov	r0, r7
 8008808:	f000 f80e 	bl	8008828 <__malloc_unlock>
 800880c:	e797      	b.n	800873e <_malloc_r+0x22>
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	e7dc      	b.n	80087cc <_malloc_r+0xb0>
 8008812:	605b      	str	r3, [r3, #4]
 8008814:	deff      	udf	#255	; 0xff
 8008816:	bf00      	nop
 8008818:	20004988 	.word	0x20004988

0800881c <__malloc_lock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_lock+0x8>)
 800881e:	f001 bed8 	b.w	800a5d2 <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20004ad0 	.word	0x20004ad0

08008828 <__malloc_unlock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_unlock+0x8>)
 800882a:	f001 bed3 	b.w	800a5d4 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20004ad0 	.word	0x20004ad0

08008834 <_realloc_r>:
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	4680      	mov	r8, r0
 800883a:	4614      	mov	r4, r2
 800883c:	460e      	mov	r6, r1
 800883e:	b921      	cbnz	r1, 800884a <_realloc_r+0x16>
 8008840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	4611      	mov	r1, r2
 8008846:	f7ff bf69 	b.w	800871c <_malloc_r>
 800884a:	b92a      	cbnz	r2, 8008858 <_realloc_r+0x24>
 800884c:	f002 fd5e 	bl	800b30c <_free_r>
 8008850:	4625      	mov	r5, r4
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008858:	f003 fdbb 	bl	800c3d2 <_malloc_usable_size_r>
 800885c:	4284      	cmp	r4, r0
 800885e:	4607      	mov	r7, r0
 8008860:	d802      	bhi.n	8008868 <_realloc_r+0x34>
 8008862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008866:	d812      	bhi.n	800888e <_realloc_r+0x5a>
 8008868:	4621      	mov	r1, r4
 800886a:	4640      	mov	r0, r8
 800886c:	f7ff ff56 	bl	800871c <_malloc_r>
 8008870:	4605      	mov	r5, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d0ed      	beq.n	8008852 <_realloc_r+0x1e>
 8008876:	42bc      	cmp	r4, r7
 8008878:	4622      	mov	r2, r4
 800887a:	4631      	mov	r1, r6
 800887c:	bf28      	it	cs
 800887e:	463a      	movcs	r2, r7
 8008880:	f001 fea9 	bl	800a5d6 <memcpy>
 8008884:	4631      	mov	r1, r6
 8008886:	4640      	mov	r0, r8
 8008888:	f002 fd40 	bl	800b30c <_free_r>
 800888c:	e7e1      	b.n	8008852 <_realloc_r+0x1e>
 800888e:	4635      	mov	r5, r6
 8008890:	e7df      	b.n	8008852 <_realloc_r+0x1e>

08008892 <sulp>:
 8008892:	b570      	push	{r4, r5, r6, lr}
 8008894:	4604      	mov	r4, r0
 8008896:	460d      	mov	r5, r1
 8008898:	ec45 4b10 	vmov	d0, r4, r5
 800889c:	4616      	mov	r6, r2
 800889e:	f003 fc57 	bl	800c150 <__ulp>
 80088a2:	ec51 0b10 	vmov	r0, r1, d0
 80088a6:	b17e      	cbz	r6, 80088c8 <sulp+0x36>
 80088a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dd09      	ble.n	80088c8 <sulp+0x36>
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80088ba:	2400      	movs	r4, #0
 80088bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80088c0:	4622      	mov	r2, r4
 80088c2:	462b      	mov	r3, r5
 80088c4:	f7f7 fe98 	bl	80005f8 <__aeabi_dmul>
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	0000      	movs	r0, r0
 80088cc:	0000      	movs	r0, r0
	...

080088d0 <_strtod_l>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	ed2d 8b02 	vpush	{d8}
 80088d8:	b09b      	sub	sp, #108	; 0x6c
 80088da:	4604      	mov	r4, r0
 80088dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80088de:	2200      	movs	r2, #0
 80088e0:	9216      	str	r2, [sp, #88]	; 0x58
 80088e2:	460d      	mov	r5, r1
 80088e4:	f04f 0800 	mov.w	r8, #0
 80088e8:	f04f 0900 	mov.w	r9, #0
 80088ec:	460a      	mov	r2, r1
 80088ee:	9215      	str	r2, [sp, #84]	; 0x54
 80088f0:	7811      	ldrb	r1, [r2, #0]
 80088f2:	292b      	cmp	r1, #43	; 0x2b
 80088f4:	d04c      	beq.n	8008990 <_strtod_l+0xc0>
 80088f6:	d83a      	bhi.n	800896e <_strtod_l+0x9e>
 80088f8:	290d      	cmp	r1, #13
 80088fa:	d834      	bhi.n	8008966 <_strtod_l+0x96>
 80088fc:	2908      	cmp	r1, #8
 80088fe:	d834      	bhi.n	800896a <_strtod_l+0x9a>
 8008900:	2900      	cmp	r1, #0
 8008902:	d03d      	beq.n	8008980 <_strtod_l+0xb0>
 8008904:	2200      	movs	r2, #0
 8008906:	920a      	str	r2, [sp, #40]	; 0x28
 8008908:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800890a:	7832      	ldrb	r2, [r6, #0]
 800890c:	2a30      	cmp	r2, #48	; 0x30
 800890e:	f040 80b4 	bne.w	8008a7a <_strtod_l+0x1aa>
 8008912:	7872      	ldrb	r2, [r6, #1]
 8008914:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008918:	2a58      	cmp	r2, #88	; 0x58
 800891a:	d170      	bne.n	80089fe <_strtod_l+0x12e>
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	ab16      	add	r3, sp, #88	; 0x58
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4a8e      	ldr	r2, [pc, #568]	; (8008b60 <_strtod_l+0x290>)
 8008928:	ab17      	add	r3, sp, #92	; 0x5c
 800892a:	a915      	add	r1, sp, #84	; 0x54
 800892c:	4620      	mov	r0, r4
 800892e:	f002 fda1 	bl	800b474 <__gethex>
 8008932:	f010 070f 	ands.w	r7, r0, #15
 8008936:	4605      	mov	r5, r0
 8008938:	d005      	beq.n	8008946 <_strtod_l+0x76>
 800893a:	2f06      	cmp	r7, #6
 800893c:	d12a      	bne.n	8008994 <_strtod_l+0xc4>
 800893e:	3601      	adds	r6, #1
 8008940:	2300      	movs	r3, #0
 8008942:	9615      	str	r6, [sp, #84]	; 0x54
 8008944:	930a      	str	r3, [sp, #40]	; 0x28
 8008946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 857f 	bne.w	800944c <_strtod_l+0xb7c>
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	b1db      	cbz	r3, 800898a <_strtod_l+0xba>
 8008952:	4642      	mov	r2, r8
 8008954:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008958:	ec43 2b10 	vmov	d0, r2, r3
 800895c:	b01b      	add	sp, #108	; 0x6c
 800895e:	ecbd 8b02 	vpop	{d8}
 8008962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008966:	2920      	cmp	r1, #32
 8008968:	d1cc      	bne.n	8008904 <_strtod_l+0x34>
 800896a:	3201      	adds	r2, #1
 800896c:	e7bf      	b.n	80088ee <_strtod_l+0x1e>
 800896e:	292d      	cmp	r1, #45	; 0x2d
 8008970:	d1c8      	bne.n	8008904 <_strtod_l+0x34>
 8008972:	2101      	movs	r1, #1
 8008974:	910a      	str	r1, [sp, #40]	; 0x28
 8008976:	1c51      	adds	r1, r2, #1
 8008978:	9115      	str	r1, [sp, #84]	; 0x54
 800897a:	7852      	ldrb	r2, [r2, #1]
 800897c:	2a00      	cmp	r2, #0
 800897e:	d1c3      	bne.n	8008908 <_strtod_l+0x38>
 8008980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008982:	9515      	str	r5, [sp, #84]	; 0x54
 8008984:	2b00      	cmp	r3, #0
 8008986:	f040 855f 	bne.w	8009448 <_strtod_l+0xb78>
 800898a:	4642      	mov	r2, r8
 800898c:	464b      	mov	r3, r9
 800898e:	e7e3      	b.n	8008958 <_strtod_l+0x88>
 8008990:	2100      	movs	r1, #0
 8008992:	e7ef      	b.n	8008974 <_strtod_l+0xa4>
 8008994:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008996:	b13a      	cbz	r2, 80089a8 <_strtod_l+0xd8>
 8008998:	2135      	movs	r1, #53	; 0x35
 800899a:	a818      	add	r0, sp, #96	; 0x60
 800899c:	f003 fcd5 	bl	800c34a <__copybits>
 80089a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089a2:	4620      	mov	r0, r4
 80089a4:	f003 f8a8 	bl	800baf8 <_Bfree>
 80089a8:	3f01      	subs	r7, #1
 80089aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089ac:	2f04      	cmp	r7, #4
 80089ae:	d806      	bhi.n	80089be <_strtod_l+0xee>
 80089b0:	e8df f007 	tbb	[pc, r7]
 80089b4:	201d0314 	.word	0x201d0314
 80089b8:	14          	.byte	0x14
 80089b9:	00          	.byte	0x00
 80089ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80089be:	05e9      	lsls	r1, r5, #23
 80089c0:	bf48      	it	mi
 80089c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80089c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80089ca:	0d1b      	lsrs	r3, r3, #20
 80089cc:	051b      	lsls	r3, r3, #20
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1b9      	bne.n	8008946 <_strtod_l+0x76>
 80089d2:	f001 fdd3 	bl	800a57c <__errno>
 80089d6:	2322      	movs	r3, #34	; 0x22
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	e7b4      	b.n	8008946 <_strtod_l+0x76>
 80089dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80089e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80089e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80089e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80089ec:	e7e7      	b.n	80089be <_strtod_l+0xee>
 80089ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b68 <_strtod_l+0x298>
 80089f2:	e7e4      	b.n	80089be <_strtod_l+0xee>
 80089f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80089f8:	f04f 38ff 	mov.w	r8, #4294967295
 80089fc:	e7df      	b.n	80089be <_strtod_l+0xee>
 80089fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	9215      	str	r2, [sp, #84]	; 0x54
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b30      	cmp	r3, #48	; 0x30
 8008a08:	d0f9      	beq.n	80089fe <_strtod_l+0x12e>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d09b      	beq.n	8008946 <_strtod_l+0x76>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	9304      	str	r3, [sp, #16]
 8008a16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008a1e:	46d3      	mov	fp, sl
 8008a20:	220a      	movs	r2, #10
 8008a22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008a24:	7806      	ldrb	r6, [r0, #0]
 8008a26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a2a:	b2d9      	uxtb	r1, r3
 8008a2c:	2909      	cmp	r1, #9
 8008a2e:	d926      	bls.n	8008a7e <_strtod_l+0x1ae>
 8008a30:	494c      	ldr	r1, [pc, #304]	; (8008b64 <_strtod_l+0x294>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	f001 fd20 	bl	800a478 <strncmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d030      	beq.n	8008a9e <_strtod_l+0x1ce>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4632      	mov	r2, r6
 8008a40:	9005      	str	r0, [sp, #20]
 8008a42:	465e      	mov	r6, fp
 8008a44:	4603      	mov	r3, r0
 8008a46:	2a65      	cmp	r2, #101	; 0x65
 8008a48:	d001      	beq.n	8008a4e <_strtod_l+0x17e>
 8008a4a:	2a45      	cmp	r2, #69	; 0x45
 8008a4c:	d113      	bne.n	8008a76 <_strtod_l+0x1a6>
 8008a4e:	b91e      	cbnz	r6, 8008a58 <_strtod_l+0x188>
 8008a50:	9a04      	ldr	r2, [sp, #16]
 8008a52:	4302      	orrs	r2, r0
 8008a54:	d094      	beq.n	8008980 <_strtod_l+0xb0>
 8008a56:	2600      	movs	r6, #0
 8008a58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008a5a:	1c6a      	adds	r2, r5, #1
 8008a5c:	9215      	str	r2, [sp, #84]	; 0x54
 8008a5e:	786a      	ldrb	r2, [r5, #1]
 8008a60:	2a2b      	cmp	r2, #43	; 0x2b
 8008a62:	d074      	beq.n	8008b4e <_strtod_l+0x27e>
 8008a64:	2a2d      	cmp	r2, #45	; 0x2d
 8008a66:	d078      	beq.n	8008b5a <_strtod_l+0x28a>
 8008a68:	f04f 0c00 	mov.w	ip, #0
 8008a6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008a70:	2909      	cmp	r1, #9
 8008a72:	d97f      	bls.n	8008b74 <_strtod_l+0x2a4>
 8008a74:	9515      	str	r5, [sp, #84]	; 0x54
 8008a76:	2700      	movs	r7, #0
 8008a78:	e09e      	b.n	8008bb8 <_strtod_l+0x2e8>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	e7c8      	b.n	8008a10 <_strtod_l+0x140>
 8008a7e:	f1bb 0f08 	cmp.w	fp, #8
 8008a82:	bfd8      	it	le
 8008a84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008a86:	f100 0001 	add.w	r0, r0, #1
 8008a8a:	bfda      	itte	le
 8008a8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a90:	9309      	strle	r3, [sp, #36]	; 0x24
 8008a92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008a96:	f10b 0b01 	add.w	fp, fp, #1
 8008a9a:	9015      	str	r0, [sp, #84]	; 0x54
 8008a9c:	e7c1      	b.n	8008a22 <_strtod_l+0x152>
 8008a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8008aa4:	785a      	ldrb	r2, [r3, #1]
 8008aa6:	f1bb 0f00 	cmp.w	fp, #0
 8008aaa:	d037      	beq.n	8008b1c <_strtod_l+0x24c>
 8008aac:	9005      	str	r0, [sp, #20]
 8008aae:	465e      	mov	r6, fp
 8008ab0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d912      	bls.n	8008ade <_strtod_l+0x20e>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e7c4      	b.n	8008a46 <_strtod_l+0x176>
 8008abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	9215      	str	r2, [sp, #84]	; 0x54
 8008ac2:	785a      	ldrb	r2, [r3, #1]
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	2a30      	cmp	r2, #48	; 0x30
 8008ac8:	d0f8      	beq.n	8008abc <_strtod_l+0x1ec>
 8008aca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008ace:	2b08      	cmp	r3, #8
 8008ad0:	f200 84c1 	bhi.w	8009456 <_strtod_l+0xb86>
 8008ad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ad6:	9005      	str	r0, [sp, #20]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8008adc:	4606      	mov	r6, r0
 8008ade:	3a30      	subs	r2, #48	; 0x30
 8008ae0:	f100 0301 	add.w	r3, r0, #1
 8008ae4:	d014      	beq.n	8008b10 <_strtod_l+0x240>
 8008ae6:	9905      	ldr	r1, [sp, #20]
 8008ae8:	4419      	add	r1, r3
 8008aea:	9105      	str	r1, [sp, #20]
 8008aec:	4633      	mov	r3, r6
 8008aee:	eb00 0c06 	add.w	ip, r0, r6
 8008af2:	210a      	movs	r1, #10
 8008af4:	4563      	cmp	r3, ip
 8008af6:	d113      	bne.n	8008b20 <_strtod_l+0x250>
 8008af8:	1833      	adds	r3, r6, r0
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	f106 0601 	add.w	r6, r6, #1
 8008b00:	4406      	add	r6, r0
 8008b02:	dc1a      	bgt.n	8008b3a <_strtod_l+0x26a>
 8008b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b06:	230a      	movs	r3, #10
 8008b08:	fb03 2301 	mla	r3, r3, r1, r2
 8008b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b12:	1c51      	adds	r1, r2, #1
 8008b14:	9115      	str	r1, [sp, #84]	; 0x54
 8008b16:	7852      	ldrb	r2, [r2, #1]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	e7c9      	b.n	8008ab0 <_strtod_l+0x1e0>
 8008b1c:	4658      	mov	r0, fp
 8008b1e:	e7d2      	b.n	8008ac6 <_strtod_l+0x1f6>
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	f103 0301 	add.w	r3, r3, #1
 8008b26:	dc03      	bgt.n	8008b30 <_strtod_l+0x260>
 8008b28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008b2a:	434f      	muls	r7, r1
 8008b2c:	9709      	str	r7, [sp, #36]	; 0x24
 8008b2e:	e7e1      	b.n	8008af4 <_strtod_l+0x224>
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	bfd8      	it	le
 8008b34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008b38:	e7dc      	b.n	8008af4 <_strtod_l+0x224>
 8008b3a:	2e10      	cmp	r6, #16
 8008b3c:	bfdc      	itt	le
 8008b3e:	230a      	movle	r3, #10
 8008b40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008b44:	e7e3      	b.n	8008b0e <_strtod_l+0x23e>
 8008b46:	2300      	movs	r3, #0
 8008b48:	9305      	str	r3, [sp, #20]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e780      	b.n	8008a50 <_strtod_l+0x180>
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	1caa      	adds	r2, r5, #2
 8008b54:	9215      	str	r2, [sp, #84]	; 0x54
 8008b56:	78aa      	ldrb	r2, [r5, #2]
 8008b58:	e788      	b.n	8008a6c <_strtod_l+0x19c>
 8008b5a:	f04f 0c01 	mov.w	ip, #1
 8008b5e:	e7f8      	b.n	8008b52 <_strtod_l+0x282>
 8008b60:	0800d8c0 	.word	0x0800d8c0
 8008b64:	0800d8bc 	.word	0x0800d8bc
 8008b68:	7ff00000 	.word	0x7ff00000
 8008b6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b6e:	1c51      	adds	r1, r2, #1
 8008b70:	9115      	str	r1, [sp, #84]	; 0x54
 8008b72:	7852      	ldrb	r2, [r2, #1]
 8008b74:	2a30      	cmp	r2, #48	; 0x30
 8008b76:	d0f9      	beq.n	8008b6c <_strtod_l+0x29c>
 8008b78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008b7c:	2908      	cmp	r1, #8
 8008b7e:	f63f af7a 	bhi.w	8008a76 <_strtod_l+0x1a6>
 8008b82:	3a30      	subs	r2, #48	; 0x30
 8008b84:	9208      	str	r2, [sp, #32]
 8008b86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b88:	920c      	str	r2, [sp, #48]	; 0x30
 8008b8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b8c:	1c57      	adds	r7, r2, #1
 8008b8e:	9715      	str	r7, [sp, #84]	; 0x54
 8008b90:	7852      	ldrb	r2, [r2, #1]
 8008b92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008b96:	f1be 0f09 	cmp.w	lr, #9
 8008b9a:	d938      	bls.n	8008c0e <_strtod_l+0x33e>
 8008b9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b9e:	1a7f      	subs	r7, r7, r1
 8008ba0:	2f08      	cmp	r7, #8
 8008ba2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ba6:	dc03      	bgt.n	8008bb0 <_strtod_l+0x2e0>
 8008ba8:	9908      	ldr	r1, [sp, #32]
 8008baa:	428f      	cmp	r7, r1
 8008bac:	bfa8      	it	ge
 8008bae:	460f      	movge	r7, r1
 8008bb0:	f1bc 0f00 	cmp.w	ip, #0
 8008bb4:	d000      	beq.n	8008bb8 <_strtod_l+0x2e8>
 8008bb6:	427f      	negs	r7, r7
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	d14f      	bne.n	8008c5c <_strtod_l+0x38c>
 8008bbc:	9904      	ldr	r1, [sp, #16]
 8008bbe:	4301      	orrs	r1, r0
 8008bc0:	f47f aec1 	bne.w	8008946 <_strtod_l+0x76>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f47f aedb 	bne.w	8008980 <_strtod_l+0xb0>
 8008bca:	2a69      	cmp	r2, #105	; 0x69
 8008bcc:	d029      	beq.n	8008c22 <_strtod_l+0x352>
 8008bce:	dc26      	bgt.n	8008c1e <_strtod_l+0x34e>
 8008bd0:	2a49      	cmp	r2, #73	; 0x49
 8008bd2:	d026      	beq.n	8008c22 <_strtod_l+0x352>
 8008bd4:	2a4e      	cmp	r2, #78	; 0x4e
 8008bd6:	f47f aed3 	bne.w	8008980 <_strtod_l+0xb0>
 8008bda:	499b      	ldr	r1, [pc, #620]	; (8008e48 <_strtod_l+0x578>)
 8008bdc:	a815      	add	r0, sp, #84	; 0x54
 8008bde:	f002 fe89 	bl	800b8f4 <__match>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	f43f aecc 	beq.w	8008980 <_strtod_l+0xb0>
 8008be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b28      	cmp	r3, #40	; 0x28
 8008bee:	d12f      	bne.n	8008c50 <_strtod_l+0x380>
 8008bf0:	4996      	ldr	r1, [pc, #600]	; (8008e4c <_strtod_l+0x57c>)
 8008bf2:	aa18      	add	r2, sp, #96	; 0x60
 8008bf4:	a815      	add	r0, sp, #84	; 0x54
 8008bf6:	f002 fe91 	bl	800b91c <__hexnan>
 8008bfa:	2805      	cmp	r0, #5
 8008bfc:	d128      	bne.n	8008c50 <_strtod_l+0x380>
 8008bfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008c08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008c0c:	e69b      	b.n	8008946 <_strtod_l+0x76>
 8008c0e:	9f08      	ldr	r7, [sp, #32]
 8008c10:	210a      	movs	r1, #10
 8008c12:	fb01 2107 	mla	r1, r1, r7, r2
 8008c16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008c1a:	9208      	str	r2, [sp, #32]
 8008c1c:	e7b5      	b.n	8008b8a <_strtod_l+0x2ba>
 8008c1e:	2a6e      	cmp	r2, #110	; 0x6e
 8008c20:	e7d9      	b.n	8008bd6 <_strtod_l+0x306>
 8008c22:	498b      	ldr	r1, [pc, #556]	; (8008e50 <_strtod_l+0x580>)
 8008c24:	a815      	add	r0, sp, #84	; 0x54
 8008c26:	f002 fe65 	bl	800b8f4 <__match>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f43f aea8 	beq.w	8008980 <_strtod_l+0xb0>
 8008c30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c32:	4988      	ldr	r1, [pc, #544]	; (8008e54 <_strtod_l+0x584>)
 8008c34:	3b01      	subs	r3, #1
 8008c36:	a815      	add	r0, sp, #84	; 0x54
 8008c38:	9315      	str	r3, [sp, #84]	; 0x54
 8008c3a:	f002 fe5b 	bl	800b8f4 <__match>
 8008c3e:	b910      	cbnz	r0, 8008c46 <_strtod_l+0x376>
 8008c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c42:	3301      	adds	r3, #1
 8008c44:	9315      	str	r3, [sp, #84]	; 0x54
 8008c46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008e64 <_strtod_l+0x594>
 8008c4a:	f04f 0800 	mov.w	r8, #0
 8008c4e:	e67a      	b.n	8008946 <_strtod_l+0x76>
 8008c50:	4881      	ldr	r0, [pc, #516]	; (8008e58 <_strtod_l+0x588>)
 8008c52:	f001 fcd1 	bl	800a5f8 <nan>
 8008c56:	ec59 8b10 	vmov	r8, r9, d0
 8008c5a:	e674      	b.n	8008946 <_strtod_l+0x76>
 8008c5c:	9b05      	ldr	r3, [sp, #20]
 8008c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c60:	1afb      	subs	r3, r7, r3
 8008c62:	f1bb 0f00 	cmp.w	fp, #0
 8008c66:	bf08      	it	eq
 8008c68:	46b3      	moveq	fp, r6
 8008c6a:	2e10      	cmp	r6, #16
 8008c6c:	9308      	str	r3, [sp, #32]
 8008c6e:	4635      	mov	r5, r6
 8008c70:	bfa8      	it	ge
 8008c72:	2510      	movge	r5, #16
 8008c74:	f7f7 fc46 	bl	8000504 <__aeabi_ui2d>
 8008c78:	2e09      	cmp	r6, #9
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4689      	mov	r9, r1
 8008c7e:	dd13      	ble.n	8008ca8 <_strtod_l+0x3d8>
 8008c80:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <_strtod_l+0x58c>)
 8008c82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008c8a:	f7f7 fcb5 	bl	80005f8 <__aeabi_dmul>
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4650      	mov	r0, sl
 8008c92:	4689      	mov	r9, r1
 8008c94:	f7f7 fc36 	bl	8000504 <__aeabi_ui2d>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 faf4 	bl	800028c <__adddf3>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	2e0f      	cmp	r6, #15
 8008caa:	dc38      	bgt.n	8008d1e <_strtod_l+0x44e>
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f43f ae49 	beq.w	8008946 <_strtod_l+0x76>
 8008cb4:	dd24      	ble.n	8008d00 <_strtod_l+0x430>
 8008cb6:	2b16      	cmp	r3, #22
 8008cb8:	dc0b      	bgt.n	8008cd2 <_strtod_l+0x402>
 8008cba:	4968      	ldr	r1, [pc, #416]	; (8008e5c <_strtod_l+0x58c>)
 8008cbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cc4:	4642      	mov	r2, r8
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f7f7 fc96 	bl	80005f8 <__aeabi_dmul>
 8008ccc:	4680      	mov	r8, r0
 8008cce:	4689      	mov	r9, r1
 8008cd0:	e639      	b.n	8008946 <_strtod_l+0x76>
 8008cd2:	9a08      	ldr	r2, [sp, #32]
 8008cd4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	db20      	blt.n	8008d1e <_strtod_l+0x44e>
 8008cdc:	4c5f      	ldr	r4, [pc, #380]	; (8008e5c <_strtod_l+0x58c>)
 8008cde:	f1c6 060f 	rsb	r6, r6, #15
 8008ce2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	464b      	mov	r3, r9
 8008cea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cee:	f7f7 fc83 	bl	80005f8 <__aeabi_dmul>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	1b9e      	subs	r6, r3, r6
 8008cf6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008cfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cfe:	e7e3      	b.n	8008cc8 <_strtod_l+0x3f8>
 8008d00:	9b08      	ldr	r3, [sp, #32]
 8008d02:	3316      	adds	r3, #22
 8008d04:	db0b      	blt.n	8008d1e <_strtod_l+0x44e>
 8008d06:	9b05      	ldr	r3, [sp, #20]
 8008d08:	1bdf      	subs	r7, r3, r7
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <_strtod_l+0x58c>)
 8008d0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 fd98 	bl	800084c <__aeabi_ddiv>
 8008d1c:	e7d6      	b.n	8008ccc <_strtod_l+0x3fc>
 8008d1e:	9b08      	ldr	r3, [sp, #32]
 8008d20:	1b75      	subs	r5, r6, r5
 8008d22:	441d      	add	r5, r3
 8008d24:	2d00      	cmp	r5, #0
 8008d26:	dd70      	ble.n	8008e0a <_strtod_l+0x53a>
 8008d28:	f015 030f 	ands.w	r3, r5, #15
 8008d2c:	d00a      	beq.n	8008d44 <_strtod_l+0x474>
 8008d2e:	494b      	ldr	r1, [pc, #300]	; (8008e5c <_strtod_l+0x58c>)
 8008d30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d34:	4642      	mov	r2, r8
 8008d36:	464b      	mov	r3, r9
 8008d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3c:	f7f7 fc5c 	bl	80005f8 <__aeabi_dmul>
 8008d40:	4680      	mov	r8, r0
 8008d42:	4689      	mov	r9, r1
 8008d44:	f035 050f 	bics.w	r5, r5, #15
 8008d48:	d04d      	beq.n	8008de6 <_strtod_l+0x516>
 8008d4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008d4e:	dd22      	ble.n	8008d96 <_strtod_l+0x4c6>
 8008d50:	2500      	movs	r5, #0
 8008d52:	46ab      	mov	fp, r5
 8008d54:	9509      	str	r5, [sp, #36]	; 0x24
 8008d56:	9505      	str	r5, [sp, #20]
 8008d58:	2322      	movs	r3, #34	; 0x22
 8008d5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008e64 <_strtod_l+0x594>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	f04f 0800 	mov.w	r8, #0
 8008d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f43f aded 	beq.w	8008946 <_strtod_l+0x76>
 8008d6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f002 fec2 	bl	800baf8 <_Bfree>
 8008d74:	9905      	ldr	r1, [sp, #20]
 8008d76:	4620      	mov	r0, r4
 8008d78:	f002 febe 	bl	800baf8 <_Bfree>
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f002 feba 	bl	800baf8 <_Bfree>
 8008d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d86:	4620      	mov	r0, r4
 8008d88:	f002 feb6 	bl	800baf8 <_Bfree>
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f002 feb2 	bl	800baf8 <_Bfree>
 8008d94:	e5d7      	b.n	8008946 <_strtod_l+0x76>
 8008d96:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <_strtod_l+0x590>)
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	112d      	asrs	r5, r5, #4
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	469a      	mov	sl, r3
 8008da4:	2d01      	cmp	r5, #1
 8008da6:	dc21      	bgt.n	8008dec <_strtod_l+0x51c>
 8008da8:	b10b      	cbz	r3, 8008dae <_strtod_l+0x4de>
 8008daa:	4680      	mov	r8, r0
 8008dac:	4689      	mov	r9, r1
 8008dae:	492c      	ldr	r1, [pc, #176]	; (8008e60 <_strtod_l+0x590>)
 8008db0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008db4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc0:	f7f7 fc1a 	bl	80005f8 <__aeabi_dmul>
 8008dc4:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <_strtod_l+0x594>)
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	400b      	ands	r3, r1
 8008dca:	4927      	ldr	r1, [pc, #156]	; (8008e68 <_strtod_l+0x598>)
 8008dcc:	428b      	cmp	r3, r1
 8008dce:	4680      	mov	r8, r0
 8008dd0:	d8be      	bhi.n	8008d50 <_strtod_l+0x480>
 8008dd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008dd6:	428b      	cmp	r3, r1
 8008dd8:	bf86      	itte	hi
 8008dda:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008e6c <_strtod_l+0x59c>
 8008dde:	f04f 38ff 	movhi.w	r8, #4294967295
 8008de2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008de6:	2300      	movs	r3, #0
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	e07b      	b.n	8008ee4 <_strtod_l+0x614>
 8008dec:	07ea      	lsls	r2, r5, #31
 8008dee:	d505      	bpl.n	8008dfc <_strtod_l+0x52c>
 8008df0:	9b04      	ldr	r3, [sp, #16]
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	9a04      	ldr	r2, [sp, #16]
 8008dfe:	3208      	adds	r2, #8
 8008e00:	f10a 0a01 	add.w	sl, sl, #1
 8008e04:	106d      	asrs	r5, r5, #1
 8008e06:	9204      	str	r2, [sp, #16]
 8008e08:	e7cc      	b.n	8008da4 <_strtod_l+0x4d4>
 8008e0a:	d0ec      	beq.n	8008de6 <_strtod_l+0x516>
 8008e0c:	426d      	negs	r5, r5
 8008e0e:	f015 020f 	ands.w	r2, r5, #15
 8008e12:	d00a      	beq.n	8008e2a <_strtod_l+0x55a>
 8008e14:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <_strtod_l+0x58c>)
 8008e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fd13 	bl	800084c <__aeabi_ddiv>
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	112d      	asrs	r5, r5, #4
 8008e2c:	d0db      	beq.n	8008de6 <_strtod_l+0x516>
 8008e2e:	2d1f      	cmp	r5, #31
 8008e30:	dd1e      	ble.n	8008e70 <_strtod_l+0x5a0>
 8008e32:	2500      	movs	r5, #0
 8008e34:	46ab      	mov	fp, r5
 8008e36:	9509      	str	r5, [sp, #36]	; 0x24
 8008e38:	9505      	str	r5, [sp, #20]
 8008e3a:	2322      	movs	r3, #34	; 0x22
 8008e3c:	f04f 0800 	mov.w	r8, #0
 8008e40:	f04f 0900 	mov.w	r9, #0
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	e78d      	b.n	8008d64 <_strtod_l+0x494>
 8008e48:	0800da1e 	.word	0x0800da1e
 8008e4c:	0800d8d4 	.word	0x0800d8d4
 8008e50:	0800da16 	.word	0x0800da16
 8008e54:	0800da53 	.word	0x0800da53
 8008e58:	0800dcfb 	.word	0x0800dcfb
 8008e5c:	0800dbc0 	.word	0x0800dbc0
 8008e60:	0800db98 	.word	0x0800db98
 8008e64:	7ff00000 	.word	0x7ff00000
 8008e68:	7ca00000 	.word	0x7ca00000
 8008e6c:	7fefffff 	.word	0x7fefffff
 8008e70:	f015 0310 	ands.w	r3, r5, #16
 8008e74:	bf18      	it	ne
 8008e76:	236a      	movne	r3, #106	; 0x6a
 8008e78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800921c <_strtod_l+0x94c>
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	4640      	mov	r0, r8
 8008e80:	4649      	mov	r1, r9
 8008e82:	2300      	movs	r3, #0
 8008e84:	07ea      	lsls	r2, r5, #31
 8008e86:	d504      	bpl.n	8008e92 <_strtod_l+0x5c2>
 8008e88:	e9da 2300 	ldrd	r2, r3, [sl]
 8008e8c:	f7f7 fbb4 	bl	80005f8 <__aeabi_dmul>
 8008e90:	2301      	movs	r3, #1
 8008e92:	106d      	asrs	r5, r5, #1
 8008e94:	f10a 0a08 	add.w	sl, sl, #8
 8008e98:	d1f4      	bne.n	8008e84 <_strtod_l+0x5b4>
 8008e9a:	b10b      	cbz	r3, 8008ea0 <_strtod_l+0x5d0>
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	4689      	mov	r9, r1
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	b1bb      	cbz	r3, 8008ed4 <_strtod_l+0x604>
 8008ea4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008ea8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	4649      	mov	r1, r9
 8008eb0:	dd10      	ble.n	8008ed4 <_strtod_l+0x604>
 8008eb2:	2b1f      	cmp	r3, #31
 8008eb4:	f340 811e 	ble.w	80090f4 <_strtod_l+0x824>
 8008eb8:	2b34      	cmp	r3, #52	; 0x34
 8008eba:	bfde      	ittt	le
 8008ebc:	f04f 33ff 	movle.w	r3, #4294967295
 8008ec0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ec4:	4093      	lslle	r3, r2
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	bfcc      	ite	gt
 8008ecc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008ed0:	ea03 0901 	andle.w	r9, r3, r1
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d1a6      	bne.n	8008e32 <_strtod_l+0x562>
 8008ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008eea:	4633      	mov	r3, r6
 8008eec:	465a      	mov	r2, fp
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f002 fe6a 	bl	800bbc8 <__s2b>
 8008ef4:	9009      	str	r0, [sp, #36]	; 0x24
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f43f af2a 	beq.w	8008d50 <_strtod_l+0x480>
 8008efc:	9a08      	ldr	r2, [sp, #32]
 8008efe:	9b05      	ldr	r3, [sp, #20]
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	eba3 0307 	sub.w	r3, r3, r7
 8008f06:	bfa8      	it	ge
 8008f08:	2300      	movge	r3, #0
 8008f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008f0c:	2500      	movs	r5, #0
 8008f0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f12:	9312      	str	r3, [sp, #72]	; 0x48
 8008f14:	46ab      	mov	fp, r5
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	4620      	mov	r0, r4
 8008f1a:	6859      	ldr	r1, [r3, #4]
 8008f1c:	f002 fdac 	bl	800ba78 <_Balloc>
 8008f20:	9005      	str	r0, [sp, #20]
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f af18 	beq.w	8008d58 <_strtod_l+0x488>
 8008f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2a:	691a      	ldr	r2, [r3, #16]
 8008f2c:	3202      	adds	r2, #2
 8008f2e:	f103 010c 	add.w	r1, r3, #12
 8008f32:	0092      	lsls	r2, r2, #2
 8008f34:	300c      	adds	r0, #12
 8008f36:	f001 fb4e 	bl	800a5d6 <memcpy>
 8008f3a:	ec49 8b10 	vmov	d0, r8, r9
 8008f3e:	aa18      	add	r2, sp, #96	; 0x60
 8008f40:	a917      	add	r1, sp, #92	; 0x5c
 8008f42:	4620      	mov	r0, r4
 8008f44:	f003 f974 	bl	800c230 <__d2b>
 8008f48:	ec49 8b18 	vmov	d8, r8, r9
 8008f4c:	9016      	str	r0, [sp, #88]	; 0x58
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f af02 	beq.w	8008d58 <_strtod_l+0x488>
 8008f54:	2101      	movs	r1, #1
 8008f56:	4620      	mov	r0, r4
 8008f58:	f002 fece 	bl	800bcf8 <__i2b>
 8008f5c:	4683      	mov	fp, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	f43f aefa 	beq.w	8008d58 <_strtod_l+0x488>
 8008f64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008f66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f68:	2e00      	cmp	r6, #0
 8008f6a:	bfab      	itete	ge
 8008f6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008f6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008f70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008f72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008f76:	bfac      	ite	ge
 8008f78:	eb06 0a03 	addge.w	sl, r6, r3
 8008f7c:	1b9f      	sublt	r7, r3, r6
 8008f7e:	9b04      	ldr	r3, [sp, #16]
 8008f80:	1af6      	subs	r6, r6, r3
 8008f82:	4416      	add	r6, r2
 8008f84:	4ba0      	ldr	r3, [pc, #640]	; (8009208 <_strtod_l+0x938>)
 8008f86:	3e01      	subs	r6, #1
 8008f88:	429e      	cmp	r6, r3
 8008f8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008f8e:	f280 80c4 	bge.w	800911a <_strtod_l+0x84a>
 8008f92:	1b9b      	subs	r3, r3, r6
 8008f94:	2b1f      	cmp	r3, #31
 8008f96:	eba2 0203 	sub.w	r2, r2, r3
 8008f9a:	f04f 0101 	mov.w	r1, #1
 8008f9e:	f300 80b0 	bgt.w	8009102 <_strtod_l+0x832>
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa8:	2300      	movs	r3, #0
 8008faa:	930d      	str	r3, [sp, #52]	; 0x34
 8008fac:	eb0a 0602 	add.w	r6, sl, r2
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	45b2      	cmp	sl, r6
 8008fb4:	4417      	add	r7, r2
 8008fb6:	441f      	add	r7, r3
 8008fb8:	4653      	mov	r3, sl
 8008fba:	bfa8      	it	ge
 8008fbc:	4633      	movge	r3, r6
 8008fbe:	42bb      	cmp	r3, r7
 8008fc0:	bfa8      	it	ge
 8008fc2:	463b      	movge	r3, r7
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfc2      	ittt	gt
 8008fc8:	1af6      	subgt	r6, r6, r3
 8008fca:	1aff      	subgt	r7, r7, r3
 8008fcc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd17      	ble.n	8009006 <_strtod_l+0x736>
 8008fd6:	4659      	mov	r1, fp
 8008fd8:	461a      	mov	r2, r3
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f002 ff4c 	bl	800be78 <__pow5mult>
 8008fe0:	4683      	mov	fp, r0
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f43f aeb8 	beq.w	8008d58 <_strtod_l+0x488>
 8008fe8:	4601      	mov	r1, r0
 8008fea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fec:	4620      	mov	r0, r4
 8008fee:	f002 fe99 	bl	800bd24 <__multiply>
 8008ff2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f aeaf 	beq.w	8008d58 <_strtod_l+0x488>
 8008ffa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f002 fd7b 	bl	800baf8 <_Bfree>
 8009002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009004:	9316      	str	r3, [sp, #88]	; 0x58
 8009006:	2e00      	cmp	r6, #0
 8009008:	f300 808c 	bgt.w	8009124 <_strtod_l+0x854>
 800900c:	9b08      	ldr	r3, [sp, #32]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dd08      	ble.n	8009024 <_strtod_l+0x754>
 8009012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009014:	9905      	ldr	r1, [sp, #20]
 8009016:	4620      	mov	r0, r4
 8009018:	f002 ff2e 	bl	800be78 <__pow5mult>
 800901c:	9005      	str	r0, [sp, #20]
 800901e:	2800      	cmp	r0, #0
 8009020:	f43f ae9a 	beq.w	8008d58 <_strtod_l+0x488>
 8009024:	2f00      	cmp	r7, #0
 8009026:	dd08      	ble.n	800903a <_strtod_l+0x76a>
 8009028:	9905      	ldr	r1, [sp, #20]
 800902a:	463a      	mov	r2, r7
 800902c:	4620      	mov	r0, r4
 800902e:	f002 ff7d 	bl	800bf2c <__lshift>
 8009032:	9005      	str	r0, [sp, #20]
 8009034:	2800      	cmp	r0, #0
 8009036:	f43f ae8f 	beq.w	8008d58 <_strtod_l+0x488>
 800903a:	f1ba 0f00 	cmp.w	sl, #0
 800903e:	dd08      	ble.n	8009052 <_strtod_l+0x782>
 8009040:	4659      	mov	r1, fp
 8009042:	4652      	mov	r2, sl
 8009044:	4620      	mov	r0, r4
 8009046:	f002 ff71 	bl	800bf2c <__lshift>
 800904a:	4683      	mov	fp, r0
 800904c:	2800      	cmp	r0, #0
 800904e:	f43f ae83 	beq.w	8008d58 <_strtod_l+0x488>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009056:	4620      	mov	r0, r4
 8009058:	f002 fff0 	bl	800c03c <__mdiff>
 800905c:	4605      	mov	r5, r0
 800905e:	2800      	cmp	r0, #0
 8009060:	f43f ae7a 	beq.w	8008d58 <_strtod_l+0x488>
 8009064:	68c3      	ldr	r3, [r0, #12]
 8009066:	930b      	str	r3, [sp, #44]	; 0x2c
 8009068:	2300      	movs	r3, #0
 800906a:	60c3      	str	r3, [r0, #12]
 800906c:	4659      	mov	r1, fp
 800906e:	f002 ffc9 	bl	800c004 <__mcmp>
 8009072:	2800      	cmp	r0, #0
 8009074:	da60      	bge.n	8009138 <_strtod_l+0x868>
 8009076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009078:	ea53 0308 	orrs.w	r3, r3, r8
 800907c:	f040 8084 	bne.w	8009188 <_strtod_l+0x8b8>
 8009080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009084:	2b00      	cmp	r3, #0
 8009086:	d17f      	bne.n	8009188 <_strtod_l+0x8b8>
 8009088:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800908c:	0d1b      	lsrs	r3, r3, #20
 800908e:	051b      	lsls	r3, r3, #20
 8009090:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009094:	d978      	bls.n	8009188 <_strtod_l+0x8b8>
 8009096:	696b      	ldr	r3, [r5, #20]
 8009098:	b913      	cbnz	r3, 80090a0 <_strtod_l+0x7d0>
 800909a:	692b      	ldr	r3, [r5, #16]
 800909c:	2b01      	cmp	r3, #1
 800909e:	dd73      	ble.n	8009188 <_strtod_l+0x8b8>
 80090a0:	4629      	mov	r1, r5
 80090a2:	2201      	movs	r2, #1
 80090a4:	4620      	mov	r0, r4
 80090a6:	f002 ff41 	bl	800bf2c <__lshift>
 80090aa:	4659      	mov	r1, fp
 80090ac:	4605      	mov	r5, r0
 80090ae:	f002 ffa9 	bl	800c004 <__mcmp>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	dd68      	ble.n	8009188 <_strtod_l+0x8b8>
 80090b6:	9904      	ldr	r1, [sp, #16]
 80090b8:	4a54      	ldr	r2, [pc, #336]	; (800920c <_strtod_l+0x93c>)
 80090ba:	464b      	mov	r3, r9
 80090bc:	2900      	cmp	r1, #0
 80090be:	f000 8084 	beq.w	80091ca <_strtod_l+0x8fa>
 80090c2:	ea02 0109 	and.w	r1, r2, r9
 80090c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80090ca:	dc7e      	bgt.n	80091ca <_strtod_l+0x8fa>
 80090cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80090d0:	f77f aeb3 	ble.w	8008e3a <_strtod_l+0x56a>
 80090d4:	4b4e      	ldr	r3, [pc, #312]	; (8009210 <_strtod_l+0x940>)
 80090d6:	4640      	mov	r0, r8
 80090d8:	4649      	mov	r1, r9
 80090da:	2200      	movs	r2, #0
 80090dc:	f7f7 fa8c 	bl	80005f8 <__aeabi_dmul>
 80090e0:	4b4a      	ldr	r3, [pc, #296]	; (800920c <_strtod_l+0x93c>)
 80090e2:	400b      	ands	r3, r1
 80090e4:	4680      	mov	r8, r0
 80090e6:	4689      	mov	r9, r1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f47f ae3f 	bne.w	8008d6c <_strtod_l+0x49c>
 80090ee:	2322      	movs	r3, #34	; 0x22
 80090f0:	6023      	str	r3, [r4, #0]
 80090f2:	e63b      	b.n	8008d6c <_strtod_l+0x49c>
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295
 80090f8:	fa02 f303 	lsl.w	r3, r2, r3
 80090fc:	ea03 0808 	and.w	r8, r3, r8
 8009100:	e6e8      	b.n	8008ed4 <_strtod_l+0x604>
 8009102:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009106:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800910a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800910e:	36e2      	adds	r6, #226	; 0xe2
 8009110:	fa01 f306 	lsl.w	r3, r1, r6
 8009114:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009118:	e748      	b.n	8008fac <_strtod_l+0x6dc>
 800911a:	2100      	movs	r1, #0
 800911c:	2301      	movs	r3, #1
 800911e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009122:	e743      	b.n	8008fac <_strtod_l+0x6dc>
 8009124:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009126:	4632      	mov	r2, r6
 8009128:	4620      	mov	r0, r4
 800912a:	f002 feff 	bl	800bf2c <__lshift>
 800912e:	9016      	str	r0, [sp, #88]	; 0x58
 8009130:	2800      	cmp	r0, #0
 8009132:	f47f af6b 	bne.w	800900c <_strtod_l+0x73c>
 8009136:	e60f      	b.n	8008d58 <_strtod_l+0x488>
 8009138:	46ca      	mov	sl, r9
 800913a:	d171      	bne.n	8009220 <_strtod_l+0x950>
 800913c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800913e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009142:	b352      	cbz	r2, 800919a <_strtod_l+0x8ca>
 8009144:	4a33      	ldr	r2, [pc, #204]	; (8009214 <_strtod_l+0x944>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d12a      	bne.n	80091a0 <_strtod_l+0x8d0>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	4641      	mov	r1, r8
 800914e:	b1fb      	cbz	r3, 8009190 <_strtod_l+0x8c0>
 8009150:	4b2e      	ldr	r3, [pc, #184]	; (800920c <_strtod_l+0x93c>)
 8009152:	ea09 0303 	and.w	r3, r9, r3
 8009156:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	d81a      	bhi.n	8009196 <_strtod_l+0x8c6>
 8009160:	0d1b      	lsrs	r3, r3, #20
 8009162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	4299      	cmp	r1, r3
 800916c:	d118      	bne.n	80091a0 <_strtod_l+0x8d0>
 800916e:	4b2a      	ldr	r3, [pc, #168]	; (8009218 <_strtod_l+0x948>)
 8009170:	459a      	cmp	sl, r3
 8009172:	d102      	bne.n	800917a <_strtod_l+0x8aa>
 8009174:	3101      	adds	r1, #1
 8009176:	f43f adef 	beq.w	8008d58 <_strtod_l+0x488>
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <_strtod_l+0x93c>)
 800917c:	ea0a 0303 	and.w	r3, sl, r3
 8009180:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009184:	f04f 0800 	mov.w	r8, #0
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1a2      	bne.n	80090d4 <_strtod_l+0x804>
 800918e:	e5ed      	b.n	8008d6c <_strtod_l+0x49c>
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	e7e9      	b.n	800916a <_strtod_l+0x89a>
 8009196:	4613      	mov	r3, r2
 8009198:	e7e7      	b.n	800916a <_strtod_l+0x89a>
 800919a:	ea53 0308 	orrs.w	r3, r3, r8
 800919e:	d08a      	beq.n	80090b6 <_strtod_l+0x7e6>
 80091a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a2:	b1e3      	cbz	r3, 80091de <_strtod_l+0x90e>
 80091a4:	ea13 0f0a 	tst.w	r3, sl
 80091a8:	d0ee      	beq.n	8009188 <_strtod_l+0x8b8>
 80091aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091ac:	9a04      	ldr	r2, [sp, #16]
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	b1c3      	cbz	r3, 80091e6 <_strtod_l+0x916>
 80091b4:	f7ff fb6d 	bl	8008892 <sulp>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	ec51 0b18 	vmov	r0, r1, d8
 80091c0:	f7f7 f864 	bl	800028c <__adddf3>
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e7de      	b.n	8009188 <_strtod_l+0x8b8>
 80091ca:	4013      	ands	r3, r2
 80091cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80091d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80091d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80091d8:	f04f 38ff 	mov.w	r8, #4294967295
 80091dc:	e7d4      	b.n	8009188 <_strtod_l+0x8b8>
 80091de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e0:	ea13 0f08 	tst.w	r3, r8
 80091e4:	e7e0      	b.n	80091a8 <_strtod_l+0x8d8>
 80091e6:	f7ff fb54 	bl	8008892 <sulp>
 80091ea:	4602      	mov	r2, r0
 80091ec:	460b      	mov	r3, r1
 80091ee:	ec51 0b18 	vmov	r0, r1, d8
 80091f2:	f7f7 f849 	bl	8000288 <__aeabi_dsub>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4680      	mov	r8, r0
 80091fc:	4689      	mov	r9, r1
 80091fe:	f7f7 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d0c0      	beq.n	8009188 <_strtod_l+0x8b8>
 8009206:	e618      	b.n	8008e3a <_strtod_l+0x56a>
 8009208:	fffffc02 	.word	0xfffffc02
 800920c:	7ff00000 	.word	0x7ff00000
 8009210:	39500000 	.word	0x39500000
 8009214:	000fffff 	.word	0x000fffff
 8009218:	7fefffff 	.word	0x7fefffff
 800921c:	0800d8e8 	.word	0x0800d8e8
 8009220:	4659      	mov	r1, fp
 8009222:	4628      	mov	r0, r5
 8009224:	f003 f85e 	bl	800c2e4 <__ratio>
 8009228:	ec57 6b10 	vmov	r6, r7, d0
 800922c:	ee10 0a10 	vmov	r0, s0
 8009230:	2200      	movs	r2, #0
 8009232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009236:	4639      	mov	r1, r7
 8009238:	f7f7 fc5a 	bl	8000af0 <__aeabi_dcmple>
 800923c:	2800      	cmp	r0, #0
 800923e:	d071      	beq.n	8009324 <_strtod_l+0xa54>
 8009240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d17c      	bne.n	8009340 <_strtod_l+0xa70>
 8009246:	f1b8 0f00 	cmp.w	r8, #0
 800924a:	d15a      	bne.n	8009302 <_strtod_l+0xa32>
 800924c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009250:	2b00      	cmp	r3, #0
 8009252:	d15d      	bne.n	8009310 <_strtod_l+0xa40>
 8009254:	4b90      	ldr	r3, [pc, #576]	; (8009498 <_strtod_l+0xbc8>)
 8009256:	2200      	movs	r2, #0
 8009258:	4630      	mov	r0, r6
 800925a:	4639      	mov	r1, r7
 800925c:	f7f7 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8009260:	2800      	cmp	r0, #0
 8009262:	d15c      	bne.n	800931e <_strtod_l+0xa4e>
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	4b8c      	ldr	r3, [pc, #560]	; (800949c <_strtod_l+0xbcc>)
 800926a:	2200      	movs	r2, #0
 800926c:	f7f7 f9c4 	bl	80005f8 <__aeabi_dmul>
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009278:	9606      	str	r6, [sp, #24]
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009280:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009284:	4b86      	ldr	r3, [pc, #536]	; (80094a0 <_strtod_l+0xbd0>)
 8009286:	ea0a 0303 	and.w	r3, sl, r3
 800928a:	930d      	str	r3, [sp, #52]	; 0x34
 800928c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800928e:	4b85      	ldr	r3, [pc, #532]	; (80094a4 <_strtod_l+0xbd4>)
 8009290:	429a      	cmp	r2, r3
 8009292:	f040 8090 	bne.w	80093b6 <_strtod_l+0xae6>
 8009296:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800929a:	ec49 8b10 	vmov	d0, r8, r9
 800929e:	f002 ff57 	bl	800c150 <__ulp>
 80092a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092a6:	ec51 0b10 	vmov	r0, r1, d0
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	f7f6 ffeb 	bl	800028c <__adddf3>
 80092b6:	460b      	mov	r3, r1
 80092b8:	4979      	ldr	r1, [pc, #484]	; (80094a0 <_strtod_l+0xbd0>)
 80092ba:	4a7b      	ldr	r2, [pc, #492]	; (80094a8 <_strtod_l+0xbd8>)
 80092bc:	4019      	ands	r1, r3
 80092be:	4291      	cmp	r1, r2
 80092c0:	4680      	mov	r8, r0
 80092c2:	d944      	bls.n	800934e <_strtod_l+0xa7e>
 80092c4:	ee18 2a90 	vmov	r2, s17
 80092c8:	4b78      	ldr	r3, [pc, #480]	; (80094ac <_strtod_l+0xbdc>)
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d104      	bne.n	80092d8 <_strtod_l+0xa08>
 80092ce:	ee18 3a10 	vmov	r3, s16
 80092d2:	3301      	adds	r3, #1
 80092d4:	f43f ad40 	beq.w	8008d58 <_strtod_l+0x488>
 80092d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80094ac <_strtod_l+0xbdc>
 80092dc:	f04f 38ff 	mov.w	r8, #4294967295
 80092e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80092e2:	4620      	mov	r0, r4
 80092e4:	f002 fc08 	bl	800baf8 <_Bfree>
 80092e8:	9905      	ldr	r1, [sp, #20]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f002 fc04 	bl	800baf8 <_Bfree>
 80092f0:	4659      	mov	r1, fp
 80092f2:	4620      	mov	r0, r4
 80092f4:	f002 fc00 	bl	800baf8 <_Bfree>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	f002 fbfc 	bl	800baf8 <_Bfree>
 8009300:	e609      	b.n	8008f16 <_strtod_l+0x646>
 8009302:	f1b8 0f01 	cmp.w	r8, #1
 8009306:	d103      	bne.n	8009310 <_strtod_l+0xa40>
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	f43f ad95 	beq.w	8008e3a <_strtod_l+0x56a>
 8009310:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009468 <_strtod_l+0xb98>
 8009314:	4f60      	ldr	r7, [pc, #384]	; (8009498 <_strtod_l+0xbc8>)
 8009316:	ed8d 7b06 	vstr	d7, [sp, #24]
 800931a:	2600      	movs	r6, #0
 800931c:	e7ae      	b.n	800927c <_strtod_l+0x9ac>
 800931e:	4f5f      	ldr	r7, [pc, #380]	; (800949c <_strtod_l+0xbcc>)
 8009320:	2600      	movs	r6, #0
 8009322:	e7a7      	b.n	8009274 <_strtod_l+0x9a4>
 8009324:	4b5d      	ldr	r3, [pc, #372]	; (800949c <_strtod_l+0xbcc>)
 8009326:	4630      	mov	r0, r6
 8009328:	4639      	mov	r1, r7
 800932a:	2200      	movs	r2, #0
 800932c:	f7f7 f964 	bl	80005f8 <__aeabi_dmul>
 8009330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009332:	4606      	mov	r6, r0
 8009334:	460f      	mov	r7, r1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d09c      	beq.n	8009274 <_strtod_l+0x9a4>
 800933a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800933e:	e79d      	b.n	800927c <_strtod_l+0x9ac>
 8009340:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009470 <_strtod_l+0xba0>
 8009344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009348:	ec57 6b17 	vmov	r6, r7, d7
 800934c:	e796      	b.n	800927c <_strtod_l+0x9ac>
 800934e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	46ca      	mov	sl, r9
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1c2      	bne.n	80092e0 <_strtod_l+0xa10>
 800935a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800935e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	051b      	lsls	r3, r3, #20
 8009364:	429a      	cmp	r2, r3
 8009366:	d1bb      	bne.n	80092e0 <_strtod_l+0xa10>
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 fca4 	bl	8000cb8 <__aeabi_d2lz>
 8009370:	f7f7 f914 	bl	800059c <__aeabi_l2d>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f6 ff84 	bl	8000288 <__aeabi_dsub>
 8009380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009382:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009386:	ea43 0308 	orr.w	r3, r3, r8
 800938a:	4313      	orrs	r3, r2
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	d054      	beq.n	800943c <_strtod_l+0xb6c>
 8009392:	a339      	add	r3, pc, #228	; (adr r3, 8009478 <_strtod_l+0xba8>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f7 fba0 	bl	8000adc <__aeabi_dcmplt>
 800939c:	2800      	cmp	r0, #0
 800939e:	f47f ace5 	bne.w	8008d6c <_strtod_l+0x49c>
 80093a2:	a337      	add	r3, pc, #220	; (adr r3, 8009480 <_strtod_l+0xbb0>)
 80093a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fbb4 	bl	8000b18 <__aeabi_dcmpgt>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d095      	beq.n	80092e0 <_strtod_l+0xa10>
 80093b4:	e4da      	b.n	8008d6c <_strtod_l+0x49c>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	b333      	cbz	r3, 8009408 <_strtod_l+0xb38>
 80093ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093c0:	d822      	bhi.n	8009408 <_strtod_l+0xb38>
 80093c2:	a331      	add	r3, pc, #196	; (adr r3, 8009488 <_strtod_l+0xbb8>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f7 fb90 	bl	8000af0 <__aeabi_dcmple>
 80093d0:	b1a0      	cbz	r0, 80093fc <_strtod_l+0xb2c>
 80093d2:	4639      	mov	r1, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7f7 fbe7 	bl	8000ba8 <__aeabi_d2uiz>
 80093da:	2801      	cmp	r0, #1
 80093dc:	bf38      	it	cc
 80093de:	2001      	movcc	r0, #1
 80093e0:	f7f7 f890 	bl	8000504 <__aeabi_ui2d>
 80093e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	bb23      	cbnz	r3, 8009436 <_strtod_l+0xb66>
 80093ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093f0:	9010      	str	r0, [sp, #64]	; 0x40
 80093f2:	9311      	str	r3, [sp, #68]	; 0x44
 80093f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009400:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	930f      	str	r3, [sp, #60]	; 0x3c
 8009408:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800940c:	eeb0 0a48 	vmov.f32	s0, s16
 8009410:	eef0 0a68 	vmov.f32	s1, s17
 8009414:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009418:	f002 fe9a 	bl	800c150 <__ulp>
 800941c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009420:	ec53 2b10 	vmov	r2, r3, d0
 8009424:	f7f7 f8e8 	bl	80005f8 <__aeabi_dmul>
 8009428:	ec53 2b18 	vmov	r2, r3, d8
 800942c:	f7f6 ff2e 	bl	800028c <__adddf3>
 8009430:	4680      	mov	r8, r0
 8009432:	4689      	mov	r9, r1
 8009434:	e78d      	b.n	8009352 <_strtod_l+0xa82>
 8009436:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800943a:	e7db      	b.n	80093f4 <_strtod_l+0xb24>
 800943c:	a314      	add	r3, pc, #80	; (adr r3, 8009490 <_strtod_l+0xbc0>)
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	f7f7 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8009446:	e7b3      	b.n	80093b0 <_strtod_l+0xae0>
 8009448:	2300      	movs	r3, #0
 800944a:	930a      	str	r3, [sp, #40]	; 0x28
 800944c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800944e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	f7ff ba7c 	b.w	800894e <_strtod_l+0x7e>
 8009456:	2a65      	cmp	r2, #101	; 0x65
 8009458:	f43f ab75 	beq.w	8008b46 <_strtod_l+0x276>
 800945c:	2a45      	cmp	r2, #69	; 0x45
 800945e:	f43f ab72 	beq.w	8008b46 <_strtod_l+0x276>
 8009462:	2301      	movs	r3, #1
 8009464:	f7ff bbaa 	b.w	8008bbc <_strtod_l+0x2ec>
 8009468:	00000000 	.word	0x00000000
 800946c:	bff00000 	.word	0xbff00000
 8009470:	00000000 	.word	0x00000000
 8009474:	3ff00000 	.word	0x3ff00000
 8009478:	94a03595 	.word	0x94a03595
 800947c:	3fdfffff 	.word	0x3fdfffff
 8009480:	35afe535 	.word	0x35afe535
 8009484:	3fe00000 	.word	0x3fe00000
 8009488:	ffc00000 	.word	0xffc00000
 800948c:	41dfffff 	.word	0x41dfffff
 8009490:	94a03595 	.word	0x94a03595
 8009494:	3fcfffff 	.word	0x3fcfffff
 8009498:	3ff00000 	.word	0x3ff00000
 800949c:	3fe00000 	.word	0x3fe00000
 80094a0:	7ff00000 	.word	0x7ff00000
 80094a4:	7fe00000 	.word	0x7fe00000
 80094a8:	7c9fffff 	.word	0x7c9fffff
 80094ac:	7fefffff 	.word	0x7fefffff

080094b0 <_strtod_r>:
 80094b0:	4b01      	ldr	r3, [pc, #4]	; (80094b8 <_strtod_r+0x8>)
 80094b2:	f7ff ba0d 	b.w	80088d0 <_strtod_l>
 80094b6:	bf00      	nop
 80094b8:	20000020 	.word	0x20000020

080094bc <__cvt>:
 80094bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c0:	ec55 4b10 	vmov	r4, r5, d0
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	460e      	mov	r6, r1
 80094c8:	4619      	mov	r1, r3
 80094ca:	462b      	mov	r3, r5
 80094cc:	bfbb      	ittet	lt
 80094ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094d2:	461d      	movlt	r5, r3
 80094d4:	2300      	movge	r3, #0
 80094d6:	232d      	movlt	r3, #45	; 0x2d
 80094d8:	700b      	strb	r3, [r1, #0]
 80094da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094e0:	4691      	mov	r9, r2
 80094e2:	f023 0820 	bic.w	r8, r3, #32
 80094e6:	bfbc      	itt	lt
 80094e8:	4622      	movlt	r2, r4
 80094ea:	4614      	movlt	r4, r2
 80094ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094f0:	d005      	beq.n	80094fe <__cvt+0x42>
 80094f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094f6:	d100      	bne.n	80094fa <__cvt+0x3e>
 80094f8:	3601      	adds	r6, #1
 80094fa:	2102      	movs	r1, #2
 80094fc:	e000      	b.n	8009500 <__cvt+0x44>
 80094fe:	2103      	movs	r1, #3
 8009500:	ab03      	add	r3, sp, #12
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	ab02      	add	r3, sp, #8
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	ec45 4b10 	vmov	d0, r4, r5
 800950c:	4653      	mov	r3, sl
 800950e:	4632      	mov	r2, r6
 8009510:	f001 f90a 	bl	800a728 <_dtoa_r>
 8009514:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009518:	4607      	mov	r7, r0
 800951a:	d102      	bne.n	8009522 <__cvt+0x66>
 800951c:	f019 0f01 	tst.w	r9, #1
 8009520:	d022      	beq.n	8009568 <__cvt+0xac>
 8009522:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009526:	eb07 0906 	add.w	r9, r7, r6
 800952a:	d110      	bne.n	800954e <__cvt+0x92>
 800952c:	783b      	ldrb	r3, [r7, #0]
 800952e:	2b30      	cmp	r3, #48	; 0x30
 8009530:	d10a      	bne.n	8009548 <__cvt+0x8c>
 8009532:	2200      	movs	r2, #0
 8009534:	2300      	movs	r3, #0
 8009536:	4620      	mov	r0, r4
 8009538:	4629      	mov	r1, r5
 800953a:	f7f7 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800953e:	b918      	cbnz	r0, 8009548 <__cvt+0x8c>
 8009540:	f1c6 0601 	rsb	r6, r6, #1
 8009544:	f8ca 6000 	str.w	r6, [sl]
 8009548:	f8da 3000 	ldr.w	r3, [sl]
 800954c:	4499      	add	r9, r3
 800954e:	2200      	movs	r2, #0
 8009550:	2300      	movs	r3, #0
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f7 fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800955a:	b108      	cbz	r0, 8009560 <__cvt+0xa4>
 800955c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009560:	2230      	movs	r2, #48	; 0x30
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	454b      	cmp	r3, r9
 8009566:	d307      	bcc.n	8009578 <__cvt+0xbc>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800956c:	1bdb      	subs	r3, r3, r7
 800956e:	4638      	mov	r0, r7
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	b004      	add	sp, #16
 8009574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009578:	1c59      	adds	r1, r3, #1
 800957a:	9103      	str	r1, [sp, #12]
 800957c:	701a      	strb	r2, [r3, #0]
 800957e:	e7f0      	b.n	8009562 <__cvt+0xa6>

08009580 <__exponent>:
 8009580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009582:	4603      	mov	r3, r0
 8009584:	2900      	cmp	r1, #0
 8009586:	bfb8      	it	lt
 8009588:	4249      	neglt	r1, r1
 800958a:	f803 2b02 	strb.w	r2, [r3], #2
 800958e:	bfb4      	ite	lt
 8009590:	222d      	movlt	r2, #45	; 0x2d
 8009592:	222b      	movge	r2, #43	; 0x2b
 8009594:	2909      	cmp	r1, #9
 8009596:	7042      	strb	r2, [r0, #1]
 8009598:	dd2a      	ble.n	80095f0 <__exponent+0x70>
 800959a:	f10d 0207 	add.w	r2, sp, #7
 800959e:	4617      	mov	r7, r2
 80095a0:	260a      	movs	r6, #10
 80095a2:	4694      	mov	ip, r2
 80095a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80095a8:	fb06 1415 	mls	r4, r6, r5, r1
 80095ac:	3430      	adds	r4, #48	; 0x30
 80095ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095b2:	460c      	mov	r4, r1
 80095b4:	2c63      	cmp	r4, #99	; 0x63
 80095b6:	f102 32ff 	add.w	r2, r2, #4294967295
 80095ba:	4629      	mov	r1, r5
 80095bc:	dcf1      	bgt.n	80095a2 <__exponent+0x22>
 80095be:	3130      	adds	r1, #48	; 0x30
 80095c0:	f1ac 0402 	sub.w	r4, ip, #2
 80095c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095c8:	1c41      	adds	r1, r0, #1
 80095ca:	4622      	mov	r2, r4
 80095cc:	42ba      	cmp	r2, r7
 80095ce:	d30a      	bcc.n	80095e6 <__exponent+0x66>
 80095d0:	f10d 0209 	add.w	r2, sp, #9
 80095d4:	eba2 020c 	sub.w	r2, r2, ip
 80095d8:	42bc      	cmp	r4, r7
 80095da:	bf88      	it	hi
 80095dc:	2200      	movhi	r2, #0
 80095de:	4413      	add	r3, r2
 80095e0:	1a18      	subs	r0, r3, r0
 80095e2:	b003      	add	sp, #12
 80095e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 80095ee:	e7ed      	b.n	80095cc <__exponent+0x4c>
 80095f0:	2330      	movs	r3, #48	; 0x30
 80095f2:	3130      	adds	r1, #48	; 0x30
 80095f4:	7083      	strb	r3, [r0, #2]
 80095f6:	70c1      	strb	r1, [r0, #3]
 80095f8:	1d03      	adds	r3, r0, #4
 80095fa:	e7f1      	b.n	80095e0 <__exponent+0x60>

080095fc <_printf_float>:
 80095fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	ed2d 8b02 	vpush	{d8}
 8009604:	b08d      	sub	sp, #52	; 0x34
 8009606:	460c      	mov	r4, r1
 8009608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800960c:	4616      	mov	r6, r2
 800960e:	461f      	mov	r7, r3
 8009610:	4605      	mov	r5, r0
 8009612:	f000 ff59 	bl	800a4c8 <_localeconv_r>
 8009616:	f8d0 a000 	ldr.w	sl, [r0]
 800961a:	4650      	mov	r0, sl
 800961c:	f7f6 fe28 	bl	8000270 <strlen>
 8009620:	2300      	movs	r3, #0
 8009622:	930a      	str	r3, [sp, #40]	; 0x28
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	9305      	str	r3, [sp, #20]
 8009628:	f8d8 3000 	ldr.w	r3, [r8]
 800962c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009630:	3307      	adds	r3, #7
 8009632:	f023 0307 	bic.w	r3, r3, #7
 8009636:	f103 0208 	add.w	r2, r3, #8
 800963a:	f8c8 2000 	str.w	r2, [r8]
 800963e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009642:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	f8cd 8018 	str.w	r8, [sp, #24]
 800964c:	ee08 0a10 	vmov	s16, r0
 8009650:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009658:	4b9e      	ldr	r3, [pc, #632]	; (80098d4 <_printf_float+0x2d8>)
 800965a:	f04f 32ff 	mov.w	r2, #4294967295
 800965e:	f7f7 fa65 	bl	8000b2c <__aeabi_dcmpun>
 8009662:	bb88      	cbnz	r0, 80096c8 <_printf_float+0xcc>
 8009664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009668:	4b9a      	ldr	r3, [pc, #616]	; (80098d4 <_printf_float+0x2d8>)
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	f7f7 fa3f 	bl	8000af0 <__aeabi_dcmple>
 8009672:	bb48      	cbnz	r0, 80096c8 <_printf_float+0xcc>
 8009674:	2200      	movs	r2, #0
 8009676:	2300      	movs	r3, #0
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f7 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8009680:	b110      	cbz	r0, 8009688 <_printf_float+0x8c>
 8009682:	232d      	movs	r3, #45	; 0x2d
 8009684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009688:	4a93      	ldr	r2, [pc, #588]	; (80098d8 <_printf_float+0x2dc>)
 800968a:	4b94      	ldr	r3, [pc, #592]	; (80098dc <_printf_float+0x2e0>)
 800968c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009690:	bf94      	ite	ls
 8009692:	4690      	movls	r8, r2
 8009694:	4698      	movhi	r8, r3
 8009696:	2303      	movs	r3, #3
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	9b05      	ldr	r3, [sp, #20]
 800969c:	f023 0304 	bic.w	r3, r3, #4
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	9700      	str	r7, [sp, #0]
 80096a8:	4633      	mov	r3, r6
 80096aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80096ac:	4621      	mov	r1, r4
 80096ae:	4628      	mov	r0, r5
 80096b0:	f000 f9da 	bl	8009a68 <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	f040 8090 	bne.w	80097da <_printf_float+0x1de>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295
 80096be:	b00d      	add	sp, #52	; 0x34
 80096c0:	ecbd 8b02 	vpop	{d8}
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	4642      	mov	r2, r8
 80096ca:	464b      	mov	r3, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	4649      	mov	r1, r9
 80096d0:	f7f7 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 80096d4:	b140      	cbz	r0, 80096e8 <_printf_float+0xec>
 80096d6:	464b      	mov	r3, r9
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfbc      	itt	lt
 80096dc:	232d      	movlt	r3, #45	; 0x2d
 80096de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096e2:	4a7f      	ldr	r2, [pc, #508]	; (80098e0 <_printf_float+0x2e4>)
 80096e4:	4b7f      	ldr	r3, [pc, #508]	; (80098e4 <_printf_float+0x2e8>)
 80096e6:	e7d1      	b.n	800968c <_printf_float+0x90>
 80096e8:	6863      	ldr	r3, [r4, #4]
 80096ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096ee:	9206      	str	r2, [sp, #24]
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	d13f      	bne.n	8009774 <_printf_float+0x178>
 80096f4:	2306      	movs	r3, #6
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	9b05      	ldr	r3, [sp, #20]
 80096fa:	6861      	ldr	r1, [r4, #4]
 80096fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009700:	2300      	movs	r3, #0
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	ab0a      	add	r3, sp, #40	; 0x28
 8009706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800970a:	ab09      	add	r3, sp, #36	; 0x24
 800970c:	ec49 8b10 	vmov	d0, r8, r9
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009718:	4628      	mov	r0, r5
 800971a:	f7ff fecf 	bl	80094bc <__cvt>
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009722:	2b47      	cmp	r3, #71	; 0x47
 8009724:	4680      	mov	r8, r0
 8009726:	d108      	bne.n	800973a <_printf_float+0x13e>
 8009728:	1cc8      	adds	r0, r1, #3
 800972a:	db02      	blt.n	8009732 <_printf_float+0x136>
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	4299      	cmp	r1, r3
 8009730:	dd41      	ble.n	80097b6 <_printf_float+0x1ba>
 8009732:	f1ab 0302 	sub.w	r3, fp, #2
 8009736:	fa5f fb83 	uxtb.w	fp, r3
 800973a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800973e:	d820      	bhi.n	8009782 <_printf_float+0x186>
 8009740:	3901      	subs	r1, #1
 8009742:	465a      	mov	r2, fp
 8009744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009748:	9109      	str	r1, [sp, #36]	; 0x24
 800974a:	f7ff ff19 	bl	8009580 <__exponent>
 800974e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009750:	1813      	adds	r3, r2, r0
 8009752:	2a01      	cmp	r2, #1
 8009754:	4681      	mov	r9, r0
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	dc02      	bgt.n	8009760 <_printf_float+0x164>
 800975a:	6822      	ldr	r2, [r4, #0]
 800975c:	07d2      	lsls	r2, r2, #31
 800975e:	d501      	bpl.n	8009764 <_printf_float+0x168>
 8009760:	3301      	adds	r3, #1
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009768:	2b00      	cmp	r3, #0
 800976a:	d09c      	beq.n	80096a6 <_printf_float+0xaa>
 800976c:	232d      	movs	r3, #45	; 0x2d
 800976e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009772:	e798      	b.n	80096a6 <_printf_float+0xaa>
 8009774:	9a06      	ldr	r2, [sp, #24]
 8009776:	2a47      	cmp	r2, #71	; 0x47
 8009778:	d1be      	bne.n	80096f8 <_printf_float+0xfc>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1bc      	bne.n	80096f8 <_printf_float+0xfc>
 800977e:	2301      	movs	r3, #1
 8009780:	e7b9      	b.n	80096f6 <_printf_float+0xfa>
 8009782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009786:	d118      	bne.n	80097ba <_printf_float+0x1be>
 8009788:	2900      	cmp	r1, #0
 800978a:	6863      	ldr	r3, [r4, #4]
 800978c:	dd0b      	ble.n	80097a6 <_printf_float+0x1aa>
 800978e:	6121      	str	r1, [r4, #16]
 8009790:	b913      	cbnz	r3, 8009798 <_printf_float+0x19c>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d502      	bpl.n	800979e <_printf_float+0x1a2>
 8009798:	3301      	adds	r3, #1
 800979a:	440b      	add	r3, r1
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	65a1      	str	r1, [r4, #88]	; 0x58
 80097a0:	f04f 0900 	mov.w	r9, #0
 80097a4:	e7de      	b.n	8009764 <_printf_float+0x168>
 80097a6:	b913      	cbnz	r3, 80097ae <_printf_float+0x1b2>
 80097a8:	6822      	ldr	r2, [r4, #0]
 80097aa:	07d2      	lsls	r2, r2, #31
 80097ac:	d501      	bpl.n	80097b2 <_printf_float+0x1b6>
 80097ae:	3302      	adds	r3, #2
 80097b0:	e7f4      	b.n	800979c <_printf_float+0x1a0>
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f2      	b.n	800979c <_printf_float+0x1a0>
 80097b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097bc:	4299      	cmp	r1, r3
 80097be:	db05      	blt.n	80097cc <_printf_float+0x1d0>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	6121      	str	r1, [r4, #16]
 80097c4:	07d8      	lsls	r0, r3, #31
 80097c6:	d5ea      	bpl.n	800979e <_printf_float+0x1a2>
 80097c8:	1c4b      	adds	r3, r1, #1
 80097ca:	e7e7      	b.n	800979c <_printf_float+0x1a0>
 80097cc:	2900      	cmp	r1, #0
 80097ce:	bfd4      	ite	le
 80097d0:	f1c1 0202 	rsble	r2, r1, #2
 80097d4:	2201      	movgt	r2, #1
 80097d6:	4413      	add	r3, r2
 80097d8:	e7e0      	b.n	800979c <_printf_float+0x1a0>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	055a      	lsls	r2, r3, #21
 80097de:	d407      	bmi.n	80097f0 <_printf_float+0x1f4>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	4642      	mov	r2, r8
 80097e4:	4631      	mov	r1, r6
 80097e6:	4628      	mov	r0, r5
 80097e8:	47b8      	blx	r7
 80097ea:	3001      	adds	r0, #1
 80097ec:	d12c      	bne.n	8009848 <_printf_float+0x24c>
 80097ee:	e764      	b.n	80096ba <_printf_float+0xbe>
 80097f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097f4:	f240 80e0 	bls.w	80099b8 <_printf_float+0x3bc>
 80097f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097fc:	2200      	movs	r2, #0
 80097fe:	2300      	movs	r3, #0
 8009800:	f7f7 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8009804:	2800      	cmp	r0, #0
 8009806:	d034      	beq.n	8009872 <_printf_float+0x276>
 8009808:	4a37      	ldr	r2, [pc, #220]	; (80098e8 <_printf_float+0x2ec>)
 800980a:	2301      	movs	r3, #1
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af51 	beq.w	80096ba <_printf_float+0xbe>
 8009818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800981c:	429a      	cmp	r2, r3
 800981e:	db02      	blt.n	8009826 <_printf_float+0x22a>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	07d8      	lsls	r0, r3, #31
 8009824:	d510      	bpl.n	8009848 <_printf_float+0x24c>
 8009826:	ee18 3a10 	vmov	r3, s16
 800982a:	4652      	mov	r2, sl
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f af41 	beq.w	80096ba <_printf_float+0xbe>
 8009838:	f04f 0800 	mov.w	r8, #0
 800983c:	f104 091a 	add.w	r9, r4, #26
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	3b01      	subs	r3, #1
 8009844:	4543      	cmp	r3, r8
 8009846:	dc09      	bgt.n	800985c <_printf_float+0x260>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	079b      	lsls	r3, r3, #30
 800984c:	f100 8107 	bmi.w	8009a5e <_printf_float+0x462>
 8009850:	68e0      	ldr	r0, [r4, #12]
 8009852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009854:	4298      	cmp	r0, r3
 8009856:	bfb8      	it	lt
 8009858:	4618      	movlt	r0, r3
 800985a:	e730      	b.n	80096be <_printf_float+0xc2>
 800985c:	2301      	movs	r3, #1
 800985e:	464a      	mov	r2, r9
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f af27 	beq.w	80096ba <_printf_float+0xbe>
 800986c:	f108 0801 	add.w	r8, r8, #1
 8009870:	e7e6      	b.n	8009840 <_printf_float+0x244>
 8009872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009874:	2b00      	cmp	r3, #0
 8009876:	dc39      	bgt.n	80098ec <_printf_float+0x2f0>
 8009878:	4a1b      	ldr	r2, [pc, #108]	; (80098e8 <_printf_float+0x2ec>)
 800987a:	2301      	movs	r3, #1
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	47b8      	blx	r7
 8009882:	3001      	adds	r0, #1
 8009884:	f43f af19 	beq.w	80096ba <_printf_float+0xbe>
 8009888:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800988c:	4313      	orrs	r3, r2
 800988e:	d102      	bne.n	8009896 <_printf_float+0x29a>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07d9      	lsls	r1, r3, #31
 8009894:	d5d8      	bpl.n	8009848 <_printf_float+0x24c>
 8009896:	ee18 3a10 	vmov	r3, s16
 800989a:	4652      	mov	r2, sl
 800989c:	4631      	mov	r1, r6
 800989e:	4628      	mov	r0, r5
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f af09 	beq.w	80096ba <_printf_float+0xbe>
 80098a8:	f04f 0900 	mov.w	r9, #0
 80098ac:	f104 0a1a 	add.w	sl, r4, #26
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	425b      	negs	r3, r3
 80098b4:	454b      	cmp	r3, r9
 80098b6:	dc01      	bgt.n	80098bc <_printf_float+0x2c0>
 80098b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ba:	e792      	b.n	80097e2 <_printf_float+0x1e6>
 80098bc:	2301      	movs	r3, #1
 80098be:	4652      	mov	r2, sl
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f aef7 	beq.w	80096ba <_printf_float+0xbe>
 80098cc:	f109 0901 	add.w	r9, r9, #1
 80098d0:	e7ee      	b.n	80098b0 <_printf_float+0x2b4>
 80098d2:	bf00      	nop
 80098d4:	7fefffff 	.word	0x7fefffff
 80098d8:	0800da11 	.word	0x0800da11
 80098dc:	0800da15 	.word	0x0800da15
 80098e0:	0800da19 	.word	0x0800da19
 80098e4:	0800da1d 	.word	0x0800da1d
 80098e8:	0800dcbb 	.word	0x0800dcbb
 80098ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098f0:	429a      	cmp	r2, r3
 80098f2:	bfa8      	it	ge
 80098f4:	461a      	movge	r2, r3
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	4691      	mov	r9, r2
 80098fa:	dc37      	bgt.n	800996c <_printf_float+0x370>
 80098fc:	f04f 0b00 	mov.w	fp, #0
 8009900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009904:	f104 021a 	add.w	r2, r4, #26
 8009908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	eba3 0309 	sub.w	r3, r3, r9
 8009910:	455b      	cmp	r3, fp
 8009912:	dc33      	bgt.n	800997c <_printf_float+0x380>
 8009914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009918:	429a      	cmp	r2, r3
 800991a:	db3b      	blt.n	8009994 <_printf_float+0x398>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	07da      	lsls	r2, r3, #31
 8009920:	d438      	bmi.n	8009994 <_printf_float+0x398>
 8009922:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009926:	eba2 0903 	sub.w	r9, r2, r3
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	1ad2      	subs	r2, r2, r3
 800992e:	4591      	cmp	r9, r2
 8009930:	bfa8      	it	ge
 8009932:	4691      	movge	r9, r2
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	dc35      	bgt.n	80099a6 <_printf_float+0x3aa>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009942:	f104 0a1a 	add.w	sl, r4, #26
 8009946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	eba3 0309 	sub.w	r3, r3, r9
 8009950:	4543      	cmp	r3, r8
 8009952:	f77f af79 	ble.w	8009848 <_printf_float+0x24c>
 8009956:	2301      	movs	r3, #1
 8009958:	4652      	mov	r2, sl
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f aeaa 	beq.w	80096ba <_printf_float+0xbe>
 8009966:	f108 0801 	add.w	r8, r8, #1
 800996a:	e7ec      	b.n	8009946 <_printf_float+0x34a>
 800996c:	4613      	mov	r3, r2
 800996e:	4631      	mov	r1, r6
 8009970:	4642      	mov	r2, r8
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	d1c0      	bne.n	80098fc <_printf_float+0x300>
 800997a:	e69e      	b.n	80096ba <_printf_float+0xbe>
 800997c:	2301      	movs	r3, #1
 800997e:	4631      	mov	r1, r6
 8009980:	4628      	mov	r0, r5
 8009982:	9205      	str	r2, [sp, #20]
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	f43f ae97 	beq.w	80096ba <_printf_float+0xbe>
 800998c:	9a05      	ldr	r2, [sp, #20]
 800998e:	f10b 0b01 	add.w	fp, fp, #1
 8009992:	e7b9      	b.n	8009908 <_printf_float+0x30c>
 8009994:	ee18 3a10 	vmov	r3, s16
 8009998:	4652      	mov	r2, sl
 800999a:	4631      	mov	r1, r6
 800999c:	4628      	mov	r0, r5
 800999e:	47b8      	blx	r7
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1be      	bne.n	8009922 <_printf_float+0x326>
 80099a4:	e689      	b.n	80096ba <_printf_float+0xbe>
 80099a6:	9a05      	ldr	r2, [sp, #20]
 80099a8:	464b      	mov	r3, r9
 80099aa:	4442      	add	r2, r8
 80099ac:	4631      	mov	r1, r6
 80099ae:	4628      	mov	r0, r5
 80099b0:	47b8      	blx	r7
 80099b2:	3001      	adds	r0, #1
 80099b4:	d1c1      	bne.n	800993a <_printf_float+0x33e>
 80099b6:	e680      	b.n	80096ba <_printf_float+0xbe>
 80099b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ba:	2a01      	cmp	r2, #1
 80099bc:	dc01      	bgt.n	80099c2 <_printf_float+0x3c6>
 80099be:	07db      	lsls	r3, r3, #31
 80099c0:	d53a      	bpl.n	8009a38 <_printf_float+0x43c>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4642      	mov	r2, r8
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f ae74 	beq.w	80096ba <_printf_float+0xbe>
 80099d2:	ee18 3a10 	vmov	r3, s16
 80099d6:	4652      	mov	r2, sl
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	f43f ae6b 	beq.w	80096ba <_printf_float+0xbe>
 80099e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80099f0:	f7f7 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f4:	b9d8      	cbnz	r0, 8009a2e <_printf_float+0x432>
 80099f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80099fa:	f108 0201 	add.w	r2, r8, #1
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	d10e      	bne.n	8009a26 <_printf_float+0x42a>
 8009a08:	e657      	b.n	80096ba <_printf_float+0xbe>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	f43f ae50 	beq.w	80096ba <_printf_float+0xbe>
 8009a1a:	f108 0801 	add.w	r8, r8, #1
 8009a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a20:	3b01      	subs	r3, #1
 8009a22:	4543      	cmp	r3, r8
 8009a24:	dcf1      	bgt.n	8009a0a <_printf_float+0x40e>
 8009a26:	464b      	mov	r3, r9
 8009a28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a2c:	e6da      	b.n	80097e4 <_printf_float+0x1e8>
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	f104 0a1a 	add.w	sl, r4, #26
 8009a36:	e7f2      	b.n	8009a1e <_printf_float+0x422>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	e7df      	b.n	80099fe <_printf_float+0x402>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	464a      	mov	r2, r9
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f43f ae36 	beq.w	80096ba <_printf_float+0xbe>
 8009a4e:	f108 0801 	add.w	r8, r8, #1
 8009a52:	68e3      	ldr	r3, [r4, #12]
 8009a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a56:	1a5b      	subs	r3, r3, r1
 8009a58:	4543      	cmp	r3, r8
 8009a5a:	dcf0      	bgt.n	8009a3e <_printf_float+0x442>
 8009a5c:	e6f8      	b.n	8009850 <_printf_float+0x254>
 8009a5e:	f04f 0800 	mov.w	r8, #0
 8009a62:	f104 0919 	add.w	r9, r4, #25
 8009a66:	e7f4      	b.n	8009a52 <_printf_float+0x456>

08009a68 <_printf_common>:
 8009a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6c:	4616      	mov	r6, r2
 8009a6e:	4699      	mov	r9, r3
 8009a70:	688a      	ldr	r2, [r1, #8]
 8009a72:	690b      	ldr	r3, [r1, #16]
 8009a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	bfb8      	it	lt
 8009a7c:	4613      	movlt	r3, r2
 8009a7e:	6033      	str	r3, [r6, #0]
 8009a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a84:	4607      	mov	r7, r0
 8009a86:	460c      	mov	r4, r1
 8009a88:	b10a      	cbz	r2, 8009a8e <_printf_common+0x26>
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	6033      	str	r3, [r6, #0]
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	0699      	lsls	r1, r3, #26
 8009a92:	bf42      	ittt	mi
 8009a94:	6833      	ldrmi	r3, [r6, #0]
 8009a96:	3302      	addmi	r3, #2
 8009a98:	6033      	strmi	r3, [r6, #0]
 8009a9a:	6825      	ldr	r5, [r4, #0]
 8009a9c:	f015 0506 	ands.w	r5, r5, #6
 8009aa0:	d106      	bne.n	8009ab0 <_printf_common+0x48>
 8009aa2:	f104 0a19 	add.w	sl, r4, #25
 8009aa6:	68e3      	ldr	r3, [r4, #12]
 8009aa8:	6832      	ldr	r2, [r6, #0]
 8009aaa:	1a9b      	subs	r3, r3, r2
 8009aac:	42ab      	cmp	r3, r5
 8009aae:	dc26      	bgt.n	8009afe <_printf_common+0x96>
 8009ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ab4:	1e13      	subs	r3, r2, #0
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	bf18      	it	ne
 8009aba:	2301      	movne	r3, #1
 8009abc:	0692      	lsls	r2, r2, #26
 8009abe:	d42b      	bmi.n	8009b18 <_printf_common+0xb0>
 8009ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ac4:	4649      	mov	r1, r9
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	47c0      	blx	r8
 8009aca:	3001      	adds	r0, #1
 8009acc:	d01e      	beq.n	8009b0c <_printf_common+0xa4>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	6922      	ldr	r2, [r4, #16]
 8009ad2:	f003 0306 	and.w	r3, r3, #6
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	bf02      	ittt	eq
 8009ada:	68e5      	ldreq	r5, [r4, #12]
 8009adc:	6833      	ldreq	r3, [r6, #0]
 8009ade:	1aed      	subeq	r5, r5, r3
 8009ae0:	68a3      	ldr	r3, [r4, #8]
 8009ae2:	bf0c      	ite	eq
 8009ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ae8:	2500      	movne	r5, #0
 8009aea:	4293      	cmp	r3, r2
 8009aec:	bfc4      	itt	gt
 8009aee:	1a9b      	subgt	r3, r3, r2
 8009af0:	18ed      	addgt	r5, r5, r3
 8009af2:	2600      	movs	r6, #0
 8009af4:	341a      	adds	r4, #26
 8009af6:	42b5      	cmp	r5, r6
 8009af8:	d11a      	bne.n	8009b30 <_printf_common+0xc8>
 8009afa:	2000      	movs	r0, #0
 8009afc:	e008      	b.n	8009b10 <_printf_common+0xa8>
 8009afe:	2301      	movs	r3, #1
 8009b00:	4652      	mov	r2, sl
 8009b02:	4649      	mov	r1, r9
 8009b04:	4638      	mov	r0, r7
 8009b06:	47c0      	blx	r8
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d103      	bne.n	8009b14 <_printf_common+0xac>
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b14:	3501      	adds	r5, #1
 8009b16:	e7c6      	b.n	8009aa6 <_printf_common+0x3e>
 8009b18:	18e1      	adds	r1, r4, r3
 8009b1a:	1c5a      	adds	r2, r3, #1
 8009b1c:	2030      	movs	r0, #48	; 0x30
 8009b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b22:	4422      	add	r2, r4
 8009b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	e7c7      	b.n	8009ac0 <_printf_common+0x58>
 8009b30:	2301      	movs	r3, #1
 8009b32:	4622      	mov	r2, r4
 8009b34:	4649      	mov	r1, r9
 8009b36:	4638      	mov	r0, r7
 8009b38:	47c0      	blx	r8
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d0e6      	beq.n	8009b0c <_printf_common+0xa4>
 8009b3e:	3601      	adds	r6, #1
 8009b40:	e7d9      	b.n	8009af6 <_printf_common+0x8e>
	...

08009b44 <_printf_i>:
 8009b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b48:	7e0f      	ldrb	r7, [r1, #24]
 8009b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b4c:	2f78      	cmp	r7, #120	; 0x78
 8009b4e:	4691      	mov	r9, r2
 8009b50:	4680      	mov	r8, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	469a      	mov	sl, r3
 8009b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b5a:	d807      	bhi.n	8009b6c <_printf_i+0x28>
 8009b5c:	2f62      	cmp	r7, #98	; 0x62
 8009b5e:	d80a      	bhi.n	8009b76 <_printf_i+0x32>
 8009b60:	2f00      	cmp	r7, #0
 8009b62:	f000 80d4 	beq.w	8009d0e <_printf_i+0x1ca>
 8009b66:	2f58      	cmp	r7, #88	; 0x58
 8009b68:	f000 80c0 	beq.w	8009cec <_printf_i+0x1a8>
 8009b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b74:	e03a      	b.n	8009bec <_printf_i+0xa8>
 8009b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b7a:	2b15      	cmp	r3, #21
 8009b7c:	d8f6      	bhi.n	8009b6c <_printf_i+0x28>
 8009b7e:	a101      	add	r1, pc, #4	; (adr r1, 8009b84 <_printf_i+0x40>)
 8009b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b84:	08009bdd 	.word	0x08009bdd
 8009b88:	08009bf1 	.word	0x08009bf1
 8009b8c:	08009b6d 	.word	0x08009b6d
 8009b90:	08009b6d 	.word	0x08009b6d
 8009b94:	08009b6d 	.word	0x08009b6d
 8009b98:	08009b6d 	.word	0x08009b6d
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009b6d 	.word	0x08009b6d
 8009ba4:	08009b6d 	.word	0x08009b6d
 8009ba8:	08009b6d 	.word	0x08009b6d
 8009bac:	08009b6d 	.word	0x08009b6d
 8009bb0:	08009cf5 	.word	0x08009cf5
 8009bb4:	08009c1d 	.word	0x08009c1d
 8009bb8:	08009caf 	.word	0x08009caf
 8009bbc:	08009b6d 	.word	0x08009b6d
 8009bc0:	08009b6d 	.word	0x08009b6d
 8009bc4:	08009d17 	.word	0x08009d17
 8009bc8:	08009b6d 	.word	0x08009b6d
 8009bcc:	08009c1d 	.word	0x08009c1d
 8009bd0:	08009b6d 	.word	0x08009b6d
 8009bd4:	08009b6d 	.word	0x08009b6d
 8009bd8:	08009cb7 	.word	0x08009cb7
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	1d1a      	adds	r2, r3, #4
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	602a      	str	r2, [r5, #0]
 8009be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bec:	2301      	movs	r3, #1
 8009bee:	e09f      	b.n	8009d30 <_printf_i+0x1ec>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	682b      	ldr	r3, [r5, #0]
 8009bf4:	0607      	lsls	r7, r0, #24
 8009bf6:	f103 0104 	add.w	r1, r3, #4
 8009bfa:	6029      	str	r1, [r5, #0]
 8009bfc:	d501      	bpl.n	8009c02 <_printf_i+0xbe>
 8009bfe:	681e      	ldr	r6, [r3, #0]
 8009c00:	e003      	b.n	8009c0a <_printf_i+0xc6>
 8009c02:	0646      	lsls	r6, r0, #25
 8009c04:	d5fb      	bpl.n	8009bfe <_printf_i+0xba>
 8009c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	da03      	bge.n	8009c16 <_printf_i+0xd2>
 8009c0e:	232d      	movs	r3, #45	; 0x2d
 8009c10:	4276      	negs	r6, r6
 8009c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c16:	485a      	ldr	r0, [pc, #360]	; (8009d80 <_printf_i+0x23c>)
 8009c18:	230a      	movs	r3, #10
 8009c1a:	e012      	b.n	8009c42 <_printf_i+0xfe>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	6820      	ldr	r0, [r4, #0]
 8009c20:	1d19      	adds	r1, r3, #4
 8009c22:	6029      	str	r1, [r5, #0]
 8009c24:	0605      	lsls	r5, r0, #24
 8009c26:	d501      	bpl.n	8009c2c <_printf_i+0xe8>
 8009c28:	681e      	ldr	r6, [r3, #0]
 8009c2a:	e002      	b.n	8009c32 <_printf_i+0xee>
 8009c2c:	0641      	lsls	r1, r0, #25
 8009c2e:	d5fb      	bpl.n	8009c28 <_printf_i+0xe4>
 8009c30:	881e      	ldrh	r6, [r3, #0]
 8009c32:	4853      	ldr	r0, [pc, #332]	; (8009d80 <_printf_i+0x23c>)
 8009c34:	2f6f      	cmp	r7, #111	; 0x6f
 8009c36:	bf0c      	ite	eq
 8009c38:	2308      	moveq	r3, #8
 8009c3a:	230a      	movne	r3, #10
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c42:	6865      	ldr	r5, [r4, #4]
 8009c44:	60a5      	str	r5, [r4, #8]
 8009c46:	2d00      	cmp	r5, #0
 8009c48:	bfa2      	ittt	ge
 8009c4a:	6821      	ldrge	r1, [r4, #0]
 8009c4c:	f021 0104 	bicge.w	r1, r1, #4
 8009c50:	6021      	strge	r1, [r4, #0]
 8009c52:	b90e      	cbnz	r6, 8009c58 <_printf_i+0x114>
 8009c54:	2d00      	cmp	r5, #0
 8009c56:	d04b      	beq.n	8009cf0 <_printf_i+0x1ac>
 8009c58:	4615      	mov	r5, r2
 8009c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c62:	5dc7      	ldrb	r7, [r0, r7]
 8009c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c68:	4637      	mov	r7, r6
 8009c6a:	42bb      	cmp	r3, r7
 8009c6c:	460e      	mov	r6, r1
 8009c6e:	d9f4      	bls.n	8009c5a <_printf_i+0x116>
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d10b      	bne.n	8009c8c <_printf_i+0x148>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	07de      	lsls	r6, r3, #31
 8009c78:	d508      	bpl.n	8009c8c <_printf_i+0x148>
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	6861      	ldr	r1, [r4, #4]
 8009c7e:	4299      	cmp	r1, r3
 8009c80:	bfde      	ittt	le
 8009c82:	2330      	movle	r3, #48	; 0x30
 8009c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c8c:	1b52      	subs	r2, r2, r5
 8009c8e:	6122      	str	r2, [r4, #16]
 8009c90:	f8cd a000 	str.w	sl, [sp]
 8009c94:	464b      	mov	r3, r9
 8009c96:	aa03      	add	r2, sp, #12
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	f7ff fee4 	bl	8009a68 <_printf_common>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d14a      	bne.n	8009d3a <_printf_i+0x1f6>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	b004      	add	sp, #16
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	f043 0320 	orr.w	r3, r3, #32
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	4833      	ldr	r0, [pc, #204]	; (8009d84 <_printf_i+0x240>)
 8009cb8:	2778      	movs	r7, #120	; 0x78
 8009cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	6829      	ldr	r1, [r5, #0]
 8009cc2:	061f      	lsls	r7, r3, #24
 8009cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cc8:	d402      	bmi.n	8009cd0 <_printf_i+0x18c>
 8009cca:	065f      	lsls	r7, r3, #25
 8009ccc:	bf48      	it	mi
 8009cce:	b2b6      	uxthmi	r6, r6
 8009cd0:	07df      	lsls	r7, r3, #31
 8009cd2:	bf48      	it	mi
 8009cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8009cd8:	6029      	str	r1, [r5, #0]
 8009cda:	bf48      	it	mi
 8009cdc:	6023      	strmi	r3, [r4, #0]
 8009cde:	b91e      	cbnz	r6, 8009ce8 <_printf_i+0x1a4>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	f023 0320 	bic.w	r3, r3, #32
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	2310      	movs	r3, #16
 8009cea:	e7a7      	b.n	8009c3c <_printf_i+0xf8>
 8009cec:	4824      	ldr	r0, [pc, #144]	; (8009d80 <_printf_i+0x23c>)
 8009cee:	e7e4      	b.n	8009cba <_printf_i+0x176>
 8009cf0:	4615      	mov	r5, r2
 8009cf2:	e7bd      	b.n	8009c70 <_printf_i+0x12c>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	6826      	ldr	r6, [r4, #0]
 8009cf8:	6961      	ldr	r1, [r4, #20]
 8009cfa:	1d18      	adds	r0, r3, #4
 8009cfc:	6028      	str	r0, [r5, #0]
 8009cfe:	0635      	lsls	r5, r6, #24
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	d501      	bpl.n	8009d08 <_printf_i+0x1c4>
 8009d04:	6019      	str	r1, [r3, #0]
 8009d06:	e002      	b.n	8009d0e <_printf_i+0x1ca>
 8009d08:	0670      	lsls	r0, r6, #25
 8009d0a:	d5fb      	bpl.n	8009d04 <_printf_i+0x1c0>
 8009d0c:	8019      	strh	r1, [r3, #0]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6123      	str	r3, [r4, #16]
 8009d12:	4615      	mov	r5, r2
 8009d14:	e7bc      	b.n	8009c90 <_printf_i+0x14c>
 8009d16:	682b      	ldr	r3, [r5, #0]
 8009d18:	1d1a      	adds	r2, r3, #4
 8009d1a:	602a      	str	r2, [r5, #0]
 8009d1c:	681d      	ldr	r5, [r3, #0]
 8009d1e:	6862      	ldr	r2, [r4, #4]
 8009d20:	2100      	movs	r1, #0
 8009d22:	4628      	mov	r0, r5
 8009d24:	f7f6 fa54 	bl	80001d0 <memchr>
 8009d28:	b108      	cbz	r0, 8009d2e <_printf_i+0x1ea>
 8009d2a:	1b40      	subs	r0, r0, r5
 8009d2c:	6060      	str	r0, [r4, #4]
 8009d2e:	6863      	ldr	r3, [r4, #4]
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	2300      	movs	r3, #0
 8009d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d38:	e7aa      	b.n	8009c90 <_printf_i+0x14c>
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	462a      	mov	r2, r5
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4640      	mov	r0, r8
 8009d42:	47d0      	blx	sl
 8009d44:	3001      	adds	r0, #1
 8009d46:	d0ad      	beq.n	8009ca4 <_printf_i+0x160>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	079b      	lsls	r3, r3, #30
 8009d4c:	d413      	bmi.n	8009d76 <_printf_i+0x232>
 8009d4e:	68e0      	ldr	r0, [r4, #12]
 8009d50:	9b03      	ldr	r3, [sp, #12]
 8009d52:	4298      	cmp	r0, r3
 8009d54:	bfb8      	it	lt
 8009d56:	4618      	movlt	r0, r3
 8009d58:	e7a6      	b.n	8009ca8 <_printf_i+0x164>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4640      	mov	r0, r8
 8009d62:	47d0      	blx	sl
 8009d64:	3001      	adds	r0, #1
 8009d66:	d09d      	beq.n	8009ca4 <_printf_i+0x160>
 8009d68:	3501      	adds	r5, #1
 8009d6a:	68e3      	ldr	r3, [r4, #12]
 8009d6c:	9903      	ldr	r1, [sp, #12]
 8009d6e:	1a5b      	subs	r3, r3, r1
 8009d70:	42ab      	cmp	r3, r5
 8009d72:	dcf2      	bgt.n	8009d5a <_printf_i+0x216>
 8009d74:	e7eb      	b.n	8009d4e <_printf_i+0x20a>
 8009d76:	2500      	movs	r5, #0
 8009d78:	f104 0619 	add.w	r6, r4, #25
 8009d7c:	e7f5      	b.n	8009d6a <_printf_i+0x226>
 8009d7e:	bf00      	nop
 8009d80:	0800da21 	.word	0x0800da21
 8009d84:	0800da32 	.word	0x0800da32

08009d88 <_scanf_float>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	b087      	sub	sp, #28
 8009d8e:	4617      	mov	r7, r2
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	688b      	ldr	r3, [r1, #8]
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d9a:	bf83      	ittte	hi
 8009d9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009da0:	195b      	addhi	r3, r3, r5
 8009da2:	9302      	strhi	r3, [sp, #8]
 8009da4:	2300      	movls	r3, #0
 8009da6:	bf86      	itte	hi
 8009da8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009dac:	608b      	strhi	r3, [r1, #8]
 8009dae:	9302      	strls	r3, [sp, #8]
 8009db0:	680b      	ldr	r3, [r1, #0]
 8009db2:	468b      	mov	fp, r1
 8009db4:	2500      	movs	r5, #0
 8009db6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009dba:	f84b 3b1c 	str.w	r3, [fp], #28
 8009dbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	465e      	mov	r6, fp
 8009dc8:	46aa      	mov	sl, r5
 8009dca:	46a9      	mov	r9, r5
 8009dcc:	9501      	str	r5, [sp, #4]
 8009dce:	68a2      	ldr	r2, [r4, #8]
 8009dd0:	b152      	cbz	r2, 8009de8 <_scanf_float+0x60>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b4e      	cmp	r3, #78	; 0x4e
 8009dd8:	d864      	bhi.n	8009ea4 <_scanf_float+0x11c>
 8009dda:	2b40      	cmp	r3, #64	; 0x40
 8009ddc:	d83c      	bhi.n	8009e58 <_scanf_float+0xd0>
 8009dde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009de2:	b2c8      	uxtb	r0, r1
 8009de4:	280e      	cmp	r0, #14
 8009de6:	d93a      	bls.n	8009e5e <_scanf_float+0xd6>
 8009de8:	f1b9 0f00 	cmp.w	r9, #0
 8009dec:	d003      	beq.n	8009df6 <_scanf_float+0x6e>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dfa:	f1ba 0f01 	cmp.w	sl, #1
 8009dfe:	f200 8113 	bhi.w	800a028 <_scanf_float+0x2a0>
 8009e02:	455e      	cmp	r6, fp
 8009e04:	f200 8105 	bhi.w	800a012 <_scanf_float+0x28a>
 8009e08:	2501      	movs	r5, #1
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	b007      	add	sp, #28
 8009e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009e16:	2a0d      	cmp	r2, #13
 8009e18:	d8e6      	bhi.n	8009de8 <_scanf_float+0x60>
 8009e1a:	a101      	add	r1, pc, #4	; (adr r1, 8009e20 <_scanf_float+0x98>)
 8009e1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e20:	08009f5f 	.word	0x08009f5f
 8009e24:	08009de9 	.word	0x08009de9
 8009e28:	08009de9 	.word	0x08009de9
 8009e2c:	08009de9 	.word	0x08009de9
 8009e30:	08009fbf 	.word	0x08009fbf
 8009e34:	08009f97 	.word	0x08009f97
 8009e38:	08009de9 	.word	0x08009de9
 8009e3c:	08009de9 	.word	0x08009de9
 8009e40:	08009f6d 	.word	0x08009f6d
 8009e44:	08009de9 	.word	0x08009de9
 8009e48:	08009de9 	.word	0x08009de9
 8009e4c:	08009de9 	.word	0x08009de9
 8009e50:	08009de9 	.word	0x08009de9
 8009e54:	08009f25 	.word	0x08009f25
 8009e58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009e5c:	e7db      	b.n	8009e16 <_scanf_float+0x8e>
 8009e5e:	290e      	cmp	r1, #14
 8009e60:	d8c2      	bhi.n	8009de8 <_scanf_float+0x60>
 8009e62:	a001      	add	r0, pc, #4	; (adr r0, 8009e68 <_scanf_float+0xe0>)
 8009e64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009e68:	08009f17 	.word	0x08009f17
 8009e6c:	08009de9 	.word	0x08009de9
 8009e70:	08009f17 	.word	0x08009f17
 8009e74:	08009fab 	.word	0x08009fab
 8009e78:	08009de9 	.word	0x08009de9
 8009e7c:	08009ec5 	.word	0x08009ec5
 8009e80:	08009f01 	.word	0x08009f01
 8009e84:	08009f01 	.word	0x08009f01
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f01 	.word	0x08009f01
 8009e90:	08009f01 	.word	0x08009f01
 8009e94:	08009f01 	.word	0x08009f01
 8009e98:	08009f01 	.word	0x08009f01
 8009e9c:	08009f01 	.word	0x08009f01
 8009ea0:	08009f01 	.word	0x08009f01
 8009ea4:	2b6e      	cmp	r3, #110	; 0x6e
 8009ea6:	d809      	bhi.n	8009ebc <_scanf_float+0x134>
 8009ea8:	2b60      	cmp	r3, #96	; 0x60
 8009eaa:	d8b2      	bhi.n	8009e12 <_scanf_float+0x8a>
 8009eac:	2b54      	cmp	r3, #84	; 0x54
 8009eae:	d077      	beq.n	8009fa0 <_scanf_float+0x218>
 8009eb0:	2b59      	cmp	r3, #89	; 0x59
 8009eb2:	d199      	bne.n	8009de8 <_scanf_float+0x60>
 8009eb4:	2d07      	cmp	r5, #7
 8009eb6:	d197      	bne.n	8009de8 <_scanf_float+0x60>
 8009eb8:	2508      	movs	r5, #8
 8009eba:	e029      	b.n	8009f10 <_scanf_float+0x188>
 8009ebc:	2b74      	cmp	r3, #116	; 0x74
 8009ebe:	d06f      	beq.n	8009fa0 <_scanf_float+0x218>
 8009ec0:	2b79      	cmp	r3, #121	; 0x79
 8009ec2:	e7f6      	b.n	8009eb2 <_scanf_float+0x12a>
 8009ec4:	6821      	ldr	r1, [r4, #0]
 8009ec6:	05c8      	lsls	r0, r1, #23
 8009ec8:	d51a      	bpl.n	8009f00 <_scanf_float+0x178>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	f109 0901 	add.w	r9, r9, #1
 8009ed6:	b11b      	cbz	r3, 8009ee0 <_scanf_float+0x158>
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	3201      	adds	r2, #1
 8009edc:	9302      	str	r3, [sp, #8]
 8009ede:	60a2      	str	r2, [r4, #8]
 8009ee0:	68a3      	ldr	r3, [r4, #8]
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	607b      	str	r3, [r7, #4]
 8009ef4:	f340 8084 	ble.w	800a000 <_scanf_float+0x278>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	3301      	adds	r3, #1
 8009efc:	603b      	str	r3, [r7, #0]
 8009efe:	e766      	b.n	8009dce <_scanf_float+0x46>
 8009f00:	eb1a 0f05 	cmn.w	sl, r5
 8009f04:	f47f af70 	bne.w	8009de8 <_scanf_float+0x60>
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	f806 3b01 	strb.w	r3, [r6], #1
 8009f14:	e7e4      	b.n	8009ee0 <_scanf_float+0x158>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	0610      	lsls	r0, r2, #24
 8009f1a:	f57f af65 	bpl.w	8009de8 <_scanf_float+0x60>
 8009f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f22:	e7f4      	b.n	8009f0e <_scanf_float+0x186>
 8009f24:	f1ba 0f00 	cmp.w	sl, #0
 8009f28:	d10e      	bne.n	8009f48 <_scanf_float+0x1c0>
 8009f2a:	f1b9 0f00 	cmp.w	r9, #0
 8009f2e:	d10e      	bne.n	8009f4e <_scanf_float+0x1c6>
 8009f30:	6822      	ldr	r2, [r4, #0]
 8009f32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f3a:	d108      	bne.n	8009f4e <_scanf_float+0x1c6>
 8009f3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	f04f 0a01 	mov.w	sl, #1
 8009f46:	e7e3      	b.n	8009f10 <_scanf_float+0x188>
 8009f48:	f1ba 0f02 	cmp.w	sl, #2
 8009f4c:	d055      	beq.n	8009ffa <_scanf_float+0x272>
 8009f4e:	2d01      	cmp	r5, #1
 8009f50:	d002      	beq.n	8009f58 <_scanf_float+0x1d0>
 8009f52:	2d04      	cmp	r5, #4
 8009f54:	f47f af48 	bne.w	8009de8 <_scanf_float+0x60>
 8009f58:	3501      	adds	r5, #1
 8009f5a:	b2ed      	uxtb	r5, r5
 8009f5c:	e7d8      	b.n	8009f10 <_scanf_float+0x188>
 8009f5e:	f1ba 0f01 	cmp.w	sl, #1
 8009f62:	f47f af41 	bne.w	8009de8 <_scanf_float+0x60>
 8009f66:	f04f 0a02 	mov.w	sl, #2
 8009f6a:	e7d1      	b.n	8009f10 <_scanf_float+0x188>
 8009f6c:	b97d      	cbnz	r5, 8009f8e <_scanf_float+0x206>
 8009f6e:	f1b9 0f00 	cmp.w	r9, #0
 8009f72:	f47f af3c 	bne.w	8009dee <_scanf_float+0x66>
 8009f76:	6822      	ldr	r2, [r4, #0]
 8009f78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009f7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009f80:	f47f af39 	bne.w	8009df6 <_scanf_float+0x6e>
 8009f84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f88:	6022      	str	r2, [r4, #0]
 8009f8a:	2501      	movs	r5, #1
 8009f8c:	e7c0      	b.n	8009f10 <_scanf_float+0x188>
 8009f8e:	2d03      	cmp	r5, #3
 8009f90:	d0e2      	beq.n	8009f58 <_scanf_float+0x1d0>
 8009f92:	2d05      	cmp	r5, #5
 8009f94:	e7de      	b.n	8009f54 <_scanf_float+0x1cc>
 8009f96:	2d02      	cmp	r5, #2
 8009f98:	f47f af26 	bne.w	8009de8 <_scanf_float+0x60>
 8009f9c:	2503      	movs	r5, #3
 8009f9e:	e7b7      	b.n	8009f10 <_scanf_float+0x188>
 8009fa0:	2d06      	cmp	r5, #6
 8009fa2:	f47f af21 	bne.w	8009de8 <_scanf_float+0x60>
 8009fa6:	2507      	movs	r5, #7
 8009fa8:	e7b2      	b.n	8009f10 <_scanf_float+0x188>
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	0591      	lsls	r1, r2, #22
 8009fae:	f57f af1b 	bpl.w	8009de8 <_scanf_float+0x60>
 8009fb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fbc:	e7a8      	b.n	8009f10 <_scanf_float+0x188>
 8009fbe:	6822      	ldr	r2, [r4, #0]
 8009fc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009fc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009fc8:	d006      	beq.n	8009fd8 <_scanf_float+0x250>
 8009fca:	0550      	lsls	r0, r2, #21
 8009fcc:	f57f af0c 	bpl.w	8009de8 <_scanf_float+0x60>
 8009fd0:	f1b9 0f00 	cmp.w	r9, #0
 8009fd4:	f43f af0f 	beq.w	8009df6 <_scanf_float+0x6e>
 8009fd8:	0591      	lsls	r1, r2, #22
 8009fda:	bf58      	it	pl
 8009fdc:	9901      	ldrpl	r1, [sp, #4]
 8009fde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009fe2:	bf58      	it	pl
 8009fe4:	eba9 0101 	subpl.w	r1, r9, r1
 8009fe8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009fec:	bf58      	it	pl
 8009fee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ff2:	6022      	str	r2, [r4, #0]
 8009ff4:	f04f 0900 	mov.w	r9, #0
 8009ff8:	e78a      	b.n	8009f10 <_scanf_float+0x188>
 8009ffa:	f04f 0a03 	mov.w	sl, #3
 8009ffe:	e787      	b.n	8009f10 <_scanf_float+0x188>
 800a000:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a004:	4639      	mov	r1, r7
 800a006:	4640      	mov	r0, r8
 800a008:	4798      	blx	r3
 800a00a:	2800      	cmp	r0, #0
 800a00c:	f43f aedf 	beq.w	8009dce <_scanf_float+0x46>
 800a010:	e6ea      	b.n	8009de8 <_scanf_float+0x60>
 800a012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a016:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a01a:	463a      	mov	r2, r7
 800a01c:	4640      	mov	r0, r8
 800a01e:	4798      	blx	r3
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	3b01      	subs	r3, #1
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	e6ec      	b.n	8009e02 <_scanf_float+0x7a>
 800a028:	1e6b      	subs	r3, r5, #1
 800a02a:	2b06      	cmp	r3, #6
 800a02c:	d825      	bhi.n	800a07a <_scanf_float+0x2f2>
 800a02e:	2d02      	cmp	r5, #2
 800a030:	d836      	bhi.n	800a0a0 <_scanf_float+0x318>
 800a032:	455e      	cmp	r6, fp
 800a034:	f67f aee8 	bls.w	8009e08 <_scanf_float+0x80>
 800a038:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a03c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a040:	463a      	mov	r2, r7
 800a042:	4640      	mov	r0, r8
 800a044:	4798      	blx	r3
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	3b01      	subs	r3, #1
 800a04a:	6123      	str	r3, [r4, #16]
 800a04c:	e7f1      	b.n	800a032 <_scanf_float+0x2aa>
 800a04e:	9802      	ldr	r0, [sp, #8]
 800a050:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a054:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a058:	9002      	str	r0, [sp, #8]
 800a05a:	463a      	mov	r2, r7
 800a05c:	4640      	mov	r0, r8
 800a05e:	4798      	blx	r3
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	3b01      	subs	r3, #1
 800a064:	6123      	str	r3, [r4, #16]
 800a066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a06a:	fa5f fa8a 	uxtb.w	sl, sl
 800a06e:	f1ba 0f02 	cmp.w	sl, #2
 800a072:	d1ec      	bne.n	800a04e <_scanf_float+0x2c6>
 800a074:	3d03      	subs	r5, #3
 800a076:	b2ed      	uxtb	r5, r5
 800a078:	1b76      	subs	r6, r6, r5
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	05da      	lsls	r2, r3, #23
 800a07e:	d52f      	bpl.n	800a0e0 <_scanf_float+0x358>
 800a080:	055b      	lsls	r3, r3, #21
 800a082:	d510      	bpl.n	800a0a6 <_scanf_float+0x31e>
 800a084:	455e      	cmp	r6, fp
 800a086:	f67f aebf 	bls.w	8009e08 <_scanf_float+0x80>
 800a08a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a08e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a092:	463a      	mov	r2, r7
 800a094:	4640      	mov	r0, r8
 800a096:	4798      	blx	r3
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	6123      	str	r3, [r4, #16]
 800a09e:	e7f1      	b.n	800a084 <_scanf_float+0x2fc>
 800a0a0:	46aa      	mov	sl, r5
 800a0a2:	9602      	str	r6, [sp, #8]
 800a0a4:	e7df      	b.n	800a066 <_scanf_float+0x2de>
 800a0a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	2965      	cmp	r1, #101	; 0x65
 800a0ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	d00c      	beq.n	800a0d4 <_scanf_float+0x34c>
 800a0ba:	2945      	cmp	r1, #69	; 0x45
 800a0bc:	d00a      	beq.n	800a0d4 <_scanf_float+0x34c>
 800a0be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0c2:	463a      	mov	r2, r7
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4798      	blx	r3
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	1eb5      	subs	r5, r6, #2
 800a0d2:	6123      	str	r3, [r4, #16]
 800a0d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a0d8:	463a      	mov	r2, r7
 800a0da:	4640      	mov	r0, r8
 800a0dc:	4798      	blx	r3
 800a0de:	462e      	mov	r6, r5
 800a0e0:	6825      	ldr	r5, [r4, #0]
 800a0e2:	f015 0510 	ands.w	r5, r5, #16
 800a0e6:	d158      	bne.n	800a19a <_scanf_float+0x412>
 800a0e8:	7035      	strb	r5, [r6, #0]
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f4:	d11c      	bne.n	800a130 <_scanf_float+0x3a8>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	454b      	cmp	r3, r9
 800a0fa:	eba3 0209 	sub.w	r2, r3, r9
 800a0fe:	d124      	bne.n	800a14a <_scanf_float+0x3c2>
 800a100:	2200      	movs	r2, #0
 800a102:	4659      	mov	r1, fp
 800a104:	4640      	mov	r0, r8
 800a106:	f7ff f9d3 	bl	80094b0 <_strtod_r>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	6821      	ldr	r1, [r4, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f011 0f02 	tst.w	r1, #2
 800a114:	ec57 6b10 	vmov	r6, r7, d0
 800a118:	f103 0204 	add.w	r2, r3, #4
 800a11c:	d020      	beq.n	800a160 <_scanf_float+0x3d8>
 800a11e:	9903      	ldr	r1, [sp, #12]
 800a120:	600a      	str	r2, [r1, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	e9c3 6700 	strd	r6, r7, [r3]
 800a128:	68e3      	ldr	r3, [r4, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60e3      	str	r3, [r4, #12]
 800a12e:	e66c      	b.n	8009e0a <_scanf_float+0x82>
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0e4      	beq.n	800a100 <_scanf_float+0x378>
 800a136:	9905      	ldr	r1, [sp, #20]
 800a138:	230a      	movs	r3, #10
 800a13a:	462a      	mov	r2, r5
 800a13c:	3101      	adds	r1, #1
 800a13e:	4640      	mov	r0, r8
 800a140:	f002 f9d2 	bl	800c4e8 <_strtol_r>
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	9e05      	ldr	r6, [sp, #20]
 800a148:	1ac2      	subs	r2, r0, r3
 800a14a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a14e:	429e      	cmp	r6, r3
 800a150:	bf28      	it	cs
 800a152:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a156:	4912      	ldr	r1, [pc, #72]	; (800a1a0 <_scanf_float+0x418>)
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 f8e7 	bl	800a32c <siprintf>
 800a15e:	e7cf      	b.n	800a100 <_scanf_float+0x378>
 800a160:	f011 0f04 	tst.w	r1, #4
 800a164:	9903      	ldr	r1, [sp, #12]
 800a166:	600a      	str	r2, [r1, #0]
 800a168:	d1db      	bne.n	800a122 <_scanf_float+0x39a>
 800a16a:	f8d3 8000 	ldr.w	r8, [r3]
 800a16e:	ee10 2a10 	vmov	r2, s0
 800a172:	ee10 0a10 	vmov	r0, s0
 800a176:	463b      	mov	r3, r7
 800a178:	4639      	mov	r1, r7
 800a17a:	f7f6 fcd7 	bl	8000b2c <__aeabi_dcmpun>
 800a17e:	b128      	cbz	r0, 800a18c <_scanf_float+0x404>
 800a180:	4808      	ldr	r0, [pc, #32]	; (800a1a4 <_scanf_float+0x41c>)
 800a182:	f000 fa41 	bl	800a608 <nanf>
 800a186:	ed88 0a00 	vstr	s0, [r8]
 800a18a:	e7cd      	b.n	800a128 <_scanf_float+0x3a0>
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f7f6 fd2a 	bl	8000be8 <__aeabi_d2f>
 800a194:	f8c8 0000 	str.w	r0, [r8]
 800a198:	e7c6      	b.n	800a128 <_scanf_float+0x3a0>
 800a19a:	2500      	movs	r5, #0
 800a19c:	e635      	b.n	8009e0a <_scanf_float+0x82>
 800a19e:	bf00      	nop
 800a1a0:	0800da43 	.word	0x0800da43
 800a1a4:	0800dcfb 	.word	0x0800dcfb

0800a1a8 <std>:
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1b6:	6083      	str	r3, [r0, #8]
 800a1b8:	8181      	strh	r1, [r0, #12]
 800a1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a1bc:	81c2      	strh	r2, [r0, #14]
 800a1be:	6183      	str	r3, [r0, #24]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	305c      	adds	r0, #92	; 0x5c
 800a1c6:	f000 f942 	bl	800a44e <memset>
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <std+0x58>)
 800a1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <std+0x5c>)
 800a1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <std+0x60>)
 800a1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <std+0x64>)
 800a1d8:	6323      	str	r3, [r4, #48]	; 0x30
 800a1da:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <std+0x68>)
 800a1dc:	6224      	str	r4, [r4, #32]
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d006      	beq.n	800a1f0 <std+0x48>
 800a1e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a1e6:	4294      	cmp	r4, r2
 800a1e8:	d002      	beq.n	800a1f0 <std+0x48>
 800a1ea:	33d0      	adds	r3, #208	; 0xd0
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d105      	bne.n	800a1fc <std+0x54>
 800a1f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f8:	f000 b9ea 	b.w	800a5d0 <__retarget_lock_init_recursive>
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	0800a3c5 	.word	0x0800a3c5
 800a204:	0800a3eb 	.word	0x0800a3eb
 800a208:	0800a423 	.word	0x0800a423
 800a20c:	0800a447 	.word	0x0800a447
 800a210:	20004990 	.word	0x20004990

0800a214 <stdio_exit_handler>:
 800a214:	4a02      	ldr	r2, [pc, #8]	; (800a220 <stdio_exit_handler+0xc>)
 800a216:	4903      	ldr	r1, [pc, #12]	; (800a224 <stdio_exit_handler+0x10>)
 800a218:	4803      	ldr	r0, [pc, #12]	; (800a228 <stdio_exit_handler+0x14>)
 800a21a:	f000 b869 	b.w	800a2f0 <_fwalk_sglue>
 800a21e:	bf00      	nop
 800a220:	20000014 	.word	0x20000014
 800a224:	0800cf05 	.word	0x0800cf05
 800a228:	2000018c 	.word	0x2000018c

0800a22c <cleanup_stdio>:
 800a22c:	6841      	ldr	r1, [r0, #4]
 800a22e:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <cleanup_stdio+0x34>)
 800a230:	4299      	cmp	r1, r3
 800a232:	b510      	push	{r4, lr}
 800a234:	4604      	mov	r4, r0
 800a236:	d001      	beq.n	800a23c <cleanup_stdio+0x10>
 800a238:	f002 fe64 	bl	800cf04 <_fflush_r>
 800a23c:	68a1      	ldr	r1, [r4, #8]
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <cleanup_stdio+0x38>)
 800a240:	4299      	cmp	r1, r3
 800a242:	d002      	beq.n	800a24a <cleanup_stdio+0x1e>
 800a244:	4620      	mov	r0, r4
 800a246:	f002 fe5d 	bl	800cf04 <_fflush_r>
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	4b06      	ldr	r3, [pc, #24]	; (800a268 <cleanup_stdio+0x3c>)
 800a24e:	4299      	cmp	r1, r3
 800a250:	d004      	beq.n	800a25c <cleanup_stdio+0x30>
 800a252:	4620      	mov	r0, r4
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	f002 be54 	b.w	800cf04 <_fflush_r>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	20004990 	.word	0x20004990
 800a264:	200049f8 	.word	0x200049f8
 800a268:	20004a60 	.word	0x20004a60

0800a26c <global_stdio_init.part.0>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <global_stdio_init.part.0+0x30>)
 800a270:	4c0b      	ldr	r4, [pc, #44]	; (800a2a0 <global_stdio_init.part.0+0x34>)
 800a272:	4a0c      	ldr	r2, [pc, #48]	; (800a2a4 <global_stdio_init.part.0+0x38>)
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	4620      	mov	r0, r4
 800a278:	2200      	movs	r2, #0
 800a27a:	2104      	movs	r1, #4
 800a27c:	f7ff ff94 	bl	800a1a8 <std>
 800a280:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a284:	2201      	movs	r2, #1
 800a286:	2109      	movs	r1, #9
 800a288:	f7ff ff8e 	bl	800a1a8 <std>
 800a28c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a290:	2202      	movs	r2, #2
 800a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a296:	2112      	movs	r1, #18
 800a298:	f7ff bf86 	b.w	800a1a8 <std>
 800a29c:	20004ac8 	.word	0x20004ac8
 800a2a0:	20004990 	.word	0x20004990
 800a2a4:	0800a215 	.word	0x0800a215

0800a2a8 <__sfp_lock_acquire>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sfp_lock_acquire+0x8>)
 800a2aa:	f000 b992 	b.w	800a5d2 <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20004ad1 	.word	0x20004ad1

0800a2b4 <__sfp_lock_release>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__sfp_lock_release+0x8>)
 800a2b6:	f000 b98d 	b.w	800a5d4 <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20004ad1 	.word	0x20004ad1

0800a2c0 <__sinit>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f7ff fff0 	bl	800a2a8 <__sfp_lock_acquire>
 800a2c8:	6a23      	ldr	r3, [r4, #32]
 800a2ca:	b11b      	cbz	r3, 800a2d4 <__sinit+0x14>
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f7ff bff0 	b.w	800a2b4 <__sfp_lock_release>
 800a2d4:	4b04      	ldr	r3, [pc, #16]	; (800a2e8 <__sinit+0x28>)
 800a2d6:	6223      	str	r3, [r4, #32]
 800a2d8:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <__sinit+0x2c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f5      	bne.n	800a2cc <__sinit+0xc>
 800a2e0:	f7ff ffc4 	bl	800a26c <global_stdio_init.part.0>
 800a2e4:	e7f2      	b.n	800a2cc <__sinit+0xc>
 800a2e6:	bf00      	nop
 800a2e8:	0800a22d 	.word	0x0800a22d
 800a2ec:	20004ac8 	.word	0x20004ac8

0800a2f0 <_fwalk_sglue>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a300:	f1b9 0901 	subs.w	r9, r9, #1
 800a304:	d505      	bpl.n	800a312 <_fwalk_sglue+0x22>
 800a306:	6824      	ldr	r4, [r4, #0]
 800a308:	2c00      	cmp	r4, #0
 800a30a:	d1f7      	bne.n	800a2fc <_fwalk_sglue+0xc>
 800a30c:	4630      	mov	r0, r6
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d907      	bls.n	800a328 <_fwalk_sglue+0x38>
 800a318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31c:	3301      	adds	r3, #1
 800a31e:	d003      	beq.n	800a328 <_fwalk_sglue+0x38>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	47c0      	blx	r8
 800a326:	4306      	orrs	r6, r0
 800a328:	3568      	adds	r5, #104	; 0x68
 800a32a:	e7e9      	b.n	800a300 <_fwalk_sglue+0x10>

0800a32c <siprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b500      	push	{lr}
 800a330:	b09c      	sub	sp, #112	; 0x70
 800a332:	ab1d      	add	r3, sp, #116	; 0x74
 800a334:	9002      	str	r0, [sp, #8]
 800a336:	9006      	str	r0, [sp, #24]
 800a338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a33c:	4809      	ldr	r0, [pc, #36]	; (800a364 <siprintf+0x38>)
 800a33e:	9107      	str	r1, [sp, #28]
 800a340:	9104      	str	r1, [sp, #16]
 800a342:	4909      	ldr	r1, [pc, #36]	; (800a368 <siprintf+0x3c>)
 800a344:	f853 2b04 	ldr.w	r2, [r3], #4
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	a902      	add	r1, sp, #8
 800a350:	f002 f934 	bl	800c5bc <_svfiprintf_r>
 800a354:	9b02      	ldr	r3, [sp, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
 800a35a:	b01c      	add	sp, #112	; 0x70
 800a35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a360:	b003      	add	sp, #12
 800a362:	4770      	bx	lr
 800a364:	200001d8 	.word	0x200001d8
 800a368:	ffff0208 	.word	0xffff0208

0800a36c <siscanf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	b510      	push	{r4, lr}
 800a370:	b09f      	sub	sp, #124	; 0x7c
 800a372:	ac21      	add	r4, sp, #132	; 0x84
 800a374:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a378:	f854 2b04 	ldr.w	r2, [r4], #4
 800a37c:	9201      	str	r2, [sp, #4]
 800a37e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a382:	9004      	str	r0, [sp, #16]
 800a384:	9008      	str	r0, [sp, #32]
 800a386:	f7f5 ff73 	bl	8000270 <strlen>
 800a38a:	4b0c      	ldr	r3, [pc, #48]	; (800a3bc <siscanf+0x50>)
 800a38c:	9005      	str	r0, [sp, #20]
 800a38e:	9009      	str	r0, [sp, #36]	; 0x24
 800a390:	930d      	str	r3, [sp, #52]	; 0x34
 800a392:	480b      	ldr	r0, [pc, #44]	; (800a3c0 <siscanf+0x54>)
 800a394:	9a01      	ldr	r2, [sp, #4]
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	9403      	str	r4, [sp, #12]
 800a39a:	2300      	movs	r3, #0
 800a39c:	9311      	str	r3, [sp, #68]	; 0x44
 800a39e:	9316      	str	r3, [sp, #88]	; 0x58
 800a3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3a8:	a904      	add	r1, sp, #16
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	f002 fa5e 	bl	800c86c <__ssvfiscanf_r>
 800a3b0:	b01f      	add	sp, #124	; 0x7c
 800a3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3b6:	b003      	add	sp, #12
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	0800a3e7 	.word	0x0800a3e7
 800a3c0:	200001d8 	.word	0x200001d8

0800a3c4 <__sread>:
 800a3c4:	b510      	push	{r4, lr}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3cc:	f000 f8a2 	bl	800a514 <_read_r>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	bfab      	itete	ge
 800a3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3d8:	181b      	addge	r3, r3, r0
 800a3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3de:	bfac      	ite	ge
 800a3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3e2:	81a3      	strhlt	r3, [r4, #12]
 800a3e4:	bd10      	pop	{r4, pc}

0800a3e6 <__seofread>:
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	4770      	bx	lr

0800a3ea <__swrite>:
 800a3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	898b      	ldrh	r3, [r1, #12]
 800a3f2:	05db      	lsls	r3, r3, #23
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	460c      	mov	r4, r1
 800a3f8:	4616      	mov	r6, r2
 800a3fa:	d505      	bpl.n	800a408 <__swrite+0x1e>
 800a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a400:	2302      	movs	r3, #2
 800a402:	2200      	movs	r2, #0
 800a404:	f000 f874 	bl	800a4f0 <_lseek_r>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	4632      	mov	r2, r6
 800a416:	463b      	mov	r3, r7
 800a418:	4628      	mov	r0, r5
 800a41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	f000 b89b 	b.w	800a558 <_write_r>

0800a422 <__sseek>:
 800a422:	b510      	push	{r4, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42a:	f000 f861 	bl	800a4f0 <_lseek_r>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	bf15      	itete	ne
 800a434:	6560      	strne	r0, [r4, #84]	; 0x54
 800a436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a43e:	81a3      	strheq	r3, [r4, #12]
 800a440:	bf18      	it	ne
 800a442:	81a3      	strhne	r3, [r4, #12]
 800a444:	bd10      	pop	{r4, pc}

0800a446 <__sclose>:
 800a446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44a:	f000 b841 	b.w	800a4d0 <_close_r>

0800a44e <memset>:
 800a44e:	4402      	add	r2, r0
 800a450:	4603      	mov	r3, r0
 800a452:	4293      	cmp	r3, r2
 800a454:	d100      	bne.n	800a458 <memset+0xa>
 800a456:	4770      	bx	lr
 800a458:	f803 1b01 	strb.w	r1, [r3], #1
 800a45c:	e7f9      	b.n	800a452 <memset+0x4>

0800a45e <strchr>:
 800a45e:	b2c9      	uxtb	r1, r1
 800a460:	4603      	mov	r3, r0
 800a462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a466:	b11a      	cbz	r2, 800a470 <strchr+0x12>
 800a468:	428a      	cmp	r2, r1
 800a46a:	d1f9      	bne.n	800a460 <strchr+0x2>
 800a46c:	4618      	mov	r0, r3
 800a46e:	4770      	bx	lr
 800a470:	2900      	cmp	r1, #0
 800a472:	bf18      	it	ne
 800a474:	2300      	movne	r3, #0
 800a476:	e7f9      	b.n	800a46c <strchr+0xe>

0800a478 <strncmp>:
 800a478:	b510      	push	{r4, lr}
 800a47a:	b16a      	cbz	r2, 800a498 <strncmp+0x20>
 800a47c:	3901      	subs	r1, #1
 800a47e:	1884      	adds	r4, r0, r2
 800a480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a484:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a488:	429a      	cmp	r2, r3
 800a48a:	d103      	bne.n	800a494 <strncmp+0x1c>
 800a48c:	42a0      	cmp	r0, r4
 800a48e:	d001      	beq.n	800a494 <strncmp+0x1c>
 800a490:	2a00      	cmp	r2, #0
 800a492:	d1f5      	bne.n	800a480 <strncmp+0x8>
 800a494:	1ad0      	subs	r0, r2, r3
 800a496:	bd10      	pop	{r4, pc}
 800a498:	4610      	mov	r0, r2
 800a49a:	e7fc      	b.n	800a496 <strncmp+0x1e>

0800a49c <strstr>:
 800a49c:	780a      	ldrb	r2, [r1, #0]
 800a49e:	b570      	push	{r4, r5, r6, lr}
 800a4a0:	b96a      	cbnz	r2, 800a4be <strstr+0x22>
 800a4a2:	bd70      	pop	{r4, r5, r6, pc}
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d109      	bne.n	800a4bc <strstr+0x20>
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0f6      	beq.n	800a4a2 <strstr+0x6>
 800a4b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a4b8:	429e      	cmp	r6, r3
 800a4ba:	d0f7      	beq.n	800a4ac <strstr+0x10>
 800a4bc:	3001      	adds	r0, #1
 800a4be:	7803      	ldrb	r3, [r0, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1ef      	bne.n	800a4a4 <strstr+0x8>
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	e7ec      	b.n	800a4a2 <strstr+0x6>

0800a4c8 <_localeconv_r>:
 800a4c8:	4800      	ldr	r0, [pc, #0]	; (800a4cc <_localeconv_r+0x4>)
 800a4ca:	4770      	bx	lr
 800a4cc:	20000110 	.word	0x20000110

0800a4d0 <_close_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d06      	ldr	r5, [pc, #24]	; (800a4ec <_close_r+0x1c>)
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	602b      	str	r3, [r5, #0]
 800a4dc:	f7f9 f8b7 	bl	800364e <_close>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_close_r+0x1a>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_close_r+0x1a>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20004acc 	.word	0x20004acc

0800a4f0 <_lseek_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d07      	ldr	r5, [pc, #28]	; (800a510 <_lseek_r+0x20>)
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	602a      	str	r2, [r5, #0]
 800a4fe:	461a      	mov	r2, r3
 800a500:	f7f9 f8cc 	bl	800369c <_lseek>
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	d102      	bne.n	800a50e <_lseek_r+0x1e>
 800a508:	682b      	ldr	r3, [r5, #0]
 800a50a:	b103      	cbz	r3, 800a50e <_lseek_r+0x1e>
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	bd38      	pop	{r3, r4, r5, pc}
 800a510:	20004acc 	.word	0x20004acc

0800a514 <_read_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d07      	ldr	r5, [pc, #28]	; (800a534 <_read_r+0x20>)
 800a518:	4604      	mov	r4, r0
 800a51a:	4608      	mov	r0, r1
 800a51c:	4611      	mov	r1, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	602a      	str	r2, [r5, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	f7f9 f85a 	bl	80035dc <_read>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d102      	bne.n	800a532 <_read_r+0x1e>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	b103      	cbz	r3, 800a532 <_read_r+0x1e>
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	20004acc 	.word	0x20004acc

0800a538 <_sbrk_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_sbrk_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7f9 f8b8 	bl	80036b8 <_sbrk>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_sbrk_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_sbrk_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20004acc 	.word	0x20004acc

0800a558 <_write_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d07      	ldr	r5, [pc, #28]	; (800a578 <_write_r+0x20>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f9 f855 	bl	8003616 <_write>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_write_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_write_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	20004acc 	.word	0x20004acc

0800a57c <__errno>:
 800a57c:	4b01      	ldr	r3, [pc, #4]	; (800a584 <__errno+0x8>)
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	200001d8 	.word	0x200001d8

0800a588 <__libc_init_array>:
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	4d0d      	ldr	r5, [pc, #52]	; (800a5c0 <__libc_init_array+0x38>)
 800a58c:	4c0d      	ldr	r4, [pc, #52]	; (800a5c4 <__libc_init_array+0x3c>)
 800a58e:	1b64      	subs	r4, r4, r5
 800a590:	10a4      	asrs	r4, r4, #2
 800a592:	2600      	movs	r6, #0
 800a594:	42a6      	cmp	r6, r4
 800a596:	d109      	bne.n	800a5ac <__libc_init_array+0x24>
 800a598:	4d0b      	ldr	r5, [pc, #44]	; (800a5c8 <__libc_init_array+0x40>)
 800a59a:	4c0c      	ldr	r4, [pc, #48]	; (800a5cc <__libc_init_array+0x44>)
 800a59c:	f003 f8ca 	bl	800d734 <_init>
 800a5a0:	1b64      	subs	r4, r4, r5
 800a5a2:	10a4      	asrs	r4, r4, #2
 800a5a4:	2600      	movs	r6, #0
 800a5a6:	42a6      	cmp	r6, r4
 800a5a8:	d105      	bne.n	800a5b6 <__libc_init_array+0x2e>
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b0:	4798      	blx	r3
 800a5b2:	3601      	adds	r6, #1
 800a5b4:	e7ee      	b.n	800a594 <__libc_init_array+0xc>
 800a5b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ba:	4798      	blx	r3
 800a5bc:	3601      	adds	r6, #1
 800a5be:	e7f2      	b.n	800a5a6 <__libc_init_array+0x1e>
 800a5c0:	0800dd04 	.word	0x0800dd04
 800a5c4:	0800dd04 	.word	0x0800dd04
 800a5c8:	0800dd04 	.word	0x0800dd04
 800a5cc:	0800dd08 	.word	0x0800dd08

0800a5d0 <__retarget_lock_init_recursive>:
 800a5d0:	4770      	bx	lr

0800a5d2 <__retarget_lock_acquire_recursive>:
 800a5d2:	4770      	bx	lr

0800a5d4 <__retarget_lock_release_recursive>:
 800a5d4:	4770      	bx	lr

0800a5d6 <memcpy>:
 800a5d6:	440a      	add	r2, r1
 800a5d8:	4291      	cmp	r1, r2
 800a5da:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5de:	d100      	bne.n	800a5e2 <memcpy+0xc>
 800a5e0:	4770      	bx	lr
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ec:	4291      	cmp	r1, r2
 800a5ee:	d1f9      	bne.n	800a5e4 <memcpy+0xe>
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	0000      	movs	r0, r0
 800a5f4:	0000      	movs	r0, r0
	...

0800a5f8 <nan>:
 800a5f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a600 <nan+0x8>
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	00000000 	.word	0x00000000
 800a604:	7ff80000 	.word	0x7ff80000

0800a608 <nanf>:
 800a608:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a610 <nanf+0x8>
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	7fc00000 	.word	0x7fc00000

0800a614 <quorem>:
 800a614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a618:	6903      	ldr	r3, [r0, #16]
 800a61a:	690c      	ldr	r4, [r1, #16]
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	4607      	mov	r7, r0
 800a620:	db7e      	blt.n	800a720 <quorem+0x10c>
 800a622:	3c01      	subs	r4, #1
 800a624:	f101 0814 	add.w	r8, r1, #20
 800a628:	f100 0514 	add.w	r5, r0, #20
 800a62c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a63a:	3301      	adds	r3, #1
 800a63c:	429a      	cmp	r2, r3
 800a63e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a646:	fbb2 f6f3 	udiv	r6, r2, r3
 800a64a:	d331      	bcc.n	800a6b0 <quorem+0x9c>
 800a64c:	f04f 0e00 	mov.w	lr, #0
 800a650:	4640      	mov	r0, r8
 800a652:	46ac      	mov	ip, r5
 800a654:	46f2      	mov	sl, lr
 800a656:	f850 2b04 	ldr.w	r2, [r0], #4
 800a65a:	b293      	uxth	r3, r2
 800a65c:	fb06 e303 	mla	r3, r6, r3, lr
 800a660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a664:	0c1a      	lsrs	r2, r3, #16
 800a666:	b29b      	uxth	r3, r3
 800a668:	ebaa 0303 	sub.w	r3, sl, r3
 800a66c:	f8dc a000 	ldr.w	sl, [ip]
 800a670:	fa13 f38a 	uxtah	r3, r3, sl
 800a674:	fb06 220e 	mla	r2, r6, lr, r2
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	9b00      	ldr	r3, [sp, #0]
 800a67c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a680:	b292      	uxth	r2, r2
 800a682:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a68a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a68e:	4581      	cmp	r9, r0
 800a690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a694:	f84c 3b04 	str.w	r3, [ip], #4
 800a698:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a69c:	d2db      	bcs.n	800a656 <quorem+0x42>
 800a69e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6a2:	b92b      	cbnz	r3, 800a6b0 <quorem+0x9c>
 800a6a4:	9b01      	ldr	r3, [sp, #4]
 800a6a6:	3b04      	subs	r3, #4
 800a6a8:	429d      	cmp	r5, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	d32c      	bcc.n	800a708 <quorem+0xf4>
 800a6ae:	613c      	str	r4, [r7, #16]
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	f001 fca7 	bl	800c004 <__mcmp>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	db22      	blt.n	800a700 <quorem+0xec>
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	4629      	mov	r1, r5
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6c4:	f8d1 c000 	ldr.w	ip, [r1]
 800a6c8:	b293      	uxth	r3, r2
 800a6ca:	1ac3      	subs	r3, r0, r3
 800a6cc:	0c12      	lsrs	r2, r2, #16
 800a6ce:	fa13 f38c 	uxtah	r3, r3, ip
 800a6d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a6d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e0:	45c1      	cmp	r9, r8
 800a6e2:	f841 3b04 	str.w	r3, [r1], #4
 800a6e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6ea:	d2e9      	bcs.n	800a6c0 <quorem+0xac>
 800a6ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6f4:	b922      	cbnz	r2, 800a700 <quorem+0xec>
 800a6f6:	3b04      	subs	r3, #4
 800a6f8:	429d      	cmp	r5, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	d30a      	bcc.n	800a714 <quorem+0x100>
 800a6fe:	613c      	str	r4, [r7, #16]
 800a700:	4630      	mov	r0, r6
 800a702:	b003      	add	sp, #12
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	3b04      	subs	r3, #4
 800a70c:	2a00      	cmp	r2, #0
 800a70e:	d1ce      	bne.n	800a6ae <quorem+0x9a>
 800a710:	3c01      	subs	r4, #1
 800a712:	e7c9      	b.n	800a6a8 <quorem+0x94>
 800a714:	6812      	ldr	r2, [r2, #0]
 800a716:	3b04      	subs	r3, #4
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d1f0      	bne.n	800a6fe <quorem+0xea>
 800a71c:	3c01      	subs	r4, #1
 800a71e:	e7eb      	b.n	800a6f8 <quorem+0xe4>
 800a720:	2000      	movs	r0, #0
 800a722:	e7ee      	b.n	800a702 <quorem+0xee>
 800a724:	0000      	movs	r0, r0
	...

0800a728 <_dtoa_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	ed2d 8b04 	vpush	{d8-d9}
 800a730:	69c5      	ldr	r5, [r0, #28]
 800a732:	b093      	sub	sp, #76	; 0x4c
 800a734:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a738:	ec57 6b10 	vmov	r6, r7, d0
 800a73c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a740:	9107      	str	r1, [sp, #28]
 800a742:	4604      	mov	r4, r0
 800a744:	920a      	str	r2, [sp, #40]	; 0x28
 800a746:	930d      	str	r3, [sp, #52]	; 0x34
 800a748:	b975      	cbnz	r5, 800a768 <_dtoa_r+0x40>
 800a74a:	2010      	movs	r0, #16
 800a74c:	f7fd ffbe 	bl	80086cc <malloc>
 800a750:	4602      	mov	r2, r0
 800a752:	61e0      	str	r0, [r4, #28]
 800a754:	b920      	cbnz	r0, 800a760 <_dtoa_r+0x38>
 800a756:	4bae      	ldr	r3, [pc, #696]	; (800aa10 <_dtoa_r+0x2e8>)
 800a758:	21ef      	movs	r1, #239	; 0xef
 800a75a:	48ae      	ldr	r0, [pc, #696]	; (800aa14 <_dtoa_r+0x2ec>)
 800a75c:	f002 fc88 	bl	800d070 <__assert_func>
 800a760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a764:	6005      	str	r5, [r0, #0]
 800a766:	60c5      	str	r5, [r0, #12]
 800a768:	69e3      	ldr	r3, [r4, #28]
 800a76a:	6819      	ldr	r1, [r3, #0]
 800a76c:	b151      	cbz	r1, 800a784 <_dtoa_r+0x5c>
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	604a      	str	r2, [r1, #4]
 800a772:	2301      	movs	r3, #1
 800a774:	4093      	lsls	r3, r2
 800a776:	608b      	str	r3, [r1, #8]
 800a778:	4620      	mov	r0, r4
 800a77a:	f001 f9bd 	bl	800baf8 <_Bfree>
 800a77e:	69e3      	ldr	r3, [r4, #28]
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	1e3b      	subs	r3, r7, #0
 800a786:	bfbb      	ittet	lt
 800a788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a78c:	9303      	strlt	r3, [sp, #12]
 800a78e:	2300      	movge	r3, #0
 800a790:	2201      	movlt	r2, #1
 800a792:	bfac      	ite	ge
 800a794:	f8c8 3000 	strge.w	r3, [r8]
 800a798:	f8c8 2000 	strlt.w	r2, [r8]
 800a79c:	4b9e      	ldr	r3, [pc, #632]	; (800aa18 <_dtoa_r+0x2f0>)
 800a79e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7a2:	ea33 0308 	bics.w	r3, r3, r8
 800a7a6:	d11b      	bne.n	800a7e0 <_dtoa_r+0xb8>
 800a7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7b4:	4333      	orrs	r3, r6
 800a7b6:	f000 8593 	beq.w	800b2e0 <_dtoa_r+0xbb8>
 800a7ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7bc:	b963      	cbnz	r3, 800a7d8 <_dtoa_r+0xb0>
 800a7be:	4b97      	ldr	r3, [pc, #604]	; (800aa1c <_dtoa_r+0x2f4>)
 800a7c0:	e027      	b.n	800a812 <_dtoa_r+0xea>
 800a7c2:	4b97      	ldr	r3, [pc, #604]	; (800aa20 <_dtoa_r+0x2f8>)
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	3308      	adds	r3, #8
 800a7c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	9800      	ldr	r0, [sp, #0]
 800a7ce:	b013      	add	sp, #76	; 0x4c
 800a7d0:	ecbd 8b04 	vpop	{d8-d9}
 800a7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d8:	4b90      	ldr	r3, [pc, #576]	; (800aa1c <_dtoa_r+0x2f4>)
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	3303      	adds	r3, #3
 800a7de:	e7f3      	b.n	800a7c8 <_dtoa_r+0xa0>
 800a7e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	ec51 0b17 	vmov	r0, r1, d7
 800a7ea:	eeb0 8a47 	vmov.f32	s16, s14
 800a7ee:	eef0 8a67 	vmov.f32	s17, s15
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f7f6 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f8:	4681      	mov	r9, r0
 800a7fa:	b160      	cbz	r0, 800a816 <_dtoa_r+0xee>
 800a7fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7fe:	2301      	movs	r3, #1
 800a800:	6013      	str	r3, [r2, #0]
 800a802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8568 	beq.w	800b2da <_dtoa_r+0xbb2>
 800a80a:	4b86      	ldr	r3, [pc, #536]	; (800aa24 <_dtoa_r+0x2fc>)
 800a80c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	3b01      	subs	r3, #1
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	e7da      	b.n	800a7cc <_dtoa_r+0xa4>
 800a816:	aa10      	add	r2, sp, #64	; 0x40
 800a818:	a911      	add	r1, sp, #68	; 0x44
 800a81a:	4620      	mov	r0, r4
 800a81c:	eeb0 0a48 	vmov.f32	s0, s16
 800a820:	eef0 0a68 	vmov.f32	s1, s17
 800a824:	f001 fd04 	bl	800c230 <__d2b>
 800a828:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a82c:	4682      	mov	sl, r0
 800a82e:	2d00      	cmp	r5, #0
 800a830:	d07f      	beq.n	800a932 <_dtoa_r+0x20a>
 800a832:	ee18 3a90 	vmov	r3, s17
 800a836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a83a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a83e:	ec51 0b18 	vmov	r0, r1, d8
 800a842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a84a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a84e:	4619      	mov	r1, r3
 800a850:	2200      	movs	r2, #0
 800a852:	4b75      	ldr	r3, [pc, #468]	; (800aa28 <_dtoa_r+0x300>)
 800a854:	f7f5 fd18 	bl	8000288 <__aeabi_dsub>
 800a858:	a367      	add	r3, pc, #412	; (adr r3, 800a9f8 <_dtoa_r+0x2d0>)
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 fecb 	bl	80005f8 <__aeabi_dmul>
 800a862:	a367      	add	r3, pc, #412	; (adr r3, 800aa00 <_dtoa_r+0x2d8>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fd10 	bl	800028c <__adddf3>
 800a86c:	4606      	mov	r6, r0
 800a86e:	4628      	mov	r0, r5
 800a870:	460f      	mov	r7, r1
 800a872:	f7f5 fe57 	bl	8000524 <__aeabi_i2d>
 800a876:	a364      	add	r3, pc, #400	; (adr r3, 800aa08 <_dtoa_r+0x2e0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 febc 	bl	80005f8 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4630      	mov	r0, r6
 800a886:	4639      	mov	r1, r7
 800a888:	f7f5 fd00 	bl	800028c <__adddf3>
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f7f6 f962 	bl	8000b58 <__aeabi_d2iz>
 800a894:	2200      	movs	r2, #0
 800a896:	4683      	mov	fp, r0
 800a898:	2300      	movs	r3, #0
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f6 f91d 	bl	8000adc <__aeabi_dcmplt>
 800a8a2:	b148      	cbz	r0, 800a8b8 <_dtoa_r+0x190>
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	f7f5 fe3d 	bl	8000524 <__aeabi_i2d>
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	463b      	mov	r3, r7
 800a8ae:	f7f6 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8b2:	b908      	cbnz	r0, 800a8b8 <_dtoa_r+0x190>
 800a8b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8b8:	f1bb 0f16 	cmp.w	fp, #22
 800a8bc:	d857      	bhi.n	800a96e <_dtoa_r+0x246>
 800a8be:	4b5b      	ldr	r3, [pc, #364]	; (800aa2c <_dtoa_r+0x304>)
 800a8c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	ec51 0b18 	vmov	r0, r1, d8
 800a8cc:	f7f6 f906 	bl	8000adc <__aeabi_dcmplt>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d04e      	beq.n	800a972 <_dtoa_r+0x24a>
 800a8d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8d8:	2300      	movs	r3, #0
 800a8da:	930c      	str	r3, [sp, #48]	; 0x30
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	1b5b      	subs	r3, r3, r5
 800a8e0:	1e5a      	subs	r2, r3, #1
 800a8e2:	bf45      	ittet	mi
 800a8e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8e8:	9305      	strmi	r3, [sp, #20]
 800a8ea:	2300      	movpl	r3, #0
 800a8ec:	2300      	movmi	r3, #0
 800a8ee:	9206      	str	r2, [sp, #24]
 800a8f0:	bf54      	ite	pl
 800a8f2:	9305      	strpl	r3, [sp, #20]
 800a8f4:	9306      	strmi	r3, [sp, #24]
 800a8f6:	f1bb 0f00 	cmp.w	fp, #0
 800a8fa:	db3c      	blt.n	800a976 <_dtoa_r+0x24e>
 800a8fc:	9b06      	ldr	r3, [sp, #24]
 800a8fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a902:	445b      	add	r3, fp
 800a904:	9306      	str	r3, [sp, #24]
 800a906:	2300      	movs	r3, #0
 800a908:	9308      	str	r3, [sp, #32]
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d868      	bhi.n	800a9e2 <_dtoa_r+0x2ba>
 800a910:	2b05      	cmp	r3, #5
 800a912:	bfc4      	itt	gt
 800a914:	3b04      	subgt	r3, #4
 800a916:	9307      	strgt	r3, [sp, #28]
 800a918:	9b07      	ldr	r3, [sp, #28]
 800a91a:	f1a3 0302 	sub.w	r3, r3, #2
 800a91e:	bfcc      	ite	gt
 800a920:	2500      	movgt	r5, #0
 800a922:	2501      	movle	r5, #1
 800a924:	2b03      	cmp	r3, #3
 800a926:	f200 8085 	bhi.w	800aa34 <_dtoa_r+0x30c>
 800a92a:	e8df f003 	tbb	[pc, r3]
 800a92e:	3b2e      	.short	0x3b2e
 800a930:	5839      	.short	0x5839
 800a932:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a936:	441d      	add	r5, r3
 800a938:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	bfc1      	itttt	gt
 800a940:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a944:	fa08 f803 	lslgt.w	r8, r8, r3
 800a948:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a94c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a950:	bfd6      	itet	le
 800a952:	f1c3 0320 	rsble	r3, r3, #32
 800a956:	ea48 0003 	orrgt.w	r0, r8, r3
 800a95a:	fa06 f003 	lslle.w	r0, r6, r3
 800a95e:	f7f5 fdd1 	bl	8000504 <__aeabi_ui2d>
 800a962:	2201      	movs	r2, #1
 800a964:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a968:	3d01      	subs	r5, #1
 800a96a:	920e      	str	r2, [sp, #56]	; 0x38
 800a96c:	e76f      	b.n	800a84e <_dtoa_r+0x126>
 800a96e:	2301      	movs	r3, #1
 800a970:	e7b3      	b.n	800a8da <_dtoa_r+0x1b2>
 800a972:	900c      	str	r0, [sp, #48]	; 0x30
 800a974:	e7b2      	b.n	800a8dc <_dtoa_r+0x1b4>
 800a976:	9b05      	ldr	r3, [sp, #20]
 800a978:	eba3 030b 	sub.w	r3, r3, fp
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	f1cb 0300 	rsb	r3, fp, #0
 800a982:	9308      	str	r3, [sp, #32]
 800a984:	2300      	movs	r3, #0
 800a986:	930b      	str	r3, [sp, #44]	; 0x2c
 800a988:	e7bf      	b.n	800a90a <_dtoa_r+0x1e2>
 800a98a:	2300      	movs	r3, #0
 800a98c:	9309      	str	r3, [sp, #36]	; 0x24
 800a98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a990:	2b00      	cmp	r3, #0
 800a992:	dc52      	bgt.n	800aa3a <_dtoa_r+0x312>
 800a994:	2301      	movs	r3, #1
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	461a      	mov	r2, r3
 800a99c:	920a      	str	r2, [sp, #40]	; 0x28
 800a99e:	e00b      	b.n	800a9b8 <_dtoa_r+0x290>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7f3      	b.n	800a98c <_dtoa_r+0x264>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9aa:	445b      	add	r3, fp
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	bfb8      	it	lt
 800a9b6:	2301      	movlt	r3, #1
 800a9b8:	69e0      	ldr	r0, [r4, #28]
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	2204      	movs	r2, #4
 800a9be:	f102 0614 	add.w	r6, r2, #20
 800a9c2:	429e      	cmp	r6, r3
 800a9c4:	d93d      	bls.n	800aa42 <_dtoa_r+0x31a>
 800a9c6:	6041      	str	r1, [r0, #4]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f001 f855 	bl	800ba78 <_Balloc>
 800a9ce:	9000      	str	r0, [sp, #0]
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d139      	bne.n	800aa48 <_dtoa_r+0x320>
 800a9d4:	4b16      	ldr	r3, [pc, #88]	; (800aa30 <_dtoa_r+0x308>)
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	f240 11af 	movw	r1, #431	; 0x1af
 800a9dc:	e6bd      	b.n	800a75a <_dtoa_r+0x32>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7e1      	b.n	800a9a6 <_dtoa_r+0x27e>
 800a9e2:	2501      	movs	r5, #1
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	9509      	str	r5, [sp, #36]	; 0x24
 800a9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2312      	movs	r3, #18
 800a9f6:	e7d1      	b.n	800a99c <_dtoa_r+0x274>
 800a9f8:	636f4361 	.word	0x636f4361
 800a9fc:	3fd287a7 	.word	0x3fd287a7
 800aa00:	8b60c8b3 	.word	0x8b60c8b3
 800aa04:	3fc68a28 	.word	0x3fc68a28
 800aa08:	509f79fb 	.word	0x509f79fb
 800aa0c:	3fd34413 	.word	0x3fd34413
 800aa10:	0800da5d 	.word	0x0800da5d
 800aa14:	0800da74 	.word	0x0800da74
 800aa18:	7ff00000 	.word	0x7ff00000
 800aa1c:	0800da59 	.word	0x0800da59
 800aa20:	0800da50 	.word	0x0800da50
 800aa24:	0800dcbc 	.word	0x0800dcbc
 800aa28:	3ff80000 	.word	0x3ff80000
 800aa2c:	0800dbc0 	.word	0x0800dbc0
 800aa30:	0800dacc 	.word	0x0800dacc
 800aa34:	2301      	movs	r3, #1
 800aa36:	9309      	str	r3, [sp, #36]	; 0x24
 800aa38:	e7d7      	b.n	800a9ea <_dtoa_r+0x2c2>
 800aa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	9304      	str	r3, [sp, #16]
 800aa40:	e7ba      	b.n	800a9b8 <_dtoa_r+0x290>
 800aa42:	3101      	adds	r1, #1
 800aa44:	0052      	lsls	r2, r2, #1
 800aa46:	e7ba      	b.n	800a9be <_dtoa_r+0x296>
 800aa48:	69e3      	ldr	r3, [r4, #28]
 800aa4a:	9a00      	ldr	r2, [sp, #0]
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	9b04      	ldr	r3, [sp, #16]
 800aa50:	2b0e      	cmp	r3, #14
 800aa52:	f200 80a8 	bhi.w	800aba6 <_dtoa_r+0x47e>
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	f000 80a5 	beq.w	800aba6 <_dtoa_r+0x47e>
 800aa5c:	f1bb 0f00 	cmp.w	fp, #0
 800aa60:	dd38      	ble.n	800aad4 <_dtoa_r+0x3ac>
 800aa62:	4bc0      	ldr	r3, [pc, #768]	; (800ad64 <_dtoa_r+0x63c>)
 800aa64:	f00b 020f 	and.w	r2, fp, #15
 800aa68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa70:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa74:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa78:	d019      	beq.n	800aaae <_dtoa_r+0x386>
 800aa7a:	4bbb      	ldr	r3, [pc, #748]	; (800ad68 <_dtoa_r+0x640>)
 800aa7c:	ec51 0b18 	vmov	r0, r1, d8
 800aa80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa84:	f7f5 fee2 	bl	800084c <__aeabi_ddiv>
 800aa88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa8c:	f008 080f 	and.w	r8, r8, #15
 800aa90:	2503      	movs	r5, #3
 800aa92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad68 <_dtoa_r+0x640>
 800aa96:	f1b8 0f00 	cmp.w	r8, #0
 800aa9a:	d10a      	bne.n	800aab2 <_dtoa_r+0x38a>
 800aa9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	f7f5 fed2 	bl	800084c <__aeabi_ddiv>
 800aaa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaac:	e02b      	b.n	800ab06 <_dtoa_r+0x3de>
 800aaae:	2502      	movs	r5, #2
 800aab0:	e7ef      	b.n	800aa92 <_dtoa_r+0x36a>
 800aab2:	f018 0f01 	tst.w	r8, #1
 800aab6:	d008      	beq.n	800aaca <_dtoa_r+0x3a2>
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aac0:	f7f5 fd9a 	bl	80005f8 <__aeabi_dmul>
 800aac4:	3501      	adds	r5, #1
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aace:	f109 0908 	add.w	r9, r9, #8
 800aad2:	e7e0      	b.n	800aa96 <_dtoa_r+0x36e>
 800aad4:	f000 809f 	beq.w	800ac16 <_dtoa_r+0x4ee>
 800aad8:	f1cb 0600 	rsb	r6, fp, #0
 800aadc:	4ba1      	ldr	r3, [pc, #644]	; (800ad64 <_dtoa_r+0x63c>)
 800aade:	4fa2      	ldr	r7, [pc, #648]	; (800ad68 <_dtoa_r+0x640>)
 800aae0:	f006 020f 	and.w	r2, r6, #15
 800aae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	ec51 0b18 	vmov	r0, r1, d8
 800aaf0:	f7f5 fd82 	bl	80005f8 <__aeabi_dmul>
 800aaf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf8:	1136      	asrs	r6, r6, #4
 800aafa:	2300      	movs	r3, #0
 800aafc:	2502      	movs	r5, #2
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	d17e      	bne.n	800ac00 <_dtoa_r+0x4d8>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1d0      	bne.n	800aaa8 <_dtoa_r+0x380>
 800ab06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8084 	beq.w	800ac1a <_dtoa_r+0x4f2>
 800ab12:	4b96      	ldr	r3, [pc, #600]	; (800ad6c <_dtoa_r+0x644>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	4640      	mov	r0, r8
 800ab18:	4649      	mov	r1, r9
 800ab1a:	f7f5 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d07b      	beq.n	800ac1a <_dtoa_r+0x4f2>
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d078      	beq.n	800ac1a <_dtoa_r+0x4f2>
 800ab28:	9b01      	ldr	r3, [sp, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dd39      	ble.n	800aba2 <_dtoa_r+0x47a>
 800ab2e:	4b90      	ldr	r3, [pc, #576]	; (800ad70 <_dtoa_r+0x648>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 fd5f 	bl	80005f8 <__aeabi_dmul>
 800ab3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab3e:	9e01      	ldr	r6, [sp, #4]
 800ab40:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab44:	3501      	adds	r5, #1
 800ab46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f7f5 fcea 	bl	8000524 <__aeabi_i2d>
 800ab50:	4642      	mov	r2, r8
 800ab52:	464b      	mov	r3, r9
 800ab54:	f7f5 fd50 	bl	80005f8 <__aeabi_dmul>
 800ab58:	4b86      	ldr	r3, [pc, #536]	; (800ad74 <_dtoa_r+0x64c>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f7f5 fb96 	bl	800028c <__adddf3>
 800ab60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	2e00      	cmp	r6, #0
 800ab6c:	d158      	bne.n	800ac20 <_dtoa_r+0x4f8>
 800ab6e:	4b82      	ldr	r3, [pc, #520]	; (800ad78 <_dtoa_r+0x650>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	4640      	mov	r0, r8
 800ab74:	4649      	mov	r1, r9
 800ab76:	f7f5 fb87 	bl	8000288 <__aeabi_dsub>
 800ab7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab7e:	4680      	mov	r8, r0
 800ab80:	4689      	mov	r9, r1
 800ab82:	f7f5 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f040 8296 	bne.w	800b0b8 <_dtoa_r+0x990>
 800ab8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab90:	4640      	mov	r0, r8
 800ab92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 ffa0 	bl	8000adc <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f040 8289 	bne.w	800b0b4 <_dtoa_r+0x98c>
 800aba2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f2c0 814e 	blt.w	800ae4a <_dtoa_r+0x722>
 800abae:	f1bb 0f0e 	cmp.w	fp, #14
 800abb2:	f300 814a 	bgt.w	800ae4a <_dtoa_r+0x722>
 800abb6:	4b6b      	ldr	r3, [pc, #428]	; (800ad64 <_dtoa_r+0x63c>)
 800abb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f280 80dc 	bge.w	800ad80 <_dtoa_r+0x658>
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f300 80d8 	bgt.w	800ad80 <_dtoa_r+0x658>
 800abd0:	f040 826f 	bne.w	800b0b2 <_dtoa_r+0x98a>
 800abd4:	4b68      	ldr	r3, [pc, #416]	; (800ad78 <_dtoa_r+0x650>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abe4:	f7f5 ff8e 	bl	8000b04 <__aeabi_dcmpge>
 800abe8:	9e04      	ldr	r6, [sp, #16]
 800abea:	4637      	mov	r7, r6
 800abec:	2800      	cmp	r0, #0
 800abee:	f040 8245 	bne.w	800b07c <_dtoa_r+0x954>
 800abf2:	9d00      	ldr	r5, [sp, #0]
 800abf4:	2331      	movs	r3, #49	; 0x31
 800abf6:	f805 3b01 	strb.w	r3, [r5], #1
 800abfa:	f10b 0b01 	add.w	fp, fp, #1
 800abfe:	e241      	b.n	800b084 <_dtoa_r+0x95c>
 800ac00:	07f2      	lsls	r2, r6, #31
 800ac02:	d505      	bpl.n	800ac10 <_dtoa_r+0x4e8>
 800ac04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac08:	f7f5 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	2301      	movs	r3, #1
 800ac10:	1076      	asrs	r6, r6, #1
 800ac12:	3708      	adds	r7, #8
 800ac14:	e773      	b.n	800aafe <_dtoa_r+0x3d6>
 800ac16:	2502      	movs	r5, #2
 800ac18:	e775      	b.n	800ab06 <_dtoa_r+0x3de>
 800ac1a:	9e04      	ldr	r6, [sp, #16]
 800ac1c:	465f      	mov	r7, fp
 800ac1e:	e792      	b.n	800ab46 <_dtoa_r+0x41e>
 800ac20:	9900      	ldr	r1, [sp, #0]
 800ac22:	4b50      	ldr	r3, [pc, #320]	; (800ad64 <_dtoa_r+0x63c>)
 800ac24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac28:	4431      	add	r1, r6
 800ac2a:	9102      	str	r1, [sp, #8]
 800ac2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac2e:	eeb0 9a47 	vmov.f32	s18, s14
 800ac32:	eef0 9a67 	vmov.f32	s19, s15
 800ac36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d044      	beq.n	800accc <_dtoa_r+0x5a4>
 800ac42:	494e      	ldr	r1, [pc, #312]	; (800ad7c <_dtoa_r+0x654>)
 800ac44:	2000      	movs	r0, #0
 800ac46:	f7f5 fe01 	bl	800084c <__aeabi_ddiv>
 800ac4a:	ec53 2b19 	vmov	r2, r3, d9
 800ac4e:	f7f5 fb1b 	bl	8000288 <__aeabi_dsub>
 800ac52:	9d00      	ldr	r5, [sp, #0]
 800ac54:	ec41 0b19 	vmov	d9, r0, r1
 800ac58:	4649      	mov	r1, r9
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	f7f5 ff7c 	bl	8000b58 <__aeabi_d2iz>
 800ac60:	4606      	mov	r6, r0
 800ac62:	f7f5 fc5f 	bl	8000524 <__aeabi_i2d>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fb0b 	bl	8000288 <__aeabi_dsub>
 800ac72:	3630      	adds	r6, #48	; 0x30
 800ac74:	f805 6b01 	strb.w	r6, [r5], #1
 800ac78:	ec53 2b19 	vmov	r2, r3, d9
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	4689      	mov	r9, r1
 800ac80:	f7f5 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d164      	bne.n	800ad52 <_dtoa_r+0x62a>
 800ac88:	4642      	mov	r2, r8
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	4937      	ldr	r1, [pc, #220]	; (800ad6c <_dtoa_r+0x644>)
 800ac8e:	2000      	movs	r0, #0
 800ac90:	f7f5 fafa 	bl	8000288 <__aeabi_dsub>
 800ac94:	ec53 2b19 	vmov	r2, r3, d9
 800ac98:	f7f5 ff20 	bl	8000adc <__aeabi_dcmplt>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f040 80b6 	bne.w	800ae0e <_dtoa_r+0x6e6>
 800aca2:	9b02      	ldr	r3, [sp, #8]
 800aca4:	429d      	cmp	r5, r3
 800aca6:	f43f af7c 	beq.w	800aba2 <_dtoa_r+0x47a>
 800acaa:	4b31      	ldr	r3, [pc, #196]	; (800ad70 <_dtoa_r+0x648>)
 800acac:	ec51 0b19 	vmov	r0, r1, d9
 800acb0:	2200      	movs	r2, #0
 800acb2:	f7f5 fca1 	bl	80005f8 <__aeabi_dmul>
 800acb6:	4b2e      	ldr	r3, [pc, #184]	; (800ad70 <_dtoa_r+0x648>)
 800acb8:	ec41 0b19 	vmov	d9, r0, r1
 800acbc:	2200      	movs	r2, #0
 800acbe:	4640      	mov	r0, r8
 800acc0:	4649      	mov	r1, r9
 800acc2:	f7f5 fc99 	bl	80005f8 <__aeabi_dmul>
 800acc6:	4680      	mov	r8, r0
 800acc8:	4689      	mov	r9, r1
 800acca:	e7c5      	b.n	800ac58 <_dtoa_r+0x530>
 800accc:	ec51 0b17 	vmov	r0, r1, d7
 800acd0:	f7f5 fc92 	bl	80005f8 <__aeabi_dmul>
 800acd4:	9b02      	ldr	r3, [sp, #8]
 800acd6:	9d00      	ldr	r5, [sp, #0]
 800acd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acda:	ec41 0b19 	vmov	d9, r0, r1
 800acde:	4649      	mov	r1, r9
 800ace0:	4640      	mov	r0, r8
 800ace2:	f7f5 ff39 	bl	8000b58 <__aeabi_d2iz>
 800ace6:	4606      	mov	r6, r0
 800ace8:	f7f5 fc1c 	bl	8000524 <__aeabi_i2d>
 800acec:	3630      	adds	r6, #48	; 0x30
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 fac7 	bl	8000288 <__aeabi_dsub>
 800acfa:	f805 6b01 	strb.w	r6, [r5], #1
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	429d      	cmp	r5, r3
 800ad02:	4680      	mov	r8, r0
 800ad04:	4689      	mov	r9, r1
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	d124      	bne.n	800ad56 <_dtoa_r+0x62e>
 800ad0c:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <_dtoa_r+0x654>)
 800ad0e:	ec51 0b19 	vmov	r0, r1, d9
 800ad12:	f7f5 fabb 	bl	800028c <__adddf3>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f7f5 fefb 	bl	8000b18 <__aeabi_dcmpgt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d173      	bne.n	800ae0e <_dtoa_r+0x6e6>
 800ad26:	ec53 2b19 	vmov	r2, r3, d9
 800ad2a:	4914      	ldr	r1, [pc, #80]	; (800ad7c <_dtoa_r+0x654>)
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	f7f5 faab 	bl	8000288 <__aeabi_dsub>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4640      	mov	r0, r8
 800ad38:	4649      	mov	r1, r9
 800ad3a:	f7f5 fecf 	bl	8000adc <__aeabi_dcmplt>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	f43f af2f 	beq.w	800aba2 <_dtoa_r+0x47a>
 800ad44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad46:	1e6b      	subs	r3, r5, #1
 800ad48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad4e:	2b30      	cmp	r3, #48	; 0x30
 800ad50:	d0f8      	beq.n	800ad44 <_dtoa_r+0x61c>
 800ad52:	46bb      	mov	fp, r7
 800ad54:	e04a      	b.n	800adec <_dtoa_r+0x6c4>
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <_dtoa_r+0x648>)
 800ad58:	f7f5 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	4689      	mov	r9, r1
 800ad60:	e7bd      	b.n	800acde <_dtoa_r+0x5b6>
 800ad62:	bf00      	nop
 800ad64:	0800dbc0 	.word	0x0800dbc0
 800ad68:	0800db98 	.word	0x0800db98
 800ad6c:	3ff00000 	.word	0x3ff00000
 800ad70:	40240000 	.word	0x40240000
 800ad74:	401c0000 	.word	0x401c0000
 800ad78:	40140000 	.word	0x40140000
 800ad7c:	3fe00000 	.word	0x3fe00000
 800ad80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad84:	9d00      	ldr	r5, [sp, #0]
 800ad86:	4642      	mov	r2, r8
 800ad88:	464b      	mov	r3, r9
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fd5d 	bl	800084c <__aeabi_ddiv>
 800ad92:	f7f5 fee1 	bl	8000b58 <__aeabi_d2iz>
 800ad96:	9001      	str	r0, [sp, #4]
 800ad98:	f7f5 fbc4 	bl	8000524 <__aeabi_i2d>
 800ad9c:	4642      	mov	r2, r8
 800ad9e:	464b      	mov	r3, r9
 800ada0:	f7f5 fc2a 	bl	80005f8 <__aeabi_dmul>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fa6c 	bl	8000288 <__aeabi_dsub>
 800adb0:	9e01      	ldr	r6, [sp, #4]
 800adb2:	9f04      	ldr	r7, [sp, #16]
 800adb4:	3630      	adds	r6, #48	; 0x30
 800adb6:	f805 6b01 	strb.w	r6, [r5], #1
 800adba:	9e00      	ldr	r6, [sp, #0]
 800adbc:	1bae      	subs	r6, r5, r6
 800adbe:	42b7      	cmp	r7, r6
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	d134      	bne.n	800ae30 <_dtoa_r+0x708>
 800adc6:	f7f5 fa61 	bl	800028c <__adddf3>
 800adca:	4642      	mov	r2, r8
 800adcc:	464b      	mov	r3, r9
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	f7f5 fea1 	bl	8000b18 <__aeabi_dcmpgt>
 800add6:	b9c8      	cbnz	r0, 800ae0c <_dtoa_r+0x6e4>
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800ade4:	b110      	cbz	r0, 800adec <_dtoa_r+0x6c4>
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	07db      	lsls	r3, r3, #31
 800adea:	d40f      	bmi.n	800ae0c <_dtoa_r+0x6e4>
 800adec:	4651      	mov	r1, sl
 800adee:	4620      	mov	r0, r4
 800adf0:	f000 fe82 	bl	800baf8 <_Bfree>
 800adf4:	2300      	movs	r3, #0
 800adf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adf8:	702b      	strb	r3, [r5, #0]
 800adfa:	f10b 0301 	add.w	r3, fp, #1
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f43f ace2 	beq.w	800a7cc <_dtoa_r+0xa4>
 800ae08:	601d      	str	r5, [r3, #0]
 800ae0a:	e4df      	b.n	800a7cc <_dtoa_r+0xa4>
 800ae0c:	465f      	mov	r7, fp
 800ae0e:	462b      	mov	r3, r5
 800ae10:	461d      	mov	r5, r3
 800ae12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae16:	2a39      	cmp	r2, #57	; 0x39
 800ae18:	d106      	bne.n	800ae28 <_dtoa_r+0x700>
 800ae1a:	9a00      	ldr	r2, [sp, #0]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d1f7      	bne.n	800ae10 <_dtoa_r+0x6e8>
 800ae20:	9900      	ldr	r1, [sp, #0]
 800ae22:	2230      	movs	r2, #48	; 0x30
 800ae24:	3701      	adds	r7, #1
 800ae26:	700a      	strb	r2, [r1, #0]
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	3201      	adds	r2, #1
 800ae2c:	701a      	strb	r2, [r3, #0]
 800ae2e:	e790      	b.n	800ad52 <_dtoa_r+0x62a>
 800ae30:	4ba3      	ldr	r3, [pc, #652]	; (800b0c0 <_dtoa_r+0x998>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	f7f5 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	460f      	mov	r7, r1
 800ae40:	f7f5 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d09e      	beq.n	800ad86 <_dtoa_r+0x65e>
 800ae48:	e7d0      	b.n	800adec <_dtoa_r+0x6c4>
 800ae4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	f000 80ca 	beq.w	800afe6 <_dtoa_r+0x8be>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	2a01      	cmp	r2, #1
 800ae56:	f300 80ad 	bgt.w	800afb4 <_dtoa_r+0x88c>
 800ae5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae5c:	2a00      	cmp	r2, #0
 800ae5e:	f000 80a5 	beq.w	800afac <_dtoa_r+0x884>
 800ae62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae66:	9e08      	ldr	r6, [sp, #32]
 800ae68:	9d05      	ldr	r5, [sp, #20]
 800ae6a:	9a05      	ldr	r2, [sp, #20]
 800ae6c:	441a      	add	r2, r3
 800ae6e:	9205      	str	r2, [sp, #20]
 800ae70:	9a06      	ldr	r2, [sp, #24]
 800ae72:	2101      	movs	r1, #1
 800ae74:	441a      	add	r2, r3
 800ae76:	4620      	mov	r0, r4
 800ae78:	9206      	str	r2, [sp, #24]
 800ae7a:	f000 ff3d 	bl	800bcf8 <__i2b>
 800ae7e:	4607      	mov	r7, r0
 800ae80:	b165      	cbz	r5, 800ae9c <_dtoa_r+0x774>
 800ae82:	9b06      	ldr	r3, [sp, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd09      	ble.n	800ae9c <_dtoa_r+0x774>
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	9a05      	ldr	r2, [sp, #20]
 800ae8c:	bfa8      	it	ge
 800ae8e:	462b      	movge	r3, r5
 800ae90:	1ad2      	subs	r2, r2, r3
 800ae92:	9205      	str	r2, [sp, #20]
 800ae94:	9a06      	ldr	r2, [sp, #24]
 800ae96:	1aed      	subs	r5, r5, r3
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	9306      	str	r3, [sp, #24]
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	b1f3      	cbz	r3, 800aede <_dtoa_r+0x7b6>
 800aea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 80a3 	beq.w	800afee <_dtoa_r+0x8c6>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	dd10      	ble.n	800aece <_dtoa_r+0x7a6>
 800aeac:	4639      	mov	r1, r7
 800aeae:	4632      	mov	r2, r6
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 ffe1 	bl	800be78 <__pow5mult>
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	4601      	mov	r1, r0
 800aeba:	4607      	mov	r7, r0
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 ff31 	bl	800bd24 <__multiply>
 800aec2:	4651      	mov	r1, sl
 800aec4:	4680      	mov	r8, r0
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fe16 	bl	800baf8 <_Bfree>
 800aecc:	46c2      	mov	sl, r8
 800aece:	9b08      	ldr	r3, [sp, #32]
 800aed0:	1b9a      	subs	r2, r3, r6
 800aed2:	d004      	beq.n	800aede <_dtoa_r+0x7b6>
 800aed4:	4651      	mov	r1, sl
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 ffce 	bl	800be78 <__pow5mult>
 800aedc:	4682      	mov	sl, r0
 800aede:	2101      	movs	r1, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 ff09 	bl	800bcf8 <__i2b>
 800aee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	4606      	mov	r6, r0
 800aeec:	f340 8081 	ble.w	800aff2 <_dtoa_r+0x8ca>
 800aef0:	461a      	mov	r2, r3
 800aef2:	4601      	mov	r1, r0
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 ffbf 	bl	800be78 <__pow5mult>
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	4606      	mov	r6, r0
 800af00:	dd7a      	ble.n	800aff8 <_dtoa_r+0x8d0>
 800af02:	f04f 0800 	mov.w	r8, #0
 800af06:	6933      	ldr	r3, [r6, #16]
 800af08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af0c:	6918      	ldr	r0, [r3, #16]
 800af0e:	f000 fea5 	bl	800bc5c <__hi0bits>
 800af12:	f1c0 0020 	rsb	r0, r0, #32
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	4418      	add	r0, r3
 800af1a:	f010 001f 	ands.w	r0, r0, #31
 800af1e:	f000 8094 	beq.w	800b04a <_dtoa_r+0x922>
 800af22:	f1c0 0320 	rsb	r3, r0, #32
 800af26:	2b04      	cmp	r3, #4
 800af28:	f340 8085 	ble.w	800b036 <_dtoa_r+0x90e>
 800af2c:	9b05      	ldr	r3, [sp, #20]
 800af2e:	f1c0 001c 	rsb	r0, r0, #28
 800af32:	4403      	add	r3, r0
 800af34:	9305      	str	r3, [sp, #20]
 800af36:	9b06      	ldr	r3, [sp, #24]
 800af38:	4403      	add	r3, r0
 800af3a:	4405      	add	r5, r0
 800af3c:	9306      	str	r3, [sp, #24]
 800af3e:	9b05      	ldr	r3, [sp, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	dd05      	ble.n	800af50 <_dtoa_r+0x828>
 800af44:	4651      	mov	r1, sl
 800af46:	461a      	mov	r2, r3
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 ffef 	bl	800bf2c <__lshift>
 800af4e:	4682      	mov	sl, r0
 800af50:	9b06      	ldr	r3, [sp, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	dd05      	ble.n	800af62 <_dtoa_r+0x83a>
 800af56:	4631      	mov	r1, r6
 800af58:	461a      	mov	r2, r3
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 ffe6 	bl	800bf2c <__lshift>
 800af60:	4606      	mov	r6, r0
 800af62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af64:	2b00      	cmp	r3, #0
 800af66:	d072      	beq.n	800b04e <_dtoa_r+0x926>
 800af68:	4631      	mov	r1, r6
 800af6a:	4650      	mov	r0, sl
 800af6c:	f001 f84a 	bl	800c004 <__mcmp>
 800af70:	2800      	cmp	r0, #0
 800af72:	da6c      	bge.n	800b04e <_dtoa_r+0x926>
 800af74:	2300      	movs	r3, #0
 800af76:	4651      	mov	r1, sl
 800af78:	220a      	movs	r2, #10
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fdde 	bl	800bb3c <__multadd>
 800af80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af86:	4682      	mov	sl, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 81b0 	beq.w	800b2ee <_dtoa_r+0xbc6>
 800af8e:	2300      	movs	r3, #0
 800af90:	4639      	mov	r1, r7
 800af92:	220a      	movs	r2, #10
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fdd1 	bl	800bb3c <__multadd>
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	4607      	mov	r7, r0
 800afa0:	f300 8096 	bgt.w	800b0d0 <_dtoa_r+0x9a8>
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	dc59      	bgt.n	800b05e <_dtoa_r+0x936>
 800afaa:	e091      	b.n	800b0d0 <_dtoa_r+0x9a8>
 800afac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afb2:	e758      	b.n	800ae66 <_dtoa_r+0x73e>
 800afb4:	9b04      	ldr	r3, [sp, #16]
 800afb6:	1e5e      	subs	r6, r3, #1
 800afb8:	9b08      	ldr	r3, [sp, #32]
 800afba:	42b3      	cmp	r3, r6
 800afbc:	bfbf      	itttt	lt
 800afbe:	9b08      	ldrlt	r3, [sp, #32]
 800afc0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800afc2:	9608      	strlt	r6, [sp, #32]
 800afc4:	1af3      	sublt	r3, r6, r3
 800afc6:	bfb4      	ite	lt
 800afc8:	18d2      	addlt	r2, r2, r3
 800afca:	1b9e      	subge	r6, r3, r6
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	bfbc      	itt	lt
 800afd0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800afd2:	2600      	movlt	r6, #0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	bfb7      	itett	lt
 800afd8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800afdc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800afe0:	1a9d      	sublt	r5, r3, r2
 800afe2:	2300      	movlt	r3, #0
 800afe4:	e741      	b.n	800ae6a <_dtoa_r+0x742>
 800afe6:	9e08      	ldr	r6, [sp, #32]
 800afe8:	9d05      	ldr	r5, [sp, #20]
 800afea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afec:	e748      	b.n	800ae80 <_dtoa_r+0x758>
 800afee:	9a08      	ldr	r2, [sp, #32]
 800aff0:	e770      	b.n	800aed4 <_dtoa_r+0x7ac>
 800aff2:	9b07      	ldr	r3, [sp, #28]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	dc19      	bgt.n	800b02c <_dtoa_r+0x904>
 800aff8:	9b02      	ldr	r3, [sp, #8]
 800affa:	b9bb      	cbnz	r3, 800b02c <_dtoa_r+0x904>
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b002:	b99b      	cbnz	r3, 800b02c <_dtoa_r+0x904>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b00a:	0d1b      	lsrs	r3, r3, #20
 800b00c:	051b      	lsls	r3, r3, #20
 800b00e:	b183      	cbz	r3, 800b032 <_dtoa_r+0x90a>
 800b010:	9b05      	ldr	r3, [sp, #20]
 800b012:	3301      	adds	r3, #1
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	9b06      	ldr	r3, [sp, #24]
 800b018:	3301      	adds	r3, #1
 800b01a:	9306      	str	r3, [sp, #24]
 800b01c:	f04f 0801 	mov.w	r8, #1
 800b020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b022:	2b00      	cmp	r3, #0
 800b024:	f47f af6f 	bne.w	800af06 <_dtoa_r+0x7de>
 800b028:	2001      	movs	r0, #1
 800b02a:	e774      	b.n	800af16 <_dtoa_r+0x7ee>
 800b02c:	f04f 0800 	mov.w	r8, #0
 800b030:	e7f6      	b.n	800b020 <_dtoa_r+0x8f8>
 800b032:	4698      	mov	r8, r3
 800b034:	e7f4      	b.n	800b020 <_dtoa_r+0x8f8>
 800b036:	d082      	beq.n	800af3e <_dtoa_r+0x816>
 800b038:	9a05      	ldr	r2, [sp, #20]
 800b03a:	331c      	adds	r3, #28
 800b03c:	441a      	add	r2, r3
 800b03e:	9205      	str	r2, [sp, #20]
 800b040:	9a06      	ldr	r2, [sp, #24]
 800b042:	441a      	add	r2, r3
 800b044:	441d      	add	r5, r3
 800b046:	9206      	str	r2, [sp, #24]
 800b048:	e779      	b.n	800af3e <_dtoa_r+0x816>
 800b04a:	4603      	mov	r3, r0
 800b04c:	e7f4      	b.n	800b038 <_dtoa_r+0x910>
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc37      	bgt.n	800b0c4 <_dtoa_r+0x99c>
 800b054:	9b07      	ldr	r3, [sp, #28]
 800b056:	2b02      	cmp	r3, #2
 800b058:	dd34      	ble.n	800b0c4 <_dtoa_r+0x99c>
 800b05a:	9b04      	ldr	r3, [sp, #16]
 800b05c:	9301      	str	r3, [sp, #4]
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	b963      	cbnz	r3, 800b07c <_dtoa_r+0x954>
 800b062:	4631      	mov	r1, r6
 800b064:	2205      	movs	r2, #5
 800b066:	4620      	mov	r0, r4
 800b068:	f000 fd68 	bl	800bb3c <__multadd>
 800b06c:	4601      	mov	r1, r0
 800b06e:	4606      	mov	r6, r0
 800b070:	4650      	mov	r0, sl
 800b072:	f000 ffc7 	bl	800c004 <__mcmp>
 800b076:	2800      	cmp	r0, #0
 800b078:	f73f adbb 	bgt.w	800abf2 <_dtoa_r+0x4ca>
 800b07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b07e:	9d00      	ldr	r5, [sp, #0]
 800b080:	ea6f 0b03 	mvn.w	fp, r3
 800b084:	f04f 0800 	mov.w	r8, #0
 800b088:	4631      	mov	r1, r6
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 fd34 	bl	800baf8 <_Bfree>
 800b090:	2f00      	cmp	r7, #0
 800b092:	f43f aeab 	beq.w	800adec <_dtoa_r+0x6c4>
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	d005      	beq.n	800b0a8 <_dtoa_r+0x980>
 800b09c:	45b8      	cmp	r8, r7
 800b09e:	d003      	beq.n	800b0a8 <_dtoa_r+0x980>
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fd28 	bl	800baf8 <_Bfree>
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fd24 	bl	800baf8 <_Bfree>
 800b0b0:	e69c      	b.n	800adec <_dtoa_r+0x6c4>
 800b0b2:	2600      	movs	r6, #0
 800b0b4:	4637      	mov	r7, r6
 800b0b6:	e7e1      	b.n	800b07c <_dtoa_r+0x954>
 800b0b8:	46bb      	mov	fp, r7
 800b0ba:	4637      	mov	r7, r6
 800b0bc:	e599      	b.n	800abf2 <_dtoa_r+0x4ca>
 800b0be:	bf00      	nop
 800b0c0:	40240000 	.word	0x40240000
 800b0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80c8 	beq.w	800b25c <_dtoa_r+0xb34>
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	dd05      	ble.n	800b0e0 <_dtoa_r+0x9b8>
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 ff27 	bl	800bf2c <__lshift>
 800b0de:	4607      	mov	r7, r0
 800b0e0:	f1b8 0f00 	cmp.w	r8, #0
 800b0e4:	d05b      	beq.n	800b19e <_dtoa_r+0xa76>
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f000 fcc5 	bl	800ba78 <_Balloc>
 800b0ee:	4605      	mov	r5, r0
 800b0f0:	b928      	cbnz	r0, 800b0fe <_dtoa_r+0x9d6>
 800b0f2:	4b83      	ldr	r3, [pc, #524]	; (800b300 <_dtoa_r+0xbd8>)
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0fa:	f7ff bb2e 	b.w	800a75a <_dtoa_r+0x32>
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	0092      	lsls	r2, r2, #2
 800b104:	f107 010c 	add.w	r1, r7, #12
 800b108:	300c      	adds	r0, #12
 800b10a:	f7ff fa64 	bl	800a5d6 <memcpy>
 800b10e:	2201      	movs	r2, #1
 800b110:	4629      	mov	r1, r5
 800b112:	4620      	mov	r0, r4
 800b114:	f000 ff0a 	bl	800bf2c <__lshift>
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b122:	4413      	add	r3, r2
 800b124:	9308      	str	r3, [sp, #32]
 800b126:	9b02      	ldr	r3, [sp, #8]
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	46b8      	mov	r8, r7
 800b12e:	9306      	str	r3, [sp, #24]
 800b130:	4607      	mov	r7, r0
 800b132:	9b04      	ldr	r3, [sp, #16]
 800b134:	4631      	mov	r1, r6
 800b136:	3b01      	subs	r3, #1
 800b138:	4650      	mov	r0, sl
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	f7ff fa6a 	bl	800a614 <quorem>
 800b140:	4641      	mov	r1, r8
 800b142:	9002      	str	r0, [sp, #8]
 800b144:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b148:	4650      	mov	r0, sl
 800b14a:	f000 ff5b 	bl	800c004 <__mcmp>
 800b14e:	463a      	mov	r2, r7
 800b150:	9005      	str	r0, [sp, #20]
 800b152:	4631      	mov	r1, r6
 800b154:	4620      	mov	r0, r4
 800b156:	f000 ff71 	bl	800c03c <__mdiff>
 800b15a:	68c2      	ldr	r2, [r0, #12]
 800b15c:	4605      	mov	r5, r0
 800b15e:	bb02      	cbnz	r2, 800b1a2 <_dtoa_r+0xa7a>
 800b160:	4601      	mov	r1, r0
 800b162:	4650      	mov	r0, sl
 800b164:	f000 ff4e 	bl	800c004 <__mcmp>
 800b168:	4602      	mov	r2, r0
 800b16a:	4629      	mov	r1, r5
 800b16c:	4620      	mov	r0, r4
 800b16e:	9209      	str	r2, [sp, #36]	; 0x24
 800b170:	f000 fcc2 	bl	800baf8 <_Bfree>
 800b174:	9b07      	ldr	r3, [sp, #28]
 800b176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b178:	9d04      	ldr	r5, [sp, #16]
 800b17a:	ea43 0102 	orr.w	r1, r3, r2
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	4319      	orrs	r1, r3
 800b182:	d110      	bne.n	800b1a6 <_dtoa_r+0xa7e>
 800b184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b188:	d029      	beq.n	800b1de <_dtoa_r+0xab6>
 800b18a:	9b05      	ldr	r3, [sp, #20]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	dd02      	ble.n	800b196 <_dtoa_r+0xa6e>
 800b190:	9b02      	ldr	r3, [sp, #8]
 800b192:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b196:	9b01      	ldr	r3, [sp, #4]
 800b198:	f883 9000 	strb.w	r9, [r3]
 800b19c:	e774      	b.n	800b088 <_dtoa_r+0x960>
 800b19e:	4638      	mov	r0, r7
 800b1a0:	e7ba      	b.n	800b118 <_dtoa_r+0x9f0>
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	e7e1      	b.n	800b16a <_dtoa_r+0xa42>
 800b1a6:	9b05      	ldr	r3, [sp, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	db04      	blt.n	800b1b6 <_dtoa_r+0xa8e>
 800b1ac:	9907      	ldr	r1, [sp, #28]
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	9906      	ldr	r1, [sp, #24]
 800b1b2:	430b      	orrs	r3, r1
 800b1b4:	d120      	bne.n	800b1f8 <_dtoa_r+0xad0>
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	dded      	ble.n	800b196 <_dtoa_r+0xa6e>
 800b1ba:	4651      	mov	r1, sl
 800b1bc:	2201      	movs	r2, #1
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 feb4 	bl	800bf2c <__lshift>
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4682      	mov	sl, r0
 800b1c8:	f000 ff1c 	bl	800c004 <__mcmp>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	dc03      	bgt.n	800b1d8 <_dtoa_r+0xab0>
 800b1d0:	d1e1      	bne.n	800b196 <_dtoa_r+0xa6e>
 800b1d2:	f019 0f01 	tst.w	r9, #1
 800b1d6:	d0de      	beq.n	800b196 <_dtoa_r+0xa6e>
 800b1d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1dc:	d1d8      	bne.n	800b190 <_dtoa_r+0xa68>
 800b1de:	9a01      	ldr	r2, [sp, #4]
 800b1e0:	2339      	movs	r3, #57	; 0x39
 800b1e2:	7013      	strb	r3, [r2, #0]
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	461d      	mov	r5, r3
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1ee:	2a39      	cmp	r2, #57	; 0x39
 800b1f0:	d06c      	beq.n	800b2cc <_dtoa_r+0xba4>
 800b1f2:	3201      	adds	r2, #1
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	e747      	b.n	800b088 <_dtoa_r+0x960>
 800b1f8:	2a00      	cmp	r2, #0
 800b1fa:	dd07      	ble.n	800b20c <_dtoa_r+0xae4>
 800b1fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b200:	d0ed      	beq.n	800b1de <_dtoa_r+0xab6>
 800b202:	9a01      	ldr	r2, [sp, #4]
 800b204:	f109 0301 	add.w	r3, r9, #1
 800b208:	7013      	strb	r3, [r2, #0]
 800b20a:	e73d      	b.n	800b088 <_dtoa_r+0x960>
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	9a08      	ldr	r2, [sp, #32]
 800b210:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b214:	4293      	cmp	r3, r2
 800b216:	d043      	beq.n	800b2a0 <_dtoa_r+0xb78>
 800b218:	4651      	mov	r1, sl
 800b21a:	2300      	movs	r3, #0
 800b21c:	220a      	movs	r2, #10
 800b21e:	4620      	mov	r0, r4
 800b220:	f000 fc8c 	bl	800bb3c <__multadd>
 800b224:	45b8      	cmp	r8, r7
 800b226:	4682      	mov	sl, r0
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	f04f 020a 	mov.w	r2, #10
 800b230:	4641      	mov	r1, r8
 800b232:	4620      	mov	r0, r4
 800b234:	d107      	bne.n	800b246 <_dtoa_r+0xb1e>
 800b236:	f000 fc81 	bl	800bb3c <__multadd>
 800b23a:	4680      	mov	r8, r0
 800b23c:	4607      	mov	r7, r0
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	3301      	adds	r3, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	e775      	b.n	800b132 <_dtoa_r+0xa0a>
 800b246:	f000 fc79 	bl	800bb3c <__multadd>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4680      	mov	r8, r0
 800b24e:	2300      	movs	r3, #0
 800b250:	220a      	movs	r2, #10
 800b252:	4620      	mov	r0, r4
 800b254:	f000 fc72 	bl	800bb3c <__multadd>
 800b258:	4607      	mov	r7, r0
 800b25a:	e7f0      	b.n	800b23e <_dtoa_r+0xb16>
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	9d00      	ldr	r5, [sp, #0]
 800b262:	4631      	mov	r1, r6
 800b264:	4650      	mov	r0, sl
 800b266:	f7ff f9d5 	bl	800a614 <quorem>
 800b26a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b26e:	9b00      	ldr	r3, [sp, #0]
 800b270:	f805 9b01 	strb.w	r9, [r5], #1
 800b274:	1aea      	subs	r2, r5, r3
 800b276:	9b01      	ldr	r3, [sp, #4]
 800b278:	4293      	cmp	r3, r2
 800b27a:	dd07      	ble.n	800b28c <_dtoa_r+0xb64>
 800b27c:	4651      	mov	r1, sl
 800b27e:	2300      	movs	r3, #0
 800b280:	220a      	movs	r2, #10
 800b282:	4620      	mov	r0, r4
 800b284:	f000 fc5a 	bl	800bb3c <__multadd>
 800b288:	4682      	mov	sl, r0
 800b28a:	e7ea      	b.n	800b262 <_dtoa_r+0xb3a>
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfc8      	it	gt
 800b292:	461d      	movgt	r5, r3
 800b294:	9b00      	ldr	r3, [sp, #0]
 800b296:	bfd8      	it	le
 800b298:	2501      	movle	r5, #1
 800b29a:	441d      	add	r5, r3
 800b29c:	f04f 0800 	mov.w	r8, #0
 800b2a0:	4651      	mov	r1, sl
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 fe41 	bl	800bf2c <__lshift>
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	f000 fea9 	bl	800c004 <__mcmp>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	dc96      	bgt.n	800b1e4 <_dtoa_r+0xabc>
 800b2b6:	d102      	bne.n	800b2be <_dtoa_r+0xb96>
 800b2b8:	f019 0f01 	tst.w	r9, #1
 800b2bc:	d192      	bne.n	800b1e4 <_dtoa_r+0xabc>
 800b2be:	462b      	mov	r3, r5
 800b2c0:	461d      	mov	r5, r3
 800b2c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2c6:	2a30      	cmp	r2, #48	; 0x30
 800b2c8:	d0fa      	beq.n	800b2c0 <_dtoa_r+0xb98>
 800b2ca:	e6dd      	b.n	800b088 <_dtoa_r+0x960>
 800b2cc:	9a00      	ldr	r2, [sp, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d189      	bne.n	800b1e6 <_dtoa_r+0xabe>
 800b2d2:	f10b 0b01 	add.w	fp, fp, #1
 800b2d6:	2331      	movs	r3, #49	; 0x31
 800b2d8:	e796      	b.n	800b208 <_dtoa_r+0xae0>
 800b2da:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <_dtoa_r+0xbdc>)
 800b2dc:	f7ff ba99 	b.w	800a812 <_dtoa_r+0xea>
 800b2e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f47f aa6d 	bne.w	800a7c2 <_dtoa_r+0x9a>
 800b2e8:	4b07      	ldr	r3, [pc, #28]	; (800b308 <_dtoa_r+0xbe0>)
 800b2ea:	f7ff ba92 	b.w	800a812 <_dtoa_r+0xea>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dcb5      	bgt.n	800b260 <_dtoa_r+0xb38>
 800b2f4:	9b07      	ldr	r3, [sp, #28]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	f73f aeb1 	bgt.w	800b05e <_dtoa_r+0x936>
 800b2fc:	e7b0      	b.n	800b260 <_dtoa_r+0xb38>
 800b2fe:	bf00      	nop
 800b300:	0800dacc 	.word	0x0800dacc
 800b304:	0800dcbb 	.word	0x0800dcbb
 800b308:	0800da50 	.word	0x0800da50

0800b30c <_free_r>:
 800b30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b30e:	2900      	cmp	r1, #0
 800b310:	d044      	beq.n	800b39c <_free_r+0x90>
 800b312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b316:	9001      	str	r0, [sp, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f1a1 0404 	sub.w	r4, r1, #4
 800b31e:	bfb8      	it	lt
 800b320:	18e4      	addlt	r4, r4, r3
 800b322:	f7fd fa7b 	bl	800881c <__malloc_lock>
 800b326:	4a1e      	ldr	r2, [pc, #120]	; (800b3a0 <_free_r+0x94>)
 800b328:	9801      	ldr	r0, [sp, #4]
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	b933      	cbnz	r3, 800b33c <_free_r+0x30>
 800b32e:	6063      	str	r3, [r4, #4]
 800b330:	6014      	str	r4, [r2, #0]
 800b332:	b003      	add	sp, #12
 800b334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b338:	f7fd ba76 	b.w	8008828 <__malloc_unlock>
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d908      	bls.n	800b352 <_free_r+0x46>
 800b340:	6825      	ldr	r5, [r4, #0]
 800b342:	1961      	adds	r1, r4, r5
 800b344:	428b      	cmp	r3, r1
 800b346:	bf01      	itttt	eq
 800b348:	6819      	ldreq	r1, [r3, #0]
 800b34a:	685b      	ldreq	r3, [r3, #4]
 800b34c:	1949      	addeq	r1, r1, r5
 800b34e:	6021      	streq	r1, [r4, #0]
 800b350:	e7ed      	b.n	800b32e <_free_r+0x22>
 800b352:	461a      	mov	r2, r3
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	b10b      	cbz	r3, 800b35c <_free_r+0x50>
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d9fa      	bls.n	800b352 <_free_r+0x46>
 800b35c:	6811      	ldr	r1, [r2, #0]
 800b35e:	1855      	adds	r5, r2, r1
 800b360:	42a5      	cmp	r5, r4
 800b362:	d10b      	bne.n	800b37c <_free_r+0x70>
 800b364:	6824      	ldr	r4, [r4, #0]
 800b366:	4421      	add	r1, r4
 800b368:	1854      	adds	r4, r2, r1
 800b36a:	42a3      	cmp	r3, r4
 800b36c:	6011      	str	r1, [r2, #0]
 800b36e:	d1e0      	bne.n	800b332 <_free_r+0x26>
 800b370:	681c      	ldr	r4, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	6053      	str	r3, [r2, #4]
 800b376:	440c      	add	r4, r1
 800b378:	6014      	str	r4, [r2, #0]
 800b37a:	e7da      	b.n	800b332 <_free_r+0x26>
 800b37c:	d902      	bls.n	800b384 <_free_r+0x78>
 800b37e:	230c      	movs	r3, #12
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	e7d6      	b.n	800b332 <_free_r+0x26>
 800b384:	6825      	ldr	r5, [r4, #0]
 800b386:	1961      	adds	r1, r4, r5
 800b388:	428b      	cmp	r3, r1
 800b38a:	bf04      	itt	eq
 800b38c:	6819      	ldreq	r1, [r3, #0]
 800b38e:	685b      	ldreq	r3, [r3, #4]
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	bf04      	itt	eq
 800b394:	1949      	addeq	r1, r1, r5
 800b396:	6021      	streq	r1, [r4, #0]
 800b398:	6054      	str	r4, [r2, #4]
 800b39a:	e7ca      	b.n	800b332 <_free_r+0x26>
 800b39c:	b003      	add	sp, #12
 800b39e:	bd30      	pop	{r4, r5, pc}
 800b3a0:	20004988 	.word	0x20004988

0800b3a4 <rshift>:
 800b3a4:	6903      	ldr	r3, [r0, #16]
 800b3a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b3aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b3b2:	f100 0414 	add.w	r4, r0, #20
 800b3b6:	dd45      	ble.n	800b444 <rshift+0xa0>
 800b3b8:	f011 011f 	ands.w	r1, r1, #31
 800b3bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b3c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b3c4:	d10c      	bne.n	800b3e0 <rshift+0x3c>
 800b3c6:	f100 0710 	add.w	r7, r0, #16
 800b3ca:	4629      	mov	r1, r5
 800b3cc:	42b1      	cmp	r1, r6
 800b3ce:	d334      	bcc.n	800b43a <rshift+0x96>
 800b3d0:	1a9b      	subs	r3, r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	1eea      	subs	r2, r5, #3
 800b3d6:	4296      	cmp	r6, r2
 800b3d8:	bf38      	it	cc
 800b3da:	2300      	movcc	r3, #0
 800b3dc:	4423      	add	r3, r4
 800b3de:	e015      	b.n	800b40c <rshift+0x68>
 800b3e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3e4:	f1c1 0820 	rsb	r8, r1, #32
 800b3e8:	40cf      	lsrs	r7, r1
 800b3ea:	f105 0e04 	add.w	lr, r5, #4
 800b3ee:	46a1      	mov	r9, r4
 800b3f0:	4576      	cmp	r6, lr
 800b3f2:	46f4      	mov	ip, lr
 800b3f4:	d815      	bhi.n	800b422 <rshift+0x7e>
 800b3f6:	1a9a      	subs	r2, r3, r2
 800b3f8:	0092      	lsls	r2, r2, #2
 800b3fa:	3a04      	subs	r2, #4
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	42ae      	cmp	r6, r5
 800b400:	bf38      	it	cc
 800b402:	2200      	movcc	r2, #0
 800b404:	18a3      	adds	r3, r4, r2
 800b406:	50a7      	str	r7, [r4, r2]
 800b408:	b107      	cbz	r7, 800b40c <rshift+0x68>
 800b40a:	3304      	adds	r3, #4
 800b40c:	1b1a      	subs	r2, r3, r4
 800b40e:	42a3      	cmp	r3, r4
 800b410:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b414:	bf08      	it	eq
 800b416:	2300      	moveq	r3, #0
 800b418:	6102      	str	r2, [r0, #16]
 800b41a:	bf08      	it	eq
 800b41c:	6143      	streq	r3, [r0, #20]
 800b41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b422:	f8dc c000 	ldr.w	ip, [ip]
 800b426:	fa0c fc08 	lsl.w	ip, ip, r8
 800b42a:	ea4c 0707 	orr.w	r7, ip, r7
 800b42e:	f849 7b04 	str.w	r7, [r9], #4
 800b432:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b436:	40cf      	lsrs	r7, r1
 800b438:	e7da      	b.n	800b3f0 <rshift+0x4c>
 800b43a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b43e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b442:	e7c3      	b.n	800b3cc <rshift+0x28>
 800b444:	4623      	mov	r3, r4
 800b446:	e7e1      	b.n	800b40c <rshift+0x68>

0800b448 <__hexdig_fun>:
 800b448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b44c:	2b09      	cmp	r3, #9
 800b44e:	d802      	bhi.n	800b456 <__hexdig_fun+0xe>
 800b450:	3820      	subs	r0, #32
 800b452:	b2c0      	uxtb	r0, r0
 800b454:	4770      	bx	lr
 800b456:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b45a:	2b05      	cmp	r3, #5
 800b45c:	d801      	bhi.n	800b462 <__hexdig_fun+0x1a>
 800b45e:	3847      	subs	r0, #71	; 0x47
 800b460:	e7f7      	b.n	800b452 <__hexdig_fun+0xa>
 800b462:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b466:	2b05      	cmp	r3, #5
 800b468:	d801      	bhi.n	800b46e <__hexdig_fun+0x26>
 800b46a:	3827      	subs	r0, #39	; 0x27
 800b46c:	e7f1      	b.n	800b452 <__hexdig_fun+0xa>
 800b46e:	2000      	movs	r0, #0
 800b470:	4770      	bx	lr
	...

0800b474 <__gethex>:
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	4617      	mov	r7, r2
 800b47a:	680a      	ldr	r2, [r1, #0]
 800b47c:	b085      	sub	sp, #20
 800b47e:	f102 0b02 	add.w	fp, r2, #2
 800b482:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b486:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b48a:	4681      	mov	r9, r0
 800b48c:	468a      	mov	sl, r1
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	32fe      	adds	r2, #254	; 0xfe
 800b492:	eb02 030b 	add.w	r3, r2, fp
 800b496:	46d8      	mov	r8, fp
 800b498:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	2830      	cmp	r0, #48	; 0x30
 800b4a0:	d0f7      	beq.n	800b492 <__gethex+0x1e>
 800b4a2:	f7ff ffd1 	bl	800b448 <__hexdig_fun>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d138      	bne.n	800b51e <__gethex+0xaa>
 800b4ac:	49a7      	ldr	r1, [pc, #668]	; (800b74c <__gethex+0x2d8>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	f7fe ffe1 	bl	800a478 <strncmp>
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d169      	bne.n	800b590 <__gethex+0x11c>
 800b4bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b4c0:	465d      	mov	r5, fp
 800b4c2:	f7ff ffc1 	bl	800b448 <__hexdig_fun>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	d064      	beq.n	800b594 <__gethex+0x120>
 800b4ca:	465a      	mov	r2, fp
 800b4cc:	7810      	ldrb	r0, [r2, #0]
 800b4ce:	2830      	cmp	r0, #48	; 0x30
 800b4d0:	4690      	mov	r8, r2
 800b4d2:	f102 0201 	add.w	r2, r2, #1
 800b4d6:	d0f9      	beq.n	800b4cc <__gethex+0x58>
 800b4d8:	f7ff ffb6 	bl	800b448 <__hexdig_fun>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	fab0 f480 	clz	r4, r0
 800b4e2:	0964      	lsrs	r4, r4, #5
 800b4e4:	465e      	mov	r6, fp
 800b4e6:	9301      	str	r3, [sp, #4]
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	4615      	mov	r5, r2
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	7828      	ldrb	r0, [r5, #0]
 800b4f0:	f7ff ffaa 	bl	800b448 <__hexdig_fun>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d1f8      	bne.n	800b4ea <__gethex+0x76>
 800b4f8:	4994      	ldr	r1, [pc, #592]	; (800b74c <__gethex+0x2d8>)
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f7fe ffbb 	bl	800a478 <strncmp>
 800b502:	b978      	cbnz	r0, 800b524 <__gethex+0xb0>
 800b504:	b946      	cbnz	r6, 800b518 <__gethex+0xa4>
 800b506:	1c6e      	adds	r6, r5, #1
 800b508:	4632      	mov	r2, r6
 800b50a:	4615      	mov	r5, r2
 800b50c:	3201      	adds	r2, #1
 800b50e:	7828      	ldrb	r0, [r5, #0]
 800b510:	f7ff ff9a 	bl	800b448 <__hexdig_fun>
 800b514:	2800      	cmp	r0, #0
 800b516:	d1f8      	bne.n	800b50a <__gethex+0x96>
 800b518:	1b73      	subs	r3, r6, r5
 800b51a:	009e      	lsls	r6, r3, #2
 800b51c:	e004      	b.n	800b528 <__gethex+0xb4>
 800b51e:	2400      	movs	r4, #0
 800b520:	4626      	mov	r6, r4
 800b522:	e7e1      	b.n	800b4e8 <__gethex+0x74>
 800b524:	2e00      	cmp	r6, #0
 800b526:	d1f7      	bne.n	800b518 <__gethex+0xa4>
 800b528:	782b      	ldrb	r3, [r5, #0]
 800b52a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b52e:	2b50      	cmp	r3, #80	; 0x50
 800b530:	d13d      	bne.n	800b5ae <__gethex+0x13a>
 800b532:	786b      	ldrb	r3, [r5, #1]
 800b534:	2b2b      	cmp	r3, #43	; 0x2b
 800b536:	d02f      	beq.n	800b598 <__gethex+0x124>
 800b538:	2b2d      	cmp	r3, #45	; 0x2d
 800b53a:	d031      	beq.n	800b5a0 <__gethex+0x12c>
 800b53c:	1c69      	adds	r1, r5, #1
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	7808      	ldrb	r0, [r1, #0]
 800b544:	f7ff ff80 	bl	800b448 <__hexdig_fun>
 800b548:	1e42      	subs	r2, r0, #1
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	2a18      	cmp	r2, #24
 800b54e:	d82e      	bhi.n	800b5ae <__gethex+0x13a>
 800b550:	f1a0 0210 	sub.w	r2, r0, #16
 800b554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b558:	f7ff ff76 	bl	800b448 <__hexdig_fun>
 800b55c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b560:	fa5f fc8c 	uxtb.w	ip, ip
 800b564:	f1bc 0f18 	cmp.w	ip, #24
 800b568:	d91d      	bls.n	800b5a6 <__gethex+0x132>
 800b56a:	f1bb 0f00 	cmp.w	fp, #0
 800b56e:	d000      	beq.n	800b572 <__gethex+0xfe>
 800b570:	4252      	negs	r2, r2
 800b572:	4416      	add	r6, r2
 800b574:	f8ca 1000 	str.w	r1, [sl]
 800b578:	b1dc      	cbz	r4, 800b5b2 <__gethex+0x13e>
 800b57a:	9b01      	ldr	r3, [sp, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	bf14      	ite	ne
 800b580:	f04f 0800 	movne.w	r8, #0
 800b584:	f04f 0806 	moveq.w	r8, #6
 800b588:	4640      	mov	r0, r8
 800b58a:	b005      	add	sp, #20
 800b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b590:	4645      	mov	r5, r8
 800b592:	4626      	mov	r6, r4
 800b594:	2401      	movs	r4, #1
 800b596:	e7c7      	b.n	800b528 <__gethex+0xb4>
 800b598:	f04f 0b00 	mov.w	fp, #0
 800b59c:	1ca9      	adds	r1, r5, #2
 800b59e:	e7d0      	b.n	800b542 <__gethex+0xce>
 800b5a0:	f04f 0b01 	mov.w	fp, #1
 800b5a4:	e7fa      	b.n	800b59c <__gethex+0x128>
 800b5a6:	230a      	movs	r3, #10
 800b5a8:	fb03 0002 	mla	r0, r3, r2, r0
 800b5ac:	e7d0      	b.n	800b550 <__gethex+0xdc>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	e7e0      	b.n	800b574 <__gethex+0x100>
 800b5b2:	eba5 0308 	sub.w	r3, r5, r8
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	2b07      	cmp	r3, #7
 800b5bc:	dc0a      	bgt.n	800b5d4 <__gethex+0x160>
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f000 fa5a 	bl	800ba78 <_Balloc>
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	b940      	cbnz	r0, 800b5da <__gethex+0x166>
 800b5c8:	4b61      	ldr	r3, [pc, #388]	; (800b750 <__gethex+0x2dc>)
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	21e4      	movs	r1, #228	; 0xe4
 800b5ce:	4861      	ldr	r0, [pc, #388]	; (800b754 <__gethex+0x2e0>)
 800b5d0:	f001 fd4e 	bl	800d070 <__assert_func>
 800b5d4:	3101      	adds	r1, #1
 800b5d6:	105b      	asrs	r3, r3, #1
 800b5d8:	e7ef      	b.n	800b5ba <__gethex+0x146>
 800b5da:	f100 0a14 	add.w	sl, r0, #20
 800b5de:	2300      	movs	r3, #0
 800b5e0:	495a      	ldr	r1, [pc, #360]	; (800b74c <__gethex+0x2d8>)
 800b5e2:	f8cd a004 	str.w	sl, [sp, #4]
 800b5e6:	469b      	mov	fp, r3
 800b5e8:	45a8      	cmp	r8, r5
 800b5ea:	d342      	bcc.n	800b672 <__gethex+0x1fe>
 800b5ec:	9801      	ldr	r0, [sp, #4]
 800b5ee:	f840 bb04 	str.w	fp, [r0], #4
 800b5f2:	eba0 000a 	sub.w	r0, r0, sl
 800b5f6:	1080      	asrs	r0, r0, #2
 800b5f8:	6120      	str	r0, [r4, #16]
 800b5fa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b5fe:	4658      	mov	r0, fp
 800b600:	f000 fb2c 	bl	800bc5c <__hi0bits>
 800b604:	683d      	ldr	r5, [r7, #0]
 800b606:	eba8 0000 	sub.w	r0, r8, r0
 800b60a:	42a8      	cmp	r0, r5
 800b60c:	dd59      	ble.n	800b6c2 <__gethex+0x24e>
 800b60e:	eba0 0805 	sub.w	r8, r0, r5
 800b612:	4641      	mov	r1, r8
 800b614:	4620      	mov	r0, r4
 800b616:	f000 febb 	bl	800c390 <__any_on>
 800b61a:	4683      	mov	fp, r0
 800b61c:	b1b8      	cbz	r0, 800b64e <__gethex+0x1da>
 800b61e:	f108 33ff 	add.w	r3, r8, #4294967295
 800b622:	1159      	asrs	r1, r3, #5
 800b624:	f003 021f 	and.w	r2, r3, #31
 800b628:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b62c:	f04f 0b01 	mov.w	fp, #1
 800b630:	fa0b f202 	lsl.w	r2, fp, r2
 800b634:	420a      	tst	r2, r1
 800b636:	d00a      	beq.n	800b64e <__gethex+0x1da>
 800b638:	455b      	cmp	r3, fp
 800b63a:	dd06      	ble.n	800b64a <__gethex+0x1d6>
 800b63c:	f1a8 0102 	sub.w	r1, r8, #2
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fea5 	bl	800c390 <__any_on>
 800b646:	2800      	cmp	r0, #0
 800b648:	d138      	bne.n	800b6bc <__gethex+0x248>
 800b64a:	f04f 0b02 	mov.w	fp, #2
 800b64e:	4641      	mov	r1, r8
 800b650:	4620      	mov	r0, r4
 800b652:	f7ff fea7 	bl	800b3a4 <rshift>
 800b656:	4446      	add	r6, r8
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	42b3      	cmp	r3, r6
 800b65c:	da41      	bge.n	800b6e2 <__gethex+0x26e>
 800b65e:	4621      	mov	r1, r4
 800b660:	4648      	mov	r0, r9
 800b662:	f000 fa49 	bl	800baf8 <_Bfree>
 800b666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b668:	2300      	movs	r3, #0
 800b66a:	6013      	str	r3, [r2, #0]
 800b66c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b670:	e78a      	b.n	800b588 <__gethex+0x114>
 800b672:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b676:	2a2e      	cmp	r2, #46	; 0x2e
 800b678:	d014      	beq.n	800b6a4 <__gethex+0x230>
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d106      	bne.n	800b68c <__gethex+0x218>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	f843 bb04 	str.w	fp, [r3], #4
 800b684:	f04f 0b00 	mov.w	fp, #0
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	465b      	mov	r3, fp
 800b68c:	7828      	ldrb	r0, [r5, #0]
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	f7ff feda 	bl	800b448 <__hexdig_fun>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	f000 000f 	and.w	r0, r0, #15
 800b69a:	4098      	lsls	r0, r3
 800b69c:	ea4b 0b00 	orr.w	fp, fp, r0
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	e7a1      	b.n	800b5e8 <__gethex+0x174>
 800b6a4:	45a8      	cmp	r8, r5
 800b6a6:	d8e8      	bhi.n	800b67a <__gethex+0x206>
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	f7fe fee3 	bl	800a478 <strncmp>
 800b6b2:	4926      	ldr	r1, [pc, #152]	; (800b74c <__gethex+0x2d8>)
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1df      	bne.n	800b67a <__gethex+0x206>
 800b6ba:	e795      	b.n	800b5e8 <__gethex+0x174>
 800b6bc:	f04f 0b03 	mov.w	fp, #3
 800b6c0:	e7c5      	b.n	800b64e <__gethex+0x1da>
 800b6c2:	da0b      	bge.n	800b6dc <__gethex+0x268>
 800b6c4:	eba5 0800 	sub.w	r8, r5, r0
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4642      	mov	r2, r8
 800b6cc:	4648      	mov	r0, r9
 800b6ce:	f000 fc2d 	bl	800bf2c <__lshift>
 800b6d2:	eba6 0608 	sub.w	r6, r6, r8
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	f100 0a14 	add.w	sl, r0, #20
 800b6dc:	f04f 0b00 	mov.w	fp, #0
 800b6e0:	e7ba      	b.n	800b658 <__gethex+0x1e4>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	42b3      	cmp	r3, r6
 800b6e6:	dd73      	ble.n	800b7d0 <__gethex+0x35c>
 800b6e8:	1b9e      	subs	r6, r3, r6
 800b6ea:	42b5      	cmp	r5, r6
 800b6ec:	dc34      	bgt.n	800b758 <__gethex+0x2e4>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d023      	beq.n	800b73c <__gethex+0x2c8>
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d025      	beq.n	800b744 <__gethex+0x2d0>
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d115      	bne.n	800b728 <__gethex+0x2b4>
 800b6fc:	42b5      	cmp	r5, r6
 800b6fe:	d113      	bne.n	800b728 <__gethex+0x2b4>
 800b700:	2d01      	cmp	r5, #1
 800b702:	d10b      	bne.n	800b71c <__gethex+0x2a8>
 800b704:	9a02      	ldr	r2, [sp, #8]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	2301      	movs	r3, #1
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	f8ca 3000 	str.w	r3, [sl]
 800b712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b714:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b718:	601c      	str	r4, [r3, #0]
 800b71a:	e735      	b.n	800b588 <__gethex+0x114>
 800b71c:	1e69      	subs	r1, r5, #1
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 fe36 	bl	800c390 <__any_on>
 800b724:	2800      	cmp	r0, #0
 800b726:	d1ed      	bne.n	800b704 <__gethex+0x290>
 800b728:	4621      	mov	r1, r4
 800b72a:	4648      	mov	r0, r9
 800b72c:	f000 f9e4 	bl	800baf8 <_Bfree>
 800b730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b732:	2300      	movs	r3, #0
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b73a:	e725      	b.n	800b588 <__gethex+0x114>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1f2      	bne.n	800b728 <__gethex+0x2b4>
 800b742:	e7df      	b.n	800b704 <__gethex+0x290>
 800b744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1dc      	bne.n	800b704 <__gethex+0x290>
 800b74a:	e7ed      	b.n	800b728 <__gethex+0x2b4>
 800b74c:	0800d8bc 	.word	0x0800d8bc
 800b750:	0800dacc 	.word	0x0800dacc
 800b754:	0800dadd 	.word	0x0800dadd
 800b758:	f106 38ff 	add.w	r8, r6, #4294967295
 800b75c:	f1bb 0f00 	cmp.w	fp, #0
 800b760:	d133      	bne.n	800b7ca <__gethex+0x356>
 800b762:	f1b8 0f00 	cmp.w	r8, #0
 800b766:	d004      	beq.n	800b772 <__gethex+0x2fe>
 800b768:	4641      	mov	r1, r8
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 fe10 	bl	800c390 <__any_on>
 800b770:	4683      	mov	fp, r0
 800b772:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b776:	2301      	movs	r3, #1
 800b778:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b77c:	f008 081f 	and.w	r8, r8, #31
 800b780:	fa03 f308 	lsl.w	r3, r3, r8
 800b784:	4213      	tst	r3, r2
 800b786:	4631      	mov	r1, r6
 800b788:	4620      	mov	r0, r4
 800b78a:	bf18      	it	ne
 800b78c:	f04b 0b02 	orrne.w	fp, fp, #2
 800b790:	1bad      	subs	r5, r5, r6
 800b792:	f7ff fe07 	bl	800b3a4 <rshift>
 800b796:	687e      	ldr	r6, [r7, #4]
 800b798:	f04f 0802 	mov.w	r8, #2
 800b79c:	f1bb 0f00 	cmp.w	fp, #0
 800b7a0:	d04a      	beq.n	800b838 <__gethex+0x3c4>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d016      	beq.n	800b7d6 <__gethex+0x362>
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d018      	beq.n	800b7de <__gethex+0x36a>
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d109      	bne.n	800b7c4 <__gethex+0x350>
 800b7b0:	f01b 0f02 	tst.w	fp, #2
 800b7b4:	d006      	beq.n	800b7c4 <__gethex+0x350>
 800b7b6:	f8da 3000 	ldr.w	r3, [sl]
 800b7ba:	ea4b 0b03 	orr.w	fp, fp, r3
 800b7be:	f01b 0f01 	tst.w	fp, #1
 800b7c2:	d10f      	bne.n	800b7e4 <__gethex+0x370>
 800b7c4:	f048 0810 	orr.w	r8, r8, #16
 800b7c8:	e036      	b.n	800b838 <__gethex+0x3c4>
 800b7ca:	f04f 0b01 	mov.w	fp, #1
 800b7ce:	e7d0      	b.n	800b772 <__gethex+0x2fe>
 800b7d0:	f04f 0801 	mov.w	r8, #1
 800b7d4:	e7e2      	b.n	800b79c <__gethex+0x328>
 800b7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7d8:	f1c3 0301 	rsb	r3, r3, #1
 800b7dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0ef      	beq.n	800b7c4 <__gethex+0x350>
 800b7e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7e8:	f104 0214 	add.w	r2, r4, #20
 800b7ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	4694      	mov	ip, r2
 800b7fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b802:	d01e      	beq.n	800b842 <__gethex+0x3ce>
 800b804:	3101      	adds	r1, #1
 800b806:	f8cc 1000 	str.w	r1, [ip]
 800b80a:	f1b8 0f02 	cmp.w	r8, #2
 800b80e:	f104 0214 	add.w	r2, r4, #20
 800b812:	d13d      	bne.n	800b890 <__gethex+0x41c>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	3b01      	subs	r3, #1
 800b818:	42ab      	cmp	r3, r5
 800b81a:	d10b      	bne.n	800b834 <__gethex+0x3c0>
 800b81c:	1169      	asrs	r1, r5, #5
 800b81e:	2301      	movs	r3, #1
 800b820:	f005 051f 	and.w	r5, r5, #31
 800b824:	fa03 f505 	lsl.w	r5, r3, r5
 800b828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b82c:	421d      	tst	r5, r3
 800b82e:	bf18      	it	ne
 800b830:	f04f 0801 	movne.w	r8, #1
 800b834:	f048 0820 	orr.w	r8, r8, #32
 800b838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b83a:	601c      	str	r4, [r3, #0]
 800b83c:	9b02      	ldr	r3, [sp, #8]
 800b83e:	601e      	str	r6, [r3, #0]
 800b840:	e6a2      	b.n	800b588 <__gethex+0x114>
 800b842:	4290      	cmp	r0, r2
 800b844:	f842 3c04 	str.w	r3, [r2, #-4]
 800b848:	d8d6      	bhi.n	800b7f8 <__gethex+0x384>
 800b84a:	68a2      	ldr	r2, [r4, #8]
 800b84c:	4593      	cmp	fp, r2
 800b84e:	db17      	blt.n	800b880 <__gethex+0x40c>
 800b850:	6861      	ldr	r1, [r4, #4]
 800b852:	4648      	mov	r0, r9
 800b854:	3101      	adds	r1, #1
 800b856:	f000 f90f 	bl	800ba78 <_Balloc>
 800b85a:	4682      	mov	sl, r0
 800b85c:	b918      	cbnz	r0, 800b866 <__gethex+0x3f2>
 800b85e:	4b1b      	ldr	r3, [pc, #108]	; (800b8cc <__gethex+0x458>)
 800b860:	4602      	mov	r2, r0
 800b862:	2184      	movs	r1, #132	; 0x84
 800b864:	e6b3      	b.n	800b5ce <__gethex+0x15a>
 800b866:	6922      	ldr	r2, [r4, #16]
 800b868:	3202      	adds	r2, #2
 800b86a:	f104 010c 	add.w	r1, r4, #12
 800b86e:	0092      	lsls	r2, r2, #2
 800b870:	300c      	adds	r0, #12
 800b872:	f7fe feb0 	bl	800a5d6 <memcpy>
 800b876:	4621      	mov	r1, r4
 800b878:	4648      	mov	r0, r9
 800b87a:	f000 f93d 	bl	800baf8 <_Bfree>
 800b87e:	4654      	mov	r4, sl
 800b880:	6922      	ldr	r2, [r4, #16]
 800b882:	1c51      	adds	r1, r2, #1
 800b884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b888:	6121      	str	r1, [r4, #16]
 800b88a:	2101      	movs	r1, #1
 800b88c:	6151      	str	r1, [r2, #20]
 800b88e:	e7bc      	b.n	800b80a <__gethex+0x396>
 800b890:	6921      	ldr	r1, [r4, #16]
 800b892:	4559      	cmp	r1, fp
 800b894:	dd0b      	ble.n	800b8ae <__gethex+0x43a>
 800b896:	2101      	movs	r1, #1
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff fd83 	bl	800b3a4 <rshift>
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3601      	adds	r6, #1
 800b8a2:	42b3      	cmp	r3, r6
 800b8a4:	f6ff aedb 	blt.w	800b65e <__gethex+0x1ea>
 800b8a8:	f04f 0801 	mov.w	r8, #1
 800b8ac:	e7c2      	b.n	800b834 <__gethex+0x3c0>
 800b8ae:	f015 051f 	ands.w	r5, r5, #31
 800b8b2:	d0f9      	beq.n	800b8a8 <__gethex+0x434>
 800b8b4:	9b01      	ldr	r3, [sp, #4]
 800b8b6:	441a      	add	r2, r3
 800b8b8:	f1c5 0520 	rsb	r5, r5, #32
 800b8bc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b8c0:	f000 f9cc 	bl	800bc5c <__hi0bits>
 800b8c4:	42a8      	cmp	r0, r5
 800b8c6:	dbe6      	blt.n	800b896 <__gethex+0x422>
 800b8c8:	e7ee      	b.n	800b8a8 <__gethex+0x434>
 800b8ca:	bf00      	nop
 800b8cc:	0800dacc 	.word	0x0800dacc

0800b8d0 <L_shift>:
 800b8d0:	f1c2 0208 	rsb	r2, r2, #8
 800b8d4:	0092      	lsls	r2, r2, #2
 800b8d6:	b570      	push	{r4, r5, r6, lr}
 800b8d8:	f1c2 0620 	rsb	r6, r2, #32
 800b8dc:	6843      	ldr	r3, [r0, #4]
 800b8de:	6804      	ldr	r4, [r0, #0]
 800b8e0:	fa03 f506 	lsl.w	r5, r3, r6
 800b8e4:	432c      	orrs	r4, r5
 800b8e6:	40d3      	lsrs	r3, r2
 800b8e8:	6004      	str	r4, [r0, #0]
 800b8ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8ee:	4288      	cmp	r0, r1
 800b8f0:	d3f4      	bcc.n	800b8dc <L_shift+0xc>
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}

0800b8f4 <__match>:
 800b8f4:	b530      	push	{r4, r5, lr}
 800b8f6:	6803      	ldr	r3, [r0, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8fe:	b914      	cbnz	r4, 800b906 <__match+0x12>
 800b900:	6003      	str	r3, [r0, #0]
 800b902:	2001      	movs	r0, #1
 800b904:	bd30      	pop	{r4, r5, pc}
 800b906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b90e:	2d19      	cmp	r5, #25
 800b910:	bf98      	it	ls
 800b912:	3220      	addls	r2, #32
 800b914:	42a2      	cmp	r2, r4
 800b916:	d0f0      	beq.n	800b8fa <__match+0x6>
 800b918:	2000      	movs	r0, #0
 800b91a:	e7f3      	b.n	800b904 <__match+0x10>

0800b91c <__hexnan>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	680b      	ldr	r3, [r1, #0]
 800b922:	6801      	ldr	r1, [r0, #0]
 800b924:	115e      	asrs	r6, r3, #5
 800b926:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b92a:	f013 031f 	ands.w	r3, r3, #31
 800b92e:	b087      	sub	sp, #28
 800b930:	bf18      	it	ne
 800b932:	3604      	addne	r6, #4
 800b934:	2500      	movs	r5, #0
 800b936:	1f37      	subs	r7, r6, #4
 800b938:	4682      	mov	sl, r0
 800b93a:	4690      	mov	r8, r2
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b942:	46b9      	mov	r9, r7
 800b944:	463c      	mov	r4, r7
 800b946:	9502      	str	r5, [sp, #8]
 800b948:	46ab      	mov	fp, r5
 800b94a:	784a      	ldrb	r2, [r1, #1]
 800b94c:	1c4b      	adds	r3, r1, #1
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	b342      	cbz	r2, 800b9a4 <__hexnan+0x88>
 800b952:	4610      	mov	r0, r2
 800b954:	9105      	str	r1, [sp, #20]
 800b956:	9204      	str	r2, [sp, #16]
 800b958:	f7ff fd76 	bl	800b448 <__hexdig_fun>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d14f      	bne.n	800ba00 <__hexnan+0xe4>
 800b960:	9a04      	ldr	r2, [sp, #16]
 800b962:	9905      	ldr	r1, [sp, #20]
 800b964:	2a20      	cmp	r2, #32
 800b966:	d818      	bhi.n	800b99a <__hexnan+0x7e>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	459b      	cmp	fp, r3
 800b96c:	dd13      	ble.n	800b996 <__hexnan+0x7a>
 800b96e:	454c      	cmp	r4, r9
 800b970:	d206      	bcs.n	800b980 <__hexnan+0x64>
 800b972:	2d07      	cmp	r5, #7
 800b974:	dc04      	bgt.n	800b980 <__hexnan+0x64>
 800b976:	462a      	mov	r2, r5
 800b978:	4649      	mov	r1, r9
 800b97a:	4620      	mov	r0, r4
 800b97c:	f7ff ffa8 	bl	800b8d0 <L_shift>
 800b980:	4544      	cmp	r4, r8
 800b982:	d950      	bls.n	800ba26 <__hexnan+0x10a>
 800b984:	2300      	movs	r3, #0
 800b986:	f1a4 0904 	sub.w	r9, r4, #4
 800b98a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b98e:	f8cd b008 	str.w	fp, [sp, #8]
 800b992:	464c      	mov	r4, r9
 800b994:	461d      	mov	r5, r3
 800b996:	9903      	ldr	r1, [sp, #12]
 800b998:	e7d7      	b.n	800b94a <__hexnan+0x2e>
 800b99a:	2a29      	cmp	r2, #41	; 0x29
 800b99c:	d155      	bne.n	800ba4a <__hexnan+0x12e>
 800b99e:	3102      	adds	r1, #2
 800b9a0:	f8ca 1000 	str.w	r1, [sl]
 800b9a4:	f1bb 0f00 	cmp.w	fp, #0
 800b9a8:	d04f      	beq.n	800ba4a <__hexnan+0x12e>
 800b9aa:	454c      	cmp	r4, r9
 800b9ac:	d206      	bcs.n	800b9bc <__hexnan+0xa0>
 800b9ae:	2d07      	cmp	r5, #7
 800b9b0:	dc04      	bgt.n	800b9bc <__hexnan+0xa0>
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	4649      	mov	r1, r9
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f7ff ff8a 	bl	800b8d0 <L_shift>
 800b9bc:	4544      	cmp	r4, r8
 800b9be:	d934      	bls.n	800ba2a <__hexnan+0x10e>
 800b9c0:	f1a8 0204 	sub.w	r2, r8, #4
 800b9c4:	4623      	mov	r3, r4
 800b9c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9ce:	429f      	cmp	r7, r3
 800b9d0:	d2f9      	bcs.n	800b9c6 <__hexnan+0xaa>
 800b9d2:	1b3b      	subs	r3, r7, r4
 800b9d4:	f023 0303 	bic.w	r3, r3, #3
 800b9d8:	3304      	adds	r3, #4
 800b9da:	3e03      	subs	r6, #3
 800b9dc:	3401      	adds	r4, #1
 800b9de:	42a6      	cmp	r6, r4
 800b9e0:	bf38      	it	cc
 800b9e2:	2304      	movcc	r3, #4
 800b9e4:	4443      	add	r3, r8
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f843 2b04 	str.w	r2, [r3], #4
 800b9ec:	429f      	cmp	r7, r3
 800b9ee:	d2fb      	bcs.n	800b9e8 <__hexnan+0xcc>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	b91b      	cbnz	r3, 800b9fc <__hexnan+0xe0>
 800b9f4:	4547      	cmp	r7, r8
 800b9f6:	d126      	bne.n	800ba46 <__hexnan+0x12a>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	2005      	movs	r0, #5
 800b9fe:	e025      	b.n	800ba4c <__hexnan+0x130>
 800ba00:	3501      	adds	r5, #1
 800ba02:	2d08      	cmp	r5, #8
 800ba04:	f10b 0b01 	add.w	fp, fp, #1
 800ba08:	dd06      	ble.n	800ba18 <__hexnan+0xfc>
 800ba0a:	4544      	cmp	r4, r8
 800ba0c:	d9c3      	bls.n	800b996 <__hexnan+0x7a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba14:	2501      	movs	r5, #1
 800ba16:	3c04      	subs	r4, #4
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	f000 000f 	and.w	r0, r0, #15
 800ba1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba22:	6020      	str	r0, [r4, #0]
 800ba24:	e7b7      	b.n	800b996 <__hexnan+0x7a>
 800ba26:	2508      	movs	r5, #8
 800ba28:	e7b5      	b.n	800b996 <__hexnan+0x7a>
 800ba2a:	9b01      	ldr	r3, [sp, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d0df      	beq.n	800b9f0 <__hexnan+0xd4>
 800ba30:	f1c3 0320 	rsb	r3, r3, #32
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295
 800ba38:	40da      	lsrs	r2, r3
 800ba3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba3e:	4013      	ands	r3, r2
 800ba40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba44:	e7d4      	b.n	800b9f0 <__hexnan+0xd4>
 800ba46:	3f04      	subs	r7, #4
 800ba48:	e7d2      	b.n	800b9f0 <__hexnan+0xd4>
 800ba4a:	2004      	movs	r0, #4
 800ba4c:	b007      	add	sp, #28
 800ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba52 <__ascii_mbtowc>:
 800ba52:	b082      	sub	sp, #8
 800ba54:	b901      	cbnz	r1, 800ba58 <__ascii_mbtowc+0x6>
 800ba56:	a901      	add	r1, sp, #4
 800ba58:	b142      	cbz	r2, 800ba6c <__ascii_mbtowc+0x1a>
 800ba5a:	b14b      	cbz	r3, 800ba70 <__ascii_mbtowc+0x1e>
 800ba5c:	7813      	ldrb	r3, [r2, #0]
 800ba5e:	600b      	str	r3, [r1, #0]
 800ba60:	7812      	ldrb	r2, [r2, #0]
 800ba62:	1e10      	subs	r0, r2, #0
 800ba64:	bf18      	it	ne
 800ba66:	2001      	movne	r0, #1
 800ba68:	b002      	add	sp, #8
 800ba6a:	4770      	bx	lr
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	e7fb      	b.n	800ba68 <__ascii_mbtowc+0x16>
 800ba70:	f06f 0001 	mvn.w	r0, #1
 800ba74:	e7f8      	b.n	800ba68 <__ascii_mbtowc+0x16>
	...

0800ba78 <_Balloc>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	69c6      	ldr	r6, [r0, #28]
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	b976      	cbnz	r6, 800baa0 <_Balloc+0x28>
 800ba82:	2010      	movs	r0, #16
 800ba84:	f7fc fe22 	bl	80086cc <malloc>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	61e0      	str	r0, [r4, #28]
 800ba8c:	b920      	cbnz	r0, 800ba98 <_Balloc+0x20>
 800ba8e:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <_Balloc+0x78>)
 800ba90:	4818      	ldr	r0, [pc, #96]	; (800baf4 <_Balloc+0x7c>)
 800ba92:	216b      	movs	r1, #107	; 0x6b
 800ba94:	f001 faec 	bl	800d070 <__assert_func>
 800ba98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba9c:	6006      	str	r6, [r0, #0]
 800ba9e:	60c6      	str	r6, [r0, #12]
 800baa0:	69e6      	ldr	r6, [r4, #28]
 800baa2:	68f3      	ldr	r3, [r6, #12]
 800baa4:	b183      	cbz	r3, 800bac8 <_Balloc+0x50>
 800baa6:	69e3      	ldr	r3, [r4, #28]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baae:	b9b8      	cbnz	r0, 800bae0 <_Balloc+0x68>
 800bab0:	2101      	movs	r1, #1
 800bab2:	fa01 f605 	lsl.w	r6, r1, r5
 800bab6:	1d72      	adds	r2, r6, #5
 800bab8:	0092      	lsls	r2, r2, #2
 800baba:	4620      	mov	r0, r4
 800babc:	f001 faf6 	bl	800d0ac <_calloc_r>
 800bac0:	b160      	cbz	r0, 800badc <_Balloc+0x64>
 800bac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bac6:	e00e      	b.n	800bae6 <_Balloc+0x6e>
 800bac8:	2221      	movs	r2, #33	; 0x21
 800baca:	2104      	movs	r1, #4
 800bacc:	4620      	mov	r0, r4
 800bace:	f001 faed 	bl	800d0ac <_calloc_r>
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	60f0      	str	r0, [r6, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e4      	bne.n	800baa6 <_Balloc+0x2e>
 800badc:	2000      	movs	r0, #0
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	6802      	ldr	r2, [r0, #0]
 800bae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bae6:	2300      	movs	r3, #0
 800bae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baec:	e7f7      	b.n	800bade <_Balloc+0x66>
 800baee:	bf00      	nop
 800baf0:	0800da5d 	.word	0x0800da5d
 800baf4:	0800db3d 	.word	0x0800db3d

0800baf8 <_Bfree>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	69c6      	ldr	r6, [r0, #28]
 800bafc:	4605      	mov	r5, r0
 800bafe:	460c      	mov	r4, r1
 800bb00:	b976      	cbnz	r6, 800bb20 <_Bfree+0x28>
 800bb02:	2010      	movs	r0, #16
 800bb04:	f7fc fde2 	bl	80086cc <malloc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	61e8      	str	r0, [r5, #28]
 800bb0c:	b920      	cbnz	r0, 800bb18 <_Bfree+0x20>
 800bb0e:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <_Bfree+0x3c>)
 800bb10:	4809      	ldr	r0, [pc, #36]	; (800bb38 <_Bfree+0x40>)
 800bb12:	218f      	movs	r1, #143	; 0x8f
 800bb14:	f001 faac 	bl	800d070 <__assert_func>
 800bb18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb1c:	6006      	str	r6, [r0, #0]
 800bb1e:	60c6      	str	r6, [r0, #12]
 800bb20:	b13c      	cbz	r4, 800bb32 <_Bfree+0x3a>
 800bb22:	69eb      	ldr	r3, [r5, #28]
 800bb24:	6862      	ldr	r2, [r4, #4]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb2c:	6021      	str	r1, [r4, #0]
 800bb2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb32:	bd70      	pop	{r4, r5, r6, pc}
 800bb34:	0800da5d 	.word	0x0800da5d
 800bb38:	0800db3d 	.word	0x0800db3d

0800bb3c <__multadd>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	690d      	ldr	r5, [r1, #16]
 800bb42:	4607      	mov	r7, r0
 800bb44:	460c      	mov	r4, r1
 800bb46:	461e      	mov	r6, r3
 800bb48:	f101 0c14 	add.w	ip, r1, #20
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb52:	b299      	uxth	r1, r3
 800bb54:	fb02 6101 	mla	r1, r2, r1, r6
 800bb58:	0c1e      	lsrs	r6, r3, #16
 800bb5a:	0c0b      	lsrs	r3, r1, #16
 800bb5c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb60:	b289      	uxth	r1, r1
 800bb62:	3001      	adds	r0, #1
 800bb64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb68:	4285      	cmp	r5, r0
 800bb6a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb72:	dcec      	bgt.n	800bb4e <__multadd+0x12>
 800bb74:	b30e      	cbz	r6, 800bbba <__multadd+0x7e>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc19      	bgt.n	800bbb0 <__multadd+0x74>
 800bb7c:	6861      	ldr	r1, [r4, #4]
 800bb7e:	4638      	mov	r0, r7
 800bb80:	3101      	adds	r1, #1
 800bb82:	f7ff ff79 	bl	800ba78 <_Balloc>
 800bb86:	4680      	mov	r8, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__multadd+0x5a>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <__multadd+0x84>)
 800bb8e:	480d      	ldr	r0, [pc, #52]	; (800bbc4 <__multadd+0x88>)
 800bb90:	21ba      	movs	r1, #186	; 0xba
 800bb92:	f001 fa6d 	bl	800d070 <__assert_func>
 800bb96:	6922      	ldr	r2, [r4, #16]
 800bb98:	3202      	adds	r2, #2
 800bb9a:	f104 010c 	add.w	r1, r4, #12
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	300c      	adds	r0, #12
 800bba2:	f7fe fd18 	bl	800a5d6 <memcpy>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ffa5 	bl	800baf8 <_Bfree>
 800bbae:	4644      	mov	r4, r8
 800bbb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbb4:	3501      	adds	r5, #1
 800bbb6:	615e      	str	r6, [r3, #20]
 800bbb8:	6125      	str	r5, [r4, #16]
 800bbba:	4620      	mov	r0, r4
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	0800dacc 	.word	0x0800dacc
 800bbc4:	0800db3d 	.word	0x0800db3d

0800bbc8 <__s2b>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	4615      	mov	r5, r2
 800bbd0:	461f      	mov	r7, r3
 800bbd2:	2209      	movs	r2, #9
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	4606      	mov	r6, r0
 800bbd8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2201      	movs	r2, #1
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	db09      	blt.n	800bbf8 <__s2b+0x30>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7ff ff47 	bl	800ba78 <_Balloc>
 800bbea:	b940      	cbnz	r0, 800bbfe <__s2b+0x36>
 800bbec:	4602      	mov	r2, r0
 800bbee:	4b19      	ldr	r3, [pc, #100]	; (800bc54 <__s2b+0x8c>)
 800bbf0:	4819      	ldr	r0, [pc, #100]	; (800bc58 <__s2b+0x90>)
 800bbf2:	21d3      	movs	r1, #211	; 0xd3
 800bbf4:	f001 fa3c 	bl	800d070 <__assert_func>
 800bbf8:	0052      	lsls	r2, r2, #1
 800bbfa:	3101      	adds	r1, #1
 800bbfc:	e7f0      	b.n	800bbe0 <__s2b+0x18>
 800bbfe:	9b08      	ldr	r3, [sp, #32]
 800bc00:	6143      	str	r3, [r0, #20]
 800bc02:	2d09      	cmp	r5, #9
 800bc04:	f04f 0301 	mov.w	r3, #1
 800bc08:	6103      	str	r3, [r0, #16]
 800bc0a:	dd16      	ble.n	800bc3a <__s2b+0x72>
 800bc0c:	f104 0909 	add.w	r9, r4, #9
 800bc10:	46c8      	mov	r8, r9
 800bc12:	442c      	add	r4, r5
 800bc14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bc18:	4601      	mov	r1, r0
 800bc1a:	3b30      	subs	r3, #48	; 0x30
 800bc1c:	220a      	movs	r2, #10
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7ff ff8c 	bl	800bb3c <__multadd>
 800bc24:	45a0      	cmp	r8, r4
 800bc26:	d1f5      	bne.n	800bc14 <__s2b+0x4c>
 800bc28:	f1a5 0408 	sub.w	r4, r5, #8
 800bc2c:	444c      	add	r4, r9
 800bc2e:	1b2d      	subs	r5, r5, r4
 800bc30:	1963      	adds	r3, r4, r5
 800bc32:	42bb      	cmp	r3, r7
 800bc34:	db04      	blt.n	800bc40 <__s2b+0x78>
 800bc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc3a:	340a      	adds	r4, #10
 800bc3c:	2509      	movs	r5, #9
 800bc3e:	e7f6      	b.n	800bc2e <__s2b+0x66>
 800bc40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc44:	4601      	mov	r1, r0
 800bc46:	3b30      	subs	r3, #48	; 0x30
 800bc48:	220a      	movs	r2, #10
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff ff76 	bl	800bb3c <__multadd>
 800bc50:	e7ee      	b.n	800bc30 <__s2b+0x68>
 800bc52:	bf00      	nop
 800bc54:	0800dacc 	.word	0x0800dacc
 800bc58:	0800db3d 	.word	0x0800db3d

0800bc5c <__hi0bits>:
 800bc5c:	0c03      	lsrs	r3, r0, #16
 800bc5e:	041b      	lsls	r3, r3, #16
 800bc60:	b9d3      	cbnz	r3, 800bc98 <__hi0bits+0x3c>
 800bc62:	0400      	lsls	r0, r0, #16
 800bc64:	2310      	movs	r3, #16
 800bc66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc6a:	bf04      	itt	eq
 800bc6c:	0200      	lsleq	r0, r0, #8
 800bc6e:	3308      	addeq	r3, #8
 800bc70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc74:	bf04      	itt	eq
 800bc76:	0100      	lsleq	r0, r0, #4
 800bc78:	3304      	addeq	r3, #4
 800bc7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc7e:	bf04      	itt	eq
 800bc80:	0080      	lsleq	r0, r0, #2
 800bc82:	3302      	addeq	r3, #2
 800bc84:	2800      	cmp	r0, #0
 800bc86:	db05      	blt.n	800bc94 <__hi0bits+0x38>
 800bc88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc8c:	f103 0301 	add.w	r3, r3, #1
 800bc90:	bf08      	it	eq
 800bc92:	2320      	moveq	r3, #32
 800bc94:	4618      	mov	r0, r3
 800bc96:	4770      	bx	lr
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e7e4      	b.n	800bc66 <__hi0bits+0xa>

0800bc9c <__lo0bits>:
 800bc9c:	6803      	ldr	r3, [r0, #0]
 800bc9e:	f013 0207 	ands.w	r2, r3, #7
 800bca2:	d00c      	beq.n	800bcbe <__lo0bits+0x22>
 800bca4:	07d9      	lsls	r1, r3, #31
 800bca6:	d422      	bmi.n	800bcee <__lo0bits+0x52>
 800bca8:	079a      	lsls	r2, r3, #30
 800bcaa:	bf49      	itett	mi
 800bcac:	085b      	lsrmi	r3, r3, #1
 800bcae:	089b      	lsrpl	r3, r3, #2
 800bcb0:	6003      	strmi	r3, [r0, #0]
 800bcb2:	2201      	movmi	r2, #1
 800bcb4:	bf5c      	itt	pl
 800bcb6:	6003      	strpl	r3, [r0, #0]
 800bcb8:	2202      	movpl	r2, #2
 800bcba:	4610      	mov	r0, r2
 800bcbc:	4770      	bx	lr
 800bcbe:	b299      	uxth	r1, r3
 800bcc0:	b909      	cbnz	r1, 800bcc6 <__lo0bits+0x2a>
 800bcc2:	0c1b      	lsrs	r3, r3, #16
 800bcc4:	2210      	movs	r2, #16
 800bcc6:	b2d9      	uxtb	r1, r3
 800bcc8:	b909      	cbnz	r1, 800bcce <__lo0bits+0x32>
 800bcca:	3208      	adds	r2, #8
 800bccc:	0a1b      	lsrs	r3, r3, #8
 800bcce:	0719      	lsls	r1, r3, #28
 800bcd0:	bf04      	itt	eq
 800bcd2:	091b      	lsreq	r3, r3, #4
 800bcd4:	3204      	addeq	r2, #4
 800bcd6:	0799      	lsls	r1, r3, #30
 800bcd8:	bf04      	itt	eq
 800bcda:	089b      	lsreq	r3, r3, #2
 800bcdc:	3202      	addeq	r2, #2
 800bcde:	07d9      	lsls	r1, r3, #31
 800bce0:	d403      	bmi.n	800bcea <__lo0bits+0x4e>
 800bce2:	085b      	lsrs	r3, r3, #1
 800bce4:	f102 0201 	add.w	r2, r2, #1
 800bce8:	d003      	beq.n	800bcf2 <__lo0bits+0x56>
 800bcea:	6003      	str	r3, [r0, #0]
 800bcec:	e7e5      	b.n	800bcba <__lo0bits+0x1e>
 800bcee:	2200      	movs	r2, #0
 800bcf0:	e7e3      	b.n	800bcba <__lo0bits+0x1e>
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	e7e1      	b.n	800bcba <__lo0bits+0x1e>
	...

0800bcf8 <__i2b>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	f7ff febb 	bl	800ba78 <_Balloc>
 800bd02:	4602      	mov	r2, r0
 800bd04:	b928      	cbnz	r0, 800bd12 <__i2b+0x1a>
 800bd06:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <__i2b+0x24>)
 800bd08:	4805      	ldr	r0, [pc, #20]	; (800bd20 <__i2b+0x28>)
 800bd0a:	f240 1145 	movw	r1, #325	; 0x145
 800bd0e:	f001 f9af 	bl	800d070 <__assert_func>
 800bd12:	2301      	movs	r3, #1
 800bd14:	6144      	str	r4, [r0, #20]
 800bd16:	6103      	str	r3, [r0, #16]
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800dacc 	.word	0x0800dacc
 800bd20:	0800db3d 	.word	0x0800db3d

0800bd24 <__multiply>:
 800bd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	4691      	mov	r9, r2
 800bd2a:	690a      	ldr	r2, [r1, #16]
 800bd2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bfb8      	it	lt
 800bd34:	460b      	movlt	r3, r1
 800bd36:	460c      	mov	r4, r1
 800bd38:	bfbc      	itt	lt
 800bd3a:	464c      	movlt	r4, r9
 800bd3c:	4699      	movlt	r9, r3
 800bd3e:	6927      	ldr	r7, [r4, #16]
 800bd40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd44:	68a3      	ldr	r3, [r4, #8]
 800bd46:	6861      	ldr	r1, [r4, #4]
 800bd48:	eb07 060a 	add.w	r6, r7, sl
 800bd4c:	42b3      	cmp	r3, r6
 800bd4e:	b085      	sub	sp, #20
 800bd50:	bfb8      	it	lt
 800bd52:	3101      	addlt	r1, #1
 800bd54:	f7ff fe90 	bl	800ba78 <_Balloc>
 800bd58:	b930      	cbnz	r0, 800bd68 <__multiply+0x44>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	4b44      	ldr	r3, [pc, #272]	; (800be70 <__multiply+0x14c>)
 800bd5e:	4845      	ldr	r0, [pc, #276]	; (800be74 <__multiply+0x150>)
 800bd60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd64:	f001 f984 	bl	800d070 <__assert_func>
 800bd68:	f100 0514 	add.w	r5, r0, #20
 800bd6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd70:	462b      	mov	r3, r5
 800bd72:	2200      	movs	r2, #0
 800bd74:	4543      	cmp	r3, r8
 800bd76:	d321      	bcc.n	800bdbc <__multiply+0x98>
 800bd78:	f104 0314 	add.w	r3, r4, #20
 800bd7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd80:	f109 0314 	add.w	r3, r9, #20
 800bd84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd88:	9202      	str	r2, [sp, #8]
 800bd8a:	1b3a      	subs	r2, r7, r4
 800bd8c:	3a15      	subs	r2, #21
 800bd8e:	f022 0203 	bic.w	r2, r2, #3
 800bd92:	3204      	adds	r2, #4
 800bd94:	f104 0115 	add.w	r1, r4, #21
 800bd98:	428f      	cmp	r7, r1
 800bd9a:	bf38      	it	cc
 800bd9c:	2204      	movcc	r2, #4
 800bd9e:	9201      	str	r2, [sp, #4]
 800bda0:	9a02      	ldr	r2, [sp, #8]
 800bda2:	9303      	str	r3, [sp, #12]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d80c      	bhi.n	800bdc2 <__multiply+0x9e>
 800bda8:	2e00      	cmp	r6, #0
 800bdaa:	dd03      	ble.n	800bdb4 <__multiply+0x90>
 800bdac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d05b      	beq.n	800be6c <__multiply+0x148>
 800bdb4:	6106      	str	r6, [r0, #16]
 800bdb6:	b005      	add	sp, #20
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	f843 2b04 	str.w	r2, [r3], #4
 800bdc0:	e7d8      	b.n	800bd74 <__multiply+0x50>
 800bdc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdc6:	f1ba 0f00 	cmp.w	sl, #0
 800bdca:	d024      	beq.n	800be16 <__multiply+0xf2>
 800bdcc:	f104 0e14 	add.w	lr, r4, #20
 800bdd0:	46a9      	mov	r9, r5
 800bdd2:	f04f 0c00 	mov.w	ip, #0
 800bdd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdda:	f8d9 1000 	ldr.w	r1, [r9]
 800bdde:	fa1f fb82 	uxth.w	fp, r2
 800bde2:	b289      	uxth	r1, r1
 800bde4:	fb0a 110b 	mla	r1, sl, fp, r1
 800bde8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdec:	f8d9 2000 	ldr.w	r2, [r9]
 800bdf0:	4461      	add	r1, ip
 800bdf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdfe:	b289      	uxth	r1, r1
 800be00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be04:	4577      	cmp	r7, lr
 800be06:	f849 1b04 	str.w	r1, [r9], #4
 800be0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be0e:	d8e2      	bhi.n	800bdd6 <__multiply+0xb2>
 800be10:	9a01      	ldr	r2, [sp, #4]
 800be12:	f845 c002 	str.w	ip, [r5, r2]
 800be16:	9a03      	ldr	r2, [sp, #12]
 800be18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be1c:	3304      	adds	r3, #4
 800be1e:	f1b9 0f00 	cmp.w	r9, #0
 800be22:	d021      	beq.n	800be68 <__multiply+0x144>
 800be24:	6829      	ldr	r1, [r5, #0]
 800be26:	f104 0c14 	add.w	ip, r4, #20
 800be2a:	46ae      	mov	lr, r5
 800be2c:	f04f 0a00 	mov.w	sl, #0
 800be30:	f8bc b000 	ldrh.w	fp, [ip]
 800be34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be38:	fb09 220b 	mla	r2, r9, fp, r2
 800be3c:	4452      	add	r2, sl
 800be3e:	b289      	uxth	r1, r1
 800be40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be44:	f84e 1b04 	str.w	r1, [lr], #4
 800be48:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be50:	f8be 1000 	ldrh.w	r1, [lr]
 800be54:	fb09 110a 	mla	r1, r9, sl, r1
 800be58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be5c:	4567      	cmp	r7, ip
 800be5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be62:	d8e5      	bhi.n	800be30 <__multiply+0x10c>
 800be64:	9a01      	ldr	r2, [sp, #4]
 800be66:	50a9      	str	r1, [r5, r2]
 800be68:	3504      	adds	r5, #4
 800be6a:	e799      	b.n	800bda0 <__multiply+0x7c>
 800be6c:	3e01      	subs	r6, #1
 800be6e:	e79b      	b.n	800bda8 <__multiply+0x84>
 800be70:	0800dacc 	.word	0x0800dacc
 800be74:	0800db3d 	.word	0x0800db3d

0800be78 <__pow5mult>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	4615      	mov	r5, r2
 800be7e:	f012 0203 	ands.w	r2, r2, #3
 800be82:	4606      	mov	r6, r0
 800be84:	460f      	mov	r7, r1
 800be86:	d007      	beq.n	800be98 <__pow5mult+0x20>
 800be88:	4c25      	ldr	r4, [pc, #148]	; (800bf20 <__pow5mult+0xa8>)
 800be8a:	3a01      	subs	r2, #1
 800be8c:	2300      	movs	r3, #0
 800be8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be92:	f7ff fe53 	bl	800bb3c <__multadd>
 800be96:	4607      	mov	r7, r0
 800be98:	10ad      	asrs	r5, r5, #2
 800be9a:	d03d      	beq.n	800bf18 <__pow5mult+0xa0>
 800be9c:	69f4      	ldr	r4, [r6, #28]
 800be9e:	b97c      	cbnz	r4, 800bec0 <__pow5mult+0x48>
 800bea0:	2010      	movs	r0, #16
 800bea2:	f7fc fc13 	bl	80086cc <malloc>
 800bea6:	4602      	mov	r2, r0
 800bea8:	61f0      	str	r0, [r6, #28]
 800beaa:	b928      	cbnz	r0, 800beb8 <__pow5mult+0x40>
 800beac:	4b1d      	ldr	r3, [pc, #116]	; (800bf24 <__pow5mult+0xac>)
 800beae:	481e      	ldr	r0, [pc, #120]	; (800bf28 <__pow5mult+0xb0>)
 800beb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800beb4:	f001 f8dc 	bl	800d070 <__assert_func>
 800beb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bebc:	6004      	str	r4, [r0, #0]
 800bebe:	60c4      	str	r4, [r0, #12]
 800bec0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bec8:	b94c      	cbnz	r4, 800bede <__pow5mult+0x66>
 800beca:	f240 2171 	movw	r1, #625	; 0x271
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ff12 	bl	800bcf8 <__i2b>
 800bed4:	2300      	movs	r3, #0
 800bed6:	f8c8 0008 	str.w	r0, [r8, #8]
 800beda:	4604      	mov	r4, r0
 800bedc:	6003      	str	r3, [r0, #0]
 800bede:	f04f 0900 	mov.w	r9, #0
 800bee2:	07eb      	lsls	r3, r5, #31
 800bee4:	d50a      	bpl.n	800befc <__pow5mult+0x84>
 800bee6:	4639      	mov	r1, r7
 800bee8:	4622      	mov	r2, r4
 800beea:	4630      	mov	r0, r6
 800beec:	f7ff ff1a 	bl	800bd24 <__multiply>
 800bef0:	4639      	mov	r1, r7
 800bef2:	4680      	mov	r8, r0
 800bef4:	4630      	mov	r0, r6
 800bef6:	f7ff fdff 	bl	800baf8 <_Bfree>
 800befa:	4647      	mov	r7, r8
 800befc:	106d      	asrs	r5, r5, #1
 800befe:	d00b      	beq.n	800bf18 <__pow5mult+0xa0>
 800bf00:	6820      	ldr	r0, [r4, #0]
 800bf02:	b938      	cbnz	r0, 800bf14 <__pow5mult+0x9c>
 800bf04:	4622      	mov	r2, r4
 800bf06:	4621      	mov	r1, r4
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7ff ff0b 	bl	800bd24 <__multiply>
 800bf0e:	6020      	str	r0, [r4, #0]
 800bf10:	f8c0 9000 	str.w	r9, [r0]
 800bf14:	4604      	mov	r4, r0
 800bf16:	e7e4      	b.n	800bee2 <__pow5mult+0x6a>
 800bf18:	4638      	mov	r0, r7
 800bf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf1e:	bf00      	nop
 800bf20:	0800dc88 	.word	0x0800dc88
 800bf24:	0800da5d 	.word	0x0800da5d
 800bf28:	0800db3d 	.word	0x0800db3d

0800bf2c <__lshift>:
 800bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf30:	460c      	mov	r4, r1
 800bf32:	6849      	ldr	r1, [r1, #4]
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	4691      	mov	r9, r2
 800bf40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf44:	f108 0601 	add.w	r6, r8, #1
 800bf48:	42b3      	cmp	r3, r6
 800bf4a:	db0b      	blt.n	800bf64 <__lshift+0x38>
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	f7ff fd93 	bl	800ba78 <_Balloc>
 800bf52:	4605      	mov	r5, r0
 800bf54:	b948      	cbnz	r0, 800bf6a <__lshift+0x3e>
 800bf56:	4602      	mov	r2, r0
 800bf58:	4b28      	ldr	r3, [pc, #160]	; (800bffc <__lshift+0xd0>)
 800bf5a:	4829      	ldr	r0, [pc, #164]	; (800c000 <__lshift+0xd4>)
 800bf5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf60:	f001 f886 	bl	800d070 <__assert_func>
 800bf64:	3101      	adds	r1, #1
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	e7ee      	b.n	800bf48 <__lshift+0x1c>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f100 0114 	add.w	r1, r0, #20
 800bf70:	f100 0210 	add.w	r2, r0, #16
 800bf74:	4618      	mov	r0, r3
 800bf76:	4553      	cmp	r3, sl
 800bf78:	db33      	blt.n	800bfe2 <__lshift+0xb6>
 800bf7a:	6920      	ldr	r0, [r4, #16]
 800bf7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf80:	f104 0314 	add.w	r3, r4, #20
 800bf84:	f019 091f 	ands.w	r9, r9, #31
 800bf88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf90:	d02b      	beq.n	800bfea <__lshift+0xbe>
 800bf92:	f1c9 0e20 	rsb	lr, r9, #32
 800bf96:	468a      	mov	sl, r1
 800bf98:	2200      	movs	r2, #0
 800bf9a:	6818      	ldr	r0, [r3, #0]
 800bf9c:	fa00 f009 	lsl.w	r0, r0, r9
 800bfa0:	4310      	orrs	r0, r2
 800bfa2:	f84a 0b04 	str.w	r0, [sl], #4
 800bfa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfaa:	459c      	cmp	ip, r3
 800bfac:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfb0:	d8f3      	bhi.n	800bf9a <__lshift+0x6e>
 800bfb2:	ebac 0304 	sub.w	r3, ip, r4
 800bfb6:	3b15      	subs	r3, #21
 800bfb8:	f023 0303 	bic.w	r3, r3, #3
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	f104 0015 	add.w	r0, r4, #21
 800bfc2:	4584      	cmp	ip, r0
 800bfc4:	bf38      	it	cc
 800bfc6:	2304      	movcc	r3, #4
 800bfc8:	50ca      	str	r2, [r1, r3]
 800bfca:	b10a      	cbz	r2, 800bfd0 <__lshift+0xa4>
 800bfcc:	f108 0602 	add.w	r6, r8, #2
 800bfd0:	3e01      	subs	r6, #1
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	612e      	str	r6, [r5, #16]
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	f7ff fd8e 	bl	800baf8 <_Bfree>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	e7c5      	b.n	800bf76 <__lshift+0x4a>
 800bfea:	3904      	subs	r1, #4
 800bfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bff4:	459c      	cmp	ip, r3
 800bff6:	d8f9      	bhi.n	800bfec <__lshift+0xc0>
 800bff8:	e7ea      	b.n	800bfd0 <__lshift+0xa4>
 800bffa:	bf00      	nop
 800bffc:	0800dacc 	.word	0x0800dacc
 800c000:	0800db3d 	.word	0x0800db3d

0800c004 <__mcmp>:
 800c004:	b530      	push	{r4, r5, lr}
 800c006:	6902      	ldr	r2, [r0, #16]
 800c008:	690c      	ldr	r4, [r1, #16]
 800c00a:	1b12      	subs	r2, r2, r4
 800c00c:	d10e      	bne.n	800c02c <__mcmp+0x28>
 800c00e:	f100 0314 	add.w	r3, r0, #20
 800c012:	3114      	adds	r1, #20
 800c014:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c018:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c01c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c020:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c024:	42a5      	cmp	r5, r4
 800c026:	d003      	beq.n	800c030 <__mcmp+0x2c>
 800c028:	d305      	bcc.n	800c036 <__mcmp+0x32>
 800c02a:	2201      	movs	r2, #1
 800c02c:	4610      	mov	r0, r2
 800c02e:	bd30      	pop	{r4, r5, pc}
 800c030:	4283      	cmp	r3, r0
 800c032:	d3f3      	bcc.n	800c01c <__mcmp+0x18>
 800c034:	e7fa      	b.n	800c02c <__mcmp+0x28>
 800c036:	f04f 32ff 	mov.w	r2, #4294967295
 800c03a:	e7f7      	b.n	800c02c <__mcmp+0x28>

0800c03c <__mdiff>:
 800c03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	460c      	mov	r4, r1
 800c042:	4606      	mov	r6, r0
 800c044:	4611      	mov	r1, r2
 800c046:	4620      	mov	r0, r4
 800c048:	4690      	mov	r8, r2
 800c04a:	f7ff ffdb 	bl	800c004 <__mcmp>
 800c04e:	1e05      	subs	r5, r0, #0
 800c050:	d110      	bne.n	800c074 <__mdiff+0x38>
 800c052:	4629      	mov	r1, r5
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff fd0f 	bl	800ba78 <_Balloc>
 800c05a:	b930      	cbnz	r0, 800c06a <__mdiff+0x2e>
 800c05c:	4b3a      	ldr	r3, [pc, #232]	; (800c148 <__mdiff+0x10c>)
 800c05e:	4602      	mov	r2, r0
 800c060:	f240 2137 	movw	r1, #567	; 0x237
 800c064:	4839      	ldr	r0, [pc, #228]	; (800c14c <__mdiff+0x110>)
 800c066:	f001 f803 	bl	800d070 <__assert_func>
 800c06a:	2301      	movs	r3, #1
 800c06c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	bfa4      	itt	ge
 800c076:	4643      	movge	r3, r8
 800c078:	46a0      	movge	r8, r4
 800c07a:	4630      	mov	r0, r6
 800c07c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c080:	bfa6      	itte	ge
 800c082:	461c      	movge	r4, r3
 800c084:	2500      	movge	r5, #0
 800c086:	2501      	movlt	r5, #1
 800c088:	f7ff fcf6 	bl	800ba78 <_Balloc>
 800c08c:	b920      	cbnz	r0, 800c098 <__mdiff+0x5c>
 800c08e:	4b2e      	ldr	r3, [pc, #184]	; (800c148 <__mdiff+0x10c>)
 800c090:	4602      	mov	r2, r0
 800c092:	f240 2145 	movw	r1, #581	; 0x245
 800c096:	e7e5      	b.n	800c064 <__mdiff+0x28>
 800c098:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c09c:	6926      	ldr	r6, [r4, #16]
 800c09e:	60c5      	str	r5, [r0, #12]
 800c0a0:	f104 0914 	add.w	r9, r4, #20
 800c0a4:	f108 0514 	add.w	r5, r8, #20
 800c0a8:	f100 0e14 	add.w	lr, r0, #20
 800c0ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0b4:	f108 0210 	add.w	r2, r8, #16
 800c0b8:	46f2      	mov	sl, lr
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0c4:	fa11 f88b 	uxtah	r8, r1, fp
 800c0c8:	b299      	uxth	r1, r3
 800c0ca:	0c1b      	lsrs	r3, r3, #16
 800c0cc:	eba8 0801 	sub.w	r8, r8, r1
 800c0d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0d8:	fa1f f888 	uxth.w	r8, r8
 800c0dc:	1419      	asrs	r1, r3, #16
 800c0de:	454e      	cmp	r6, r9
 800c0e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0e4:	f84a 3b04 	str.w	r3, [sl], #4
 800c0e8:	d8e8      	bhi.n	800c0bc <__mdiff+0x80>
 800c0ea:	1b33      	subs	r3, r6, r4
 800c0ec:	3b15      	subs	r3, #21
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	3415      	adds	r4, #21
 800c0f6:	42a6      	cmp	r6, r4
 800c0f8:	bf38      	it	cc
 800c0fa:	2304      	movcc	r3, #4
 800c0fc:	441d      	add	r5, r3
 800c0fe:	4473      	add	r3, lr
 800c100:	469e      	mov	lr, r3
 800c102:	462e      	mov	r6, r5
 800c104:	4566      	cmp	r6, ip
 800c106:	d30e      	bcc.n	800c126 <__mdiff+0xea>
 800c108:	f10c 0203 	add.w	r2, ip, #3
 800c10c:	1b52      	subs	r2, r2, r5
 800c10e:	f022 0203 	bic.w	r2, r2, #3
 800c112:	3d03      	subs	r5, #3
 800c114:	45ac      	cmp	ip, r5
 800c116:	bf38      	it	cc
 800c118:	2200      	movcc	r2, #0
 800c11a:	4413      	add	r3, r2
 800c11c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c120:	b17a      	cbz	r2, 800c142 <__mdiff+0x106>
 800c122:	6107      	str	r7, [r0, #16]
 800c124:	e7a4      	b.n	800c070 <__mdiff+0x34>
 800c126:	f856 8b04 	ldr.w	r8, [r6], #4
 800c12a:	fa11 f288 	uxtah	r2, r1, r8
 800c12e:	1414      	asrs	r4, r2, #16
 800c130:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c134:	b292      	uxth	r2, r2
 800c136:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c13a:	f84e 2b04 	str.w	r2, [lr], #4
 800c13e:	1421      	asrs	r1, r4, #16
 800c140:	e7e0      	b.n	800c104 <__mdiff+0xc8>
 800c142:	3f01      	subs	r7, #1
 800c144:	e7ea      	b.n	800c11c <__mdiff+0xe0>
 800c146:	bf00      	nop
 800c148:	0800dacc 	.word	0x0800dacc
 800c14c:	0800db3d 	.word	0x0800db3d

0800c150 <__ulp>:
 800c150:	b082      	sub	sp, #8
 800c152:	ed8d 0b00 	vstr	d0, [sp]
 800c156:	9a01      	ldr	r2, [sp, #4]
 800c158:	4b0f      	ldr	r3, [pc, #60]	; (800c198 <__ulp+0x48>)
 800c15a:	4013      	ands	r3, r2
 800c15c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c160:	2b00      	cmp	r3, #0
 800c162:	dc08      	bgt.n	800c176 <__ulp+0x26>
 800c164:	425b      	negs	r3, r3
 800c166:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c16a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c16e:	da04      	bge.n	800c17a <__ulp+0x2a>
 800c170:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c174:	4113      	asrs	r3, r2
 800c176:	2200      	movs	r2, #0
 800c178:	e008      	b.n	800c18c <__ulp+0x3c>
 800c17a:	f1a2 0314 	sub.w	r3, r2, #20
 800c17e:	2b1e      	cmp	r3, #30
 800c180:	bfda      	itte	le
 800c182:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c186:	40da      	lsrle	r2, r3
 800c188:	2201      	movgt	r2, #1
 800c18a:	2300      	movs	r3, #0
 800c18c:	4619      	mov	r1, r3
 800c18e:	4610      	mov	r0, r2
 800c190:	ec41 0b10 	vmov	d0, r0, r1
 800c194:	b002      	add	sp, #8
 800c196:	4770      	bx	lr
 800c198:	7ff00000 	.word	0x7ff00000

0800c19c <__b2d>:
 800c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a0:	6906      	ldr	r6, [r0, #16]
 800c1a2:	f100 0814 	add.w	r8, r0, #20
 800c1a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c1aa:	1f37      	subs	r7, r6, #4
 800c1ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7ff fd53 	bl	800bc5c <__hi0bits>
 800c1b6:	f1c0 0320 	rsb	r3, r0, #32
 800c1ba:	280a      	cmp	r0, #10
 800c1bc:	600b      	str	r3, [r1, #0]
 800c1be:	491b      	ldr	r1, [pc, #108]	; (800c22c <__b2d+0x90>)
 800c1c0:	dc15      	bgt.n	800c1ee <__b2d+0x52>
 800c1c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c1c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c1ca:	45b8      	cmp	r8, r7
 800c1cc:	ea43 0501 	orr.w	r5, r3, r1
 800c1d0:	bf34      	ite	cc
 800c1d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1d6:	2300      	movcs	r3, #0
 800c1d8:	3015      	adds	r0, #21
 800c1da:	fa02 f000 	lsl.w	r0, r2, r0
 800c1de:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1e2:	4303      	orrs	r3, r0
 800c1e4:	461c      	mov	r4, r3
 800c1e6:	ec45 4b10 	vmov	d0, r4, r5
 800c1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ee:	45b8      	cmp	r8, r7
 800c1f0:	bf3a      	itte	cc
 800c1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c1fa:	2300      	movcs	r3, #0
 800c1fc:	380b      	subs	r0, #11
 800c1fe:	d012      	beq.n	800c226 <__b2d+0x8a>
 800c200:	f1c0 0120 	rsb	r1, r0, #32
 800c204:	fa23 f401 	lsr.w	r4, r3, r1
 800c208:	4082      	lsls	r2, r0
 800c20a:	4322      	orrs	r2, r4
 800c20c:	4547      	cmp	r7, r8
 800c20e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c212:	bf8c      	ite	hi
 800c214:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c218:	2200      	movls	r2, #0
 800c21a:	4083      	lsls	r3, r0
 800c21c:	40ca      	lsrs	r2, r1
 800c21e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c222:	4313      	orrs	r3, r2
 800c224:	e7de      	b.n	800c1e4 <__b2d+0x48>
 800c226:	ea42 0501 	orr.w	r5, r2, r1
 800c22a:	e7db      	b.n	800c1e4 <__b2d+0x48>
 800c22c:	3ff00000 	.word	0x3ff00000

0800c230 <__d2b>:
 800c230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c234:	460f      	mov	r7, r1
 800c236:	2101      	movs	r1, #1
 800c238:	ec59 8b10 	vmov	r8, r9, d0
 800c23c:	4616      	mov	r6, r2
 800c23e:	f7ff fc1b 	bl	800ba78 <_Balloc>
 800c242:	4604      	mov	r4, r0
 800c244:	b930      	cbnz	r0, 800c254 <__d2b+0x24>
 800c246:	4602      	mov	r2, r0
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <__d2b+0xac>)
 800c24a:	4825      	ldr	r0, [pc, #148]	; (800c2e0 <__d2b+0xb0>)
 800c24c:	f240 310f 	movw	r1, #783	; 0x30f
 800c250:	f000 ff0e 	bl	800d070 <__assert_func>
 800c254:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c25c:	bb2d      	cbnz	r5, 800c2aa <__d2b+0x7a>
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	f1b8 0300 	subs.w	r3, r8, #0
 800c264:	d026      	beq.n	800c2b4 <__d2b+0x84>
 800c266:	4668      	mov	r0, sp
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	f7ff fd17 	bl	800bc9c <__lo0bits>
 800c26e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c272:	b1e8      	cbz	r0, 800c2b0 <__d2b+0x80>
 800c274:	f1c0 0320 	rsb	r3, r0, #32
 800c278:	fa02 f303 	lsl.w	r3, r2, r3
 800c27c:	430b      	orrs	r3, r1
 800c27e:	40c2      	lsrs	r2, r0
 800c280:	6163      	str	r3, [r4, #20]
 800c282:	9201      	str	r2, [sp, #4]
 800c284:	9b01      	ldr	r3, [sp, #4]
 800c286:	61a3      	str	r3, [r4, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	bf14      	ite	ne
 800c28c:	2202      	movne	r2, #2
 800c28e:	2201      	moveq	r2, #1
 800c290:	6122      	str	r2, [r4, #16]
 800c292:	b1bd      	cbz	r5, 800c2c4 <__d2b+0x94>
 800c294:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c298:	4405      	add	r5, r0
 800c29a:	603d      	str	r5, [r7, #0]
 800c29c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2a0:	6030      	str	r0, [r6, #0]
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	b003      	add	sp, #12
 800c2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2ae:	e7d6      	b.n	800c25e <__d2b+0x2e>
 800c2b0:	6161      	str	r1, [r4, #20]
 800c2b2:	e7e7      	b.n	800c284 <__d2b+0x54>
 800c2b4:	a801      	add	r0, sp, #4
 800c2b6:	f7ff fcf1 	bl	800bc9c <__lo0bits>
 800c2ba:	9b01      	ldr	r3, [sp, #4]
 800c2bc:	6163      	str	r3, [r4, #20]
 800c2be:	3020      	adds	r0, #32
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	e7e5      	b.n	800c290 <__d2b+0x60>
 800c2c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c2cc:	6038      	str	r0, [r7, #0]
 800c2ce:	6918      	ldr	r0, [r3, #16]
 800c2d0:	f7ff fcc4 	bl	800bc5c <__hi0bits>
 800c2d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2d8:	e7e2      	b.n	800c2a0 <__d2b+0x70>
 800c2da:	bf00      	nop
 800c2dc:	0800dacc 	.word	0x0800dacc
 800c2e0:	0800db3d 	.word	0x0800db3d

0800c2e4 <__ratio>:
 800c2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e8:	4688      	mov	r8, r1
 800c2ea:	4669      	mov	r1, sp
 800c2ec:	4681      	mov	r9, r0
 800c2ee:	f7ff ff55 	bl	800c19c <__b2d>
 800c2f2:	a901      	add	r1, sp, #4
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	ec55 4b10 	vmov	r4, r5, d0
 800c2fa:	f7ff ff4f 	bl	800c19c <__b2d>
 800c2fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c302:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c306:	eba3 0c02 	sub.w	ip, r3, r2
 800c30a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c314:	ec51 0b10 	vmov	r0, r1, d0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	bfd6      	itet	le
 800c31c:	460a      	movle	r2, r1
 800c31e:	462a      	movgt	r2, r5
 800c320:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c324:	468b      	mov	fp, r1
 800c326:	462f      	mov	r7, r5
 800c328:	bfd4      	ite	le
 800c32a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c32e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c332:	4620      	mov	r0, r4
 800c334:	ee10 2a10 	vmov	r2, s0
 800c338:	465b      	mov	r3, fp
 800c33a:	4639      	mov	r1, r7
 800c33c:	f7f4 fa86 	bl	800084c <__aeabi_ddiv>
 800c340:	ec41 0b10 	vmov	d0, r0, r1
 800c344:	b003      	add	sp, #12
 800c346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c34a <__copybits>:
 800c34a:	3901      	subs	r1, #1
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	1149      	asrs	r1, r1, #5
 800c350:	6914      	ldr	r4, [r2, #16]
 800c352:	3101      	adds	r1, #1
 800c354:	f102 0314 	add.w	r3, r2, #20
 800c358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c35c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c360:	1f05      	subs	r5, r0, #4
 800c362:	42a3      	cmp	r3, r4
 800c364:	d30c      	bcc.n	800c380 <__copybits+0x36>
 800c366:	1aa3      	subs	r3, r4, r2
 800c368:	3b11      	subs	r3, #17
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	3211      	adds	r2, #17
 800c370:	42a2      	cmp	r2, r4
 800c372:	bf88      	it	hi
 800c374:	2300      	movhi	r3, #0
 800c376:	4418      	add	r0, r3
 800c378:	2300      	movs	r3, #0
 800c37a:	4288      	cmp	r0, r1
 800c37c:	d305      	bcc.n	800c38a <__copybits+0x40>
 800c37e:	bd70      	pop	{r4, r5, r6, pc}
 800c380:	f853 6b04 	ldr.w	r6, [r3], #4
 800c384:	f845 6f04 	str.w	r6, [r5, #4]!
 800c388:	e7eb      	b.n	800c362 <__copybits+0x18>
 800c38a:	f840 3b04 	str.w	r3, [r0], #4
 800c38e:	e7f4      	b.n	800c37a <__copybits+0x30>

0800c390 <__any_on>:
 800c390:	f100 0214 	add.w	r2, r0, #20
 800c394:	6900      	ldr	r0, [r0, #16]
 800c396:	114b      	asrs	r3, r1, #5
 800c398:	4298      	cmp	r0, r3
 800c39a:	b510      	push	{r4, lr}
 800c39c:	db11      	blt.n	800c3c2 <__any_on+0x32>
 800c39e:	dd0a      	ble.n	800c3b6 <__any_on+0x26>
 800c3a0:	f011 011f 	ands.w	r1, r1, #31
 800c3a4:	d007      	beq.n	800c3b6 <__any_on+0x26>
 800c3a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c3aa:	fa24 f001 	lsr.w	r0, r4, r1
 800c3ae:	fa00 f101 	lsl.w	r1, r0, r1
 800c3b2:	428c      	cmp	r4, r1
 800c3b4:	d10b      	bne.n	800c3ce <__any_on+0x3e>
 800c3b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d803      	bhi.n	800c3c6 <__any_on+0x36>
 800c3be:	2000      	movs	r0, #0
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	e7f7      	b.n	800c3b6 <__any_on+0x26>
 800c3c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	d0f5      	beq.n	800c3ba <__any_on+0x2a>
 800c3ce:	2001      	movs	r0, #1
 800c3d0:	e7f6      	b.n	800c3c0 <__any_on+0x30>

0800c3d2 <_malloc_usable_size_r>:
 800c3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d6:	1f18      	subs	r0, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bfbc      	itt	lt
 800c3dc:	580b      	ldrlt	r3, [r1, r0]
 800c3de:	18c0      	addlt	r0, r0, r3
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <_strtol_l.constprop.0>:
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ea:	d001      	beq.n	800c3f0 <_strtol_l.constprop.0+0xc>
 800c3ec:	2b24      	cmp	r3, #36	; 0x24
 800c3ee:	d906      	bls.n	800c3fe <_strtol_l.constprop.0+0x1a>
 800c3f0:	f7fe f8c4 	bl	800a57c <__errno>
 800c3f4:	2316      	movs	r3, #22
 800c3f6:	6003      	str	r3, [r0, #0]
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4e4 <_strtol_l.constprop.0+0x100>
 800c402:	460d      	mov	r5, r1
 800c404:	462e      	mov	r6, r5
 800c406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c40a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c40e:	f017 0708 	ands.w	r7, r7, #8
 800c412:	d1f7      	bne.n	800c404 <_strtol_l.constprop.0+0x20>
 800c414:	2c2d      	cmp	r4, #45	; 0x2d
 800c416:	d132      	bne.n	800c47e <_strtol_l.constprop.0+0x9a>
 800c418:	782c      	ldrb	r4, [r5, #0]
 800c41a:	2701      	movs	r7, #1
 800c41c:	1cb5      	adds	r5, r6, #2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d05b      	beq.n	800c4da <_strtol_l.constprop.0+0xf6>
 800c422:	2b10      	cmp	r3, #16
 800c424:	d109      	bne.n	800c43a <_strtol_l.constprop.0+0x56>
 800c426:	2c30      	cmp	r4, #48	; 0x30
 800c428:	d107      	bne.n	800c43a <_strtol_l.constprop.0+0x56>
 800c42a:	782c      	ldrb	r4, [r5, #0]
 800c42c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c430:	2c58      	cmp	r4, #88	; 0x58
 800c432:	d14d      	bne.n	800c4d0 <_strtol_l.constprop.0+0xec>
 800c434:	786c      	ldrb	r4, [r5, #1]
 800c436:	2310      	movs	r3, #16
 800c438:	3502      	adds	r5, #2
 800c43a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c43e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c442:	f04f 0e00 	mov.w	lr, #0
 800c446:	fbb8 f9f3 	udiv	r9, r8, r3
 800c44a:	4676      	mov	r6, lr
 800c44c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c450:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c454:	f1bc 0f09 	cmp.w	ip, #9
 800c458:	d816      	bhi.n	800c488 <_strtol_l.constprop.0+0xa4>
 800c45a:	4664      	mov	r4, ip
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	dd24      	ble.n	800c4aa <_strtol_l.constprop.0+0xc6>
 800c460:	f1be 3fff 	cmp.w	lr, #4294967295
 800c464:	d008      	beq.n	800c478 <_strtol_l.constprop.0+0x94>
 800c466:	45b1      	cmp	r9, r6
 800c468:	d31c      	bcc.n	800c4a4 <_strtol_l.constprop.0+0xc0>
 800c46a:	d101      	bne.n	800c470 <_strtol_l.constprop.0+0x8c>
 800c46c:	45a2      	cmp	sl, r4
 800c46e:	db19      	blt.n	800c4a4 <_strtol_l.constprop.0+0xc0>
 800c470:	fb06 4603 	mla	r6, r6, r3, r4
 800c474:	f04f 0e01 	mov.w	lr, #1
 800c478:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c47c:	e7e8      	b.n	800c450 <_strtol_l.constprop.0+0x6c>
 800c47e:	2c2b      	cmp	r4, #43	; 0x2b
 800c480:	bf04      	itt	eq
 800c482:	782c      	ldrbeq	r4, [r5, #0]
 800c484:	1cb5      	addeq	r5, r6, #2
 800c486:	e7ca      	b.n	800c41e <_strtol_l.constprop.0+0x3a>
 800c488:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c48c:	f1bc 0f19 	cmp.w	ip, #25
 800c490:	d801      	bhi.n	800c496 <_strtol_l.constprop.0+0xb2>
 800c492:	3c37      	subs	r4, #55	; 0x37
 800c494:	e7e2      	b.n	800c45c <_strtol_l.constprop.0+0x78>
 800c496:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c49a:	f1bc 0f19 	cmp.w	ip, #25
 800c49e:	d804      	bhi.n	800c4aa <_strtol_l.constprop.0+0xc6>
 800c4a0:	3c57      	subs	r4, #87	; 0x57
 800c4a2:	e7db      	b.n	800c45c <_strtol_l.constprop.0+0x78>
 800c4a4:	f04f 3eff 	mov.w	lr, #4294967295
 800c4a8:	e7e6      	b.n	800c478 <_strtol_l.constprop.0+0x94>
 800c4aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800c4ae:	d105      	bne.n	800c4bc <_strtol_l.constprop.0+0xd8>
 800c4b0:	2322      	movs	r3, #34	; 0x22
 800c4b2:	6003      	str	r3, [r0, #0]
 800c4b4:	4646      	mov	r6, r8
 800c4b6:	b942      	cbnz	r2, 800c4ca <_strtol_l.constprop.0+0xe6>
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	e79e      	b.n	800c3fa <_strtol_l.constprop.0+0x16>
 800c4bc:	b107      	cbz	r7, 800c4c0 <_strtol_l.constprop.0+0xdc>
 800c4be:	4276      	negs	r6, r6
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	d0f9      	beq.n	800c4b8 <_strtol_l.constprop.0+0xd4>
 800c4c4:	f1be 0f00 	cmp.w	lr, #0
 800c4c8:	d000      	beq.n	800c4cc <_strtol_l.constprop.0+0xe8>
 800c4ca:	1e69      	subs	r1, r5, #1
 800c4cc:	6011      	str	r1, [r2, #0]
 800c4ce:	e7f3      	b.n	800c4b8 <_strtol_l.constprop.0+0xd4>
 800c4d0:	2430      	movs	r4, #48	; 0x30
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1b1      	bne.n	800c43a <_strtol_l.constprop.0+0x56>
 800c4d6:	2308      	movs	r3, #8
 800c4d8:	e7af      	b.n	800c43a <_strtol_l.constprop.0+0x56>
 800c4da:	2c30      	cmp	r4, #48	; 0x30
 800c4dc:	d0a5      	beq.n	800c42a <_strtol_l.constprop.0+0x46>
 800c4de:	230a      	movs	r3, #10
 800c4e0:	e7ab      	b.n	800c43a <_strtol_l.constprop.0+0x56>
 800c4e2:	bf00      	nop
 800c4e4:	0800d911 	.word	0x0800d911

0800c4e8 <_strtol_r>:
 800c4e8:	f7ff bf7c 	b.w	800c3e4 <_strtol_l.constprop.0>

0800c4ec <__ascii_wctomb>:
 800c4ec:	b149      	cbz	r1, 800c502 <__ascii_wctomb+0x16>
 800c4ee:	2aff      	cmp	r2, #255	; 0xff
 800c4f0:	bf85      	ittet	hi
 800c4f2:	238a      	movhi	r3, #138	; 0x8a
 800c4f4:	6003      	strhi	r3, [r0, #0]
 800c4f6:	700a      	strbls	r2, [r1, #0]
 800c4f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4fc:	bf98      	it	ls
 800c4fe:	2001      	movls	r0, #1
 800c500:	4770      	bx	lr
 800c502:	4608      	mov	r0, r1
 800c504:	4770      	bx	lr

0800c506 <__ssputs_r>:
 800c506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50a:	688e      	ldr	r6, [r1, #8]
 800c50c:	461f      	mov	r7, r3
 800c50e:	42be      	cmp	r6, r7
 800c510:	680b      	ldr	r3, [r1, #0]
 800c512:	4682      	mov	sl, r0
 800c514:	460c      	mov	r4, r1
 800c516:	4690      	mov	r8, r2
 800c518:	d82c      	bhi.n	800c574 <__ssputs_r+0x6e>
 800c51a:	898a      	ldrh	r2, [r1, #12]
 800c51c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c520:	d026      	beq.n	800c570 <__ssputs_r+0x6a>
 800c522:	6965      	ldr	r5, [r4, #20]
 800c524:	6909      	ldr	r1, [r1, #16]
 800c526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c52a:	eba3 0901 	sub.w	r9, r3, r1
 800c52e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c532:	1c7b      	adds	r3, r7, #1
 800c534:	444b      	add	r3, r9
 800c536:	106d      	asrs	r5, r5, #1
 800c538:	429d      	cmp	r5, r3
 800c53a:	bf38      	it	cc
 800c53c:	461d      	movcc	r5, r3
 800c53e:	0553      	lsls	r3, r2, #21
 800c540:	d527      	bpl.n	800c592 <__ssputs_r+0x8c>
 800c542:	4629      	mov	r1, r5
 800c544:	f7fc f8ea 	bl	800871c <_malloc_r>
 800c548:	4606      	mov	r6, r0
 800c54a:	b360      	cbz	r0, 800c5a6 <__ssputs_r+0xa0>
 800c54c:	6921      	ldr	r1, [r4, #16]
 800c54e:	464a      	mov	r2, r9
 800c550:	f7fe f841 	bl	800a5d6 <memcpy>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	6126      	str	r6, [r4, #16]
 800c562:	6165      	str	r5, [r4, #20]
 800c564:	444e      	add	r6, r9
 800c566:	eba5 0509 	sub.w	r5, r5, r9
 800c56a:	6026      	str	r6, [r4, #0]
 800c56c:	60a5      	str	r5, [r4, #8]
 800c56e:	463e      	mov	r6, r7
 800c570:	42be      	cmp	r6, r7
 800c572:	d900      	bls.n	800c576 <__ssputs_r+0x70>
 800c574:	463e      	mov	r6, r7
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	4632      	mov	r2, r6
 800c57a:	4641      	mov	r1, r8
 800c57c:	f000 fd5d 	bl	800d03a <memmove>
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	1b9b      	subs	r3, r3, r6
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	4433      	add	r3, r6
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	2000      	movs	r0, #0
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	462a      	mov	r2, r5
 800c594:	f7fc f94e 	bl	8008834 <_realloc_r>
 800c598:	4606      	mov	r6, r0
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d1e0      	bne.n	800c560 <__ssputs_r+0x5a>
 800c59e:	6921      	ldr	r1, [r4, #16]
 800c5a0:	4650      	mov	r0, sl
 800c5a2:	f7fe feb3 	bl	800b30c <_free_r>
 800c5a6:	230c      	movs	r3, #12
 800c5a8:	f8ca 3000 	str.w	r3, [sl]
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e7e9      	b.n	800c58e <__ssputs_r+0x88>
	...

0800c5bc <_svfiprintf_r>:
 800c5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c0:	4698      	mov	r8, r3
 800c5c2:	898b      	ldrh	r3, [r1, #12]
 800c5c4:	061b      	lsls	r3, r3, #24
 800c5c6:	b09d      	sub	sp, #116	; 0x74
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	d50e      	bpl.n	800c5ee <_svfiprintf_r+0x32>
 800c5d0:	690b      	ldr	r3, [r1, #16]
 800c5d2:	b963      	cbnz	r3, 800c5ee <_svfiprintf_r+0x32>
 800c5d4:	2140      	movs	r1, #64	; 0x40
 800c5d6:	f7fc f8a1 	bl	800871c <_malloc_r>
 800c5da:	6028      	str	r0, [r5, #0]
 800c5dc:	6128      	str	r0, [r5, #16]
 800c5de:	b920      	cbnz	r0, 800c5ea <_svfiprintf_r+0x2e>
 800c5e0:	230c      	movs	r3, #12
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e8:	e0d0      	b.n	800c78c <_svfiprintf_r+0x1d0>
 800c5ea:	2340      	movs	r3, #64	; 0x40
 800c5ec:	616b      	str	r3, [r5, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5fc:	2330      	movs	r3, #48	; 0x30
 800c5fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c7a4 <_svfiprintf_r+0x1e8>
 800c602:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c606:	f04f 0901 	mov.w	r9, #1
 800c60a:	4623      	mov	r3, r4
 800c60c:	469a      	mov	sl, r3
 800c60e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c612:	b10a      	cbz	r2, 800c618 <_svfiprintf_r+0x5c>
 800c614:	2a25      	cmp	r2, #37	; 0x25
 800c616:	d1f9      	bne.n	800c60c <_svfiprintf_r+0x50>
 800c618:	ebba 0b04 	subs.w	fp, sl, r4
 800c61c:	d00b      	beq.n	800c636 <_svfiprintf_r+0x7a>
 800c61e:	465b      	mov	r3, fp
 800c620:	4622      	mov	r2, r4
 800c622:	4629      	mov	r1, r5
 800c624:	4638      	mov	r0, r7
 800c626:	f7ff ff6e 	bl	800c506 <__ssputs_r>
 800c62a:	3001      	adds	r0, #1
 800c62c:	f000 80a9 	beq.w	800c782 <_svfiprintf_r+0x1c6>
 800c630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c632:	445a      	add	r2, fp
 800c634:	9209      	str	r2, [sp, #36]	; 0x24
 800c636:	f89a 3000 	ldrb.w	r3, [sl]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 80a1 	beq.w	800c782 <_svfiprintf_r+0x1c6>
 800c640:	2300      	movs	r3, #0
 800c642:	f04f 32ff 	mov.w	r2, #4294967295
 800c646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c64a:	f10a 0a01 	add.w	sl, sl, #1
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	9307      	str	r3, [sp, #28]
 800c652:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c656:	931a      	str	r3, [sp, #104]	; 0x68
 800c658:	4654      	mov	r4, sl
 800c65a:	2205      	movs	r2, #5
 800c65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c660:	4850      	ldr	r0, [pc, #320]	; (800c7a4 <_svfiprintf_r+0x1e8>)
 800c662:	f7f3 fdb5 	bl	80001d0 <memchr>
 800c666:	9a04      	ldr	r2, [sp, #16]
 800c668:	b9d8      	cbnz	r0, 800c6a2 <_svfiprintf_r+0xe6>
 800c66a:	06d0      	lsls	r0, r2, #27
 800c66c:	bf44      	itt	mi
 800c66e:	2320      	movmi	r3, #32
 800c670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c674:	0711      	lsls	r1, r2, #28
 800c676:	bf44      	itt	mi
 800c678:	232b      	movmi	r3, #43	; 0x2b
 800c67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67e:	f89a 3000 	ldrb.w	r3, [sl]
 800c682:	2b2a      	cmp	r3, #42	; 0x2a
 800c684:	d015      	beq.n	800c6b2 <_svfiprintf_r+0xf6>
 800c686:	9a07      	ldr	r2, [sp, #28]
 800c688:	4654      	mov	r4, sl
 800c68a:	2000      	movs	r0, #0
 800c68c:	f04f 0c0a 	mov.w	ip, #10
 800c690:	4621      	mov	r1, r4
 800c692:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c696:	3b30      	subs	r3, #48	; 0x30
 800c698:	2b09      	cmp	r3, #9
 800c69a:	d94d      	bls.n	800c738 <_svfiprintf_r+0x17c>
 800c69c:	b1b0      	cbz	r0, 800c6cc <_svfiprintf_r+0x110>
 800c69e:	9207      	str	r2, [sp, #28]
 800c6a0:	e014      	b.n	800c6cc <_svfiprintf_r+0x110>
 800c6a2:	eba0 0308 	sub.w	r3, r0, r8
 800c6a6:	fa09 f303 	lsl.w	r3, r9, r3
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	46a2      	mov	sl, r4
 800c6b0:	e7d2      	b.n	800c658 <_svfiprintf_r+0x9c>
 800c6b2:	9b03      	ldr	r3, [sp, #12]
 800c6b4:	1d19      	adds	r1, r3, #4
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	9103      	str	r1, [sp, #12]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bfbb      	ittet	lt
 800c6be:	425b      	neglt	r3, r3
 800c6c0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c4:	9307      	strge	r3, [sp, #28]
 800c6c6:	9307      	strlt	r3, [sp, #28]
 800c6c8:	bfb8      	it	lt
 800c6ca:	9204      	strlt	r2, [sp, #16]
 800c6cc:	7823      	ldrb	r3, [r4, #0]
 800c6ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d0:	d10c      	bne.n	800c6ec <_svfiprintf_r+0x130>
 800c6d2:	7863      	ldrb	r3, [r4, #1]
 800c6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d6:	d134      	bne.n	800c742 <_svfiprintf_r+0x186>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9203      	str	r2, [sp, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfb8      	it	lt
 800c6e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e8:	3402      	adds	r4, #2
 800c6ea:	9305      	str	r3, [sp, #20]
 800c6ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c7b4 <_svfiprintf_r+0x1f8>
 800c6f0:	7821      	ldrb	r1, [r4, #0]
 800c6f2:	2203      	movs	r2, #3
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	f7f3 fd6b 	bl	80001d0 <memchr>
 800c6fa:	b138      	cbz	r0, 800c70c <_svfiprintf_r+0x150>
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	eba0 000a 	sub.w	r0, r0, sl
 800c702:	2240      	movs	r2, #64	; 0x40
 800c704:	4082      	lsls	r2, r0
 800c706:	4313      	orrs	r3, r2
 800c708:	3401      	adds	r4, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c710:	4825      	ldr	r0, [pc, #148]	; (800c7a8 <_svfiprintf_r+0x1ec>)
 800c712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c716:	2206      	movs	r2, #6
 800c718:	f7f3 fd5a 	bl	80001d0 <memchr>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d038      	beq.n	800c792 <_svfiprintf_r+0x1d6>
 800c720:	4b22      	ldr	r3, [pc, #136]	; (800c7ac <_svfiprintf_r+0x1f0>)
 800c722:	bb1b      	cbnz	r3, 800c76c <_svfiprintf_r+0x1b0>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	3307      	adds	r3, #7
 800c728:	f023 0307 	bic.w	r3, r3, #7
 800c72c:	3308      	adds	r3, #8
 800c72e:	9303      	str	r3, [sp, #12]
 800c730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c732:	4433      	add	r3, r6
 800c734:	9309      	str	r3, [sp, #36]	; 0x24
 800c736:	e768      	b.n	800c60a <_svfiprintf_r+0x4e>
 800c738:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73c:	460c      	mov	r4, r1
 800c73e:	2001      	movs	r0, #1
 800c740:	e7a6      	b.n	800c690 <_svfiprintf_r+0xd4>
 800c742:	2300      	movs	r3, #0
 800c744:	3401      	adds	r4, #1
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	4619      	mov	r1, r3
 800c74a:	f04f 0c0a 	mov.w	ip, #10
 800c74e:	4620      	mov	r0, r4
 800c750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c754:	3a30      	subs	r2, #48	; 0x30
 800c756:	2a09      	cmp	r2, #9
 800c758:	d903      	bls.n	800c762 <_svfiprintf_r+0x1a6>
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0c6      	beq.n	800c6ec <_svfiprintf_r+0x130>
 800c75e:	9105      	str	r1, [sp, #20]
 800c760:	e7c4      	b.n	800c6ec <_svfiprintf_r+0x130>
 800c762:	fb0c 2101 	mla	r1, ip, r1, r2
 800c766:	4604      	mov	r4, r0
 800c768:	2301      	movs	r3, #1
 800c76a:	e7f0      	b.n	800c74e <_svfiprintf_r+0x192>
 800c76c:	ab03      	add	r3, sp, #12
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	462a      	mov	r2, r5
 800c772:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <_svfiprintf_r+0x1f4>)
 800c774:	a904      	add	r1, sp, #16
 800c776:	4638      	mov	r0, r7
 800c778:	f7fc ff40 	bl	80095fc <_printf_float>
 800c77c:	1c42      	adds	r2, r0, #1
 800c77e:	4606      	mov	r6, r0
 800c780:	d1d6      	bne.n	800c730 <_svfiprintf_r+0x174>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	065b      	lsls	r3, r3, #25
 800c786:	f53f af2d 	bmi.w	800c5e4 <_svfiprintf_r+0x28>
 800c78a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c78c:	b01d      	add	sp, #116	; 0x74
 800c78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c792:	ab03      	add	r3, sp, #12
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	462a      	mov	r2, r5
 800c798:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <_svfiprintf_r+0x1f4>)
 800c79a:	a904      	add	r1, sp, #16
 800c79c:	4638      	mov	r0, r7
 800c79e:	f7fd f9d1 	bl	8009b44 <_printf_i>
 800c7a2:	e7eb      	b.n	800c77c <_svfiprintf_r+0x1c0>
 800c7a4:	0800dc94 	.word	0x0800dc94
 800c7a8:	0800dc9e 	.word	0x0800dc9e
 800c7ac:	080095fd 	.word	0x080095fd
 800c7b0:	0800c507 	.word	0x0800c507
 800c7b4:	0800dc9a 	.word	0x0800dc9a

0800c7b8 <_sungetc_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	1c4b      	adds	r3, r1, #1
 800c7bc:	4614      	mov	r4, r2
 800c7be:	d103      	bne.n	800c7c8 <_sungetc_r+0x10>
 800c7c0:	f04f 35ff 	mov.w	r5, #4294967295
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	8993      	ldrh	r3, [r2, #12]
 800c7ca:	f023 0320 	bic.w	r3, r3, #32
 800c7ce:	8193      	strh	r3, [r2, #12]
 800c7d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7d2:	6852      	ldr	r2, [r2, #4]
 800c7d4:	b2cd      	uxtb	r5, r1
 800c7d6:	b18b      	cbz	r3, 800c7fc <_sungetc_r+0x44>
 800c7d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	dd08      	ble.n	800c7f0 <_sungetc_r+0x38>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	1e5a      	subs	r2, r3, #1
 800c7e2:	6022      	str	r2, [r4, #0]
 800c7e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c7e8:	6863      	ldr	r3, [r4, #4]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	6063      	str	r3, [r4, #4]
 800c7ee:	e7e9      	b.n	800c7c4 <_sungetc_r+0xc>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	f000 fbe8 	bl	800cfc6 <__submore>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0f1      	beq.n	800c7de <_sungetc_r+0x26>
 800c7fa:	e7e1      	b.n	800c7c0 <_sungetc_r+0x8>
 800c7fc:	6921      	ldr	r1, [r4, #16]
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	b151      	cbz	r1, 800c818 <_sungetc_r+0x60>
 800c802:	4299      	cmp	r1, r3
 800c804:	d208      	bcs.n	800c818 <_sungetc_r+0x60>
 800c806:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c80a:	42a9      	cmp	r1, r5
 800c80c:	d104      	bne.n	800c818 <_sungetc_r+0x60>
 800c80e:	3b01      	subs	r3, #1
 800c810:	3201      	adds	r2, #1
 800c812:	6023      	str	r3, [r4, #0]
 800c814:	6062      	str	r2, [r4, #4]
 800c816:	e7d5      	b.n	800c7c4 <_sungetc_r+0xc>
 800c818:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c820:	6363      	str	r3, [r4, #52]	; 0x34
 800c822:	2303      	movs	r3, #3
 800c824:	63a3      	str	r3, [r4, #56]	; 0x38
 800c826:	4623      	mov	r3, r4
 800c828:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	2301      	movs	r3, #1
 800c830:	e7dc      	b.n	800c7ec <_sungetc_r+0x34>

0800c832 <__ssrefill_r>:
 800c832:	b510      	push	{r4, lr}
 800c834:	460c      	mov	r4, r1
 800c836:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c838:	b169      	cbz	r1, 800c856 <__ssrefill_r+0x24>
 800c83a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c83e:	4299      	cmp	r1, r3
 800c840:	d001      	beq.n	800c846 <__ssrefill_r+0x14>
 800c842:	f7fe fd63 	bl	800b30c <_free_r>
 800c846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c848:	6063      	str	r3, [r4, #4]
 800c84a:	2000      	movs	r0, #0
 800c84c:	6360      	str	r0, [r4, #52]	; 0x34
 800c84e:	b113      	cbz	r3, 800c856 <__ssrefill_r+0x24>
 800c850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c852:	6023      	str	r3, [r4, #0]
 800c854:	bd10      	pop	{r4, pc}
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	2300      	movs	r3, #0
 800c85c:	6063      	str	r3, [r4, #4]
 800c85e:	89a3      	ldrh	r3, [r4, #12]
 800c860:	f043 0320 	orr.w	r3, r3, #32
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	f04f 30ff 	mov.w	r0, #4294967295
 800c86a:	e7f3      	b.n	800c854 <__ssrefill_r+0x22>

0800c86c <__ssvfiscanf_r>:
 800c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c876:	2100      	movs	r1, #0
 800c878:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c87c:	49a6      	ldr	r1, [pc, #664]	; (800cb18 <__ssvfiscanf_r+0x2ac>)
 800c87e:	91a0      	str	r1, [sp, #640]	; 0x280
 800c880:	f10d 0804 	add.w	r8, sp, #4
 800c884:	49a5      	ldr	r1, [pc, #660]	; (800cb1c <__ssvfiscanf_r+0x2b0>)
 800c886:	4fa6      	ldr	r7, [pc, #664]	; (800cb20 <__ssvfiscanf_r+0x2b4>)
 800c888:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800cb24 <__ssvfiscanf_r+0x2b8>
 800c88c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c890:	4606      	mov	r6, r0
 800c892:	91a1      	str	r1, [sp, #644]	; 0x284
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	7813      	ldrb	r3, [r2, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 815a 	beq.w	800cb52 <__ssvfiscanf_r+0x2e6>
 800c89e:	5cf9      	ldrb	r1, [r7, r3]
 800c8a0:	f011 0108 	ands.w	r1, r1, #8
 800c8a4:	f102 0501 	add.w	r5, r2, #1
 800c8a8:	d019      	beq.n	800c8de <__ssvfiscanf_r+0x72>
 800c8aa:	6863      	ldr	r3, [r4, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	dd0f      	ble.n	800c8d0 <__ssvfiscanf_r+0x64>
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	5cba      	ldrb	r2, [r7, r2]
 800c8b6:	0712      	lsls	r2, r2, #28
 800c8b8:	d401      	bmi.n	800c8be <__ssvfiscanf_r+0x52>
 800c8ba:	462a      	mov	r2, r5
 800c8bc:	e7eb      	b.n	800c896 <__ssvfiscanf_r+0x2a>
 800c8be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c8c0:	3201      	adds	r2, #1
 800c8c2:	9245      	str	r2, [sp, #276]	; 0x114
 800c8c4:	6862      	ldr	r2, [r4, #4]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	3a01      	subs	r2, #1
 800c8ca:	6062      	str	r2, [r4, #4]
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	e7ec      	b.n	800c8aa <__ssvfiscanf_r+0x3e>
 800c8d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	4798      	blx	r3
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d0e9      	beq.n	800c8b0 <__ssvfiscanf_r+0x44>
 800c8dc:	e7ed      	b.n	800c8ba <__ssvfiscanf_r+0x4e>
 800c8de:	2b25      	cmp	r3, #37	; 0x25
 800c8e0:	d012      	beq.n	800c908 <__ssvfiscanf_r+0x9c>
 800c8e2:	469a      	mov	sl, r3
 800c8e4:	6863      	ldr	r3, [r4, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f340 8091 	ble.w	800ca0e <__ssvfiscanf_r+0x1a2>
 800c8ec:	6822      	ldr	r2, [r4, #0]
 800c8ee:	7813      	ldrb	r3, [r2, #0]
 800c8f0:	4553      	cmp	r3, sl
 800c8f2:	f040 812e 	bne.w	800cb52 <__ssvfiscanf_r+0x2e6>
 800c8f6:	6863      	ldr	r3, [r4, #4]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	6063      	str	r3, [r4, #4]
 800c8fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c8fe:	3201      	adds	r2, #1
 800c900:	3301      	adds	r3, #1
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	9345      	str	r3, [sp, #276]	; 0x114
 800c906:	e7d8      	b.n	800c8ba <__ssvfiscanf_r+0x4e>
 800c908:	9141      	str	r1, [sp, #260]	; 0x104
 800c90a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c90c:	7853      	ldrb	r3, [r2, #1]
 800c90e:	2b2a      	cmp	r3, #42	; 0x2a
 800c910:	bf02      	ittt	eq
 800c912:	2310      	moveq	r3, #16
 800c914:	1c95      	addeq	r5, r2, #2
 800c916:	9341      	streq	r3, [sp, #260]	; 0x104
 800c918:	220a      	movs	r2, #10
 800c91a:	46aa      	mov	sl, r5
 800c91c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c920:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c924:	2b09      	cmp	r3, #9
 800c926:	d91c      	bls.n	800c962 <__ssvfiscanf_r+0xf6>
 800c928:	487e      	ldr	r0, [pc, #504]	; (800cb24 <__ssvfiscanf_r+0x2b8>)
 800c92a:	2203      	movs	r2, #3
 800c92c:	f7f3 fc50 	bl	80001d0 <memchr>
 800c930:	b138      	cbz	r0, 800c942 <__ssvfiscanf_r+0xd6>
 800c932:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c934:	eba0 0009 	sub.w	r0, r0, r9
 800c938:	2301      	movs	r3, #1
 800c93a:	4083      	lsls	r3, r0
 800c93c:	4313      	orrs	r3, r2
 800c93e:	9341      	str	r3, [sp, #260]	; 0x104
 800c940:	4655      	mov	r5, sl
 800c942:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c946:	2b78      	cmp	r3, #120	; 0x78
 800c948:	d806      	bhi.n	800c958 <__ssvfiscanf_r+0xec>
 800c94a:	2b57      	cmp	r3, #87	; 0x57
 800c94c:	d810      	bhi.n	800c970 <__ssvfiscanf_r+0x104>
 800c94e:	2b25      	cmp	r3, #37	; 0x25
 800c950:	d0c7      	beq.n	800c8e2 <__ssvfiscanf_r+0x76>
 800c952:	d857      	bhi.n	800ca04 <__ssvfiscanf_r+0x198>
 800c954:	2b00      	cmp	r3, #0
 800c956:	d065      	beq.n	800ca24 <__ssvfiscanf_r+0x1b8>
 800c958:	2303      	movs	r3, #3
 800c95a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c95c:	230a      	movs	r3, #10
 800c95e:	9342      	str	r3, [sp, #264]	; 0x108
 800c960:	e076      	b.n	800ca50 <__ssvfiscanf_r+0x1e4>
 800c962:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c964:	fb02 1103 	mla	r1, r2, r3, r1
 800c968:	3930      	subs	r1, #48	; 0x30
 800c96a:	9143      	str	r1, [sp, #268]	; 0x10c
 800c96c:	4655      	mov	r5, sl
 800c96e:	e7d4      	b.n	800c91a <__ssvfiscanf_r+0xae>
 800c970:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c974:	2a20      	cmp	r2, #32
 800c976:	d8ef      	bhi.n	800c958 <__ssvfiscanf_r+0xec>
 800c978:	a101      	add	r1, pc, #4	; (adr r1, 800c980 <__ssvfiscanf_r+0x114>)
 800c97a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c97e:	bf00      	nop
 800c980:	0800ca33 	.word	0x0800ca33
 800c984:	0800c959 	.word	0x0800c959
 800c988:	0800c959 	.word	0x0800c959
 800c98c:	0800ca91 	.word	0x0800ca91
 800c990:	0800c959 	.word	0x0800c959
 800c994:	0800c959 	.word	0x0800c959
 800c998:	0800c959 	.word	0x0800c959
 800c99c:	0800c959 	.word	0x0800c959
 800c9a0:	0800c959 	.word	0x0800c959
 800c9a4:	0800c959 	.word	0x0800c959
 800c9a8:	0800c959 	.word	0x0800c959
 800c9ac:	0800caa7 	.word	0x0800caa7
 800c9b0:	0800ca8d 	.word	0x0800ca8d
 800c9b4:	0800ca0b 	.word	0x0800ca0b
 800c9b8:	0800ca0b 	.word	0x0800ca0b
 800c9bc:	0800ca0b 	.word	0x0800ca0b
 800c9c0:	0800c959 	.word	0x0800c959
 800c9c4:	0800ca49 	.word	0x0800ca49
 800c9c8:	0800c959 	.word	0x0800c959
 800c9cc:	0800c959 	.word	0x0800c959
 800c9d0:	0800c959 	.word	0x0800c959
 800c9d4:	0800c959 	.word	0x0800c959
 800c9d8:	0800cab7 	.word	0x0800cab7
 800c9dc:	0800ca85 	.word	0x0800ca85
 800c9e0:	0800ca2b 	.word	0x0800ca2b
 800c9e4:	0800c959 	.word	0x0800c959
 800c9e8:	0800c959 	.word	0x0800c959
 800c9ec:	0800cab3 	.word	0x0800cab3
 800c9f0:	0800c959 	.word	0x0800c959
 800c9f4:	0800ca8d 	.word	0x0800ca8d
 800c9f8:	0800c959 	.word	0x0800c959
 800c9fc:	0800c959 	.word	0x0800c959
 800ca00:	0800ca33 	.word	0x0800ca33
 800ca04:	3b45      	subs	r3, #69	; 0x45
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d8a6      	bhi.n	800c958 <__ssvfiscanf_r+0xec>
 800ca0a:	2305      	movs	r3, #5
 800ca0c:	e01f      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800ca0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca10:	4621      	mov	r1, r4
 800ca12:	4630      	mov	r0, r6
 800ca14:	4798      	blx	r3
 800ca16:	2800      	cmp	r0, #0
 800ca18:	f43f af68 	beq.w	800c8ec <__ssvfiscanf_r+0x80>
 800ca1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	f040 808d 	bne.w	800cb3e <__ssvfiscanf_r+0x2d2>
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	e08f      	b.n	800cb4a <__ssvfiscanf_r+0x2de>
 800ca2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca2c:	f042 0220 	orr.w	r2, r2, #32
 800ca30:	9241      	str	r2, [sp, #260]	; 0x104
 800ca32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ca34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca38:	9241      	str	r2, [sp, #260]	; 0x104
 800ca3a:	2210      	movs	r2, #16
 800ca3c:	2b6f      	cmp	r3, #111	; 0x6f
 800ca3e:	9242      	str	r2, [sp, #264]	; 0x108
 800ca40:	bf34      	ite	cc
 800ca42:	2303      	movcc	r3, #3
 800ca44:	2304      	movcs	r3, #4
 800ca46:	e002      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9342      	str	r3, [sp, #264]	; 0x108
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	9347      	str	r3, [sp, #284]	; 0x11c
 800ca50:	6863      	ldr	r3, [r4, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	dd3d      	ble.n	800cad2 <__ssvfiscanf_r+0x266>
 800ca56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca58:	0659      	lsls	r1, r3, #25
 800ca5a:	d404      	bmi.n	800ca66 <__ssvfiscanf_r+0x1fa>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	781a      	ldrb	r2, [r3, #0]
 800ca60:	5cba      	ldrb	r2, [r7, r2]
 800ca62:	0712      	lsls	r2, r2, #28
 800ca64:	d43c      	bmi.n	800cae0 <__ssvfiscanf_r+0x274>
 800ca66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	dc4b      	bgt.n	800cb04 <__ssvfiscanf_r+0x298>
 800ca6c:	466b      	mov	r3, sp
 800ca6e:	4622      	mov	r2, r4
 800ca70:	a941      	add	r1, sp, #260	; 0x104
 800ca72:	4630      	mov	r0, r6
 800ca74:	f000 f872 	bl	800cb5c <_scanf_chars>
 800ca78:	2801      	cmp	r0, #1
 800ca7a:	d06a      	beq.n	800cb52 <__ssvfiscanf_r+0x2e6>
 800ca7c:	2802      	cmp	r0, #2
 800ca7e:	f47f af1c 	bne.w	800c8ba <__ssvfiscanf_r+0x4e>
 800ca82:	e7cb      	b.n	800ca1c <__ssvfiscanf_r+0x1b0>
 800ca84:	2308      	movs	r3, #8
 800ca86:	9342      	str	r3, [sp, #264]	; 0x108
 800ca88:	2304      	movs	r3, #4
 800ca8a:	e7e0      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	e7d5      	b.n	800ca3c <__ssvfiscanf_r+0x1d0>
 800ca90:	4629      	mov	r1, r5
 800ca92:	4640      	mov	r0, r8
 800ca94:	f000 fa5e 	bl	800cf54 <__sccl>
 800ca98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ca9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca9e:	9341      	str	r3, [sp, #260]	; 0x104
 800caa0:	4605      	mov	r5, r0
 800caa2:	2301      	movs	r3, #1
 800caa4:	e7d3      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800caa6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800caa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caac:	9341      	str	r3, [sp, #260]	; 0x104
 800caae:	2300      	movs	r3, #0
 800cab0:	e7cd      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800cab2:	2302      	movs	r3, #2
 800cab4:	e7cb      	b.n	800ca4e <__ssvfiscanf_r+0x1e2>
 800cab6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cab8:	06c3      	lsls	r3, r0, #27
 800caba:	f53f aefe 	bmi.w	800c8ba <__ssvfiscanf_r+0x4e>
 800cabe:	9b00      	ldr	r3, [sp, #0]
 800cac0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cac2:	1d19      	adds	r1, r3, #4
 800cac4:	9100      	str	r1, [sp, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	07c0      	lsls	r0, r0, #31
 800caca:	bf4c      	ite	mi
 800cacc:	801a      	strhmi	r2, [r3, #0]
 800cace:	601a      	strpl	r2, [r3, #0]
 800cad0:	e6f3      	b.n	800c8ba <__ssvfiscanf_r+0x4e>
 800cad2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cad4:	4621      	mov	r1, r4
 800cad6:	4630      	mov	r0, r6
 800cad8:	4798      	blx	r3
 800cada:	2800      	cmp	r0, #0
 800cadc:	d0bb      	beq.n	800ca56 <__ssvfiscanf_r+0x1ea>
 800cade:	e79d      	b.n	800ca1c <__ssvfiscanf_r+0x1b0>
 800cae0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cae2:	3201      	adds	r2, #1
 800cae4:	9245      	str	r2, [sp, #276]	; 0x114
 800cae6:	6862      	ldr	r2, [r4, #4]
 800cae8:	3a01      	subs	r2, #1
 800caea:	2a00      	cmp	r2, #0
 800caec:	6062      	str	r2, [r4, #4]
 800caee:	dd02      	ble.n	800caf6 <__ssvfiscanf_r+0x28a>
 800caf0:	3301      	adds	r3, #1
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	e7b2      	b.n	800ca5c <__ssvfiscanf_r+0x1f0>
 800caf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800caf8:	4621      	mov	r1, r4
 800cafa:	4630      	mov	r0, r6
 800cafc:	4798      	blx	r3
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d0ac      	beq.n	800ca5c <__ssvfiscanf_r+0x1f0>
 800cb02:	e78b      	b.n	800ca1c <__ssvfiscanf_r+0x1b0>
 800cb04:	2b04      	cmp	r3, #4
 800cb06:	dc0f      	bgt.n	800cb28 <__ssvfiscanf_r+0x2bc>
 800cb08:	466b      	mov	r3, sp
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	a941      	add	r1, sp, #260	; 0x104
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f000 f87e 	bl	800cc10 <_scanf_i>
 800cb14:	e7b0      	b.n	800ca78 <__ssvfiscanf_r+0x20c>
 800cb16:	bf00      	nop
 800cb18:	0800c7b9 	.word	0x0800c7b9
 800cb1c:	0800c833 	.word	0x0800c833
 800cb20:	0800d911 	.word	0x0800d911
 800cb24:	0800dc9a 	.word	0x0800dc9a
 800cb28:	4b0b      	ldr	r3, [pc, #44]	; (800cb58 <__ssvfiscanf_r+0x2ec>)
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f43f aec5 	beq.w	800c8ba <__ssvfiscanf_r+0x4e>
 800cb30:	466b      	mov	r3, sp
 800cb32:	4622      	mov	r2, r4
 800cb34:	a941      	add	r1, sp, #260	; 0x104
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7fd f926 	bl	8009d88 <_scanf_float>
 800cb3c:	e79c      	b.n	800ca78 <__ssvfiscanf_r+0x20c>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb44:	bf18      	it	ne
 800cb46:	f04f 30ff 	movne.w	r0, #4294967295
 800cb4a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cb54:	e7f9      	b.n	800cb4a <__ssvfiscanf_r+0x2de>
 800cb56:	bf00      	nop
 800cb58:	08009d89 	.word	0x08009d89

0800cb5c <_scanf_chars>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	4615      	mov	r5, r2
 800cb62:	688a      	ldr	r2, [r1, #8]
 800cb64:	4680      	mov	r8, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	b932      	cbnz	r2, 800cb78 <_scanf_chars+0x1c>
 800cb6a:	698a      	ldr	r2, [r1, #24]
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	bf0c      	ite	eq
 800cb70:	2201      	moveq	r2, #1
 800cb72:	f04f 32ff 	movne.w	r2, #4294967295
 800cb76:	608a      	str	r2, [r1, #8]
 800cb78:	6822      	ldr	r2, [r4, #0]
 800cb7a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cc0c <_scanf_chars+0xb0>
 800cb7e:	06d1      	lsls	r1, r2, #27
 800cb80:	bf5f      	itttt	pl
 800cb82:	681a      	ldrpl	r2, [r3, #0]
 800cb84:	1d11      	addpl	r1, r2, #4
 800cb86:	6019      	strpl	r1, [r3, #0]
 800cb88:	6816      	ldrpl	r6, [r2, #0]
 800cb8a:	2700      	movs	r7, #0
 800cb8c:	69a0      	ldr	r0, [r4, #24]
 800cb8e:	b188      	cbz	r0, 800cbb4 <_scanf_chars+0x58>
 800cb90:	2801      	cmp	r0, #1
 800cb92:	d107      	bne.n	800cba4 <_scanf_chars+0x48>
 800cb94:	682a      	ldr	r2, [r5, #0]
 800cb96:	7811      	ldrb	r1, [r2, #0]
 800cb98:	6962      	ldr	r2, [r4, #20]
 800cb9a:	5c52      	ldrb	r2, [r2, r1]
 800cb9c:	b952      	cbnz	r2, 800cbb4 <_scanf_chars+0x58>
 800cb9e:	2f00      	cmp	r7, #0
 800cba0:	d031      	beq.n	800cc06 <_scanf_chars+0xaa>
 800cba2:	e022      	b.n	800cbea <_scanf_chars+0x8e>
 800cba4:	2802      	cmp	r0, #2
 800cba6:	d120      	bne.n	800cbea <_scanf_chars+0x8e>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cbb0:	071b      	lsls	r3, r3, #28
 800cbb2:	d41a      	bmi.n	800cbea <_scanf_chars+0x8e>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	06da      	lsls	r2, r3, #27
 800cbb8:	bf5e      	ittt	pl
 800cbba:	682b      	ldrpl	r3, [r5, #0]
 800cbbc:	781b      	ldrbpl	r3, [r3, #0]
 800cbbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cbc2:	682a      	ldr	r2, [r5, #0]
 800cbc4:	686b      	ldr	r3, [r5, #4]
 800cbc6:	3201      	adds	r2, #1
 800cbc8:	602a      	str	r2, [r5, #0]
 800cbca:	68a2      	ldr	r2, [r4, #8]
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	3a01      	subs	r2, #1
 800cbd0:	606b      	str	r3, [r5, #4]
 800cbd2:	3701      	adds	r7, #1
 800cbd4:	60a2      	str	r2, [r4, #8]
 800cbd6:	b142      	cbz	r2, 800cbea <_scanf_chars+0x8e>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dcd7      	bgt.n	800cb8c <_scanf_chars+0x30>
 800cbdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	4798      	blx	r3
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d0d0      	beq.n	800cb8c <_scanf_chars+0x30>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	f013 0310 	ands.w	r3, r3, #16
 800cbf0:	d105      	bne.n	800cbfe <_scanf_chars+0xa2>
 800cbf2:	68e2      	ldr	r2, [r4, #12]
 800cbf4:	3201      	adds	r2, #1
 800cbf6:	60e2      	str	r2, [r4, #12]
 800cbf8:	69a2      	ldr	r2, [r4, #24]
 800cbfa:	b102      	cbz	r2, 800cbfe <_scanf_chars+0xa2>
 800cbfc:	7033      	strb	r3, [r6, #0]
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	443b      	add	r3, r7
 800cc02:	6123      	str	r3, [r4, #16]
 800cc04:	2000      	movs	r0, #0
 800cc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0800d911 	.word	0x0800d911

0800cc10 <_scanf_i>:
 800cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	4698      	mov	r8, r3
 800cc16:	4b74      	ldr	r3, [pc, #464]	; (800cde8 <_scanf_i+0x1d8>)
 800cc18:	460c      	mov	r4, r1
 800cc1a:	4682      	mov	sl, r0
 800cc1c:	4616      	mov	r6, r2
 800cc1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc22:	b087      	sub	sp, #28
 800cc24:	ab03      	add	r3, sp, #12
 800cc26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cc2a:	4b70      	ldr	r3, [pc, #448]	; (800cdec <_scanf_i+0x1dc>)
 800cc2c:	69a1      	ldr	r1, [r4, #24]
 800cc2e:	4a70      	ldr	r2, [pc, #448]	; (800cdf0 <_scanf_i+0x1e0>)
 800cc30:	2903      	cmp	r1, #3
 800cc32:	bf18      	it	ne
 800cc34:	461a      	movne	r2, r3
 800cc36:	68a3      	ldr	r3, [r4, #8]
 800cc38:	9201      	str	r2, [sp, #4]
 800cc3a:	1e5a      	subs	r2, r3, #1
 800cc3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc40:	bf88      	it	hi
 800cc42:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc46:	4627      	mov	r7, r4
 800cc48:	bf82      	ittt	hi
 800cc4a:	eb03 0905 	addhi.w	r9, r3, r5
 800cc4e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc52:	60a3      	strhi	r3, [r4, #8]
 800cc54:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cc58:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cc5c:	bf98      	it	ls
 800cc5e:	f04f 0900 	movls.w	r9, #0
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	463d      	mov	r5, r7
 800cc66:	f04f 0b00 	mov.w	fp, #0
 800cc6a:	6831      	ldr	r1, [r6, #0]
 800cc6c:	ab03      	add	r3, sp, #12
 800cc6e:	7809      	ldrb	r1, [r1, #0]
 800cc70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cc74:	2202      	movs	r2, #2
 800cc76:	f7f3 faab 	bl	80001d0 <memchr>
 800cc7a:	b328      	cbz	r0, 800ccc8 <_scanf_i+0xb8>
 800cc7c:	f1bb 0f01 	cmp.w	fp, #1
 800cc80:	d159      	bne.n	800cd36 <_scanf_i+0x126>
 800cc82:	6862      	ldr	r2, [r4, #4]
 800cc84:	b92a      	cbnz	r2, 800cc92 <_scanf_i+0x82>
 800cc86:	6822      	ldr	r2, [r4, #0]
 800cc88:	2308      	movs	r3, #8
 800cc8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc8e:	6063      	str	r3, [r4, #4]
 800cc90:	6022      	str	r2, [r4, #0]
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cc98:	6022      	str	r2, [r4, #0]
 800cc9a:	68a2      	ldr	r2, [r4, #8]
 800cc9c:	1e51      	subs	r1, r2, #1
 800cc9e:	60a1      	str	r1, [r4, #8]
 800cca0:	b192      	cbz	r2, 800ccc8 <_scanf_i+0xb8>
 800cca2:	6832      	ldr	r2, [r6, #0]
 800cca4:	1c51      	adds	r1, r2, #1
 800cca6:	6031      	str	r1, [r6, #0]
 800cca8:	7812      	ldrb	r2, [r2, #0]
 800ccaa:	f805 2b01 	strb.w	r2, [r5], #1
 800ccae:	6872      	ldr	r2, [r6, #4]
 800ccb0:	3a01      	subs	r2, #1
 800ccb2:	2a00      	cmp	r2, #0
 800ccb4:	6072      	str	r2, [r6, #4]
 800ccb6:	dc07      	bgt.n	800ccc8 <_scanf_i+0xb8>
 800ccb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ccbc:	4631      	mov	r1, r6
 800ccbe:	4650      	mov	r0, sl
 800ccc0:	4790      	blx	r2
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	f040 8085 	bne.w	800cdd2 <_scanf_i+0x1c2>
 800ccc8:	f10b 0b01 	add.w	fp, fp, #1
 800cccc:	f1bb 0f03 	cmp.w	fp, #3
 800ccd0:	d1cb      	bne.n	800cc6a <_scanf_i+0x5a>
 800ccd2:	6863      	ldr	r3, [r4, #4]
 800ccd4:	b90b      	cbnz	r3, 800ccda <_scanf_i+0xca>
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	6063      	str	r3, [r4, #4]
 800ccda:	6863      	ldr	r3, [r4, #4]
 800ccdc:	4945      	ldr	r1, [pc, #276]	; (800cdf4 <_scanf_i+0x1e4>)
 800ccde:	6960      	ldr	r0, [r4, #20]
 800cce0:	1ac9      	subs	r1, r1, r3
 800cce2:	f000 f937 	bl	800cf54 <__sccl>
 800cce6:	f04f 0b00 	mov.w	fp, #0
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	6822      	ldr	r2, [r4, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d03d      	beq.n	800cd6e <_scanf_i+0x15e>
 800ccf2:	6831      	ldr	r1, [r6, #0]
 800ccf4:	6960      	ldr	r0, [r4, #20]
 800ccf6:	f891 c000 	ldrb.w	ip, [r1]
 800ccfa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d035      	beq.n	800cd6e <_scanf_i+0x15e>
 800cd02:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cd06:	d124      	bne.n	800cd52 <_scanf_i+0x142>
 800cd08:	0510      	lsls	r0, r2, #20
 800cd0a:	d522      	bpl.n	800cd52 <_scanf_i+0x142>
 800cd0c:	f10b 0b01 	add.w	fp, fp, #1
 800cd10:	f1b9 0f00 	cmp.w	r9, #0
 800cd14:	d003      	beq.n	800cd1e <_scanf_i+0x10e>
 800cd16:	3301      	adds	r3, #1
 800cd18:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd1c:	60a3      	str	r3, [r4, #8]
 800cd1e:	6873      	ldr	r3, [r6, #4]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	6073      	str	r3, [r6, #4]
 800cd26:	dd1b      	ble.n	800cd60 <_scanf_i+0x150>
 800cd28:	6833      	ldr	r3, [r6, #0]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	68a3      	ldr	r3, [r4, #8]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	60a3      	str	r3, [r4, #8]
 800cd34:	e7d9      	b.n	800ccea <_scanf_i+0xda>
 800cd36:	f1bb 0f02 	cmp.w	fp, #2
 800cd3a:	d1ae      	bne.n	800cc9a <_scanf_i+0x8a>
 800cd3c:	6822      	ldr	r2, [r4, #0]
 800cd3e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cd42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cd46:	d1bf      	bne.n	800ccc8 <_scanf_i+0xb8>
 800cd48:	2310      	movs	r3, #16
 800cd4a:	6063      	str	r3, [r4, #4]
 800cd4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd50:	e7a2      	b.n	800cc98 <_scanf_i+0x88>
 800cd52:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cd56:	6022      	str	r2, [r4, #0]
 800cd58:	780b      	ldrb	r3, [r1, #0]
 800cd5a:	f805 3b01 	strb.w	r3, [r5], #1
 800cd5e:	e7de      	b.n	800cd1e <_scanf_i+0x10e>
 800cd60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd64:	4631      	mov	r1, r6
 800cd66:	4650      	mov	r0, sl
 800cd68:	4798      	blx	r3
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d0df      	beq.n	800cd2e <_scanf_i+0x11e>
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	05d9      	lsls	r1, r3, #23
 800cd72:	d50d      	bpl.n	800cd90 <_scanf_i+0x180>
 800cd74:	42bd      	cmp	r5, r7
 800cd76:	d909      	bls.n	800cd8c <_scanf_i+0x17c>
 800cd78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd80:	4632      	mov	r2, r6
 800cd82:	4650      	mov	r0, sl
 800cd84:	4798      	blx	r3
 800cd86:	f105 39ff 	add.w	r9, r5, #4294967295
 800cd8a:	464d      	mov	r5, r9
 800cd8c:	42bd      	cmp	r5, r7
 800cd8e:	d028      	beq.n	800cde2 <_scanf_i+0x1d2>
 800cd90:	6822      	ldr	r2, [r4, #0]
 800cd92:	f012 0210 	ands.w	r2, r2, #16
 800cd96:	d113      	bne.n	800cdc0 <_scanf_i+0x1b0>
 800cd98:	702a      	strb	r2, [r5, #0]
 800cd9a:	6863      	ldr	r3, [r4, #4]
 800cd9c:	9e01      	ldr	r6, [sp, #4]
 800cd9e:	4639      	mov	r1, r7
 800cda0:	4650      	mov	r0, sl
 800cda2:	47b0      	blx	r6
 800cda4:	f8d8 3000 	ldr.w	r3, [r8]
 800cda8:	6821      	ldr	r1, [r4, #0]
 800cdaa:	1d1a      	adds	r2, r3, #4
 800cdac:	f8c8 2000 	str.w	r2, [r8]
 800cdb0:	f011 0f20 	tst.w	r1, #32
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	d00f      	beq.n	800cdd8 <_scanf_i+0x1c8>
 800cdb8:	6018      	str	r0, [r3, #0]
 800cdba:	68e3      	ldr	r3, [r4, #12]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	60e3      	str	r3, [r4, #12]
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	1bed      	subs	r5, r5, r7
 800cdc4:	445d      	add	r5, fp
 800cdc6:	442b      	add	r3, r5
 800cdc8:	6123      	str	r3, [r4, #16]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	b007      	add	sp, #28
 800cdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd2:	f04f 0b00 	mov.w	fp, #0
 800cdd6:	e7ca      	b.n	800cd6e <_scanf_i+0x15e>
 800cdd8:	07ca      	lsls	r2, r1, #31
 800cdda:	bf4c      	ite	mi
 800cddc:	8018      	strhmi	r0, [r3, #0]
 800cdde:	6018      	strpl	r0, [r3, #0]
 800cde0:	e7eb      	b.n	800cdba <_scanf_i+0x1aa>
 800cde2:	2001      	movs	r0, #1
 800cde4:	e7f2      	b.n	800cdcc <_scanf_i+0x1bc>
 800cde6:	bf00      	nop
 800cde8:	0800d890 	.word	0x0800d890
 800cdec:	0800d1bd 	.word	0x0800d1bd
 800cdf0:	0800c4e9 	.word	0x0800c4e9
 800cdf4:	0800dcb5 	.word	0x0800dcb5

0800cdf8 <__sflush_r>:
 800cdf8:	898a      	ldrh	r2, [r1, #12]
 800cdfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfe:	4605      	mov	r5, r0
 800ce00:	0710      	lsls	r0, r2, #28
 800ce02:	460c      	mov	r4, r1
 800ce04:	d458      	bmi.n	800ceb8 <__sflush_r+0xc0>
 800ce06:	684b      	ldr	r3, [r1, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	dc05      	bgt.n	800ce18 <__sflush_r+0x20>
 800ce0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	dc02      	bgt.n	800ce18 <__sflush_r+0x20>
 800ce12:	2000      	movs	r0, #0
 800ce14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	d0f9      	beq.n	800ce12 <__sflush_r+0x1a>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce24:	682f      	ldr	r7, [r5, #0]
 800ce26:	6a21      	ldr	r1, [r4, #32]
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	d032      	beq.n	800ce92 <__sflush_r+0x9a>
 800ce2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	075a      	lsls	r2, r3, #29
 800ce32:	d505      	bpl.n	800ce40 <__sflush_r+0x48>
 800ce34:	6863      	ldr	r3, [r4, #4]
 800ce36:	1ac0      	subs	r0, r0, r3
 800ce38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce3a:	b10b      	cbz	r3, 800ce40 <__sflush_r+0x48>
 800ce3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce3e:	1ac0      	subs	r0, r0, r3
 800ce40:	2300      	movs	r3, #0
 800ce42:	4602      	mov	r2, r0
 800ce44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce46:	6a21      	ldr	r1, [r4, #32]
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b0      	blx	r6
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	89a3      	ldrh	r3, [r4, #12]
 800ce50:	d106      	bne.n	800ce60 <__sflush_r+0x68>
 800ce52:	6829      	ldr	r1, [r5, #0]
 800ce54:	291d      	cmp	r1, #29
 800ce56:	d82b      	bhi.n	800ceb0 <__sflush_r+0xb8>
 800ce58:	4a29      	ldr	r2, [pc, #164]	; (800cf00 <__sflush_r+0x108>)
 800ce5a:	410a      	asrs	r2, r1
 800ce5c:	07d6      	lsls	r6, r2, #31
 800ce5e:	d427      	bmi.n	800ceb0 <__sflush_r+0xb8>
 800ce60:	2200      	movs	r2, #0
 800ce62:	6062      	str	r2, [r4, #4]
 800ce64:	04d9      	lsls	r1, r3, #19
 800ce66:	6922      	ldr	r2, [r4, #16]
 800ce68:	6022      	str	r2, [r4, #0]
 800ce6a:	d504      	bpl.n	800ce76 <__sflush_r+0x7e>
 800ce6c:	1c42      	adds	r2, r0, #1
 800ce6e:	d101      	bne.n	800ce74 <__sflush_r+0x7c>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b903      	cbnz	r3, 800ce76 <__sflush_r+0x7e>
 800ce74:	6560      	str	r0, [r4, #84]	; 0x54
 800ce76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce78:	602f      	str	r7, [r5, #0]
 800ce7a:	2900      	cmp	r1, #0
 800ce7c:	d0c9      	beq.n	800ce12 <__sflush_r+0x1a>
 800ce7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce82:	4299      	cmp	r1, r3
 800ce84:	d002      	beq.n	800ce8c <__sflush_r+0x94>
 800ce86:	4628      	mov	r0, r5
 800ce88:	f7fe fa40 	bl	800b30c <_free_r>
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	6360      	str	r0, [r4, #52]	; 0x34
 800ce90:	e7c0      	b.n	800ce14 <__sflush_r+0x1c>
 800ce92:	2301      	movs	r3, #1
 800ce94:	4628      	mov	r0, r5
 800ce96:	47b0      	blx	r6
 800ce98:	1c41      	adds	r1, r0, #1
 800ce9a:	d1c8      	bne.n	800ce2e <__sflush_r+0x36>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d0c5      	beq.n	800ce2e <__sflush_r+0x36>
 800cea2:	2b1d      	cmp	r3, #29
 800cea4:	d001      	beq.n	800ceaa <__sflush_r+0xb2>
 800cea6:	2b16      	cmp	r3, #22
 800cea8:	d101      	bne.n	800ceae <__sflush_r+0xb6>
 800ceaa:	602f      	str	r7, [r5, #0]
 800ceac:	e7b1      	b.n	800ce12 <__sflush_r+0x1a>
 800ceae:	89a3      	ldrh	r3, [r4, #12]
 800ceb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	e7ad      	b.n	800ce14 <__sflush_r+0x1c>
 800ceb8:	690f      	ldr	r7, [r1, #16]
 800ceba:	2f00      	cmp	r7, #0
 800cebc:	d0a9      	beq.n	800ce12 <__sflush_r+0x1a>
 800cebe:	0793      	lsls	r3, r2, #30
 800cec0:	680e      	ldr	r6, [r1, #0]
 800cec2:	bf08      	it	eq
 800cec4:	694b      	ldreq	r3, [r1, #20]
 800cec6:	600f      	str	r7, [r1, #0]
 800cec8:	bf18      	it	ne
 800ceca:	2300      	movne	r3, #0
 800cecc:	eba6 0807 	sub.w	r8, r6, r7
 800ced0:	608b      	str	r3, [r1, #8]
 800ced2:	f1b8 0f00 	cmp.w	r8, #0
 800ced6:	dd9c      	ble.n	800ce12 <__sflush_r+0x1a>
 800ced8:	6a21      	ldr	r1, [r4, #32]
 800ceda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cedc:	4643      	mov	r3, r8
 800cede:	463a      	mov	r2, r7
 800cee0:	4628      	mov	r0, r5
 800cee2:	47b0      	blx	r6
 800cee4:	2800      	cmp	r0, #0
 800cee6:	dc06      	bgt.n	800cef6 <__sflush_r+0xfe>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceee:	81a3      	strh	r3, [r4, #12]
 800cef0:	f04f 30ff 	mov.w	r0, #4294967295
 800cef4:	e78e      	b.n	800ce14 <__sflush_r+0x1c>
 800cef6:	4407      	add	r7, r0
 800cef8:	eba8 0800 	sub.w	r8, r8, r0
 800cefc:	e7e9      	b.n	800ced2 <__sflush_r+0xda>
 800cefe:	bf00      	nop
 800cf00:	dfbffffe 	.word	0xdfbffffe

0800cf04 <_fflush_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	690b      	ldr	r3, [r1, #16]
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	b913      	cbnz	r3, 800cf14 <_fflush_r+0x10>
 800cf0e:	2500      	movs	r5, #0
 800cf10:	4628      	mov	r0, r5
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	b118      	cbz	r0, 800cf1e <_fflush_r+0x1a>
 800cf16:	6a03      	ldr	r3, [r0, #32]
 800cf18:	b90b      	cbnz	r3, 800cf1e <_fflush_r+0x1a>
 800cf1a:	f7fd f9d1 	bl	800a2c0 <__sinit>
 800cf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0f3      	beq.n	800cf0e <_fflush_r+0xa>
 800cf26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf28:	07d0      	lsls	r0, r2, #31
 800cf2a:	d404      	bmi.n	800cf36 <_fflush_r+0x32>
 800cf2c:	0599      	lsls	r1, r3, #22
 800cf2e:	d402      	bmi.n	800cf36 <_fflush_r+0x32>
 800cf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf32:	f7fd fb4e 	bl	800a5d2 <__retarget_lock_acquire_recursive>
 800cf36:	4628      	mov	r0, r5
 800cf38:	4621      	mov	r1, r4
 800cf3a:	f7ff ff5d 	bl	800cdf8 <__sflush_r>
 800cf3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf40:	07da      	lsls	r2, r3, #31
 800cf42:	4605      	mov	r5, r0
 800cf44:	d4e4      	bmi.n	800cf10 <_fflush_r+0xc>
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	059b      	lsls	r3, r3, #22
 800cf4a:	d4e1      	bmi.n	800cf10 <_fflush_r+0xc>
 800cf4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf4e:	f7fd fb41 	bl	800a5d4 <__retarget_lock_release_recursive>
 800cf52:	e7dd      	b.n	800cf10 <_fflush_r+0xc>

0800cf54 <__sccl>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	780b      	ldrb	r3, [r1, #0]
 800cf58:	4604      	mov	r4, r0
 800cf5a:	2b5e      	cmp	r3, #94	; 0x5e
 800cf5c:	bf0b      	itete	eq
 800cf5e:	784b      	ldrbeq	r3, [r1, #1]
 800cf60:	1c4a      	addne	r2, r1, #1
 800cf62:	1c8a      	addeq	r2, r1, #2
 800cf64:	2100      	movne	r1, #0
 800cf66:	bf08      	it	eq
 800cf68:	2101      	moveq	r1, #1
 800cf6a:	3801      	subs	r0, #1
 800cf6c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cf70:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cf74:	42a8      	cmp	r0, r5
 800cf76:	d1fb      	bne.n	800cf70 <__sccl+0x1c>
 800cf78:	b90b      	cbnz	r3, 800cf7e <__sccl+0x2a>
 800cf7a:	1e50      	subs	r0, r2, #1
 800cf7c:	bd70      	pop	{r4, r5, r6, pc}
 800cf7e:	f081 0101 	eor.w	r1, r1, #1
 800cf82:	54e1      	strb	r1, [r4, r3]
 800cf84:	4610      	mov	r0, r2
 800cf86:	4602      	mov	r2, r0
 800cf88:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf8c:	2d2d      	cmp	r5, #45	; 0x2d
 800cf8e:	d005      	beq.n	800cf9c <__sccl+0x48>
 800cf90:	2d5d      	cmp	r5, #93	; 0x5d
 800cf92:	d016      	beq.n	800cfc2 <__sccl+0x6e>
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	d0f1      	beq.n	800cf7c <__sccl+0x28>
 800cf98:	462b      	mov	r3, r5
 800cf9a:	e7f2      	b.n	800cf82 <__sccl+0x2e>
 800cf9c:	7846      	ldrb	r6, [r0, #1]
 800cf9e:	2e5d      	cmp	r6, #93	; 0x5d
 800cfa0:	d0fa      	beq.n	800cf98 <__sccl+0x44>
 800cfa2:	42b3      	cmp	r3, r6
 800cfa4:	dcf8      	bgt.n	800cf98 <__sccl+0x44>
 800cfa6:	3002      	adds	r0, #2
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	3201      	adds	r2, #1
 800cfac:	4296      	cmp	r6, r2
 800cfae:	54a1      	strb	r1, [r4, r2]
 800cfb0:	dcfb      	bgt.n	800cfaa <__sccl+0x56>
 800cfb2:	1af2      	subs	r2, r6, r3
 800cfb4:	3a01      	subs	r2, #1
 800cfb6:	1c5d      	adds	r5, r3, #1
 800cfb8:	42b3      	cmp	r3, r6
 800cfba:	bfa8      	it	ge
 800cfbc:	2200      	movge	r2, #0
 800cfbe:	18ab      	adds	r3, r5, r2
 800cfc0:	e7e1      	b.n	800cf86 <__sccl+0x32>
 800cfc2:	4610      	mov	r0, r2
 800cfc4:	e7da      	b.n	800cf7c <__sccl+0x28>

0800cfc6 <__submore>:
 800cfc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfca:	460c      	mov	r4, r1
 800cfcc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cfce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfd2:	4299      	cmp	r1, r3
 800cfd4:	d11d      	bne.n	800d012 <__submore+0x4c>
 800cfd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cfda:	f7fb fb9f 	bl	800871c <_malloc_r>
 800cfde:	b918      	cbnz	r0, 800cfe8 <__submore+0x22>
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfec:	63a3      	str	r3, [r4, #56]	; 0x38
 800cfee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cff2:	6360      	str	r0, [r4, #52]	; 0x34
 800cff4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cff8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cffc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d000:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d004:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d008:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d00c:	6020      	str	r0, [r4, #0]
 800d00e:	2000      	movs	r0, #0
 800d010:	e7e8      	b.n	800cfe4 <__submore+0x1e>
 800d012:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d014:	0077      	lsls	r7, r6, #1
 800d016:	463a      	mov	r2, r7
 800d018:	f7fb fc0c 	bl	8008834 <_realloc_r>
 800d01c:	4605      	mov	r5, r0
 800d01e:	2800      	cmp	r0, #0
 800d020:	d0de      	beq.n	800cfe0 <__submore+0x1a>
 800d022:	eb00 0806 	add.w	r8, r0, r6
 800d026:	4601      	mov	r1, r0
 800d028:	4632      	mov	r2, r6
 800d02a:	4640      	mov	r0, r8
 800d02c:	f7fd fad3 	bl	800a5d6 <memcpy>
 800d030:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d034:	f8c4 8000 	str.w	r8, [r4]
 800d038:	e7e9      	b.n	800d00e <__submore+0x48>

0800d03a <memmove>:
 800d03a:	4288      	cmp	r0, r1
 800d03c:	b510      	push	{r4, lr}
 800d03e:	eb01 0402 	add.w	r4, r1, r2
 800d042:	d902      	bls.n	800d04a <memmove+0x10>
 800d044:	4284      	cmp	r4, r0
 800d046:	4623      	mov	r3, r4
 800d048:	d807      	bhi.n	800d05a <memmove+0x20>
 800d04a:	1e43      	subs	r3, r0, #1
 800d04c:	42a1      	cmp	r1, r4
 800d04e:	d008      	beq.n	800d062 <memmove+0x28>
 800d050:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d054:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d058:	e7f8      	b.n	800d04c <memmove+0x12>
 800d05a:	4402      	add	r2, r0
 800d05c:	4601      	mov	r1, r0
 800d05e:	428a      	cmp	r2, r1
 800d060:	d100      	bne.n	800d064 <memmove+0x2a>
 800d062:	bd10      	pop	{r4, pc}
 800d064:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d068:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d06c:	e7f7      	b.n	800d05e <memmove+0x24>
	...

0800d070 <__assert_func>:
 800d070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d072:	4614      	mov	r4, r2
 800d074:	461a      	mov	r2, r3
 800d076:	4b09      	ldr	r3, [pc, #36]	; (800d09c <__assert_func+0x2c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4605      	mov	r5, r0
 800d07c:	68d8      	ldr	r0, [r3, #12]
 800d07e:	b14c      	cbz	r4, 800d094 <__assert_func+0x24>
 800d080:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <__assert_func+0x30>)
 800d082:	9100      	str	r1, [sp, #0]
 800d084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d088:	4906      	ldr	r1, [pc, #24]	; (800d0a4 <__assert_func+0x34>)
 800d08a:	462b      	mov	r3, r5
 800d08c:	f000 f898 	bl	800d1c0 <fiprintf>
 800d090:	f000 f8a8 	bl	800d1e4 <abort>
 800d094:	4b04      	ldr	r3, [pc, #16]	; (800d0a8 <__assert_func+0x38>)
 800d096:	461c      	mov	r4, r3
 800d098:	e7f3      	b.n	800d082 <__assert_func+0x12>
 800d09a:	bf00      	nop
 800d09c:	200001d8 	.word	0x200001d8
 800d0a0:	0800dcc0 	.word	0x0800dcc0
 800d0a4:	0800dccd 	.word	0x0800dccd
 800d0a8:	0800dcfb 	.word	0x0800dcfb

0800d0ac <_calloc_r>:
 800d0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0ae:	fba1 2402 	umull	r2, r4, r1, r2
 800d0b2:	b94c      	cbnz	r4, 800d0c8 <_calloc_r+0x1c>
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	9201      	str	r2, [sp, #4]
 800d0b8:	f7fb fb30 	bl	800871c <_malloc_r>
 800d0bc:	9a01      	ldr	r2, [sp, #4]
 800d0be:	4605      	mov	r5, r0
 800d0c0:	b930      	cbnz	r0, 800d0d0 <_calloc_r+0x24>
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	b003      	add	sp, #12
 800d0c6:	bd30      	pop	{r4, r5, pc}
 800d0c8:	220c      	movs	r2, #12
 800d0ca:	6002      	str	r2, [r0, #0]
 800d0cc:	2500      	movs	r5, #0
 800d0ce:	e7f8      	b.n	800d0c2 <_calloc_r+0x16>
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	f7fd f9bc 	bl	800a44e <memset>
 800d0d6:	e7f4      	b.n	800d0c2 <_calloc_r+0x16>

0800d0d8 <_strtoul_l.constprop.0>:
 800d0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	4f36      	ldr	r7, [pc, #216]	; (800d1b8 <_strtoul_l.constprop.0+0xe0>)
 800d0de:	4686      	mov	lr, r0
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0e8:	5d3e      	ldrb	r6, [r7, r4]
 800d0ea:	f016 0608 	ands.w	r6, r6, #8
 800d0ee:	d1f8      	bne.n	800d0e2 <_strtoul_l.constprop.0+0xa>
 800d0f0:	2c2d      	cmp	r4, #45	; 0x2d
 800d0f2:	d130      	bne.n	800d156 <_strtoul_l.constprop.0+0x7e>
 800d0f4:	782c      	ldrb	r4, [r5, #0]
 800d0f6:	2601      	movs	r6, #1
 800d0f8:	1c85      	adds	r5, r0, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d057      	beq.n	800d1ae <_strtoul_l.constprop.0+0xd6>
 800d0fe:	2b10      	cmp	r3, #16
 800d100:	d109      	bne.n	800d116 <_strtoul_l.constprop.0+0x3e>
 800d102:	2c30      	cmp	r4, #48	; 0x30
 800d104:	d107      	bne.n	800d116 <_strtoul_l.constprop.0+0x3e>
 800d106:	7828      	ldrb	r0, [r5, #0]
 800d108:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d10c:	2858      	cmp	r0, #88	; 0x58
 800d10e:	d149      	bne.n	800d1a4 <_strtoul_l.constprop.0+0xcc>
 800d110:	786c      	ldrb	r4, [r5, #1]
 800d112:	2310      	movs	r3, #16
 800d114:	3502      	adds	r5, #2
 800d116:	f04f 38ff 	mov.w	r8, #4294967295
 800d11a:	2700      	movs	r7, #0
 800d11c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d120:	fb03 f908 	mul.w	r9, r3, r8
 800d124:	ea6f 0909 	mvn.w	r9, r9
 800d128:	4638      	mov	r0, r7
 800d12a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d12e:	f1bc 0f09 	cmp.w	ip, #9
 800d132:	d815      	bhi.n	800d160 <_strtoul_l.constprop.0+0x88>
 800d134:	4664      	mov	r4, ip
 800d136:	42a3      	cmp	r3, r4
 800d138:	dd23      	ble.n	800d182 <_strtoul_l.constprop.0+0xaa>
 800d13a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800d13e:	d007      	beq.n	800d150 <_strtoul_l.constprop.0+0x78>
 800d140:	4580      	cmp	r8, r0
 800d142:	d31b      	bcc.n	800d17c <_strtoul_l.constprop.0+0xa4>
 800d144:	d101      	bne.n	800d14a <_strtoul_l.constprop.0+0x72>
 800d146:	45a1      	cmp	r9, r4
 800d148:	db18      	blt.n	800d17c <_strtoul_l.constprop.0+0xa4>
 800d14a:	fb00 4003 	mla	r0, r0, r3, r4
 800d14e:	2701      	movs	r7, #1
 800d150:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d154:	e7e9      	b.n	800d12a <_strtoul_l.constprop.0+0x52>
 800d156:	2c2b      	cmp	r4, #43	; 0x2b
 800d158:	bf04      	itt	eq
 800d15a:	782c      	ldrbeq	r4, [r5, #0]
 800d15c:	1c85      	addeq	r5, r0, #2
 800d15e:	e7cc      	b.n	800d0fa <_strtoul_l.constprop.0+0x22>
 800d160:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d164:	f1bc 0f19 	cmp.w	ip, #25
 800d168:	d801      	bhi.n	800d16e <_strtoul_l.constprop.0+0x96>
 800d16a:	3c37      	subs	r4, #55	; 0x37
 800d16c:	e7e3      	b.n	800d136 <_strtoul_l.constprop.0+0x5e>
 800d16e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d172:	f1bc 0f19 	cmp.w	ip, #25
 800d176:	d804      	bhi.n	800d182 <_strtoul_l.constprop.0+0xaa>
 800d178:	3c57      	subs	r4, #87	; 0x57
 800d17a:	e7dc      	b.n	800d136 <_strtoul_l.constprop.0+0x5e>
 800d17c:	f04f 37ff 	mov.w	r7, #4294967295
 800d180:	e7e6      	b.n	800d150 <_strtoul_l.constprop.0+0x78>
 800d182:	1c7b      	adds	r3, r7, #1
 800d184:	d106      	bne.n	800d194 <_strtoul_l.constprop.0+0xbc>
 800d186:	2322      	movs	r3, #34	; 0x22
 800d188:	f8ce 3000 	str.w	r3, [lr]
 800d18c:	4638      	mov	r0, r7
 800d18e:	b932      	cbnz	r2, 800d19e <_strtoul_l.constprop.0+0xc6>
 800d190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d194:	b106      	cbz	r6, 800d198 <_strtoul_l.constprop.0+0xc0>
 800d196:	4240      	negs	r0, r0
 800d198:	2a00      	cmp	r2, #0
 800d19a:	d0f9      	beq.n	800d190 <_strtoul_l.constprop.0+0xb8>
 800d19c:	b107      	cbz	r7, 800d1a0 <_strtoul_l.constprop.0+0xc8>
 800d19e:	1e69      	subs	r1, r5, #1
 800d1a0:	6011      	str	r1, [r2, #0]
 800d1a2:	e7f5      	b.n	800d190 <_strtoul_l.constprop.0+0xb8>
 800d1a4:	2430      	movs	r4, #48	; 0x30
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1b5      	bne.n	800d116 <_strtoul_l.constprop.0+0x3e>
 800d1aa:	2308      	movs	r3, #8
 800d1ac:	e7b3      	b.n	800d116 <_strtoul_l.constprop.0+0x3e>
 800d1ae:	2c30      	cmp	r4, #48	; 0x30
 800d1b0:	d0a9      	beq.n	800d106 <_strtoul_l.constprop.0+0x2e>
 800d1b2:	230a      	movs	r3, #10
 800d1b4:	e7af      	b.n	800d116 <_strtoul_l.constprop.0+0x3e>
 800d1b6:	bf00      	nop
 800d1b8:	0800d911 	.word	0x0800d911

0800d1bc <_strtoul_r>:
 800d1bc:	f7ff bf8c 	b.w	800d0d8 <_strtoul_l.constprop.0>

0800d1c0 <fiprintf>:
 800d1c0:	b40e      	push	{r1, r2, r3}
 800d1c2:	b503      	push	{r0, r1, lr}
 800d1c4:	4601      	mov	r1, r0
 800d1c6:	ab03      	add	r3, sp, #12
 800d1c8:	4805      	ldr	r0, [pc, #20]	; (800d1e0 <fiprintf+0x20>)
 800d1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ce:	6800      	ldr	r0, [r0, #0]
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	f000 f837 	bl	800d244 <_vfiprintf_r>
 800d1d6:	b002      	add	sp, #8
 800d1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1dc:	b003      	add	sp, #12
 800d1de:	4770      	bx	lr
 800d1e0:	200001d8 	.word	0x200001d8

0800d1e4 <abort>:
 800d1e4:	b508      	push	{r3, lr}
 800d1e6:	2006      	movs	r0, #6
 800d1e8:	f000 fa04 	bl	800d5f4 <raise>
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	f7f6 f9eb 	bl	80035c8 <_exit>

0800d1f2 <__sfputc_r>:
 800d1f2:	6893      	ldr	r3, [r2, #8]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	b410      	push	{r4}
 800d1fa:	6093      	str	r3, [r2, #8]
 800d1fc:	da08      	bge.n	800d210 <__sfputc_r+0x1e>
 800d1fe:	6994      	ldr	r4, [r2, #24]
 800d200:	42a3      	cmp	r3, r4
 800d202:	db01      	blt.n	800d208 <__sfputc_r+0x16>
 800d204:	290a      	cmp	r1, #10
 800d206:	d103      	bne.n	800d210 <__sfputc_r+0x1e>
 800d208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20c:	f000 b934 	b.w	800d478 <__swbuf_r>
 800d210:	6813      	ldr	r3, [r2, #0]
 800d212:	1c58      	adds	r0, r3, #1
 800d214:	6010      	str	r0, [r2, #0]
 800d216:	7019      	strb	r1, [r3, #0]
 800d218:	4608      	mov	r0, r1
 800d21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <__sfputs_r>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	4606      	mov	r6, r0
 800d224:	460f      	mov	r7, r1
 800d226:	4614      	mov	r4, r2
 800d228:	18d5      	adds	r5, r2, r3
 800d22a:	42ac      	cmp	r4, r5
 800d22c:	d101      	bne.n	800d232 <__sfputs_r+0x12>
 800d22e:	2000      	movs	r0, #0
 800d230:	e007      	b.n	800d242 <__sfputs_r+0x22>
 800d232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d236:	463a      	mov	r2, r7
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ffda 	bl	800d1f2 <__sfputc_r>
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	d1f3      	bne.n	800d22a <__sfputs_r+0xa>
 800d242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d244 <_vfiprintf_r>:
 800d244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d248:	460d      	mov	r5, r1
 800d24a:	b09d      	sub	sp, #116	; 0x74
 800d24c:	4614      	mov	r4, r2
 800d24e:	4698      	mov	r8, r3
 800d250:	4606      	mov	r6, r0
 800d252:	b118      	cbz	r0, 800d25c <_vfiprintf_r+0x18>
 800d254:	6a03      	ldr	r3, [r0, #32]
 800d256:	b90b      	cbnz	r3, 800d25c <_vfiprintf_r+0x18>
 800d258:	f7fd f832 	bl	800a2c0 <__sinit>
 800d25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d25e:	07d9      	lsls	r1, r3, #31
 800d260:	d405      	bmi.n	800d26e <_vfiprintf_r+0x2a>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	059a      	lsls	r2, r3, #22
 800d266:	d402      	bmi.n	800d26e <_vfiprintf_r+0x2a>
 800d268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d26a:	f7fd f9b2 	bl	800a5d2 <__retarget_lock_acquire_recursive>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	071b      	lsls	r3, r3, #28
 800d272:	d501      	bpl.n	800d278 <_vfiprintf_r+0x34>
 800d274:	692b      	ldr	r3, [r5, #16]
 800d276:	b99b      	cbnz	r3, 800d2a0 <_vfiprintf_r+0x5c>
 800d278:	4629      	mov	r1, r5
 800d27a:	4630      	mov	r0, r6
 800d27c:	f000 f93a 	bl	800d4f4 <__swsetup_r>
 800d280:	b170      	cbz	r0, 800d2a0 <_vfiprintf_r+0x5c>
 800d282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d284:	07dc      	lsls	r4, r3, #31
 800d286:	d504      	bpl.n	800d292 <_vfiprintf_r+0x4e>
 800d288:	f04f 30ff 	mov.w	r0, #4294967295
 800d28c:	b01d      	add	sp, #116	; 0x74
 800d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d292:	89ab      	ldrh	r3, [r5, #12]
 800d294:	0598      	lsls	r0, r3, #22
 800d296:	d4f7      	bmi.n	800d288 <_vfiprintf_r+0x44>
 800d298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d29a:	f7fd f99b 	bl	800a5d4 <__retarget_lock_release_recursive>
 800d29e:	e7f3      	b.n	800d288 <_vfiprintf_r+0x44>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a4:	2320      	movs	r3, #32
 800d2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ae:	2330      	movs	r3, #48	; 0x30
 800d2b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d464 <_vfiprintf_r+0x220>
 800d2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2b8:	f04f 0901 	mov.w	r9, #1
 800d2bc:	4623      	mov	r3, r4
 800d2be:	469a      	mov	sl, r3
 800d2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c4:	b10a      	cbz	r2, 800d2ca <_vfiprintf_r+0x86>
 800d2c6:	2a25      	cmp	r2, #37	; 0x25
 800d2c8:	d1f9      	bne.n	800d2be <_vfiprintf_r+0x7a>
 800d2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ce:	d00b      	beq.n	800d2e8 <_vfiprintf_r+0xa4>
 800d2d0:	465b      	mov	r3, fp
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f7ff ffa2 	bl	800d220 <__sfputs_r>
 800d2dc:	3001      	adds	r0, #1
 800d2de:	f000 80a9 	beq.w	800d434 <_vfiprintf_r+0x1f0>
 800d2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2e4:	445a      	add	r2, fp
 800d2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 80a1 	beq.w	800d434 <_vfiprintf_r+0x1f0>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2fc:	f10a 0a01 	add.w	sl, sl, #1
 800d300:	9304      	str	r3, [sp, #16]
 800d302:	9307      	str	r3, [sp, #28]
 800d304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d308:	931a      	str	r3, [sp, #104]	; 0x68
 800d30a:	4654      	mov	r4, sl
 800d30c:	2205      	movs	r2, #5
 800d30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d312:	4854      	ldr	r0, [pc, #336]	; (800d464 <_vfiprintf_r+0x220>)
 800d314:	f7f2 ff5c 	bl	80001d0 <memchr>
 800d318:	9a04      	ldr	r2, [sp, #16]
 800d31a:	b9d8      	cbnz	r0, 800d354 <_vfiprintf_r+0x110>
 800d31c:	06d1      	lsls	r1, r2, #27
 800d31e:	bf44      	itt	mi
 800d320:	2320      	movmi	r3, #32
 800d322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d326:	0713      	lsls	r3, r2, #28
 800d328:	bf44      	itt	mi
 800d32a:	232b      	movmi	r3, #43	; 0x2b
 800d32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d330:	f89a 3000 	ldrb.w	r3, [sl]
 800d334:	2b2a      	cmp	r3, #42	; 0x2a
 800d336:	d015      	beq.n	800d364 <_vfiprintf_r+0x120>
 800d338:	9a07      	ldr	r2, [sp, #28]
 800d33a:	4654      	mov	r4, sl
 800d33c:	2000      	movs	r0, #0
 800d33e:	f04f 0c0a 	mov.w	ip, #10
 800d342:	4621      	mov	r1, r4
 800d344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d348:	3b30      	subs	r3, #48	; 0x30
 800d34a:	2b09      	cmp	r3, #9
 800d34c:	d94d      	bls.n	800d3ea <_vfiprintf_r+0x1a6>
 800d34e:	b1b0      	cbz	r0, 800d37e <_vfiprintf_r+0x13a>
 800d350:	9207      	str	r2, [sp, #28]
 800d352:	e014      	b.n	800d37e <_vfiprintf_r+0x13a>
 800d354:	eba0 0308 	sub.w	r3, r0, r8
 800d358:	fa09 f303 	lsl.w	r3, r9, r3
 800d35c:	4313      	orrs	r3, r2
 800d35e:	9304      	str	r3, [sp, #16]
 800d360:	46a2      	mov	sl, r4
 800d362:	e7d2      	b.n	800d30a <_vfiprintf_r+0xc6>
 800d364:	9b03      	ldr	r3, [sp, #12]
 800d366:	1d19      	adds	r1, r3, #4
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	9103      	str	r1, [sp, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bfbb      	ittet	lt
 800d370:	425b      	neglt	r3, r3
 800d372:	f042 0202 	orrlt.w	r2, r2, #2
 800d376:	9307      	strge	r3, [sp, #28]
 800d378:	9307      	strlt	r3, [sp, #28]
 800d37a:	bfb8      	it	lt
 800d37c:	9204      	strlt	r2, [sp, #16]
 800d37e:	7823      	ldrb	r3, [r4, #0]
 800d380:	2b2e      	cmp	r3, #46	; 0x2e
 800d382:	d10c      	bne.n	800d39e <_vfiprintf_r+0x15a>
 800d384:	7863      	ldrb	r3, [r4, #1]
 800d386:	2b2a      	cmp	r3, #42	; 0x2a
 800d388:	d134      	bne.n	800d3f4 <_vfiprintf_r+0x1b0>
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	1d1a      	adds	r2, r3, #4
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	9203      	str	r2, [sp, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	bfb8      	it	lt
 800d396:	f04f 33ff 	movlt.w	r3, #4294967295
 800d39a:	3402      	adds	r4, #2
 800d39c:	9305      	str	r3, [sp, #20]
 800d39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d474 <_vfiprintf_r+0x230>
 800d3a2:	7821      	ldrb	r1, [r4, #0]
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	4650      	mov	r0, sl
 800d3a8:	f7f2 ff12 	bl	80001d0 <memchr>
 800d3ac:	b138      	cbz	r0, 800d3be <_vfiprintf_r+0x17a>
 800d3ae:	9b04      	ldr	r3, [sp, #16]
 800d3b0:	eba0 000a 	sub.w	r0, r0, sl
 800d3b4:	2240      	movs	r2, #64	; 0x40
 800d3b6:	4082      	lsls	r2, r0
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	3401      	adds	r4, #1
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c2:	4829      	ldr	r0, [pc, #164]	; (800d468 <_vfiprintf_r+0x224>)
 800d3c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3c8:	2206      	movs	r2, #6
 800d3ca:	f7f2 ff01 	bl	80001d0 <memchr>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d03f      	beq.n	800d452 <_vfiprintf_r+0x20e>
 800d3d2:	4b26      	ldr	r3, [pc, #152]	; (800d46c <_vfiprintf_r+0x228>)
 800d3d4:	bb1b      	cbnz	r3, 800d41e <_vfiprintf_r+0x1da>
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	3307      	adds	r3, #7
 800d3da:	f023 0307 	bic.w	r3, r3, #7
 800d3de:	3308      	adds	r3, #8
 800d3e0:	9303      	str	r3, [sp, #12]
 800d3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3e4:	443b      	add	r3, r7
 800d3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3e8:	e768      	b.n	800d2bc <_vfiprintf_r+0x78>
 800d3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	e7a6      	b.n	800d342 <_vfiprintf_r+0xfe>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	3401      	adds	r4, #1
 800d3f8:	9305      	str	r3, [sp, #20]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	f04f 0c0a 	mov.w	ip, #10
 800d400:	4620      	mov	r0, r4
 800d402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d406:	3a30      	subs	r2, #48	; 0x30
 800d408:	2a09      	cmp	r2, #9
 800d40a:	d903      	bls.n	800d414 <_vfiprintf_r+0x1d0>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d0c6      	beq.n	800d39e <_vfiprintf_r+0x15a>
 800d410:	9105      	str	r1, [sp, #20]
 800d412:	e7c4      	b.n	800d39e <_vfiprintf_r+0x15a>
 800d414:	fb0c 2101 	mla	r1, ip, r1, r2
 800d418:	4604      	mov	r4, r0
 800d41a:	2301      	movs	r3, #1
 800d41c:	e7f0      	b.n	800d400 <_vfiprintf_r+0x1bc>
 800d41e:	ab03      	add	r3, sp, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	462a      	mov	r2, r5
 800d424:	4b12      	ldr	r3, [pc, #72]	; (800d470 <_vfiprintf_r+0x22c>)
 800d426:	a904      	add	r1, sp, #16
 800d428:	4630      	mov	r0, r6
 800d42a:	f7fc f8e7 	bl	80095fc <_printf_float>
 800d42e:	4607      	mov	r7, r0
 800d430:	1c78      	adds	r0, r7, #1
 800d432:	d1d6      	bne.n	800d3e2 <_vfiprintf_r+0x19e>
 800d434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d436:	07d9      	lsls	r1, r3, #31
 800d438:	d405      	bmi.n	800d446 <_vfiprintf_r+0x202>
 800d43a:	89ab      	ldrh	r3, [r5, #12]
 800d43c:	059a      	lsls	r2, r3, #22
 800d43e:	d402      	bmi.n	800d446 <_vfiprintf_r+0x202>
 800d440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d442:	f7fd f8c7 	bl	800a5d4 <__retarget_lock_release_recursive>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	065b      	lsls	r3, r3, #25
 800d44a:	f53f af1d 	bmi.w	800d288 <_vfiprintf_r+0x44>
 800d44e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d450:	e71c      	b.n	800d28c <_vfiprintf_r+0x48>
 800d452:	ab03      	add	r3, sp, #12
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	462a      	mov	r2, r5
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <_vfiprintf_r+0x22c>)
 800d45a:	a904      	add	r1, sp, #16
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7fc fb71 	bl	8009b44 <_printf_i>
 800d462:	e7e4      	b.n	800d42e <_vfiprintf_r+0x1ea>
 800d464:	0800dc94 	.word	0x0800dc94
 800d468:	0800dc9e 	.word	0x0800dc9e
 800d46c:	080095fd 	.word	0x080095fd
 800d470:	0800d221 	.word	0x0800d221
 800d474:	0800dc9a 	.word	0x0800dc9a

0800d478 <__swbuf_r>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	460e      	mov	r6, r1
 800d47c:	4614      	mov	r4, r2
 800d47e:	4605      	mov	r5, r0
 800d480:	b118      	cbz	r0, 800d48a <__swbuf_r+0x12>
 800d482:	6a03      	ldr	r3, [r0, #32]
 800d484:	b90b      	cbnz	r3, 800d48a <__swbuf_r+0x12>
 800d486:	f7fc ff1b 	bl	800a2c0 <__sinit>
 800d48a:	69a3      	ldr	r3, [r4, #24]
 800d48c:	60a3      	str	r3, [r4, #8]
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	071a      	lsls	r2, r3, #28
 800d492:	d525      	bpl.n	800d4e0 <__swbuf_r+0x68>
 800d494:	6923      	ldr	r3, [r4, #16]
 800d496:	b31b      	cbz	r3, 800d4e0 <__swbuf_r+0x68>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	6922      	ldr	r2, [r4, #16]
 800d49c:	1a98      	subs	r0, r3, r2
 800d49e:	6963      	ldr	r3, [r4, #20]
 800d4a0:	b2f6      	uxtb	r6, r6
 800d4a2:	4283      	cmp	r3, r0
 800d4a4:	4637      	mov	r7, r6
 800d4a6:	dc04      	bgt.n	800d4b2 <__swbuf_r+0x3a>
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f7ff fd2a 	bl	800cf04 <_fflush_r>
 800d4b0:	b9e0      	cbnz	r0, 800d4ec <__swbuf_r+0x74>
 800d4b2:	68a3      	ldr	r3, [r4, #8]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	60a3      	str	r3, [r4, #8]
 800d4b8:	6823      	ldr	r3, [r4, #0]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	6022      	str	r2, [r4, #0]
 800d4be:	701e      	strb	r6, [r3, #0]
 800d4c0:	6962      	ldr	r2, [r4, #20]
 800d4c2:	1c43      	adds	r3, r0, #1
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d004      	beq.n	800d4d2 <__swbuf_r+0x5a>
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	07db      	lsls	r3, r3, #31
 800d4cc:	d506      	bpl.n	800d4dc <__swbuf_r+0x64>
 800d4ce:	2e0a      	cmp	r6, #10
 800d4d0:	d104      	bne.n	800d4dc <__swbuf_r+0x64>
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f7ff fd15 	bl	800cf04 <_fflush_r>
 800d4da:	b938      	cbnz	r0, 800d4ec <__swbuf_r+0x74>
 800d4dc:	4638      	mov	r0, r7
 800d4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f000 f806 	bl	800d4f4 <__swsetup_r>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d0d5      	beq.n	800d498 <__swbuf_r+0x20>
 800d4ec:	f04f 37ff 	mov.w	r7, #4294967295
 800d4f0:	e7f4      	b.n	800d4dc <__swbuf_r+0x64>
	...

0800d4f4 <__swsetup_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4b2a      	ldr	r3, [pc, #168]	; (800d5a0 <__swsetup_r+0xac>)
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	b118      	cbz	r0, 800d508 <__swsetup_r+0x14>
 800d500:	6a03      	ldr	r3, [r0, #32]
 800d502:	b90b      	cbnz	r3, 800d508 <__swsetup_r+0x14>
 800d504:	f7fc fedc 	bl	800a2c0 <__sinit>
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d50e:	0718      	lsls	r0, r3, #28
 800d510:	d422      	bmi.n	800d558 <__swsetup_r+0x64>
 800d512:	06d9      	lsls	r1, r3, #27
 800d514:	d407      	bmi.n	800d526 <__swsetup_r+0x32>
 800d516:	2309      	movs	r3, #9
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d51e:	81a3      	strh	r3, [r4, #12]
 800d520:	f04f 30ff 	mov.w	r0, #4294967295
 800d524:	e034      	b.n	800d590 <__swsetup_r+0x9c>
 800d526:	0758      	lsls	r0, r3, #29
 800d528:	d512      	bpl.n	800d550 <__swsetup_r+0x5c>
 800d52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d52c:	b141      	cbz	r1, 800d540 <__swsetup_r+0x4c>
 800d52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d532:	4299      	cmp	r1, r3
 800d534:	d002      	beq.n	800d53c <__swsetup_r+0x48>
 800d536:	4628      	mov	r0, r5
 800d538:	f7fd fee8 	bl	800b30c <_free_r>
 800d53c:	2300      	movs	r3, #0
 800d53e:	6363      	str	r3, [r4, #52]	; 0x34
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d546:	81a3      	strh	r3, [r4, #12]
 800d548:	2300      	movs	r3, #0
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	f043 0308 	orr.w	r3, r3, #8
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	b94b      	cbnz	r3, 800d570 <__swsetup_r+0x7c>
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d566:	d003      	beq.n	800d570 <__swsetup_r+0x7c>
 800d568:	4621      	mov	r1, r4
 800d56a:	4628      	mov	r0, r5
 800d56c:	f000 f884 	bl	800d678 <__smakebuf_r>
 800d570:	89a0      	ldrh	r0, [r4, #12]
 800d572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d576:	f010 0301 	ands.w	r3, r0, #1
 800d57a:	d00a      	beq.n	800d592 <__swsetup_r+0x9e>
 800d57c:	2300      	movs	r3, #0
 800d57e:	60a3      	str	r3, [r4, #8]
 800d580:	6963      	ldr	r3, [r4, #20]
 800d582:	425b      	negs	r3, r3
 800d584:	61a3      	str	r3, [r4, #24]
 800d586:	6923      	ldr	r3, [r4, #16]
 800d588:	b943      	cbnz	r3, 800d59c <__swsetup_r+0xa8>
 800d58a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d58e:	d1c4      	bne.n	800d51a <__swsetup_r+0x26>
 800d590:	bd38      	pop	{r3, r4, r5, pc}
 800d592:	0781      	lsls	r1, r0, #30
 800d594:	bf58      	it	pl
 800d596:	6963      	ldrpl	r3, [r4, #20]
 800d598:	60a3      	str	r3, [r4, #8]
 800d59a:	e7f4      	b.n	800d586 <__swsetup_r+0x92>
 800d59c:	2000      	movs	r0, #0
 800d59e:	e7f7      	b.n	800d590 <__swsetup_r+0x9c>
 800d5a0:	200001d8 	.word	0x200001d8

0800d5a4 <_raise_r>:
 800d5a4:	291f      	cmp	r1, #31
 800d5a6:	b538      	push	{r3, r4, r5, lr}
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	d904      	bls.n	800d5b8 <_raise_r+0x14>
 800d5ae:	2316      	movs	r3, #22
 800d5b0:	6003      	str	r3, [r0, #0]
 800d5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5ba:	b112      	cbz	r2, 800d5c2 <_raise_r+0x1e>
 800d5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5c0:	b94b      	cbnz	r3, 800d5d6 <_raise_r+0x32>
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	f000 f830 	bl	800d628 <_getpid_r>
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4601      	mov	r1, r0
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5d2:	f000 b817 	b.w	800d604 <_kill_r>
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d00a      	beq.n	800d5f0 <_raise_r+0x4c>
 800d5da:	1c59      	adds	r1, r3, #1
 800d5dc:	d103      	bne.n	800d5e6 <_raise_r+0x42>
 800d5de:	2316      	movs	r3, #22
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	2001      	movs	r0, #1
 800d5e4:	e7e7      	b.n	800d5b6 <_raise_r+0x12>
 800d5e6:	2400      	movs	r4, #0
 800d5e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	4798      	blx	r3
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	e7e0      	b.n	800d5b6 <_raise_r+0x12>

0800d5f4 <raise>:
 800d5f4:	4b02      	ldr	r3, [pc, #8]	; (800d600 <raise+0xc>)
 800d5f6:	4601      	mov	r1, r0
 800d5f8:	6818      	ldr	r0, [r3, #0]
 800d5fa:	f7ff bfd3 	b.w	800d5a4 <_raise_r>
 800d5fe:	bf00      	nop
 800d600:	200001d8 	.word	0x200001d8

0800d604 <_kill_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4d07      	ldr	r5, [pc, #28]	; (800d624 <_kill_r+0x20>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	4611      	mov	r1, r2
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	f7f5 ffc9 	bl	80035a8 <_kill>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	d102      	bne.n	800d620 <_kill_r+0x1c>
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	b103      	cbz	r3, 800d620 <_kill_r+0x1c>
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	bd38      	pop	{r3, r4, r5, pc}
 800d622:	bf00      	nop
 800d624:	20004acc 	.word	0x20004acc

0800d628 <_getpid_r>:
 800d628:	f7f5 bfb6 	b.w	8003598 <_getpid>

0800d62c <__swhatbuf_r>:
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	460c      	mov	r4, r1
 800d630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d634:	2900      	cmp	r1, #0
 800d636:	b096      	sub	sp, #88	; 0x58
 800d638:	4615      	mov	r5, r2
 800d63a:	461e      	mov	r6, r3
 800d63c:	da0d      	bge.n	800d65a <__swhatbuf_r+0x2e>
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d644:	f04f 0100 	mov.w	r1, #0
 800d648:	bf0c      	ite	eq
 800d64a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d64e:	2340      	movne	r3, #64	; 0x40
 800d650:	2000      	movs	r0, #0
 800d652:	6031      	str	r1, [r6, #0]
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	b016      	add	sp, #88	; 0x58
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	466a      	mov	r2, sp
 800d65c:	f000 f848 	bl	800d6f0 <_fstat_r>
 800d660:	2800      	cmp	r0, #0
 800d662:	dbec      	blt.n	800d63e <__swhatbuf_r+0x12>
 800d664:	9901      	ldr	r1, [sp, #4]
 800d666:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d66a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d66e:	4259      	negs	r1, r3
 800d670:	4159      	adcs	r1, r3
 800d672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d676:	e7eb      	b.n	800d650 <__swhatbuf_r+0x24>

0800d678 <__smakebuf_r>:
 800d678:	898b      	ldrh	r3, [r1, #12]
 800d67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d67c:	079d      	lsls	r5, r3, #30
 800d67e:	4606      	mov	r6, r0
 800d680:	460c      	mov	r4, r1
 800d682:	d507      	bpl.n	800d694 <__smakebuf_r+0x1c>
 800d684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	2301      	movs	r3, #1
 800d68e:	6163      	str	r3, [r4, #20]
 800d690:	b002      	add	sp, #8
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	ab01      	add	r3, sp, #4
 800d696:	466a      	mov	r2, sp
 800d698:	f7ff ffc8 	bl	800d62c <__swhatbuf_r>
 800d69c:	9900      	ldr	r1, [sp, #0]
 800d69e:	4605      	mov	r5, r0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fb f83b 	bl	800871c <_malloc_r>
 800d6a6:	b948      	cbnz	r0, 800d6bc <__smakebuf_r+0x44>
 800d6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ac:	059a      	lsls	r2, r3, #22
 800d6ae:	d4ef      	bmi.n	800d690 <__smakebuf_r+0x18>
 800d6b0:	f023 0303 	bic.w	r3, r3, #3
 800d6b4:	f043 0302 	orr.w	r3, r3, #2
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	e7e3      	b.n	800d684 <__smakebuf_r+0xc>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	6020      	str	r0, [r4, #0]
 800d6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	9b00      	ldr	r3, [sp, #0]
 800d6c8:	6163      	str	r3, [r4, #20]
 800d6ca:	9b01      	ldr	r3, [sp, #4]
 800d6cc:	6120      	str	r0, [r4, #16]
 800d6ce:	b15b      	cbz	r3, 800d6e8 <__smakebuf_r+0x70>
 800d6d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f000 f81d 	bl	800d714 <_isatty_r>
 800d6da:	b128      	cbz	r0, 800d6e8 <__smakebuf_r+0x70>
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	f023 0303 	bic.w	r3, r3, #3
 800d6e2:	f043 0301 	orr.w	r3, r3, #1
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	431d      	orrs	r5, r3
 800d6ec:	81a5      	strh	r5, [r4, #12]
 800d6ee:	e7cf      	b.n	800d690 <__smakebuf_r+0x18>

0800d6f0 <_fstat_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4d07      	ldr	r5, [pc, #28]	; (800d710 <_fstat_r+0x20>)
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	f7f5 ffb2 	bl	8003666 <_fstat>
 800d702:	1c43      	adds	r3, r0, #1
 800d704:	d102      	bne.n	800d70c <_fstat_r+0x1c>
 800d706:	682b      	ldr	r3, [r5, #0]
 800d708:	b103      	cbz	r3, 800d70c <_fstat_r+0x1c>
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	bf00      	nop
 800d710:	20004acc 	.word	0x20004acc

0800d714 <_isatty_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4d06      	ldr	r5, [pc, #24]	; (800d730 <_isatty_r+0x1c>)
 800d718:	2300      	movs	r3, #0
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	602b      	str	r3, [r5, #0]
 800d720:	f7f5 ffb1 	bl	8003686 <_isatty>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_isatty_r+0x1a>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_isatty_r+0x1a>
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	20004acc 	.word	0x20004acc

0800d734 <_init>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr

0800d740 <_fini>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	bf00      	nop
 800d744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d746:	bc08      	pop	{r3}
 800d748:	469e      	mov	lr, r3
 800d74a:	4770      	bx	lr
